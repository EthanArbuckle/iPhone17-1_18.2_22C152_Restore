uint64_t closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  void v11[5];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  v16 = a6;
  v11[2] = type metadata accessor for CollectionViewTableRoot();
  v11[3] = a3;
  v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, a3, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v12;
}

uint64_t closure #2 in static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v8 = type metadata accessor for CollectionViewTableRoot();
  uint64_t v9 = a1 + *(int *)(v8 + 60);
  v13[2] = v8;
  v13[3] = a4;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, a4, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14;
}

unint64_t UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)@<X0>(int a1@<W0>, int a2@<W1>, int *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int v16 = *a3;
  uint64_t v17 = *a4;
  int v18 = *((_DWORD *)a4 + 2);
  uint64_t v85 = a4[2];
  unsigned int v19 = *((_DWORD *)a4 + 6);
  unsigned int v86 = *((_DWORD *)a4 + 7);
  unsigned int v87 = v19;
  unsigned int v83 = *((_DWORD *)a4 + 8);
  int v84 = v18;
  unsigned int v20 = *((_DWORD *)a4 + 9);
  uint64_t v76 = a4[5];
  uint64_t v88 = a4[6];
  uint64_t v89 = v17;
  int v81 = *((_DWORD *)a4 + 14);
  unsigned int v82 = v20;
  int v75 = *((_DWORD *)a4 + 15);
  LODWORD(v17) = *((_DWORD *)a4 + 16);
  int v79 = *((_DWORD *)a4 + 17);
  int v80 = v17;
  int v78 = *((_DWORD *)a4 + 18);
  int v73 = *((_DWORD *)a4 + 19);
  int v77 = *((_DWORD *)a4 + 20);
  swift_unknownObjectWeakInit();
  *(_OWORD *)(a9 + 243) = 0u;
  *(_OWORD *)(a9 + 232) = 0u;
  *(_OWORD *)(a9 + 216) = 0u;
  *(_OWORD *)(a9 + 200) = 0u;
  *(_OWORD *)(a9 + 184) = 0u;
  *(_OWORD *)(a9 + 168) = 0u;
  *(_OWORD *)(a9 + 152) = 0u;
  *(_OWORD *)(a9 + 136) = 0u;
  *(_OWORD *)(a9 + 120) = 0u;
  *(_OWORD *)(a9 + 104) = 0u;
  *(_OWORD *)(a9 + 88) = 0u;
  unint64_t result = (unint64_t)(id)AGSubgraphGetCurrent();
  if (result)
  {
    v74 = &v70;
    *(void *)(a9 + 264) = result;
    *(_DWORD *)a9 = a1;
    *(_DWORD *)(a9 + 4) = a2;
    MEMORY[0x1F4188790](result);
    v69[2] = a5;
    v69[3] = a6;
    v69[4] = a7;
    v69[5] = a8;
    v69[6] = v22;
    int v72 = v16;
    int v104 = v16;
    uint64_t v90 = a5;
    uint64_t v91 = a6;
    uint64_t v92 = a7;
    unint64_t v93 = a8;
    unint64_t v94 = v22;
    unint64_t v23 = v22;
    unint64_t v71 = v22;
    type metadata accessor for CollectionViewTableRoot();
    type metadata accessor for _GraphValue();
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
    _GraphValue.subscript.getter();
    v24 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F590];
    _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<Binding<SelectionManagerBox<AnyHashable>>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?, MEMORY[0x1E4F3F590]);
    uint64_t v25 = _GraphValue.value.getter();
    *(_DWORD *)(a9 + 8) = v25;
    v74 = v69;
    MEMORY[0x1F4188790](v25);
    v69[-6] = a5;
    v69[-5] = a6;
    v69[-4] = a7;
    v69[-3] = a8;
    v69[-2] = v23;
    LODWORD(v23) = v72;
    LODWORD(v90) = v72;
    type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
    _GraphValue.subscript.getter();
    _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<Binding<[SwiftUIAnySortComparator]>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<[SwiftUIAnySortComparator]>?, v24);
    uint64_t v26 = _GraphValue.value.getter();
    *(_DWORD *)(a9 + 12) = v26;
    MEMORY[0x1F4188790](v26);
    v69[-6] = a5;
    v69[-5] = a6;
    v69[-4] = a7;
    v69[-3] = a8;
    v69[-2] = v71;
    LODWORD(v90) = v23;
    type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    _GraphValue.subscript.getter();
    type metadata accessor for _GraphValue<Binding<AnyTableColumnCustomization>?>();
    *(_DWORD *)(a9 + 16) = _GraphValue.value.getter();
    uint64_t v90 = v89;
    unsigned int v27 = v83;
    int v28 = v84;
    LODWORD(v91) = v84;
    uint64_t v29 = v85;
    uint64_t v92 = v85;
    unint64_t v93 = __PAIR64__(v86, v87);
    int v30 = v81;
    unsigned int v31 = v82;
    unint64_t v94 = __PAIR64__(v82, v83);
    uint64_t v32 = v76;
    uint64_t v95 = v76;
    uint64_t v96 = v88;
    int v97 = v81;
    int v98 = v75;
    int v99 = v80;
    int v100 = v79;
    LODWORD(v24) = v77;
    LODWORD(v23) = v73;
    int v101 = v78;
    int v102 = v73;
    int v103 = v77;
    *(_DWORD *)(a9 + 20) = _ViewInputs.transaction.getter();
    uint64_t v90 = v89;
    LODWORD(v91) = v28;
    uint64_t v92 = v29;
    unint64_t v93 = __PAIR64__(v86, v87);
    unint64_t v94 = __PAIR64__(v31, v27);
    uint64_t v95 = v32;
    uint64_t v96 = v88;
    LODWORD(v29) = v75;
    int v97 = v30;
    int v98 = v75;
    int v34 = v79;
    int v33 = v80;
    int v99 = v80;
    int v100 = v79;
    int v35 = v78;
    int v101 = v78;
    int v102 = v23;
    int v103 = (int)v24;
    swift_getKeyPath();
    int v36 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    *(_DWORD *)(a9 + 24) = v36;
    uint64_t v90 = v89;
    LODWORD(v91) = v84;
    v74 = (uint64_t *)a9;
    uint64_t v37 = v85;
    uint64_t v92 = v85;
    LODWORD(v32) = v86;
    unsigned int v38 = v87;
    unint64_t v93 = __PAIR64__(v86, v87);
    unint64_t v94 = __PAIR64__(v82, v83);
    uint64_t v39 = v76;
    uint64_t v95 = v76;
    uint64_t v96 = v88;
    int v97 = v81;
    int v98 = v29;
    int v99 = v33;
    int v100 = v34;
    int v40 = v73;
    int v101 = v35;
    int v102 = v73;
    LODWORD(v29) = v77;
    int v103 = v77;
    swift_getKeyPath();
    int v41 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    *((_DWORD *)v74 + 7) = v41;
    uint64_t v90 = v89;
    int v42 = v84;
    LODWORD(v91) = v84;
    uint64_t v92 = v37;
    unint64_t v93 = __PAIR64__(v32, v38);
    unsigned int v44 = v82;
    unsigned int v43 = v83;
    unint64_t v94 = __PAIR64__(v82, v83);
    uint64_t v95 = v39;
    uint64_t v96 = v88;
    LODWORD(v32) = v81;
    LODWORD(v39) = v75;
    int v97 = v81;
    int v98 = v75;
    int v99 = v80;
    int v100 = v79;
    int v101 = v78;
    int v102 = v40;
    LODWORD(v37) = v40;
    int v103 = v29;
    swift_getKeyPath();
    int v45 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    *((_DWORD *)v74 + 9) = v45;
    uint64_t v46 = v89;
    uint64_t v90 = v89;
    LODWORD(v91) = v42;
    uint64_t v47 = v85;
    uint64_t v92 = v85;
    unint64_t v93 = __PAIR64__(v86, v87);
    unint64_t v94 = __PAIR64__(v44, v43);
    uint64_t v48 = v76;
    uint64_t v95 = v76;
    uint64_t v96 = v88;
    int v97 = v32;
    int v98 = v39;
    LODWORD(v32) = v79;
    int v49 = v80;
    int v99 = v80;
    int v100 = v79;
    int v50 = v78;
    int v101 = v78;
    int v102 = v37;
    int v103 = v77;
    swift_getKeyPath();
    int v51 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    v52 = v74;
    *((_DWORD *)v74 + 8) = v51;
    uint64_t v90 = v46;
    LODWORD(v91) = v84;
    uint64_t v92 = v47;
    unint64_t v93 = __PAIR64__(v86, v87);
    v53 = v52;
    unint64_t v94 = __PAIR64__(v82, v83);
    uint64_t v95 = v48;
    uint64_t v96 = v88;
    int v97 = v81;
    int v98 = v39;
    int v99 = v49;
    int v100 = v32;
    int v101 = v50;
    int v102 = v37;
    int v103 = v77;
    swift_getKeyPath();
    int v54 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    *((_DWORD *)v53 + 10) = v54;
    swift_bridgeObjectRelease();
    _s7SwiftUI19SelectionManagerBoxOys11AnyHashableVGMaTm_0(0, &lazy cache variable for type metadata for _GraphInputs.SelectionBasedStorageKey<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _GraphInputs.SelectionBasedStorageKey);
    lazy protocol witness table accessor for type _GraphInputs.SelectionBasedStorageKey<AnyHashable> and conformance _GraphInputs.SelectionBasedStorageKey<A>();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    int v55 = HIDWORD(v90);
    int v57 = v91;
    int v56 = HIDWORD(v91);
    int v58 = *MEMORY[0x1E4F4E7A0];
    if (v90 == *MEMORY[0x1E4F4E7A0])
    {
      int v59 = 0;
      LODWORD(v60) = 0;
      if (HIDWORD(v90) != v58) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v68 = AGCreateWeakAttribute();
      int v59 = v68;
      unint64_t v60 = HIDWORD(v68);
      if (v55 != v58)
      {
LABEL_4:
        unint64_t v61 = AGCreateWeakAttribute();
        int v62 = v61;
        unint64_t v63 = HIDWORD(v61);
        if (v57 != v58) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
    }
    int v62 = 0;
    LODWORD(v63) = 0;
    if (v57 != v58)
    {
LABEL_5:
      unint64_t v64 = AGCreateWeakAttribute();
      int v65 = v64;
      unint64_t v66 = HIDWORD(v64);
      if (v56 != v58)
      {
LABEL_6:
        unint64_t result = AGCreateWeakAttribute();
        unint64_t v67 = HIDWORD(result);
LABEL_11:
        *((_DWORD *)v53 + 11) = v59;
        *((_DWORD *)v53 + 12) = v60;
        *((_DWORD *)v53 + 13) = v62;
        *((_DWORD *)v53 + 14) = v63;
        *((_DWORD *)v53 + 15) = v65;
        *((_DWORD *)v53 + 16) = v66;
        *((_DWORD *)v53 + 17) = result;
        *((_DWORD *)v53 + 18) = v67;
        return result;
      }
LABEL_10:
      unint64_t result = 0;
      LODWORD(v67) = 0;
      goto LABEL_11;
    }
LABEL_9:
    int v65 = 0;
    LODWORD(v66) = 0;
    if (v56 != v58) {
      goto LABEL_6;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CollectionViewTableRoot<A, B, C>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, long long *a4@<X8>)
{
  return static CollectionViewTableRoot._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CollectionViewTableRoot<A, B, C>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CollectionViewTableRoot<A, B, C>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance CollectionViewTableRoot<A, B, C>()
{
}

uint64_t closure #1 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v7 = type metadata accessor for CollectionViewTableRoot();
  uint64_t v8 = a1 + *(int *)(v7 + 64);
  v14[2] = v7;
  type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v14, v10, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v15;
}

uint64_t closure #2 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v7 = type metadata accessor for CollectionViewTableRoot();
  uint64_t v8 = a1 + *(int *)(v7 + 68);
  v14[2] = v7;
  type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v14, v10, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v15;
}

uint64_t closure #3 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v7 = type metadata accessor for CollectionViewTableRoot();
  uint64_t v8 = a1 + *(int *)(v7 + 72);
  v14[2] = v7;
  type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_18, (uint64_t)v14, v10, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v15;
}

Swift::Void __swiftcall UpdateCollectionViewTableCoordinator.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  outlined init with copy of TableRowList(Value, (uint64_t)v141);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for TableColumnList);
  uint64_t v5 = AGGraphGetValue();
  char v7 = v6;
  outlined init with copy of TableColumnList(v5, (uint64_t)v138);
  uint64_t v8 = v7 & 1;
  uint64_t v9 = (char *)AGGraphGetValue();
  char v11 = v10;
  char v12 = *v9;
  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for UICollectionViewListCoordinator);
  uint64_t v14 = v13;
  Outputuint64_t Value = AGGraphGetOutputValue();
  int v102 = v14;
  if (OutputValue && (v4 & 1) == 0 && !v8 && (v11 & 1) == 0)
  {
    outlined init with copy of CollectionDifference<AnyHashable>.Change(v1 + 88, (uint64_t)&v125, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, MEMORY[0x1E4FBB718]);
    if (!*((void *)&v126 + 1))
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    long long v110 = v129;
    long long v111 = v130;
    uint64_t v112 = v131;
    long long v106 = v125;
    long long v107 = v126;
    long long v108 = v127;
    long long v109 = v128;
    LODWORD(v105[0]) = *(_DWORD *)v132;
    *(_DWORD *)((char *)v105 + 3) = *(_DWORD *)&v132[3];
    uint64_t v16 = v133;
    uint64_t v17 = v134;
    uint64_t v18 = v135;
    uint64_t v98 = v136;
    __int16 v100 = v137;
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
    uint64_t v19 = AGGraphGetValue();
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v19, (uint64_t)&v113, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    BOOL v95 = *((void *)&v113 + 1) != 0;
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v113, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
    unsigned int v20 = (uint64_t *)AGGraphGetValue();
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = v20[2];
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(*v20, v22);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    outlined consume of Binding<[SwiftUIAnySortComparator]>?(v16, v17);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    v24 = (uint64_t *)AGGraphGetValue();
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    uint64_t v28 = v24[2];
    uint64_t v27 = v24[3];
    outlined copy of Binding<AnyTableColumnCustomization>?(*v24, v26);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    outlined consume of Binding<AnyTableColumnCustomization>?(v18, v98);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    LOBYTE(v18) = *(unsigned char *)AGGraphGetValue();
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    *(void *)&long long v119 = v112;
    long long v117 = v110;
    long long v118 = v111;
    long long v113 = v106;
    long long v114 = v107;
    long long v115 = v108;
    long long v116 = v109;
    BYTE8(v119) = v95;
    HIDWORD(v119) = *(_DWORD *)((char *)v105 + 3);
    *(_DWORD *)((char *)&v119 + 9) = v105[0];
    *(void *)&long long v120 = v21;
    *((void *)&v120 + 1) = v22;
    *(void *)&long long v121 = v23;
    *((void *)&v121 + 1) = v25;
    *(void *)v122 = v26;
    *(void *)&v122[8] = v28;
    char v29 = 0;
    *(void *)&v122[16] = v27;
    v122[24] = v18;
    *(_WORD *)&v122[25] = v100;
    int v30 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_18:
    unint64_t v61 = (void **)AGGraphGetOutputValue();
    if (v61)
    {
      int v62 = *v61;
      outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
      type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
      uint64_t v63 = AGGraphGetValue();
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v63, (uint64_t)&v106, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      unint64_t v64 = v62;
      outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
      uint64_t v65 = (uint64_t)v64 + *(void *)((*v30 & *v64) + 0x100);
      swift_beginAccess();
      outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)&v106, v65, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      swift_endAccess();

      unint64_t v66 = (void **)AGGraphGetOutputValue();
      if (v66)
      {
        unint64_t v67 = *v66;
        outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
        type metadata accessor for Binding<EditMode>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>?, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode);
        uint64_t v68 = AGGraphGetValue();
        uint64_t v69 = *(void *)v68;
        uint64_t v70 = *(void *)(v68 + 8);
        char v71 = *(unsigned char *)(v68 + 16);
        int v72 = v67;
        outlined copy of Binding<NavigationSplitViewColumn>?(v69, v70);
        outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
        int v73 = (char *)v72 + *(void *)((*v30 & *v72) + 0x110);
        uint64_t v74 = *(void *)v73;
        uint64_t v75 = *((void *)v73 + 1);
        *(void *)int v73 = v69;
        *((void *)v73 + 1) = v70;
        v73[16] = v71;
        outlined consume of Binding<NavigationSplitViewColumn>?(v74, v75);

        uint64_t v76 = (void **)AGGraphGetOutputValue();
        if (v76)
        {
          int v77 = *v76;
          outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
          char v78 = *(unsigned char *)AGGraphGetValue();
          int v79 = v77;
          outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
          *((unsigned char *)v79 + *(void *)((*v30 & *v79) + 0x120)) = v78;

          int v80 = (void *)AGGraphGetOutputValue();
          if (v80)
          {
            int v81 = (_OWORD *)(*v80 + *(void *)((*v30 & *(void *)*v80) + 0x118));
            long long v82 = *(_OWORD *)(v1 + 60);
            *int v81 = *(_OWORD *)(v1 + 44);
            v81[1] = v82;
            uint64_t v83 = MEMORY[0x18C119DF0](v1 + 80);
            if (!v83)
            {
LABEL_25:
              outlined destroy of TableRowList((uint64_t)v141);
              outlined destroy of Binding<AnyTableColumnCustomization>(v1 + 88, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, MEMORY[0x1E4FBB718]);
              long long v89 = v119;
              *(_OWORD *)(v1 + 200) = v120;
              long long v90 = *(_OWORD *)v122;
              *(_OWORD *)(v1 + 216) = v121;
              *(_OWORD *)(v1 + 232) = v90;
              *(_OWORD *)(v1 + 243) = *(_OWORD *)&v122[11];
              long long v91 = v115;
              *(_OWORD *)(v1 + 136) = v116;
              long long v92 = v118;
              *(_OWORD *)(v1 + 152) = v117;
              *(_OWORD *)(v1 + 168) = v92;
              *(_OWORD *)(v1 + 184) = v89;
              long long v93 = v114;
              *(_OWORD *)(v1 + 88) = v113;
              *(_OWORD *)(v1 + 104) = v93;
              *(_OWORD *)(v1 + 120) = v91;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v138);
              return;
            }
            int v84 = (void *)v83;
            uint64_t v85 = (void **)AGGraphGetOutputValue();
            if (v85)
            {
              unsigned int v86 = *v85;
              outlined init with copy of TableDataSourceAdaptor((uint64_t)&v113, (uint64_t)&v106);
              id v87 = v86;
              AGGraphClearUpdate();
              outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
              uint64_t v88 = *(void *)AGGraphGetValue();
              swift_retain();
              outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
              AGGraphSetUpdate();
              specialized UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(v84, (uint64_t)&v106, v88, v29 & 1);

              swift_release();
              outlined destroy of TableDataSourceAdaptor((uint64_t)&v106);
              goto LABEL_25;
            }
            __break(1u);
            goto LABEL_31;
          }
LABEL_29:
          __break(1u);
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  char v101 = v4;
  char v99 = v12;
  if (!OutputValue || v8)
  {
    v105[0] = MEMORY[0x1E4FBC860];
    uint64_t v31 = v139;
    uint64_t v32 = v140;
    __swift_project_boxed_opaque_existential_1(v138, v139);
    TableColumnList.visitAll<A>(applying:)((uint64_t)v105, v31, (uint64_t)&type metadata for MakeCellFormulas, v32, (uint64_t)&protocol witness table for MakeCellFormulas);
    uint64_t v33 = v105[0];
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    int v34 = (uint64_t *)AGGraphGetValue();
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    uint64_t v37 = v34[2];
    uint64_t v38 = v34[3];
    outlined copy of Binding<AnyTableColumnCustomization>?(*v34, v36);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    if (v36)
    {
      *(void *)&long long v113 = v35;
      *((void *)&v113 + 1) = v36;
      *(void *)&long long v114 = v37;
      *((void *)&v114 + 1) = v38;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v40 = *((void *)&v106 + 1);
      uint64_t v39 = v106;
    }
    else
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v97 = specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(v33, v39, v40, 0, (uint64_t)specialized implicit closure #5 in UpdateCollectionViewTableCoordinator.updateValue(), 0, (uint64_t)specialized implicit closure #6 in UpdateCollectionViewTableCoordinator.updateValue(), 0);
    outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v39);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (*(void *)(v1 + 112))
  {
    uint64_t v97 = *(void *)(v1 + 184);
    swift_bridgeObjectRetain();
LABEL_15:
    outlined init with copy of TableRowList((uint64_t)v141, (uint64_t)v104);
    outlined init with copy of TableColumnList((uint64_t)v138, (uint64_t)v103);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
    uint64_t v41 = AGGraphGetValue();
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v41, (uint64_t)&v113, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    char v96 = *((void *)&v113 + 1) != 0;
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v113, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
    type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
    int v42 = (uint64_t *)AGGraphGetValue();
    uint64_t v43 = *v42;
    uint64_t v44 = v42[1];
    uint64_t v45 = v42[2];
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(*v42, v44);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v113);
    type metadata accessor for Binding<EditMode>?(0, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    uint64_t v46 = (uint64_t *)AGGraphGetValue();
    uint64_t v48 = *v46;
    uint64_t v47 = v46[1];
    uint64_t v49 = v46[2];
    uint64_t v50 = v46[3];
    outlined copy of Binding<AnyTableColumnCustomization>?(*v46, v47);
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v113);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v106);
    char v51 = *(unsigned char *)AGGraphGetValue();
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v106);
    outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)v105);
    char v52 = *(unsigned char *)AGGraphGetValue();
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)v105);
    *(void *)&long long v94 = v49;
    *((void *)&v94 + 1) = v50;
    TableDataSourceAdaptor.init(rowList:columnList:cellFormulas:hasSelection:sortOrder:columnCustomization:showsFirstColumnOnly:tableColumnHeadersVisibility:accessibilityEnabled:)((uint64_t)v104, (uint64_t)v103, v97, v96, v43, v44, v45, v48, (uint64_t)v123, v47, v94, v51, v52, v99);
    uint64_t v53 = AGGraphGetOutputValue();
    int v30 = (void *)MEMORY[0x1E4FBC8C8];
    if (!v53)
    {
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v123, (uint64_t)&v106);
      outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v125);
      uint64_t v54 = AGGraphGetValue();
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v54, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v125);
      outlined init with copy of UpdateCollectionViewTableCoordinator(v1, (uint64_t)&v113);
      type metadata accessor for Binding<EditMode>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>?, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode);
      uint64_t v55 = AGGraphGetValue();
      uint64_t v56 = *(void *)v55;
      uint64_t v57 = *(void *)(v55 + 8);
      char v58 = *(unsigned char *)(v55 + 16);
      outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)v55, v57);
      outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v113);
      int v59 = objc_allocWithZone(v102);
      *(void *)((char *)v59 + *(void *)((*v30 & *v59) + 0x300)) = 0;
      outlined init with copy of TableDataSourceAdaptor((uint64_t)&v106, (uint64_t)v105);
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v104, (uint64_t)v103, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      id v60 = specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)((uint64_t)v105, (uint64_t)v103, v56, v57, v58, 1);
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
      outlined destroy of TableDataSourceAdaptor((uint64_t)&v106);
      *(void *)&long long v125 = v60;
      AGGraphSetOutputValue();
    }
    char v29 = (AGGraphGetOutputValue() == 0) | v101;
    long long v121 = v123[8];
    *(_OWORD *)v122 = v124[0];
    *(_OWORD *)&v122[11] = *(_OWORD *)((char *)v124 + 11);
    long long v117 = v123[4];
    long long v118 = v123[5];
    long long v119 = v123[6];
    long long v120 = v123[7];
    long long v113 = v123[0];
    long long v114 = v123[1];
    long long v115 = v123[2];
    long long v116 = v123[3];
    goto LABEL_18;
  }
LABEL_32:
  __break(1u);
}

uint64_t specialized implicit closure #5 in UpdateCollectionViewTableCoordinator.updateValue()(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for TableCellFormula() + 24));
}

uint64_t specialized implicit closure #6 in UpdateCollectionViewTableCoordinator.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for TableCellFormula() + 20);
  uint64_t v4 = *(void *)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  char v8 = *(unsigned char *)(v3 + 32);
  uint64_t result = outlined copy of TableColumnCustomizationID.Base(*(void *)v3, v5, v6, v7, v8);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(unsigned char *)(a2 + 32) = v8;
  return result;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(void *a1, Swift::Int a2, uint64_t a3, Swift::Int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v93 = a5;
  uint64_t v95 = a3;
  uint64_t v96 = a6;
  Swift::Int v97 = a2;
  long long v94 = a1;
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for CollectionDifference<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBD80]);
  uint64_t v91 = *(void *)(v7 - 8);
  Swift::Int v92 = v7;
  MEMORY[0x1F4188790](v7);
  long long v90 = (char *)v89 - v8;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC868];
  int v103 = (void *)MEMORY[0x1E4FBC868];
  type metadata accessor for [Int : Int](0, &lazy cache variable for type metadata for [String : Int]);
  uint64_t v11 = v10;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    int v102 = v9;
    Swift::Int v30 = v97;
    Dictionary.reserveCapacity(_:)(v97);
    Swift::Int v31 = v30;
    if (v30)
    {
      if (v30 < 0) {
        goto LABEL_102;
      }
      uint64_t v32 = 0;
      uint64_t v33 = v102;
      int v34 = v94 + 1;
      while (1)
      {
        if (v31 == v32) {
          goto LABEL_97;
        }
        uint64_t v35 = *(v34 - 1);
        uint64_t v36 = *v34;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        __int16 v100 = v33;
        unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
        uint64_t v40 = v33[2];
        BOOL v41 = (v38 & 1) == 0;
        uint64_t v42 = v40 + v41;
        if (__OFADD__(v40, v41)) {
          goto LABEL_98;
        }
        char v43 = v38;
        if (v33[3] >= v42)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v33 = v100;
            if ((v38 & 1) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v33 = v100;
            if ((v43 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v42, isUniquelyReferenced_nonNull_native);
          unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
          if ((v43 & 1) != (v45 & 1)) {
            goto LABEL_103;
          }
          unint64_t v39 = v44;
          uint64_t v33 = v100;
          if ((v43 & 1) == 0)
          {
LABEL_32:
            v33[(v39 >> 6) + 8] |= 1 << v39;
            uint64_t v46 = (uint64_t *)(v33[6] + 16 * v39);
            *uint64_t v46 = v35;
            v46[1] = v36;
            *(void *)(v33[7] + 8 * v39) = v32;
            uint64_t v47 = v33[2];
            BOOL v28 = __OFADD__(v47, 1);
            uint64_t v48 = v47 + 1;
            if (v28) {
              goto LABEL_100;
            }
            v33[2] = v48;
            swift_bridgeObjectRetain();
            goto LABEL_23;
          }
        }
        *(void *)(v33[7] + 8 * v39) = v32;
LABEL_23:
        ++v32;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 += 2;
        Swift::Int v31 = v97;
        if (v97 == v32)
        {
          int v102 = v33;
          break;
        }
      }
    }
    if (v103[2] == a4 && v102[2] == v31)
    {
      if (a4 | v31)
      {
        Swift::Int v49 = 0;
        Swift::Int v50 = 0;
        uint64_t v51 = MEMORY[0x1E4FBC860];
        char v52 = (char *)MEMORY[0x1E4FBC860];
        while (1)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v53 = *(void *)(v51 + 16);
              uint64_t v54 = *((void *)v52 + 2);
              if (v54 + v53 > v96) {
                goto LABEL_91;
              }
              if (v50 != v31) {
                break;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v51 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53 + 1, 1, (char *)v51);
              }
              unint64_t v56 = *(void *)(v51 + 16);
              unint64_t v55 = *(void *)(v51 + 24);
              Swift::Int v31 = v97;
              if (v56 >= v55 >> 1)
              {
                int v80 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, (char *)v51);
                Swift::Int v31 = v97;
                uint64_t v51 = (uint64_t)v80;
              }
              *(void *)(v51 + 16) = v56 + 1;
              *(void *)(v51 + 8 * v56 + 32) = v49++;
              Swift::Int v50 = v31;
              if (v49 >= a4) {
                goto LABEL_62;
              }
            }
            if (v49 == a4)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                char v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v54 + 1, 1, v52);
              }
              unint64_t v58 = *((void *)v52 + 2);
              unint64_t v57 = *((void *)v52 + 3);
              Swift::Int v31 = v97;
              if (v58 >= v57 >> 1)
              {
                int v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v52);
                Swift::Int v31 = v97;
                char v52 = v81;
              }
              *((void *)v52 + 2) = v58 + 1;
              *(void *)&v52[8 * v58 + 32] = v50++;
              Swift::Int v49 = a4;
              goto LABEL_62;
            }
            int v59 = (uint64_t *)(v95 + 16 * v49);
            id v60 = &v94[2 * v50];
            if (*v59 != *v60 || v59[1] != v60[1])
            {
              char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
              Swift::Int v31 = v97;
              if ((v62 & 1) == 0) {
                break;
              }
            }
            ++v49;
LABEL_61:
            ++v50;
            if (v49 >= a4)
            {
LABEL_62:
              if (v50 >= v31) {
                goto LABEL_91;
              }
            }
          }
          uint64_t v63 = v59[1];
          unint64_t v64 = v102;
          if (v102[2])
          {
            uint64_t v65 = *v59;
            swift_bridgeObjectRetain();
            unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v65, v63);
            if (v67)
            {
              LODWORD(v93) = 0;
              Swift::Int v68 = *(void *)(v64[7] + 8 * v66);
              goto LABEL_69;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
          }
          Swift::Int v68 = 0;
          LODWORD(v93) = 1;
LABEL_69:
          uint64_t v69 = v103;
          if (!v103[2]) {
            goto LABEL_82;
          }
          Swift::Int v92 = v68;
          uint64_t v70 = *v60;
          uint64_t v71 = v60[1];
          swift_bridgeObjectRetain();
          unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v71);
          if ((v73 & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_82:
            char v77 = v93;
            swift_bridgeObjectRelease();
            if ((v77 & 1) == 0) {
              goto LABEL_75;
            }
            goto LABEL_83;
          }
          Swift::Int v74 = *(void *)(v69[7] + 8 * v72);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v93 & 1) == 0 && v92 >= v50 && (v74 < v49 || v74 - v49 >= v92 - v50))
          {
LABEL_75:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              char v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v52 + 2) + 1, 1, v52);
            }
            Swift::Int v31 = v97;
            unint64_t v76 = *((void *)v52 + 2);
            unint64_t v75 = *((void *)v52 + 3);
            if (v76 >= v75 >> 1)
            {
              uint64_t v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v52);
              Swift::Int v31 = v97;
              char v52 = v83;
            }
            *((void *)v52 + 2) = v76 + 1;
            *(void *)&v52[8 * v76 + 32] = v50;
            goto LABEL_61;
          }
LABEL_83:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v51 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v51 + 16) + 1, 1, (char *)v51);
          }
          Swift::Int v31 = v97;
          unint64_t v79 = *(void *)(v51 + 16);
          unint64_t v78 = *(void *)(v51 + 24);
          if (v79 >= v78 >> 1)
          {
            long long v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1, (char *)v51);
            Swift::Int v31 = v97;
            uint64_t v51 = (uint64_t)v82;
          }
          *(void *)(v51 + 16) = v79 + 1;
          *(void *)(v51 + 8 * v79 + 32) = v49++;
          if (v49 >= a4) {
            goto LABEL_62;
          }
        }
      }
      char v52 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v51 = MEMORY[0x1E4FBC860];
LABEL_91:
      if (*((void *)v52 + 2) + *(void *)(v51 + 16) <= v96)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      __int16 v100 = v94;
      Swift::Int v101 = v31;
      uint64_t v98 = v95;
      Swift::Int v99 = a4;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB0C0]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>();
      int v84 = v90;
      BidirectionalCollection<>.difference<A>(from:)();
      Swift::Int v85 = v92;
      uint64_t v86 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      uint64_t v51 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySS_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_w1_wV8SSGATTG50I2UI0dK0VyS2iGTf1cn_nTf4nd_nTm(v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v87 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySS_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_w1_wV8SSGATTG50I2UI0dK0VyS2iGTf1cn_nTf4nd_nTm(v87);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v91 + 8))(v84, v85);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v51;
  }
  if (a4 < 0) {
    goto LABEL_101;
  }
  v89[1] = v11;
  uint64_t v12 = 0;
  v13 = v103;
  uint64_t v14 = (uint64_t *)(v95 + 8);
  while (a4 != v12)
  {
    uint64_t v15 = *(v14 - 1);
    uint64_t v16 = *v14;
    swift_bridgeObjectRetain();
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    __int16 v100 = v13;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    uint64_t v20 = v13[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_96;
    }
    char v23 = v18;
    if (v13[3] >= v22)
    {
      if (v17)
      {
        v13 = v100;
        if ((v18 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v13 = v100;
        if ((v23 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v17);
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_103;
      }
      unint64_t v19 = v24;
      v13 = v100;
      if ((v23 & 1) == 0)
      {
LABEL_14:
        v13[(v19 >> 6) + 8] |= 1 << v19;
        uint64_t v26 = (uint64_t *)(v13[6] + 16 * v19);
        *uint64_t v26 = v15;
        v26[1] = v16;
        *(void *)(v13[7] + 8 * v19) = v12;
        uint64_t v27 = v13[2];
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_99;
        }
        v13[2] = v29;
        swift_bridgeObjectRetain();
        goto LABEL_5;
      }
    }
    *(void *)(v13[7] + 8 * v19) = v12;
LABEL_5:
    ++v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 += 2;
    if (a4 == v12)
    {
      int v103 = v13;
      uint64_t v9 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(long long *a1, Swift::Int a2, long long *a3, Swift::Int a4, char *a5, uint64_t a6)
{
  long long v115 = a5;
  long long v117 = a3;
  uint64_t v118 = a6;
  long long v116 = a1;
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for CollectionDifference<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBBD80]);
  uint64_t v113 = *(void *)(v8 - 8);
  Swift::Int v114 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v112 = (char *)&v108 - v9;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
  long long v130 = (void *)MEMORY[0x1E4FBC868];
  type metadata accessor for [TableRowID : Int](0, &lazy cache variable for type metadata for [KeyboardShortcutBinding : Int], (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  uint64_t v12 = v11;
  Dictionary.reserveCapacity(_:)(a4);
  if (!a4)
  {
LABEL_19:
    long long v119 = v10;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0) {
        goto LABEL_128;
      }
      uint64_t v35 = 0;
      uint64_t v36 = v119;
      uint64_t v37 = v116;
      while (1)
      {
        if (a2 == v35) {
          goto LABEL_123;
        }
        long long v38 = *v37;
        long long v39 = v37[1];
        long long v40 = v37[3];
        long long v124 = v37[2];
        long long v125 = v40;
        long long v122 = v38;
        long long v123 = v39;
        outlined retain of KeyboardShortcutBinding((uint64_t)&v122);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&v121[0] = v36;
        unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v122);
        uint64_t v44 = v36[2];
        BOOL v45 = (v42 & 1) == 0;
        uint64_t v46 = v44 + v45;
        if (__OFADD__(v44, v45)) {
          goto LABEL_124;
        }
        char v47 = v42;
        if (v36[3] >= v46)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v36 = *(void **)&v121[0];
            if ((v42 & 1) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            uint64_t v36 = *(void **)&v121[0];
            if ((v47 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v46, isUniquelyReferenced_nonNull_native);
          unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v122);
          if ((v47 & 1) != (v49 & 1)) {
            goto LABEL_129;
          }
          unint64_t v43 = v48;
          uint64_t v36 = *(void **)&v121[0];
          if ((v47 & 1) == 0)
          {
LABEL_32:
            v36[(v43 >> 6) + 8] |= 1 << v43;
            Swift::Int v50 = (_OWORD *)(v36[6] + (v43 << 6));
            long long v51 = v122;
            long long v52 = v123;
            long long v53 = v125;
            v50[2] = v124;
            v50[3] = v53;
            *Swift::Int v50 = v51;
            v50[1] = v52;
            *(void *)(v36[7] + 8 * v43) = v35;
            uint64_t v54 = v36[2];
            BOOL v33 = __OFADD__(v54, 1);
            uint64_t v55 = v54 + 1;
            if (v33) {
              goto LABEL_126;
            }
            v36[2] = v55;
            outlined retain of KeyboardShortcutBinding((uint64_t)&v122);
            goto LABEL_23;
          }
        }
        *(void *)(v36[7] + 8 * v43) = v35;
LABEL_23:
        ++v35;
        swift_bridgeObjectRelease();
        outlined release of KeyboardShortcutBinding((uint64_t)&v122);
        v37 += 4;
        if (a2 == v35)
        {
          long long v119 = v36;
          break;
        }
      }
    }
    if (v130[2] == a4 && v119[2] == a2)
    {
      if (a4 | a2)
      {
        Swift::Int v56 = 0;
        Swift::Int v57 = 0;
        uint64_t v58 = MEMORY[0x1E4FBC860];
        int v59 = (char *)MEMORY[0x1E4FBC860];
        while (1)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v60 = *(void *)(v58 + 16);
              uint64_t v61 = *((void *)v59 + 2);
              if (v61 + v60 > v118) {
                goto LABEL_117;
              }
              if (v57 != a2) {
                break;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v58 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60 + 1, 1, (char *)v58);
              }
              unint64_t v63 = *(void *)(v58 + 16);
              unint64_t v62 = *(void *)(v58 + 24);
              if (v63 >= v62 >> 1) {
                uint64_t v58 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v62 > 1), v63 + 1, 1, (char *)v58);
              }
              *(void *)(v58 + 16) = v63 + 1;
              *(void *)(v58 + 8 * v63 + 32) = v56++;
              Swift::Int v57 = a2;
              if (v56 >= a4) {
                goto LABEL_41;
              }
            }
            if (v56 == a4)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                int v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61 + 1, 1, v59);
              }
              unint64_t v65 = *((void *)v59 + 2);
              unint64_t v64 = *((void *)v59 + 3);
              if (v65 >= v64 >> 1) {
                int v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v59);
              }
              *((void *)v59 + 2) = v65 + 1;
              *(void *)&v59[8 * v65 + 32] = v57++;
              Swift::Int v56 = a4;
              goto LABEL_41;
            }
            Swift::Int v114 = v57;
            long long v115 = v59;
            uint64_t v112 = (char *)v56;
            uint64_t v113 = v58;
            unint64_t v66 = &v117[4 * v56];
            uint64_t v67 = *((void *)v66 + 2);
            int v68 = *((unsigned __int8 *)v66 + 24);
            uint64_t v70 = *((void *)v66 + 6);
            uint64_t v69 = *((void *)v66 + 7);
            uint64_t v71 = &v116[4 * v57];
            int v72 = *((unsigned __int8 *)v71 + 24);
            uint64_t v74 = *((void *)v71 + 6);
            uint64_t v73 = *((void *)v71 + 7);
            if (*(void *)v66 != *(void *)v71 || *((void *)v66 + 1) != *((void *)v71 + 1)) {
              break;
            }
            if (v67 != *((void *)v71 + 2) || v68 != v72) {
              goto LABEL_76;
            }
LABEL_69:
            if (v69)
            {
              if (!v73 || (v70 != v74 || v69 != v73) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_76;
              }
            }
            else if (v73)
            {
              goto LABEL_76;
            }
            uint64_t v58 = v113;
            Swift::Int v56 = (Swift::Int)(v112 + 1);
            Swift::Int v57 = v114;
            int v59 = v115;
LABEL_104:
            ++v57;
            if (v56 >= a4) {
              goto LABEL_41;
            }
          }
          uint64_t v110 = *((void *)v71 + 2);
          uint64_t v111 = v67;
          int v108 = v72;
          int v109 = v68;
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && v111 == v110 && v109 == v108) {
            goto LABEL_69;
          }
LABEL_76:
          long long v77 = *v66;
          long long v78 = v66[1];
          long long v79 = v66[3];
          v121[2] = v66[2];
          v121[3] = v79;
          v121[0] = v77;
          v121[1] = v78;
          int v80 = v119;
          uint64_t v81 = v119[2];
          outlined retain of KeyboardShortcutBinding((uint64_t)v121);
          if (v81 && (unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v121), (v83 & 1) != 0))
          {
            char v84 = 0;
            uint64_t v85 = *(void *)(v80[7] + 8 * v82);
          }
          else
          {
            uint64_t v85 = 0;
            char v84 = 1;
          }
          long long v86 = *v71;
          long long v87 = v71[1];
          long long v88 = v71[3];
          v120[2] = v71[2];
          v120[3] = v88;
          v120[0] = v86;
          v120[1] = v87;
          long long v89 = v130;
          Swift::Int v57 = v114;
          if (!v130[2]) {
            goto LABEL_90;
          }
          outlined retain of KeyboardShortcutBinding((uint64_t)v120);
          unint64_t v90 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v120);
          if ((v91 & 1) == 0)
          {
            outlined release of KeyboardShortcutBinding((uint64_t)v120);
LABEL_90:
            outlined release of KeyboardShortcutBinding((uint64_t)v121);
            if (v84)
            {
LABEL_91:
              uint64_t v58 = v113;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v58 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1, (char *)v58);
              }
              Swift::Int v56 = (Swift::Int)v112;
              unint64_t v96 = *(void *)(v58 + 16);
              unint64_t v98 = *(void *)(v58 + 24);
              unint64_t v97 = v96 + 1;
              if (v96 >= v98 >> 1) {
                uint64_t v58 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v98 > 1), v96 + 1, 1, (char *)v58);
              }
              int v59 = v115;
              goto LABEL_96;
            }
            int v59 = v115;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v59 + 2) + 1, 1, v59);
            }
            Swift::Int v56 = (Swift::Int)v112;
            unint64_t v100 = *((void *)v59 + 2);
            unint64_t v99 = *((void *)v59 + 3);
            unint64_t v101 = v100 + 1;
            if (v100 >= v99 >> 1) {
              int v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, v59);
            }
            uint64_t v58 = v113;
LABEL_103:
            *((void *)v59 + 2) = v101;
            *(void *)&v59[8 * v100 + 32] = v57;
            goto LABEL_104;
          }
          uint64_t v92 = *(void *)(v89[7] + 8 * v90);
          outlined release of KeyboardShortcutBinding((uint64_t)v120);
          outlined release of KeyboardShortcutBinding((uint64_t)v121);
          if (v84) {
            goto LABEL_91;
          }
          uint64_t v93 = v85 - v57;
          if (v85 >= v57)
          {
            Swift::Int v56 = (Swift::Int)v112;
            uint64_t v58 = v113;
            if (v92 >= (uint64_t)v112)
            {
              int v59 = v115;
              if (v92 - (uint64_t)v112 < v93)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v58 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1, (char *)v58);
                }
                goto LABEL_87;
              }
            }
            else
            {
              int v59 = v115;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              int v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v59 + 2) + 1, 1, v59);
            }
            unint64_t v100 = *((void *)v59 + 2);
            unint64_t v102 = *((void *)v59 + 3);
            unint64_t v101 = v100 + 1;
            if (v100 >= v102 >> 1) {
              int v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v102 > 1), v100 + 1, 1, v59);
            }
            goto LABEL_103;
          }
          uint64_t v58 = v113;
          char v94 = swift_isUniquelyReferenced_nonNull_native();
          Swift::Int v56 = (Swift::Int)v112;
          if ((v94 & 1) == 0) {
            uint64_t v58 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1, (char *)v58);
          }
          int v59 = v115;
LABEL_87:
          unint64_t v96 = *(void *)(v58 + 16);
          unint64_t v95 = *(void *)(v58 + 24);
          unint64_t v97 = v96 + 1;
          if (v96 >= v95 >> 1) {
            uint64_t v58 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v95 > 1), v96 + 1, 1, (char *)v58);
          }
LABEL_96:
          *(void *)(v58 + 16) = v97;
          *(void *)(v58 + 8 * v96 + 32) = v56++;
          if (v56 >= a4)
          {
LABEL_41:
            if (v57 >= a2) {
              goto LABEL_117;
            }
          }
        }
      }
      int v59 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v58 = MEMORY[0x1E4FBC860];
LABEL_117:
      if (*((void *)v59 + 2) + *(void *)(v58 + 16) <= v118)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v58 = 0;
      }
    }
    else
    {
      *(void *)&v121[0] = v116;
      *((void *)&v121[0] + 1) = a2;
      *(void *)&v120[0] = v117;
      *((void *)&v120[0] + 1) = a4;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBB0C0]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>();
      lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding();
      int v103 = v112;
      BidirectionalCollection<>.difference<A>(from:)();
      Swift::Int v104 = v114;
      uint64_t v105 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      uint64_t v58 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI23KeyboardShortcutBindingV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA23ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v105);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v106 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI23KeyboardShortcutBindingV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA23ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(v106);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, Swift::Int))(v113 + 8))(v103, v104);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v58;
  }
  if (a4 < 0) {
    goto LABEL_127;
  }
  uint64_t v111 = v12;
  uint64_t v13 = 0;
  uint64_t v14 = v130;
  uint64_t v15 = v117;
  while (a4 != v13)
  {
    long long v16 = *v15;
    long long v17 = v15[1];
    long long v18 = v15[3];
    long long v128 = v15[2];
    long long v129 = v18;
    long long v126 = v16;
    long long v127 = v17;
    outlined retain of KeyboardShortcutBinding((uint64_t)&v126);
    char v19 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v122 = v14;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v126);
    uint64_t v22 = v14[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      goto LABEL_122;
    }
    char v25 = v20;
    if (v14[3] >= v24)
    {
      if (v19)
      {
        uint64_t v14 = (void *)v122;
        if ((v20 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v14 = (void *)v122;
        if ((v25 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v19);
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v126);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_129;
      }
      unint64_t v21 = v26;
      uint64_t v14 = (void *)v122;
      if ((v25 & 1) == 0)
      {
LABEL_14:
        v14[(v21 >> 6) + 8] |= 1 << v21;
        BOOL v28 = (_OWORD *)(v14[6] + (v21 << 6));
        long long v29 = v126;
        long long v30 = v127;
        long long v31 = v129;
        v28[2] = v128;
        v28[3] = v31;
        *BOOL v28 = v29;
        v28[1] = v30;
        *(void *)(v14[7] + 8 * v21) = v13;
        uint64_t v32 = v14[2];
        BOOL v33 = __OFADD__(v32, 1);
        uint64_t v34 = v32 + 1;
        if (v33) {
          goto LABEL_125;
        }
        v14[2] = v34;
        outlined retain of KeyboardShortcutBinding((uint64_t)&v126);
        goto LABEL_5;
      }
    }
    *(void *)(v14[7] + 8 * v21) = v13;
LABEL_5:
    ++v13;
    swift_bridgeObjectRelease();
    outlined release of KeyboardShortcutBinding((uint64_t)&v126);
    v15 += 4;
    if (a4 == v13)
    {
      long long v130 = v14;
      uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
LABEL_124:
  __break(1u);
LABEL_125:
  __break(1u);
LABEL_126:
  __break(1u);
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(void *a1, Swift::Int a2, uint64_t a3, Swift::Int a4, Swift::Int a5, uint64_t a6)
{
  Swift::Int v86 = a5;
  long long v88 = a1;
  uint64_t v89 = a3;
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for CollectionDifference<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBD80]);
  uint64_t v84 = *((void *)v9 - 1);
  uint64_t v85 = v9;
  MEMORY[0x1F4188790](v9);
  char v83 = (char *)&v82 - v10;
  uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
  unint64_t v95 = (void *)MEMORY[0x1E4FBC868];
  type metadata accessor for [Int : Int](0, &lazy cache variable for type metadata for [Int : Int]);
  uint64_t v13 = v12;
  Dictionary.reserveCapacity(_:)(a4);
  uint64_t v87 = a6;
  if (!a4)
  {
LABEL_19:
    char v94 = v11;
    Dictionary.reserveCapacity(_:)(a2);
    if (a2)
    {
      if (a2 < 0) {
        goto LABEL_109;
      }
      uint64_t v30 = 0;
      long long v31 = v94;
      while (1)
      {
        if (a2 == v30) {
          goto LABEL_104;
        }
        uint64_t v32 = v88[v30];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v92 = v31;
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
        uint64_t v36 = v31[2];
        BOOL v37 = (v34 & 1) == 0;
        uint64_t v38 = v36 + v37;
        if (__OFADD__(v36, v37)) {
          goto LABEL_105;
        }
        char v39 = v34;
        if (v31[3] >= v38)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            long long v31 = v92;
            if ((v34 & 1) == 0) {
              goto LABEL_32;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            long long v31 = v92;
            if ((v39 & 1) == 0) {
              goto LABEL_32;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
          unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v32);
          if ((v39 & 1) != (v41 & 1)) {
            goto LABEL_110;
          }
          unint64_t v35 = v40;
          long long v31 = v92;
          if ((v39 & 1) == 0)
          {
LABEL_32:
            v31[(v35 >> 6) + 8] |= 1 << v35;
            uint64_t v42 = 8 * v35;
            *(void *)(v31[6] + v42) = v32;
            *(void *)(v31[7] + v42) = v30;
            uint64_t v43 = v31[2];
            BOOL v28 = __OFADD__(v43, 1);
            uint64_t v44 = v43 + 1;
            if (v28) {
              goto LABEL_107;
            }
            v31[2] = v44;
            goto LABEL_23;
          }
        }
        *(void *)(v31[7] + 8 * v35) = v30;
LABEL_23:
        ++v30;
        swift_bridgeObjectRelease();
        if (a2 == v30)
        {
          char v94 = v31;
          a6 = v87;
          break;
        }
      }
    }
    if (v95[2] == a4 && v94[2] == a2)
    {
      if (a4 | a2)
      {
        Swift::Int v45 = 0;
        Swift::Int v46 = 0;
        uint64_t v47 = MEMORY[0x1E4FBC860];
        unint64_t v48 = (char *)MEMORY[0x1E4FBC860];
        while (1)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v49 = *(void *)(v47 + 16);
              uint64_t v50 = *((void *)v48 + 2);
              if (v50 + v49 > a6) {
                goto LABEL_98;
              }
              if (v46 != a2) {
                break;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v47 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, (char *)v47);
              }
              unint64_t v52 = *(void *)(v47 + 16);
              unint64_t v51 = *(void *)(v47 + 24);
              if (v52 >= v51 >> 1) {
                uint64_t v47 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, (char *)v47);
              }
              *(void *)(v47 + 16) = v52 + 1;
              *(void *)(v47 + 8 * v52 + 32) = v45++;
              Swift::Int v46 = a2;
              if (v45 >= a4) {
                goto LABEL_41;
              }
            }
            if (v45 == a4)
            {
              Swift::Int v53 = v46;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, v48);
              }
              unint64_t v55 = *((void *)v48 + 2);
              unint64_t v54 = *((void *)v48 + 3);
              if (v55 >= v54 >> 1) {
                unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v48);
              }
              *((void *)v48 + 2) = v55 + 1;
              *(void *)&v48[8 * v55 + 32] = v53;
              Swift::Int v46 = v53 + 1;
              Swift::Int v45 = a4;
              goto LABEL_41;
            }
            uint64_t v56 = *(void *)(v89 + 8 * v45);
            if (v56 != v88[v46]) {
              break;
            }
            ++v45;
LABEL_84:
            ++v46;
            if (v45 >= a4) {
              goto LABEL_41;
            }
          }
          uint64_t v85 = v48;
          Swift::Int v86 = v46;
          Swift::Int v57 = v94;
          if (v94[2] && (unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v56), (v59 & 1) != 0))
          {
            int v60 = 0;
            uint64_t v61 = *(void *)(v57[7] + 8 * v58);
          }
          else
          {
            uint64_t v61 = 0;
            int v60 = 1;
          }
          unint64_t v62 = v95;
          if (!v95[2] || (unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v88[v86]), (v64 & 1) == 0))
          {
            if ((v60 & 1) == 0)
            {
              unint64_t v48 = v85;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, v48);
              }
              a6 = v87;
              goto LABEL_81;
            }
LABEL_71:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v47 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, (char *)v47);
            }
            a6 = v87;
            unint64_t v68 = *(void *)(v47 + 16);
            unint64_t v70 = *(void *)(v47 + 24);
            int64_t v69 = v68 + 1;
            if (v68 >= v70 >> 1) {
              uint64_t v47 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v70 > 1), v68 + 1, 1, (char *)v47);
            }
            unint64_t v48 = v85;
            goto LABEL_76;
          }
          if (v60) {
            goto LABEL_71;
          }
          Swift::Int v65 = v61 - v86;
          if (v61 < v86) {
            break;
          }
          Swift::Int v74 = *(void *)(v62[7] + 8 * v63);
          BOOL v75 = v74 < v45;
          Swift::Int v76 = v74 - v45;
          a6 = v87;
          if (v75)
          {
            unint64_t v48 = v85;
LABEL_94:
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50 + 1, 1, v48);
            }
LABEL_81:
            unint64_t v72 = *((void *)v48 + 2);
            unint64_t v71 = *((void *)v48 + 3);
            if (v72 >= v71 >> 1) {
              unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v71 > 1), v72 + 1, 1, v48);
            }
            *((void *)v48 + 2) = v72 + 1;
            uint64_t v73 = &v48[8 * v72];
            Swift::Int v46 = v86;
            *((void *)v73 + 4) = v86;
            goto LABEL_84;
          }
          unint64_t v48 = v85;
          if (v76 >= v65) {
            goto LABEL_94;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v47 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, (char *)v47);
          }
          unint64_t v68 = *(void *)(v47 + 16);
          unint64_t v67 = *(void *)(v47 + 24);
          int64_t v69 = v68 + 1;
          if (v68 >= v67 >> 1) {
            goto LABEL_93;
          }
LABEL_76:
          *(void *)(v47 + 16) = v69;
          *(void *)(v47 + 8 * v68 + 32) = v45++;
          Swift::Int v46 = v86;
          if (v45 >= a4)
          {
LABEL_41:
            if (v46 >= a2) {
              goto LABEL_98;
            }
          }
        }
        char v66 = swift_isUniquelyReferenced_nonNull_native();
        a6 = v87;
        if ((v66 & 1) == 0) {
          uint64_t v47 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49 + 1, 1, (char *)v47);
        }
        unint64_t v68 = *(void *)(v47 + 16);
        unint64_t v67 = *(void *)(v47 + 24);
        int64_t v69 = v68 + 1;
        unint64_t v48 = v85;
        if (v68 < v67 >> 1) {
          goto LABEL_76;
        }
LABEL_93:
        uint64_t v47 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v67 > 1), v69, 1, (char *)v47);
        goto LABEL_76;
      }
      unint64_t v48 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v47 = MEMORY[0x1E4FBC860];
LABEL_98:
      if (*((void *)v48 + 2) + *(void *)(v47 + 16) <= a6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else
    {
      uint64_t v92 = v88;
      Swift::Int v93 = a2;
      uint64_t v90 = v89;
      Swift::Int v91 = a4;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for UnsafeBufferPointer<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB0C0]);
      lazy protocol witness table accessor for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>();
      long long v77 = v83;
      BidirectionalCollection<>.difference<A>(from:)();
      long long v78 = v85;
      uint64_t v79 = CollectionDifference.removals.getter();
      swift_bridgeObjectRetain();
      uint64_t v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySi_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f30OyAL_GXEfU_AA13CountingIndexVyw86G_AvA0tuC0VyAA013ShadowSectionC0VyAA22TableDataSourceAdaptorVGGAXys15LazyMapSequenceVyV28AA0X8SectionsV4ItemVGSiGGTG50I2UI0dK0VyAO13CountingIndexVySiGATGTf1cn_nTf4nd_nTm(v79);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v80 = CollectionDifference.insertions.getter();
      swift_bridgeObjectRetain();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySi_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD744from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f30OyAL_GXEfU_AA13CountingIndexVyw86G_AvA0tuC0VyAA013ShadowSectionC0VyAA22TableDataSourceAdaptorVGGAXys15LazyMapSequenceVyV28AA0X8SectionsV4ItemVGSiGGTG50I2UI0dK0VyAO13CountingIndexVySiGATGTf1cn_nTf4nd_nTm(v80);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v84 + 8))(v77, v78);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v47;
  }
  if (a4 < 0) {
    goto LABEL_108;
  }
  uint64_t v82 = v13;
  uint64_t v14 = 0;
  uint64_t v15 = v95;
  while (a4 != v14)
  {
    uint64_t v16 = *(void *)(v89 + 8 * v14);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v92 = v15;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    uint64_t v20 = v15[2];
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      goto LABEL_103;
    }
    char v23 = v18;
    if (v15[3] >= v22)
    {
      if (v17)
      {
        uint64_t v15 = v92;
        if ((v18 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v15 = v92;
        if ((v23 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, v17);
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_110;
      }
      unint64_t v19 = v24;
      uint64_t v15 = v92;
      if ((v23 & 1) == 0)
      {
LABEL_14:
        v15[(v19 >> 6) + 8] |= 1 << v19;
        uint64_t v26 = 8 * v19;
        *(void *)(v15[6] + v26) = v16;
        *(void *)(v15[7] + v26) = v14;
        uint64_t v27 = v15[2];
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_106;
        }
        v15[2] = v29;
        goto LABEL_5;
      }
    }
    *(void *)(v15[7] + 8 * v19) = v14;
LABEL_5:
    ++v14;
    swift_bridgeObjectRelease();
    if (a4 == v14)
    {
      unint64_t v95 = v15;
      a6 = v87;
      uint64_t v11 = (void *)MEMORY[0x1E4FBC868];
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t key path getter for ListUpdate.inverse : <A>ListUpdate<A.SectionIDs.Index, A.RowIDs.Index>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for ListUpdate();
  return ListUpdate.inverse.getter(v2, a1);
}

void *specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(void *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (*(void *)(v5 + 16) <= a3)
  {
LABEL_49:
    __break(1u);
    return result;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (!v6) {
    goto LABEL_47;
  }
  uint64_t v7 = *(void *)(v5 + 96 * a3 + 112);
  uint64_t v8 = a2 + 40 * v6 + 8;
  while (1)
  {
    uint64_t v9 = *(void *)(v8 - 16);
    uint64_t v10 = *(void *)(v8 - 8);
    int v11 = *(unsigned __int8 *)(v8 + 16);
    if (v11 == 3)
    {
      if (v9 == a3)
      {
        uint64_t v15 = a4 >= v10 && v7 < a4;
        a4 -= v15;
      }
      goto LABEL_6;
    }
    if (v11 != 4) {
      break;
    }
    if (v9 == a3 && a4 >= v10 && __OFADD__(a4++, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
LABEL_6:
    v8 -= 40;
    if (!--v6) {
      goto LABEL_47;
    }
  }
  if (v11 != 5) {
    goto LABEL_6;
  }
  unint64_t v13 = *(void *)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  if (v9 == a3)
  {
    if (v10 == a4)
    {
      a3 = *(void *)v8;
      a4 = *(void *)(v8 + 8);
      goto LABEL_6;
    }
    BOOL v20 = v10 < a4 && v7 < a4;
    uint64_t v18 = a4 - v20;
    if (v12 >= v10) {
      goto LABEL_39;
    }
LABEL_30:
    if (v13 != a3) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
  uint64_t v18 = a4;
  if (v13 != a3) {
    goto LABEL_6;
  }
  if (v12 < v10) {
    goto LABEL_30;
  }
LABEL_39:
  if (v13 != a3)
  {
LABEL_5:
    a4 = v18;
    goto LABEL_6;
  }
  if (v9 == a3)
  {
    if (v12 < a4) {
      goto LABEL_44;
    }
    goto LABEL_5;
  }
LABEL_43:
  if (a4 < v12) {
    goto LABEL_5;
  }
LABEL_44:
  a4 = v18 + 1;
  if (!__OFADD__(v18, 1)) {
    goto LABEL_6;
  }
  __break(1u);
LABEL_47:
  *uint64_t result = a4;
  return (void *)a3;
}

void *specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  if ((a4 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v12 + 40);
  a6 = *(void *)(v6 + 16);
  if (a6 <= a4) {
    goto LABEL_10;
  }
  a6 = 0;
  uint64_t v6 = *(void *)(v6 + 96 * a4 + 112);
  unint64_t v7 = *(void *)(a2 + 16);
  unint64_t v8 = *(void *)(a3 + 16);
  if (!v7) {
    goto LABEL_15;
  }
LABEL_4:
  if (a6 < v7)
  {
    uint64_t v13 = a2 + 40 * a6 + 32;
    BOOL v9 = a6 + 1 == v7;
    if (a6 + 1 == v7) {
      a6 = 0;
    }
    else {
      ++a6;
    }
    goto LABEL_18;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
LABEL_11:
  unint64_t v14 = a4;
  if (__OFADD__(v10++, 1)) {
    __break(1u);
  }
  while (1)
  {
    a4 = v14;
    a5 = v10;
    if (!v9) {
      goto LABEL_4;
    }
LABEL_15:
    if (a6 == v8)
    {
      *uint64_t result = a5;
      return (void *)a4;
    }
    if (a6 >= v8) {
      break;
    }
    uint64_t v13 = a3 + 40 * a6++ + 32;
    BOOL v9 = 1;
LABEL_18:
    int v16 = *(unsigned __int8 *)(v13 + 32);
    uint64_t v17 = *(void *)v13;
    uint64_t v18 = *(void *)(v13 + 8);
    switch(v16)
    {
      case 3:
        if (v17 != a4) {
          goto LABEL_49;
        }
        BOOL v22 = a5 >= v18 && v6 < a5;
        uint64_t v10 = a5 - v22;
        unint64_t v14 = a4;
        break;
      case 4:
        if (v17 != a4 || a5 < v18) {
          goto LABEL_49;
        }
        unint64_t v14 = a4;
        uint64_t v10 = a5 + 1;
        if (__OFADD__(a5, 1))
        {
          __break(1u);
LABEL_45:
          uint64_t v10 = a5;
          if (v14 == a4) {
            goto LABEL_46;
          }
LABEL_49:
          unint64_t v14 = a4;
          uint64_t v10 = a5;
        }
        break;
      case 5:
        unint64_t v14 = *(void *)(v13 + 16);
        uint64_t v11 = *(void *)(v13 + 24);
        if (v17 != a4) {
          goto LABEL_45;
        }
        uint64_t v10 = *(void *)(v13 + 24);
        if (v18 != a5)
        {
          BOOL v20 = v18 < a5 && v6 < a5;
          uint64_t v10 = a5 - v20;
LABEL_46:
          if (v11 >= v18)
          {
            if (v14 != a4) {
              goto LABEL_55;
            }
            if (v17 == a4)
            {
              if (v11 < a5) {
                goto LABEL_11;
              }
              goto LABEL_55;
            }
          }
          else if (v14 != a4)
          {
            goto LABEL_55;
          }
          if (a5 >= v11) {
            goto LABEL_11;
          }
LABEL_55:
          unint64_t v14 = a4;
        }
        break;
      default:
        goto LABEL_49;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return a2;
  }
  for (uint64_t i = a1 + 40 * v2; ; i -= 40)
  {
    uint64_t v5 = *(void *)(i - 8);
    int v6 = *(unsigned __int8 *)(i + 24);
    if (!*(unsigned char *)(i + 24))
    {
      BOOL v12 = a2 > 0 && a2 >= v5;
      uint64_t result = a2 - v12;
      goto LABEL_4;
    }
    if (v6 == 1) {
      break;
    }
    if (v6 != 2) {
      goto LABEL_3;
    }
    uint64_t result = *(void *)i;
    if (v5 != a2)
    {
      BOOL v7 = a2 > 0 && v5 < a2;
      BOOL v8 = v7;
      uint64_t v9 = a2 - v8;
      BOOL v10 = result >= v5 ? result < a2 : a2 >= result;
      uint64_t result = v9;
      if (v10)
      {
        uint64_t result = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return a2;
        }
      }
    }
LABEL_4:
    a2 = result;
    if (!--v2) {
      return result;
    }
  }
  if (a2 < v5)
  {
LABEL_3:
    uint64_t result = a2;
    goto LABEL_4;
  }
  uint64_t result = a2 + 1;
  if (!__OFADD__(a2, 1)) {
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

uint64_t specialized ShadowSectionCollection.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)a1, a2, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  unint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1[5] + 16);
  uint64_t v8 = a1[22];
  uint64_t v7 = a1[23];
  unint64_t v9 = *(void *)(v7 + 16);
  BOOL v10 = v9 == 0;
  unint64_t v11 = *(void *)(v8 + 16);
  while (v10)
  {
    if (v5 == v11) {
      goto LABEL_16;
    }
    if (v5 >= v11) {
      goto LABEL_18;
    }
    uint64_t v13 = v8 + 32 + 40 * v5++;
    BOOL v10 = 1;
LABEL_11:
    int v14 = *(unsigned __int8 *)(v13 + 32);
    if (v14 == 1)
    {
      BOOL v12 = __OFADD__(v6++, 1);
      if (v12) {
        goto LABEL_19;
      }
    }
    else if (!v14)
    {
      BOOL v12 = __OFSUB__(v6--, 1);
      if (v12)
      {
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of ShadowListUpdateRecorder<TableDataSourceAdaptor>((uint64_t)a1);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)(a2 + 192) = v6;
        return result;
      }
    }
  }
  if (v5 < v9)
  {
    uint64_t v13 = v7 + 32 + 40 * v5;
    BOOL v10 = v5 + 1 == v9;
    if (v5 + 1 == v9) {
      unint64_t v5 = 0;
    }
    else {
      ++v5;
    }
    goto LABEL_11;
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized ShadowRowCollection.init(_:section:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)a1, a3, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  *(void *)(a3 + 224) = a2;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_37;
  }
  uint64_t v7 = a1[5];
  if (*(void *)(v7 + 16) > a2)
  {
    unint64_t v8 = 0;
    uint64_t v9 = v7 + 96 * a2;
    uint64_t result = *(void *)(v9 + 96);
    char v10 = *(unsigned char *)(v9 + 104);
    uint64_t v11 = *(void *)(v9 + 112);
    uint64_t v12 = *(void *)(v9 + 120);
    *(void *)(a3 + 192) = result;
    *(unsigned char *)(a3 + 200) = v10;
    *(void *)(a3 + 208) = v11;
    *(void *)(a3 + 216) = v12;
    uint64_t v14 = a1[22];
    uint64_t v13 = a1[23];
    unint64_t v15 = *(void *)(v13 + 16);
    BOOL v16 = v15 == 0;
    unint64_t v17 = *(void *)(v14 + 16);
    while (1)
    {
      if (v16)
      {
        if (v8 == v17) {
          goto LABEL_34;
        }
        if (v8 >= v17) {
          goto LABEL_36;
        }
        uint64_t v19 = v14 + 32 + 40 * v8++;
        BOOL v16 = 1;
      }
      else
      {
        if (v8 >= v15)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          break;
        }
        uint64_t v19 = v13 + 32 + 40 * v8;
        BOOL v16 = v8 + 1 == v15;
        if (v8 + 1 == v15) {
          unint64_t v8 = 0;
        }
        else {
          ++v8;
        }
      }
      int v20 = *(unsigned __int8 *)(v19 + 32);
      uint64_t v21 = *(void *)v19;
      if (v20 == 5)
      {
        uint64_t v23 = *(void *)(v19 + 16);
        if (v21 == a2)
        {
          if (v23 != a2)
          {
            BOOL v22 = __OFSUB__(v12--, 1);
            if (v22) {
              goto LABEL_40;
            }
          }
        }
        else if (v23 == a2)
        {
          BOOL v22 = __OFADD__(v12++, 1);
          if (v22) {
            goto LABEL_41;
          }
        }
      }
      else if (v20 == 4)
      {
        if (v21 == a2)
        {
          BOOL v22 = __OFADD__(v12++, 1);
          if (v22) {
            goto LABEL_39;
          }
        }
      }
      else if (v20 == 3 && v21 == a2)
      {
        BOOL v22 = __OFSUB__(v12--, 1);
        if (v22)
        {
          __break(1u);
LABEL_34:
          outlined copy of ResolvedTableRowIDs.Storage(result, v10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of ShadowListUpdateRecorder<TableDataSourceAdaptor>((uint64_t)a1);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          *(void *)(a3 + 232) = v12;
          return result;
        }
      }
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized ShadowRowCollection.endIndex.getter()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[27];
  uint64_t v3 = v1 + v2;
  if (__OFADD__(v1, v2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v0[22];
    uint64_t v4 = v0[23];
    unint64_t v6 = *(void *)(v4 + 16);
    if (v6 || (unint64_t v6 = *(void *)(v5 + 16)) != 0)
    {
      specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v8, v4, v5, v0[28], v3, v6);
      return v8;
    }
    return v3;
  }
  return result;
}

uint64_t specialized ShadowRowCollection.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  void (*v15)(void *__return_ptr, unint64_t);
  void v16[6];
  uint64_t v17;

  uint64_t v3 = result;
  unint64_t v5 = v2[28];
  uint64_t v7 = v2[22];
  uint64_t v6 = v2[23];
  if (*(void *)(v6 + 16) || *(void *)(v7 + 16))
  {
    MEMORY[0x1F4188790](result);
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    unint64_t v5 = (unint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(&v17, updated, v5, v3);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v17 = result;
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v9 = v2[5];
  if (v5 >= *(void *)(v9 + 16))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = v9 + 96 * v5;
  uint64_t v11 = *(void *)(v10 + 112);
  unint64_t v12 = v17 - v11;
  if (__OFSUB__(v17, v11))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = *(void **)(v10 + 96);
  char v14 = *(unsigned char *)(v10 + 104);
  if (!v14)
  {
    unint64_t v15 = *(void (**)(void *__return_ptr, unint64_t))(*v13 + 104);
    swift_retain();
    v15(v16, v12);
    goto LABEL_11;
  }
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_16;
  }
  if (v12 < v13[2])
  {
    outlined init with copy of TableRowID((uint64_t)&v13[6 * v12 + 4], (uint64_t)v16);
    swift_bridgeObjectRetain();
LABEL_11:
    outlined init with take of TableRowID((uint64_t)v16, a2);
    return outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)v13, v14);
  }
LABEL_17:
  __break(1u);
  return result;
}

unint64_t *specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  if ((*result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 >= *(void *)(v3 + 16))
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = v3 + 96 * v2;
  uint64_t v5 = *(void *)(v4 + 112);
  uint64_t v6 = *(void *)(v4 + 120);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (!v7) {
    return (unint64_t *)(v5 != v8);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(a1, closure #1 in static CollectionViewTableRoot._makeView(view:inputs:));
}

uint64_t partial apply for closure #2 in static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(a1, closure #2 in static CollectionViewTableRoot._makeView(view:inputs:));
}

uint64_t outlined init with copy of UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator;
  if (!lazy protocol witness table cache variable for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator);
  }
  return result;
}

uint64_t outlined destroy of UpdateCollectionViewTableCoordinator(uint64_t a1)
{
  return a1;
}

void type metadata accessor for External<BridgedListState>(uint64_t a1)
{
}

void type metadata accessor for External<Scrollable>()
{
  if (!lazy cache variable for type metadata for External<Scrollable>)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<Scrollable>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187FB1CB0()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E4F3FD68], MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollPhaseState> and conformance External<A>);
  }
  return result;
}

void type metadata accessor for Binding<EditMode>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for MutableBox<UInt32>(255, a3, a4, MEMORY[0x1E4F41638]);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(uint64_t a1)
{
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(uint64_t, char *), uint64_t a3)
{
  uint64_t v72 = a3;
  unint64_t v71 = a2;
  type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)?, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v56[-v5];
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  uint64_t v70 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  int64_t v69 = &v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  Swift::Int v57 = &v56[-v11];
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1F4188790](v12 - 8);
  char v66 = &v56[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v65 = type metadata accessor for TableColumnCollection.Visitor(0);
  MEMORY[0x1F4188790](v65);
  char v64 = (unint64_t *)&v56[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v63 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v15 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  unint64_t v17 = &v56[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  int v20 = &v56[-v19];
  type metadata accessor for (offset: Int, element: TableColumnCollection.Entry)(0, &lazy cache variable for type metadata for (offset: Int, element: TableColumnCollection.Entry), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  uint64_t v22 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v73 = &v56[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v24);
  unint64_t v68 = &v56[-v25];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(a1, (uint64_t)v84, &lazy cache variable for type metadata for EnumeratedSequence<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBBCF8]);
  unint64_t v26 = 0;
  unint64_t v85 = 0;
  uint64_t v86 = 0;
  unint64_t v62 = (void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v59 = v15;
  uint64_t v61 = (uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v58 = v8;
  unint64_t v67 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v87 = (void *)MEMORY[0x1E4FBC860];
  Swift::Int v74 = v17;
  uint64_t v60 = v22;
  while (1)
  {
    outlined init with copy of TableColumnCollection.Backing((uint64_t)v84, (uint64_t)&v82);
    if (v83)
    {
      uint64_t v27 = *(void *)(v82 + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(&v82, (uint64_t)&v78);
      uint64_t v29 = v79;
      uint64_t v28 = v80;
      __swift_project_boxed_opaque_existential_1(&v78, v79);
      uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
    }
    if (v26 == v27)
    {
      outlined destroy of EnumeratedSequence<TableColumnCollection>.Iterator((uint64_t)v84);
      return (uint64_t)v87;
    }
    uint64_t result = outlined init with copy of TableColumnCollection.Backing((uint64_t)v84, (uint64_t)&v82);
    if (v83)
    {
      if ((v26 & 0x8000000000000000) != 0) {
        goto LABEL_28;
      }
      if (v26 >= *(void *)(v82 + 16)) {
        goto LABEL_29;
      }
      uint64_t v31 = (uint64_t)v74;
      outlined init with copy of TableColumnCollection.Entry(v82+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v59 + 72) * v26, (uint64_t)v74);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = v20;
      BOOL v33 = v6;
      outlined init with take of OptionalBinaryInteger(&v82, (uint64_t)&v78);
      uint64_t v34 = v65;
      unint64_t v35 = v64;
      uint64_t v36 = (char *)v64 + *(int *)(v65 + 20);
      uint64_t v37 = v63;
      (*v62)(v36, 1, 1, v63);
      *unint64_t v35 = v26;
      uint64_t v38 = v79;
      uint64_t v39 = v80;
      __swift_project_boxed_opaque_existential_1(&v78, v79);
      TableColumnList.visitColumns<A>(applying:from:)((uint64_t)v35, v26, v38, v34, v39, (uint64_t)&protocol witness table for TableColumnCollection.Visitor);
      uint64_t v40 = (uint64_t)v36;
      char v41 = v66;
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v40, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for TableColumnCollection.Entry?);
      uint64_t result = (*v61)(v41, 1, v37);
      if (result == 1) {
        goto LABEL_30;
      }
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v35, type metadata accessor for TableColumnCollection.Visitor);
      uint64_t v31 = (uint64_t)v74;
      outlined init with take of TableCellFormula((uint64_t)v41, (uint64_t)v74, type metadata accessor for TableColumnCollection.Entry);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v78);
      uint64_t v6 = v33;
      int v20 = v32;
      uint64_t v22 = v60;
    }
    outlined init with copy of TableColumnCollection((uint64_t)v84, (uint64_t)&v82);
    uint64_t v42 = v85;
    outlined init with copy of TableColumnCollection.Backing((uint64_t)&v82, (uint64_t)&v78);
    if (v81)
    {
      uint64_t v43 = *(void *)(v78 + 16);
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(&v78, (uint64_t)v75);
      uint64_t v44 = v76;
      uint64_t v45 = v77;
      __swift_project_boxed_opaque_existential_1(v75, v76);
      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
    }
    if (v42 < 0 || v42 >= v43) {
      break;
    }
    unint64_t v85 = v42 + 1;
    outlined destroy of TableColumnCollection((uint64_t)&v82);
    outlined init with take of TableCellFormula(v31, (uint64_t)v20, type metadata accessor for TableColumnCollection.Entry);
    uint64_t v46 = (uint64_t)&v73[*(int *)(v22 + 48)];
    uint64_t v47 = v86;
    uint64_t result = outlined init with take of TableCellFormula((uint64_t)v20, v46, type metadata accessor for TableColumnCollection.Entry);
    if (__OFADD__(v47, 1)) {
      goto LABEL_27;
    }
    uint64_t v86 = v47 + 1;
    uint64_t v48 = *(int *)(v22 + 48);
    uint64_t v49 = (uint64_t)v68;
    uint64_t v50 = (char *)v68 + v48;
    *unint64_t v68 = v47;
    outlined init with take of TableCellFormula(v46, v49 + v48, type metadata accessor for TableColumnCollection.Entry);
    v71(v47, v50);
    outlined destroy of (offset: Int, element: TableCellFormula)(v49, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TableColumnCollection.Entry), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableColumnCollection.Entry));
    if ((*v67)(v6, 1, v70) == 1)
    {
      _ss11AnyHashableVSg_ACtWOhTm_0((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)?, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?);
      unint64_t v26 = v85;
    }
    else
    {
      unint64_t v51 = v57;
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v6, (uint64_t)v57, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v51, (uint64_t)v69, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
      unint64_t v52 = v87;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v52 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52[2] + 1, 1, v52);
      }
      unint64_t v54 = v52[2];
      unint64_t v53 = v52[3];
      if (v54 >= v53 >> 1) {
        unint64_t v52 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v52);
      }
      v52[2] = v54 + 1;
      unint64_t v55 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      uint64_t v87 = v52;
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v69, (uint64_t)v52 + v55 + *(void *)(v58 + 72) * v54, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
      unint64_t v26 = v85;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  return specialized _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, a4, a5, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry, (void (*)(char *, char *))outlined init with copy of TableColumnCollection.Entry, (void (*)(unint64_t *, unint64_t *, unint64_t *))specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)) & 1;
}

{
  return specialized _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, a4, a5, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula, (void (*)(char *, char *))outlined init with copy of TableCellFormula, (void (*)(unint64_t *, unint64_t *, unint64_t *))specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)) & 1;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
}

{
  specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(a1, a2, a3, a4, a5, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula, (void (*)(char *, char *))outlined init with copy of TableCellFormula);
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v40 = a2;
  type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?(0, &lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v30 - v5;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  uint64_t v39 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v38 = (uint64_t)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v32 = (uint64_t)v30 - v11;
  type metadata accessor for (offset: Int, element: TableColumnCollection.Entry)(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: TableCellFormula), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  uint64_t v37 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v36 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (void *)((char *)v30 - v15);
  uint64_t v17 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v35 = v17;
  v30[1] = a1;
  if (v17)
  {
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)(type metadata accessor for TableCellFormula() - 8);
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v33 = *(void *)(v19 + 72);
    uint64_t v31 = v8;
    uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v22 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v23 = v37;
      uint64_t v24 = (uint64_t)&v36[*(int *)(v37 + 48)];
      outlined init with copy of TableCellFormula(v20, v24);
      uint64_t v25 = (uint64_t)v16 + *(int *)(v23 + 48);
      *uint64_t v16 = v18;
      outlined init with take of TableCellFormula(v24, v25, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
      v40(v18, v25);
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for (offset: Int, element: TableCellFormula), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableColumnCollection.Entry));
      if ((*v21)(v6, 1, v39) == 1)
      {
        _ss11AnyHashableVSg_ACtWOhTm_0((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?);
      }
      else
      {
        uint64_t v26 = v32;
        outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v6, v32, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
        outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v26, v38, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        }
        unint64_t v28 = v22[2];
        unint64_t v27 = v22[3];
        if (v28 >= v27 >> 1) {
          uint64_t v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v22);
        }
        v22[2] = v28 + 1;
        outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v38, (uint64_t)v22+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(void *)(v31 + 72) * v28, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
      }
      ++v18;
      v20 += v33;
    }
    while (v35 != v18);
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, void *a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t), void (*a8)(char *, char *), void (*a9)(unint64_t *, unint64_t *, unint64_t *))
{
  v233 = a8;
  v235 = a6;
  v236 = a7;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  uint64_t v234 = v14;
  MEMORY[0x1F4188790](v14);
  v232 = (uint64_t *)((char *)&v212 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v16);
  v227 = (uint64_t *)((char *)&v212 - v17);
  MEMORY[0x1F4188790](v18);
  v219 = (unsigned __int8 *)&v212 - v19;
  MEMORY[0x1F4188790](v20);
  v221 = (uint64_t *)((char *)&v212 - v21);
  MEMORY[0x1F4188790](v22);
  v220 = (char *)&v212 - v23;
  MEMORY[0x1F4188790](v24);
  v231 = (uint64_t *)((char *)&v212 - v25);
  MEMORY[0x1F4188790](v26);
  v226 = (uint64_t *)((char *)&v212 - v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (uint64_t *)((char *)&v212 - v29);
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (unsigned __int8 *)&v212 - v32;
  MEMORY[0x1F4188790](v34);
  v218 = (uint64_t *)((char *)&v212 - v35);
  uint64_t v37 = *(void *)(v36 + 72);
  if (!v37) {
    goto LABEL_177;
  }
  if ((void *)((char *)a2 - a1) == (void *)0x8000000000000000 && v37 == -1)
  {
LABEL_178:
    __break(1u);
LABEL_179:
    __break(1u);
    goto LABEL_180;
  }
  int64_t v38 = a3 - (void)a2;
  if (a3 - (void)a2 == 0x8000000000000000 && v37 == -1) {
    goto LABEL_179;
  }
  uint64_t v39 = (uint64_t)((uint64_t)a2 - a1) / v37;
  unint64_t v239 = a1;
  unint64_t v238 = a4;
  uint64_t v40 = v38 / v37;
  if (v39 >= v38 / v37)
  {
    if (v40 < 0) {
      goto LABEL_180;
    }
    uint64_t v42 = v40 * v37;
    if (a4 < (unint64_t)a2 || (unint64_t)a2 + v42 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if ((void *)a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v127 = a4 + v42;
    unint64_t v237 = a4 + v42;
    unint64_t v239 = (unint64_t)a2;
    if (v42 < 1 || a1 >= (unint64_t)a2) {
      goto LABEL_174;
    }
    v226 = *(void **)(a5 + 16);
    uint64_t v129 = -v37;
    v215 = (unsigned __int8 *)(a5 + 64);
    unint64_t v214 = a4;
    unint64_t v213 = a1;
    v216 = (void *)v129;
LABEL_102:
    v222 = (void *)a3;
    long long v130 = v220;
    v132 = v235;
    uint64_t v131 = v236;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v127 + v129, (uint64_t)v220, v235, v236);
    v223 = a2;
    v218 = (void *)((char *)a2 + v129);
    uint64_t v133 = v221;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)a2 + v129, (uint64_t)v221, v132, v131);
    uint64_t v135 = v233;
    uint64_t v134 = v234;
    uint64_t v136 = *(int *)(v234 + 48);
    __int16 v137 = (char *)&v219[v136];
    uint64_t v138 = *(int *)(v234 + 64);
    uint64_t v139 = (char *)&v219[v138];
    uint64_t v140 = &v130[v138];
    *(void *)v219 = *(void *)v130;
    v135(&v130[v136], v137);
    v141 = *(void **)v140;
    v230 = (unsigned char *)*((void *)v140 + 1);
    uint64_t v142 = v230;
    v231 = v141;
    uint64_t v144 = *((void *)v140 + 3);
    uint64_t v229 = *((void *)v140 + 2);
    uint64_t v143 = v229;
    uint64_t v217 = (uint64_t)v140;
    LOBYTE(v140) = v140[32];
    *(void *)uint64_t v139 = v141;
    *((void *)v139 + 1) = v142;
    *((void *)v139 + 2) = v143;
    *((void *)v139 + 3) = v144;
    v228 = v139;
    v139[32] = (char)v140;
    uint64_t v145 = *(int *)(v134 + 48);
    v146 = (char *)v227 + v145;
    uint64_t v147 = *(int *)(v134 + 64);
    v148 = (char *)v227 + v147;
    v149 = (char *)v133 + v147;
    void *v227 = *v133;
    v225 = v146;
    ((void (*)(char *))v135)((char *)v133 + v145);
    uint64_t v150 = *(void *)v149;
    uint64_t v151 = *((void *)v149 + 1);
    uint64_t v152 = *((void *)v149 + 2);
    uint64_t v153 = *((void *)v149 + 3);
    LOBYTE(v135) = v149[32];
    *(void *)v148 = *(void *)v149;
    *((void *)v148 + 1) = v151;
    *((void *)v148 + 2) = v152;
    *((void *)v148 + 3) = v153;
    v224 = v148;
    v148[32] = (char)v135;
    outlined copy of TableColumnCustomizationID.Base((uint64_t)v231, (uint64_t)v230, v229, v144, (char)v140);
    outlined copy of TableColumnCustomizationID.Base(v150, v151, v152, v153, (char)v135);
    if (!v226)
    {
LABEL_140:
      v191 = v235;
      v190 = v236;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v219, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v227, (uint64_t)v191, (uint64_t)v190, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      char v192 = *(void *)v220 < *v221;
      uint64_t v129 = (uint64_t)v216;
      goto LABEL_159;
    }
    v154 = 0;
    v155 = v215;
    while (1)
    {
      uint64_t v162 = *((void *)v155 - 4);
      uint64_t v161 = *((void *)v155 - 3);
      uint64_t v164 = *((void *)v155 - 2);
      uint64_t v163 = *((void *)v155 - 1);
      int v165 = *v155;
      uint64_t v166 = *(void *)v228;
      uint64_t v167 = *((void *)v228 + 1);
      char v168 = v228[32];
      v230 = v155;
      v231 = v154;
      LODWORD(v229) = v165;
      if ((v165 & 1) == 0) {
        break;
      }
      if ((v168 & 1) == 0) {
        goto LABEL_119;
      }
      uint64_t v169 = *((void *)v228 + 2);
      uint64_t v170 = *((void *)v228 + 3);
      BOOL v171 = v162 == v166 && v161 == v167;
      if (v171 || (char v172 = _stringCompareWithSmolCheck(_:_:expecting:)(), v173 = 0, (v172 & 1) != 0))
      {
        if (v164 != v169 || v163 != v170) {
          goto LABEL_124;
        }
LABEL_125:
        char v173 = 1;
      }
LABEL_126:
      uint64_t v176 = v163;
      uint64_t v177 = v164;
      char v178 = v173;
      v179 = (char *)v232 + *(int *)(v234 + 48);
      v180 = (char *)v232 + *(int *)(v234 + 64);
      void *v232 = *v227;
      v233(v225, v179);
      uint64_t v181 = *(void *)v224;
      uint64_t v182 = *((void *)v224 + 1);
      uint64_t v159 = *((void *)v224 + 2);
      uint64_t v160 = *((void *)v224 + 3);
      char v183 = v224[32];
      *(void *)v180 = *(void *)v224;
      *((void *)v180 + 1) = v182;
      *((void *)v180 + 2) = v159;
      *((void *)v180 + 3) = v160;
      v180[32] = v183;
      if (v178) {
        goto LABEL_143;
      }
      if (v229)
      {
        if (v183)
        {
          if (v162 == v181 && v161 == v182
            || (uint64_t v184 = v159,
                uint64_t v185 = v160,
                char v186 = _stringCompareWithSmolCheck(_:_:expecting:)(),
                uint64_t v159 = v184,
                uint64_t v160 = v185,
                (v186 & 1) != 0))
          {
            if (v177 == v159 && v176 == v160)
            {
              char v183 = 1;
              uint64_t v162 = v181;
              uint64_t v161 = v182;
              uint64_t v159 = v177;
              uint64_t v160 = v176;
              goto LABEL_144;
            }
            uint64_t v187 = v159;
            uint64_t v188 = v160;
            char v189 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v159 = v187;
            uint64_t v160 = v188;
            if (v189)
            {
              char v183 = 1;
              goto LABEL_143;
            }
          }
        }
      }
      else if ((v183 & 1) == 0)
      {
        if (v162 == v181 && v161 == v182)
        {
          char v183 = 0;
          goto LABEL_144;
        }
        uint64_t v156 = v159;
        uint64_t v157 = v160;
        char v158 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v159 = v156;
        uint64_t v160 = v157;
        if (v158)
        {
          char v183 = 0;
LABEL_143:
          uint64_t v162 = v181;
          uint64_t v161 = v182;
LABEL_144:
          outlined copy of TableColumnCustomizationID.Base(v162, v161, v159, v160, v183);
          v194 = v235;
          v193 = v236;
          outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v232, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v219, (uint64_t)v194, (uint64_t)v193, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v227, (uint64_t)v194, (uint64_t)v193, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          uint64_t v129 = (uint64_t)v216;
          if (v231 >= v226) {
            goto LABEL_176;
          }
          uint64_t v195 = *((void *)v230 - 4);
          uint64_t v196 = *((void *)v230 - 3);
          uint64_t v197 = *(void *)v217;
          uint64_t v198 = *(void *)(v217 + 8);
          if ((*v230 & 1) == 0)
          {
            if ((*(unsigned char *)(v217 + 32) & 1) == 0)
            {
              if (v195 == v197 && v196 == v198) {
                goto LABEL_157;
              }
LABEL_158:
              char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
              goto LABEL_159;
            }
LABEL_154:
            char v192 = 0;
            goto LABEL_159;
          }
          if ((*(unsigned char *)(v217 + 32) & 1) == 0) {
            goto LABEL_154;
          }
          uint64_t v200 = *((void *)v230 - 2);
          uint64_t v199 = *((void *)v230 - 1);
          uint64_t v201 = *(void *)(v217 + 16);
          uint64_t v202 = *(void *)(v217 + 24);
          if (v195 == v197 && v196 == v198 || (char v192 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
          {
            if (v200 != v201 || v199 != v202) {
              goto LABEL_158;
            }
LABEL_157:
            char v192 = 1;
          }
LABEL_159:
          v203 = v222;
          unint64_t v204 = (unint64_t)v222 + v129;
          v206 = v235;
          v205 = v236;
          outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v221, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v220, (uint64_t)v206, (uint64_t)v205, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          if (v192)
          {
            if (v203 < v223 || v204 >= (unint64_t)v223)
            {
              v209 = v218;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v207 = v214;
              unint64_t v208 = v213;
            }
            else
            {
              BOOL v83 = v203 == v223;
              unint64_t v207 = v214;
              unint64_t v208 = v213;
              v209 = v218;
              if (!v83) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v239 += v129;
          }
          else
          {
            unint64_t v210 = v237;
            v237 += v129;
            v209 = v223;
            if ((unint64_t)v203 < v210 || v204 >= v210)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v203 != (void *)v210)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v207 = v214;
            unint64_t v208 = v213;
          }
          unint64_t v127 = v237;
          if (v237 <= v207) {
            goto LABEL_174;
          }
          a2 = v209;
          a3 = v204;
          if ((unint64_t)v209 <= v208) {
            goto LABEL_174;
          }
          goto LABEL_102;
        }
      }
      outlined copy of TableColumnCustomizationID.Base(v181, v182, v159, v160, v183);
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v232, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      v154 = (void *)((char *)v231 + 1);
      v155 = v230 + 40;
      if (v226 == (void *)((char *)v231 + 1)) {
        goto LABEL_140;
      }
    }
    if (v168)
    {
LABEL_119:
      char v173 = 0;
      goto LABEL_126;
    }
    if (v162 != v166 || v161 != v167)
    {
LABEL_124:
      char v173 = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_126;
    }
    goto LABEL_125;
  }
  if ((v39 & 0x8000000000000000) == 0)
  {
    uint64_t v41 = v39 * v37;
    if (a4 < a1 || a1 + v41 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v220 = (char *)(a4 + v41);
    unint64_t v237 = a4 + v41;
    if (v41 < 1 || (unint64_t)a2 >= a3) {
      goto LABEL_174;
    }
    v227 = *(void **)(a5 + 16);
    v219 = (unsigned __int8 *)(a5 + 64);
    v222 = (void *)a3;
    uint64_t v217 = v37;
    v216 = v30;
    v215 = v33;
    while (1)
    {
      v223 = a2;
      uint64_t v44 = (uint64_t)a2;
      uint64_t v45 = (char *)v218;
      uint64_t v47 = v235;
      uint64_t v46 = v236;
      outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v44, (uint64_t)v218, v235, v236);
      outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(a4, (uint64_t)v33, v47, v46);
      uint64_t v49 = v233;
      uint64_t v48 = v234;
      uint64_t v50 = *(int *)(v234 + 48);
      uint64_t v51 = *(int *)(v234 + 64);
      unint64_t v52 = (char *)v30 + v51;
      uint64_t v53 = (uint64_t)&v45[v51];
      *uint64_t v30 = *(void *)v45;
      v49(&v45[v50], (char *)v30 + v50);
      unint64_t v54 = *(unsigned char **)(v53 + 8);
      v232 = *(void **)v53;
      v230 = v54;
      uint64_t v55 = *(void *)(v53 + 16);
      uint64_t v56 = *(void *)(v53 + 24);
      v221 = (uint64_t *)v53;
      LOBYTE(v53) = *(unsigned char *)(v53 + 32);
      *(void *)unint64_t v52 = v232;
      *((void *)v52 + 1) = v54;
      *((void *)v52 + 2) = v55;
      *((void *)v52 + 3) = v56;
      v228 = v52;
      v52[32] = v53;
      uint64_t v57 = *(int *)(v48 + 48);
      uint64_t v58 = (char *)v226 + v57;
      uint64_t v59 = *(int *)(v48 + 64);
      uint64_t v60 = (char *)v226 + v59;
      uint64_t v61 = (char *)&v33[v59];
      void *v226 = *(void *)v33;
      v225 = v58;
      ((void (*)(unsigned __int8 *))v49)(&v33[v57]);
      uint64_t v62 = *(void *)v61;
      uint64_t v63 = *((void *)v61 + 1);
      uint64_t v64 = *((void *)v61 + 2);
      uint64_t v65 = *((void *)v61 + 3);
      LOBYTE(v61) = v61[32];
      *(void *)uint64_t v60 = v62;
      *((void *)v60 + 1) = v63;
      *((void *)v60 + 2) = v64;
      *((void *)v60 + 3) = v65;
      v224 = v60;
      v60[32] = (char)v61;
      outlined copy of TableColumnCustomizationID.Base((uint64_t)v232, (uint64_t)v230, v55, v56, v53);
      outlined copy of TableColumnCustomizationID.Base(v62, v63, v64, v65, (char)v61);
      if (!v227)
      {
LABEL_61:
        uint64_t v30 = v216;
        int v103 = v235;
        unint64_t v102 = v236;
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v216, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v226, (uint64_t)v103, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        Swift::Int v104 = v218;
        uint64_t v105 = *v218;
        uint64_t v33 = v215;
        uint64_t v106 = *(void *)v215;
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v215, (uint64_t)v103, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v104, (uint64_t)v103, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        long long v107 = v222;
        uint64_t v108 = v217;
        if (v105 < v106) {
          goto LABEL_80;
        }
        goto LABEL_85;
      }
      char v66 = 0;
      unint64_t v67 = v219;
      while (1)
      {
        uint64_t v74 = *((void *)v67 - 4);
        uint64_t v73 = *((void *)v67 - 3);
        uint64_t v76 = *((void *)v67 - 2);
        uint64_t v75 = *((void *)v67 - 1);
        int v77 = *v67;
        uint64_t v78 = *(void *)v228;
        uint64_t v79 = *((void *)v228 + 1);
        char v80 = v228[32];
        v232 = v66;
        v230 = v67;
        LODWORD(v229) = v77;
        if ((v77 & 1) == 0)
        {
          if (v80)
          {
LABEL_40:
            char v85 = 0;
            goto LABEL_47;
          }
          if (v74 != v78 || v73 != v79)
          {
LABEL_45:
            char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
            goto LABEL_47;
          }
          goto LABEL_46;
        }
        if ((v80 & 1) == 0) {
          goto LABEL_40;
        }
        uint64_t v81 = *((void *)v228 + 2);
        uint64_t v82 = *((void *)v228 + 3);
        BOOL v83 = v74 == v78 && v73 == v79;
        if (v83 || (char v84 = _stringCompareWithSmolCheck(_:_:expecting:)(), v85 = 0, (v84 & 1) != 0))
        {
          if (v76 != v81 || v75 != v82) {
            goto LABEL_45;
          }
LABEL_46:
          char v85 = 1;
        }
LABEL_47:
        char v88 = v85;
        uint64_t v89 = (char *)v231 + *(int *)(v234 + 48);
        uint64_t v90 = (char *)v231 + *(int *)(v234 + 64);
        Swift::Int v91 = v225;
        void *v231 = *v226;
        v233(v91, v89);
        uint64_t v93 = *(void *)v224;
        uint64_t v92 = *((void *)v224 + 1);
        uint64_t v71 = *((void *)v224 + 2);
        uint64_t v72 = *((void *)v224 + 3);
        char v94 = v224[32];
        *(void *)uint64_t v90 = *(void *)v224;
        *((void *)v90 + 1) = v92;
        *((void *)v90 + 2) = v71;
        *((void *)v90 + 3) = v72;
        v90[32] = v94;
        if (v88) {
          goto LABEL_65;
        }
        if ((v229 & 1) == 0) {
          break;
        }
        if (v94)
        {
          if (v74 == v93 && v73 == v92
            || (uint64_t v95 = v71,
                uint64_t v96 = v72,
                char v97 = _stringCompareWithSmolCheck(_:_:expecting:)(),
                uint64_t v71 = v95,
                uint64_t v72 = v96,
                (v97 & 1) != 0))
          {
            if (v76 == v71 && v75 == v72)
            {
              char v94 = 1;
              uint64_t v74 = v93;
              uint64_t v101 = v92;
              uint64_t v71 = v76;
              uint64_t v72 = v75;
              goto LABEL_66;
            }
            uint64_t v98 = v71;
            uint64_t v99 = v72;
            char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
            uint64_t v71 = v98;
            uint64_t v72 = v99;
            if (v100)
            {
              char v94 = 1;
              goto LABEL_65;
            }
          }
        }
LABEL_26:
        outlined copy of TableColumnCustomizationID.Base(v93, v92, v71, v72, v94);
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v231, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        char v66 = (void *)((char *)v232 + 1);
        unint64_t v67 = v230 + 40;
        if (v227 == (void *)((char *)v232 + 1)) {
          goto LABEL_61;
        }
      }
      if (v94) {
        goto LABEL_26;
      }
      uint64_t v101 = v73;
      if (v74 == v93 && v73 == v92)
      {
        char v94 = 0;
        goto LABEL_66;
      }
      uint64_t v68 = v71;
      uint64_t v69 = v72;
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v71 = v68;
      uint64_t v72 = v69;
      if ((v70 & 1) == 0) {
        goto LABEL_26;
      }
      char v94 = 0;
LABEL_65:
      uint64_t v74 = v93;
      uint64_t v101 = v92;
LABEL_66:
      outlined copy of TableColumnCustomizationID.Base(v74, v101, v71, v72, v94);
      uint64_t v110 = v235;
      int v109 = v236;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v231, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      uint64_t v30 = v216;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v216, (uint64_t)v110, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v226, (uint64_t)v110, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      uint64_t v108 = v217;
      uint64_t v33 = v215;
      if (v232 >= v227)
      {
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
        goto LABEL_178;
      }
      uint64_t v111 = *((void *)v230 - 4);
      uint64_t v112 = *((void *)v230 - 3);
      uint64_t v113 = *v221;
      uint64_t v114 = v221[1];
      if ((*v230 & 1) == 0)
      {
        long long v107 = v222;
        if ((v221[4] & 1) == 0)
        {
          if (v111 == v113 && v112 == v114) {
            goto LABEL_79;
          }
LABEL_78:
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_79;
          }
        }
LABEL_84:
        long long v124 = v235;
        long long v123 = v236;
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v33, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v218, (uint64_t)v124, (uint64_t)v123, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
LABEL_85:
        long long v121 = (void *)v239;
        unint64_t v125 = v238 + v108;
        long long v126 = v223;
        if (v239 < v238 || v239 >= v125)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v239 != v238)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v238 = v125;
        long long v122 = v126;
        goto LABEL_93;
      }
      long long v107 = v222;
      if ((v221[4] & 1) == 0) {
        goto LABEL_84;
      }
      uint64_t v115 = *((void *)v230 - 2);
      uint64_t v116 = *((void *)v230 - 1);
      uint64_t v117 = v221[2];
      uint64_t v118 = v221[3];
      if ((v111 != v113 || v112 != v114) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_84;
      }
      if (v115 != v117 || v116 != v118) {
        goto LABEL_78;
      }
LABEL_79:
      long long v120 = v235;
      long long v119 = v236;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v33, (uint64_t)v235, (uint64_t)v236, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v218, (uint64_t)v120, (uint64_t)v119, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
LABEL_80:
      long long v121 = (void *)v239;
      long long v122 = (void *)((char *)v223 + v108);
      if (v239 < (unint64_t)v223 || v239 >= (unint64_t)v122)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if ((void *)v239 == v223)
      {
        long long v121 = v223;
      }
      else
      {
        swift_arrayInitWithTakeBackToFront();
      }
LABEL_93:
      unint64_t v239 = (unint64_t)v121 + v108;
      a4 = v238;
      if (v238 < (unint64_t)v220)
      {
        a2 = v122;
        if (v122 < v107) {
          continue;
        }
      }
LABEL_174:
      a9(&v239, &v238, &v237);
      return 1;
    }
  }
LABEL_180:
  swift_bridgeObjectRelease();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t), void (*a8)(char *, char *))
{
  unint64_t v125 = a8;
  uint64_t v8 = a6;
  long long v120 = a4;
  uint64_t v110 = a1;
  uint64_t v129 = a7;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a6, a7);
  uint64_t v126 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v116 = (uint64_t)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v133 = (uint64_t *)((char *)&v106 - v15);
  MEMORY[0x1F4188790](v16);
  unint64_t v127 = (uint64_t *)((char *)&v106 - v17);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (uint64_t *)((char *)&v106 - v19);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (uint64_t *)((char *)&v106 - v22);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v106 - v26;
  uint64_t v107 = a2;
  if (a3 == a2) {
    return;
  }
  unint64_t v123 = *(void *)(a5 + 16);
  uint64_t v115 = *(void *)(v25 + 72);
  int v109 = (unsigned __int8 *)(a5 + 64);
  long long v124 = v8;
  uint64_t v112 = v23;
  uint64_t v113 = v20;
  uint64_t v111 = (char *)&v106 - v26;
  while (1)
  {
    uint64_t v108 = a3;
    uint64_t v29 = a3;
LABEL_9:
    uint64_t v30 = v129;
    uint64_t v31 = v29 - 1;
    uint64_t v32 = *v120;
    uint64_t v33 = v115;
    uint64_t v118 = v115 * v29;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v32 + v115 * v29, (uint64_t)v27, v8, v129);
    uint64_t v119 = v31;
    uint64_t v117 = v33 * v31;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v32 + v33 * v31, (uint64_t)v23, v8, v30);
    uint64_t v35 = v125;
    uint64_t v34 = v126;
    uint64_t v36 = *(int *)(v126 + 48);
    uint64_t v37 = *(int *)(v126 + 64);
    int64_t v38 = (char *)v20 + v37;
    uint64_t v39 = &v27[v37];
    *uint64_t v20 = *(void *)v27;
    v35(&v27[v36], (char *)v20 + v36);
    uint64_t v41 = *(void *)v39;
    uint64_t v43 = *((void *)v39 + 2);
    unint64_t v42 = *((void *)v39 + 3);
    uint64_t v131 = (unsigned char *)*((void *)v39 + 1);
    uint64_t v40 = v131;
    unint64_t v132 = v42;
    uint64_t v114 = v39;
    LOBYTE(v39) = v39[32];
    *(void *)int64_t v38 = v41;
    *((void *)v38 + 1) = v40;
    *((void *)v38 + 2) = v43;
    *((void *)v38 + 3) = v42;
    long long v128 = v38;
    v38[32] = (char)v39;
    uint64_t v44 = *(int *)(v34 + 48);
    uint64_t v45 = (char *)v127 + v44;
    uint64_t v46 = *(int *)(v34 + 64);
    uint64_t v47 = (char *)v127 + v46;
    uint64_t v48 = (char *)v23 + v46;
    *unint64_t v127 = *v23;
    long long v122 = v45;
    ((void (*)(char *))v35)((char *)v23 + v44);
    uint64_t v50 = *(void *)v48;
    uint64_t v49 = *((void *)v48 + 1);
    uint64_t v51 = *((void *)v48 + 2);
    uint64_t v52 = *((void *)v48 + 3);
    LOBYTE(v48) = v48[32];
    *(void *)uint64_t v47 = v50;
    *((void *)v47 + 1) = v49;
    *((void *)v47 + 2) = v51;
    *((void *)v47 + 3) = v52;
    long long v121 = v47;
    v47[32] = (char)v48;
    char v53 = (char)v39;
    uint64_t v8 = v124;
    outlined copy of TableColumnCustomizationID.Base(v41, (uint64_t)v131, v43, v132, v53);
    outlined copy of TableColumnCustomizationID.Base(v50, v49, v51, v52, (char)v48);
    if (v123) {
      break;
    }
LABEL_47:
    uint64_t v20 = v113;
    char v88 = v129;
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v113, (uint64_t)v8, (uint64_t)v129, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v127, (uint64_t)v8, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    uint64_t v27 = v111;
    uint64_t v89 = *(void *)v111;
    uint64_t v23 = v112;
    uint64_t v90 = *v112;
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v112, (uint64_t)v8, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v27, (uint64_t)v8, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    if (v89 < v90) {
      goto LABEL_66;
    }
LABEL_5:
    a3 = v108 + 1;
    if (v108 + 1 == v107) {
      return;
    }
  }
  unint64_t v54 = 0;
  uint64_t v55 = v109;
  while (1)
  {
    uint64_t v61 = *((void *)v55 - 4);
    uint64_t v62 = *((void *)v55 - 3);
    uint64_t v64 = *((void *)v55 - 2);
    uint64_t v63 = *((void *)v55 - 1);
    int v65 = *v55;
    uint64_t v66 = *(void *)v128;
    uint64_t v67 = *((void *)v128 + 1);
    char v68 = v128[32];
    uint64_t v131 = v55;
    unint64_t v132 = v54;
    int v130 = v65;
    if ((v65 & 1) == 0)
    {
      if (v68)
      {
LABEL_26:
        char v73 = 0;
        goto LABEL_33;
      }
      if (v61 != v66 || v62 != v67)
      {
LABEL_31:
        char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    if ((v68 & 1) == 0) {
      goto LABEL_26;
    }
    uint64_t v69 = *((void *)v128 + 2);
    uint64_t v70 = *((void *)v128 + 3);
    BOOL v71 = v61 == v66 && v62 == v67;
    if (v71 || (char v72 = _stringCompareWithSmolCheck(_:_:expecting:)(), v73 = 0, (v72 & 1) != 0))
    {
      if (v64 != v69 || v63 != v70) {
        goto LABEL_31;
      }
LABEL_32:
      char v73 = 1;
    }
LABEL_33:
    char v76 = v73;
    int v77 = (char *)v133 + *(int *)(v126 + 48);
    uint64_t v78 = (char *)v133 + *(int *)(v126 + 64);
    *uint64_t v133 = *v127;
    v125(v122, v77);
    uint64_t v80 = *(void *)v121;
    uint64_t v79 = *((void *)v121 + 1);
    uint64_t v59 = *((void *)v121 + 2);
    uint64_t v60 = *((void *)v121 + 3);
    char v81 = v121[32];
    *(void *)uint64_t v78 = *(void *)v121;
    *((void *)v78 + 1) = v79;
    *((void *)v78 + 2) = v59;
    *((void *)v78 + 3) = v60;
    v78[32] = v81;
    if (v76) {
      goto LABEL_51;
    }
    if ((v130 & 1) == 0) {
      break;
    }
    if (v81)
    {
      if (v61 == v80 && v62 == v79
        || (uint64_t v82 = v59,
            uint64_t v83 = v60,
            char v84 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            uint64_t v59 = v82,
            uint64_t v60 = v83,
            (v84 & 1) != 0))
      {
        if (v64 == v59 && v63 == v60)
        {
          char v81 = 1;
          uint64_t v61 = v80;
          uint64_t v62 = v79;
          uint64_t v59 = v64;
          uint64_t v60 = v63;
          goto LABEL_52;
        }
        uint64_t v85 = v59;
        uint64_t v86 = v60;
        char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v59 = v85;
        uint64_t v60 = v86;
        if (v87)
        {
          char v81 = 1;
          goto LABEL_51;
        }
      }
    }
LABEL_12:
    outlined copy of TableColumnCustomizationID.Base(v80, v79, v59, v60, v81);
    uint64_t v8 = v124;
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v133, (uint64_t)v124, (uint64_t)v129, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    unint64_t v54 = v132 + 1;
    uint64_t v55 = v131 + 40;
    if (v123 == v132 + 1) {
      goto LABEL_47;
    }
  }
  if (v81) {
    goto LABEL_12;
  }
  if (v61 == v80 && v62 == v79)
  {
    char v81 = 0;
    goto LABEL_52;
  }
  uint64_t v56 = v59;
  uint64_t v57 = v60;
  char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v59 = v56;
  uint64_t v60 = v57;
  if ((v58 & 1) == 0) {
    goto LABEL_12;
  }
  char v81 = 0;
LABEL_51:
  uint64_t v61 = v80;
  uint64_t v62 = v79;
LABEL_52:
  outlined copy of TableColumnCustomizationID.Base(v61, v62, v59, v60, v81);
  uint64_t v8 = v124;
  Swift::Int v91 = v129;
  outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v133, (uint64_t)v124, (uint64_t)v129, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  uint64_t v20 = v113;
  outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v113, (uint64_t)v8, (uint64_t)v91, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v127, (uint64_t)v8, (uint64_t)v91, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  if (v132 >= v123)
  {
    __break(1u);
  }
  else
  {
    uint64_t v92 = *((void *)v131 - 4);
    uint64_t v93 = *((void *)v131 - 3);
    uint64_t v94 = *(void *)v114;
    uint64_t v95 = *((void *)v114 + 1);
    if ((*v131 & 1) == 0)
    {
      uint64_t v23 = v112;
      if ((v114[32] & 1) == 0)
      {
        if (v92 == v94 && v93 == v95) {
          goto LABEL_65;
        }
LABEL_64:
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_65;
        }
      }
LABEL_4:
      uint64_t v28 = v129;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v23, (uint64_t)v8, (uint64_t)v129, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      uint64_t v27 = v111;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v111, (uint64_t)v8, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      goto LABEL_5;
    }
    uint64_t v23 = v112;
    if ((v114[32] & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v96 = *((void *)v131 - 2);
    uint64_t v97 = *((void *)v131 - 1);
    uint64_t v98 = *((void *)v114 + 2);
    uint64_t v99 = *((void *)v114 + 3);
    if ((v92 != v94 || v93 != v95) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_4;
    }
    if (v96 != v98 || v97 != v99) {
      goto LABEL_64;
    }
LABEL_65:
    char v100 = v129;
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v23, (uint64_t)v8, (uint64_t)v129, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    uint64_t v27 = v111;
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v111, (uint64_t)v8, (uint64_t)v100, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
LABEL_66:
    uint64_t v101 = *v120;
    if (*v120)
    {
      uint64_t v103 = v117;
      uint64_t v102 = v118;
      unint64_t v104 = v101 + v118;
      uint64_t v105 = v101 + v117;
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v101 + v118, v116, v8, v129);
      if (v102 < v103 || v104 >= v105 + v115) {
        swift_arrayInitWithTakeFrontToBack();
      }
      outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v116, v105, v8, v129);
      uint64_t v29 = v119;
      if (v119 == v110) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t), void (*a6)(char *), void (*a7)(char *, char *, char *, unint64_t, uint64_t), void (*a8)(void, Swift::Int, uint64_t, void *, uint64_t))
{
  v305 = a7;
  v334 = a6;
  v299 = a5;
  uint64_t v10 = a4;
  uint64_t v13 = a3;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a3, a4);
  uint64_t v336 = v14;
  uint64_t v308 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v302 = (uint64_t)&v298 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v321 = (uint64_t)&v298 - v17;
  MEMORY[0x1F4188790](v18);
  v341 = (Swift::Int *)((char *)&v298 - v19);
  MEMORY[0x1F4188790](v20);
  v335 = (Swift::Int *)((char *)&v298 - v21);
  MEMORY[0x1F4188790](v22);
  v327 = (Swift::Int *)((char *)&v298 - v23);
  MEMORY[0x1F4188790](v24);
  v326 = (char *)&v298 - v25;
  MEMORY[0x1F4188790](v26);
  v325 = (Swift::Int *)((char *)&v298 - v27);
  MEMORY[0x1F4188790](v28);
  v318 = (Swift::Int *)((char *)&v298 - v29);
  MEMORY[0x1F4188790](v30);
  v316 = (Swift::Int *)((char *)&v298 - v31);
  MEMORY[0x1F4188790](v32);
  v303 = (Swift::Int *)((char *)&v298 - v33);
  MEMORY[0x1F4188790](v34);
  v310 = (char *)&v298 - v35;
  MEMORY[0x1F4188790](v36);
  v309 = (Swift::Int *)((char *)&v298 - v37);
  MEMORY[0x1F4188790](v38);
  v306 = (char *)&v298 - v39;
  MEMORY[0x1F4188790](v40);
  v307 = (char *)&v298 - v41;
  v328 = a1;
  Swift::Int v42 = a1[1];
  uint64_t v311 = a2;
  swift_bridgeObjectRetain_n();
  Swift::Int v43 = _minimumMergeRunLength(_:)(v42);
  if (v43 >= v42)
  {
    if (v42 < 0) {
      goto LABEL_270;
    }
    if (v42)
    {
      uint64_t v48 = v311;
      swift_bridgeObjectRetain();
      a8(0, v42, 1, v328, v48);
    }
    return swift_bridgeObjectRelease_n();
  }
  if (v42 >= 0) {
    uint64_t v44 = v42;
  }
  else {
    uint64_t v44 = v42 + 1;
  }
  if (v42 < -1) {
    goto LABEL_278;
  }
  Swift::Int v298 = v43;
  uint64_t v312 = v8;
  if (v42 < 2)
  {
    uint64_t v49 = MEMORY[0x1E4FBC860];
    unint64_t v304 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v308 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v308 + 80));
    if (v42 != 1)
    {
      unint64_t v223 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v51 = (char *)MEMORY[0x1E4FBC860];
      if (v223 < 2)
      {
LABEL_245:
        swift_bridgeObjectRelease();
        *(void *)(v49 + 16) = 0;
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
LABEL_232:
      v284 = (void *)*v328;
      uint64_t v300 = v49;
      v341 = v284;
      uint64_t v285 = v311;
      while (1)
      {
        unint64_t v286 = v223 - 2;
        if (v223 < 2) {
          goto LABEL_264;
        }
        if (!v284) {
          goto LABEL_277;
        }
        v287 = v51;
        uint64_t v288 = *(void *)&v51[16 * v286 + 32];
        uint64_t v289 = *(void *)&v51[16 * v223 + 24];
        uint64_t v290 = *(void *)(v308 + 72);
        v291 = (char *)v284 + v290 * v288;
        v292 = (char *)v284 + v290 * *(void *)&v51[16 * v223 + 16];
        v293 = (char *)v284 + v290 * v289;
        swift_bridgeObjectRetain();
        v294 = v291;
        uint64_t v295 = v312;
        v305(v294, v292, v293, v304, v285);
        uint64_t v312 = v295;
        if (v295) {
          goto LABEL_228;
        }
        swift_bridgeObjectRelease();
        if (v289 < v288) {
          goto LABEL_265;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v287 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v287);
        }
        if (v286 >= *((void *)v287 + 2)) {
          goto LABEL_267;
        }
        v296 = &v287[16 * v286 + 32];
        *(void *)v296 = v288;
        *((void *)v296 + 1) = v289;
        unint64_t v297 = *((void *)v287 + 2);
        if (v223 > v297) {
          goto LABEL_268;
        }
        memmove(&v287[16 * v223 + 16], &v287[16 * v223 + 32], 16 * (v297 - v223));
        uint64_t v51 = v287;
        *((void *)v287 + 2) = v297 - 1;
        unint64_t v223 = v297 - 1;
        BOOL v255 = v297 > 2;
        uint64_t v49 = v300;
        v284 = v341;
        if (!v255) {
          goto LABEL_245;
        }
      }
    }
    uint64_t v300 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v45 = v44 >> 1;
    uint64_t v46 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v46 + 16) = v45;
    uint64_t v47 = *(unsigned __int8 *)(v308 + 80);
    uint64_t v300 = v46;
    unint64_t v304 = v46 + ((v47 + 32) & ~v47);
  }
  Swift::Int v50 = 0;
  v315 = (unsigned __int8 *)(v311 + 64);
  uint64_t v51 = (char *)MEMORY[0x1E4FBC860];
  v332 = v10;
  v333 = v13;
  uint64_t v52 = (uint64_t)v306;
  uint64_t v53 = (uint64_t)v307;
LABEL_14:
  v313 = v51;
  Swift::Int v54 = v50;
  Swift::Int v55 = v50 + 1;
  Swift::Int v317 = v50;
  if (v50 + 1 >= v42)
  {
    Swift::Int v60 = v50 + 1;
    uint64_t v132 = v311;
    goto LABEL_97;
  }
  uint64_t v56 = (void *)*v328;
  Swift::Int v57 = *(void *)(v308 + 72);
  uint64_t v58 = v53;
  outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(*v328 + v57 * v55, v53, v13, v10);
  uint64_t v323 = (uint64_t)v56;
  Swift::Int v324 = v57;
  outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v56 + v57 * v54, v52, v13, v10);
  uint64_t v59 = v312;
  LODWORD(v320) = v299(v58, v52, v311);
  uint64_t v312 = v59;
  if (v59)
  {
    outlined destroy of (offset: Int, element: TableCellFormula)(v52, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of (offset: Int, element: TableCellFormula)(v58, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
LABEL_229:
    swift_bridgeObjectRelease();
    *(void *)(v300 + 16) = 0;
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  outlined destroy of (offset: Int, element: TableCellFormula)(v52, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  outlined destroy of (offset: Int, element: TableCellFormula)(v58, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  Swift::Int v60 = v54 + 2;
  if (v54 + 2 >= v42) {
    goto LABEL_83;
  }
  unint64_t v331 = *(void *)(v311 + 16);
  Swift::Int v319 = v42;
  while (2)
  {
    Swift::Int v314 = v60;
    uint64_t v61 = v323;
    Swift::Int v62 = v324;
    uint64_t v63 = v309;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v323 + v60 * v324, (uint64_t)v309, v13, v10);
    uint64_t v64 = v310;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v61 + v55 * v62, (uint64_t)v310, v13, v10);
    uint64_t v65 = v336;
    uint64_t v66 = *(int *)(v336 + 48);
    uint64_t v67 = (char *)v303 + v66;
    uint64_t v68 = *(int *)(v336 + 64);
    uint64_t v69 = (char *)v303 + v68;
    uint64_t v70 = (char *)v63 + v68;
    void *v303 = *v63;
    BOOL v71 = v334;
    ((void (*)(char *, char *))v334)((char *)v63 + v66, v67);
    unint64_t v72 = *(void *)v70;
    v339 = (unsigned char *)*((void *)v70 + 1);
    char v73 = v339;
    unint64_t v340 = v72;
    uint64_t v74 = *((void *)v70 + 2);
    uint64_t v75 = *((void *)v70 + 3);
    v337 = v69;
    uint64_t v338 = v74;
    uint64_t v322 = (uint64_t)v70;
    LOBYTE(v70) = v70[32];
    *(void *)uint64_t v69 = v72;
    *((void *)v69 + 1) = v73;
    *((void *)v69 + 2) = v74;
    *((void *)v69 + 3) = v75;
    v69[32] = (char)v70;
    uint64_t v76 = *(int *)(v65 + 48);
    int v77 = (char *)v316 + v76;
    uint64_t v78 = *(int *)(v65 + 64);
    uint64_t v79 = (char *)v316 + v78;
    uint64_t v80 = &v64[v78];
    void *v316 = *(void *)v64;
    v330 = v77;
    v71(&v64[v76]);
    uint64_t v81 = *(void *)v80;
    uint64_t v82 = *((void *)v80 + 1);
    uint64_t v83 = *((void *)v80 + 2);
    uint64_t v84 = *((void *)v80 + 3);
    LOBYTE(v80) = v80[32];
    *(void *)uint64_t v79 = v81;
    *((void *)v79 + 1) = v82;
    *((void *)v79 + 2) = v83;
    *((void *)v79 + 3) = v84;
    v329 = v79;
    v79[32] = (char)v80;
    outlined copy of TableColumnCustomizationID.Base(v340, (uint64_t)v339, v338, v75, (char)v70);
    uint64_t v85 = v84;
    uint64_t v10 = v332;
    uint64_t v86 = v333;
    outlined copy of TableColumnCustomizationID.Base(v81, v82, v83, v85, (char)v80);
    if (!v331)
    {
LABEL_56:
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v303, (uint64_t)v86, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      uint64_t v13 = v86;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v316, (uint64_t)v86, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      int v123 = *v309 < *(void *)v310;
      goto LABEL_72;
    }
    unint64_t v87 = 0;
    char v88 = v315;
    while (1)
    {
      uint64_t v95 = *((void *)v88 - 4);
      uint64_t v94 = *((void *)v88 - 3);
      uint64_t v97 = *((void *)v88 - 2);
      uint64_t v96 = *((void *)v88 - 1);
      int v98 = *v88;
      uint64_t v99 = *(void *)v337;
      uint64_t v100 = *((void *)v337 + 1);
      char v101 = v337[32];
      v339 = v88;
      unint64_t v340 = v87;
      LODWORD(v338) = v98;
      if ((v98 & 1) == 0)
      {
        if (v101)
        {
LABEL_35:
          char v105 = 0;
          goto LABEL_42;
        }
        if (v95 != v99 || v94 != v100)
        {
LABEL_40:
          char v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if ((v101 & 1) == 0) {
        goto LABEL_35;
      }
      uint64_t v102 = *((void *)v337 + 2);
      uint64_t v103 = *((void *)v337 + 3);
      BOOL v104 = v95 == v99 && v94 == v100;
      if (v104 || (char v105 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (v97 != v102 || v96 != v103) {
          goto LABEL_40;
        }
LABEL_41:
        char v105 = 1;
      }
LABEL_42:
      uint64_t v108 = v96;
      uint64_t v109 = v94;
      uint64_t v110 = v95;
      uint64_t v111 = (char *)v318 + *(int *)(v336 + 48);
      uint64_t v112 = (char *)v318 + *(int *)(v336 + 64);
      void *v318 = *v316;
      ((void (*)(char *, char *))v334)(v330, v111);
      uint64_t v114 = *(void *)v329;
      uint64_t v113 = *((void *)v329 + 1);
      uint64_t v93 = *((void *)v329 + 2);
      uint64_t v92 = *((void *)v329 + 3);
      char v115 = v329[32];
      *(void *)uint64_t v112 = *(void *)v329;
      *((void *)v112 + 1) = v113;
      *((void *)v112 + 2) = v93;
      *((void *)v112 + 3) = v92;
      v112[32] = v115;
      if (v105)
      {
        uint64_t v110 = v114;
        uint64_t v122 = v113;
        uint64_t v10 = v332;
        goto LABEL_61;
      }
      if ((v338 & 1) == 0) {
        break;
      }
      uint64_t v10 = v332;
      if (v115)
      {
        if (v110 == v114 && v109 == v113
          || (uint64_t v116 = v93,
              uint64_t v117 = v92,
              char v118 = _stringCompareWithSmolCheck(_:_:expecting:)(),
              uint64_t v92 = v117,
              uint64_t v93 = v116,
              (v118 & 1) != 0))
        {
          if (v97 == v93 && v108 == v92)
          {
            char v115 = 1;
            uint64_t v110 = v114;
            uint64_t v122 = v113;
            uint64_t v93 = v97;
            uint64_t v92 = v108;
            goto LABEL_61;
          }
          uint64_t v119 = v93;
          uint64_t v120 = v92;
          char v121 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v92 = v120;
          uint64_t v93 = v119;
          if (v121)
          {
            char v115 = 1;
            goto LABEL_60;
          }
        }
      }
LABEL_21:
      outlined copy of TableColumnCustomizationID.Base(v114, v113, v93, v92, v115);
      uint64_t v86 = v333;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v318, (uint64_t)v333, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      unint64_t v87 = v340 + 1;
      char v88 = v339 + 40;
      if (v331 == v340 + 1) {
        goto LABEL_56;
      }
    }
    uint64_t v10 = v332;
    if (v115) {
      goto LABEL_21;
    }
    uint64_t v122 = v109;
    if (v110 == v114 && v109 == v113)
    {
      char v115 = 0;
      goto LABEL_61;
    }
    uint64_t v89 = v93;
    uint64_t v90 = v92;
    char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v92 = v90;
    uint64_t v93 = v89;
    if ((v91 & 1) == 0) {
      goto LABEL_21;
    }
    char v115 = 0;
LABEL_60:
    uint64_t v110 = v114;
    uint64_t v122 = v113;
LABEL_61:
    outlined copy of TableColumnCustomizationID.Base(v110, v122, v93, v92, v115);
    uint64_t v13 = v333;
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v318, (uint64_t)v333, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v303, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v316, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    if (v340 >= v331) {
      goto LABEL_263;
    }
    uint64_t v124 = *((void *)v339 - 4);
    uint64_t v125 = *((void *)v339 - 3);
    uint64_t v126 = *(void *)v322;
    uint64_t v127 = *(void *)(v322 + 8);
    if ((*v339 & 1) == 0)
    {
      if ((*(unsigned char *)(v322 + 32) & 1) == 0)
      {
        Swift::Int v42 = v319;
        if (v124 == v126 && v125 == v127) {
          goto LABEL_78;
        }
LABEL_79:
        int v123 = _stringCompareWithSmolCheck(_:_:expecting:)();
        goto LABEL_73;
      }
LABEL_71:
      int v123 = 0;
LABEL_72:
      Swift::Int v42 = v319;
      goto LABEL_73;
    }
    if ((*(unsigned char *)(v322 + 32) & 1) == 0) {
      goto LABEL_71;
    }
    uint64_t v128 = *((void *)v339 - 2);
    uint64_t v129 = *((void *)v339 - 1);
    uint64_t v130 = *(void *)(v322 + 16);
    uint64_t v131 = *(void *)(v322 + 24);
    Swift::Int v42 = v319;
    if (v124 == v126 && v125 == v127 || (int v123 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (v128 != v130 || v129 != v131) {
        goto LABEL_79;
      }
LABEL_78:
      int v123 = 1;
    }
LABEL_73:
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v310, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v309, (uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
    if (((v320 ^ v123) & 1) == 0)
    {
      Swift::Int v55 = v314;
      Swift::Int v60 = v314 + 1;
      if (v314 + 1 == v42)
      {
        Swift::Int v60 = v42;
        goto LABEL_82;
      }
      continue;
    }
    break;
  }
  Swift::Int v60 = v314;
LABEL_82:
  Swift::Int v54 = v317;
LABEL_83:
  uint64_t v132 = v311;
  uint64_t v133 = v323;
  if ((v320 & 1) == 0)
  {
LABEL_97:
    if (v60 >= v42) {
      goto LABEL_176;
    }
    if (__OFSUB__(v60, v54)) {
      goto LABEL_269;
    }
    if (v60 - v54 >= v298) {
      goto LABEL_176;
    }
    if (__OFADD__(v54, v298)) {
      goto LABEL_271;
    }
    if (v54 + v298 >= v42) {
      Swift::Int v139 = v42;
    }
    else {
      Swift::Int v139 = v54 + v298;
    }
    if (v139 < v54)
    {
LABEL_272:
      __break(1u);
      goto LABEL_273;
    }
    if (v60 == v139) {
      goto LABEL_176;
    }
    uint64_t v140 = v13;
    unint64_t v331 = *(void *)(v132 + 16);
    uint64_t v320 = *(void *)(v308 + 72);
    Swift::Int v301 = v139;
LABEL_109:
    Swift::Int v314 = v60;
    Swift::Int v141 = v60;
LABEL_112:
    Swift::Int v142 = v141 - 1;
    uint64_t v143 = (void *)*v328;
    uint64_t v144 = v320;
    uint64_t v323 = v320 * v141;
    uint64_t v145 = v325;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v143 + v320 * v141, (uint64_t)v325, v140, v10);
    Swift::Int v324 = v142;
    uint64_t v322 = v144 * v142;
    v146 = v326;
    outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v143 + v144 * v142, (uint64_t)v326, v140, v10);
    uint64_t v147 = v336;
    uint64_t v148 = *(int *)(v336 + 48);
    v149 = (char *)v327 + v148;
    uint64_t v150 = *(int *)(v336 + 64);
    uint64_t v151 = (char *)v327 + v150;
    uint64_t v152 = (char *)v145 + v148;
    uint64_t v153 = (char *)v145 + v150;
    void *v327 = *v145;
    v154 = v334;
    ((void (*)(char *, char *))v334)(v152, v149);
    unint64_t v155 = *(void *)v153;
    v339 = (unsigned char *)*((void *)v153 + 1);
    uint64_t v156 = v339;
    unint64_t v340 = v155;
    uint64_t v158 = *((void *)v153 + 3);
    uint64_t v338 = *((void *)v153 + 2);
    uint64_t v157 = v338;
    Swift::Int v319 = (Swift::Int)v153;
    LOBYTE(v153) = v153[32];
    *(void *)uint64_t v151 = v155;
    *((void *)v151 + 1) = v156;
    *((void *)v151 + 2) = v157;
    *((void *)v151 + 3) = v158;
    v337 = v151;
    v151[32] = (char)v153;
    uint64_t v159 = *(int *)(v147 + 48);
    uint64_t v160 = (char *)v335 + v159;
    uint64_t v161 = *(int *)(v147 + 64);
    uint64_t v162 = (char *)v335 + v161;
    uint64_t v163 = &v146[v161];
    void *v335 = *(void *)v146;
    v330 = v160;
    v154(&v146[v159]);
    uint64_t v164 = *(void *)v163;
    uint64_t v165 = *((void *)v163 + 1);
    uint64_t v166 = *((void *)v163 + 2);
    uint64_t v167 = *((void *)v163 + 3);
    LOBYTE(v163) = v163[32];
    *(void *)uint64_t v162 = v164;
    *((void *)v162 + 1) = v165;
    *((void *)v162 + 2) = v166;
    *((void *)v162 + 3) = v167;
    v329 = v162;
    v162[32] = (char)v163;
    outlined copy of TableColumnCustomizationID.Base(v340, (uint64_t)v339, v338, v158, (char)v153);
    outlined copy of TableColumnCustomizationID.Base(v164, v165, v166, v167, (char)v163);
    if (!v331)
    {
      uint64_t v10 = v332;
      uint64_t v196 = v333;
LABEL_151:
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v327, (uint64_t)v196, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v335, (uint64_t)v196, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      unint64_t v204 = v325;
      uint64_t v205 = *v325;
      uint64_t v140 = v196;
      uint64_t v206 = *(void *)v326;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v326, (uint64_t)v140, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v204, (uint64_t)v140, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      Swift::Int v54 = v317;
      if (v205 < v206) {
        goto LABEL_171;
      }
      goto LABEL_108;
    }
    unint64_t v168 = 0;
    uint64_t v169 = v315;
    while (1)
    {
      uint64_t v175 = *((void *)v169 - 4);
      uint64_t v176 = *((void *)v169 - 3);
      uint64_t v178 = *((void *)v169 - 2);
      uint64_t v177 = *((void *)v169 - 1);
      int v179 = *v169;
      uint64_t v180 = *(void *)v337;
      uint64_t v181 = *((void *)v337 + 1);
      char v182 = v337[32];
      v339 = v169;
      unint64_t v340 = v168;
      LODWORD(v338) = v179;
      if ((v179 & 1) == 0) {
        break;
      }
      if ((v182 & 1) == 0) {
        goto LABEL_129;
      }
      uint64_t v183 = *((void *)v337 + 2);
      uint64_t v184 = *((void *)v337 + 3);
      BOOL v185 = v175 == v180 && v176 == v181;
      if (v185 || (char v186 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (v178 != v183 || v177 != v184) {
          goto LABEL_134;
        }
LABEL_135:
        char v186 = 1;
      }
LABEL_136:
      uint64_t v189 = v177;
      uint64_t v190 = v175;
      v191 = (char *)v341 + *(int *)(v336 + 48);
      char v192 = (char *)v341 + *(int *)(v336 + 64);
      void *v341 = *v335;
      ((void (*)(char *, char *))v334)(v330, v191);
      uint64_t v193 = *(void *)v329;
      uint64_t v194 = *((void *)v329 + 1);
      uint64_t v173 = *((void *)v329 + 2);
      uint64_t v174 = *((void *)v329 + 3);
      char v195 = v329[32];
      *(void *)char v192 = *(void *)v329;
      *((void *)v192 + 1) = v194;
      *((void *)v192 + 2) = v173;
      *((void *)v192 + 3) = v174;
      v192[32] = v195;
      if (v186)
      {
        uint64_t v190 = v193;
        uint64_t v203 = v194;
        uint64_t v196 = v333;
        goto LABEL_157;
      }
      if ((v338 & 1) == 0)
      {
        uint64_t v196 = v333;
        if (v195) {
          goto LABEL_115;
        }
        uint64_t v203 = v176;
        if (v190 == v193 && v176 == v194)
        {
          char v195 = 0;
          goto LABEL_157;
        }
        uint64_t v170 = v173;
        uint64_t v171 = v174;
        char v172 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v173 = v170;
        uint64_t v174 = v171;
        if ((v172 & 1) == 0) {
          goto LABEL_115;
        }
        char v195 = 0;
LABEL_156:
        uint64_t v190 = v193;
        uint64_t v203 = v194;
LABEL_157:
        outlined copy of TableColumnCustomizationID.Base(v190, v203, v173, v174, v195);
        uint64_t v10 = v332;
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v341, (uint64_t)v196, (uint64_t)v332, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v327, (uint64_t)v196, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v335, (uint64_t)v196, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        if (v340 >= v331)
        {
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
LABEL_254:
          __break(1u);
LABEL_255:
          __break(1u);
LABEL_256:
          __break(1u);
LABEL_257:
          __break(1u);
LABEL_258:
          __break(1u);
LABEL_259:
          __break(1u);
LABEL_260:
          __break(1u);
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          __break(1u);
          goto LABEL_272;
        }
        uint64_t v140 = v196;
        uint64_t v207 = *((void *)v339 - 4);
        uint64_t v208 = *((void *)v339 - 3);
        uint64_t v209 = *(void *)v319;
        uint64_t v210 = *(void *)(v319 + 8);
        if (*v339)
        {
          if ((*(unsigned char *)(v319 + 32) & 1) == 0) {
            goto LABEL_107;
          }
          uint64_t v211 = *((void *)v339 - 2);
          uint64_t v212 = *((void *)v339 - 1);
          uint64_t v213 = *(void *)(v319 + 16);
          uint64_t v214 = *(void *)(v319 + 24);
          if ((v207 != v209 || v208 != v210) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_107;
          }
          if (v211 != v213 || v212 != v214) {
            goto LABEL_169;
          }
LABEL_170:
          outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v326, (uint64_t)v140, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v325, (uint64_t)v140, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
          Swift::Int v54 = v317;
LABEL_171:
          v215 = (void *)*v328;
          if (!*v328) {
            goto LABEL_274;
          }
          uint64_t v217 = v322;
          uint64_t v216 = v323;
          unint64_t v218 = (unint64_t)v215 + v323;
          uint64_t v219 = (uint64_t)v215 + v322;
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)((uint64_t)v215 + v323, v321, v140, v10);
          if (v216 < v217 || v218 >= v219 + v320) {
            swift_arrayInitWithTakeFrontToBack();
          }
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v321, v219, v140, v10);
          Swift::Int v141 = v324;
          if (v324 == v54) {
            goto LABEL_108;
          }
          goto LABEL_112;
        }
        if ((*(unsigned char *)(v319 + 32) & 1) == 0)
        {
          if (v207 == v209 && v208 == v210) {
            goto LABEL_170;
          }
LABEL_169:
          if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
            goto LABEL_170;
          }
        }
LABEL_107:
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v326, (uint64_t)v140, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v325, (uint64_t)v140, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        Swift::Int v54 = v317;
LABEL_108:
        Swift::Int v60 = v314 + 1;
        if (v314 + 1 != v301) {
          goto LABEL_109;
        }
        Swift::Int v60 = v301;
        uint64_t v13 = v140;
LABEL_176:
        if (v60 < v54) {
          goto LABEL_266;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v314 = v60;
        if (isUniquelyReferenced_nonNull_native) {
          uint64_t v51 = v313;
        }
        else {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v313 + 2) + 1, 1, v313);
        }
        unint64_t v222 = *((void *)v51 + 2);
        unint64_t v221 = *((void *)v51 + 3);
        unint64_t v223 = v222 + 1;
        uint64_t v53 = (uint64_t)v307;
        if (v222 >= v221 >> 1)
        {
          v282 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v221 > 1), v222 + 1, 1, v51);
          uint64_t v53 = (uint64_t)v307;
          uint64_t v51 = v282;
        }
        *((void *)v51 + 2) = v223;
        unint64_t v224 = (unint64_t)(v51 + 32);
        v225 = &v51[16 * v222 + 32];
        Swift::Int v226 = v314;
        *(void *)v225 = v54;
        *((void *)v225 + 1) = v226;
        if (v222)
        {
          v313 = v51;
          uint64_t v52 = (uint64_t)v306;
          unint64_t v340 = (unint64_t)(v51 + 32);
          while (1)
          {
            unint64_t v227 = v223 - 1;
            if (v223 >= 4)
            {
              unint64_t v232 = v224 + 16 * v223;
              uint64_t v233 = *(void *)(v232 - 64);
              uint64_t v234 = *(void *)(v232 - 56);
              BOOL v238 = __OFSUB__(v234, v233);
              uint64_t v235 = v234 - v233;
              if (v238) {
                goto LABEL_252;
              }
              uint64_t v237 = *(void *)(v232 - 48);
              uint64_t v236 = *(void *)(v232 - 40);
              BOOL v238 = __OFSUB__(v236, v237);
              uint64_t v230 = v236 - v237;
              char v231 = v238;
              if (v238) {
                goto LABEL_253;
              }
              unint64_t v239 = v223 - 2;
              v240 = (uint64_t *)(v224 + 16 * (v223 - 2));
              uint64_t v242 = *v240;
              uint64_t v241 = v240[1];
              BOOL v238 = __OFSUB__(v241, v242);
              uint64_t v243 = v241 - v242;
              if (v238) {
                goto LABEL_255;
              }
              BOOL v238 = __OFADD__(v230, v243);
              uint64_t v244 = v230 + v243;
              if (v238) {
                goto LABEL_258;
              }
              if (v244 >= v235)
              {
                v262 = (uint64_t *)(v224 + 16 * v227);
                uint64_t v264 = *v262;
                uint64_t v263 = v262[1];
                BOOL v238 = __OFSUB__(v263, v264);
                uint64_t v265 = v263 - v264;
                if (v238) {
                  goto LABEL_262;
                }
                BOOL v255 = v230 < v265;
                goto LABEL_214;
              }
            }
            else
            {
              if (v223 != 3)
              {
                uint64_t v256 = *((void *)v51 + 4);
                uint64_t v257 = *((void *)v51 + 5);
                BOOL v238 = __OFSUB__(v257, v256);
                uint64_t v249 = v257 - v256;
                char v250 = v238;
                goto LABEL_208;
              }
              uint64_t v229 = *((void *)v51 + 4);
              uint64_t v228 = *((void *)v51 + 5);
              BOOL v238 = __OFSUB__(v228, v229);
              uint64_t v230 = v228 - v229;
              char v231 = v238;
            }
            if (v231) {
              goto LABEL_254;
            }
            unint64_t v239 = v223 - 2;
            v245 = (uint64_t *)(v224 + 16 * (v223 - 2));
            uint64_t v247 = *v245;
            uint64_t v246 = v245[1];
            BOOL v248 = __OFSUB__(v246, v247);
            uint64_t v249 = v246 - v247;
            char v250 = v248;
            if (v248) {
              goto LABEL_257;
            }
            v251 = (uint64_t *)(v224 + 16 * v227);
            uint64_t v253 = *v251;
            uint64_t v252 = v251[1];
            BOOL v238 = __OFSUB__(v252, v253);
            uint64_t v254 = v252 - v253;
            if (v238) {
              goto LABEL_260;
            }
            if (__OFADD__(v249, v254)) {
              goto LABEL_261;
            }
            if (v249 + v254 >= v230)
            {
              BOOL v255 = v230 < v254;
LABEL_214:
              if (v255) {
                unint64_t v227 = v239;
              }
              goto LABEL_216;
            }
LABEL_208:
            if (v250) {
              goto LABEL_256;
            }
            v258 = (uint64_t *)(v224 + 16 * v227);
            uint64_t v260 = *v258;
            uint64_t v259 = v258[1];
            BOOL v238 = __OFSUB__(v259, v260);
            uint64_t v261 = v259 - v260;
            if (v238) {
              goto LABEL_259;
            }
            if (v261 < v249)
            {
              uint64_t v51 = v313;
              uint64_t v53 = (uint64_t)v307;
              goto LABEL_225;
            }
LABEL_216:
            unint64_t v266 = v227 - 1;
            if (v227 - 1 >= v223) {
              goto LABEL_248;
            }
            v267 = (void *)*v328;
            if (!*v328) {
              goto LABEL_275;
            }
            v268 = (uint64_t *)(v224 + 16 * v266);
            uint64_t v269 = *v268;
            unint64_t v270 = v227;
            v271 = (void *)(v224 + 16 * v227);
            uint64_t v272 = v271[1];
            uint64_t v273 = *(void *)(v308 + 72);
            v274 = (char *)v267 + v273 * *v268;
            v275 = (char *)v267 + v273 * *v271;
            v276 = (char *)v267 + v273 * v272;
            uint64_t v277 = v311;
            swift_bridgeObjectRetain();
            v278 = v274;
            uint64_t v279 = v312;
            v305(v278, v275, v276, v304, v277);
            if (v279)
            {
LABEL_228:
              swift_bridgeObjectRelease();
              goto LABEL_229;
            }
            swift_bridgeObjectRelease();
            if (v272 < v269) {
              goto LABEL_249;
            }
            v280 = v313;
            if (v270 > *((void *)v313 + 2)) {
              goto LABEL_250;
            }
            uint64_t *v268 = v269;
            unint64_t v224 = v340;
            *(void *)(v340 + 16 * v266 + 8) = v272;
            unint64_t v281 = *((void *)v280 + 2);
            if (v270 >= v281) {
              goto LABEL_251;
            }
            uint64_t v312 = 0;
            unint64_t v223 = v281 - 1;
            memmove(v271, v271 + 2, 16 * (v281 - 1 - v270));
            uint64_t v51 = v313;
            *((void *)v313 + 2) = v281 - 1;
            uint64_t v10 = v332;
            uint64_t v13 = v333;
            uint64_t v52 = (uint64_t)v306;
            uint64_t v53 = (uint64_t)v307;
            if (v281 <= 2) {
              goto LABEL_225;
            }
          }
        }
        unint64_t v223 = 1;
        uint64_t v52 = (uint64_t)v306;
LABEL_225:
        Swift::Int v42 = v328[1];
        Swift::Int v50 = v314;
        if (v314 >= v42)
        {
          uint64_t v49 = v300;
          if (v223 < 2) {
            goto LABEL_245;
          }
          goto LABEL_232;
        }
        goto LABEL_14;
      }
      uint64_t v196 = v333;
      if (v195)
      {
        if (v190 == v193 && v176 == v194
          || (uint64_t v197 = v173,
              uint64_t v198 = v174,
              char v199 = _stringCompareWithSmolCheck(_:_:expecting:)(),
              uint64_t v173 = v197,
              uint64_t v174 = v198,
              (v199 & 1) != 0))
        {
          if (v178 == v173 && v189 == v174)
          {
            char v195 = 1;
            uint64_t v190 = v193;
            uint64_t v203 = v194;
            uint64_t v173 = v178;
            uint64_t v174 = v189;
            goto LABEL_157;
          }
          uint64_t v200 = v173;
          uint64_t v201 = v174;
          char v202 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v173 = v200;
          uint64_t v174 = v201;
          if (v202)
          {
            char v195 = 1;
            goto LABEL_156;
          }
        }
      }
LABEL_115:
      outlined copy of TableColumnCustomizationID.Base(v193, v194, v173, v174, v195);
      uint64_t v10 = v332;
      outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v341, (uint64_t)v196, (uint64_t)v332, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
      unint64_t v168 = v340 + 1;
      uint64_t v169 = v339 + 40;
      if (v331 == v340 + 1) {
        goto LABEL_151;
      }
    }
    if (v182)
    {
LABEL_129:
      char v186 = 0;
      goto LABEL_136;
    }
    if (v175 != v180 || v176 != v181)
    {
LABEL_134:
      char v186 = _stringCompareWithSmolCheck(_:_:expecting:)();
      goto LABEL_136;
    }
    goto LABEL_135;
  }
  if (v60 >= v54)
  {
    if (v54 < v60)
    {
      Swift::Int v319 = v42;
      uint64_t v134 = 0;
      uint64_t v135 = v324 * (v60 - 1);
      Swift::Int v136 = v60 * v324;
      Swift::Int v137 = v54;
      uint64_t v138 = v54 * v324;
      Swift::Int v314 = v60;
      do
      {
        if (v137 != v60 + v134 - 1)
        {
          if (!v133) {
            goto LABEL_276;
          }
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v133 + v138, v302, v333, v10);
          if (v138 < v135 || v133 + v138 >= (unint64_t)(v133 + v136))
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v138 != v135)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v302, v133 + v135, v333, v10);
          uint64_t v132 = v311;
          Swift::Int v60 = v314;
          uint64_t v133 = v323;
        }
        ++v137;
        --v134;
        v135 -= v324;
        v136 -= v324;
        v138 += v324;
      }
      while (v137 < v60 + v134);
      Swift::Int v54 = v317;
      Swift::Int v42 = v319;
      uint64_t v13 = v333;
    }
    goto LABEL_97;
  }
LABEL_273:
  __break(1u);
LABEL_274:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_275:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_276:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_277:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_278:
  swift_bridgeObjectRelease_n();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(a1, a2);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySS_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_w1_wV8SSGATTG50I2UI0dK0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 5;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOys11AnyHashableV_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f11OyAL_GXEfU_y1_y6Says11gH7VGAVTG50K2UI0dM0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v5 = MEMORY[0x1E4FBB960];
    do
    {
      outlined init with copy of CollectionDifference<AnyHashable>.Change(v4, (uint64_t)&v10, &lazy cache variable for type metadata for CollectionDifference<AnyHashable>.Change, v5, MEMORY[0x1E4FBBD78]);
      uint64_t v6 = v10;
      outlined destroy of AnyHashable((uint64_t)&v11);
      uint64_t v2 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v12;
      }
      unint64_t v8 = *(void *)(v2 + 16);
      unint64_t v7 = *(void *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t v2 = v12;
      }
      *(void *)(v2 + 16) = v8 + 1;
      *(void *)(v2 + 8 * v8 + 32) = v6;
      v4 += 64;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI17SystemSegmentItemV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA17ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  type metadata accessor for CollectionDifference<SystemSegmentItem>.Change(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    do
    {
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for CollectionDifference<SystemSegmentItem>.Change);
      uint64_t v10 = *v5;
      type metadata accessor for (offset: Int, element: SystemSegmentItem, associatedWith: Int?)();
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v5 + *(int *)(v11 + 48), (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      uint64_t v7 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v16;
      }
      unint64_t v13 = *(void *)(v7 + 16);
      unint64_t v12 = *(void *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v7 = v16;
      }
      *(void *)(v7 + 16) = v13 + 1;
      *(void *)(v7 + 8 * v13 + 32) = v10;
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(uint64_t result, uint64_t a2)
{
  uint64_t v16 = result;
  unint64_t v2 = *(void *)(result + 16);
  char v3 = v2 == 0;
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v2)
  {
    if (v4)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 1;
      goto LABEL_31;
    }
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v5 = 0;
  uint64_t v6 = *(void *)(result + 16);
  while (v5 == v4)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    if (!v6) {
      return v7;
    }
    uint64_t v21 = MEMORY[0x1E4FBC860];
    int64_t v8 = v6 & ~(v6 >> 63);
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v7 = v21;
    if (v2)
    {
      if ((v6 & 0x8000000000000000) == 0) {
        goto LABEL_11;
      }
      __break(1u);
    }
    if ((v6 & 0x8000000000000000) == 0)
    {
LABEL_11:
      unint64_t v9 = 0;
      while (v8)
      {
        if (v3)
        {
          uint64_t v4 = a2;
          unint64_t v5 = *(void *)(a2 + 16);
          if (v9 >= v5) {
            goto LABEL_28;
          }
        }
        else
        {
          uint64_t v4 = v16;
          if (v9 >= v2) {
            goto LABEL_29;
          }
        }
        uint64_t result = swift_getAtKeyPath();
        long long v10 = v18;
        long long v11 = v19;
        unint64_t v13 = *(void *)(v21 + 16);
        unint64_t v12 = *(void *)(v21 + 24);
        if (v13 >= v12 >> 1)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
          long long v11 = v19;
          long long v10 = v18;
        }
        *(void *)(v21 + 16) = v13 + 1;
        uint64_t v4 = v21 + 40 * v13;
        unint64_t v5 = v9 + 1 == v2;
        if (v9 + 1 == v2) {
          unint64_t v14 = 0;
        }
        else {
          unint64_t v14 = v9 + 1;
        }
        *(_OWORD *)(v4 + 32) = v10;
        *(_OWORD *)(v4 + 48) = v11;
        *(unsigned char *)(v4 + 64) = v20;
        if (v3) {
          ++v9;
        }
        else {
          unint64_t v9 = v14;
        }
        v3 |= v5;
        --v8;
        if (!--v6) {
          return v7;
        }
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
LABEL_31:
    BOOL v15 = __OFADD__(v5++, 1);
    if (v15) {
      goto LABEL_36;
    }
  }
  BOOL v15 = __OFADD__(v6++, 1);
  if (!v15) {
    goto LABEL_31;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA14iJ11V2IDVGAXTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 9;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI14ToolbarStorageV5EntryV2IDV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f23OyAL_GXEfU_Si_SiSayAA14ij2V5K11V2IDVGAZTG5AJ0dP0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of CollectionDifference<AnyHashable>.Change(v4, (uint64_t)&v9, &lazy cache variable for type metadata for CollectionDifference<ToolbarStorage.Entry.ID>.Change, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBBD78]);
      uint64_t v5 = v9;
      outlined destroy of ToolbarStorage.Entry.ID((uint64_t)&v10);
      uint64_t v2 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v11;
      }
      unint64_t v7 = *(void *)(v2 + 16);
      unint64_t v6 = *(void *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        uint64_t v2 = v11;
      }
      *(void *)(v2 + 16) = v7 + 1;
      *(void *)(v2 + 8 * v7 + 32) = v5;
      v4 += 112;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI23KeyboardShortcutBindingV_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f16OyAL_GXEfU_Si_Siz4AA23ijK7VGAVTG5AJ0dO0VyS2iGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 11;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOy7SwiftUI10TableRowIDO_GG_Sis5NeverOTg503_s7g4UI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f54OyAL_GXEfU_AA13CountingIndexVySiG_AvA0tuC0VyAA09Shadowj8C0VyAA22I46DataSourceAdaptorVGGAXyAA08ResolvedxW3IDsVGTG5AJ0dO0VyAJ13CountingIndexVySiGAVGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of CollectionDifference<AnyHashable>.Change(v4, (uint64_t)&v9, &lazy cache variable for type metadata for CollectionDifference<TableRowID>.Change, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBD78]);
      uint64_t v5 = v9;
      outlined destroy of TableRowID((uint64_t)&v10);
      uint64_t v2 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v11;
      }
      unint64_t v7 = *(void *)(v2 + 16);
      unint64_t v6 = *(void *)(v2 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        uint64_t v2 = v11;
      }
      *(void *)(v2 + 16) = v7 + 1;
      *(void *)(v2 + 8 * v7 + 32) = v5;
      v4 += 72;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays20CollectionDifferenceV6ChangeOySi_GG_Sis5NeverOTg5012_s7SwiftUI17d116ChangesV14changedOffsets33_BECB2E29DCF6A1FE856734124D30AD74LL4from2to5limitSaySiG_AItSgqd___qd_0_SitSKRd__SKRd_0_SH7b50Rpd__AKQyd_0_ALRSr0_lFAJSRyALGXEfU_AjNXEfU_Sis0C10e2V6f30OyAL_GXEfU_AA13CountingIndexVyw86G_AvA0tuC0VyAA013ShadowSectionC0VyAA22TableDataSourceAdaptorVGGAXys15LazyMapSequenceVyV28AA0X8SectionsV4ItemVGSiGGTG50I2UI0dK0VyAO13CountingIndexVySiGATGTf1cn_nTf4nd_nTm(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 4;
      uint64_t v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t result = v10;
      }
      *(void *)(result + 16) = v8 + 1;
      *(void *)(result + 8 * v8 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t a1, void *a2)
{
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(a1, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
  uint64_t v4 = *(void *)(a1 + 200);
  uint64_t v31 = v4;
  uint64_t v5 = v30;
  if (v4 == v30)
  {
    uint64_t v4 = 0;
LABEL_18:
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    return v4;
  }
  else
  {
    uint64_t v18 = (uint64_t)a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0x88);
    uint64_t result = swift_beginAccess();
    uint64_t v17 = v5;
    while (1)
    {
      uint64_t v7 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        break;
      }
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v18, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
      uint64_t v8 = outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v20, (uint64_t)v19, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      uint64_t v10 = v21;
      uint64_t v9 = v22;
      if (*(void *)(v22 + 16) || *(void *)(v21 + 16))
      {
        MEMORY[0x1F4188790](v8);
        lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v9, v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        unint64_t v12 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v4);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v12 = v4;
      }
      specialized ShadowRowCollection.init(_:section:)(v19, v12, (uint64_t)v23);
      uint64_t result = outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v20);
      uint64_t v13 = v26;
      uint64_t v14 = v26 + v27;
      if (__OFADD__(v26, v27)) {
        goto LABEL_20;
      }
      unint64_t v15 = *(void *)(v25 + 16);
      if (v15 || (unint64_t v15 = *(void *)(v24 + 16)) != 0)
      {
        specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v20, v25, v24, v28, v14, v15);
        uint64_t v14 = v20[0];
      }
      uint64_t result = outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v23);
      if (v13 != v14)
      {
        uint64_t v16 = v4 + 1;
LABEL_17:
        uint64_t v31 = v16;
        goto LABEL_18;
      }
      ++v4;
      uint64_t v16 = v17;
      if (v7 == v17)
      {
        uint64_t v4 = 0;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
  }
  return result;
}

uint64_t specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v75 = MEMORY[0x1E4FBC860];
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(a1, (uint64_t)v68, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  uint64_t v51 = a2;
  unint64_t v14 = specialized ShadowListUpdateRecorder.initialIndex(_:)(a2);
  uint64_t result = specialized ShadowRowCollection.init(_:section:)(v68, v14, (uint64_t)v69);
  if ((a6 & 0x8000000000000000) != 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v16 = *(void *)(a5 + 40);
  if (*(void *)(v16 + 16) <= a6)
  {
LABEL_30:
    __break(1u);
    return result;
  }
  uint64_t v17 = v16 + 96 * a6;
  uint64_t v18 = *(void **)(v17 + 96);
  char v19 = *(unsigned char *)(v17 + 104);
  uint64_t v20 = *(void *)(v17 + 112);
  uint64_t v21 = *(void *)(v17 + 120);
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v69, (uint64_t)v68, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  v63[0] = v13;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)v18, v19);
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v68, v18, v19, v20, v21);
  uint64_t result = _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  uint64_t v57 = v13;
  uint64_t v56 = *(void *)(v13 + 16);
  if (v56)
  {
    unint64_t v22 = 0;
    uint64_t v48 = v21;
    BOOL v23 = __OFADD__(v20, v21);
    BOOL v50 = v23;
    char v24 = a4;
    uint64_t v25 = (uint64_t *)(v13 + 64);
    char v46 = a8 & 1;
    char v47 = v24 & 1;
    uint64_t v44 = v18;
    unint64_t v45 = a6;
    uint64_t v49 = v20;
    char v43 = v19;
    while (v22 < *(void *)(v57 + 16))
    {
      uint64_t v29 = *(v25 - 4);
      uint64_t v28 = *(v25 - 3);
      unint64_t v31 = *(v25 - 2);
      uint64_t v30 = *(v25 - 1);
      uint64_t v32 = v25[1];
      uint64_t v60 = *v25;
      if (*((unsigned char *)v25 + 57))
      {
        if (*((unsigned char *)v25 + 57) == 1)
        {
          if (v50) {
            goto LABEL_27;
          }
          LOBYTE(v68[0]) = v46;
          char v54 = v31;
          uint64_t v58 = v30;
          uint64_t v33 = v28;
          uint64_t v34 = swift_allocObject();
          *(void *)(v34 + 16) = a6;
          *(void *)(v34 + 24) = a7;
          *(unsigned char *)(v34 + 32) = v68[0];
          uint64_t v76 = v18;
          char v77 = v19;
          uint64_t v78 = v20;
          uint64_t v79 = v21;
          uint64_t v80 = v29;
          uint64_t v81 = v33;
          char v82 = v54 & 1;
          uint64_t v83 = v58;
          uint64_t v84 = v60;
          char v85 = v32 & 1;
          uint64_t v86 = partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:);
          uint64_t v87 = v34;
          outlined copy of ResolvedTableRowIDs.Storage((uint64_t)v18, v19);
          uint64_t result = specialized Array.append<A>(contentsOf:)((uint64_t)&v76);
        }
      }
      else
      {
        uint64_t v55 = *(v25 - 3);
        uint64_t v59 = *(v25 - 1);
        uint64_t result = _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v69, (uint64_t)v63, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        uint64_t v35 = v72;
        uint64_t v26 = v72 + v73;
        if (__OFADD__(v72, v73)) {
          goto LABEL_28;
        }
        unint64_t v36 = v74;
        uint64_t v37 = v71;
        uint64_t v38 = v70;
        unint64_t v39 = *(void *)(v71 + 16);
        if (v39 || (unint64_t v39 = v72 + v73, *(void *)(v70 + 16)))
        {
          char v40 = v31;
          unint64_t v31 = v74;
          specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v68, v71, v70, v74, v72 + v73, v39);
          unint64_t v36 = v31;
          LOBYTE(v31) = v40;
          unint64_t v39 = v68[0];
        }
        v63[30] = v35;
        v63[31] = 0;
        BOOL v64 = v35 == v39;
        unint64_t v41 = *(void *)(v37 + 16);
        if (v41 || (unint64_t v41 = *(void *)(v38 + 16)) != 0)
        {
          specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v68, v37, v38, v36, v26, v41);
          uint64_t v26 = v68[0];
        }
        uint64_t v18 = v44;
        a6 = v45;
        char v19 = v43;
        uint64_t v65 = v26;
        uint64_t v66 = 0;
        char v67 = 1;
        _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v63, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
        __src[30] = v29;
        __src[31] = v55;
        LOBYTE(__src[32]) = v31 & 1;
        __src[33] = v59;
        __src[34] = v60;
        LOBYTE(__src[35]) = v32 & 1;
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
        memcpy(__dst, __src, 0x119uLL);
        LOBYTE(v68[0]) = v47;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = v51;
        *(void *)(v27 + 24) = a3;
        *(unsigned char *)(v27 + 32) = v68[0];
        _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)__dst, (uint64_t)v68, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
        v68[36] = partial apply for specialized closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:);
        v68[37] = v27;
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>);
        uint64_t result = specialized Array.append<A>(contentsOf:)((uint64_t)v68);
        uint64_t v21 = v48;
        uint64_t v20 = v49;
      }
      ++v22;
      v25 += 12;
      if (v56 == v22)
      {
        swift_bridgeObjectRelease();
        outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)v18, v19);
        uint64_t v42 = v75;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)v18, v19);
  uint64_t v42 = MEMORY[0x1E4FBC860];
LABEL_25:
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
  return v42;
}

id specialized UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(char a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1588]), sel_init);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  if (a1)
  {
    char v3 = self;
    id v4 = objc_msgSend(v3, sel_fractionalWidthDimension_, 1.0);
    if (one-time initialization token for tableHeaderMinHeight != -1) {
      swift_once();
    }
    id v5 = objc_msgSend(v3, sel_absoluteDimension_, *(double *)&static ListMetrics.tableHeaderMinHeight);
    id v6 = objc_msgSend(self, sel_sizeWithWidthDimension_heightDimension_, v4, v5);

    uint64_t v7 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x80000001883361A0);
    id v8 = objc_msgSend(self, sel_boundarySupplementaryItemWithLayoutSize_elementKind_alignment_, v6, v7, 1);

    objc_msgSend(v8, sel_setZIndex_, 199);
    objc_msgSend(v8, sel_setPinToVisibleBounds_, 1);
    objc_msgSend(v8, sel_setExtendsBoundary_, 0);
    id v9 = v8;
    MEMORY[0x18C115B40]();
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSCollectionLayoutBoundarySupplementaryItem);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_setBoundarySupplementaryItems_, isa);

  return v2;
}

id specialized UICollectionViewListCoordinatorBase.init(dataSource:selection:editMode:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  id v8 = (void *)MEMORY[0x1E4FBC8C8];
  *(void *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x80)) = MEMORY[0x1E4FBC870];
  uint64_t v9 = *(void *)((*v8 & *v6) + 0x90);
  id v10 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  uint64_t v11 = v6;
  uint64_t v12 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  *(void *)&v12[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_options] = 4;
  v12[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(void *)((char *)v6 + v9) = v12;
  uint64_t v13 = (void *)((char *)v11 + *(void *)((*v8 & *v11) + 0x98));
  void *v13 = 0;
  v13[1] = 0;
  unint64_t v14 = (void *)((char *)v11 + *(void *)((*v8 & *v11) + 0xA0));
  *unint64_t v14 = 1;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0xA8)) = 0;
  unint64_t v15 = (char *)v11 + *(void *)((*v8 & *v11) + 0xB0);
  IndexSet.init()();
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  uint64_t v17 = v16;
  IndexSet.init()();
  uint64_t v18 = MEMORY[0x1E4FBC860];
  *(void *)&v15[v17[10]] = MEMORY[0x1E4FBC860];
  *(void *)&v15[v17[11]] = v18;
  *(void *)&v15[v17[12]] = v18;
  *(void *)&v15[v17[13]] = v18;
  IndexSet.init()();
  char v19 = (uint64_t *)&v15[v17[15]];
  unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  unint64_t v21 = specialized Dictionary.init(dictionaryLiteral:)(v18);
  *char v19 = v18;
  v19[1] = v18;
  v19[2] = v18;
  v19[3] = v20;
  v19[4] = v21;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0xB8)) = 1;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0xC0)) = 0;
  unint64_t v22 = (_OWORD *)((char *)v11 + *(void *)((*v8 & *v11) + 0xC8));
  *unint64_t v22 = 0u;
  v22[1] = 0u;
  v22[2] = 0u;
  v22[3] = 0u;
  v22[4] = 0u;
  v22[5] = 0u;
  v22[6] = 0u;
  v22[7] = 0u;
  v22[8] = 0u;
  v22[9] = 0u;
  *(_OWORD *)((char *)v22 + 155) = 0u;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0xD0)) = 0;
  BOOL v23 = (char *)v11 + *(void *)((*v8 & *v11) + 0xD8);
  uint64_t v24 = type metadata accessor for IndexPath();
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  v25(v23, 1, 1, v24);
  v25((char *)v11 + *(void *)((*v8 & *v11) + 0xE0), 1, 1, v24);
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0xE8)) = 0;
  uint64_t v26 = (char *)v11 + *(void *)((*v8 & *v11) + 0xF0);
  *(void *)uint64_t v26 = 0;
  *((_WORD *)v26 + 4) = 256;
  swift_unknownObjectWeakInit();
  uint64_t v27 = (_OWORD *)((char *)v11 + *(void *)((*v8 & *v11) + 0x100));
  *uint64_t v27 = 0u;
  v27[1] = 0u;
  v27[2] = 0u;
  *(_OWORD *)((char *)v27 + 41) = 0u;
  uint64_t v28 = (char *)v11 + *(void *)((*v8 & *v11) + 0x108);
  LOBYTE(v63) = 0;
  OptionalEdgeInsets.init()();
  uint64_t v29 = *((void *)&v63 + 1);
  char v30 = v64;
  uint64_t v31 = *((void *)&v64 + 1);
  char v32 = v65;
  uint64_t v33 = *((void *)&v65 + 1);
  char v34 = v66;
  uint64_t v35 = *((void *)&v66 + 1);
  char v36 = v67;
  *uint64_t v28 = 0;
  *((void *)v28 + 1) = v29;
  v28[16] = v30;
  *((void *)v28 + 3) = v31;
  v28[32] = v32;
  *((void *)v28 + 5) = v33;
  v28[48] = v34;
  *((void *)v28 + 7) = v35;
  v28[64] = v36;
  uint64_t v37 = (char *)v11 + *(void *)((*v8 & *v11) + 0x110);
  *(void *)uint64_t v37 = 0;
  *((void *)v37 + 1) = 0;
  v37[16] = 0;
  uint64_t v38 = (_OWORD *)((char *)v11 + *(void *)((*v8 & *v11) + 0x118));
  *uint64_t v38 = 0u;
  v38[1] = 0u;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0x120)) = 0;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0x128)) = 0;
  unint64_t v39 = (char *)v11 + *(void *)((*v8 & *v11) + 0x130);
  *(void *)unint64_t v39 = 0;
  *((_WORD *)v39 + 4) = 256;
  char v40 = (char *)v11 + *(void *)((*v8 & *v11) + 0x138);
  *(void *)char v40 = 0;
  v40[8] = 1;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0x140)) = 0;
  *((unsigned char *)v11 + *(void *)((*v8 & *v11) + 0x148)) = 0;
  *(void *)((char *)v11 + *(void *)((*v8 & *v11) + 0x150)) = 0;
  outlined init with copy of TableDataSourceAdaptor(a1, (uint64_t)v75);
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v75, (uint64_t)&v63);
  *(void *)&long long v74 = v18;
  *((void *)&v74 + 1) = v18;
  outlined destroy of TableDataSourceAdaptor((uint64_t)v75);
  unint64_t v41 = (_OWORD *)((char *)v11 + *(void *)((*v8 & *v11) + 0x88));
  long long v42 = v74;
  long long v43 = v71;
  long long v44 = v72;
  v41[10] = v73;
  v41[11] = v42;
  v41[8] = v43;
  v41[9] = v44;
  long long v45 = v70;
  long long v46 = v67;
  long long v47 = v68;
  v41[6] = v69;
  v41[7] = v45;
  v41[4] = v46;
  v41[5] = v47;
  long long v48 = v66;
  long long v49 = v63;
  long long v50 = v64;
  v41[2] = v65;
  v41[3] = v48;
  *unint64_t v41 = v49;
  v41[1] = v50;
  swift_beginAccess();
  outlined assign with copy of Binding<SelectionManagerBox<AnyHashable>>?(a2, (uint64_t)v27);
  swift_endAccess();
  uint64_t v51 = *(void *)v37;
  uint64_t v52 = *((void *)v37 + 1);
  *(void *)uint64_t v37 = a3;
  *((void *)v37 + 1) = a4;
  v37[16] = a5;
  outlined consume of Binding<NavigationSplitViewColumn>?(v51, v52);
  swift_beginAccess();
  uint64_t v53 = *v14;
  *unint64_t v14 = a6;
  outlined copy of Transaction?(a6);
  outlined consume of Transaction?(v53);

  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, &lazy cache variable for type metadata for UICollectionViewListCoordinatorBase<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for UICollectionViewListCoordinatorBase);
  v62.receiver = v11;
  v62.super_class = v54;
  id v55 = objc_msgSendSuper2(&v62, sel_init);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(a2, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  outlined destroy of TableDataSourceAdaptor(a1);
  return v55;
}

uint64_t outlined destroy of Binding<AnyTableColumnCustomization>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for MutableBox<UInt32>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of CollectionDifference<AnyHashable>.Change(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for MutableBox<UInt32>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>()
{
  if (!lazy cache variable for type metadata for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>();
    unint64_t v0 = type metadata accessor for DefaultIndices();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>;
  if (!lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>;
  if (!lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>);
  }
  return result;
}

unint64_t partial apply for specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(unint64_t *a1)
{
  return (unint64_t)specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_187FB8248()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)()
{
  specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(*(void *)(v0 + 16), *(char **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ShadowRowCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowRowCollection);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ShadowListUpdateRecorder<TableDataSourceAdaptor>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187FB83C0()
{
  return 16;
}

__n128 sub_187FB83CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with take of TableHeaderView?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for MutableBox<UInt32>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_187FB84EC()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  specialized closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t outlined assign with copy of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_187FB8674()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187FB86AC()
{
  return swift_deallocObject();
}

void partial apply for specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(void **)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t sub_187FB86F8()
{
  return swift_deallocObject();
}

void type metadata accessor for IndexPath?(uint64_t a1)
{
}

uint64_t sub_187FB873C()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1)
{
  specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32), *(unsigned char *)(v1 + 33));
}

uint64_t outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_187FB87F4()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_layoutIfNeeded);
  specialized UICollectionViewListCoordinatorBase.updateListContents(_:)(v1);
}

uint64_t sub_187FB886C()
{
  return swift_deallocObject();
}

uint64_t sub_187FB887C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 112)) {
    swift_bridgeObjectRelease();
  }
  else {
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 144))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 168))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  return specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(void **)(v0 + 16), v0 + 24, *(void **)(v0 + 200));
}

uint64_t sub_187FB8948()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)()
{
  return specialized closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t outlined init with take of SelectionManagerBox<AnyHashable>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI19SelectionManagerBoxOys11AnyHashableVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?(uint64_t a1)
{
}

void type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>()
{
  if (!lazy cache variable for type metadata for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    lazy protocol witness table accessor for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>();
    unint64_t v0 = type metadata accessor for _RowVisitationContext();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>;
  if (!lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>;
  if (!lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>);
  }
  return result;
}

uint64_t outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with copy of TableDataSourceAdaptor(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for MutableBox<UInt32>(255, a3, a4, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t partial apply for specialized closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  return specialized closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_187FB8CDC()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of TableCellFormula(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CountingIndexListDataSource<TableDataSourceAdaptor>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for CountingIndexListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CountingIndexListDataSource);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>()
{
  if (!lazy cache variable for type metadata for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    lazy protocol witness table accessor for type ShadowListDataSource<TableDataSourceAdaptor> and conformance ShadowListDataSource<A>();
    unint64_t v0 = type metadata accessor for CountingIndexListDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>);
    }
  }
}

void type metadata accessor for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>()
{
  if (!lazy cache variable for type metadata for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>)
  {
    type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>))(255);
    lazy protocol witness table accessor for type TableRowID and conformance TableRowID();
    unint64_t v0 = type metadata accessor for _NativeDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>);
    }
  }
}

void type metadata accessor for _NativeDictionary<Int, (Int, CountingIndex<Int>)>()
{
  if (!lazy cache variable for type metadata for _NativeDictionary<Int, (Int, CountingIndex<Int>)>)
  {
    type metadata accessor for (Int, CountingIndex<Int>)();
    unint64_t v0 = type metadata accessor for _NativeDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<Int, (Int, CountingIndex<Int>)>);
    }
  }
}

void type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>()
{
  if (!lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>)
  {
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(255, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    lazy protocol witness table accessor for type ShadowSectionCollection<TableDataSourceAdaptor> and conformance ShadowSectionCollection<A>();
    unint64_t v0 = type metadata accessor for CountingIndexCollection();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    }
  }
}

uint64_t sub_187FB9114()
{
  return swift_deallocObject();
}

double partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, 4, a2).n128_u64[0];
  return result;
}

uint64_t sub_187FB912C()
{
  return swift_deallocObject();
}

double partial apply for specialized closure #1 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(a1, 3, a2).n128_u64[0];
  return result;
}

__n128 partial apply for specialized closure #2 in ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)@<Q0>(__n128 *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 v4 = a1[1].n128_u8[0];
  char v5 = *(unsigned char *)(v3 + 32);
  *(_OWORD *)a3 = *(_OWORD *)(v3 + 16);
  *(unsigned char *)(a3 + 16) = v5;
  __n128 result = *a1;
  *(__n128 *)(a3 + 24) = *a1;
  *(unsigned char *)(a3 + 40) = v4;
  *(unsigned char *)(a3 + 89) = a2;
  return result;
}

void type metadata accessor for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>()
{
  if (!lazy cache variable for type metadata for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>();
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (void (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
    unint64_t v0 = type metadata accessor for LazySequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazySequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB0C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<TableRowID> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void type metadata accessor for (TableRowID, TableRowID)()
{
  if (!lazy cache variable for type metadata for (TableRowID, TableRowID))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TableRowID, TableRowID));
    }
  }
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>()
{
  if (!lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>)
  {
    type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>();
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance CountingIndexCollection<A>, (void (*)(uint64_t))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    unint64_t v0 = type metadata accessor for DefaultIndices();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    }
  }
}

void type metadata accessor for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator()
{
  if (!lazy cache variable for type metadata for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>();
    type metadata accessor for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>();
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (void (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>> and conformance DefaultIndices<A>, (void (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>);
    unint64_t v0 = type metadata accessor for Zip2Sequence.Iterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator);
    }
  }
}

void type metadata accessor for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>()
{
  if (!lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>)
  {
    type metadata accessor for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>();
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>> and conformance CountingIndexCollection<A>, (void (*)(uint64_t))type metadata accessor for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>);
    unint64_t v0 = type metadata accessor for DefaultIndices();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>);
    }
  }
}

void type metadata accessor for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>()
{
  if (!lazy cache variable for type metadata for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>)
  {
    type metadata accessor for LazyMapSequence<[TableSections.Item], Int>();
    lazy protocol witness table accessor for type LazyMapSequence<[TableSections.Item], Int> and conformance <> LazyMapSequence<A, B>();
    unint64_t v0 = type metadata accessor for CountingIndexCollection();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>);
    }
  }
}

void type metadata accessor for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>)
  {
    type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>();
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>> and conformance DefaultIndices<A>, (void (*)(uint64_t))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB0C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<Int> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void type metadata accessor for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>)
  {
    type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>();
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>> and conformance DefaultIndices<A>, (void (*)(uint64_t))type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    }
  }
}

void type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    _s7SwiftUI19SelectionManagerBoxOys11AnyHashableVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    v9[0] = &type metadata for TableDataSourceAdaptor;
    v9[1] = v6;
    v9[2] = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    v9[3] = lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>();
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2)
{
  return partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:));
}

{
  return partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void, void))specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:));
}

uint64_t outlined destroy of EnumeratedSequence<TableColumnCollection>(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for EnumeratedSequence<TableColumnCollection>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBBCF8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with copy of TableColumnCollection.Entry(uint64_t a1, uint64_t a2)
{
  return _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(a1, a2, type metadata accessor for TableColumnCollection.Entry);
}

uint64_t outlined destroy of (offset: Int, element: TableCellFormula)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with take of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  char v7 = *(unsigned char *)(a1 + 32);
  return specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)((uint64_t)v6, v2, v3) & 1;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  long long v4;
  _OWORD v6[2];
  char v7;

  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  char v7 = *(unsigned char *)(a1 + 32);
  return specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)((uint64_t)v6, v2, v3) & 1;
}

void type metadata accessor for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)?(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(255, a3, a4);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of EnumeratedSequence<TableColumnCollection>.Iterator(uint64_t a1)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for EnumeratedSequence<TableColumnCollection>.Iterator, (uint64_t (*)(void))lazy protocol witness table accessor for type TableColumnCollection and conformance TableColumnCollection, (uint64_t)&type metadata for TableColumnCollection, MEMORY[0x1E4FBBCF0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void, void))
{
  return a3(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64));
}

uint64_t outlined init with copy of TableCellFormula(uint64_t a1, uint64_t a2)
{
  return _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(a1, a2, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
}

void type metadata accessor for (offset: Int, element: TableColumnCollection.Entry)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t partial apply for closure #1 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(a1, closure #1 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:));
}

uint64_t partial apply for closure #2 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(a1, closure #2 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:));
}

uint64_t partial apply for closure #3 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(uint64_t a1)
{
  return partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(a1, closure #3 in UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:));
}

uint64_t partial apply for closure #1 in static CollectionViewTableRoot._makeView(view:inputs:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void type metadata accessor for _GraphValue<Binding<AnyTableColumnCustomization>?>()
{
  if (!lazy cache variable for type metadata for _GraphValue<Binding<AnyTableColumnCustomization>?>)
  {
    type metadata accessor for Binding<EditMode>?(255, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>?, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<AnyTableColumnCustomization>?>);
    }
  }
}

void _s7SwiftUI19SelectionManagerBoxOys11AnyHashableVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, MEMORY[0x1E4FBB0C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.ID> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void type metadata accessor for UnsafeBufferPointer<SystemSegmentItem>(uint64_t a1)
{
}

void type metadata accessor for CollectionDifference<SystemSegmentItem>.Change(uint64_t a1)
{
}

uint64_t _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (offset: Int, element: SystemSegmentItem, associatedWith: Int?)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: SystemSegmentItem, associatedWith: Int?))
  {
    type metadata accessor for SystemSegmentItem();
    type metadata accessor for MutableBox<UInt32>(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: SystemSegmentItem, associatedWith: Int?));
    }
  }
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB0C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<ToolbarStorage.Entry.ID> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

uint64_t _ss11AnyHashableVSg_ACtWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB0C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<AnyHashable> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

uint64_t outlined retain of KeyboardShortcutBinding(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of KeyboardShortcutBinding(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBB0C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<KeyboardShortcutBinding> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

void destroy for UpdateCollectionViewTableCoordinator(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  if (*(void *)(a1 + 112))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(a1 + 176)) {
      swift_bridgeObjectRelease();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(a1 + 136);
    }
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 208))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 232))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v2 = *(void **)(a1 + 264);
}

uint64_t initializeWithCopy for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  swift_unknownObjectWeakCopyInit();
  uint64_t v5 = (_OWORD *)(a1 + 88);
  uint64_t v6 = (_OWORD *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 112);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 120);
    *(void *)(a1 + 112) = v7;
    *(void *)(a1 + 120) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    char v9 = *(unsigned char *)(a2 + 176);
    swift_bridgeObjectRetain();
    if (v9)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v15 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 160) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 136, a2 + 136);
    }
    *(unsigned char *)(a1 + 176) = v9;
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v16 = *(void *)(a2 + 208);
    swift_bridgeObjectRetain();
    if (v16)
    {
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = v16;
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v17 = *(void *)(a2 + 232);
      if (v17)
      {
LABEL_8:
        *(void *)(a1 + 224) = *(void *)(a2 + 224);
        *(void *)(a1 + 232) = v17;
        uint64_t v18 = *(void *)(a2 + 248);
        *(void *)(a1 + 240) = *(void *)(a2 + 240);
        *(void *)(a1 + 248) = v18;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_11:
        *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
        *(_WORD *)(a1 + 257) = *(_WORD *)(a2 + 257);
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      uint64_t v17 = *(void *)(a2 + 232);
      if (v17) {
        goto LABEL_8;
      }
    }
    long long v19 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v19;
    goto LABEL_11;
  }
  long long v10 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v10;
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  long long v11 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v11;
  long long v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v12;
  long long v13 = *(_OWORD *)(a2 + 104);
  *uint64_t v5 = *v6;
  *(_OWORD *)(a1 + 104) = v13;
  long long v14 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v14;
LABEL_12:
  unint64_t v20 = *(void **)(a2 + 264);
  *(void *)(a1 + 264) = v20;
  id v21 = v20;
  return a1;
}

uint64_t assignWithCopy for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_unknownObjectWeakCopyAssign();
  long long v4 = (long long *)(a1 + 88);
  uint64_t v5 = (long long *)(a2 + 88);
  uint64_t v6 = *(void *)(a2 + 112);
  if (!*(void *)(a1 + 112))
  {
    if (!v6)
    {
      long long v16 = *v5;
      long long v17 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = v17;
      *long long v4 = v16;
      long long v18 = *(_OWORD *)(a2 + 136);
      long long v19 = *(_OWORD *)(a2 + 152);
      long long v20 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v20;
      *(_OWORD *)(a1 + 136) = v18;
      *(_OWORD *)(a1 + 152) = v19;
      long long v21 = *(_OWORD *)(a2 + 200);
      long long v22 = *(_OWORD *)(a2 + 216);
      long long v23 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
      *(_OWORD *)(a1 + 216) = v22;
      *(_OWORD *)(a1 + 232) = v23;
      *(_OWORD *)(a1 + 200) = v21;
      goto LABEL_35;
    }
    *(void *)(a1 + 112) = v6;
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 88, a2 + 88);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    char v7 = *(unsigned char *)(a2 + 176);
    swift_bridgeObjectRetain();
    if (v7)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v28 = *(void *)(a2 + 160);
      *(void *)(a1 + 160) = v28;
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 136, a2 + 136);
    }
    *(unsigned char *)(a1 + 176) = v7;
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v29 = *(void *)(a2 + 208);
    swift_bridgeObjectRetain();
    if (v29)
    {
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 232))
      {
LABEL_20:
        *(void *)(a1 + 224) = *(void *)(a2 + 224);
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        *(void *)(a1 + 240) = *(void *)(a2 + 240);
        *(void *)(a1 + 248) = *(void *)(a2 + 248);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_24:
        *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
        *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
        char v33 = *(unsigned char *)(a2 + 258);
LABEL_34:
        *(unsigned char *)(a1 + 258) = v33;
        goto LABEL_35;
      }
    }
    else
    {
      long long v31 = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(_OWORD *)(a1 + 200) = v31;
      if (*(void *)(a2 + 232)) {
        goto LABEL_20;
      }
    }
    long long v32 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v32;
    goto LABEL_24;
  }
  if (v6)
  {
    __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (a1 != a2)
    {
      outlined destroy of TableColumnCollection.Backing(a1 + 136);
      if (*(unsigned char *)(a2 + 176))
      {
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(unsigned char *)(a1 + 176) = 1;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v24 = *(void *)(a2 + 160);
        *(void *)(a1 + 160) = v24;
        *(void *)(a1 + 168) = *(void *)(a2 + 168);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 136, a2 + 136);
        *(unsigned char *)(a1 + 176) = 0;
      }
    }
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
    uint64_t v25 = (_OWORD *)(a1 + 200);
    uint64_t v26 = (_OWORD *)(a2 + 200);
    uint64_t v27 = *(void *)(a2 + 208);
    if (*(void *)(a1 + 208))
    {
      if (v27)
      {
        *(void *)(a1 + 200) = *(void *)(a2 + 200);
        swift_retain();
        swift_release();
        *(void *)(a1 + 208) = *(void *)(a2 + 208);
        swift_retain();
        swift_release();
        *(void *)(a1 + 216) = *(void *)(a2 + 216);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(a1 + 200, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
        uint64_t v30 = *(void *)(a2 + 216);
        *uint64_t v25 = *v26;
        *(void *)(a1 + 216) = v30;
      }
    }
    else if (v27)
    {
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v34 = *v26;
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *uint64_t v25 = v34;
    }
    uint64_t v35 = (_OWORD *)(a1 + 224);
    char v36 = (_OWORD *)(a2 + 224);
    uint64_t v37 = *(void *)(a2 + 232);
    if (*(void *)(a1 + 232))
    {
      if (v37)
      {
        *(void *)(a1 + 224) = *(void *)(a2 + 224);
        swift_retain();
        swift_release();
        *(void *)(a1 + 232) = *(void *)(a2 + 232);
        swift_retain();
        swift_release();
        *(void *)(a1 + 240) = *(void *)(a2 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 248) = *(void *)(a2 + 248);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Binding<AnyTableColumnCustomization>(a1 + 224, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638]);
        long long v38 = *(_OWORD *)(a2 + 240);
        *uint64_t v35 = *v36;
        *(_OWORD *)(a1 + 240) = v38;
      }
    }
    else if (v37)
    {
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v39 = *(_OWORD *)(a2 + 240);
      *uint64_t v35 = *v36;
      *(_OWORD *)(a1 + 240) = v39;
    }
    *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
    *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
    char v33 = *(unsigned char *)(a2 + 258);
    goto LABEL_34;
  }
  outlined destroy of TableDataSourceAdaptor(a1 + 88);
  long long v9 = *(_OWORD *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 120);
  *long long v4 = *v5;
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 120) = v8;
  long long v10 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v11 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v10;
  *(_OWORD *)(a1 + 136) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  long long v14 = *(_OWORD *)(a2 + 216);
  long long v13 = *(_OWORD *)(a2 + 232);
  long long v15 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  *(_OWORD *)(a1 + 216) = v14;
  *(_OWORD *)(a1 + 232) = v13;
  *(_OWORD *)(a1 + 200) = v15;
LABEL_35:
  char v40 = *(void **)(a2 + 264);
  unint64_t v41 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = v40;
  id v42 = v40;

  return a1;
}

uint64_t initializeWithTake for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  swift_unknownObjectWeakTakeInit();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  return a1;
}

uint64_t assignWithTake for UpdateCollectionViewTableCoordinator(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_unknownObjectWeakTakeAssign();
  uint64_t v6 = (_OWORD *)(a1 + 88);
  char v7 = (_OWORD *)(a2 + 88);
  if (*(void *)(a1 + 112))
  {
    if (*(void *)(a2 + 112))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 88);
      long long v8 = *(_OWORD *)(a2 + 104);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 104) = v8;
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        outlined destroy of TableColumnCollection.Backing(a1 + 136);
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
      }
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      if (*(void *)(a1 + 208))
      {
        if (*(void *)(a2 + 208))
        {
          *(void *)(a1 + 200) = *(void *)(a2 + 200);
          swift_release();
          *(void *)(a1 + 208) = *(void *)(a2 + 208);
          swift_release();
          *(void *)(a1 + 216) = *(void *)(a2 + 216);
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(a1 + 200, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      }
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
LABEL_12:
      if (*(void *)(a1 + 232))
      {
        if (*(void *)(a2 + 232))
        {
          *(void *)(a1 + 224) = *(void *)(a2 + 224);
          swift_release();
          *(void *)(a1 + 232) = *(void *)(a2 + 232);
          swift_release();
          *(void *)(a1 + 240) = *(void *)(a2 + 240);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 248) = *(void *)(a2 + 248);
          swift_bridgeObjectRelease();
LABEL_17:
          *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
          *(unsigned char *)(a1 + 257) = *(unsigned char *)(a2 + 257);
          *(unsigned char *)(a1 + 258) = *(unsigned char *)(a2 + 258);
          goto LABEL_18;
        }
        outlined destroy of Binding<AnyTableColumnCustomization>(a1 + 224, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638]);
      }
      long long v14 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
      *(_OWORD *)(a1 + 240) = v14;
      goto LABEL_17;
    }
    outlined destroy of TableDataSourceAdaptor(a1 + 88);
  }
  long long v9 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 243) = *(_OWORD *)(a2 + 243);
  long long v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v10;
  long long v11 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v11;
  long long v12 = *(_OWORD *)(a2 + 104);
  *uint64_t v6 = *v7;
  *(_OWORD *)(a1 + 104) = v12;
  long long v13 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v13;
LABEL_18:
  long long v15 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);

  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateCollectionViewTableCoordinator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 272)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 264);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateCollectionViewTableCoordinator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 272) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 264) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 272) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateCollectionViewTableCoordinator()
{
  return &type metadata for UpdateCollectionViewTableCoordinator;
}

unint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>)
  {
    type metadata accessor for MutableBox<UInt32>(255, &lazy cache variable for type metadata for UnsafeBufferPointer<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB0C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafeBufferPointer<String> and conformance UnsafeBufferPointer<A>);
  }
  return result;
}

uint64_t View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>, void (*a6)(uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  char v19 = v18 & 1;
  View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(v15, v16, v18 & 1, v20, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  outlined consume of Text.Storage(v15, v17, v19);

  return swift_bridgeObjectRelease();
}

uint64_t View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, void (*a10)(uint64_t), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v54 = a8;
  char v15 = a7;
  int v42 = a7;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  uint64_t v56 = a9;
  uint64_t v46 = a11;
  long long v45 = a10;
  uint64_t v55 = a12;
  uint64_t v48 = a13;
  uint64_t v52 = *(void *)(a13 - 8);
  uint64_t v53 = a14;
  uint64_t v43 = a15;
  MEMORY[0x1F4188790](a1);
  long long v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>();
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v49 = v22;
  MEMORY[0x1F4188790](v22);
  long long v44 = (char *)&v38 - v23;
  unint64_t v24 = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  *(void *)&v67[9] = a15;
  *(void *)&v67[17] = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = v22;
  uint64_t v60 = MEMORY[0x1E4F417F8];
  uint64_t v61 = WitnessTable;
  uint64_t v62 = MEMORY[0x1E4F417F0];
  uint64_t v50 = type metadata accessor for ConfirmationDialogModifier();
  uint64_t v51 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v26 = (char *)&v38 - v25;
  uint64_t v59 = 0;
  char v27 = a3 & 1;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v38 = a4;
  Text.assertUnstyled(_:options:)();
  uint64_t v59 = v57;
  uint64_t v60 = v58;
  LOBYTE(v61) = v15;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](v67);
  int v41 = v67[0];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  uint64_t v28 = swift_bridgeObjectRetain();
  v45(v28);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = swift_getKeyPath();
  uint64_t v32 = swift_getKeyPath();
  uint64_t v59 = KeyPath;
  LOBYTE(v60) = 0;
  uint64_t v61 = v30;
  LOBYTE(v62) = 0;
  uint64_t v63 = v31;
  char v64 = 0;
  uint64_t v65 = v32;
  char v66 = 0;
  lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle();
  uint64_t v33 = (uint64_t)v44;
  uint64_t v34 = v48;
  View.buttonStyle<A>(_:)((uint64_t)&v59, v48, (uint64_t)&type metadata for PlatformItemListButtonStyle, v43);
  outlined consume of Environment<Color?>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v30, 0);
  outlined consume of Environment<Bool>.Content(v31, 0);
  outlined consume of Environment<Bool>.Content(v32, 0);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v21, v34);
  ConfirmationDialogModifier.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(v41, v57, v58, v42, v39, v40, v27, v38, (uint64_t)v26, v54, v33, v37, v49, MEMORY[0x1E4F417F8], WitnessTable, MEMORY[0x1E4F417F0]);
  uint64_t v35 = v50;
  MEMORY[0x18C113660](v26, v55, v50, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v26, v35);
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>()
{
  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>)
  {
    lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle();
    unint64_t v0 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>);
    }
  }
}

uint64_t View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13)
{
  int v30 = a4;
  int v31 = a5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  long long v27 = a11;
  double v17 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(v20, v21, v23 & 1, v25, v28, v29, v30, v31, a9, a6, a7, a8, v27, *((uint64_t *)&v27 + 1), a13);
  outlined consume of Text.Storage(v20, v22, v24);
  return swift_bridgeObjectRelease();
}

uint64_t View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>, void (*a6)(uint64_t), uint64_t a7, void (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(v19, v20, v22 & 1, v24, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  outlined consume of Text.Storage(v19, v21, v23);

  return swift_bridgeObjectRelease();
}

uint64_t View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, void (*a10)(uint64_t), uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  int v66 = a8;
  char v19 = a7;
  int v49 = a7;
  uint64_t v69 = a5;
  uint64_t v70 = a6;
  uint64_t v68 = a9;
  uint64_t v63 = a12;
  uint64_t v64 = a13;
  uint64_t v54 = a11;
  uint64_t v53 = a10;
  uint64_t v55 = a19;
  uint64_t v50 = a18;
  uint64_t v67 = a17;
  uint64_t v57 = a16;
  uint64_t v65 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a15;
  uint64_t v61 = *(void *)(a15 - 8);
  MEMORY[0x1F4188790](v25);
  long long v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>();
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v58 = v28;
  MEMORY[0x1F4188790](v28);
  uint64_t v51 = (char *)&v44 - v29;
  unint64_t v30 = lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
  *(void *)&v79[9] = a18;
  *(void *)&v79[17] = v30;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v71 = v28;
  uint64_t v72 = a16;
  uint64_t v73 = WitnessTable;
  uint64_t v74 = a19;
  uint64_t v59 = type metadata accessor for ConfirmationDialogModifier();
  uint64_t v60 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  uint64_t v32 = (char *)&v44 - v31;
  uint64_t v71 = 0;
  a3 &= 1u;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v45 = a4;
  Text.assertUnstyled(_:options:)();
  uint64_t v71 = v69;
  uint64_t v72 = v70;
  LOBYTE(v73) = v19;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](v79);
  int v48 = v79[0];
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(a1, a2, a3);
  uint64_t v33 = swift_bridgeObjectRetain();
  v53(v33);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = swift_getKeyPath();
  uint64_t v36 = swift_getKeyPath();
  uint64_t v37 = swift_getKeyPath();
  uint64_t v71 = KeyPath;
  LOBYTE(v72) = 0;
  uint64_t v73 = v35;
  LOBYTE(v74) = 0;
  uint64_t v75 = v36;
  char v76 = 0;
  uint64_t v77 = v37;
  char v78 = 0;
  lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle();
  uint64_t v38 = (uint64_t)v51;
  uint64_t v39 = v52;
  View.buttonStyle<A>(_:)((uint64_t)&v71, v52, (uint64_t)&type metadata for PlatformItemListButtonStyle, v50);
  outlined consume of Environment<Color?>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v35, 0);
  outlined consume of Environment<Bool>.Content(v36, 0);
  outlined consume of Environment<Bool>.Content(v37, 0);
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v27, v39);
  uint64_t v41 = (uint64_t)v62;
  v63(v40);
  ConfirmationDialogModifier.init(presentedValue:isPresented:title:titleVisibility:actions:message:)(v48, v69, v70, v49, v46, v47, a3, v45, (uint64_t)v32, v66, v38, v41, v58, v57, WitnessTable, v55);
  uint64_t v42 = v59;
  MEMORY[0x18C113660](v32, v65, v59, v67);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v32, v42);
}

uint64_t View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unint64_t v30 = a8;
  uint64_t v31 = a7;
  int v34 = a4;
  int v35 = a5;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  long long v28 = a12;
  long long v29 = a10;
  double v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v20 + 16))((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v21 = Text.init<A>(_:)();
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(v21, v22, v24 & 1, v26, v32, v33, v34, v35, a9, a6, v31, v30, v29, *((uint64_t *)&v29 + 1), v28, *((uint64_t *)&v28 + 1), a13, a15, a16);
  outlined consume of Text.Storage(v21, v23, v25);
  return swift_bridgeObjectRelease();
}

uint64_t View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>, long long a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v17;
  char v20 = v19 & 1;
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)(v16, v17, v19 & 1, v21, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  outlined consume of Text.Storage(v16, v18, v20);

  return swift_bridgeObjectRelease();
}

uint64_t View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v29 = a12;
  uint64_t v30 = a13;
  uint64_t v31 = a14;
  uint64_t v32 = a15;
  uint64_t v33 = a16;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  char v36 = a7;
  long long v37 = a10;
  uint64_t v38 = a11;
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t WitnessTable = swift_getWitnessTable();
  return View.confirmationDialog<A>(_:isPresented:titleVisibility:actions:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t))partial apply for closure #1 in View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:), (uint64_t)v28, a12, v23, a15, WitnessTable);
}

uint64_t View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v29 = a8;
  uint64_t v30 = a7;
  uint64_t v31 = a6;
  uint64_t v32 = a2;
  int v34 = a4;
  int v35 = a5;
  uint64_t v33 = a3;
  uint64_t v28 = a9;
  double v16 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v18 + 16))((char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  *((void *)&v26 + 1) = v30;
  *(void *)&long long v26 = v31;
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)(v19, v20, v22 & 1, v24, v32, v33, v34, v35, v28, v26, v29, a10, a12, a13, a14, a16);
  outlined consume of Text.Storage(v19, v21, v23);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v43[1] = a6;
  uint64_t v44 = a5;
  uint64_t v47 = a4;
  LODWORD(v51) = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a8;
  uint64_t v52 = a11;
  uint64_t v13 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  v43[0] = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  int v48 = (char *)v43 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v43 - v18;
  uint64_t v49 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  long long v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)v43 - v28;
  uint64_t v55 = a1;
  uint64_t v56 = v50;
  char v57 = v51;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v58);
  if (v58 == 1)
  {
    uint64_t v51 = v13;
    uint64_t v31 = v45;
    uint64_t v30 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v19, v47, v46);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v19, 1, a9) != 1)
    {
      uint64_t v35 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v22, v19, a9);
      uint64_t v36 = v43[0];
      v44(v22);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v22, a9);
      uint64_t v37 = v36;
      uint64_t v34 = v52;
      static ViewBuilder.buildExpression<A>(_:)(v36);
      uint64_t v38 = v51;
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v39(v37, a7);
      uint64_t v40 = v48;
      static ViewBuilder.buildExpression<A>(_:)(v48);
      v39((uint64_t)v40, a7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v26, 0, 1, a7);
      uint64_t v32 = (uint64_t)v29;
      uint64_t v33 = (uint64_t)v26;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v30);
    uint64_t v13 = v51;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v26, 1, 1, a7);
  uint64_t v32 = (uint64_t)v29;
  uint64_t v33 = (uint64_t)v26;
  uint64_t v34 = v52;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v33, v32);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v24 + 8);
  v41(v26, v23);
  uint64_t v54 = v34;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(char *, uint64_t))v41)(v29, v23);
}

uint64_t partial apply for closure #1 in View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.confirmationDialog<A, B>(_:isPresented:titleVisibility:presenting:actions:)(*(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(void *)(v1 + 80), *(void (**)(char *))(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 24), a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, int a4@<W7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)(v21, v22, v24 & 1, v26, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,
    a16,
    a17);
  outlined consume of Text.Storage(v21, v23, v25);

  return swift_bridgeObjectRelease();
}

uint64_t View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v50 = a15;
  uint64_t v51 = a16;
  uint64_t v52 = a17;
  uint64_t v53 = a18;
  uint64_t v54 = a19;
  uint64_t v55 = a20;
  uint64_t v56 = a21;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  char v59 = a7;
  uint64_t v60 = a10;
  uint64_t v61 = a11;
  uint64_t v62 = a12;
  uint64_t v36 = a15;
  uint64_t v37 = a16;
  uint64_t v38 = a17;
  uint64_t v39 = a18;
  uint64_t v40 = a19;
  uint64_t v41 = a20;
  uint64_t v42 = a21;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  char v45 = a7;
  uint64_t v46 = a10;
  uint64_t v47 = a13;
  uint64_t v48 = a14;
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = swift_getWitnessTable();
  return View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(a1, a2, a3 & 1, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t))partial apply for closure #1 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:), (uint64_t)v49, (void (*)(uint64_t))partial apply for closure #2 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:), (uint64_t)v35, a15, v25, v26, a19, WitnessTable, v28);
}

uint64_t View.confirmationDialog<A, B, C, D>(_:isPresented:titleVisibility:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v33 = a8;
  uint64_t v34 = a7;
  uint64_t v35 = a6;
  uint64_t v36 = a2;
  int v38 = a4;
  int v39 = a5;
  uint64_t v37 = a3;
  uint64_t v32 = a9;
  long long v31 = a10;
  uint64_t v29 = a14;
  uint64_t v30 = a13;
  double v19 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v21 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  uint64_t v22 = Text.init<A>(_:)();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)(v22, v23, v25 & 1, v27, v36, v37, v38, v39, v32, v35, v34, v33, v31, *((uint64_t *)&v31 + 1), a11, v30, v29, a15, a16,
    a18,
    a19);
  outlined consume of Text.Storage(v22, v24, v26);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v46 = a6;
  uint64_t v47 = a5;
  uint64_t v50 = a4;
  LODWORD(v54) = a3;
  uint64_t v53 = a2;
  uint64_t v56 = a8;
  uint64_t v55 = a12;
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  char v45 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v51 = (char *)&v44 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v52 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v44 - v29;
  uint64_t v58 = a1;
  uint64_t v59 = v53;
  char v60 = v54;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v61);
  if (v61 == 1)
  {
    uint64_t v54 = v14;
    uint64_t v32 = v48;
    uint64_t v31 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v20, v50, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v20, 1, a10) != 1)
    {
      uint64_t v36 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v23, v20, a10);
      uint64_t v37 = v45;
      v47(v23);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, a10);
      int v38 = v37;
      uint64_t v35 = v55;
      static ViewBuilder.buildExpression<A>(_:)(v37);
      uint64_t v39 = v54;
      uint64_t v40 = *(void (**)(char *, uint64_t))(v54 + 8);
      v40(v38, a7);
      uint64_t v41 = v51;
      static ViewBuilder.buildExpression<A>(_:)(v51);
      v40(v41, a7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v27, 0, 1, a7);
      uint64_t v33 = (uint64_t)v30;
      uint64_t v34 = (uint64_t)v27;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v31);
    uint64_t v14 = v54;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v27, 1, 1, a7);
  uint64_t v33 = (uint64_t)v30;
  uint64_t v34 = (uint64_t)v27;
  uint64_t v35 = v55;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v34, v33);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v25 + 8);
  v42(v27, v24);
  uint64_t v57 = v35;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v42)(v30, v24);
}

uint64_t partial apply for closure #1 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)()
{
  return partial apply for closure #1 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))closure #1 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:));
}

uint64_t closure #2 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v44 = a6;
  char v45 = a5;
  uint64_t v48 = a4;
  LODWORD(v52) = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a7;
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v53 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v49 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v43 = (char *)&v42 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  uint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v50 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v42 - v28;
  uint64_t v56 = a1;
  uint64_t v57 = v51;
  char v58 = v52;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v59);
  if (v59 == 1)
  {
    uint64_t v52 = v13;
    uint64_t v31 = v46;
    uint64_t v30 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v19, v48, v47);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v19, 1, a9) != 1)
    {
      uint64_t v35 = v50;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v22, v19, a9);
      uint64_t v36 = v49;
      v45(v22);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v22, a9);
      uint64_t v37 = v43;
      uint64_t v34 = v53;
      static ViewBuilder.buildExpression<A>(_:)(v36);
      uint64_t v38 = v52;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v52 + 8);
      v39(v49, a8);
      static ViewBuilder.buildExpression<A>(_:)(v37);
      v39(v37, a8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v26, 0, 1, a8);
      uint64_t v32 = (uint64_t)v29;
      uint64_t v33 = (uint64_t)v26;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v30);
    uint64_t v13 = v52;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v26, 1, 1, a8);
  uint64_t v32 = (uint64_t)v29;
  uint64_t v33 = (uint64_t)v26;
  uint64_t v34 = v53;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v33, v32);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v24 + 8);
  v40(v26, v23);
  uint64_t v55 = v34;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(char *, uint64_t))v40)(v29, v23);
}

uint64_t partial apply for closure #2 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)()
{
  return partial apply for closure #1 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))closure #2 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:));
}

uint64_t partial apply for closure #1 in View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:presenting:actions:message:)(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 72), *(void *)(v1 + 80), *(unsigned __int8 *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_187FBD7D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FBD8B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FBD9A4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FBDA88()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FBDB70()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FBDC94()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FBDDC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FBDF10()
{
  return swift_getWitnessTable();
}

uint64_t key path getter for EnvironmentValues.searchText : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.searchText.getter(a1);
}

uint64_t ContentUnavailableView.init(label:description:actions:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v8 = type metadata accessor for ContentUnavailableView();
  uint64_t v14 = a3(v8, v9, v10, v11, v12, v13);
  uint64_t v15 = a5(v14);
  return a1(v15);
}

uint64_t ContentUnavailableView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v31 = *(void *)(a1 + 32);
  uint64_t v38 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v37 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v36 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v33 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v13[5];
  uint64_t v34 = v13[6];
  uint64_t v35 = v14;
  uint64_t v32 = v13[7];
  uint64_t v40 = v9;
  uint64_t v41 = v6;
  uint64_t v42 = v15;
  uint64_t v43 = v14;
  uint64_t v44 = v34;
  uint64_t v45 = v32;
  uint64_t v16 = type metadata accessor for ResolvedContentUnavailableView();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v30 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v2, v9, v21);
  uint64_t v24 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v33, v2 + *(int *)(a1 + 68), v6);
  uint64_t v25 = v2 + *(int *)(a1 + 72);
  uint64_t v26 = (uint64_t)v37;
  uint64_t v27 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, v25, v31);
  ResolvedContentUnavailableView.init(label:description:actions:)((uint64_t)v12, v24, v26, v9, v6, v27, (uint64_t)v19);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v17 + 8);
  v28(v19, v16);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return ((uint64_t (*)(char *, uint64_t))v28)(v23, v16);
}

uint64_t ContentUnavailableView<>.init(_:image:description:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>, uint64_t a4, uint64_t a5)
{
  outlined copy of Text?(a1, a2, a4, a5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v8;
  uint64_t v10 = v9;
  char v14 = v11;
  uint64_t v12 = Image.init(_:bundle:)();
  outlined consume of Text?(a1, a2, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a3 = v15;
  *(void *)(a3 + 8) = v10;
  *(unsigned char *)(a3 + 16) = v14 & 1;
  *(void *)(a3 + 24) = v16;
  *(void *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = a2;
  *(void *)(a3 + 56) = a4;
  *(void *)(a3 + 64) = a5;
  return result;
}

uint64_t ContentUnavailableView<>.init(_:systemImage:description:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  outlined copy of Text?(a3, a4, a6, a7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v12;
  uint64_t v19 = v13;
  char v17 = v14;
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = a2;
  *(_DWORD *)(v15 + 32) = 0;
  *(unsigned char *)(v15 + 36) = 1;
  *(_OWORD *)(v15 + 40) = xmmword_18834C6B0;
  *(void *)(v15 + 56) = a1;
  *(void *)(v15 + 64) = a2;
  *(_OWORD *)(v15 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v15 + 88) = 0;
  swift_bridgeObjectRetain();
  outlined consume of Text?(a3, a4, a6, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a5 = v11;
  *(void *)(a5 + 8) = v18;
  *(unsigned char *)(a5 + 16) = v17 & 1;
  *(void *)(a5 + 24) = v19;
  *(void *)(a5 + 32) = v15;
  *(void *)(a5 + 40) = a3;
  *(void *)(a5 + 48) = a4;
  *(void *)(a5 + 56) = a6;
  *(void *)(a5 + 64) = a7;
  return result;
}

double ContentUnavailableView<>.init<A>(_:image:description:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)&double result = ContentUnavailableView<>.init<A>(_:image:description:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:)).n128_u64[0];
  return result;
}

double ContentUnavailableView<>.init<A>(_:systemImage:description:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)&double result = ContentUnavailableView<>.init<A>(_:image:description:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:)).n128_u64[0];
  return result;
}

__n128 ContentUnavailableView<>.init<A>(_:image:description:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char v13 = a6;
  *(void *)&long long v27 = a4;
  *((void *)&v27 + 1) = a5;
  *(void *)&long long v28 = a6;
  *((void *)&v28 + 1) = a7;
  outlined copy of Text?(a4, a5, a6, a7);
  closure #1 in ContentUnavailableView<>.init<A>(_:image:description:)(a1, a2, a3, a8, a10, a11, (uint64_t)&v24);
  outlined consume of Text?(a4, a5, v13, a7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a8 - 8) + 8))(a1, a8);
  char v19 = v25;
  __n128 result = v26;
  long long v21 = v27;
  long long v22 = v28;
  *(_OWORD *)a9 = v24;
  *(unsigned char *)(a9 + 16) = v19;
  *(__n128 *)(a9 + 24) = result;
  *(_OWORD *)(a9 + 40) = v21;
  *(_OWORD *)(a9 + 56) = v22;
  return result;
}

__n128 closure #1 in ContentUnavailableView<>.init<A>(_:image:description:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X8>)
{
  double v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v15, v13);
  swift_bridgeObjectRetain();
  a6(&v19, v15, a2, a3, a4, a5);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a7 = v19;
  *(unsigned char *)(a7 + 16) = v17;
  *(__n128 *)(a7 + 24) = result;
  return result;
}

uint64_t static ContentUnavailableView<>.search.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchUnavailableContent.Label();
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v5 = swift_getKeyPath();
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (uint64_t *)((char *)v5 + *(int *)(v3 + 28));
  *uint64_t v6 = 0;
  v6[1] = 0;
  return outlined init with take of SearchUnavailableContent.Label((uint64_t)v5, a1);
}

uint64_t sub_187FBEB00@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.searchText.getter(a1);
}

uint64_t outlined init with take of SearchUnavailableContent.Label(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchUnavailableContent.Label();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static ContentUnavailableView<>.search(text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SearchUnavailableContent.Label();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v9 = swift_getKeyPath();
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = (uint64_t *)((char *)v9 + *(int *)(v7 + 28));
  *uint64_t v10 = a1;
  v10[1] = a2;
  outlined init with take of SearchUnavailableContent.Label((uint64_t)v9, a3);
  return swift_bridgeObjectRetain();
}

uint64_t SearchUnavailableContent.Label.body.getter@<X0>(uint64_t a1@<X8>)
{
  SearchUnavailableContent.Label.resolvedKey.getter();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v3 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v4 = objc_msgSend((id)v3, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v19 = v5;
  uint64_t v7 = v6;
  LOBYTE(v3) = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  LocalizedStringKey.init(stringLiteral:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  char v13 = v12;
  uint64_t v15 = v14;
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0x697966696E67616DLL;
  *(void *)(v16 + 24) = 0xEF7373616C67676ELL;
  *(_DWORD *)(v16 + 32) = 0;
  *(unsigned char *)(v16 + 36) = 1;
  *(_OWORD *)(v16 + 40) = xmmword_18834C6B0;
  *(_OWORD *)(v16 + 56) = xmmword_1883B8910;
  *(_OWORD *)(v16 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v16 + 88) = 0;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v18;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v3 & 1;
  *(void *)(a1 + 24) = v19;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v11;
  *(unsigned char *)(a1 + 48) = v13 & 1;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  return result;
}

uint64_t SearchUnavailableContent.Label.resolvedKey.getter()
{
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v45 = (char *)&v43 - v11;
  uint64_t v12 = type metadata accessor for CharacterSet();
  uint64_t v46 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SearchUnavailableContent.Label() + 20));
  uint64_t v16 = (void *)v15[1];
  if (!v16) {
    goto LABEL_6;
  }
  uint64_t v43 = *v15;
  uint64_t v47 = v43;
  uint64_t v48 = v16;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v17 = StringProtocol.trimmingCharacters(in:)();
  uint64_t v18 = v3;
  uint64_t v19 = v6;
  uint64_t v20 = v8;
  uint64_t v21 = v7;
  unint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v12);
  swift_bridgeObjectRelease();
  uint64_t v24 = HIBYTE(v23) & 0xF;
  BOOL v25 = (v23 & 0x2000000000000000) == 0;
  uint64_t v7 = v21;
  uint64_t v8 = v20;
  uint64_t v6 = v19;
  uint64_t v3 = v18;
  if (v25) {
    uint64_t v24 = v17 & 0xFFFFFFFFFFFFLL;
  }
  if (!v24)
  {
LABEL_6:
    uint64_t v30 = v46;
    specialized Environment.wrappedValue.getter((uint64_t)v3);
    type metadata accessor for Binding<AttributedString>();
    uint64_t v32 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v3, 1, v31) == 1)
    {
      outlined destroy of Environment<Binding<AttributedString>?>.Content((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    }
    else
    {
      MEMORY[0x18C113DA0](v32);
      outlined destroy of Environment<Binding<AttributedString>?>.Content((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
      {
        uint64_t v34 = v6;
        uint64_t v35 = v45;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v45, v34, v7);
        (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v44, v35, v7);
        uint64_t v47 = String.init(_:)();
        uint64_t v48 = v36;
        static CharacterSet.whitespacesAndNewlines.getter();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v37 = StringProtocol.trimmingCharacters(in:)();
        unint64_t v39 = v38;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v40 = HIBYTE(v39) & 0xF;
        if ((v39 & 0x2000000000000000) == 0) {
          uint64_t v40 = v37 & 0xFFFFFFFFFFFFLL;
        }
        if (v40)
        {
          LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
          v41._object = (void *)0x800000018833D3F0;
          v41._countAndFlagsBits = 0xD000000000000023;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v41);
          LocalizedStringKey.StringInterpolation.appendInterpolation(_:)();
          v42._countAndFlagsBits = 0;
          v42._object = (void *)0xE000000000000000;
          LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v42);
          uint64_t v29 = v47;
          (*(void (**)(char *, uint64_t))(v8 + 8))(v35, v7);
          return v29;
        }
        (*(void (**)(char *, uint64_t))(v8 + 8))(v35, v7);
        return LocalizedStringKey.init(stringLiteral:)();
      }
    }
    outlined destroy of Environment<Binding<AttributedString>?>.Content((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for AttributedString?);
    return LocalizedStringKey.init(stringLiteral:)();
  }
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v26._object = (void *)0x800000018833D3F0;
  v26._countAndFlagsBits = 0xD000000000000023;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v26);
  v27._countAndFlagsBits = v43;
  v27._object = v16;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v27);
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v28);
  return v47;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchUnavailableContent.Label()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t SearchUnavailableContent.Description.body.getter@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = static Text.System.kitLocalized(_:tableName:comment:)();
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6 & 1;
  *(void *)(a1 + 24) = v8;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance SearchUnavailableContent.Description@<X0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = static Text.System.kitLocalized(_:tableName:comment:)();
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6 & 1;
  *(void *)(a1 + 24) = v8;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ContentUnavailableView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchUnavailableContent.Label()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchUnavailableContent.Description()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchUnavailableContent.Actions()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ContentUnavailableView(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          Swift::String v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            uint64_t v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for ContentUnavailableView(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187FBFDACLL);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        uint64_t v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        uint64_t v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

ValueMetadata *type metadata accessor for SearchUnavailableContent()
{
  return &type metadata for SearchUnavailableContent;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchUnavailableContent.Label(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<AttributedString>();
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(v7 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
      {
        type metadata accessor for Binding<AttributedString>?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        uint64_t v13 = *(int *)(v8 + 32);
        unsigned int v21 = (char *)a2 + v13;
        int v22 = (char *)a1 + v13;
        uint64_t v14 = type metadata accessor for AttributedString();
        BOOL v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        swift_retain();
        swift_retain();
        v20(v22, v21, v14);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v15 = *(int *)(a3 + 20);
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    unsigned int v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SearchUnavailableContent.Label(uint64_t a1)
{
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v3 = v2;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2))
    {
      swift_release();
      swift_release();
      uint64_t v4 = a1 + *(int *)(v3 + 32);
      uint64_t v5 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
  }
  else
  {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for SearchUnavailableContent.Label(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
    {
      type metadata accessor for Binding<AttributedString>?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = *(int *)(v7 + 32);
      size_t v19 = (char *)a2 + v11;
      BOOL v20 = (char *)a1 + v11;
      uint64_t v12 = type metadata accessor for AttributedString();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
      swift_retain();
      swift_retain();
      v18(v20, v19, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SearchUnavailableContent.Label(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Environment<Binding<AttributedString>?>.Content((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Environment<Binding<AttributedString>?>.Content);
    type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<AttributedString>();
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(v6 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
      {
        type metadata accessor for Binding<AttributedString>?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v10 = *(int *)(v7 + 32);
        unsigned int v17 = (char *)a2 + v10;
        uint64_t v18 = (char *)a1 + v10;
        uint64_t v11 = type metadata accessor for AttributedString();
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_retain();
        swift_retain();
        v16(v18, v17, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  void *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SearchUnavailableContent.Label(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
    {
      type metadata accessor for Binding<AttributedString>?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      uint64_t v13 = *(int *)(v9 + 32);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for SearchUnavailableContent.Label(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of Environment<Binding<AttributedString>?>.Content((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Environment<Binding<AttributedString>?>.Content);
    type metadata accessor for Environment<Binding<AttributedString>?>.Content(0);
    uint64_t v7 = v6;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<AttributedString>();
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(v8 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(a2, 1, v8))
      {
        type metadata accessor for Binding<AttributedString>?(0);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        uint64_t v13 = *(int *)(v9 + 32);
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for AttributedString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a1, 0, 1, v9);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
  }
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (void *)((char *)a1 + v17);
  size_t v19 = (void *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchUnavailableContent.Label(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187FC08C0);
}

uint64_t sub_187FC08C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_1(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4E0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SearchUnavailableContent.Label(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187FC09D4);
}

void sub_187FC09D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_1(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4E0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

uint64_t sub_187FC0AC4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FC0B18()
{
  return lazy protocol witness table accessor for type Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Label<A, B>(&lazy protocol witness table cache variable for type Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
}

void type metadata accessor for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>()
{
  if (!lazy cache variable for type metadata for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Label();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for Label<Text, Image>();
    _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    lazy protocol witness table accessor for type Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Label<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Label<Text, ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Label<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187FC0D70()
{
  return MEMORY[0x1E4F41418];
}

uint64_t sub_187FC0D7C()
{
  return MEMORY[0x1E4F417F0];
}

void type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>)
  {
    type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>);
    }
  }
}

void type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (void (*)(uint64_t))type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, (void (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabelStyleConfiguration.Title, Text>);
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>, StaticSourceWriter<LabelStyleConfiguration.Title, Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>>();
    lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabelStyle, StaticSourceWriter<LabelStyleConfiguration.Icon, ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for AttributedString?(uint64_t a1)
{
}

uint64_t outlined destroy of Environment<Binding<AttributedString>?>.Content(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for TaskPriority();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v10);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v13 = 0;
  uint64_t v15 = 0;
LABEL_6:
  uint64_t v16 = *v4;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  uint64_t v18 = (void *)(v15 | v13);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    uint64_t v18 = v21;
    v21[2] = v13;
    v21[3] = v15;
  }
  v20[1] = 1;
  v20[2] = v18;
  v20[3] = v16;
  swift_task_create();
  return swift_release();
}

id one-time initialization function for shared()
{
  type metadata accessor for BGTaskSchedulerWrapper();
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  id result = objc_msgSend(self, sel_shared);
  uint64_t v2 = MEMORY[0x1E4FBC870];
  *(void *)(v0 + 112) = result;
  *(void *)(v0 + 120) = v2;
  static BGTaskSchedulerWrapper.shared = v0;
  return result;
}

uint64_t closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  unint64_t v12 = lazy protocol witness table accessor for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a2;
  v13[3] = v12;
  v13[4] = a2;
  void v13[5] = a3;
  v13[6] = a4;
  v13[7] = a1;
  swift_retain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in BGTaskSchedulerWrapper.observeTask(_:), (uint64_t)v13);
  return swift_release();
}

uint64_t closure #1 in closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v11;
  *uint64_t v11 = v7;
  v11[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return BGTaskSchedulerWrapper.performAction(for:with:)(a5, a6, a7);
}

uint64_t BGTaskSchedulerWrapper.performAction(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  type metadata accessor for TaskPriority?(0);
  v4[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](BGTaskSchedulerWrapper.performAction(for:with:), v3, 0);
}

uint64_t BGTaskSchedulerWrapper.performAction(for:with:)()
{
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v2 = (void *)v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = 0;
  v6[3] = 0;
  v6[4] = v4;
  v6[5] = v3;
  swift_bridgeObjectRetain();
  uint64_t v7 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in BGTaskSchedulerWrapper.performAction(for:with:), (uint64_t)v6);
  v0[13] = v7;
  v0[6] = partial apply for closure #2 in BGTaskSchedulerWrapper.performAction(for:with:);
  v0[7] = v7;
  v0[2] = MEMORY[0x1E4F143A8];
  v0[3] = 1107296256;
  v0[4] = thunk for @escaping @callee_guaranteed () -> ();
  v0[5] = &block_descriptor_65;
  uint64_t v8 = _Block_copy(v0 + 2);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_setExpirationHandler_, v8);
  _Block_release(v8);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[14] = v9;
  *uint64_t v9 = v0;
  v9[1] = BGTaskSchedulerWrapper.performAction(for:with:);
  uint64_t v10 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v11 = MEMORY[0x1E4FBC248];
  uint64_t v12 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F4187DA0](v0 + 15, v7, v10, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](BGTaskSchedulerWrapper.performAction(for:with:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  objc_msgSend(*(id *)(v0 + 80), sel_setTaskCompletedWithSuccess_, (*(unsigned char *)(v0 + 120) & 1) == 0);
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in BGTaskSchedulerWrapper.performAction(for:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  swift_bridgeObjectRetain();
  return MEMORY[0x1F4188298](closure #1 in BGTaskSchedulerWrapper.performAction(for:with:), 0, 0);
}

uint64_t closure #1 in BGTaskSchedulerWrapper.performAction(for:with:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = specialized static BackgroundTaskProtocol.currentTasks()();
  v0[5] = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in BGTaskSchedulerWrapper.performAction(for:with:);
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  return specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(v4, v5, v1, v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](closure #1 in BGTaskSchedulerWrapper.performAction(for:with:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t BGTaskSchedulerWrapper.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t type metadata accessor for BGTaskSchedulerWrapper()
{
  return self;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance BGTaskSchedulerWrapper()
{
  return v0;
}

unint64_t lazy protocol witness table accessor for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper()
{
  unint64_t result = lazy protocol witness table cache variable for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper;
  if (!lazy protocol witness table cache variable for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper)
  {
    type metadata accessor for BGTaskSchedulerWrapper();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BGTaskSchedulerWrapper and conformance BGTaskSchedulerWrapper);
  }
  return result;
}

uint64_t sub_187FC1D44()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in BGTaskSchedulerWrapper.observeTask(_:)()
{
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return BGTaskSchedulerWrapper.performAction(for:with:)(v2, v4, v3);
}

uint64_t sub_187FC1E8C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BGTaskSchedulerWrapper.performAction(for:with:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[3] = v5;
  v6[4] = v4;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  _OWORD v6[2] = a1;
  swift_bridgeObjectRetain();
  return MEMORY[0x1F4188298](closure #1 in BGTaskSchedulerWrapper.performAction(for:with:), 0, 0);
}

void partial apply for closure #2 in BGTaskSchedulerWrapper.performAction(for:with:)()
{
}

uint64_t specialized static BackgroundTaskProtocol.currentTasks()()
{
  uint64_t v0 = MEMORY[0x1E4FBC848];
  type metadata accessor for TaskActionsContainer<(), ()>(0, (unint64_t *)&lazy cache variable for type metadata for TaskActionsContainer<(), ()>, MEMORY[0x1E4FBC848] + 8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer);
  static Update.ensure<A>(_:)();
  if (*(void *)(v21 + 16)
    && (unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x69737365534C5255, 0xEA00000000006E6FLL), (v2 & 1) != 0)
    && (uint64_t v3 = *(void *)(*(void *)(v21 + 56) + 8 * v1),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (int64_t v4 = *(void *)(v3 + 16)) != 0))
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v3 + 32;
    uint64_t v6 = v0 + 8;
    do
    {
      outlined init with copy of BackgroundTask<String, ()>(v5, (uint64_t)v17, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
      outlined init with copy of BackgroundTask<String, ()>((uint64_t)v17, (uint64_t)v15, &lazy cache variable for type metadata for BackgroundTask<(), ()>, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTask);
      outlined init with take of OptionalBinaryInteger(v15, (uint64_t)v16);
      type metadata accessor for BackgroundTaskProtocol();
      swift_dynamicCast();
      uint64_t v7 = v18;
      uint64_t v8 = v19;
      swift_retain();
      outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry((uint64_t)v17, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6);
      uint64_t v9 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
        uint64_t v9 = v20;
      }
      unint64_t v11 = *(void *)(v9 + 16);
      unint64_t v10 = *(void *)(v9 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1);
        uint64_t v9 = v20;
      }
      *(void *)(v9 + 16) = v11 + 1;
      uint64_t v12 = v9 + 32 * v11;
      *(_OWORD *)(v12 + 32) = v14;
      *(void *)(v12 + 48) = v7;
      *(void *)(v12 + 56) = v8;
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v9;
}

{
  unint64_t v0;
  char v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  long long v13;
  long long v14[2];
  unsigned char v15[40];
  unsigned char v16[40];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for TaskActionsContainer<(), ()>(0, (unint64_t *)&lazy cache variable for type metadata for TaskActionsContainer<String, ()>, MEMORY[0x1E4FBB1A0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer);
  static Update.ensure<A>(_:)();
  if (*(void *)(v20 + 16)
    && (uint64_t v0 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000016, 0x800000018833D470), (v1 & 1) != 0)
    && (char v2 = *(void *)(*(void *)(v20 + 56) + 8 * v0),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (uint64_t v3 = *(void *)(v2 + 16)) != 0))
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    int64_t v4 = v2 + 32;
    uint64_t v5 = MEMORY[0x1E4FBB1A0];
    do
    {
      outlined init with copy of BackgroundTask<String, ()>(v4, (uint64_t)v16, &lazy cache variable for type metadata for TaskActionsContainer<String, ()>.ContainerEntry, v5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
      outlined init with copy of BackgroundTask<String, ()>((uint64_t)v16, (uint64_t)v14, &lazy cache variable for type metadata for BackgroundTask<String, ()>, v5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTask);
      outlined init with take of OptionalBinaryInteger(v14, (uint64_t)v15);
      type metadata accessor for BackgroundTaskProtocol();
      swift_dynamicCast();
      uint64_t v6 = v17;
      uint64_t v7 = v18;
      swift_retain();
      outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry((uint64_t)v16, &lazy cache variable for type metadata for TaskActionsContainer<String, ()>.ContainerEntry, v5);
      uint64_t v8 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v19;
      }
      unint64_t v10 = *(void *)(v8 + 16);
      uint64_t v9 = *(void *)(v8 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1);
        uint64_t v8 = v19;
      }
      *(void *)(v8 + 16) = v10 + 1;
      unint64_t v11 = v8 + 32 * v10;
      *(_OWORD *)(v11 + 32) = v13;
      *(void *)(v11 + 48) = v6;
      *(void *)(v11 + 56) = v7;
      v4 += 56;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v8;
}

{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  long long v16[2];
  unsigned char v17[40];
  unsigned char v18[40];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v0 = MEMORY[0x1E4FBC848];
  type metadata accessor for TaskActionsContainer<(), ()>(0, (unint64_t *)&lazy cache variable for type metadata for TaskActionsContainer<(), ()>, MEMORY[0x1E4FBC848] + 8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer);
  static Update.ensure<A>(_:)();
  if (*(void *)(v22 + 16)
    && (unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x6572666552707041, 0xEA00000000006873), (v2 & 1) != 0)
    && (uint64_t v3 = *(void *)(*(void *)(v22 + 56) + 8 * v1),
        swift_bridgeObjectRetain(),
        swift_bridgeObjectRelease(),
        (int64_t v4 = *(void *)(v3 + 16)) != 0))
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    uint64_t v5 = v3 + 32;
    uint64_t v6 = v0 + 8;
    do
    {
      outlined init with copy of BackgroundTask<String, ()>(v5, (uint64_t)v18, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
      outlined init with copy of BackgroundTask<String, ()>((uint64_t)v18, (uint64_t)v16, &lazy cache variable for type metadata for BackgroundTask<(), ()>, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTask);
      outlined init with take of OptionalBinaryInteger(v16, (uint64_t)v17);
      type metadata accessor for BackgroundTaskProtocol();
      swift_dynamicCast();
      uint64_t v7 = v19;
      uint64_t v8 = v20;
      swift_retain();
      outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry((uint64_t)v18, &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, v6);
      uint64_t v9 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
        uint64_t v9 = v21;
      }
      unint64_t v11 = *(void *)(v9 + 16);
      unint64_t v10 = *(void *)(v9 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1);
        uint64_t v9 = v21;
      }
      *(void *)(v9 + 16) = v11 + 1;
      uint64_t v12 = (void *)(v9 + 32 * v11);
      v12[4] = v14;
      v12[5] = v15;
      v12[6] = v7;
      v12[7] = v8;
      v5 += 56;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  return v9;
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  type metadata accessor for TaskPriority?(0);
  v4[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

{
  void *v4;
  uint64_t v6;

  v4[5] = a3;
  v4[6] = a4;
  v4[4] = a2;
  type metadata accessor for TaskPriority?(0);
  v4[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  v6[5] = v4;
  v6[6] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), (uint64_t)v6);
  v0[6] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  *uint64_t v8 = v0;
  v8[1] = specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v9 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v10 = MEMORY[0x1E4FBC248];
  uint64_t v11 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F4187DA0](v0 + 8, v7, v9, v10, v11);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = v4;
  v8[6] = v3;
  v8[7] = v6;
  v8[8] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), (uint64_t)v8);
  v0[8] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[9] = v10;
  *uint64_t v10 = v0;
  v10[1] = specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v11 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v12 = MEMORY[0x1E4FBC248];
  uint64_t v13 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F4187DA0](v0 + 10, v9, v11, v12, v13);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  uint64_t v2 = v0[6];
  uint64_t v1 = v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v1, 1, 1, v5);
  v0[2] = v4;
  v0[3] = v3;
  uint64_t v6 = (void *)swift_allocObject();
  _OWORD v6[2] = 0;
  v6[3] = 0;
  v6[4] = v2;
  outlined init with take of String?((uint64_t)(v0 + 2), (uint64_t)(v6 + 5));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), (uint64_t)v6);
  v0[8] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  *uint64_t v8 = v0;
  v8[1] = specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v9 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v10 = MEMORY[0x1E4FBC248];
  uint64_t v11 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F4187DA0](v0 + 10, v7, v9, v10, v11);
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  _OWORD v6[2] = a2;
  type metadata accessor for TaskPriority?(0);
  v6[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  type metadata accessor for TaskPriority?(0);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

{
  void *v5;
  uint64_t v7;

  v5[12] = a4;
  v5[13] = a5;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  type metadata accessor for TaskPriority?(0);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + 16);
  if (v1)
  {
    uint64_t v2 = (void *)(swift_bridgeObjectRetain() + 56);
    while (1)
    {
      uint64_t v5 = *(void *)(v0 + 96);
      uint64_t v4 = *(void *)(v0 + 104);
      uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))*(v2 - 3);
      uint64_t v7 = *v2;
      long long v26 = *((_OWORD *)v2 - 1);
      swift_retain();
      swift_retain();
      if (v6(v5, v4)) {
        break;
      }
LABEL_4:
      swift_release();
      swift_release();
      v2 += 4;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    uint64_t v24 = v1;
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v10 = type metadata accessor for TaskPriority();
    uint64_t v25 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v8, 1, 1, v10);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0;
    uint64_t v12 = (void *)(v11 + 16);
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = v6;
    *(_OWORD *)(v11 + 40) = v26;
    *(void *)(v11 + 56) = v7;
    outlined init with copy of TaskPriority?(v8, v9);
    LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v9, 1, v10);
    swift_retain();
    swift_retain();
    uint64_t v13 = *(void *)(v0 + 112);
    if (v9 == 1)
    {
      outlined destroy of TaskPriority?(*(void *)(v0 + 112));
      if (*v12)
      {
LABEL_8:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v16 = v15;
        swift_unknownObjectRelease();
LABEL_11:
        uint64_t v17 = **(void **)(v0 + 80);
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
        *(void *)(v18 + 24) = v11;
        uint64_t v19 = v16 | v14;
        if (v16 | v14)
        {
          uint64_t v19 = v0 + 16;
          *(void *)(v0 + 16) = 0;
          *(void *)(v0 + 24) = 0;
          *(void *)(v0 + 32) = v14;
          *(void *)(v0 + 40) = v16;
        }
        uint64_t v1 = v24;
        uint64_t v3 = *(void *)(v0 + 120);
        *(void *)(v0 + 48) = 1;
        *(void *)(v0 + 56) = v19;
        *(void *)(v0 + 64) = v17;
        swift_task_create();
        swift_release();
        outlined destroy of TaskPriority?(v3);
        goto LABEL_4;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v13, v10);
      if (*v12) {
        goto LABEL_8;
      }
    }
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    goto LABEL_11;
  }
LABEL_14:
  uint64_t v20 = **(void **)(v0 + 80);
  int v27 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncSequence.reduce<A>(_:_:)
                                                 + async function pointer to specialized AsyncSequence.reduce<A>(_:_:));
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v21;
  *uint64_t v21 = v0;
  v21[1] = specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v22 = *(void *)(v0 + 72);
  return v27(v22, v20);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + 16);
  if (v1)
  {
    uint64_t v2 = (void *)(swift_bridgeObjectRetain() + 56);
    do
    {
      uint64_t v5 = *(void *)(v0 + 96);
      uint64_t v4 = *(void *)(v0 + 104);
      uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))*(v2 - 3);
      uint64_t v7 = *v2;
      int v27 = *((_OWORD *)v2 - 1);
      swift_retain();
      swift_retain();
      if (v6(v5, v4))
      {
        uint64_t v24 = v1;
        uint64_t v9 = *(void *)(v0 + 128);
        uint64_t v8 = *(void *)(v0 + 136);
        uint64_t v25 = *(void *)(v0 + 112);
        long long v26 = *(void *)(v0 + 120);
        uint64_t v10 = type metadata accessor for TaskPriority();
        uint64_t v11 = *(void *)(v10 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v8, 1, 1, v10);
        uint64_t v12 = swift_allocObject();
        *(void *)(v12 + 16) = 0;
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 32) = v6;
        *(_OWORD *)(v12 + 40) = v27;
        *(void *)(v12 + 56) = v7;
        *(void *)(v12 + 64) = v25;
        *(void *)(v12 + 72) = v26;
        outlined init with copy of TaskPriority?(v8, v9);
        LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v13 = *(void *)(v0 + 128);
        if (v8 == 1)
        {
          outlined destroy of TaskPriority?(*(void *)(v0 + 128));
        }
        else
        {
          TaskPriority.rawValue.getter();
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
        }
        if (*(void *)(v12 + 16))
        {
          swift_getObjectType();
          swift_unknownObjectRetain();
          uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
          uint64_t v16 = v15;
          swift_unknownObjectRelease();
        }
        else
        {
          uint64_t v14 = 0;
          uint64_t v16 = 0;
        }
        uint64_t v1 = v24;
        uint64_t v17 = **(void **)(v0 + 80);
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
        *(void *)(v18 + 24) = v12;
        uint64_t v19 = v16 | v14;
        if (v16 | v14)
        {
          uint64_t v19 = v0 + 16;
          *(void *)(v0 + 16) = 0;
          *(void *)(v0 + 24) = 0;
          *(void *)(v0 + 32) = v14;
          *(void *)(v0 + 40) = v16;
        }
        uint64_t v3 = *(void *)(v0 + 136);
        *(void *)(v0 + 48) = 1;
        *(void *)(v0 + 56) = v19;
        *(void *)(v0 + 64) = v17;
        swift_task_create();
        swift_release();
        outlined destroy of TaskPriority?(v3);
      }
      swift_release();
      swift_release();
      v2 += 4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  uint64_t v20 = **(void **)(v0 + 80);
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncSequence.reduce<A>(_:_:)
                                                 + async function pointer to specialized AsyncSequence.reduce<A>(_:_:));
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v21;
  *uint64_t v21 = v0;
  v21[1] = specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v22 = *(void *)(v0 + 72);
  return v28(v22, v20);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  long long v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;

  uint64_t v1 = *(void *)(*(void *)(v0 + 88) + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 104);
    uint64_t v3 = (void *)(swift_bridgeObjectRetain() + 56);
    uint64_t v25 = v2;
    while (1)
    {
      if (v2)
      {
        uint64_t v5 = *(v3 - 3);
        uint64_t v6 = *((_OWORD *)v3 - 1);
        int v27 = *v3;
        long long v26 = v6;
        uint64_t v7 = v5 == *(void *)(v0 + 96) && *(void *)(v0 + 104) == (void)v6;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
LABEL_4:
      v3 += 4;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 120);
    uint64_t v10 = type metadata accessor for TaskPriority();
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = 0;
    uint64_t v13 = (void *)(v12 + 16);
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = v5;
    *(_OWORD *)(v12 + 40) = v26;
    *(void *)(v12 + 56) = v27;
    outlined init with copy of TaskPriority?(v9, v8);
    LODWORD(v8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v14 = *(void *)(v0 + 112);
    if (v8 == 1)
    {
      outlined destroy of TaskPriority?(*(void *)(v0 + 112));
      if (*v13)
      {
LABEL_13:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v17 = v16;
        swift_unknownObjectRelease();
LABEL_16:
        uint64_t v18 = **(void **)(v0 + 80);
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
        *(void *)(v19 + 24) = v12;
        uint64_t v20 = v17 | v15;
        if (v17 | v15)
        {
          uint64_t v20 = v0 + 16;
          *(void *)(v0 + 16) = 0;
          *(void *)(v0 + 24) = 0;
          *(void *)(v0 + 32) = v15;
          *(void *)(v0 + 40) = v17;
        }
        uint64_t v2 = v25;
        uint64_t v4 = *(void *)(v0 + 120);
        *(void *)(v0 + 48) = 1;
        *(void *)(v0 + 56) = v20;
        *(void *)(v0 + 64) = v18;
        swift_task_create();
        swift_release();
        outlined destroy of TaskPriority?(v4);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_4;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v14, v10);
      if (*v13) {
        goto LABEL_13;
      }
    }
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    goto LABEL_16;
  }
LABEL_19:
  uint64_t v21 = **(void **)(v0 + 80);
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized AsyncSequence.reduce<A>(_:_:)
                                                 + async function pointer to specialized AsyncSequence.reduce<A>(_:_:));
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v22;
  *uint64_t v22 = v0;
  v22[1] = specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  unsigned int v23 = *(void *)(v0 + 72);
  return v28(v23, v21);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  v7[10] = a2;
  v7[11] = a3;
  v7[9] = a1;
  type metadata accessor for TaskPriority?(0);
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t specialized AsyncSequence.reduce<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a2;
  _sSSSgMaTm_3(0, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBCF98]);
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized AsyncSequence.reduce<A>(_:_:), 0, 0);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v2[2] = a2;
  _sSSSgMaTm_3(0, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBCF98]);
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized AsyncSequence.reduce<A>(_:_:), 0, 0);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v2[2] = a2;
  _sSSSgMaTm_3(0, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBCF98]);
  v2[3] = v3;
  v2[4] = *(void *)(v3 - 8);
  v2[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized AsyncSequence.reduce<A>(_:_:), 0, 0);
}

uint64_t specialized AsyncSequence.reduce<A>(_:_:)()
{
  TaskGroup.makeAsyncIterator()();
  unint64_t v1 = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized AsyncSequence.reduce<A>(_:_:);
  uint64_t v3 = *(void *)(v0 + 24);
  return MEMORY[0x1F4187C78](v0 + 64, v3, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[4] + 8))(v2[5], v2[3]);
    uint64_t v3 = specialized AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    uint64_t v3 = specialized AsyncSequence.reduce<A>(_:_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(unsigned char *)(v0 + 64))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
    swift_task_dealloc();
    unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v4;
    *uint64_t v4 = v0;
    v4[1] = specialized AsyncSequence.reduce<A>(_:_:);
    uint64_t v5 = *(void *)(v0 + 24);
    return MEMORY[0x1F4187C78](v0 + 64, v5, v3);
  }
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  TaskGroup.makeAsyncIterator()();
  unint64_t v1 = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized AsyncSequence.reduce<A>(_:_:);
  uint64_t v3 = *(void *)(v0 + 24);
  return MEMORY[0x1F4187C78](v0 + 64, v3, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[4] + 8))(v2[5], v2[3]);
    uint64_t v3 = specialized AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    uint64_t v3 = specialized AsyncSequence.reduce<A>(_:_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(unsigned char *)(v0 + 64))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
    swift_task_dealloc();
    unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v4;
    *uint64_t v4 = v0;
    v4[1] = specialized AsyncSequence.reduce<A>(_:_:);
    uint64_t v5 = *(void *)(v0 + 24);
    return MEMORY[0x1F4187C78](v0 + 64, v5, v3);
  }
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  TaskGroup.makeAsyncIterator()();
  unint64_t v1 = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized AsyncSequence.reduce<A>(_:_:);
  uint64_t v3 = *(void *)(v0 + 24);
  return MEMORY[0x1F4187C78](v0 + 64, v3, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2[4] + 8))(v2[5], v2[3]);
    uint64_t v3 = specialized AsyncSequence.reduce<A>(_:_:);
  }
  else
  {
    uint64_t v3 = specialized AsyncSequence.reduce<A>(_:_:);
  }
  return MEMORY[0x1F4188298](v3, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(unsigned char *)(v0 + 64))
  {
    (*(void (**)(void, void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40), *(void *)(v0 + 24));
    swift_task_dealloc();
    unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    uint64_t v3 = lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v4;
    *uint64_t v4 = v0;
    v4[1] = specialized AsyncSequence.reduce<A>(_:_:);
    uint64_t v5 = *(void *)(v0 + 24);
    return MEMORY[0x1F4187C78](v0 + 64, v5, v3);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v5[4] = a1;
  v5[5] = a4;
  uint64_t v6 = a5[1];
  v5[2] = *a5;
  v5[3] = v6;
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = swift_task_alloc();
  v0[6] = v2;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0 + 2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v4 = v0[4];
  uint64_t v5 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187F28](v4, v5, v6, 0, 0, &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v2, v7);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[7];
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  v2[2] = v1;
  v2[3] = v0 + 2;
  v2[4] = v0 + 4;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v4 = v0[6];
  uint64_t v5 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187F28](v4, v5, v6, 0, 0, &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v2, v7);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = v0[5];
  uint64_t v2 = swift_task_alloc();
  v0[6] = v2;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = v0 + 2;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v4 = v0[4];
  uint64_t v5 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187F28](v4, v5, v6, 0, 0, &async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v2, v7);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v8, v9);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  uint64_t v8 = *a4;
  uint64_t v9 = a4[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v8, v9);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v8(a1);
}

{
  uint64_t v4;
  void *v6;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;

  uint64_t v8 = (uint64_t (*)(uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return v8(a1);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in static BackgroundTaskProtocol.currentTasks()(&lazy cache variable for type metadata for TaskActionsContainer<(), ()>.Key, MEMORY[0x1E4FBC848] + 8, &lazy protocol witness table cache variable for type TaskActionsContainer<(), ()>.Key and conformance TaskActionsContainer<A, B>.Key, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:), a1);
}

{
  return specialized closure #1 in static BackgroundTaskProtocol.currentTasks()(&lazy cache variable for type metadata for TaskActionsContainer<String, ()>.Key, MEMORY[0x1E4FBB1A0], &lazy protocol witness table cache variable for type TaskActionsContainer<String, ()>.Key and conformance TaskActionsContainer<A, B>.Key, (uint64_t (*)(void))specialized Dictionary.init(dictionaryLiteral:), a1);
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t *a6)
{
  v6[6] = a1;
  v6[7] = a4;
  uint64_t v7 = a5[1];
  uint64_t v8 = *a6;
  uint64_t v9 = a6[1];
  _OWORD v6[2] = *a5;
  v6[3] = v7;
  v6[4] = v8;
  v6[5] = v9;
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  uint64_t v11 = *a5;
  uint64_t v12 = a5[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v13;
  void *v13 = v5;
  v13[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v9, v10, v11, v12);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = a5[1];
  v5[2] = *a5;
  uint64_t v8 = *(int **)(a4 + 16);
  v5[3] = v7;
  uint64_t v11 = (int *)((char *)v8 + *v8);
  uint64_t v9 = (void *)swift_task_alloc();
  v5[4] = v9;
  *uint64_t v9 = v5;
  v9[1] = specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  return ((uint64_t (*)(uint64_t, void *))v11)(a1, v5 + 2);
}

uint64_t specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a4;
  *(_OWORD *)(v5 + 16) = *a5;
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  _sSSSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *))((char *)&async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                            + async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v8(a1, v4, v5, v6, (_OWORD *)(v1 + 40));
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t *);
  uint64_t v10;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                                       + async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v8(a1, v4, v5, v6, v1 + 5, v1 + 7);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v10;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))((char *)&async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                            + async function pointer to specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v8(a1, v4, v5, v6, v1 + 5);
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(uint64_t **)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                    + async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v9(a1, a2, v6, v7);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *);
  uint64_t v12;

  uint64_t v6 = v2[2];
  uint64_t v7 = (uint64_t *)v2[3];
  uint64_t v8 = (uint64_t *)v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  *uint64_t v9 = v3;
  v9[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                                + async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v10(a1, a2, v6, v7, v8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v11;

  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(uint64_t **)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                    + async function pointer to specialized closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v9(a1, a2, v6, v7);
}

uint64_t sub_187FC5BB0()
{
  return objectdestroy_27Tm_0(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                  + async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v7(a1, v4, v5, v1 + 32);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, void *);
  uint64_t v9;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                            + async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v7(a1, v4, v5, (uint64_t)(v1 + 4), v1 + 8);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                                  + async function pointer to specialized closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  return v7(a1, v4, v5, v1 + 32);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TaskPriority?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187FC5CF4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu);
  return v6(a1, v4);
}

unint64_t lazy protocol witness table accessor for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator;
  if (!lazy protocol witness table cache variable for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator)
  {
    _sSSSgMaTm_3(255, &lazy cache variable for type metadata for TaskGroup<()>.Iterator, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBCF98]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskGroup<()>.Iterator and conformance TaskGroup<A>.Iterator);
  }
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TA_41(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t specialized closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t *a5@<X8>)
{
  if (static AppGraph.shared)
  {
    type metadata accessor for TaskActionsContainer<(), ()>(0, a1, a2, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.Key);
    lazy protocol witness table accessor for type TaskActionsContainer<String, ()>.Key and conformance TaskActionsContainer<A, B>.Key(a3, a1, a2);
    swift_retain();
    GraphHost.preferenceValue<A>(_:)();
    swift_release();
    uint64_t result = v10;
  }
  else
  {
    uint64_t result = a4(MEMORY[0x1E4FBC860]);
  }
  *a5 = result;
  return result;
}

uint64_t outlined init with copy of BackgroundTask<String, ()>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  type metadata accessor for TaskActionsContainer<(), ()>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

unint64_t type metadata accessor for BackgroundTaskProtocol()
{
  unint64_t result = lazy cache variable for type metadata for BackgroundTaskProtocol;
  if (!lazy cache variable for type metadata for BackgroundTaskProtocol)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BackgroundTaskProtocol);
  }
  return result;
}

uint64_t outlined destroy of TaskActionsContainer<String, ()>.ContainerEntry(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for TaskActionsContainer<(), ()>(0, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.ContainerEntry);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t lazy protocol witness table accessor for type TaskActionsContainer<String, ()>.Key and conformance TaskActionsContainer<A, B>.Key(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TaskActionsContainer<(), ()>(255, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TaskActionsContainer.Key);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187FC618C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187FC638C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for TaskActionsContainer<(), ()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3, MEMORY[0x1E4FBC848] + 8);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t objectdestroy_18Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187FC66F4()
{
  return objectdestroy_27Tm_0(MEMORY[0x1E4FBC8D0]);
}

Swift::Bool __swiftcall isVisionInterfaceIdiom()()
{
  return 0;
}

Swift::Void __swiftcall OpenSettingsAction.callAsFunction()()
{
}

void EnvironmentValues.openSettings.getter()
{
}

void sub_187FC681C()
{
}

void sub_187FC6844()
{
}

ValueMetadata *type metadata accessor for OpenSettingsAction()
{
  return &type metadata for OpenSettingsAction;
}

uint64_t static MapKitUpdate.ensure<A>(_:)()
{
  return static Update.ensure<A>(_:)();
}

ValueMetadata *type metadata accessor for MapKitUpdate()
{
  return &type metadata for MapKitUpdate;
}

void InputAccessoryGenerator.RootUIView.host.setter(void *a1)
{
  id v3 = *(id *)&v1[OBJC_IVAR____TtCC7SwiftUI23InputAccessoryGeneratorP33_5C36F4A49E2E2562B910FE6399D2C51E10RootUIView_host];
  *(void *)&v1[OBJC_IVAR____TtCC7SwiftUI23InputAccessoryGeneratorP33_5C36F4A49E2E2562B910FE6399D2C51E10RootUIView_host] = a1;
  id v4 = a1;
  if (v3)
  {
    id v8 = v4;
    if (a1) {
      goto LABEL_8;
    }
    id v3 = v3;
    objc_msgSend(v3, sel_removeFromSuperview);
    objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
    id v5 = objc_msgSend(v1, sel_superview);
    id v6 = v5;
    id v7 = v3;
    goto LABEL_6;
  }
  if (a1)
  {
    id v6 = v4;
    objc_msgSend(v1, sel_addSubview_, v6);
    objc_msgSend(v1, sel_invalidateIntrinsicContentSize);
    id v5 = objc_msgSend(v1, sel_superview);
    id v8 = 0;
    id v3 = v5;
    id v7 = v6;
LABEL_6:
    objc_msgSend(v5, sel_setNeedsLayout);

    id v8 = v7;
    goto LABEL_8;
  }
  id v8 = v4;
LABEL_8:
}

uint64_t type metadata accessor for InputAccessoryGenerator.RootUIView()
{
  return self;
}

uint64_t specialized InputAccessoryHost.setupSizeObserver()()
{
  return swift_release();
}

id InputAccessoryHost.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for InputAccessoryHost();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc InputAccessoryHost.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return InputAccessoryHost.init(coder:)(a3);
}

id InputAccessoryHost.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InputAccessoryHost();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for InputAccessoryHost()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for InputAccessoryBar()
{
  return &type metadata for InputAccessoryBar;
}

uint64_t associated type witness table accessor for View.Body : View in InputAccessoryBar()
{
  return swift_getOpaqueTypeConformance2();
}

double InputAccessoryBar.body.getter@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.center.getter();
  unint64_t v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7)
    {
LABEL_3:
      swift_bridgeObjectRetain();
      unint64_t v6 = a1;
      if (!v5) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v6 = 0;
  if (!v5) {
    goto LABEL_8;
  }
LABEL_7:
  swift_bridgeObjectRetain();
  _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_8:
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v9;
  *(unsigned char *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = v11;
  *(unsigned char *)(a2 + 56) = v12;
  double result = *(double *)&v13;
  *(_OWORD *)(a2 + 64) = v13;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance InputAccessoryBar()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double protocol witness for View.body.getter in conformance InputAccessoryBar@<D0>(uint64_t a1@<X8>)
{
  return InputAccessoryBar.body.getter(*v1, a1);
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitToolbarAdaptor()
{
  id v0 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitToolbar()), sel_init);
  LODWORD(v1) = 1112014848;
  objc_msgSend(v0, sel_setContentHuggingPriority_forAxis_, 0, v1);
  return v0;
}

void protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance UIKitToolbarAdaptor(void *a1)
{
  type metadata accessor for UIBarButtonItem();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setItems_, isa);
}

void specialized closure #1 in InputAccessoryHost.setupSizeObserver()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    unint64_t v5 = v4;
    objc_msgSend(v4, sel_invalidateIntrinsicContentSize);
    id v6 = objc_msgSend(v5, sel_superview);
    objc_msgSend(v6, sel_invalidateIntrinsicContentSize);
  }
}

uint64_t sub_187FC7170()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in InputAccessoryHost.setupSizeObserver()(uint64_t a1, uint64_t a2)
{
  specialized closure #1 in InputAccessoryHost.setupSizeObserver()(a1, a2, v2);
}

void type metadata accessor for InputAccessoryHost<InputAccessoryBar>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for VStack<UIKitToolbarAdaptor?>()
{
  if (!lazy cache variable for type metadata for VStack<UIKitToolbarAdaptor?>)
  {
    type metadata accessor for UIKitToolbarAdaptor?();
    lazy protocol witness table accessor for type UIKitToolbarAdaptor? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<UIKitToolbarAdaptor?>);
    }
  }
}

void type metadata accessor for UIKitToolbarAdaptor?()
{
  if (!lazy cache variable for type metadata for UIKitToolbarAdaptor?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitToolbarAdaptor?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UIKitToolbarAdaptor? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitToolbarAdaptor? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UIKitToolbarAdaptor? and conformance <A> A?)
  {
    type metadata accessor for UIKitToolbarAdaptor?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitToolbarAdaptor? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>)
  {
    type metadata accessor for VStack<UIKitToolbarAdaptor?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitToolbarAdaptor()
{
  return &type metadata for UIKitToolbarAdaptor;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>();
    lazy protocol witness table accessor for type VStack<UIKitToolbarAdaptor?> and conformance VStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>)
  {
    type metadata accessor for VStack<UIKitToolbarAdaptor?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<UIKitToolbarAdaptor?>, _FrameLayout>);
    }
  }
}

uint64_t EnvironmentValues._resetFocus.setter(uint64_t a1)
{
  outlined init with copy of _ResetFocusAction(a1, (uint64_t)v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of _ResetFocusAction(a1);
}

void View.prefersDefaultFocus(_:in:)()
{
}

void View.focusScope(_:)()
{
}

void View._prefersDefaultFocus(_:)()
{
}

uint64_t View._prefersDefaultFocus(_:in:)(char a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  uint64_t v5 = a2;
  char v6 = 0;
  return MEMORY[0x18C113660](v4, a3, &type metadata for _DefaultFocusModifier);
}

uint64_t View._focusScope(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for FocusNamespaceModifier, a3);
}

double static _DefaultFocusModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v28 = *a1;
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  int v14 = *(_DWORD *)(a2 + 60);
  int v16 = *(_DWORD *)(a2 + 64);
  int v17 = *(_DWORD *)(a2 + 68);
  int v18 = *(_DWORD *)(a2 + 72);
  int v19 = *(_DWORD *)(a2 + 76);
  int v20 = *(_DWORD *)(a2 + 80);
  uint64_t v40 = *(void *)a2;
  int v37 = v6;
  LODWORD(v41) = v6;
  unint64_t v42 = v7;
  int v43 = v8;
  int v44 = v9;
  int v45 = v11;
  int v46 = v10;
  int v30 = v10;
  int v31 = v20;
  uint64_t v47 = v12;
  uint64_t v48 = v13;
  int v49 = v15;
  int v50 = v14;
  int v35 = v16;
  int v36 = v14;
  int v51 = v16;
  int v52 = v17;
  int v33 = v18;
  int v34 = v17;
  int v53 = v18;
  int v54 = v19;
  int v32 = v19;
  int v55 = v20;
  a3(&v38, a1, &v40);
  uint64_t v40 = v13;
  LODWORD(v41) = v15;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    type metadata accessor for DefaultFocusViewResponder(0);
    uint64_t v21 = swift_allocObject();
    *(unsigned char *)(v21 + 216) = 0;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    ViewTransform.init()();
    *(void *)(v21 + 264) = 0;
    *(void *)(v21 + 272) = 0;
    *(void *)(v21 + 280) = 0;
    *(unsigned char *)(v21 + 288) = 1;
    swift_release();
    uint64_t v40 = v5;
    LODWORD(v41) = v37;
    unint64_t v42 = v7;
    int v43 = v8;
    int v44 = v9;
    int v45 = v11;
    int v46 = v30;
    uint64_t v47 = v12;
    uint64_t v48 = v13;
    int v49 = v15;
    int v50 = v36;
    int v51 = v35;
    int v52 = v34;
    int v53 = v33;
    int v54 = v32;
    int v55 = v31;
    uint64_t v27 = DefaultLayoutViewResponder.init(inputs:)();
    LODWORD(v40) = v28;
    type metadata accessor for _GraphValue<_DefaultFocusModifier>(0, &lazy cache variable for type metadata for _GraphValue<_DefaultFocusModifier>, (uint64_t)&type metadata for _DefaultFocusModifier, MEMORY[0x1E4F3F590]);
    unsigned int v29 = _GraphValue.value.getter();
    uint64_t v40 = v5;
    LODWORD(v41) = v37;
    unint64_t v42 = v7;
    int v43 = v8;
    int v44 = v9;
    int v45 = v11;
    int v46 = v30;
    uint64_t v47 = v12;
    uint64_t v48 = v13;
    int v49 = v15;
    int v50 = v36;
    int v51 = v35;
    int v52 = v34;
    int v53 = v33;
    int v54 = v32;
    int v55 = v31;
    unsigned int v26 = _ViewInputs.transform.getter();
    uint64_t v40 = v5;
    LODWORD(v41) = v37;
    unint64_t v42 = v7;
    int v43 = v8;
    int v44 = v9;
    int v45 = v11;
    int v46 = v30;
    uint64_t v47 = v12;
    uint64_t v48 = v13;
    int v49 = v15;
    int v50 = v36;
    int v51 = v35;
    int v52 = v34;
    int v53 = v33;
    int v54 = v32;
    int v55 = v31;
    unsigned int v25 = _ViewInputs.animatedPosition()();
    uint64_t v40 = v5;
    LODWORD(v41) = v37;
    unint64_t v42 = v7;
    int v43 = v8;
    int v44 = v9;
    int v45 = v11;
    int v46 = v30;
    uint64_t v47 = v12;
    uint64_t v48 = v13;
    int v49 = v15;
    int v50 = v36;
    int v51 = v35;
    int v52 = v34;
    int v53 = v33;
    int v54 = v32;
    int v55 = v31;
    unsigned int v22 = _ViewInputs.animatedSize()();
    uint64_t v40 = v38;
    unint64_t v41 = *(void *)&v39;
    int v23 = _ViewOutputs.viewResponders()();
    uint64_t v40 = v27;
    unint64_t v41 = __PAIR64__(v26, v29);
    unint64_t v42 = __PAIR64__(v22, v25);
    int v43 = v23;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v40) = 0;
    _ViewOutputs.subscript.setter();
  }
  *(void *)a4 = v38;
  double result = v39;
  a4[1] = v39;
  return result;
}

uint64_t DefaultFocusViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 216) = 0;
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 264) = 0;
  *(void *)(v0 + 272) = 0;
  *(void *)(v0 + 280) = 0;
  *(unsigned char *)(v0 + 288) = 1;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t type metadata accessor for DefaultFocusViewResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DefaultFocusViewResponder);
}

void protocol witness for ViewModifier.body(content:) in conformance _DefaultFocusModifier()
{
}

uint64_t DefaultFocusViewResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t Value = AGGraphGetValue();
  char v4 = v3;
  char v5 = *(unsigned char *)Value;
  uint64_t v6 = *(void *)(Value + 8);
  char v7 = *(unsigned char *)(Value + 16);
  int v8 = (uint64_t *)AGGraphGetValue();
  char v10 = v9;
  uint64_t v11 = *v8;
  uint64_t v12 = v8[1];
  uint64_t v13 = v8[2];
  uint64_t v14 = v8[3];
  uint64_t v15 = v8[4];
  AGGraphGetValue();
  char v17 = v16;
  AGGraphGetValue();
  if ((v4 & 1) != 0
    || (v10 & 1) != 0
    || (v17 & 1) != 0
    || (v18 & 1) != 0
    || (type metadata accessor for [ViewResponder](), (uint64_t result = AGGraphGetOutputValue()) == 0))
  {
    *(void *)&long long v28 = v12;
    *((void *)&v28 + 1) = v13;
    *(void *)&long long v29 = v14;
    *((void *)&v29 + 1) = v15;
    uint64_t v20 = swift_retain_n();
    *(double *)&unint64_t v21 = MEMORY[0x18C10C240](v20);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v22, v21));
    uint64_t v23 = *v1;
    *(void *)(v23 + 224) = v11;
    *(_OWORD *)(v23 + 232) = v28;
    *(_OWORD *)(v23 + 248) = v29;
    swift_retain();
    uint64_t v24 = swift_release();
    *(double *)(v23 + 264) = MEMORY[0x18C114450](v24);
    *(void *)(v23 + 272) = v25;
    *(unsigned char *)(v23 + 216) = v5;
    *(void *)(v23 + 280) = v6;
    *(unsigned char *)(v23 + 288) = v7;
    type metadata accessor for [ViewResponder]();
    AGGraphGetValue();
    if (v26)
    {
      swift_bridgeObjectRetain_n();
      MultiViewResponder.children.setter();
      swift_bridgeObjectRelease();
    }
    type metadata accessor for _GraphValue<_DefaultFocusModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_188351940;
    *(void *)(v27 + 32) = v23;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance DefaultFocusViewResponderFilter()
{
  return 0xD00000000000001FLL;
}

uint64_t DefaultFocusViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 216) = 0;
  swift_retain();
  ViewTransform.init()();
  *(void *)(v0 + 264) = 0;
  *(void *)(v0 + 272) = 0;
  *(void *)(v0 + 280) = 0;
  *(unsigned char *)(v0 + 288) = 1;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t DefaultFocusViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for BaseFocusResponder.defaultFocusNamespace.getter in conformance DefaultFocusViewResponder()
{
  return *(void *)(v0 + 280);
}

double static FocusNamespaceModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  int v41 = *a1;
  unint64_t v52 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v46 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 28);
  int v53 = *(_DWORD *)(a2 + 32);
  int v51 = *(_DWORD *)(a2 + 36);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  int v9 = *(_DWORD *)(a2 + 56);
  int v36 = *(_DWORD *)(a2 + 60);
  int v10 = *(_DWORD *)(a2 + 72);
  int v44 = *(_DWORD *)(a2 + 68);
  int v45 = *(_DWORD *)(a2 + 64);
  int v11 = *(_DWORD *)(a2 + 76);
  int v12 = *(_DWORD *)(a2 + 80);
  unint64_t v72 = *(void *)a2;
  int v48 = v5;
  int v49 = v4;
  int v73 = v4;
  uint64_t v74 = v46;
  int v75 = v5;
  int v76 = v6;
  int v47 = v6;
  int v77 = v53;
  int v78 = v51;
  uint64_t v50 = v7;
  uint64_t v79 = v7;
  uint64_t v80 = v8;
  int v81 = v9;
  int v82 = v36;
  int v83 = v45;
  int v84 = v44;
  int v37 = v10;
  int v85 = v10;
  int v86 = v11;
  int v87 = v12;
  char v38 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  int v35 = v9;
  if (v38)
  {
    type metadata accessor for _GraphValue<_DefaultFocusModifier>(0, &lazy cache variable for type metadata for _GraphValue<FocusNamespaceModifier>, (uint64_t)&type metadata for FocusNamespaceModifier, MEMORY[0x1E4F3F590]);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    LODWORD(v57) = v4;
    uint64_t v58 = v46;
    int v59 = v5;
    int v60 = v6;
    int v61 = v53;
    int v62 = v51;
    uint64_t v63 = v7;
    uint64_t v64 = swift_bridgeObjectRetain();
    int v65 = v9;
    int v66 = v36;
    int v67 = v45;
    int v68 = v44;
    int v14 = v11;
    int v13 = v10;
    int v69 = v10;
    int v70 = v11;
    int v71 = v12;
    LODWORD(v56) = _GraphValue.value.getter();
    HIDWORD(v56) = _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.environment.setter();
    unint64_t v15 = v72;
    int v16 = v73;
    uint64_t v17 = v74;
    int v18 = v75;
    int v19 = v76;
    int v21 = v77;
    int v20 = v78;
    uint64_t v7 = v79;
    uint64_t v22 = v80;
    int v24 = v81;
    int v23 = v82;
    int v26 = v83;
    int v25 = v84;
    int v28 = v85;
    int v27 = v86;
    int v29 = v87;
  }
  else
  {
    unint64_t v15 = v52;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v30 = swift_bridgeObjectRetain();
    int v29 = v12;
    int v13 = v37;
    int v27 = v11;
    int v28 = v37;
    int v25 = v44;
    int v26 = v45;
    int v23 = v36;
    int v24 = v9;
    uint64_t v22 = v30;
    int v20 = v51;
    int v21 = v53;
    int v19 = v6;
    int v18 = v48;
    uint64_t v17 = v46;
    int v16 = v4;
    int v14 = v11;
  }
  unint64_t v56 = v15;
  LODWORD(v57) = v16;
  uint64_t v58 = v17;
  int v59 = v18;
  int v60 = v19;
  int v61 = v21;
  int v62 = v20;
  uint64_t v63 = v7;
  uint64_t v64 = v22;
  int v65 = v24;
  int v66 = v23;
  int v67 = v26;
  int v68 = v25;
  int v69 = v28;
  int v70 = v27;
  int v71 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v31 = swift_bridgeObjectRetain();
  a3(&v54, v31, &v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v38)
  {
    LODWORD(v56) = v41;
    type metadata accessor for _GraphValue<_DefaultFocusModifier>(0, &lazy cache variable for type metadata for _GraphValue<FocusNamespaceModifier>, (uint64_t)&type metadata for FocusNamespaceModifier, MEMORY[0x1E4F3F590]);
    unsigned int v42 = _GraphValue.value.getter();
    unint64_t v56 = v54;
    double v57 = v55;
    unsigned int v40 = _ViewOutputs.viewResponders()();
    type metadata accessor for FocusNamespaceViewResponder(0);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 216) = 0;
    *(unsigned char *)(v32 + 224) = 1;
    unint64_t v56 = v52;
    LODWORD(v57) = v49;
    uint64_t v58 = v46;
    int v59 = v48;
    int v60 = v47;
    int v61 = v53;
    int v62 = v51;
    uint64_t v63 = v50;
    uint64_t v64 = v8;
    int v65 = v35;
    int v66 = v36;
    int v67 = v45;
    int v68 = v44;
    int v69 = v13;
    int v70 = v14;
    int v71 = v12;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = DefaultLayoutViewResponder.init(inputs:)();
    unint64_t v56 = __PAIR64__(v40, v42);
    double v57 = *(double *)&v33;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type FocusNamespaceFilter and conformance FocusNamespaceFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v56) = 0;
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a4 = v54;
  double result = v55;
  a4[1] = v55;
  return result;
}

uint64_t FocusNamespaceViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 216) = 0;
  *(unsigned char *)(v0 + 224) = 1;
  return DefaultLayoutViewResponder.init(inputs:)();
}

double FocusNamespaceModifier.ChildEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *(void *)&long long v10 = *Value;
  *((void *)&v10 + 1) = v3;
  uint64_t v4 = *(void *)AGGraphGetValue();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  int v5 = (char *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
  }
  unint64_t v7 = *((void *)v5 + 2);
  unint64_t v6 = *((void *)v5 + 3);
  if (v7 >= v6 >> 1) {
    int v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v5);
  }
  *((void *)v5 + 2) = v7 + 1;
  *(void *)&v5[8 * v7 + 32] = v4;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  double result = *(double *)&v10;
  *a1 = v10;
  return result;
}

double protocol witness for Rule.value.getter in conformance FocusNamespaceModifier.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return FocusNamespaceModifier.ChildEnvironment.value.getter(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance FocusNamespaceModifier()
{
}

uint64_t FocusNamespaceViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 216) = 0;
  *(unsigned char *)(v0 + 224) = 1;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t FocusNamespaceViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t FocusNamespaceFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  *(void *)(v1 + 216) = *(void *)AGGraphGetValue();
  *(unsigned char *)(v1 + 224) = 0;
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _GraphValue<_DefaultFocusModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_188351940;
    *(void *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall _FocusSystem.resetToDefault()()
{
}

void ResetFocusAction.callAsFunction(in:)()
{
}

void EnvironmentValues.resetFocus.getter()
{
}

void _ResetFocusAction.callAsFunction(in:)(uint64_t a1)
{
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t *);
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t vars8;

  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = Strong;
    uint64_t v4 = FocusBridge.host.getter();
    if (v4)
    {
      int v5 = (void *)v4;
      FocusBridge.focusedItem.getter((uint64_t)&v11);
      if (!v15 && v16 == 1)
      {
        outlined destroy of FocusItem?((uint64_t)&v11);
LABEL_18:
        swift_release();

        return;
      }
      uint64_t v6 = swift_weakLoadStrong();
      outlined destroy of FocusItem?((uint64_t)&v11);
      if (!v6) {
        goto LABEL_18;
      }
      ResponderNode.sequence.getter();
      unint64_t v7 = v13;
      uint64_t v9 = v11;
      long long v10 = v12;
      if ((v14 & 1) != 0 || (swift_retain(), v7(&v11, &v9), swift_release(), !v11))
      {
LABEL_19:
        swift_release();
        swift_release();

        swift_release();
      }
      else
      {
        type metadata accessor for FocusNamespaceViewResponder(0);
        while (1)
        {
          uint64_t v8 = swift_dynamicCastClass();
          if (v8)
          {
            if (*(unsigned char *)(v8 + 224) != 1 && *(void *)(v8 + 216) == a1) {
              break;
            }
          }
          swift_release();
          swift_retain();
          v7(&v11, &v9);
          swift_release();
          if (!v11) {
            goto LABEL_19;
          }
        }
        *(void *)(v3 + 168) = a1;
        *(unsigned char *)(v3 + 176) = 0;
        swift_retain();
        objc_msgSend(v5, sel_setNeedsFocusUpdate);

        swift_release_n();
        swift_release();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t EnvironmentValues._resetFocus.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues._resetFocus : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void EnvironmentValues._focusSystem.getter()
{
}

void EnvironmentValues._focusSystem.setter()
{
}

void EnvironmentValues._focusSystem.modify()
{
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance FocusScopesKey(void **a1, void **a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ResetFocusKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of _ResetFocusAction((uint64_t)&static ResetFocusKey.defaultValue, a1);
}

unint64_t lazy protocol witness table accessor for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter;
  if (!lazy protocol witness table cache variable for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultFocusViewResponderFilter and conformance DefaultFocusViewResponderFilter);
  }
  return result;
}

uint64_t type metadata accessor for FocusNamespaceViewResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FocusNamespaceViewResponder);
}

_UNKNOWN **base witness table accessor for ViewModifier in _DefaultFocusModifier()
{
  return &protocol witness table for _DefaultFocusModifier;
}

uint64_t sub_187FC90E8(uint64_t a1)
{
  outlined init with copy of _ResetFocusAction(a1, (uint64_t)v2);
  return EnvironmentValues._resetFocus.setter((uint64_t)v2);
}

void sub_187FC9120()
{
}

void sub_187FC9148(uint64_t *a1)
{
}

ValueMetadata *type metadata accessor for _DefaultFocusModifier()
{
  return &type metadata for _DefaultFocusModifier;
}

uint64_t type metadata completion function for DefaultFocusViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for DefaultFocusViewResponder()
{
  return type metadata accessor for DefaultFocusViewResponder(0);
}

uint64_t type metadata completion function for FocusNamespaceViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for FocusNamespaceViewResponder()
{
  return type metadata accessor for FocusNamespaceViewResponder(0);
}

ValueMetadata *type metadata accessor for _FocusSystem()
{
  return &type metadata for _FocusSystem;
}

ValueMetadata *type metadata accessor for ResetFocusAction()
{
  return &type metadata for ResetFocusAction;
}

uint64_t sub_187FC925C()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187FC9270()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

ValueMetadata *type metadata accessor for ResetFocusKey()
{
  return &type metadata for ResetFocusKey;
}

void *type metadata accessor for DefaultFocusViewResponderFilter()
{
  return &unk_1ED45AF50;
}

ValueMetadata *type metadata accessor for FocusNamespaceModifier()
{
  return &type metadata for FocusNamespaceModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusNamespaceModifier()
{
  return &protocol witness table for FocusNamespaceModifier;
}

unint64_t lazy protocol witness table accessor for type FocusNamespaceFilter and conformance FocusNamespaceFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusNamespaceFilter and conformance FocusNamespaceFilter;
  if (!lazy protocol witness table cache variable for type FocusNamespaceFilter and conformance FocusNamespaceFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusNamespaceFilter and conformance FocusNamespaceFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusNamespaceModifier.ChildEnvironment and conformance FocusNamespaceModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for _GraphValue<_DefaultFocusModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void *type metadata accessor for FocusNamespaceModifier.ChildEnvironment()
{
  return &unk_1ED4392F8;
}

void *type metadata accessor for FocusNamespaceFilter()
{
  return &unk_1ED430CB0;
}

ValueMetadata *type metadata accessor for FocusScopesKey()
{
  return &type metadata for FocusScopesKey;
}

void _ControlWidgetAdaptor.init()()
{
  _StringGuts.grow(_:)(41);
  type metadata accessor for _ControlWidgetAdaptor();
  _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  v0._object = (void *)0x800000018833D6B0;
  v0._countAndFlagsBits = 0xD000000000000027;
  String.append(_:)(v0);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for _ControlWidgetAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ControlWidgetAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  unint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v7, v3);
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in _ControlWidgetAdaptor<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for Widget.init() in conformance _ControlWidgetAdaptor<A>()
{
}

_UNKNOWN **sub_187FC9608()
{
  return &protocol witness table for ControlWidgetConfigurationAdaptor<A>;
}

uint64_t getEnumTagSinglePayload for _ControlWidgetAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _ControlWidgetAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187FC9988);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ControlWidgetConfigurationAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static ControlWidgetConfigurationAdaptor._makeWidgetConfiguration(widget:inputs:)(int *a1, uint64_t *a2)
{
  int v14 = *a1;
  uint64_t v2 = *a2;
  unsigned int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v7 = a2[6];
  int v9 = *((_DWORD *)a2 + 14);
  type metadata accessor for ControlWidgetConfigurationAdaptor();
  if (AGTypeID.isValueType.getter())
  {
    static DynamicPropertyCache.fields(of:)();
    uint64_t v22 = v2;
    unsigned int v23 = v3;
    uint64_t v25 = v4;
    *(void *)&long long v26 = v5;
    *((void *)&v26 + 1) = v6;
    uint64_t v27 = v8;
    uint64_t v28 = v7;
    int v29 = v9;
    int v21 = v14;
    type metadata accessor for ControlWidgetConfigurationAdaptor.BodyAccessor();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    BodyAccessor.makeBody(container:inputs:fields:)();
    outlined consume of DynamicPropertyCache.Fields.Layout();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v15[0] = v2;
    v15[1] = __PAIR64__(v24, v3);
    long long v15[2] = v4;
    long long v16 = v26;
    uint64_t v17 = v8;
    uint64_t v18 = v7;
    int v19 = v9;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(unsigned char *, void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v20, v15, AssociatedTypeWitness, AssociatedConformanceWitness);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  else
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance ControlWidgetConfigurationAdaptor<A>(int *a1, uint64_t *a2)
{
  return static ControlWidgetConfigurationAdaptor._makeWidgetConfiguration(widget:inputs:)(a1, a2);
}

uint64_t type metadata accessor for ControlWidgetConfigurationAdaptor.BodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ControlWidgetConfigurationAdaptor.BodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for ControlWidgetConfigurationAdaptor.BodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetConfigurationAdaptor<A>.BodyAccessor(uint64_t result, char a2)
{
  return ControlWidgetConfigurationAdaptor.BodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t partial apply for closure #1 in ControlWidgetConfigurationAdaptor.BodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 32))(*(void *)(v0 + 16));
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in AutomaticBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AutomaticBadgedViewStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  return outlined copy of BadgeLabel?(v3, v2, v4);
}

ValueMetadata *type metadata accessor for AutomaticBadgedViewStyle()
{
  return &type metadata for AutomaticBadgedViewStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedV()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalB;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalB)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyMod();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, Empty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>,, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalB);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyMod()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewS)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<HiddenBadgedViewStyle>, (void (*)(void))lazy protocol witness table accessor for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewS);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModi)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModi);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContainerStyleContext>, MEMORY[0x1E4F407B8], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ContainerStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SectionHeaderStyleContext>, MEMORY[0x1E4F40EC0], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SectionHeaderStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>)
  {
    type metadata accessor for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>, (uint64_t)&type metadata for TabSectionStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TabSectionStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>()
{
  if (!lazy cache variable for type metadata for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for BadgedView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>)
  {
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<AutomaticBadgedViewStyle>, (void (*)(void))lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, (void (*)(void))lazy protocol witness table accessor for type TraitBasedBadgedViewStyle and conformance TraitBasedBadgedViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    unint64_t v8 = type metadata accessor for StaticIf();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<ListBadgedViewStyle>, (void (*)(void))lazy protocol witness table accessor for type ListBadgedViewStyle and conformance ListBadgedViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    unint64_t v8 = type metadata accessor for StaticIf();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListBadgedViewStyle and conformance ListBadgedViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ListBadgedViewStyle and conformance ListBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type ListBadgedViewStyle and conformance ListBadgedViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListBadgedViewStyle and conformance ListBadgedViewStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>)
  {
    type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>();
    type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<MultimodalBadgedViewStyle>, (void (*)(void))lazy protocol witness table accessor for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle);
    lazy protocol witness table accessor for type BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>> and conformance BadgedView<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<ClarityUIInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (void (*)(uint64_t))type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>()
{
  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>)
  {
    unint64_t v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalBadgedViewStyle and conformance MultimodalBadgedViewStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>> and conformance BadgedView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for BadgedViewStyleModifier<AutomaticBadgedViewStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for BadgedViewStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle;
  if (!lazy protocol witness table cache variable for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HiddenBadgedViewStyle and conformance HiddenBadgedViewStyle);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, Empty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, Empty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, Empty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, Empty(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, Empty(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>> and conformance BadgedView<A>(&lazy protocol witness table cache variable for type BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>> and conformance BadgedView<A>, (void (*)(uint64_t))type metadata accessor for BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgedView<ModifiedContent<BadgeViewStyleConfiguration.Content, BadgedViewStyleModifier<AutomaticBadgedViewStyle>>>, StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<TabSectionStyleContext>, (uint64_t)&type metadata for TabSectionStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<TabSectionStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SectionHeaderStyleContext>, MEMORY[0x1E4F40EC0], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SectionHeaderStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SectionHeaderStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<TabSectionStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<ContainerStyleContext>, MEMORY[0x1E4F407B8], &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ContainerStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ContainerStyleContext>, BadgedViewStyleModifier<TraitBasedBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, BadgedViewStyleModifier<ListBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, BadgedViewStyleModifier<MultimodalBadgedViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t static ListItemReuseIdentifierTrait.defaultValue.getter()
{
  return 0x6C6C65437473694CLL;
}

uint64_t View.listItemReuseIdentifier(_:)()
{
  return View._trait<A>(_:_:)();
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ListItemReuseIdentifierTrait(void *a1@<X8>)
{
  *a1 = 0x6C6C65437473694CLL;
  a1[1] = 0xE800000000000000;
}

ValueMetadata *type metadata accessor for ListItemReuseIdentifierTrait()
{
  return &type metadata for ListItemReuseIdentifierTrait;
}

uint64_t sub_187FCAEE8()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<ListItemReuseIdentifierTrait>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<ListItemReuseIdentifierTrait>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListItemReuseIdentifierTrait>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ListItemReuseIdentifierTrait>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemReuseIdentifierTrait> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t specialized _UIHostingView.setWantsTransparentBackground(for:_:)(uint64_t result, char a2, uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x88);
  int v5 = *(_DWORD *)((char *)v3 + v4);
  int v6 = v5 & result;
  if (a2)
  {
    if (v6 == result) {
      int v7 = 0;
    }
    else {
      int v7 = result;
    }
    int v8 = v7 | v5;
    *(_DWORD *)((char *)v3 + v4) = v8;
    BOOL v9 = v8 == 0;
  }
  else
  {
    if (v6) {
      int v10 = ~result;
    }
    else {
      int v10 = -1;
    }
    int v11 = v10 & v5;
    BOOL v9 = v11 == 0;
    *(_DWORD *)((char *)v3 + v4) = v11;
  }
  int v12 = !v9;
  if ((((v5 == 0) ^ v12) & 1) == 0) {
    return a3();
  }
  return result;
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI29PresentationOptionsPreferenceV_s5NeverOSSTg5(void (*a1)(uint64_t *__return_ptr, _OWORD *))
{
  outlined init with copy of PopoverPresentation?(v1, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  if (!*(void *)&v7[0]) {
    return 0;
  }
  v5[6] = v7[6];
  v6[0] = v8[0];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v8 + 9);
  v5[2] = v7[2];
  v5[3] = v7[3];
  v5[4] = v7[4];
  v5[5] = v7[5];
  v5[0] = v7[0];
  v5[1] = v7[1];
  a1(&v9, v5);
  uint64_t result = outlined destroy of PresentationOptionsPreference((uint64_t)v5);
  if (!v2) {
    return v9;
  }
  return result;
}

uint64_t specialized PresentationHostingController.updateSheet(with:)(uint64_t *a1)
{
  specialized PresentationHostingController.setPassthrough(using:)((uint64_t)a1);
  id v3 = objc_msgSend(v1, sel_presentationController);
  if (v3)
  {
    uint64_t v4 = v3;
    self;
    id v5 = (id)swift_dynamicCastObjCClass();
    if (v5)
    {
LABEL_6:
      specialized PresentationHostingController.configureDetents(of:using:)((uint64_t)v5, (uint64_t)a1);
      specialized PresentationHostingController.updateDetentsSelection(of:using:)(v5, a1);

      goto LABEL_7;
    }
  }
  id v6 = objc_msgSend(v1, sel_popoverPresentationController);
  if (v6)
  {
    int v7 = v6;
    id v5 = objc_msgSend(v6, sel_adaptiveSheetPresentationController);

    if (v5) {
      goto LABEL_6;
    }
  }
LABEL_7:
  outlined init with copy of PresentationOptionsPreference((uint64_t)a1, (uint64_t)v10);
  uint64_t v8 = (uint64_t)v1 + direct field offset for PresentationHostingController.lastPresentationOptions;
  swift_beginAccess();
  _s7SwiftUI19PopoverPresentationVSgWOdTm_0((uint64_t)v10, v8, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  swift_endAccess();
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  specialized PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(0, (uint64_t)v10);
  return outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
}

uint64_t specialized OscillationDetector.insert(_:)(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 24);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v8);
  swift_beginAccess();
  id v3 = *(void **)(v1 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 16) = v3;
  if (result)
  {
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  id v3 = (void *)result;
  *(void *)(v1 + 16) = result;
  if ((v2 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 >= v3[2])
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  _s7SwiftUI19PopoverPresentationVSgWOdTm_0((uint64_t)v8, (uint64_t)&v3[18 * v2 + 4], (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
  swift_endAccess();
  uint64_t result = specialized OscillationDetector.enqueueDecay(at:)(*(void *)(v1 + 24));
  uint64_t v5 = *(void *)(v1 + 24);
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v7;
  if (v7 >= *(void *)(*(void *)(v1 + 16) + 16)) {
    uint64_t v7 = 0;
  }
  *(void *)(v1 + 24) = v7;
  return result;
}

uint64_t specialized OscillationDetector.enqueueDecay(at:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 56;
  swift_beginAccess();
  unint64_t v5 = *(void *)(*(void *)(v2 + 56) + 16);
  swift_beginAccess();
  unint64_t v6 = *(void *)(*(void *)(v2 + 16) + 16);
  uint64_t v7 = v5 - v6;
  if (v5 < v6) {
    goto LABEL_7;
  }
  uint64_t result = swift_beginAccess();
  if (v7 != -1)
  {
    if (v7 < -1)
    {
      __break(1u);
    }
    else if (*(void *)(*(void *)v4 + 16) >= (unint64_t)(v7 + 1))
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, v7 + 1);
      goto LABEL_6;
    }
    __break(1u);
    return result;
  }
LABEL_6:
  swift_endAccess();
LABEL_7:
  uint64_t v9 = *(void *)(v2 + 56);
  uint64_t v10 = *(void *)(v2 + 64);
  uint64_t v11 = *(void *)(v2 + 48);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 56) = v9;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
    uint64_t v9 = result;
    *(void *)uint64_t v4 = result;
  }
  unint64_t v13 = *(void *)(v9 + 16);
  unint64_t v12 = *(void *)(v9 + 24);
  if (v13 >= v12 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v9);
    uint64_t v9 = result;
    *(void *)uint64_t v4 = result;
  }
  *(void *)(v9 + 16) = v13 + 1;
  unint64_t v14 = v9 + 16 * v13;
  *(void *)(v14 + 32) = v11 + v10;
  *(void *)(v14 + 40) = a1;
  if ((*(unsigned char *)(v2 + 72) & 1) == 0)
  {
    *(unsigned char *)(v2 + 72) = 1;
    swift_allocObject();
    swift_weakInit();
    swift_retain();
    onNextMainRunLoop(do:)();
    return swift_release_n();
  }
  return result;
}

uint64_t specialized OscillationDetector.decay()()
{
  ++v0[4].Kind;
  p_Description = &v0[3].Description;
  swift_beginAccess();
  uint64_t v2 = *((void *)v0[3].Description + 2);
  uint64_t v3 = swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_18:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_21:
    if (*((void *)*p_Description + 2))
    {
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      onNextMainRunLoop(do:)();
      return swift_release_n();
    }
    else
    {
      LOBYTE(v0[4].Description) = 0;
    }
    return result;
  }
  uint64_t Kind = v0[4].Kind;
  uint64_t v5 = v2 + 1;
  uint64_t v6 = 16 * v2 + 16;
  do
  {
    uint64_t v7 = v5;
    uint64_t v8 = *(void *)(v3 + v6);
    --v5;
    if (v7 == 2) {
      break;
    }
    v6 -= 16;
  }
  while (Kind != v8);
  uint64_t result = swift_bridgeObjectRelease();
  if (Kind != v8) {
    goto LABEL_21;
  }
  if (v5 >= 1)
  {
    uint64_t v17 = v0;
    Description = v0[3].Description;
    if (Description[2])
    {
      uint64_t v11 = v0 + 1;
      unint64_t v12 = 1;
      uint64_t v13 = 5;
      unint64_t v0 = &type metadata for PresentationOptionsPreference;
      while (1)
      {
        unint64_t v14 = Description[v13];
        memset(v18, 0, 137);
        swift_beginAccess();
        int v15 = (void *)v11->Kind;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        v11->uint64_t Kind = (uint64_t)v15;
        if (result)
        {
          if ((v14 & 0x8000000000000000) != 0) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v15);
          int v15 = (void *)result;
          v11->uint64_t Kind = result;
          if ((v14 & 0x8000000000000000) != 0)
          {
LABEL_17:
            __break(1u);
            goto LABEL_18;
          }
        }
        if (v14 >= v15[2])
        {
          __break(1u);
          goto LABEL_26;
        }
        _s7SwiftUI19PopoverPresentationVSgWOdTm_0((uint64_t)v18, (uint64_t)&v15[18 * v14 + 4], (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
        uint64_t result = swift_endAccess();
        if (v5 == v12) {
          break;
        }
        Description = *p_Description;
        v13 += 2;
        if (v12++ >= *((void *)*p_Description + 2)) {
          goto LABEL_26;
        }
      }
      uint64_t result = swift_beginAccess();
      if (*((void *)*p_Description + 2) < (unint64_t)v5) {
        goto LABEL_28;
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, v5);
      uint64_t result = swift_endAccess();
      unint64_t v0 = v17;
      goto LABEL_21;
    }
LABEL_26:
    __break(1u);
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in OscillationDetector.enqueueDecay(at:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    specialized OscillationDetector.decay()();
    return swift_release();
  }
  return result;
}

uint64_t UIKitInspectorV3Bridge.PresentationKind.viewID.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  uint64_t result = 0;
  switch(v7)
  {
    case 1:
    case 2:
      uint64_t result = v6[0];
      break;
    case 3:
      return result;
    default:
      (*(void (**)(_DWORD *, uint64_t))(v4 + 8))(v6, a1);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t UIKitInspectorV3Bridge.PresentationKind.isPopover.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if (v7 - 2 < 2) {
    return 0;
  }
  if (!v7) {
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, a1);
  }
  return 1;
}

uint64_t static UIKitInspectorV3Bridge.PresentationKind.== infix(_:_:)(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(_DWORD *, unsigned char *, uint64_t))(v5 + 16);
  v6(v14, a1, v4);
  v6(v15, a2, v4);
  switch(v14[40])
  {
    case 1:
      v6(v13, v14, v4);
      if (v16 == 1) {
        goto LABEL_7;
      }
      goto LABEL_10;
    case 2:
      v6(v13, v14, v4);
      if (v16 != 2) {
        goto LABEL_10;
      }
LABEL_7:
      char v7 = v13[0] == *(_DWORD *)v15;
      goto LABEL_12;
    case 3:
      if (v16 != 3) {
        goto LABEL_10;
      }
      int8x16_t v8 = vorrq_s8(*(int8x16_t *)&v15[8], *(int8x16_t *)&v15[24]);
      if (*(void *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)) | *(void *)v15) {
        goto LABEL_10;
      }
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v14, v4);
      char v7 = 1;
      return v7 & 1;
    default:
      v6(v13, v14, v4);
      if (v16)
      {
        outlined destroy of AnyHashable((uint64_t)v13);
LABEL_10:
        TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
        (*(void (**)(unsigned char *, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 8))(v14, TupleTypeMetadata2);
        char v7 = 0;
      }
      else
      {
        v11[0] = *(_OWORD *)v15;
        v11[1] = *(_OWORD *)&v15[16];
        uint64_t v12 = *(void *)&v15[32];
        char v7 = MEMORY[0x18C1174E0](v13, v11);
        outlined destroy of AnyHashable((uint64_t)v11);
        outlined destroy of AnyHashable((uint64_t)v13);
LABEL_12:
        (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v14, v4);
      }
      return v7 & 1;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UIKitInspectorV3Bridge<A>.PresentationKind(unsigned char *a1, unsigned char *a2)
{
  return static UIKitInspectorV3Bridge.PresentationKind.== infix(_:_:)(a1, a2);
}

id UIKitInspectorV3Bridge.popoverPresentationDelegate.getter()
{
  uint64_t v1 = direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate;
  uint64_t v2 = *(void **)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate];
  if (v2)
  {
    id v3 = *(id *)&v0[direct field offset for UIKitInspectorV3Bridge.$__lazy_storage_$_popoverPresentationDelegate];
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = (objc_class *)type metadata accessor for PopoverPresentationDelegate();
    char v7 = v4;
    id v8 = objc_allocWithZone(v6);
    id v9 = specialized PopoverPresentationDelegate.init<A>(delegate:)((uint64_t)v7, ObjectType, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);

    uint64_t v10 = *(void **)&v4[v1];
    *(void *)&v4[v1] = v9;
    id v3 = v9;

    uint64_t v2 = 0;
  }
  id v11 = v2;
  return v3;
}

void UIKitInspectorV3Bridge.presentedVC.willset(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = *(void *)(v1 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    if (v2)
    {
      id v3 = *(void **)(v2 + direct field offset for UIHostingController.host);
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      id v4 = v3;
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    }
  }
}

char *UIKitInspectorV3Bridge.makePresentedHost(_:)(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  uint64_t v5 = objc_allocWithZone(v4);
  swift_retain();
  id v6 = v1;
  char v7 = specialized PresentationHostingController.init(rootView:delegate:drawsBackground:)(a1, (uint64_t)v6, 1, v5, ObjectType, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);
  swift_release();

  *(void *)(*(void *)&v7[direct field offset for UIHostingController.host]
            + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v7[direct field offset for UIHostingController.host])
                        + 0x198)
            + 8) = &protocol witness table for UIKitInspectorV3Bridge<A>;
  swift_unknownObjectWeakAssign();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  return v7;
}

uint64_t UIKitInspectorV3Bridge.reset()()
{
  *(void *)(v0 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = 0;
  swift_release();
  UIKitInspectorV3Bridge.presentedVC.willset(0);
  uint64_t v1 = *(void **)(v0 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  *(void *)(v0 + direct field offset for UIKitInspectorV3Bridge.presentedVC) = 0;

  uint64_t v2 = (void *)(v0 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x1E4FBC868];
  *uint64_t v2 = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRelease();
  Class v4 = (void *)(v0 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
  swift_beginAccess();
  *Class v4 = v3;
  swift_bridgeObjectRelease();
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  uint64_t v5 = v0 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
  swift_beginAccess();
  _s7SwiftUI19PopoverPresentationVSgWOdTm_0((uint64_t)&v9, v5, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  swift_endAccess();
  *(void *)&long long v11 = 0;
  long long v9 = 0u;
  long long v10 = 0u;
  BYTE8(v11) = 3;
  uint64_t v6 = v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v7 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)(v7 - 8) + 40))(v6, &v9, v7);
  uint64_t result = swift_endAccess();
  *(unsigned char *)(v0 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
  return result;
}

void closure #2 in UIKitInspectorV3Bridge.updateAnchor()(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    uint64_t v5 = (char *)v4;
    MEMORY[0x18C113CA0]();
    if (*(void *)&v5[direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor])
    {
      swift_retain();
      id v6 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a2);
      swift_release();
    }
    static Update.end()();
  }
}

void UIKitInspectorV3Bridge.dismissAndReset(viewController:)(void *a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v4 - 8);
  id v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  long long v10 = (char *)&v28 - v9;
  if (objc_msgSend(a1, sel_isBeingDismissed, v8))
  {
    static Log.presentation.getter();
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11) == 1)
    {
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
    }
    else
    {
      id v15 = a1;
      char v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        os_log_t v29 = v16;
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 138412290;
        aBlock[0] = v15;
        id v19 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        int v20 = v28;
        *uint64_t v28 = v15;

        char v16 = v29;
        _os_log_impl(&dword_1872C6000, v29, v17, "View controller %@ is already dismissing, not going to dismiss again", v18, 0xCu);
        type metadata accessor for NSObject?();
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v20, -1, -1);
        MEMORY[0x18C119C60](v18, -1, -1);
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v11);
    }
  }
  else
  {
    static Log.presentation.getter();
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
    {
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
    }
    else
    {
      int v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v21, v22))
      {
        unsigned int v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v23 = 0;
        _os_log_impl(&dword_1872C6000, v21, v22, "Dismissing popover", v23, 2u);
        MEMORY[0x18C119C60](v23, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
    }
    id v24 = objc_msgSend(a1, sel_presentingViewController);
    if (!v24) {
      id v24 = a1;
    }
    uint64_t v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    long long v26 = (void *)swift_allocObject();
    v26[2] = *(void *)(v3 + 80);
    v26[3] = *(void *)(v3 + 88);
    v26[4] = v25;
    aBlock[4] = partial apply for closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_87_1;
    uint64_t v27 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v24, sel_dismissViewControllerAnimated_completion_, 1, v27);
    _Block_release(v27);
  }
}

void closure #1 in UIKitInspectorV3Bridge.updateAnchor()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](v4);
  if (v5)
  {
    id v6 = (void *)v5;
    id v7 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(a3);
  }
}

void compareAndUpdate #1 <A><A1>(_:_:presented:) in UIKitInspectorV3Bridge.updatePopoverIfNeeded(_:presentationOptionsPreference:backgroundPreference:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, int a6, void *a7, uint64_t a8, char a9, uint64_t a10)
{
  int v60 = a7;
  uint64_t v63 = a5;
  uint64_t v62 = a2;
  uint64_t v61 = a1;
  uint64_t v14 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v58 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  id v19 = (char *)&v52 - v18;
  uint64_t v20 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v21);
  double v27 = MEMORY[0x1F4188790](v22);
  uint64_t v28 = (char *)&v52 - v24;
  if (*(unsigned char *)(a4 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
  {
    double v57 = v26;
    uint64_t v54 = v25;
    uint64_t v52 = direct field offset for UIKitInspectorV3Bridge.dismissingReason;
    uint64_t v55 = a8;
    int v53 = a6;
    int v59 = a3;
    uint64_t v56 = a4;
    uint64_t v29 = v23;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v52 - v24, v61, a10, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v28, 0, 1, a10);
    uint64_t v61 = v29;
    uint64_t v30 = &v19[*(int *)(v29 + 48)];
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v31(v19, v28, v16);
    v31(v30, (char *)v62, v16);
    uint64_t v62 = v14;
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v32(v19, 1, a10) == 1)
    {
      uint64_t v33 = *(void (**)(char *, uint64_t))(v20 + 8);
      v33(v28, v16);
      if (v32(v30, 1, a10) == 1)
      {
        v33(v19, v16);
LABEL_11:
        outlined init with copy of PopoverPresentation?(v63, (uint64_t)&v65, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
        if (!(void)v65)
        {
          __break(1u);
          return;
        }
        long long v77 = v70;
        *(_OWORD *)int v78 = *(_OWORD *)v71;
        long long v72 = v65;
        long long v73 = v66;
        long long v74 = v67;
        *(void *)&v78[14] = *(void *)&v71[14];
        long long v75 = v68;
        long long v76 = v69;
        uint64_t v41 = v65;
        uint64_t v42 = direct field offset for UIHostingController.host;
        int v43 = *(void **)&v59[direct field offset for UIHostingController.host];
        int v44 = (void *)MEMORY[0x1E4FBC8C8];
        int v45 = (void *)((char *)v43 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v43) + 0x60));
        swift_beginAccess();
        *int v45 = v41;
        swift_retain_n();
        uint64_t v46 = v43;
        swift_release();
        __int16 v64 = 1;
        _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

        swift_release_n();
        if (v53) {
          UIKitInspectorV3Bridge.updateAnchor()();
        }
        int v47 = *(void **)&v59[v42];
        uint64_t v48 = *(void *)v78;
        uint64_t v49 = *(void *)((char *)v47 + *(void *)((*v44 & *v47) + 0x68));
        uint64_t v50 = *(void *)(v49 + 152);
        *(void *)(v49 + 152) = *((void *)&v77 + 1);
        *(void *)(v49 + 160) = v48;
        swift_retain();
        int v51 = v47;
        swift_retain();
        outlined consume of EnvironmentValues?(v50);
        if (MEMORY[0x18C119DF0](v49 + 24))
        {
          swift_getObjectType();
          __int16 v64 = 2;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_unknownObjectRelease();
        }
        else
        {
        }
        goto LABEL_18;
      }
    }
    else
    {
      v31(v57, v19, v16);
      if (v32(v30, 1, a10) != 1)
      {
        uint64_t v35 = v62;
        int v36 = v58;
        (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v58, v30, a10);
        int v37 = v57;
        char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
        double v39 = *(void (**)(char *, uint64_t))(v35 + 8);
        v39(v36, a10);
        unsigned int v40 = *(void (**)(char *, uint64_t))(v20 + 8);
        v40(v28, v16);
        v39(v37, a10);
        v40(v19, v16);
        uint64_t v34 = v55;
        if (v38) {
          goto LABEL_11;
        }
LABEL_8:
        outlined init with copy of PopoverPresentation?(v63, (uint64_t)&v65, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
        if (!(void)v65)
        {
          outlined destroy of PopoverPresentation?((uint64_t)&v65, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
          *(unsigned char *)(v56 + v52) = 1;
          UIKitInspectorV3Bridge.dismissAndReset(viewController:)(v59);
          return;
        }
        long long v77 = v70;
        *(_OWORD *)int v78 = *(_OWORD *)v71;
        long long v72 = v65;
        long long v73 = v66;
        long long v74 = v67;
        *(void *)&v78[14] = *(void *)&v71[14];
        long long v75 = v68;
        long long v76 = v69;
        UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(v59, (uint64_t)&v72, v60, v34, a9 & 1);
LABEL_18:
        outlined destroy of PopoverPresentation((uint64_t)&v72);
        return;
      }
      (*(void (**)(char *, uint64_t))(v20 + 8))(v28, v16);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v57, a10);
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v19, v61);
    uint64_t v34 = v55;
    goto LABEL_8;
  }
}

void UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  int v49 = a5;
  uint64_t v48 = a4;
  uint64_t v50 = a1;
  int v51 = a3;
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *v5;
  _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v8 - 8);
  long long v10 = (char *)&v44 - v9;
  static Log.presentation.getter();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1872C6000, v13, v14, "Replacing existing popover with new one", v15, 2u);
      MEMORY[0x18C119C60](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  uint64_t v16 = MEMORY[0x1E4FBB960];
  uint64_t v17 = outlined init with copy of PopoverPresentation?(a2 + 48, (uint64_t)v53, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  MEMORY[0x1F4188790](v17);
  uint64_t v18 = *(void *)(v7 + 80);
  uint64_t v19 = *(void *)(v7 + 88);
  *(&v44 - 2) = v18;
  *(&v44 - 1) = v19;
  uint64_t v20 = a2;
  uint64_t v21 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v16, MEMORY[0x1E4FBB718]);
  uint64_t v45 = v19;
  uint64_t v46 = v18;
  uint64_t v22 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:), (uint64_t)(&v44 - 4), MEMORY[0x1E4FBC248], v22, v23, (uint64_t)v58);
  outlined destroy of PopoverPresentation?((uint64_t)v53, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v16, v21);
  outlined init with copy of PopoverPresentation(v20, (uint64_t)v57);
  if (v58[40] == 255)
  {
    int v24 = v57[11];
    outlined destroy of PopoverPresentation((uint64_t)v57);
    v59[0] = v24;
    char v60 = 1;
    uint64_t v25 = type metadata accessor for Optional();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v25 - 8) + 8))(v58, v25);
  }
  else
  {
    outlined destroy of PopoverPresentation((uint64_t)v57);
    (*(void (**)(_DWORD *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(v59, v58, v22);
  }
  long long v26 = v50;
  uint64_t v27 = v47;
  uint64_t v28 = v47 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  (*(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)(v22 - 8) + 40))(v28, v59, v22);
  swift_endAccess();
  *(unsigned char *)(v27 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 0;
  id v29 = objc_msgSend(v26, sel_presentingViewController);
  if (!v29) {
    id v29 = v26;
  }
  uint64_t v30 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of PopoverPresentation(v20, (uint64_t)v55);
  outlined init with copy of PresentationOptionsPreference(v48, (uint64_t)v53);
  uint64_t v31 = swift_allocObject();
  long long v32 = v54[0];
  *(_OWORD *)(v31 + 264) = v53[6];
  *(_OWORD *)(v31 + 280) = v32;
  *(_OWORD *)(v31 + 289) = *(_OWORD *)((char *)v54 + 9);
  long long v33 = v55[5];
  *(_OWORD *)(v31 + 112) = v55[4];
  *(_OWORD *)(v31 + 128) = v33;
  *(_OWORD *)(v31 + 144) = *(_OWORD *)v56;
  long long v34 = v55[1];
  *(_OWORD *)(v31 + 48) = v55[0];
  *(_OWORD *)(v31 + 64) = v34;
  long long v35 = v55[3];
  *(_OWORD *)(v31 + 80) = v55[2];
  *(_OWORD *)(v31 + 96) = v35;
  long long v36 = v53[4];
  *(_OWORD *)(v31 + 248) = v53[5];
  long long v37 = v53[0];
  *(_OWORD *)(v31 + 184) = v53[1];
  long long v38 = v53[3];
  *(_OWORD *)(v31 + 200) = v53[2];
  *(_OWORD *)(v31 + 216) = v38;
  *(_OWORD *)(v31 + 232) = v36;
  uint64_t v39 = v45;
  *(void *)(v31 + 16) = v46;
  *(void *)(v31 + 24) = v39;
  *(void *)(v31 + 32) = v30;
  *(void *)(v31 + 40) = v26;
  *(void *)(v31 + 158) = *(void *)&v56[14];
  *(_OWORD *)(v31 + 168) = v37;
  *(unsigned char *)(v31 + 305) = v49 & 1;
  unsigned int v40 = v51;
  *(void *)(v31 + 312) = v51;
  v52[4] = partial apply for closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:);
  v52[5] = v31;
  v52[0] = MEMORY[0x1E4F143A8];
  v52[1] = 1107296256;
  v52[2] = thunk for @escaping @callee_guaranteed () -> ();
  v52[3] = &block_descriptor_66;
  uint64_t v41 = _Block_copy(v52);
  id v42 = v26;
  id v43 = v40;
  swift_release();
  objc_msgSend(v29, sel_dismissViewControllerAnimated_completion_, 1, v41);
  _Block_release(v41);
}

void UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)(uint64_t a1, UIViewController *a2, uint64_t *a3, int a4)
{
  uint64_t v5 = (uint64_t)v4;
  int v60 = a4;
  uint64_t v61 = a3;
  uint64_t v63 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *v4;
  _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v58 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v13 = (char *)v4 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v14 = *(void *)(v7 + 80);
  uint64_t v15 = *(void *)(v7 + 88);
  uint64_t v16 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(uint64_t *, char *, uint64_t))(v17 + 16))(v64, v13, v16);
  LOBYTE(v7) = UIKitInspectorV3Bridge.PresentationKind.isPopover.getter(v16);
  uint64_t v59 = v17;
  uint64_t v18 = *(void (**)(uint64_t *, uint64_t))(v17 + 8);
  uint64_t v19 = v16;
  v18(v64, v16);
  if (v7)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (specialized UIKitInspectorV3Bridge.popoverCanPresent(popover:)(a1, v14, v15))
  {
    uint64_t v58 = v13;
    static Log.presentation.getter();
    uint64_t v20 = type metadata accessor for Logger();
    uint64_t v21 = *(void *)(v20 - 8);
    int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v12, 1, v20);
    uint64_t v57 = v14;
    if (v22 == 1)
    {
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      uint64_t v23 = v63;
    }
    else
    {
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      BOOL v29 = os_log_type_enabled(v27, v28);
      uint64_t v23 = v63;
      if (v29)
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl(&dword_1872C6000, v27, v28, "Presenting new popover", v30, 2u);
        uint64_t v31 = v30;
        uint64_t v23 = v63;
        MEMORY[0x18C119C60](v31, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v21 + 8))(v12, v20);
    }
    id v32 = objc_msgSend(self, sel_defaultCenter);
    if (one-time initialization token for willPresent != -1) {
      swift_once();
    }
    objc_msgSend(v32, sel_postNotificationName_object_, static SheetInspectorBridgeNotifications.willPresent, 0);

    static Transaction.current.getter();
    char v33 = Transaction.isAnimated.getter();
    swift_release();
    long long v34 = [(UIViewController *)v23 presentedViewController];
    if (v34)
    {
      long long v35 = v34;
      if (![(UIViewController *)v34 isBeingDismissed])
      {
        self;
        if (!swift_dynamicCastObjCClass()) {
          [(UIViewController *)v23 dismissViewControllerAnimated:v33 & 1 completion:0];
        }
      }
    }
    long long v36 = UIKitInspectorV3Bridge.makePresentedHost(_:)(*(void *)a1);
    long long v37 = v36;
    UIKitInspectorV3Bridge.presentedVC.willset((uint64_t)v36);
    long long v38 = *(void **)(v5 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    *(void *)(v5 + direct field offset for UIKitInspectorV3Bridge.presentedVC) = v36;

    uint64_t v39 = v23;
    uint64_t v40 = *(void *)(a1 + 96);
    v64[0] = *(void *)(a1 + 88);
    v64[1] = v40;
    __int16 v41 = *(unsigned __int8 *)(a1 + 8);
    __int16 v42 = *(unsigned __int8 *)(a1 + 9);
    swift_retain();
    swift_retain();
    specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(v37, v64, v61, v41 | (v42 << 8), v60 & 1);
    swift_release();
    swift_release();
    v64[0] = v5;
    PresentationHostingController.setupSheet<A>(for:presenter:placement:)((uint64_t)v64, v39, 5, ObjectType, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);
    uint64_t v43 = MEMORY[0x1E4FBB960];
    uint64_t v44 = outlined init with copy of PopoverPresentation?(a1 + 48, (uint64_t)v64, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    MEMORY[0x1F4188790](v44);
    uint64_t v54 = v57;
    uint64_t v55 = v15;
    uint64_t v45 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v43, MEMORY[0x1E4FBB718]);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:), (uint64_t)(&v56 - 4), MEMORY[0x1E4FBC248], v19, v46, (uint64_t)v66);
    outlined destroy of PopoverPresentation?((uint64_t)v64, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v43, v45);
    outlined init with copy of PopoverPresentation(a1, (uint64_t)v64);
    if (v66[40] == 255)
    {
      int v52 = v65;
      outlined destroy of PopoverPresentation((uint64_t)v64);
      v67[0] = v52;
      char v68 = 1;
      uint64_t v53 = type metadata accessor for Optional();
      (*(void (**)(unsigned char *, uint64_t))(*(void *)(v53 - 8) + 8))(v66, v53);
      uint64_t v48 = v58;
      uint64_t v47 = v59;
    }
    else
    {
      outlined destroy of PopoverPresentation((uint64_t)v64);
      uint64_t v47 = v59;
      (*(void (**)(_DWORD *, unsigned char *, uint64_t))(v59 + 32))(v67, v66, v19);
      uint64_t v48 = v58;
    }
    swift_beginAccess();
    (*(void (**)(char *, _DWORD *, uint64_t))(v47 + 40))(v48, v67, v19);
    swift_endAccess();
    [(UIViewController *)v63 presentViewController:v37 animated:1 completion:0];
  }
  else
  {
    uint64_t v24 = (uint64_t)v58;
    static Log.presentation.getter();
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
    {
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?(v24, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
    }
    else
    {
      int v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v49, v50))
      {
        int v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v51 = 0;
        _os_log_impl(&dword_1872C6000, v49, v50, "Not presenting new popover, source view is scrolled out of bounds", v51, 2u);
        MEMORY[0x18C119C60](v51, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    }
  }
}

void closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(uint64_t a1, char *a2, uint64_t *a3, uint64_t *a4, char a5, void *a6)
{
  uint64_t v11 = a1 + 16;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x18C119DF0](v11);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    *(unsigned char *)(v12 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 2;
    uint64_t v14 = *a3;
    uint64_t v15 = *(void **)&a2[direct field offset for UIHostingController.host];
    uint64_t v16 = (void *)((char *)v15 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v15) + 0x60));
    id v20 = a6;
    swift_beginAccess();
    *uint64_t v16 = v14;
    swift_retain_n();
    uint64_t v17 = v15;
    swift_release();
    LOWORD(v21[0]) = 1;
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release_n();
    uint64_t v18 = a3[12];
    v21[0] = a3[11];
    v21[1] = v18;
    __int16 v19 = *((unsigned __int8 *)a3 + 8);
    LOWORD(v17) = *((unsigned __int8 *)a3 + 9);
    swift_retain();
    swift_retain();
    specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(a2, v21, a4, v19 | ((_WORD)v17 << 8), a5 & 1);
    swift_release();
    swift_release();
    objc_msgSend(v20, sel_presentViewController_animated_completion_, a2, 1, 0);
  }
}

void UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)(void *a1, int a2, uint64_t a3, uint64_t *a4, char *a5)
{
  uint64_t v6 = v5;
  uint64_t ObjectType = swift_getObjectType();
  char v12 = *a5;
  uint64_t v13 = UIKitInspectorV3Bridge.presenter.getter();
  if (!v13) {
    return;
  }
  uint64_t v14 = (UIViewController *)v13;
  uint64_t v58 = ObjectType;
  uint64_t v15 = v5 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v16 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v68, v15, v16);
  char v18 = UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v16);
  uint64_t v59 = v17;
  uint64_t v60 = v16;
  (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v68, v16);
  if (v18)
  {
LABEL_33:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v19 = a1[11];
  outlined init with copy of InspectorStorage((uint64_t)a1, (uint64_t)v68);
  uint64_t v61 = v15;
  if (v19)
  {
    swift_retain();
    outlined destroy of InspectorStorage((uint64_t)v68);
  }
  else
  {
    uint64_t v19 = v69;
    swift_retain();
    outlined destroy of InspectorStorage((uint64_t)v68);
    if (!v19) {
      uint64_t v19 = AnyView.init<A>(_:)();
    }
  }
  id v20 = UIKitInspectorV3Bridge.makePresentedHost(_:)(v19);
  swift_release();
  outlined init with copy of PopoverPresentation?((uint64_t)(a1 + 6), (uint64_t)&v65, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  uint64_t v57 = v14;
  int v56 = a2;
  if (!*((void *)&v66 + 1))
  {
    outlined destroy of PopoverPresentation?((uint64_t)&v65, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    goto LABEL_17;
  }
  v62[0] = v65;
  v62[1] = v66;
  uint64_t v63 = v67;
  if (!*(void *)(a3 + 16) || (unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62), (v22 & 1) == 0))
  {
    outlined destroy of AnyHashable((uint64_t)v62);
LABEL_17:
    uint64_t v34 = direct field offset for UIHostingController.host;
    long long v35 = *(void **)&v20[direct field offset for UIHostingController.host];
    uint64_t v36 = a1[13];
    uint64_t v37 = a1[14];
    uint64_t v38 = *(void *)((char *)v35 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v35) + 0x68));
    uint64_t v39 = *(void *)(v38 + 152);
    *(void *)(v38 + 152) = v36;
    *(void *)(v38 + 160) = v37;
    swift_retain();
    uint64_t v40 = v35;
    swift_retain();
    outlined consume of EnvironmentValues?(v39);
    if (MEMORY[0x18C119DF0](v38 + 24))
    {
      swift_getObjectType();
      LOWORD(v62[0]) = 2;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      swift_unknownObjectRelease();
    }
    else
    {
    }
    if (*(unsigned char *)(*(void *)&v20[v34] + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v20[v34]) + 0xD8)) == 2)
    {
      *(void *)&v62[0] = v36;
      *((void *)&v62[0] + 1) = v37;
      EnvironmentValues.explicitPreferredColorScheme.getter();
      if (v65 != 2)
      {
        __int16 v41 = *(void **)&v20[v34];
        uint64_t v42 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v41) + 0xD8);
        uint64_t v43 = *((unsigned __int8 *)v41 + v42);
        *((unsigned char *)v41 + v42) = v65;
        uint64_t v44 = v20;
        uint64_t v45 = v41;
        specialized _UIHostingView.didChangeColorScheme(from:)(v43);
      }
    }
    signed __int8 v33 = 6;
    uint64_t v14 = v57;
    a2 = v56;
    goto LABEL_24;
  }
  uint64_t v23 = *(void *)(*(void *)(a3 + 56) + 8 * v21);
  uint64_t v24 = self;
  swift_retain();
  id v25 = objc_msgSend(v24, sel_currentDevice);
  id v26 = objc_msgSend(v25, sel_userInterfaceIdiom);

  if (v26 != (id)1) {
    goto LABEL_16;
  }
  *(void *)(v6 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = v23;
  swift_retain();
  swift_release();
  uint64_t v27 = a1[14];
  *(void *)&long long v65 = a1[13];
  *((void *)&v65 + 1) = v27;
  swift_retain();
  swift_retain();
  specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(v20, (uint64_t *)&v65, a4, 256, v12);
  swift_release();
  swift_release();
  id v28 = objc_msgSend(v20, sel_popoverPresentationController);
  if (!v28)
  {
LABEL_16:
    outlined destroy of AnyHashable((uint64_t)v62);
    swift_release();
    goto LABEL_17;
  }
  BOOL v29 = v28;
  type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_188351940;
  uint64_t v31 = MEMORY[0x18C119DF0](v6 + direct field offset for UIKitInspectorV3Bridge.host);
  if (!v31)
  {
    __break(1u);
    goto LABEL_33;
  }
  *(void *)(v30 + 32) = v31;
  *(void *)&long long v65 = v30;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v29, sel_setPassthroughViews_, isa);
  swift_release();

  outlined destroy of AnyHashable((uint64_t)v62);
  signed __int8 v33 = 5;
LABEL_24:
  *(void *)&v62[0] = v6;
  PresentationHostingController.setupSheet<A>(for:presenter:placement:)((uint64_t)v62, v14, v33, v58, (uint64_t)&protocol witness table for UIKitInspectorV3Bridge<A>);
  id v46 = objc_msgSend(v20, sel_presentationController);
  if (v46)
  {
    uint64_t v47 = v46;
    self;
    uint64_t v48 = swift_dynamicCastObjCClass();
    if (v48)
    {
      int v49 = (void *)v48;
      type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v50 = swift_allocObject();
      *(_OWORD *)(v50 + 16) = xmmword_1883863C0;
      int v51 = self;
      *(void *)(v50 + 32) = objc_msgSend(v51, sel_mediumDetent);
      *(void *)(v50 + 40) = objc_msgSend(v51, sel_largeDetent);
      *(void *)&v62[0] = v50;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
      Class v52 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v49, sel_setDetents_, v52);

      objc_msgSend(v49, sel_setLargestUndimmedDetentIdentifier_, *MEMORY[0x1E4FB2F00]);
      objc_msgSend(v49, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, 1);
      objc_msgSend(v49, sel_setPrefersGrabberVisible_, 1);
    }
  }
  if (a1[1])
  {
    LOBYTE(v62[0]) = 1;
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
  }
  uint64_t v53 = v20;
  UIKitInspectorV3Bridge.presentedVC.willset((uint64_t)v20);
  uint64_t v54 = *(void **)(v6 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
  *(void *)(v6 + direct field offset for UIKitInspectorV3Bridge.presentedVC) = v20;

  LODWORD(v62[0]) = a2;
  char v64 = 2;
  swift_beginAccess();
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(v59 + 40))(v61, v62, v60);
  swift_endAccess();
  [(UIViewController *)v14 presentViewController:v53 animated:1 completion:0];
}

uint64_t UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = v2 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v8 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(long long *, uint64_t, uint64_t))(v9 + 16))(&v37, v7, v8);
  Swift::UInt32 v10 = UIKitInspectorV3Bridge.PresentationKind.viewID.getter(v8);
  (*(void (**)(long long *, uint64_t))(v9 + 8))(&v37, v8);
  if (*(void *)(a2 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v10), (v12 & 1) != 0))
  {
    outlined init with copy of InspectorStorage(*(void *)(a2 + 56) + 120 * v11, (uint64_t)v41);
  }
  else
  {
    v41[0] = xmmword_18834BB90;
    memset(&v41[1], 0, 96);
    uint64_t v42 = 0;
  }
  outlined init with copy of PopoverPresentation?((uint64_t)v41, (uint64_t)&v37, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  uint64_t v13 = *((void *)&v37 + 1);
  if (*((void *)&v37 + 1) == 1)
  {
    uint64_t v14 = outlined destroy of PopoverPresentation?((uint64_t)&v37, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
LABEL_11:
    if (*(unsigned char *)(v3 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) == 2)
    {
      *(unsigned char *)(v3 + direct field offset for UIKitInspectorV3Bridge.dismissingReason) = 1;
      UIKitInspectorV3Bridge.dismissAndReset(viewController:)(a1);
    }
    int v17 = 0;
    goto LABEL_14;
  }
  uint64_t v15 = v37;
  char v16 = v38;
  outlined copy of Binding<NavigationSplitViewColumn>?(v37, *((uint64_t *)&v37 + 1));
  uint64_t v14 = outlined destroy of InspectorStorage((uint64_t)&v37);
  if (!v13) {
    goto LABEL_11;
  }
  *(void *)&long long v34 = v15;
  *((void *)&v34 + 1) = v13;
  LOBYTE(v35) = v16 & 1;
  type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v33);
  swift_release();
  uint64_t v14 = swift_release();
  if ((v33 & 1) == 0) {
    goto LABEL_11;
  }
  outlined init with copy of PopoverPresentation?((uint64_t)v41, (uint64_t)&v37, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  if (*((void *)&v37 + 1) == 1)
  {
    outlined destroy of PopoverPresentation?((uint64_t)&v37, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
    long long v34 = 0u;
    long long v35 = 0u;
    uint64_t v36 = 0;
LABEL_23:
    outlined destroy of PopoverPresentation?((uint64_t)&v34, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    goto LABEL_26;
  }
  outlined init with copy of PopoverPresentation?((uint64_t)v40, (uint64_t)&v34, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  outlined destroy of InspectorStorage((uint64_t)&v37);
  if (!*((void *)&v35 + 1)) {
    goto LABEL_23;
  }
  long long v37 = v34;
  long long v38 = v35;
  uint64_t v39 = v36;
  unint64_t v21 = (uint64_t *)(v3 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
  swift_beginAccess();
  uint64_t v22 = *v21;
  if (*(void *)(v22 + 16) && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v37), (v24 & 1) != 0))
  {
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
    swift_retain();
  }
  else
  {
    uint64_t v25 = 0;
  }
  swift_endAccess();
  outlined destroy of AnyHashable((uint64_t)&v37);
  *(void *)(v3 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor) = v25;
  swift_release();
LABEL_26:
  id v26 = objc_msgSend(a1, sel_presentationController);
  if (v26)
  {
    uint64_t v27 = v26;
    if (*(void *)(v3 + direct field offset for UIKitInspectorV3Bridge.activeInspectorAnchor))
    {
      swift_retain();
      id v28 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v27);

      swift_release();
      uint64_t v27 = v28;
    }
  }
  uint64_t result = outlined init with copy of PopoverPresentation?((uint64_t)v41, (uint64_t)&v37, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  if (*((void *)&v37 + 1) == 1)
  {
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v29 = v40[5];
  swift_retain();
  uint64_t result = outlined destroy of InspectorStorage((uint64_t)&v37);
  if (!v29)
  {
LABEL_34:
    __break(1u);
    return result;
  }
  uint64_t v30 = *(void **)&a1[direct field offset for UIHostingController.host];
  uint64_t v31 = (void *)((char *)v30 + *(void *)((*v6 & *v30) + 0x60));
  int v17 = 1;
  swift_beginAccess();
  *uint64_t v31 = v29;
  swift_retain_n();
  id v32 = v30;
  swift_release();
  __int16 v33 = 1;
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  uint64_t v14 = swift_release_n();
LABEL_14:
  MEMORY[0x1F4188790](v14);
  type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
  static Update.dispatchImmediately<A>(_:)();
  if (v33 != 2 && v17 == (v33 & 1))
  {
    uint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  }
  else
  {
    outlined init with copy of PopoverPresentation?((uint64_t)v41, (uint64_t)&v37, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
    uint64_t v18 = swift_allocObject();
    outlined init with take of InspectorStorage?((uint64_t)&v37, v18 + 16);
    *(unsigned char *)(v18 + 136) = v17;
    static Update.enqueueAction(_:)();
    swift_release();
    uint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  }
  return outlined destroy of PopoverPresentation?((uint64_t)v41, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, v19);
}

uint64_t closure #1 in UIKitInspectorV3Bridge.updateExistingInspector(_:values:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  outlined init with copy of PopoverPresentation?(a1, (uint64_t)&v7, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  uint64_t v3 = v8;
  if (v8 == 1)
  {
    uint64_t result = outlined destroy of PopoverPresentation?((uint64_t)&v7, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
LABEL_5:
    char v5 = 2;
    goto LABEL_6;
  }
  outlined copy of Binding<NavigationSplitViewColumn>?(v7, v8);
  uint64_t result = outlined destroy of InspectorStorage((uint64_t)&v7);
  if (!v3) {
    goto LABEL_5;
  }
  type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v6);
  swift_release();
  uint64_t result = swift_release();
  char v5 = v6;
LABEL_6:
  *a2 = v5;
  return result;
}

uint64_t closure #2 in UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(uint64_t a1)
{
  outlined init with copy of PopoverPresentation?(a1, (uint64_t)&v3, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage);
  uint64_t v1 = v4;
  if (v4 == 1) {
    return outlined destroy of PopoverPresentation?((uint64_t)&v3, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
  }
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  uint64_t result = outlined destroy of InspectorStorage((uint64_t)&v3);
  if (v1)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 8 || a1 == 5) {
    objc_msgSend(v2, sel_setModalPresentationCapturesStatusBarAppearance_, 1);
  }
  objc_msgSend(v2, sel_setModalPresentationStyle_, a1);
  id v5 = objc_msgSend(v2, sel_modalPresentationStyle);
  if (v5 == (id)7 || v5 == (id)2)
  {
    MEMORY[0x1F4188790](v5);
    static Update.ensure<A>(_:)();
    specialized PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, 0);
  }
}

void closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    UIKitInspectorV3Bridge.reset()();
  }
}

uint64_t UIKitInspectorV3Bridge.popoverSource(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v4);
  char v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = v1 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation;
  swift_beginAccess();
  outlined init with copy of PopoverPresentation?(v7, (uint64_t)v28, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation);
  if (!*(void *)&v28[0])
  {
    uint64_t result = outlined destroy of PopoverPresentation?((uint64_t)v28, &lazy cache variable for type metadata for PopoverPresentation?, (uint64_t)&type metadata for PopoverPresentation, MEMORY[0x1E4FBB718]);
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  v30[4] = v28[4];
  v30[5] = v29[0];
  *(_OWORD *)uint64_t v31 = v29[1];
  *(void *)&v31[14] = *(void *)((char *)&v29[1] + 14);
  v30[0] = v28[0];
  v30[1] = v28[1];
  void v30[2] = v28[2];
  v30[3] = v28[3];
  uint64_t v8 = *(void *)(v2 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections);
  char v9 = *(unsigned char *)(v2 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections + 8);
  outlined init with copy of PopoverPresentation((uint64_t)v30, (uint64_t)v28);
  if (v9)
  {
    __int16 v10 = BYTE8(v28[0]);
    __int16 v11 = BYTE9(v28[0]);
    v27[0] = *(_OWORD *)((char *)v29 + 8);
    EnvironmentValues.layoutDirection.getter();
    LOBYTE(v27[0]) = v22;
    uint64_t v8 = specialized UIPopoverArrowDirection.init(edges:layoutDirection:)(v10 | (unsigned __int16)(v11 << 8), (char *)v27);
  }
  outlined destroy of PopoverPresentation((uint64_t)v28);
  uint64_t v12 = MEMORY[0x18C119DF0](v2 + direct field offset for UIKitInspectorV3Bridge.barItemAnchor);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t result = MEMORY[0x18C119DF0](v2 + direct field offset for UIKitInspectorV3Bridge.host);
    if (result) {
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_27;
  }
  uint64_t result = MEMORY[0x18C119DF0](v2 + direct field offset for UIKitInspectorV3Bridge.tabItemAnchor);
  if (result)
  {
    uint64_t v13 = (void *)result;
    uint64_t result = MEMORY[0x18C119DF0](v2 + direct field offset for UIKitInspectorV3Bridge.host);
    if (result)
    {
LABEL_24:
      *(void *)a1 = result;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();

      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 24) = 0u;
      char v19 = 1;
      goto LABEL_25;
    }
    __break(1u);
  }
  if (v31[21] != 1)
  {
    MEMORY[0x1F4188790](result);
    *(void *)&v20[-16] = v2;
    swift_retain();
    static Update.ensure<A>(_:)();
    _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, type metadata accessor for CGRect);
    Anchor.convert(to:)();
    uint64_t v15 = v22;
    uint64_t v16 = v23;
    uint64_t v17 = v24;
    uint64_t v18 = v25;
    int v21 = v26;
    uint64_t result = MEMORY[0x18C119DF0](v2 + direct field offset for UIKitInspectorV3Bridge.host);
    if (result)
    {
      *(void *)a1 = result;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakInit();
      swift_release();
      swift_release();
      *(void *)(a1 + 24) = v15;
      *(void *)(a1 + 32) = v16;
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = v18;
      char v19 = v21;
LABEL_25:
      *(unsigned char *)(a1 + 56) = v19;
      *(void *)(a1 + 64) = v8;
      return outlined destroy of PopoverPresentation((uint64_t)v30);
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (*(void *)v31)
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGACyxGAA0dE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGACyxGAA0dE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v13 = *(void **)&v27[0];
  if (*(void *)&v27[0])
  {
    SearchEnvironmentStorage.properties.getter((uint64_t)v6);
    swift_release();
    outlined init with copy of PresentationSizing?((uint64_t)&v6[*(int *)(v4 + 28)], (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>?, (void (*)(uint64_t))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1((uint64_t)v6, type metadata accessor for SearchEnvironmentProperties);
    if (*((void *)&v27[0] + 1))
    {
      type metadata accessor for Binding<PlatformSearchPopoverAnchor?>();
      MEMORY[0x18C113DA0](&v22);
      if (v23 == 1)
      {
        outlined destroy of PopoverPresentation?((uint64_t)&v22, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?, (uint64_t)&type metadata for PlatformSearchPopoverAnchor, MEMORY[0x1E4FBB718]);
        _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
        uint64_t v13 = 0;
      }
      else
      {
        uint64_t v13 = (void *)MEMORY[0x18C119DF0](&v22);
        outlined destroy of PopoverPresentation?((uint64_t)&v22, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?, (uint64_t)&type metadata for PlatformSearchPopoverAnchor, MEMORY[0x1E4FBB718]);
        _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
      }
    }
    else
    {
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>?, (void (*)(uint64_t))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
      uint64_t v13 = 0;
    }
  }
  uint64_t result = MEMORY[0x18C119DF0](v2 + direct field offset for UIKitInspectorV3Bridge.host);
  if (result) {
    goto LABEL_24;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t closure #1 in UIKitInspectorV3Bridge.popoverSource(for:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x18C119DF0](a1 + direct field offset for UIKitInspectorV3Bridge.host);
  if (result)
  {
    uint64_t v2 = (void *)result;
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();

    ViewGraph.transform.getter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for PresentationHostingControllerDelegate.didDismissViewController(_:wasPreempted:modifierRemoved:) in conformance UIKitInspectorV3Bridge<A>(uint64_t a1, uint64_t a2, char a3)
{
  return specialized UIKitInspectorV3Bridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(a3);
}

void *UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  PreferenceValues.subscript.getter();
  v5[2] = a1;
  uint64_t v6 = v2;
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI11ColorSchemeO_s5NeverOytTB5((void *(*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:), (uint64_t)v5, v8);
}

void closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UITraitOverrides();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v8 = *a1;
  _UIHostingView.colorScheme.getter(&v17);
  if (v17 == 2 || ((v8 ^ ((v17 & 1) == 0)) & 1) == 0)
  {
    char v16 = v8;
    _UIHostingView.colorScheme.setter(&v16);
    if (v8) {
      uint64_t v9 = 2;
    }
    else {
      uint64_t v9 = 1;
    }
    uint64_t v10 = direct field offset for UIKitInspectorV3Bridge.presentedVC;
    __int16 v11 = *(void **)(a3 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
    if (v11)
    {
      objc_msgSend(v11, sel_setOverrideUserInterfaceStyle_, v9);
      uint64_t v12 = *(void **)(a3 + v10);
      if (v12)
      {
        id v13 = objc_msgSend(v12, sel_presentationController);
        if (v13)
        {
          uint64_t v14 = v13;
          MEMORY[0x18C116B50]();
          UIMutableTraits.userInterfaceStyle.setter();
          MEMORY[0x18C116B60](v7);
        }
      }
    }
  }
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance UIKitInspectorV3Bridge<A>()
{
  return specialized UIKitInspectorV3Bridge.hostingView<A>(_:willUpdate:)();
}

id *closure #1 in PopoverPresentationDelegate.popoverPresentationController(_:willRepositionPopoverTo:in:)(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate;
  uint64_t result = (id *)MEMORY[0x18C119DF0](a1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate);
  if (result)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t))(v6 + 8))(v13, a1, ObjectType, v6);
    swift_unknownObjectRelease();
    if (v13[0])
    {
      id v8 = v13[3];
      id v9 = v13[4];
      id v10 = v13[5];
      id v11 = v13[6];
      char v12 = v14;
      uint64_t result = outlined destroy of PopoverPresentationDelegate.PopoverSource(v13);
      if ((v12 & 1) == 0)
      {
        *a2 = v8;
        a2[1] = v9;
        a2[2] = v10;
        a2[3] = v11;
      }
    }
    else
    {
      return (id *)outlined destroy of PopoverPresentation?((uint64_t)v13, &lazy cache variable for type metadata for PopoverPresentationDelegate.PopoverSource?, (uint64_t)&type metadata for PopoverPresentationDelegate.PopoverSource, MEMORY[0x1E4FBB718]);
    }
  }
  return result;
}

UIModalPresentationStyle __swiftcall PopoverPresentationDelegate.adaptivePresentationStyle(for:traitCollection:)(UIPresentationController a1, UITraitCollection traitCollection)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate;
  if (MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate))
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    char v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, ObjectType, v6);
    swift_unknownObjectRelease();
    if (v8)
    {
      id v9 = [(objc_class *)a1.super.isa presentedViewController];
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
      if (swift_dynamicCastClass())
      {
        UIModalPresentationStyle v10 = specialized PresentationHostingController.adaptivePresentationStyle(traitCollection:kind:)(traitCollection.super.isa, 1);

        return v10;
      }
    }
  }
  if ([(objc_class *)traitCollection.super.isa horizontalSizeClass] == (id)1) {
    return 2;
  }
  if ([(objc_class *)traitCollection.super.isa verticalSizeClass] == (id)1) {
    return 2;
  }
  return -1;
}

uint64_t type metadata accessor for PopoverPresentationDelegate()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for DismissingReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187FCFECCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for DismissingReason()
{
  return &unk_1ED41D450;
}

uint64_t assignWithCopy for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 4) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UIKitInspectorV3Bridge.PresentationKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for UIKitInspectorV3Bridge.PresentationKind(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for UIKitInspectorV3Bridge.PresentationKind(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type DismissingReason and conformance DismissingReason()
{
  unint64_t result = lazy protocol witness table cache variable for type DismissingReason and conformance DismissingReason;
  if (!lazy protocol witness table cache variable for type DismissingReason and conformance DismissingReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DismissingReason and conformance DismissingReason);
  }
  return result;
}

id specialized UIHostingController.idealSizeDidChange(from:to:)(double a1, double a2)
{
  unsigned int v3 = v2;
  double v29 = a2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(v2, sel_view, v7);
  if (!v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  id v11 = v10;
  objc_msgSend(v10, sel_effectiveUserInterfaceLayoutDirection);

  uint64_t v12 = direct field offset for UIHostingController.host;
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  double v32 = v30;
  uint64_t v33 = v31;
  EnvironmentValues.pixelLength.getter();
  double v14 = v13;
  swift_release();
  swift_release();
  id v15 = objc_msgSend(v3, sel_view);
  if (!v15)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v15;
  objc_msgSend(v15, sel_safeAreaInsets);

  CGSize.inset(by:)();
  double v18 = v17;
  double v20 = v19;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4FBBEA8], v5);
  double v30 = v18;
  double v32 = v20;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v14);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v14);
  double v21 = v30;
  double v22 = v32;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v23 = &v3[direct field offset for UIHostingController.sizingOptions];
  id result = (id)swift_beginAccess();
  if (!*(void *)v23)
  {
LABEL_16:
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v21 != a1 || v22 != v29)
  {
    if ((*(void *)v23 & 1) == 0) {
      goto LABEL_9;
    }
    id v25 = *(id *)&v3[v12];
    int v26 = *((unsigned __int8 *)specialized _UIHostingView.base.getter() + 98);

    swift_release();
    if (v26 == 1)
    {
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v3;
      *(double *)(v27 + 24) = v21;
      *(double *)(v27 + 32) = v22;
      id v28 = v3;
      onNextMainRunLoop(do:)();
      id result = (id)swift_release();
LABEL_9:
      if ((*v23 & 2) == 0) {
        return result;
      }
      return objc_msgSend(*(id *)&v3[v12], sel_invalidateIntrinsicContentSize, *(void *)&v29);
    }
    id result = objc_msgSend(v3, sel_setPreferredContentSize_, v21, v22);
    if ((*v23 & 2) != 0) {
      return objc_msgSend(*(id *)&v3[v12], sel_invalidateIntrinsicContentSize, *(void *)&v29);
    }
  }
  return result;
}

uint64_t specialized UIHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unsigned int v4 = (void *)(v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  uint64_t v5 = *v4 & ~a1;
  if (one-time initialization token for idealSizeOptions != -1) {
    swift_once();
  }
  if ((static UIHostingControllerSizingOptions.idealSizeOptions & v5) != 0)
  {
    uint64_t v6 = direct field offset for UIHostingController.host;
    double v7 = (void *)MEMORY[0x1E4FBC8C8];
    swift_retain();
    static _ProposedSize.unspecified.getter();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
    uint64_t v8 = *(void *)(*(void *)(*(void *)(v2 + v6) + *(void *)((*v7 & **(void **)(v2 + v6)) + 0x68)) + 64);
    swift_beginAccess();
    if (*(unsigned char *)(v8 + 128))
    {
      static CGSize.invalidValue.getter();
      double v10 = v9;
      double v12 = v11;
      id v13 = *(id *)(v2 + v6);
      static _ProposedSize.unspecified.getter();
      _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
      ViewRendererHost.sizeThatFits(_:)();

      specialized UIHostingController.idealSizeDidChange(from:to:)(v10, v12);
    }
  }
  else if ((*v4 & static UIHostingControllerSizingOptions.idealSizeOptions) == 0)
  {
    swift_retain();
    static _ProposedSize.unspecified.getter();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.stopObserving(proposal:)();
    swift_endAccess();
    swift_release();
  }
  return specialized UIHostingController.updateWindowSizeObservers(_:)(v5);
}

uint64_t specialized UIHostingController.updateWindowSizeObservers(_:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if ((a1 & 4) != 0)
    {
      swift_retain();
      static _ProposedSize.zero.getter();
      swift_allocObject();
      swift_weakInit();
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();
      swift_release();
      swift_release();
      if ((a1 & 8) == 0)
      {
LABEL_6:
        uint64_t v6 = (unsigned char *)(v2 + direct field offset for UIHostingController.sizingOptions);
        swift_beginAccess();
        if ((*v6 & 8) == 0)
        {
          swift_retain();
          static _ProposedSize.infinity.getter();
          swift_beginAccess();
          type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
          ViewGraphGeometryObservers.stopObserving(proposal:)();
          swift_endAccess();
          swift_release();
        }
        return swift_release();
      }
    }
    else
    {
      uint64_t v5 = (unsigned char *)(v1 + direct field offset for UIHostingController.sizingOptions);
      swift_beginAccess();
      if ((*v5 & 4) == 0)
      {
        swift_retain();
        static _ProposedSize.zero.getter();
        swift_beginAccess();
        type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
        ViewGraphGeometryObservers.stopObserving(proposal:)();
        swift_endAccess();
        swift_release();
      }
      if ((a1 & 8) == 0) {
        goto LABEL_6;
      }
    }
    swift_retain();
    static _ProposedSize.infinity.getter();
    swift_allocObject();
    swift_weakInit();
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
    swift_endAccess();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void specialized PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  unsigned int v4 = &v1[direct field offset for PresentationHostingController.observedSize];
  if ((v1[direct field offset for PresentationHostingController.observedSize + 16] & 1) == 0)
  {
    uint64_t v5 = v1;
    specialized closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)((uint64_t)v5);
  }
  id v6 = objc_msgSend(v2, sel_presentingViewController);
  if (!v6) {
    goto LABEL_15;
  }
  double v7 = v6;
  uint64_t v8 = (uint64_t)&v2[direct field offset for PresentationHostingController.lastPresentationOptions];
  swift_beginAccess();
  if (!*(void *)v8)
  {
    uint64_t v44 = 0;
    long long aBlock = 0u;
    long long v43 = 0u;
LABEL_14:

    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    goto LABEL_15;
  }
  outlined init with copy of PresentationOptionsPreference(v8, (uint64_t)v46);
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v54, (uint64_t)&v39, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (v41)
    {
      outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&aBlock);
    }
    else
    {
      *((void *)&v43 + 1) = &type metadata for AutomaticPresentationSizing;
      uint64_t v44 = (uint64_t (*)())&protocol witness table for AutomaticPresentationSizing;
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v39, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
  }
  else
  {
    uint64_t v44 = 0;
    long long aBlock = 0u;
    long long v43 = 0u;
  }
  outlined destroy of PresentationOptionsPreference((uint64_t)v46);
  if (!*((void *)&v43 + 1)) {
    goto LABEL_14;
  }
  outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v58);
  double v9 = &v2[direct field offset for UIHostingController.sizingOptions];
  swift_beginAccess();
  if (*(void *)v9
    || (id v10 = objc_msgSend(v2, sel_sheetPresentationController)) == 0
    || (double v11 = v10, v12 = objc_msgSend(v10, sel_presentationStyle), v11, v12 != (id)2)
    || *(void *)v8 && (*(unsigned char *)(v8 + 136) & 1) != 0)
  {

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
LABEL_15:
    specialized UIHostingController.sizingOptionsDidChange(from:)(a1);
    return;
  }
  id v13 = objc_msgSend(v2, sel_traitCollection);
  id v14 = objc_msgSend(v13, sel_userInterfaceIdiom);

  UIUserInterfaceIdiom.idiom.getter((uint64_t)v14, (uint64_t)&aBlock);
  uint64_t v15 = aBlock;
  if ((void)aBlock)
  {
    uint64_t v16 = *((void *)&aBlock + 1);
    v46[0] = aBlock;
  }
  else
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    uint64_t v16 = *((void *)&v46[0] + 1);
    uint64_t v15 = *(void *)&v46[0];
  }
  id v17 = v7;
  id v18 = objc_msgSend(v17, sel_presentingViewController);
  double v19 = v17;
  if (v18)
  {
    double v20 = v17;
    do
    {
      double v19 = v18;

      id v18 = objc_msgSend(v19, sel_presentingViewController);
      double v20 = v19;
    }
    while (v18);
  }
  long long v38 = v17;
  id v21 = objc_msgSend(v19, sel_parentViewController);
  if (v21)
  {
    do
    {
      double v22 = v21;

      id v21 = objc_msgSend(v22, sel_parentViewController);
      double v19 = v22;
    }
    while (v21);
  }
  else
  {
    double v22 = v19;
  }
  id v23 = objc_msgSend(v22, sel_view);

  if (v23)
  {
    uint64_t v24 = *(void *)&v2[direct field offset for PresentationHostingController.lastColumnCount];
    outlined init with copy of TableColumnList((uint64_t)v58, (uint64_t)v46);
    id v47 = v23;
    uint64_t v48 = v24;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    char v51 = 1;
    uint64_t v52 = 0;
    char v53 = 1;
    uint64_t v54 = 0;
    char v55 = 1;
    uint64_t v56 = v15;
    uint64_t v57 = v16;
    *((void *)&aBlock + 1) = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    swift_unknownObjectWeakInit();
    id v37 = v23;
    specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&aBlock);
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    outlined destroy of weak FallbackResponderProvider?((uint64_t)&aBlock);
    uint64_t v29 = self;
    uint64_t v36 = v15;
    double v30 = (void *)swift_allocObject();
    void v30[2] = v2;
    v30[3] = v26;
    v30[4] = v28;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter;
    *(void *)(v31 + 24) = v30;
    uint64_t v44 = partial apply for thunk for @callee_guaranteed () -> ();
    uint64_t v45 = v31;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v43 = thunk for @escaping @callee_guaranteed () -> ();
    *((void *)&v43 + 1) = &block_descriptor_44;
    double v32 = _Block_copy(&aBlock);
    uint64_t v33 = v2;
    swift_retain();
    swift_release();
    objc_msgSend((id)v29, sel_performWithoutAnimation_, v32);
    _Block_release(v32);
    LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v29 & 1) == 0)
    {
      *(void *)unsigned int v4 = v26;
      *((void *)v4 + 1) = v28;
      v4[16] = 0;
      swift_retain();
      _ProposedSize.init(width:height:)();
      *(void *)&long long v39 = aBlock;
      BYTE8(v39) = BYTE8(aBlock);
      uint64_t v40 = v43;
      LOBYTE(v41) = BYTE8(v43);
      uint64_t v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      long long v35 = (void *)swift_allocObject();
      v35[2] = v34;
      v35[3] = v36;
      v35[4] = v16;
      swift_beginAccess();
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();

      swift_release();
      swift_release();
      outlined destroy of SheetSizing((uint64_t)v46);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t specialized closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  swift_retain();
  _ProposedSize.init(width:height:)();
  swift_beginAccess();
  type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
  ViewGraphGeometryObservers.stopObserving(proposal:)();
  swift_endAccess();
  uint64_t result = swift_release();
  uint64_t v3 = a1 + direct field offset for PresentationHostingController.observedSize;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 1;
  return result;
}

uint64_t specialized closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  return swift_release();
}

void specialized PresentationHostingController.configureSizingOptions(for:sheetController:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  if (objc_msgSend(v2, sel_modalPresentationStyle) == (id)7)
  {
    uint64_t v6 = qword_1ED4569E0;
    double v7 = (uint64_t *)&v3[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    uint64_t v8 = *v7;
    *double v7 = v6;
    specialized PresentationHostingController.sizingOptionsDidChange(from:)(v8);
    return;
  }
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v9 = qword_1ED456990;
    id v10 = (uint64_t *)&v2[direct field offset for UIHostingController.sizingOptions];
LABEL_5:
    swift_beginAccess();
    uint64_t v11 = *v10;
    *id v10 = v9;
LABEL_26:
    specialized PresentationHostingController.sizingOptionsDidChange(from:)(v11);
    if (a2) {
      objc_msgSend(a2, sel_setPrefersPageSizing_, 0);
    }
    return;
  }
  id v12 = objc_msgSend(v2, sel_modalPresentationStyle);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v22);
  if (v12 == (id)2)
  {
    if (static SemanticFeature.isEnabled.getter())
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v23, (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
      if (v18)
      {
        outlined init with take of OptionalBinaryInteger(&v17, (uint64_t)&v19);
      }
      else
      {
        *((void *)&v20 + 1) = &type metadata for AutomaticPresentationSizing;
        id v21 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
      }
    }
    else
    {
      id v21 = 0;
      long long v19 = 0u;
      long long v20 = 0u;
    }
    outlined destroy of PresentationOptionsPreference((uint64_t)v22);
    uint64_t v13 = *((void *)&v20 + 1);
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (!v13)
    {
      uint64_t v9 = qword_1ED4569B8;
      id v10 = (uint64_t *)&v3[direct field offset for UIHostingController.sizingOptions];
      goto LABEL_5;
    }
  }
  else
  {
    outlined destroy of PresentationOptionsPreference((uint64_t)v22);
  }
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (v18)
    {
      outlined init with take of OptionalBinaryInteger(&v17, (uint64_t)&v19);
    }
    else
    {
      *((void *)&v20 + 1) = &type metadata for AutomaticPresentationSizing;
      id v21 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    uint64_t v16 = (uint64_t *)&v3[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    uint64_t v11 = *v16;
    *uint64_t v16 = 0;
    goto LABEL_26;
  }
  id v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (v18)
    {
      outlined init with take of OptionalBinaryInteger(&v17, (uint64_t)&v19);
    }
    else
    {
      *((void *)&v20 + 1) = &type metadata for AutomaticPresentationSizing;
      id v21 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  }
  else
  {
    id v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (objc_msgSend(v3, sel_modalPresentationStyle) == (id)1)
    {
      id v14 = (uint64_t *)&v3[direct field offset for UIHostingController.sizingOptions];
      swift_beginAccess();
      uint64_t v15 = *v14;
      *id v14 = 0;
      specialized PresentationHostingController.sizingOptionsDidChange(from:)(v15);
      if (a2) {
        objc_msgSend(a2, sel_setPrefersPageSizing_, 1);
      }
    }
  }
}

void specialized PresentationHostingController.updatePreferredContentSizeIfNeeded(presenter:sizing:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (objc_msgSend(v3, sel_modalPresentationStyle) == (id)2)
  {
    id v6 = objc_msgSend(v3, sel_traitCollection);
    id v7 = objc_msgSend(v6, sel_horizontalSizeClass);

    if (v7 == (id)2)
    {
      outlined init with copy of PresentationSizing?(a2, (uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
      if (v59)
      {
        outlined init with take of OptionalBinaryInteger(&v58, (uint64_t)&aBlock);
        if (*((void *)&v55 + 1)) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v9 = &v3[direct field offset for PresentationHostingController.lastPresentationOptions];
        swift_beginAccess();
        if (*(void *)v9)
        {
          outlined init with copy of PresentationOptionsPreference((uint64_t)v9, (uint64_t)v42);
          if (static SemanticFeature.isEnabled.getter())
          {
            outlined init with copy of PresentationSizing?((uint64_t)&v50, (uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
            if (v41)
            {
              outlined init with take of OptionalBinaryInteger(&v40, (uint64_t)&aBlock);
            }
            else
            {
              *((void *)&v55 + 1) = &type metadata for AutomaticPresentationSizing;
              uint64_t v56 = (uint64_t (*)())&protocol witness table for AutomaticPresentationSizing;
              outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v40, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
            }
          }
          else
          {
            uint64_t v56 = 0;
            long long aBlock = 0u;
            long long v55 = 0u;
          }
          outlined destroy of PresentationOptionsPreference((uint64_t)v42);
        }
        else
        {
          uint64_t v56 = 0;
          long long aBlock = 0u;
          long long v55 = 0u;
        }
        outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
        if (*((void *)&v55 + 1))
        {
LABEL_5:
          outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v60);
          if (a1)
          {
            id v8 = a1;
          }
          else
          {
            id v8 = objc_msgSend(v3, sel_presentingViewController);
            if (!v8)
            {
LABEL_37:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
              return;
            }
          }
          id v10 = &v3[direct field offset for UIHostingController.sizingOptions];
          swift_beginAccess();
          uint64_t v11 = *(void *)v10;
          id v12 = a1;
          if (v11
            || (id v13 = objc_msgSend(v3, sel_sheetPresentationController)) == 0
            || (id v14 = v13, v15 = objc_msgSend(v13, sel_presentationStyle), v14, v15 != (id)2)
            || (uint64_t v16 = &v3[direct field offset for PresentationHostingController.lastPresentationOptions],
                swift_beginAccess(),
                *(void *)v16)
            && (v16[136] & 1) != 0)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);

            return;
          }
          id v17 = objc_msgSend(v3, sel_traitCollection);
          id v18 = objc_msgSend(v17, sel_userInterfaceIdiom);

          UIUserInterfaceIdiom.idiom.getter((uint64_t)v18, (uint64_t)&aBlock);
          uint64_t v19 = aBlock;
          if ((void)aBlock)
          {
            uint64_t v20 = *((void *)&aBlock + 1);
            v42[0] = aBlock;
          }
          else
          {
            static _GraphInputs.defaultInterfaceIdiom.getter();
            uint64_t v20 = *((void *)&v42[0] + 1);
            uint64_t v19 = *(void *)&v42[0];
          }
          id v21 = v8;
          id v22 = objc_msgSend(v21, sel_presentingViewController);
          uint64_t v23 = v21;
          if (v22)
          {
            uint64_t v24 = v21;
            do
            {
              uint64_t v23 = v22;

              id v22 = objc_msgSend(v23, sel_presentingViewController);
              uint64_t v24 = v23;
            }
            while (v22);
          }
          id v25 = objc_msgSend(v23, sel_parentViewController);
          if (v25)
          {
            do
            {
              uint64_t v26 = v25;

              id v25 = objc_msgSend(v26, sel_parentViewController);
              uint64_t v23 = v26;
            }
            while (v25);
          }
          else
          {
            uint64_t v26 = v23;
          }
          id v27 = objc_msgSend(v26, sel_view);

          if (v27)
          {
            uint64_t v28 = *(void *)&v3[direct field offset for PresentationHostingController.lastColumnCount];
            outlined init with copy of TableColumnList((uint64_t)v60, (uint64_t)v42);
            id v43 = v27;
            uint64_t v44 = v28;
            uint64_t v45 = 0;
            uint64_t v46 = 0;
            char v47 = 1;
            uint64_t v48 = 0;
            char v49 = 1;
            uint64_t v50 = 0;
            char v51 = 1;
            uint64_t v52 = v19;
            uint64_t v53 = v20;
            *((void *)&aBlock + 1) = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
            swift_unknownObjectWeakInit();
            id v29 = v27;
            specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&aBlock);
            uint64_t v31 = v30;
            uint64_t v33 = v32;
            outlined destroy of weak FallbackResponderProvider?((uint64_t)&aBlock);
            uint64_t v34 = self;
            long long v35 = (void *)swift_allocObject();
            v35[2] = v3;
            v35[3] = v31;
            v35[4] = v33;
            uint64_t v36 = swift_allocObject();
            *(void *)(v36 + 16) = partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter;
            *(void *)(v36 + 24) = v35;
            uint64_t v56 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
            uint64_t v57 = v36;
            *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v55 = thunk for @escaping @callee_guaranteed () -> ();
            *((void *)&v55 + 1) = &block_descriptor_80;
            id v37 = _Block_copy(&aBlock);
            long long v38 = v3;
            swift_retain();
            swift_release();
            objc_msgSend(v34, sel_performWithoutAnimation_, v37);
            _Block_release(v37);
            char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();

            swift_release();
            swift_release();
            if ((isEscapingClosureAtFileLocation & 1) == 0)
            {
              outlined destroy of SheetSizing((uint64_t)v42);
              goto LABEL_37;
            }
            __break(1u);
          }
          __break(1u);
          return;
        }
      }
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
  }
}

void specialized PresentationHostingController.configureDetents(of:using:)(uint64_t a1, uint64_t a2)
{
  int64_t v3 = (int64_t)v2;
  id v6 = objc_msgSend(v2, sel_traitCollection);
  id v7 = objc_msgSend(v6, sel_horizontalSizeClass);

  if (v7 != (id)2) {
    goto LABEL_5;
  }
  id v8 = objc_msgSend((id)v3, sel_traitCollection);
  id v9 = objc_msgSend(v8, sel_verticalSizeClass);

  if (v9 != (id)2
    || (int64_t v10 = v3 + direct field offset for PresentationHostingController.delegate,
        MEMORY[0x18C119DF0](v3 + direct field offset for PresentationHostingController.delegate))
    && (uint64_t v11 = *(void *)(v10 + 8),
        uint64_t ObjectType = swift_getObjectType(),
        LOBYTE(v11) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(ObjectType, v11),
        swift_unknownObjectRelease(),
        (v11 & 1) != 0))
  {
LABEL_5:
    if (one-time initialization token for clientNeedsOscillationSuppression != -1) {
      goto LABEL_68;
    }
    while (1)
    {
      BOOL v13 = clientNeedsOscillationSuppression;
      outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)v82);
      if (v13)
      {
        uint64_t v14 = v3 + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration;
        swift_beginAccess();
        outlined init with copy of PopoverPresentation?(v14, (uint64_t)&v78, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
        LOBYTE(v14) = PresentationOptionsPreference.sheetConfigurationChanged(from:)((uint64_t)&v78);
        outlined destroy of PopoverPresentation?((uint64_t)&v78, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
        outlined destroy of PresentationOptionsPreference((uint64_t)v82);
        if ((v14 & 1) == 0) {
          return;
        }
      }
      else
      {
        outlined destroy of PresentationOptionsPreference((uint64_t)v82);
      }
      long long v70 = (void *)a1;
      uint64_t v15 = *(void *)(v3 + direct field offset for PresentationHostingController.oscillationDetector);
      if (v15)
      {
        int64_t v16 = v3;
        swift_beginAccess();
        uint64_t v17 = *(void *)(v15 + 16);
        uint64_t v18 = *(void *)(v17 + 16);
        if (v18)
        {
          uint64_t v19 = v17 + 32;
          swift_bridgeObjectRetain();
          while (1)
          {
            uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 32);
            swift_retain();
            LOBYTE(v20) = v20(a2, v19);
            swift_release();
            if (v20) {
              break;
            }
            v19 += 144;
            if (!--v18)
            {
              swift_bridgeObjectRelease();
              goto LABEL_16;
            }
          }
          swift_bridgeObjectRelease();
          *(void *)&long long v78 = 0;
          *((void *)&v78 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(281);
          long long v77 = v78;
          v48._object = (void *)0x800000018833DA30;
          v48._countAndFlagsBits = 0xD000000000000083;
          String.append(_:)(v48);
          uint64_t v49 = v16
              + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration;
          swift_beginAccess();
          uint64_t v50 = outlined init with copy of PopoverPresentation?(v49, (uint64_t)&v78, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
          MEMORY[0x1F4188790](v50);
          uint64_t v51 = _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI29PresentationOptionsPreferenceV_s5NeverOSSTg5((void (*)(uint64_t *__return_ptr, _OWORD *))partial apply for closure #1 in PresentationHostingController.configureDetents(of:using:));
          unint64_t v53 = v52;
          outlined destroy of PopoverPresentation?((uint64_t)&v78, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
          if (v53) {
            uint64_t v54 = v51;
          }
          else {
            uint64_t v54 = 0;
          }
          if (!v53) {
            unint64_t v53 = 0xE000000000000000;
          }
          unint64_t v55 = v53;
          String.append(_:)(*(Swift::String *)&v54);
          swift_bridgeObjectRelease();
          v56._countAndFlagsBits = 0xD000000000000094;
          v56._object = (void *)0x800000018833DAC0;
          String.append(_:)(v56);
          MEMORY[0x18C112B90](v77, *((void *)&v77 + 1));
          swift_bridgeObjectRelease();
          return;
        }
LABEL_16:
        outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v78);
        int64_t v3 = v16;
        uint64_t v21 = v16 + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration;
        swift_beginAccess();
        _s7SwiftUI19PopoverPresentationVSgWOdTm_0((uint64_t)&v78, v21, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
        swift_endAccess();
        specialized OscillationDetector.insert(_:)(a2);
      }
      else
      {
        outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v78);
        uint64_t v22 = v3 + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration;
        swift_beginAccess();
        _s7SwiftUI19PopoverPresentationVSgWOdTm_0((uint64_t)&v78, v22, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference);
        swift_endAccess();
      }
      a1 = *(void *)a2;
      uint64_t v23 = *(void *)(*(void *)a2 + 16);
      unint64_t v24 = MEMORY[0x1E4FBC860];
      if (!v23) {
        goto LABEL_36;
      }
      int64_t v68 = v3;
      uint64_t v69 = a2;
      *(void *)&long long v74 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      int64_t v3 = specialized Set.startIndex.getter(a1);
      a2 = v25;
      char v27 = v26 & 1;
LABEL_23:
      if (v3 < 0 || v3 >= 1 << *(unsigned char *)(a1 + 32)) {
        break;
      }
      if (((*(void *)(a1 + 56 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) == 0) {
        goto LABEL_66;
      }
      if (*(_DWORD *)(a1 + 36) == a2)
      {
        uint64_t v33 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v3);
        uint64_t v35 = *v33;
        unint64_t v34 = v33[1];
        switch(v34 >> 62)
        {
          case 1uLL:
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
            *(void *)&long long v78 = 0x3A746867696548;
            *((void *)&v78 + 1) = 0xE700000000000000;
            v36._countAndFlagsBits = Double.description.getter();
            String.append(_:)(v36);
            swift_bridgeObjectRelease();
            id v37 = (void *)MEMORY[0x18C115780](v78, *((void *)&v78 + 1));
            swift_bridgeObjectRelease();
            *(void *)(swift_allocObject() + 16) = v35;
            goto LABEL_30;
          case 2uLL:
            uint64_t v71 = v34 & 0x3FFFFFFFFFFFFFFFLL;
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
            *(void *)&long long v78 = 0x3A6D6F74737543;
            *((void *)&v78 + 1) = 0xE700000000000000;
            v38._countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v38);
            swift_bridgeObjectRelease();
            id v37 = (void *)MEMORY[0x18C115780](v78, *((void *)&v78 + 1));
            swift_bridgeObjectRelease();
            uint64_t v39 = swift_allocObject();
            *(void *)(v39 + 16) = v35;
            *(void *)(v39 + 24) = v71;
LABEL_30:
            static UISheetPresentationControllerDetent.custom(identifier:resolver:)();

            goto LABEL_21;
          case 3uLL:
            unint64_t v40 = v35 | v34 ^ 0xC000000000000000;
            uint64_t v41 = self;
            if (v40) {
              id v42 = objc_msgSend(v41, sel_largeDetent);
            }
            else {
              id v42 = objc_msgSend(v41, sel_mediumDetent);
            }
            id v43 = v42;
            goto LABEL_22;
          default:
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
            *(void *)&long long v78 = 0x6E6F697463617246;
            *((void *)&v78 + 1) = 0xE90000000000003ALL;
            v28._countAndFlagsBits = Double.description.getter();
            String.append(_:)(v28);
            swift_bridgeObjectRelease();
            id v29 = (void *)MEMORY[0x18C115780](v78, *((void *)&v78 + 1));
            swift_bridgeObjectRelease();
            *(void *)(swift_allocObject() + 16) = v35;
            static UISheetPresentationControllerDetent.custom(identifier:resolver:)();

LABEL_21:
            swift_release();
LABEL_22:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            int64_t v30 = specialized _NativeSet.index(after:)(v3, a2, v27 & 1, a1);
            int64_t v3 = v30;
            a2 = v31;
            char v27 = v32 & 1;
            if (--v23) {
              goto LABEL_23;
            }
            outlined consume of Set<UIOpenURLContext>.Index._Variant(v30, v31, v32 & 1);
            unint64_t v24 = v74;
            swift_bridgeObjectRelease();
            int64_t v3 = v68;
            a2 = v69;
            break;
        }
LABEL_36:
        a1 = (uint64_t)v70;
        if (v24 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v59) {
            goto LABEL_70;
          }
LABEL_38:
          swift_bridgeObjectRetain();
        }
        else
        {
          if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_38;
          }
LABEL_70:
          type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
          uint64_t v60 = swift_allocObject();
          *(_OWORD *)(v60 + 16) = xmmword_188351940;
          *(void *)(v60 + 32) = objc_msgSend(self, sel_largeDetent);
          *(void *)&long long v78 = v60;
          specialized Array._endMutation()();
        }
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v70, sel_setDetents_, isa);

        uint64_t v62 = *(void **)(a2 + 48);
        if (v62 == (void *)2)
        {
          objc_msgSend(v70, sel_setLargestUndimmedDetentIdentifier_, 0);
        }
        else
        {
          outlined copy of PresentationDimmingBehavior?(*(id *)(a2 + 48));
          specialized PresentationDimmingBehavior.setLargestUndimmedDetentIdentifier(of:detents:)(v70, (uint64_t)v62);
          outlined consume of PresentationDimmingBehavior?(v62);
        }
        objc_msgSend(v70, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, *(unsigned __int8 *)(a2 + 57) != 2);
        UISheetPresentationController.preferredCornerRadius.setter();
        objc_msgSend(v70, sel_setPrefersEdgeAttachedInCompactHeight_, (*(unsigned char *)(a2 + 41) & 0xFD) == 1);
        if (*(unsigned char *)(a2 + 58))
        {
          if (*(unsigned char *)(a2 + 58) == 1)
          {
            swift_bridgeObjectRelease();
            BOOL v63 = 1;
          }
          else
          {
            swift_bridgeObjectRelease();
            BOOL v63 = 0;
          }
        }
        else
        {
          if (v24 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v64 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          BOOL v63 = v64 > 1;
        }
        objc_msgSend(v70, sel_setPrefersGrabberVisible_, v63);
        long long v65 = (double *)(a2 + 80);
        if (*(unsigned char *)(a2 + 88)) {
          long long v65 = (double *)MEMORY[0x1E4FB32C0];
        }
        objc_msgSend(v70, sel__setGrabberTopSpacing_, *v65);
        id v66 = objc_msgSend(v70, sel_prefersEdgeAttachedInCompactHeight);
        objc_msgSend(v70, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, v66);
        if ((v66 & 1) != 0 || objc_msgSend((id)v3, sel_modalPresentationStyle) == (id)2) {
          uint64_t v67 = 1;
        }
        else {
          uint64_t v67 = objc_msgSend(v70, sel_prefersPageSizing) ^ 1;
        }
        objc_msgSend(v70, sel__setMode_, v67);
        goto LABEL_89;
      }
LABEL_67:
      __break(1u);
LABEL_68:
      swift_once();
    }
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_188351940;
  *(void *)(v44 + 32) = objc_msgSend(self, sel_largeDetent);
  v82[0] = v44;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
  Class v45 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend((id)a1, sel_setDetents_, v45);

  objc_msgSend((id)a1, sel_setLargestUndimmedDetentIdentifier_, 0);
  objc_msgSend((id)a1, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, 1);
  UISheetPresentationController.preferredCornerRadius.setter();
  objc_msgSend((id)a1, sel_setPrefersEdgeAttachedInCompactHeight_, 0);
  objc_msgSend((id)a1, sel_setPrefersGrabberVisible_, *(unsigned __int8 *)(a2 + 58) == 1);
  uint64_t v46 = (double *)(a2 + 80);
  if (*(unsigned char *)(a2 + 88)) {
    uint64_t v46 = (double *)MEMORY[0x1E4FB32C0];
  }
  objc_msgSend((id)a1, sel__setGrabberTopSpacing_, *v46);
  outlined init with copy of PresentationSizing?(a2 + 96, (uint64_t)v82, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  uint64_t v47 = v82[3];
  outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v82, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)v82);
  if (v47)
  {
    outlined destroy of PresentationOptionsPreference((uint64_t)v82);
    outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v78);
  }
  else
  {
    if (static SemanticFeature.isEnabled.getter())
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v83, (uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
      if (*((void *)&v75 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&v74, (uint64_t)&v78);
      }
      else
      {
        *((void *)&v79 + 1) = &type metadata for AutomaticPresentationSizing;
        uint64_t v80 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
      }
    }
    else
    {
      uint64_t v80 = 0;
      long long v78 = 0u;
      long long v79 = 0u;
    }
    outlined destroy of PresentationOptionsPreference((uint64_t)v82);
    uint64_t v57 = *((void *)&v79 + 1);
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v78, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v78);
    if (!v57)
    {
      outlined destroy of PresentationOptionsPreference((uint64_t)&v78);
      goto LABEL_61;
    }
  }
  int v58 = v81;
  outlined destroy of PresentationOptionsPreference((uint64_t)&v78);
  if (v58 == 1)
  {
LABEL_61:
    objc_msgSend((id)a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
    objc_msgSend((id)a1, sel__setMode_, objc_msgSend((id)v3, sel_modalPresentationStyle) == (id)2);
    return;
  }
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?(a2 + 96, (uint64_t)&v72, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (v73)
    {
      outlined init with take of OptionalBinaryInteger(&v72, (uint64_t)&v74);
    }
    else
    {
      *((void *)&v75 + 1) = &type metadata for AutomaticPresentationSizing;
      long long v76 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v72, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    }
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
    if (objc_msgSend((id)v3, sel_modalPresentationStyle) != (id)7)
    {
      objc_msgSend((id)a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
LABEL_89:
      specialized PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, (void *)a1);
    }
  }
  else
  {
    long long v76 = 0;
    long long v74 = 0u;
    long long v75 = 0u;
    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v74, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  }
}

void specialized PresentationHostingController.setPassthrough(using:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_popoverPresentationController);
  if (v3)
  {
    id v10 = v3;
    if (*(unsigned char *)(a1 + 56) == 2
      && (id v4 = objc_msgSend(v1, sel_presentingViewController)) != 0
      && (uint64_t v5 = v4, v6 = objc_msgSend(v4, sel_view), v5, v6))
    {
      type metadata accessor for PopoverPresentation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_188351940;
      *(void *)(v7 + 32) = v6;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      id v8 = v6;
      v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_setPassthroughViews_, v9.super.isa);
    }
    else
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      v9.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v10, sel_setPassthroughViews_, v9.super.isa);
    }
  }
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void specialized closure #1 in UIHostingController.sizingOptionsDidChange(from:)(double *a1, uint64_t a2, uint64_t a3)
{
  double v3 = *a1;
  double v4 = a1[1];
  uint64_t v5 = a3 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    unint64_t v7 = (void *)v6;
    specialized UIHostingController.idealSizeDidChange(from:to:)(v3, v4);
  }
}

void specialized PresentationHostingController.updateDetentsSelection(of:using:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2[2];
  if (v2)
  {
    uint64_t v5 = *a2;
    uint64_t v4 = a2[1];
    type metadata accessor for PopoverPresentation?(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, MEMORY[0x1E4F41638]);
    uint64_t v7 = v6;
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](v20, v7);
    if ((specialized Set.contains(_:)(v20[0], v20[1], v5) & 1) == 0)
    {
      MEMORY[0x18C112B90](0xD000000000000052, 0x8000000188333910);
      outlined consume of Binding<NavigationSplitViewColumn>?(v4, v2);
      return;
    }
    MEMORY[0x18C113DA0](v20, v7);
    id v8 = PresentationDetent.uiSheetDetentId.getter();
    id v9 = objc_msgSend(a1, sel_selectedDetentIdentifier);
    if (v9)
    {
      unint64_t v10 = v9;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;
      if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v13 == v14)
      {
        id v15 = v8;

        swift_bridgeObjectRelease_n();
LABEL_9:
        outlined consume of Binding<NavigationSplitViewColumn>?(v4, v2);
LABEL_11:

        return;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      id v16 = v8;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_9;
      }
    }
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = a1;
    *(void *)(v17 + 24) = v8;
    id v8 = v8;
    id v18 = a1;
    onNextMainRunLoop(do:)();
    outlined consume of Binding<NavigationSplitViewColumn>?(v4, v2);
    swift_release();
    goto LABEL_11;
  }
}

id specialized PopoverPresentationDelegate.init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v3[OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_isLayoutPreventionActive] = 0;
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate + 8] = a3;
  swift_unknownObjectWeakInit();
  v7.receiver = v3;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, sel_init);
}

id specialized PopoverPresentationDelegate.__allocating_init<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return specialized PopoverPresentationDelegate.init<A>(delegate:)(a1, a2, a3);
}

uint64_t specialized UIPopoverArrowDirection.init(edges:layoutDirection:)(__int16 a1, char *a2)
{
  if ((a1 & 0x100) != 0) {
    return 15;
  }
  char v2 = a1;
  char v3 = *a2;
  uint64_t v4 = static Edge.allCases.getter();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = 0;
    id v7 = (unsigned __int8 *)(v4 + 32);
    do
    {
      unsigned int v9 = *v7++;
      uint64_t v8 = v9;
      if ((v9 - 9) < 0xEFu) {
        goto LABEL_10;
      }
      int v10 = 1 << v8;
      if ((v8 & 0x80) != 0) {
        LOBYTE(v10) = 0;
      }
      if ((v10 & ~v2) == 0)
      {
LABEL_10:
        switch(v8)
        {
          case 1:
            if ((v3 & 1) == 0) {
              goto LABEL_16;
            }
            goto LABEL_13;
          case 2:
            v6 |= 2uLL;
            break;
          case 3:
            if (v3)
            {
LABEL_16:
              if ((v6 & 4) == 0) {
                v6 |= 4uLL;
              }
            }
            else
            {
LABEL_13:
              if ((v6 & 8) == 0) {
                v6 |= 8uLL;
              }
            }
            break;
          default:
            v6 |= 1uLL;
            break;
        }
      }
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

void specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate;
  if (!MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_delegate))
  {
    uint64_t v17 = 0;
    memset(v16, 0, sizeof(v16));
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(v5 + 8))(v16, v1, ObjectType, v5);
  swift_unknownObjectRelease();
  if (!*(void *)&v16[0])
  {
LABEL_8:
    outlined destroy of PopoverPresentation?((uint64_t)v16, &lazy cache variable for type metadata for PopoverPresentationDelegate.PopoverSource?, (uint64_t)&type metadata for PopoverPresentationDelegate.PopoverSource, MEMORY[0x1E4FBB718]);
    return;
  }
  outlined init with take of PopoverPresentationDelegate.PopoverSource((uint64_t)v16, (uint64_t)&v18);
  self;
  id v7 = (void *)swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = v22;
    id v9 = a1;
    objc_msgSend(v7, sel_setPermittedArrowDirections_, v8);
  }
  uint64_t v10 = MEMORY[0x18C119DF0](&v19);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    objc_msgSend(a1, sel_setBarButtonItem_, v10);
  }
  else
  {
    uint64_t v12 = MEMORY[0x18C119DF0](v20);
    if (v12)
    {
      objc_msgSend(a1, sel_setSourceItem_, v12);
      swift_unknownObjectRelease();
    }
    else
    {
      objc_msgSend(a1, sel_setSourceView_, v18);
      if (v21) {
        goto LABEL_17;
      }
      objc_msgSend(a1, sel_setSourceRect_, v20[1], v20[2], v20[3], v20[4]);
      if (!v7) {
        goto LABEL_12;
      }
      if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI27PopoverPresentationDelegate_isLayoutPreventionActive))
      {
LABEL_17:
        outlined destroy of PopoverPresentationDelegate.PopoverSource(&v18);

        return;
      }
      id v13 = v7;
      id v14 = objc_msgSend(v13, sel_containerView);
      objc_msgSend(v14, sel_setNeedsLayout);

      id v15 = objc_msgSend(v13, sel_containerView);
      if (!v15)
      {
        outlined destroy of PopoverPresentationDelegate.PopoverSource(&v18);

        return;
      }
      id v7 = v15;
      objc_msgSend(v15, sel_layoutIfNeeded);
    }
  }

LABEL_12:
  outlined destroy of PopoverPresentationDelegate.PopoverSource(&v18);
}

void specialized UIKitInspectorV3Bridge.preparePopover(presented:anchor:environment:presentationOptions:arrowEdges:wantsTransparentBackground:)(char *a1, uint64_t *a2, uint64_t *a3, __int16 a4, char a5)
{
  id v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = direct field offset for UIHostingController.host;
  uint64_t v11 = *(void **)&a1[direct field offset for UIHostingController.host];
  uint64_t v12 = *(void *)((char *)v11 + *(void *)((*v11 & *MEMORY[0x1E4FBC8C8]) + 0x68));
  uint64_t v13 = *(void *)(v12 + 152);
  *(void *)(v12 + 152) = *a2;
  *(void *)(v12 + 160) = v9;
  swift_retain();
  id v14 = v11;
  swift_retain();
  outlined consume of EnvironmentValues?(v13);
  if (MEMORY[0x18C119DF0](v12 + 24))
  {
    swift_getObjectType();
    LOWORD(v33) = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_unknownObjectRelease();
  }
  else
  {
  }
  if (*(unsigned char *)(*(void *)&a1[v10] + *(void *)((*v7 & **(void **)&a1[v10]) + 0xD8)) == 2)
  {
    uint64_t v33 = v8;
    uint64_t v34 = v9;
    EnvironmentValues.explicitPreferredColorScheme.getter();
    if (v35 != 2)
    {
      id v15 = *(void **)&a1[v10];
      uint64_t v16 = *(void *)((*v7 & *v15) + 0xD8);
      uint64_t v17 = *((unsigned __int8 *)v15 + v16);
      *((unsigned char *)v15 + v16) = v35;
      id v18 = a1;
      uint64_t v19 = v15;
      specialized _UIHostingView.didChangeColorScheme(from:)(v17);
    }
  }
  specialized PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)(7, (uint64_t)a3);
  specialized PresentationHostingController.setBackgroundTransparency(preferenceValue:)(a5 & 1);
  specialized PresentationHostingController.updateSheet(with:)(a3);
  id v20 = objc_msgSend(a1, sel_presentationController);
  if (v20)
  {
    char v21 = v20;
    self;
    uint64_t v22 = swift_dynamicCastObjCClass();
    if (v22)
    {
      uint64_t v23 = (void *)v22;
      id v24 = v21;
      id v25 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
      objc_msgSend(v23, sel_setDelegate_, v25);
    }
    id v26 = UIKitInspectorV3Bridge.popoverPresentationDelegate.getter();
    specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v21);
  }
  id v27 = objc_msgSend(a1, sel_popoverPresentationController);
  if (v27)
  {
    id v31 = v27;
    if (*(unsigned char *)(v32 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections + 8) == 1)
    {
      uint64_t v33 = v8;
      uint64_t v34 = v9;
      EnvironmentValues.layoutDirection.getter();
      LOBYTE(v33) = v35;
      uint64_t v28 = specialized UIPopoverArrowDirection.init(edges:layoutDirection:)(a4 & 0x1FF, (char *)&v33);
      id v27 = v31;
    }
    else
    {
      uint64_t v28 = *(void *)(v32 + direct field offset for UIKitInspectorV3Bridge.overrideArrowDirections);
    }
    objc_msgSend(v27, sel_setPermittedArrowDirections_, v28);
  }
}

BOOL specialized UIKitInspectorV3Bridge.sourceViewVisibleInScrollView(anchor:transform:percentVisibilityRequired:)(double a1, uint64_t a2, double *a3)
{
  _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)v22 - v6;
  uint64_t v8 = *(void *)a3;
  uint64_t v9 = *((void *)a3 + 1);
  double v10 = a3[2];
  double v11 = a3[3];
  uint64_t v12 = *((void *)a3 + 4);
  *(double *)&long long v26 = *a3;
  *((void *)&v26 + 1) = v9;
  *(double *)&long long v27 = v10;
  *((double *)&v27 + 1) = v11;
  uint64_t v28 = v12;
  _sSo6CGRectVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, type metadata accessor for CGRect);
  Anchor.convert(to:)();
  if (v25)
  {
    static Log.presentation.getter();
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, v13) == 1)
    {
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
    }
    else
    {
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        char v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v21 = 0;
        _os_log_impl(&dword_1872C6000, v19, v20, "Couldn't find popover source view size. Not going to compute whether\nto dismiss.", v21, 2u);
        MEMORY[0x18C119C60](v21, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v14 + 8))(v7, v13);
    }
    return 1;
  }
  else
  {
    double v16 = v23;
    double v15 = v24;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    double v32 = v23;
    double v33 = v24;
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    char v29 = 2;
    v22[1] = v8;
    v22[2] = v9;
    double v23 = v10;
    double v24 = v11;
    uint64_t v25 = v12;
    CGRect.convertAndClipToScrollView(to:transform:)();
    outlined destroy of CoordinateSpace((uint64_t)&v26);
    double v17 = v32 / v16;
    if (v32 / v16 >= v33 / v15) {
      double v17 = v33 / v15;
    }
    return v17 >= a1;
  }
}

BOOL specialized UIKitInspectorV3Bridge.popoverCanPresent(popover:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 96);
  if (*(unsigned char *)(a1 + 117) == 1)
  {
    uint64_t v14 = a3;
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGACyxGAA0dE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    if (v8)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (!v15) {
      return 0;
    }
    SearchEnvironmentStorage.properties.getter((uint64_t)v7);
    swift_release();
    outlined init with copy of PresentationSizing?((uint64_t)&v7[*(int *)(v5 + 28)], (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>?, (void (*)(uint64_t))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1((uint64_t)v7, type metadata accessor for SearchEnvironmentProperties);
    if (!*(void *)&v17[1])
    {
      outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Binding<PlatformSearchPopoverAnchor?>?, (void (*)(uint64_t))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
      return 0;
    }
    type metadata accessor for Binding<PlatformSearchPopoverAnchor?>();
    MEMORY[0x18C113DA0](&v15);
    if (v16 == 1)
    {
      outlined destroy of PopoverPresentation?((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?, (uint64_t)&type metadata for PlatformSearchPopoverAnchor, MEMORY[0x1E4FBB718]);
      _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
      return 0;
    }
    uint64_t v9 = (void *)MEMORY[0x18C119DF0](&v15);
    outlined destroy of PopoverPresentation?((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for PlatformSearchPopoverAnchor?, (uint64_t)&type metadata for PlatformSearchPopoverAnchor, MEMORY[0x1E4FBB718]);
    _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    if (!v9) {
      return 0;
    }
  }
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, MEMORY[0x1E4F40930]);
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGACyxGAA0dE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView);
  swift_retain_n();
  if (v8)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((LOBYTE(v17[0]) & 1) != 0 && (*(unsigned char *)(a1 + 116) & 1) == 0)
  {
    int v11 = *(_DWORD *)(a1 + 112);
    uint64_t v12 = *(void *)(a1 + 104);
    AGGraphClearUpdate();
    uint64_t v15 = v12;
    int v16 = v11;
    AnchorGeometry.transform.getter();
    AGGraphSetUpdate();
    BOOL v10 = specialized UIKitInspectorV3Bridge.sourceViewVisibleInScrollView(anchor:transform:percentVisibilityRequired:)(0.5, *(void *)(a1 + 16), v17);
    swift_release();
  }
  else
  {
    return 1;
  }
  return v10;
}

uint64_t specialized UIKitInspectorV3Bridge.hostingView<A>(_:willUpdate:)()
{
  _UIHostingView.colorScheme.getter(&v1);
  return EnvironmentValues.explicitPreferredColorScheme.setter();
}

uint64_t specialized UIKitInspectorV3Bridge.popoverShouldAdapt(for:)()
{
  char v1 = (void *)MEMORY[0x18C119DF0](v0 + direct field offset for UIKitInspectorV3Bridge.host);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_traitCollection);

    id v4 = objc_msgSend(v3, sel_userInterfaceIdiom);
    if (v4 == (id)6) {
      return 0;
    }
  }
  uint64_t v5 = v0 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v6 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v5, v6);
  if (v10 - 2 < 2) {
    return 0;
  }
  if (!v10) {
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return 1;
}

uint64_t partial apply for closure #1 in UIKitInspectorV3Bridge.popoverSource(for:)()
{
  return closure #1 in UIKitInspectorV3Bridge.popoverSource(for:)(*(void *)(v0 + 16));
}

uint64_t outlined init with copy of PresentationSizing?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _sSo6CGRectVSgMaTm_2(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t specialized UIKitInspectorV3Bridge.didDismissViewController(_:wasPreempted:modifierRemoved:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for UIKitInspectorV3Bridge.PresentationKind();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v6 + 16);
  v7(v21, v4, v5);
  char v8 = UIKitInspectorV3Bridge.PresentationKind.isInspector.getter(v5);
  uint64_t v9 = *(uint64_t (**)(_OWORD *, uint64_t))(v6 + 8);
  uint64_t result = v9(v21, v5);
  if (v8)
  {
    v7(v24, v4, v5);
    Swift::UInt32 v11 = UIKitInspectorV3Bridge.PresentationKind.viewID.getter(v5);
    v9(v24, v5);
    uint64_t v12 = (uint64_t *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
    swift_beginAccess();
    uint64_t v13 = *v12;
    if (*(void *)(v13 + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v15 & 1) != 0))
    {
      outlined init with copy of InspectorStorage(*(void *)(v13 + 56) + 120 * v14, (uint64_t)v21);
      if (*((void *)&v21[0] + 1) >= 2uLL)
      {
        outlined copy of Binding<NavigationSplitViewColumn>?(*(uint64_t *)&v21[0], *((uint64_t *)&v21[0] + 1));
        swift_retain();
        swift_retain();
        outlined destroy of PopoverPresentation?((uint64_t)v21, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
        swift_endAccess();
        swift_release();
        swift_release();
        char v23 = 0;
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        goto LABEL_14;
      }
    }
    else
    {
      v21[0] = xmmword_18834BB90;
      memset(&v21[1], 0, 96);
      uint64_t v22 = 0;
    }
    outlined destroy of PopoverPresentation?((uint64_t)v21, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
    swift_endAccess();
    return UIKitInspectorV3Bridge.reset()();
  }
  if (a1)
  {
    uint64_t result = static SemanticFeature.isEnabled.getter();
    if (result) {
      return UIKitInspectorV3Bridge.reset()();
    }
  }
  int v16 = *(unsigned __int8 *)(v2 + direct field offset for UIKitInspectorV3Bridge.dismissingReason);
  if (v16 == 2 || (v16 & 1) != 0)
  {
    id v18 = (void *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastPopoverPresentation);
    swift_beginAccess();
    if (!*v18) {
      return UIKitInspectorV3Bridge.reset()();
    }
    uint64_t v19 = (void (*)(uint64_t))v18[3];
    uint64_t v20 = swift_retain();
    v19(v20);
LABEL_14:
    swift_release();
    return UIKitInspectorV3Bridge.reset()();
  }
  return result;
}

void partial apply for closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(unsigned __int8 *a1)
{
  closure #1 in UIKitInspectorV3Bridge.hostingView<A>(_:didChangePreferences:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined init with take of PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  long long v4 = *(_OWORD *)(a1 + 24);
  long long v5 = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(a2 + 56) = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  return a2;
}

id *outlined destroy of PopoverPresentationDelegate.PopoverSource(id *a1)
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  return a1;
}

void specialized PopoverPresentationDelegate.presentationControllerDidAttemptToDismiss(_:)(void *a1)
{
  id v5 = objc_msgSend(a1, sel_presentedViewController);
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    id v2 = *(id *)(v1 + direct field offset for UIHostingController.host);
    id v3 = (char *)specialized _UIHostingView.sheetBridge.getter();

    if (v3)
    {
      long long v4 = *(void (**)(void))&v3[direct field offset for SheetBridge.interactiveDismissHandler];
      outlined copy of AppIntentExecutor?((uint64_t)v4);

      if (v4)
      {
        v4();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v4);
      }
    }
  }
}

uint64_t sub_187FD4A3C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187FD4A74()
{
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 120)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 184))
  {
    swift_release();
    swift_release();
  }
  uint64_t v1 = *(void **)(v0 + 216);
  if ((unint64_t)v1 >= 3) {

  }
  if (*(void *)(v0 + 288)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 264);
  }

  return swift_deallocObject();
}

void partial apply for closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)()
{
  closure #2 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)(*(void *)(v0 + 32), *(char **)(v0 + 40), (uint64_t *)(v0 + 48), (uint64_t *)(v0 + 168), *(unsigned char *)(v0 + 305), *(void **)(v0 + 312));
}

uint64_t sub_187FD4B50()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s7SwiftUI19PopoverPresentationVSgWOdTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for PopoverPresentation?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_187FD4C08()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)()
{
  return closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_187FD4C50()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PresentationDetent.uiSheetDetent.getter(uint64_t a1)
{
  return closure #3 in PresentationDetent.uiSheetDetent.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_187FD4C68()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in PresentationDetent.uiSheetDetent.getter()
{
}

uint64_t sub_187FD4C80()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in PresentationDetent.uiSheetDetent.getter(void *a1)
{
  return closure #1 in PresentationDetent.uiSheetDetent.getter(a1, *(double *)(v1 + 16));
}

uint64_t partial apply for closure #1 in PresentationHostingController.configureDetents(of:using:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in PresentationHostingController.configureDetents(of:using:)(a1, a2);
}

uint64_t sub_187FD4CB8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in OscillationDetector.enqueueDecay(at:)()
{
  return specialized closure #1 in OscillationDetector.enqueueDecay(at:)();
}

uint64_t sub_187FD4D0C()
{
  return swift_deallocObject();
}

uint64_t sub_187FD4D48()
{
  return swift_deallocObject();
}

uint64_t sub_187FD4D58()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)()
{
  specialized closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(v0[2], v0[3], v0[4]);
}

uint64_t outlined destroy of SheetSizing(uint64_t a1)
{
  return a1;
}

void specialized closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (char *)v6;
    char v8 = (void *)(v6 + direct field offset for PresentationHostingController.lastPresentationOptions);
    swift_beginAccess();
    if (*v8)
    {
      outlined init with copy of PresentationOptionsPreference((uint64_t)v8, (uint64_t)v40);
      if (static SemanticFeature.isEnabled.getter())
      {
        outlined init with copy of PresentationSizing?((uint64_t)&v48, (uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
        if (v34)
        {
          outlined init with take of OptionalBinaryInteger(&v33, (uint64_t)&aBlock);
        }
        else
        {
          *((void *)&v36 + 1) = &type metadata for AutomaticPresentationSizing;
          id v37 = (uint64_t (*)())&protocol witness table for AutomaticPresentationSizing;
          outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
        }
      }
      else
      {
        id v37 = 0;
        long long aBlock = 0u;
        long long v36 = 0u;
      }
      outlined destroy of PresentationOptionsPreference((uint64_t)v40);
      if (*((void *)&v36 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&aBlock, (uint64_t)v52);
        id v9 = objc_msgSend(v7, sel_presentingViewController);
        if (!v9)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);

          return;
        }
        id v10 = v9;
        id v11 = objc_msgSend(v10, sel_presentingViewController);
        uint64_t v12 = v10;
        if (v11)
        {
          uint64_t v13 = v10;
          do
          {
            uint64_t v12 = v11;

            id v11 = objc_msgSend(v12, sel_presentingViewController);
            uint64_t v13 = v12;
          }
          while (v11);
        }
        id v14 = objc_msgSend(v12, sel_parentViewController);
        if (v14)
        {
          do
          {
            char v15 = v14;

            id v14 = objc_msgSend(v15, sel_parentViewController);
            uint64_t v12 = v15;
          }
          while (v14);
        }
        else
        {
          char v15 = v12;
        }
        id v16 = objc_msgSend(v15, sel_view);

        if (v16)
        {
          uint64_t v17 = *(void *)&v7[direct field offset for PresentationHostingController.lastColumnCount];
          _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
          v39.receiver = v7;
          v39.super_class = v18;
          objc_msgSendSuper2(&v39, sel_preferredContentSize);
          uint64_t v20 = v19;
          uint64_t v22 = v21;
          outlined init with copy of TableColumnList((uint64_t)v52, (uint64_t)v40);
          id v41 = v16;
          uint64_t v42 = v17;
          uint64_t v43 = v20;
          uint64_t v44 = v22;
          char v45 = 0;
          uint64_t v46 = 0;
          char v47 = 1;
          uint64_t v48 = 0;
          char v49 = 1;
          uint64_t v50 = a2;
          uint64_t v51 = a3;
          *((void *)&aBlock + 1) = lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
          swift_unknownObjectWeakInit();
          id v23 = v16;
          specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&aBlock);
          uint64_t v25 = v24;
          uint64_t v27 = v26;
          outlined destroy of weak FallbackResponderProvider?((uint64_t)&aBlock);
          uint64_t v28 = self;
          char v29 = (void *)swift_allocObject();
          v29[2] = v7;
          v29[3] = v25;
          _OWORD v29[4] = v27;
          uint64_t v30 = swift_allocObject();
          *(void *)(v30 + 16) = partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter;
          *(void *)(v30 + 24) = v29;
          id v37 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
          uint64_t v38 = v30;
          *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v36 = thunk for @escaping @callee_guaranteed () -> ();
          *((void *)&v36 + 1) = &block_descriptor_61_1;
          uint64_t v31 = _Block_copy(&aBlock);
          double v32 = v7;
          swift_retain();
          swift_release();
          objc_msgSend((id)v28, sel_performWithoutAnimation_, v31);
          _Block_release(v31);
          LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();

          swift_release();
          swift_release();
          if ((v28 & 1) == 0)
          {
            outlined destroy of SheetSizing((uint64_t)v40);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
            return;
          }
          __break(1u);
        }
        __break(1u);
        return;
      }
    }
    else
    {
      id v37 = 0;
      long long aBlock = 0u;
      long long v36 = 0u;
    }

    outlined destroy of Binding<PlatformSearchPopoverAnchor?>?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing?, (void (*)(uint64_t))type metadata accessor for PresentationSizing);
  }
}

id partial apply for specialized closure #1 in PresentationHostingController.preferredContentSize.setter()
{
  uint64_t v1 = (void *)*((void *)v0 + 2);
  double v2 = v0[3];
  double v3 = v0[4];
  _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(0, &lazy cache variable for type metadata for PresentationHostingController<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PresentationHostingController);
  v6.receiver = v1;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, sel_setPreferredContentSize_, v2, v3);
}

uint64_t sub_187FD5334()
{
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in UIHostingController.sizingOptionsDidChange(from:)(double *a1, uint64_t a2)
{
  specialized closure #1 in UIHostingController.sizingOptionsDidChange(from:)(a1, a2, v2);
}

id partial apply for specialized closure #1 in UIHostingController.idealSizeDidChange(from:to:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setPreferredContentSize_, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t partial apply for closure #1 in SceneBridge.updateMaximumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  return closure #1 in SceneBridge.updateMaximumSizeObserver(added:viewGraph:)(a1, a2);
}

uint64_t partial apply for closure #1 in SceneBridge.updateMinimumSizeObserver(added:viewGraph:)(uint64_t a1, double *a2)
{
  return closure #1 in SceneBridge.updateMinimumSizeObserver(added:viewGraph:)(a1, a2);
}

uint64_t sub_187FD5370()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)()
{
  return specialized closure #1 in PresentationHostingController.prepareModalPresentationStyle(_:presentationOptions:)();
}

uint64_t partial apply for closure #1 in UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = outlined init with copy of AnyHashable(a1, a2);
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

uint64_t _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGACyxGAA0dE0AAWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void partial apply for closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)()
{
  closure #1 in UIKitInspectorV3Bridge.dismissAndReset(viewController:)(*(void *)(v0 + 32));
}

void type metadata accessor for NSObject?()
{
  if (!lazy cache variable for type metadata for NSObject?)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NSObject?);
    }
  }
}

uint64_t sub_187FD54A8()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_7;
    }
    swift_release();
    swift_release();
  }
  if (*(void *)(v0 + 88)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
LABEL_7:

  return swift_deallocObject();
}

uint64_t outlined init with take of InspectorStorage?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PopoverPresentation?(0, &lazy cache variable for type metadata for InspectorStorage?, (uint64_t)&type metadata for InspectorStorage, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Binding<PlatformSearchPopoverAnchor?>?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _sSo6CGRectVSgMaTm_2(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_187FD560C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in UIKitInspectorV3Bridge.updateAnchor()()
{
  closure #2 in UIKitInspectorV3Bridge.updateAnchor()(*(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_187FD5658()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 112)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitInspectorV3Bridge.updateAnchor()()
{
  closure #1 in UIKitInspectorV3Bridge.updateAnchor()(*(void *)(v0 + 32), v0 + 40, *(void **)(v0 + 160));
}

void _s7SwiftUI22EnvironmentPropertyKeyVyAA0C6ValuesV02__E14_searchStorage33_01524358DA8FEB8BCC0A94C08F00494ALLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t destroy for PopoverPresentationDelegate.PopoverSource(id *a1)
{
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v5 = v4;
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v8 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t initializeWithTake for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for PopoverPresentationDelegate.PopoverSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  swift_unknownObjectWeakTakeAssign();
  swift_unknownObjectWeakTakeAssign();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for PopoverPresentationDelegate.PopoverSource()
{
  return &type metadata for PopoverPresentationDelegate.PopoverSource;
}

uint64_t partial apply for closure #1 in UIKitInspectorV3Bridge.replaceExistingPopover(_:with:presenter:presentationOptions:wantsTransparentBackground:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in UIKitInspectorV3Bridge.presentNewPopover(presentation:presenter:options:wantsTransparentBackground:)(a1, a2);
}

double static EventModifiersGesture._makeGesture(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[5];
  long long v6 = a2[3];
  long long v41 = a2[4];
  long long v42 = v5;
  long long v7 = a2[5];
  v43[0] = a2[6];
  *(_OWORD *)((char *)v43 + 12) = *(long long *)((char *)a2 + 108);
  long long v8 = a2[1];
  long long v37 = *a2;
  long long v38 = v8;
  long long v9 = a2[3];
  long long v11 = *a2;
  long long v10 = a2[1];
  long long v39 = a2[2];
  long long v40 = v9;
  long long v12 = a2[6];
  long long v35 = v7;
  v36[0] = v12;
  *(_OWORD *)((char *)v36 + 12) = *(long long *)((char *)a2 + 108);
  long long v30 = v11;
  long long v31 = v10;
  long long v32 = v39;
  int v13 = *a1;
  long long v33 = v6;
  long long v34 = v41;
  a3(&v24, &v30);
  LODWORD(v30) = v13;
  type metadata accessor for EventModifiersGesture();
  type metadata accessor for _GraphValue();
  unsigned int v14 = _GraphValue.value.getter();
  long long v35 = v42;
  v36[0] = v43[0];
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v43 + 12);
  long long v30 = v37;
  long long v31 = v38;
  long long v32 = v39;
  long long v33 = v40;
  long long v34 = v41;
  unsigned int v15 = _GestureInputs.events.getter();
  long long v35 = v42;
  v36[0] = v43[0];
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v43 + 12);
  long long v30 = v37;
  long long v31 = v38;
  long long v32 = v39;
  long long v33 = v40;
  long long v34 = v41;
  unsigned int v16 = _GestureInputs.resetSeed.getter();
  long long v30 = v24;
  LODWORD(v31) = v25;
  type metadata accessor for _GestureOutputs();
  unsigned int v17 = _GestureOutputs.phase.getter();
  *(void *)&long long v30 = __PAIR64__(v15, v14);
  *((void *)&v30 + 1) = __PAIR64__(v17, v16);
  LODWORD(v31) = 0;
  BYTE4(v31) = 0;
  uint64_t v27 = type metadata accessor for GesturePhase();
  uint64_t v18 = type metadata accessor for EventModifiersGesturePhase();
  uint64_t v28 = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v30, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v26, v18, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
  _GestureOutputs.phase.setter();
  uint64_t v21 = *((void *)&v24 + 1);
  int v22 = v25;
  double result = *(double *)&v24;
  *(void *)a4 = v24;
  *(void *)(a4 + 8) = v21;
  *(_DWORD *)(a4 + 16) = v22;
  return result;
}

uint64_t EventModifiersGesturePhase.phase.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance EventModifiersGesture<A>@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  return static EventModifiersGesture._makeGesture(modifier:inputs:body:)(a1, a2, a3, a4);
}

void EventModifiersGesturePhase.resetPhase()()
{
  *(unsigned char *)(v0 + 20) = 0;
}

uint64_t EventModifiersGesturePhase.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for GesturePhase();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v34 - v9;
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    if ((*(unsigned char *)(v1 + 20) & 1) != 0
      || (EventModifiersGesturePhase.phase.getter((uint64_t)v10), swift_getEnumCaseMultiPayload() > 2))
    {
LABEL_29:
      uint64_t v30 = EventModifiersGesturePhase.phase.getter((uint64_t)v7);
      MEMORY[0x1F4188790](v30);
      *(&v34 - 2) = a1;
      *(&v34 - 1) = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v34 - 4), v4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v31);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    else
    {
      uint64_t v34 = v5;
      long long v12 = *(void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v36 = v5 + 8;
      long long v35 = v12;
      v12(v10, v4);
      type metadata accessor for EventModifiersGesture();
      uint64_t v39 = *(void *)AGGraphGetValue();
      type metadata accessor for [EventID : EventType]();
      uint64_t v13 = *(void *)AGGraphGetValue();
      uint64_t v14 = *(void *)(v13 + 64);
      uint64_t v37 = v13 + 64;
      uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
      uint64_t v16 = -1;
      if (v15 < 64) {
        uint64_t v16 = ~(-1 << v15);
      }
      unint64_t v17 = v16 & v14;
      int64_t v38 = (unint64_t)(v15 + 63) >> 6;
      uint64_t v40 = v13;
      swift_bridgeObjectRetain();
      int64_t v18 = 0;
      if (!v17) {
        goto LABEL_8;
      }
LABEL_7:
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
      {
        outlined init with copy of TableColumnList(*(void *)(v40 + 56) + 40 * i, (uint64_t)&v50);
        outlined init with take of OptionalBinaryInteger(&v50, (uint64_t)v47);
        uint64_t v24 = v48;
        uint64_t v25 = v49;
        __swift_project_boxed_opaque_existential_1(v47, v48);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v25 + 8))(v44, v24, v25);
        if (LOBYTE(v44[0])) {
          goto LABEL_31;
        }
        outlined init with copy of TableColumnList((uint64_t)v47, (uint64_t)v43);
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for EventType);
        type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for ModifiersEventType);
        if ((swift_dynamicCast() & 1) == 0) {
          break;
        }
        outlined init with take of OptionalBinaryInteger(v41, (uint64_t)v44);
        uint64_t v26 = v45;
        uint64_t v27 = v46;
        __swift_project_boxed_opaque_existential_1(v44, v45);
        uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(v26, v27);
        uint64_t v29 = v39 & ~v28;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
        if (v29) {
          goto LABEL_31;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        if (v17) {
          goto LABEL_7;
        }
LABEL_8:
        int64_t v21 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
          goto LABEL_35;
        }
        if (v21 >= v38) {
          goto LABEL_33;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v21);
        ++v18;
        if (!v22)
        {
          int64_t v18 = v21 + 1;
          if (v21 + 1 >= v38) {
            goto LABEL_33;
          }
          unint64_t v22 = *(void *)(v37 + 8 * v18);
          if (!v22)
          {
            int64_t v18 = v21 + 2;
            if (v21 + 2 >= v38) {
              goto LABEL_33;
            }
            unint64_t v22 = *(void *)(v37 + 8 * v18);
            if (!v22)
            {
              int64_t v18 = v21 + 3;
              if (v21 + 3 >= v38) {
                goto LABEL_33;
              }
              unint64_t v22 = *(void *)(v37 + 8 * v18);
              if (!v22)
              {
                int64_t v23 = v21 + 4;
                if (v23 >= v38)
                {
LABEL_33:
                  swift_release();
                  *(unsigned char *)(v2 + 20) = 1;
                  uint64_t v5 = v34;
                  goto LABEL_29;
                }
                unint64_t v22 = *(void *)(v37 + 8 * v23);
                if (!v22)
                {
                  while (1)
                  {
                    int64_t v18 = v23 + 1;
                    if (__OFADD__(v23, 1)) {
                      break;
                    }
                    if (v18 >= v38) {
                      goto LABEL_33;
                    }
                    unint64_t v22 = *(void *)(v37 + 8 * v18);
                    ++v23;
                    if (v22) {
                      goto LABEL_23;
                    }
                  }
LABEL_35:
                  __break(1u);
                }
                int64_t v18 = v23;
              }
            }
          }
        }
LABEL_23:
        unint64_t v17 = (v22 - 1) & v22;
      }
      uint64_t v42 = 0;
      memset(v41, 0, sizeof(v41));
      outlined destroy of ModifiersEventType?((uint64_t)v41);
LABEL_31:
      uint64_t v32 = swift_storeEnumTagMultiPayload();
      MEMORY[0x1F4188790](v32);
      *(&v34 - 2) = a1;
      *(&v34 - 1) = swift_getWitnessTable();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)(&v34 - 4), v4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v33);
      v35(v7, v4);
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    }
  }
  return result;
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance EventModifiersGesturePhase<A>()
{
  return MEMORY[0x1F40FFCE8]();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance EventModifiersGesturePhase<A>()
{
  return SequencePhase.resetSeed.getter();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance EventModifiersGesturePhase<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for GesturePhase();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void Gesture.modifiers(_:)()
{
}

void static _ModifiersGesture._makeGesture(gesture:inputs:)()
{
}

uint64_t base witness table accessor for Gesture in _ModifiersGesture<A>()
{
  return swift_getWitnessTable();
}

void protocol witness for Gesture.body.getter in conformance _ModifiersGesture<A>()
{
}

uint64_t type metadata completion function for _ModifiersGesture()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for EventModifiersGesture();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for ModifierGesture();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for _ModifiersGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _ModifiersGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ModifiersGesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187FD6748);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _ModifiersGesture(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187FD6908);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for _ModifiersGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EventModifiersGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EventModifiersGesturePhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for EventModifiersGesturePhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EventModifiersGesturePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 21) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 21) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = a2 + 1;
    }
  }
  return result;
}

uint64_t base witness table accessor for StatefulRule in EventModifiersGesturePhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in EventModifiersGesturePhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of ModifiersEventType?(uint64_t a1)
{
  type metadata accessor for ModifiersEventType?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ModifiersEventType?()
{
  if (!lazy cache variable for type metadata for ModifiersEventType?)
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for ModifiersEventType);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiersEventType?);
    }
  }
}

uint64_t closure #1 in StatefulRule.value.setterpartial apply()
{
  return partial apply for closure #1 in StatefulRule.value.setter();
}

uint64_t closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = UISceneSession.matchesSceneID(_:)(v16, v18, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a5, a6);
  if (v19) {
    char v20 = UISceneSession.matchesPresentationValue<A>(_:)(v15, a6, a7, a8, a9);
  }
  else {
    char v20 = 0;
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, a6);
  return v20 & 1;
}

uint64_t UISceneSession.matchesSceneID(_:)(uint64_t a1, uint64_t a2, char a3)
{
  id v7 = objc_msgSend(v3, sel_userInfo);
  if (!v7)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    goto LABEL_13;
  }
  size_t v8 = v7;
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v9 + 16)
    || (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000019, 0x8000000188325FA0), (v11 & 1) == 0))
  {
    long long v21 = 0u;
    long long v22 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v10, (uint64_t)&v21);
  swift_bridgeObjectRelease();
  if (!*((void *)&v22 + 1))
  {
LABEL_13:
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v21, (unint64_t *)&lazy cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  if (swift_dynamicCast())
  {
    uint64_t v13 = v19;
    uint64_t v12 = v20;
    if (a3) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t v13 = 0;
  uint64_t v12 = 0;
  if (a3)
  {
LABEL_7:
    *(void *)&long long v21 = _typeName(_:qualified:)();
    *((void *)&v21 + 1) = v14;
    v15._countAndFlagsBits = 45;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    a2 = *((void *)&v21 + 1);
    a1 = v21;
    if (v12) {
      goto LABEL_8;
    }
LABEL_16:
    char v17 = 0;
    goto LABEL_19;
  }
LABEL_15:
  outlined copy of SceneID(a1, a2, 0);
  if (!v12) {
    goto LABEL_16;
  }
LABEL_8:
  if (v13 == a1 && v12 == a2) {
    char v17 = 1;
  }
  else {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  return v17 & 1;
}

uint64_t UISceneSession.matchesPresentationValue<A>(_:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v49 = a5;
  long long v50 = a1;
  uint64_t v53 = a3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v46 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v51 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  Swift::String v16 = (char *)&v46 - v15;
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v46 - v19;
  id v21 = objc_msgSend(v6, sel_userInfo, v18);
  if (!v21)
  {
    long long v56 = 0u;
    long long v57 = 0u;
    goto LABEL_13;
  }
  long long v22 = v21;
  uint64_t v48 = v11;
  uint64_t v23 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v23 + 16)) {
    goto LABEL_10;
  }
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x800000018832B230);
  if ((v25 & 1) == 0) {
    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(v23 + 56) + 32 * v24, (uint64_t)&v56);
  swift_bridgeObjectRelease();
  if (!*((void *)&v57 + 1))
  {
LABEL_13:
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v56, (unint64_t *)&lazy cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v26 = *((void *)&v54 + 1);
  uint64_t v47 = v54;
  id v27 = objc_msgSend(v6, sel_userInfo);
  if (!v27)
  {
LABEL_10:
    long long v56 = 0u;
    long long v57 = 0u;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v28 = v27;
  uint64_t v29 = v26;
  uint64_t v30 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v30 + 16)
    && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001CLL, 0x800000018832B210), (v32 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v30 + 56) + 32 * v31, (uint64_t)&v56);
  }
  else
  {
    long long v56 = 0u;
    long long v57 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v57 + 1)) {
    goto LABEL_11;
  }
  if (swift_dynamicCast())
  {
    unint64_t v35 = *((void *)&v54 + 1);
    uint64_t v36 = v54;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v37 = v48;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v20, v10, a2);
    makeStableTypeData(_:)();
    long long v54 = v56;
    int v55 = v57;
    uint64_t v38 = StrongHash.description.getter();
    if (v38 == v47 && v39 == v29)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
      v40(v16, v20, a2);
      long long v41 = v51;
      v40(v51, v50, a2);
    }
    else
    {
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v43 = v35;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
      v44(v16, v20, a2);
      long long v41 = v51;
      v44(v51, v50, a2);
      unint64_t v35 = v43;
      char v33 = 0;
      if ((v42 & 1) == 0)
      {
LABEL_26:
        swift_release();
        outlined consume of Data._Representation(v36, v35);
        uint64_t v45 = *(void (**)(char *, uint64_t))(v48 + 8);
        v45(v41, a2);
        v45(v16, a2);
        v45(v20, a2);
        return v33 & 1;
      }
    }
    char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
LABEL_14:
  char v33 = 0;
  return v33 & 1;
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void one-time initialization function for userActivityTypeOpenWindowByID()
{
  _StringGuts.grow(_:)(17);
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (v1)
  {
    unint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v4 = v3;
  }
  else
  {
    id v4 = (void *)0x8000000188327A80;
    unint64_t v2 = 0xD000000000000011;
  }
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6E69576E65706F2ELL;
  v6._object = (void *)0xEF44497942776F64;
  String.append(_:)(v6);
  static NSUserActivity.userActivityTypeOpenWindowByID = 0;
  *(void *)algn_1E90FBC98 = 0xE000000000000000;
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = a1;
  char v6 = a4 & 1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
    lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v25;
    uint64_t v22 = v26;
    uint64_t v7 = v27;
    uint64_t v8 = v28;
    unint64_t v9 = v29;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    uint64_t v7 = v11;
  }
  int64_t v21 = (unint64_t)(v7 + 64) >> 6;
  while (v5 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_35;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v17 = v24;
    swift_unknownObjectRelease();
    uint64_t v16 = v8;
    uint64_t v14 = v9;
    if (!v24) {
      goto LABEL_35;
    }
LABEL_33:
    if (UISceneSession.matchesSceneID(_:)(a2, a3, v6))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
    }
    uint64_t v8 = v16;
    unint64_t v9 = v14;
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
    uint64_t v16 = v8;
LABEL_32:
    id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
    if (!v17) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  int64_t v18 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v18 >= v21) {
      goto LABEL_35;
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    uint64_t v16 = v8 + 1;
    if (!v19)
    {
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= v21) {
        goto LABEL_35;
      }
      unint64_t v19 = *(void *)(v22 + 8 * v16);
      if (!v19)
      {
        uint64_t v16 = v8 + 3;
        if (v8 + 3 >= v21) {
          goto LABEL_35;
        }
        unint64_t v19 = *(void *)(v22 + 8 * v16);
        if (!v19)
        {
          uint64_t v16 = v8 + 4;
          if (v8 + 4 >= v21) {
            goto LABEL_35;
          }
          unint64_t v19 = *(void *)(v22 + 8 * v16);
          if (!v19)
          {
            uint64_t v16 = v8 + 5;
            if (v8 + 5 >= v21) {
              goto LABEL_35;
            }
            unint64_t v19 = *(void *)(v22 + 8 * v16);
            if (!v19)
            {
              uint64_t v20 = v8 + 6;
              while (v21 != v20)
              {
                unint64_t v19 = *(void *)(v22 + 8 * v20++);
                if (v19)
                {
                  uint64_t v16 = v20 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              outlined consume of Set<UIPress>.Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v14 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

id specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:)(uint64_t a1, uint64_t a2, char a3)
{
  if (one-time initialization token for userActivityTypeOpenWindowByID != -1) {
    swift_once();
  }
  uint64_t v6 = static NSUserActivity.userActivityTypeOpenWindowByID;
  uint64_t v7 = *(void *)algn_1E90FBC98;
  id v8 = objc_allocWithZone(MEMORY[0x1E4F29230]);
  swift_bridgeObjectRetain();
  unint64_t v9 = (void *)MEMORY[0x18C115780](v6, v7);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v8, sel_initWithActivityType_, v9);

  *(void *)&long long v21 = 0xD000000000000019;
  *((void *)&v21 + 1) = 0x8000000188325FA0;
  uint64_t v11 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  if (a3)
  {
    *(void *)&long long v21 = _typeName(_:qualified:)();
    *((void *)&v21 + 1) = v12;
    v13._countAndFlagsBits = 45;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    LOBYTE(v20[0]) = a2;
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    a2 = *((void *)&v21 + 1);
    a1 = v21;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v22 = v11;
  *(void *)&long long v21 = a1;
  *((void *)&v21 + 1) = a2;
  outlined init with take of Any(&v21, v20);
  uint64_t v15 = MEMORY[0x1E4FBC868];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, (uint64_t)v23, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v23);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setUserInfo_, isa, v15);

  specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:));
  swift_arrayDestroy();
  Class v18 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setRequiredUserInfoKeys_, v18);

  objc_msgSend(v10, sel_setEligibleForHandoff_, 0);
  return v10;
}

id specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow<A>(id:value:)(uint64_t a1, uint64_t a2, char a3)
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v6 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v8 = v7;
  id v9 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:)(a1, a2, a3 & 1);
  AnyHashable.init<A>(_:)();
  uint64_t v20 = MEMORY[0x1E4F277C0];
  *(void *)&long long v19 = v6;
  *((void *)&v19 + 1) = v8;
  outlined copy of Data._Representation(v6, v8);
  id result = objc_msgSend(v9, sel_userInfo);
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  outlined init with take of Any(&v19, v18);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, (uint64_t)&v21, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)&v21);
  if (v12)
  {
    v14.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.Class isa = 0;
  }
  objc_msgSend(v9, sel_setUserInfo_, v14.super.isa);

  id result = objc_msgSend(v9, sel_requiredUserInfoKeys);
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v15 = result;
  uint64_t v16 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v19 = v16;
  specialized Set._Variant.insert(_:)(&v21, 0xD00000000000001CLL, 0x800000018832B210);
  swift_bridgeObjectRelease();
  if ((void)v19)
  {
    v17.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v17.super.Class isa = 0;
  }
  objc_msgSend(v9, sel_setRequiredUserInfoKeys_, v17.super.isa);
  outlined consume of Data._Representation(v6, v8);

  swift_release();
  return v9;
}

uint64_t specialized SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v16 = objc_msgSend(self, sel_sharedApplication);
  id v17 = objc_msgSend(v16, sel_openSessions);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
  lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
  uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v22[2] = a5;
  void v22[3] = a6;
  v22[4] = a7;
  v22[5] = a8;
  v22[6] = a1;
  v22[7] = a2;
  char v23 = a3 & 1;
  uint64_t v24 = a4;
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:), (uint64_t)v22, v18);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  return v20;
}

void specialized SceneNavigationStrategy_Phone.handleSceneActivation<A>(item:value:activationBehavior:completion:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a1 + 136);
  uint64_t v15 = *(void *)(a1 + 144);
  char v16 = *(unsigned char *)(a1 + 152);
  id v17 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow<A>(id:value:)(v14, v15, v16);
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v19 = (void *)specialized SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(v14, v15, v16, a2, a5, a6, a7, a8);
    _StringGuts.grow(_:)(20);
    void aBlock[6] = 0;
    aBlock[7] = 0xE000000000000000;
    v20._countAndFlagsBits = 0x27203A65707974;
    v20._object = (void *)0xE700000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x27203A6469202C27;
    v22._object = (void *)0xE800000000000000;
    String.append(_:)(v22);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 39;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    id v24 = objc_msgSend(self, sel_sharedApplication);
    aBlock[4] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    aBlock[3] = &block_descriptor_67;
    uint64_t v25 = _Block_copy(aBlock);
    objc_msgSend(v24, sel_requestSceneSessionActivation_userActivity_options_errorHandler_, v19, v18, 0, v25);
    _Block_release(v25);

    if (a3) {
      a3(2);
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    static os_log_type_t.fault.getter();
    uint64_t v26 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_18834BB80;
    uint64_t v28 = _typeName(_:qualified:)();
    uint64_t v30 = v29;
    *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v27 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v30;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    if (a3) {
      a3(0);
    }
  }
}

void specialized SceneNavigationStrategy_Phone.openWindow<A>(presenting:withBehavior:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v11 = objc_msgSend(v10, sel_supportsMultipleScenes);

  if (v11)
  {
    if (static AppGraph.shared)
    {
      swift_retain();
      static Update.ensure<A>(_:)();
      SceneList.windowGroup(presenting:)(a2, v27, __src);
      swift_release();
      swift_bridgeObjectRelease();
      if (*((void *)&__src[16] + 1))
      {
        memcpy(__dst, __src, 0x118uLL);
        outlined init with copy of SceneList.Item.Value((uint64_t)__dst, (uint64_t)__src);
        if (LOBYTE(__src[8]))
        {
          static os_log_type_t.fault.getter();
          uint64_t v12 = (void *)static Log.runtimeIssuesLog.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
          uint64_t v14 = _typeName(_:qualified:)();
          uint64_t v16 = v15;
          *(void *)(v13 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v13 + 32) = v14;
          *(void *)(v13 + 40) = v16;
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          outlined destroy of SceneList.Item((uint64_t)__dst);
          outlined destroy of SceneList.Item.Value((uint64_t)__src);
        }
        else
        {
          uint64_t v22 = *((void *)&__src[0] + 1);
          long long v23 = __src[1];
          uint64_t v24 = *(void *)&__src[2];
          long long v25 = __src[3];
          swift_release();
          outlined consume of Text?(v22, v23, SBYTE8(v23), v24);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
          specialized SceneNavigationStrategy_Phone.handleSceneActivation<A>(item:value:activationBehavior:completion:)((uint64_t)__dst, a1, 0, 0, (uint64_t)a2, a3, a4, a5);
          outlined destroy of SceneList.Item((uint64_t)__dst);
        }
        return;
      }
    }
    else
    {
      memset(__src, 0, 280);
    }
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    id v17 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
    uint64_t v19 = _typeName(_:qualified:)();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  static os_log_type_t.fault.getter();
  id v26 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();
}

uint64_t specialized SceneNavigationStrategy_Phone.requestNewScene(item:activationBehavior:completion:)(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 144);
  char v5 = *(unsigned char *)(a1 + 152);
  id v6 = specialized SceneNavigationStrategy_Phone.userActivityForOpeningWindow(id:)(v3, v4, v5);
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  v7._countAndFlagsBits = 0x27203A6469;
  v7._object = (void *)0xE500000000000000;
  String.append(_:)(v7);
  LOBYTE(v13) = v5;
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 39;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  id v9 = objc_msgSend(self, sel_sharedApplication, v3, v4, v13);
  uint64_t v15 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v16 = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  uint64_t v13 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v14 = &block_descriptor_7_1;
  id v10 = _Block_copy(v12);
  objc_msgSend(v9, sel_requestSceneSessionActivation_userActivity_options_errorHandler_, 0, v6, 0, v10);
  _Block_release(v10);

  if (a2) {
    a2(2);
  }

  return swift_bridgeObjectRelease();
}

void specialized SceneNavigationStrategy_Phone.openWindow(id:withBehavior:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v5 = objc_msgSend(v4, sel_supportsMultipleScenes);

  if (v5)
  {
    if (static AppGraph.shared)
    {
      swift_retain();
      static Update.ensure<A>(_:)();
      uint64_t v6 = *(void *)(__src[0] + 16);
      if (v6)
      {
        uint64_t v7 = __src[0] + 32;
        swift_bridgeObjectRetain_n();
        while (1)
        {
          outlined init with copy of SceneList.Item(v7, (uint64_t)__src);
          char v8 = __src[18];
          if (__src[19])
          {
            uint64_t v26 = _typeName(_:qualified:)();
            uint64_t v27 = v9;
            v10._countAndFlagsBits = 45;
            v10._object = (void *)0xE100000000000000;
            String.append(_:)(v10);
            v25[0] = v8;
            v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v11);
            swift_bridgeObjectRelease();
            if (v26 == a1 && v27 == a2)
            {
              swift_bridgeObjectRelease();
LABEL_17:
              outlined init with copy of SceneList.Item((uint64_t)__src, (uint64_t)&v26);
LABEL_19:
              outlined init with copy of SceneList.Item.Value((uint64_t)&v26, (uint64_t)v25);
              int v15 = v25[128];
              outlined destroy of SceneList.Item.Value((uint64_t)v25);
              outlined destroy of SceneList.Item((uint64_t)&v26);
              if (!v15)
              {
                swift_bridgeObjectRelease();
                memcpy(__dst, __src, 0x118uLL);
                goto LABEL_28;
              }
              goto LABEL_6;
            }
            char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            outlined init with copy of SceneList.Item((uint64_t)__src, (uint64_t)&v26);
            if (v14) {
              goto LABEL_19;
            }
          }
          else
          {
            if (__src[17] == a1 && __src[18] == a2) {
              goto LABEL_17;
            }
            char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
            outlined init with copy of SceneList.Item((uint64_t)__src, (uint64_t)&v26);
            if (v13) {
              goto LABEL_19;
            }
          }
          outlined destroy of SceneList.Item((uint64_t)&v26);
LABEL_6:
          outlined destroy of SceneList.Item((uint64_t)__src);
          v7 += 280;
          if (!--v6)
          {
            swift_bridgeObjectRelease();
            goto LABEL_27;
          }
        }
      }
      swift_bridgeObjectRetain();
LABEL_27:
      memset(__dst, 0, 280);
LABEL_28:
      swift_release();
      swift_bridgeObjectRelease_n();
      if (*((void *)&__dst[16] + 1))
      {
        memcpy(v30, __dst, 0x118uLL);
        outlined init with copy of SceneList.Item.Value((uint64_t)v30, (uint64_t)__dst);
        if (LOBYTE(__dst[8]))
        {
          static os_log_type_t.fault.getter();
          uint64_t v16 = (void *)static Log.runtimeIssuesLog.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_18834BB80;
          *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v17 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v17 + 32) = a1;
          *(void *)(v17 + 40) = a2;
          swift_bridgeObjectRetain();
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          outlined destroy of SceneList.Item((uint64_t)v30);
          outlined destroy of SceneList.Item.Value((uint64_t)__dst);
        }
        else
        {
          uint64_t v20 = *((void *)&__dst[0] + 1);
          long long v21 = __dst[1];
          uint64_t v22 = *(void *)&__dst[2];
          uint64_t v23 = *(void *)&__dst[3];
          swift_release();
          outlined consume of Text?(v20, v21, SBYTE8(v21), v22);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
          specialized SceneNavigationStrategy_Phone.requestNewScene(item:activationBehavior:completion:)((uint64_t)v30, 0);
          outlined destroy of SceneList.Item((uint64_t)v30);
        }
        return;
      }
    }
    else
    {
      memset(__dst, 0, 280);
    }
    outlined destroy of AccessibilityValueStorage?((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    unint64_t v18 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
    *(void *)(v19 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v19 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v19 + 32) = a1;
    *(void *)(v19 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  static os_log_type_t.fault.getter();
  id v24 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();
}

void specialized SceneNavigationStrategy_Phone.openWindow<A>(id:presenting:withBehavior:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v15 = objc_msgSend(v14, sel_supportsMultipleScenes);

  if (v15)
  {
    if (static AppGraph.shared)
    {
      swift_retain();
      static Update.ensure<A>(_:)();
      SceneList.windowGroup<A>(id:presenting:)(a1, a2, a4, v34, __src);
      swift_release();
      swift_bridgeObjectRelease();
      if (*((void *)&__src[16] + 1))
      {
        memcpy(__dst, __src, 0x118uLL);
        outlined init with copy of SceneList.Item.Value((uint64_t)__dst, (uint64_t)__src);
        if (LOBYTE(__src[8]))
        {
          static os_log_type_t.fault.getter();
          uint64_t v16 = (void *)static Log.runtimeIssuesLog.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_18834BB70;
          uint64_t v18 = _typeName(_:qualified:)();
          uint64_t v20 = v19;
          uint64_t v21 = MEMORY[0x1E4FBB1A0];
          *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
          unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v17 + 32) = v18;
          *(void *)(v17 + 40) = v20;
          *(void *)(v17 + 96) = v21;
          *(void *)(v17 + 104) = v22;
          *(void *)(v17 + 64) = v22;
          *(void *)(v17 + 72) = a1;
          *(void *)(v17 + 80) = a2;
          swift_bridgeObjectRetain();
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          outlined destroy of SceneList.Item((uint64_t)__dst);
          outlined destroy of SceneList.Item.Value((uint64_t)__src);
        }
        else
        {
          uint64_t v29 = *((void *)&__src[0] + 1);
          long long v30 = __src[1];
          uint64_t v31 = *(void *)&__src[2];
          long long v32 = __src[3];
          swift_release();
          outlined consume of Text?(v29, v30, SBYTE8(v30), v31);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v32);
          specialized SceneNavigationStrategy_Phone.handleSceneActivation<A>(item:value:activationBehavior:completion:)((uint64_t)__dst, a3, 0, 0, a4, a5, a6, a7);
          outlined destroy of SceneList.Item((uint64_t)__dst);
        }
        return;
      }
    }
    else
    {
      memset(__src, 0, 280);
    }
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_18834BB70;
    uint64_t v25 = MEMORY[0x1E4FBB1A0];
    *(void *)(v24 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v24 + 64) = v26;
    *(void *)(v24 + 32) = a1;
    *(void *)(v24 + 40) = a2;
    swift_bridgeObjectRetain();
    uint64_t v27 = _typeName(_:qualified:)();
    *(void *)(v24 + 96) = v25;
    *(void *)(v24 + 104) = v26;
    *(void *)(v24 + 72) = v27;
    *(void *)(v24 + 80) = v28;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  static os_log_type_t.fault.getter();
  id v33 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();
}

uint64_t specialized SceneNavigationStrategy_Phone.handleSceneDestruction(id:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = self;
  id v7 = objc_msgSend(v6, sel_sharedApplication);
  id v8 = objc_msgSend(v6, sel_sharedApplication);
  id v9 = objc_msgSend(v8, sel_openSessions);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
  lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
  uint64_t v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  LOBYTE(v9) = a3 & 1;
  outlined copy of SceneID(a1, a2, a3 & 1);
  specialized Sequence.filter(_:)(v10, a1, a2, a3 & 1);
  unint64_t v12 = v11;
  outlined consume of SceneID(a1, a2, (char)v9);
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v14 = objc_msgSend(v7, sel_openSessions);
  uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v15 & 0xC000000000000001) != 0) {
    uint64_t v16 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v16 = *(void *)(v15 + 16);
  }
  swift_bridgeObjectRelease();
  specialized BidirectionalCollection.dropLast(_:)(v13 == v16, v12, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  unint64_t v22 = v21;
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v24 = (v22 >> 1) - v20;
  if (v22 >> 1 != v20)
  {
    if ((uint64_t)(v22 >> 1) <= v20)
    {
      __break(1u);
      return result;
    }
    uint64_t v25 = (uint64_t *)(v18 + 8 * v20);
    do
    {
      uint64_t v26 = *v25++;
      objc_msgSend(v7, sel_requestSceneSessionDestruction_options_errorHandler_, v26, 0, 0);
      --v24;
    }
    while (v24);
  }

  return swift_unknownObjectRelease();
}

void specialized SceneNavigationStrategy_Phone.dismissWindow(id:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v5 = objc_msgSend(v4, sel_supportsMultipleScenes);

  if (v5)
  {
    if (static AppGraph.shared)
    {
      swift_retain();
      static Update.ensure<A>(_:)();
      uint64_t v6 = *(void *)(__src[0] + 16);
      if (!v6)
      {
        swift_bridgeObjectRetain();
LABEL_23:
        memset(__dst, 0, sizeof(__dst));
        goto LABEL_25;
      }
      uint64_t v7 = __src[0] + 32;
      swift_bridgeObjectRetain_n();
      while (1)
      {
        outlined init with copy of SceneList.Item(v7, (uint64_t)__src);
        if (__src[19])
        {
          uint64_t v26 = _typeName(_:qualified:)();
          uint64_t v27 = v9;
          v10._countAndFlagsBits = 45;
          v10._object = (void *)0xE100000000000000;
          String.append(_:)(v10);
          v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v11);
          swift_bridgeObjectRelease();
          if (v26 == a1 && v27 == a2)
          {
            swift_bridgeObjectRelease();
LABEL_24:
            swift_bridgeObjectRelease();
            memcpy(__dst, __src, sizeof(__dst));
LABEL_25:
            swift_release();
            swift_bridgeObjectRelease_n();
            if (__dst[33])
            {
              memcpy(v30, __dst, 0x118uLL);
              outlined init with copy of SceneList.Item.Value((uint64_t)v30, (uint64_t)__dst);
              if (LOBYTE(__dst[16]))
              {
                static os_log_type_t.fault.getter();
                uint64_t v13 = (void *)static Log.runtimeIssuesLog.getter();
                type metadata accessor for _ContiguousArrayStorage<CVarArg>();
                uint64_t v14 = swift_allocObject();
                *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
                *(void *)(v14 + 56) = MEMORY[0x1E4FBB1A0];
                *(void *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
                *(void *)(v14 + 32) = a1;
                *(void *)(v14 + 40) = a2;
                swift_bridgeObjectRetain();
                os_log(_:dso:log:_:_:)();

                swift_bridgeObjectRelease();
                outlined destroy of SceneList.Item((uint64_t)v30);
                outlined destroy of SceneList.Item.Value((uint64_t)__dst);
              }
              else
              {
                uint64_t v17 = __dst[1];
                uint64_t v18 = __dst[2];
                char v19 = __dst[3];
                uint64_t v20 = __dst[4];
                uint64_t v21 = __dst[6];
                swift_release();
                outlined consume of Text?(v17, v18, v19, v20);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
                uint64_t v22 = v30[17];
                uint64_t v23 = v30[18];
                char v24 = v30[19];
                outlined copy of SceneID(v30[17], v30[18], v30[19]);
                specialized SceneNavigationStrategy_Phone.handleSceneDestruction(id:)(v22, v23, v24);
                outlined consume of SceneID(v22, v23, v24);
                outlined destroy of SceneList.Item((uint64_t)v30);
              }
              return;
            }
LABEL_28:
            outlined destroy of AccessibilityValueStorage?((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?);
            static os_log_type_t.fault.getter();
            uint64_t v15 = (void *)static Log.runtimeIssuesLog.getter();
            type metadata accessor for _ContiguousArrayStorage<CVarArg>();
            uint64_t v16 = swift_allocObject();
            *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
            *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v16 + 64) = lazy protocol witness table accessor for type String and conformance String();
            *(void *)(v16 + 32) = a1;
            *(void *)(v16 + 40) = a2;
            swift_bridgeObjectRetain();
            os_log(_:dso:log:_:_:)();

            swift_bridgeObjectRelease();
            return;
          }
          char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v8) {
            goto LABEL_24;
          }
        }
        else
        {
          BOOL v12 = __src[17] == a1 && __src[18] == a2;
          if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_24;
          }
        }
        outlined destroy of SceneList.Item((uint64_t)__src);
        v7 += 280;
        if (!--v6)
        {
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
      }
    }
    memset(__dst, 0, sizeof(__dst));
    goto LABEL_28;
  }
  static os_log_type_t.fault.getter();
  id v25 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();
}

void specialized SceneNavigationStrategy_Phone.handleSceneDestruction<A>(id:value:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v15 = a3 & 1;
  id v21 = objc_msgSend(self, sel_sharedApplication);
  uint64_t v16 = (void *)specialized SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(a1, a2, v15, a4, a5, a6, a7, a8);
  uint64_t v17 = v21;
  if (v16)
  {
    id v18 = objc_msgSend(v21, sel_openSessions);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
    lazy protocol witness table accessor for type UISceneSession and conformance NSObject();
    uint64_t v19 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v19 & 0xC000000000000001) != 0) {
      uint64_t v20 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v20 = *(void *)(v19 + 16);
    }
    swift_bridgeObjectRelease();
    if (v20 >= 2) {
      objc_msgSend(v21, sel_requestSceneSessionDestruction_options_errorHandler_, v16, 0, 0);
    }

    uint64_t v17 = v21;
  }
}

void specialized SceneNavigationStrategy_Phone.dismissWindow<A>(value:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v11 = objc_msgSend(v10, sel_supportsMultipleScenes);

  if (v11)
  {
    if (static AppGraph.shared)
    {
      swift_retain();
      static Update.ensure<A>(_:)();
      SceneList.windowGroup(presenting:)(a2, v30, __src);
      swift_release();
      swift_bridgeObjectRelease();
      if (*((void *)&__src[16] + 1))
      {
        memcpy(__dst, __src, 0x118uLL);
        outlined init with copy of SceneList.Item.Value((uint64_t)__dst, (uint64_t)__src);
        if (LOBYTE(__src[8]))
        {
          static os_log_type_t.fault.getter();
          BOOL v12 = (void *)static Log.runtimeIssuesLog.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
          uint64_t v14 = _typeName(_:qualified:)();
          uint64_t v16 = v15;
          *(void *)(v13 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v13 + 64) = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v13 + 32) = v14;
          *(void *)(v13 + 40) = v16;
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          outlined destroy of SceneList.Item((uint64_t)__dst);
          outlined destroy of SceneList.Item.Value((uint64_t)__src);
        }
        else
        {
          uint64_t v22 = *((void *)&__src[0] + 1);
          long long v23 = __src[1];
          uint64_t v24 = *(void *)&__src[2];
          long long v25 = __src[3];
          swift_release();
          outlined consume of Text?(v22, v23, SBYTE8(v23), v24);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
          uint64_t v26 = __dst[17];
          uint64_t v27 = __dst[18];
          char v28 = __dst[19];
          outlined copy of SceneID(__dst[17], __dst[18], __dst[19]);
          specialized SceneNavigationStrategy_Phone.handleSceneDestruction<A>(id:value:)(v26, v27, v28, a1, (uint64_t)a2, a3, a4, a5);
          outlined consume of SceneID(v26, v27, v28);
          outlined destroy of SceneList.Item((uint64_t)__dst);
        }
        return;
      }
    }
    else
    {
      memset(__src, 0, 280);
    }
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    uint64_t v17 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
    uint64_t v19 = _typeName(_:qualified:)();
    uint64_t v21 = v20;
    *(void *)(v18 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v18 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v21;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  static os_log_type_t.fault.getter();
  id v29 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();
}

void specialized SceneNavigationStrategy_Phone.dismissWindow<A>(id:value:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14 = objc_msgSend(self, sel_sharedApplication);
  unsigned int v15 = objc_msgSend(v14, sel_supportsMultipleScenes);

  if (v15)
  {
    if (static AppGraph.shared)
    {
      swift_retain();
      static Update.ensure<A>(_:)();
      SceneList.windowGroup<A>(id:presenting:)(a1, a2, a4, v37, __src);
      swift_release();
      swift_bridgeObjectRelease();
      if (*((void *)&__src[16] + 1))
      {
        memcpy(__dst, __src, 0x118uLL);
        outlined init with copy of SceneList.Item.Value((uint64_t)__dst, (uint64_t)__src);
        if (LOBYTE(__src[8]))
        {
          static os_log_type_t.fault.getter();
          uint64_t v16 = (void *)static Log.runtimeIssuesLog.getter();
          type metadata accessor for _ContiguousArrayStorage<CVarArg>();
          uint64_t v17 = swift_allocObject();
          *(_OWORD *)(v17 + 16) = xmmword_18834BB70;
          uint64_t v18 = _typeName(_:qualified:)();
          uint64_t v20 = v19;
          uint64_t v21 = MEMORY[0x1E4FBB1A0];
          *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
          unint64_t v22 = lazy protocol witness table accessor for type String and conformance String();
          *(void *)(v17 + 32) = v18;
          *(void *)(v17 + 40) = v20;
          *(void *)(v17 + 96) = v21;
          *(void *)(v17 + 104) = v22;
          *(void *)(v17 + 64) = v22;
          *(void *)(v17 + 72) = a1;
          *(void *)(v17 + 80) = a2;
          swift_bridgeObjectRetain();
          os_log(_:dso:log:_:_:)();

          swift_bridgeObjectRelease();
          outlined destroy of SceneList.Item((uint64_t)__dst);
          outlined destroy of SceneList.Item.Value((uint64_t)__src);
        }
        else
        {
          uint64_t v29 = *((void *)&__src[0] + 1);
          long long v30 = __src[1];
          uint64_t v31 = *(void *)&__src[2];
          long long v32 = __src[3];
          swift_release();
          outlined consume of Text?(v29, v30, SBYTE8(v30), v31);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v32);
          uint64_t v33 = __dst[17];
          uint64_t v34 = __dst[18];
          char v35 = __dst[19];
          outlined copy of SceneID(__dst[17], __dst[18], __dst[19]);
          specialized SceneNavigationStrategy_Phone.handleSceneDestruction<A>(id:value:)(v33, v34, v35, a3, a4, a5, a6, a7);
          outlined consume of SceneID(v33, v34, v35);
          outlined destroy of SceneList.Item((uint64_t)__dst);
        }
        return;
      }
    }
    else
    {
      memset(__src, 0, 280);
    }
    outlined destroy of AccessibilityValueStorage?((uint64_t)__src, &lazy cache variable for type metadata for SceneList.Item?);
    static os_log_type_t.fault.getter();
    long long v23 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_18834BB70;
    uint64_t v25 = MEMORY[0x1E4FBB1A0];
    *(void *)(v24 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v24 + 64) = v26;
    *(void *)(v24 + 32) = a1;
    *(void *)(v24 + 40) = a2;
    swift_bridgeObjectRetain();
    uint64_t v27 = _typeName(_:qualified:)();
    *(void *)(v24 + 96) = v25;
    *(void *)(v24 + 104) = v26;
    *(void *)(v24 + 72) = v27;
    *(void *)(v24 + 80) = v28;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    return;
  }
  static os_log_type_t.fault.getter();
  id v36 = (id)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();
}

unint64_t lazy protocol witness table accessor for type UISceneSession and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UISceneSession and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UISceneSession and conformance NSObject)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UISceneSession and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(uint64_t a1)
{
  return closure #1 in SceneNavigationStrategy_Phone.existingSession<A>(id:value:)(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t a1, unint64_t a2)
{
  return specialized BidirectionalCollection.dropLast(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
}

uint64_t specialized BidirectionalCollection.dropLast(_:)(uint64_t result, unint64_t a2, unint64_t *a3)
{
  if (result < 0)
  {
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    uint64_t v8 = -v7;
    if (!__OFSUB__(0, v7)) {
      goto LABEL_4;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  id v4 = a3;
  unint64_t v3 = a2;
  uint64_t v5 = result;
  unint64_t v6 = a2 >> 62;
  if (a2 >> 62) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = -v7;
  if (__OFSUB__(0, v7)) {
    goto LABEL_25;
  }
LABEL_4:
  uint64_t v9 = -v5;
  if (v8 > 0 || v8 <= v9)
  {
    uint64_t v10 = v7 - v5;
    if (__OFADD__(v7, v9))
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    if (v10 < 0)
    {
LABEL_29:
      __break(1u);
      return result;
    }
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (!v6)
    {
LABEL_7:
      uint64_t v11 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (v12 < 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
LABEL_13:
  if (v11 < v10)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if ((v3 & 0xC000000000000001) != 0 && v10)
  {
    type metadata accessor for NSObject(0, v4);
    Swift::Int v13 = 0;
    do
    {
      Swift::Int v14 = v13 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v13);
      Swift::Int v13 = v14;
    }
    while (v10 != v14);
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v15;
}

void CardButtonStyle.init()()
{
}

void static CardColorScheme.plain.getter()
{
}

void CardColorScheme.init(fill:focusedFill:)()
{
}

void CardButtonStyle.makeBody(configuration:)()
{
}

void CardButtonStyle.init(colorScheme:)()
{
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in CardButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of (Color, Color?)(uint64_t a1)
{
  type metadata accessor for (Color, Color?)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (Color, Color?)()
{
  if (!lazy cache variable for type metadata for (Color, Color?))
  {
    type metadata accessor for Color?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Color, Color?));
    }
  }
}

void type metadata accessor for Color?()
{
  if (!lazy cache variable for type metadata for Color?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Color?);
    }
  }
}

ValueMetadata *type metadata accessor for CardColorScheme()
{
  return &type metadata for CardColorScheme;
}

unint64_t destroy for CardColorScheme(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CardColorScheme(void *a1, void *a2)
{
  if (*a2 >= 2uLL)
  {
    uint64_t v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

unint64_t *assignWithCopy for CardColorScheme(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 >= 2)
  {
    if (v5 >= 2)
    {
      *a1 = v5;
      swift_retain();
      swift_release();
      a1[1] = a2[1];
      swift_retain();
      swift_release();
      return a1;
    }
    outlined destroy of (Color, Color?)((uint64_t)a1);
    goto LABEL_6;
  }
  if (v5 < 2)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = v5;
  a1[1] = a2[1];
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithTake for CardColorScheme(void *a1, void *a2)
{
  if (*a1 >= 2uLL)
  {
    if (*a2 >= 2uLL)
    {
      *a1 = *a2;
      swift_release();
      a1[1] = a2[1];
      swift_release();
      return a1;
    }
    outlined destroy of (Color, Color?)((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for CardColorScheme(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 2;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CardColorScheme(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = a2 - 2147483646;
    *(void *)(result + 8) = 0;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CardButtonStyle()
{
  return &type metadata for CardButtonStyle;
}

uint64_t sub_187FDA674()
{
  return MEMORY[0x1E4F417F0];
}

unint64_t destroy for CardColorScheme.Kind(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CardColorScheme.Kind(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for CardColorScheme.Kind(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = v5;
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *a1 = v5;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for CardColorScheme.Kind(void *a1, uint64_t a2)
{
  if (*a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *(void *)a2;
  swift_release();
  a1[1] = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CardColorScheme.Kind()
{
  return &type metadata for CardColorScheme.Kind;
}

void static CardColorScheme.search.getter()
{
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationColumnEnvironmentTransform()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationCommonTransformEnvironment(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationCommonTransformEnvironment()
{
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SearchOverlayView()
{
  return static TupleView._viewListCount(inputs:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationCommonTransformEnvironment()
{
  return &protocol witness table for NavigationCommonTransformEnvironment;
}

unsigned char *storeEnumTagSinglePayload for NavigationColumnModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187FDAB04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t assignWithTake for SearchOverlayView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  char v11 = *(unsigned char *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v11;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchOverlayView(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[49]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchOverlayView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationColumnEnvironmentTransform()
{
  return &protocol witness table for NavigationColumnEnvironmentTransform;
}

uint64_t View.shareConfiguration<A, B, C, D>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(a1, 0, a3, (uint64_t)&v4);
  View.preference<A>(key:value:)();
  return outlined retain of AnyShareConfiguration((uint64_t)&v4, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
}

unint64_t type metadata accessor for UIActivityItemsConfiguration()
{
  unint64_t result = lazy cache variable for type metadata for UIActivityItemsConfiguration;
  if (!lazy cache variable for type metadata for UIActivityItemsConfiguration)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIActivityItemsConfiguration);
  }
  return result;
}

uint64_t *outlined retain of AnyShareConfiguration?(uint64_t *a1, void (*a2)(void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  return a1;
}

uint64_t UIKitHoverGestureRecognizer._hoverEntered(_:with:)(uint64_t a1, void *a2)
{
  char v4 = 1;
  uint64_t v2 = UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(a1, a2, &v4);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t @objc UIKitHoverGestureRecognizer._hoverEntered(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = a4;
  id v8 = a1;
  UIKitHoverGestureRecognizer._hoverEntered(_:with:)(v6, v7);

  return swift_bridgeObjectRelease();
}

uint64_t UIKitHoverGestureRecognizer._hoverCancelled(_:with:)(uint64_t a1, void *a2)
{
  char v4 = 3;
  uint64_t v2 = UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(a1, a2, &v4);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t UIKitHoverGestureRecognizer._hoverExited(_:with:)(uint64_t a1, void *a2)
{
  char v4 = 2;
  uint64_t v2 = UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(a1, a2, &v4);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v2);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t @objc UIKitHoverGestureRecognizer._hoverCancelled(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  uint64_t v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

uint64_t UIKitHoverGestureRecognizer.convert(hoverEvents:with:phase:)(uint64_t a1, void *a2, char *a3)
{
  char v47 = *a3;
  long long v50 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    a1 = v52;
    uint64_t v46 = v53;
    uint64_t v4 = v54;
    uint64_t v5 = v55;
    unint64_t v6 = v56;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v46 = a1 + 56;
    uint64_t v8 = ~v7;
    uint64_t v9 = -v7;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v6 = v10 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v4 = v8;
    uint64_t v5 = 0;
  }
  int64_t v45 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    if (a1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v15 = v51;
      swift_unknownObjectRelease();
      uint64_t v14 = v5;
      uint64_t v12 = v6;
      if (!v51) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v6)
      {
        uint64_t v12 = (v6 - 1) & v6;
        unint64_t v13 = __clz(__rbit64(v6)) | (v5 << 6);
        uint64_t v14 = v5;
      }
      else
      {
        int64_t v16 = v5 + 1;
        if (__OFADD__(v5, 1)) {
          goto LABEL_43;
        }
        if (v16 >= v45) {
          goto LABEL_40;
        }
        unint64_t v17 = *(void *)(v46 + 8 * v16);
        uint64_t v14 = v5 + 1;
        if (!v17)
        {
          uint64_t v14 = v5 + 2;
          if (v5 + 2 >= v45) {
            goto LABEL_40;
          }
          unint64_t v17 = *(void *)(v46 + 8 * v14);
          if (!v17)
          {
            uint64_t v14 = v5 + 3;
            if (v5 + 3 >= v45) {
              goto LABEL_40;
            }
            unint64_t v17 = *(void *)(v46 + 8 * v14);
            if (!v17)
            {
              uint64_t v14 = v5 + 4;
              if (v5 + 4 >= v45) {
                goto LABEL_40;
              }
              unint64_t v17 = *(void *)(v46 + 8 * v14);
              if (!v17)
              {
                uint64_t v18 = v5 + 5;
                while (v45 != v18)
                {
                  unint64_t v17 = *(void *)(v46 + 8 * v18++);
                  if (v17)
                  {
                    uint64_t v14 = v18 - 1;
                    goto LABEL_29;
                  }
                }
LABEL_40:
                outlined consume of Set<UIPress>.Iterator._Variant();
                return (uint64_t)v50;
              }
            }
          }
        }
LABEL_29:
        uint64_t v12 = (v17 - 1) & v17;
        unint64_t v13 = __clz(__rbit64(v17)) + (v14 << 6);
      }
      id v15 = *(id *)(*(void *)(a1 + 48) + 8 * v13);
      if (!v15) {
        goto LABEL_40;
      }
    }
    type metadata accessor for (UITouch, HoverEvent)();
    Swift::UInt v20 = v19;
    id v21 = v15;
    id v22 = objc_msgSend(v49, sel_view);
    id v23 = a2;
    objc_msgSend(v21, sel_locationInView_, 0);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    objc_msgSend(v21, sel_timestamp);
    uint64_t v29 = v28;

    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = v50;
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v20, (Swift::UInt)v15);
    uint64_t v33 = v50[2];
    BOOL v34 = (v31 & 1) == 0;
    uint64_t v35 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      break;
    }
    char v36 = v31;
    if (v50[3] >= v35)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v35, isUniquelyReferenced_nonNull_native);
      unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v20, (Swift::UInt)v15);
      if ((v36 & 1) != (v38 & 1)) {
        goto LABEL_44;
      }
      unint64_t v32 = v37;
    }
    if (v36)
    {
      uint64_t v11 = v50[7] + 40 * v32;
      swift_release();
      *(void *)uint64_t v11 = v29;
      *(unsigned char *)(v11 + 8) = v47;
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = v25;
      *(void *)(v11 + 32) = v27;
    }
    else
    {
      v50[(v32 >> 6) + 8] |= 1 << v32;
      uint64_t v39 = (Swift::UInt *)(v50[6] + 16 * v32);
      *uint64_t v39 = v20;
      v39[1] = (Swift::UInt)v15;
      uint64_t v40 = v50[7] + 40 * v32;
      *(void *)uint64_t v40 = v29;
      *(unsigned char *)(v40 + 8) = v47;
      *(void *)(v40 + 16) = 0;
      *(void *)(v40 + 24) = v25;
      *(void *)(v40 + 32) = v27;
      uint64_t v41 = v50[2];
      BOOL v42 = __OFADD__(v41, 1);
      uint64_t v43 = v41 + 1;
      if (v42) {
        goto LABEL_42;
      }
      v50[2] = v43;
    }

    swift_bridgeObjectRelease();
    uint64_t v5 = v14;
    unint64_t v6 = v12;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t UIKitHoverGestureRecognizer.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  if (result == a1)
  {
    uint64_t v10 = v3;
    uint64_t v9 = *(void *)(a2 - 8);
    if (*(void *)(v9 + 64) == 8)
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 16))(a3, &v10, a2);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, a2);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
    return v8(a3, 1, 1, a2);
  }
  return result;
}

uint64_t protocol witness for EventBindingSource.attach(to:) in conformance UIKitHoverGestureRecognizer()
{
  return swift_weakAssign();
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer;
  if (!lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer)
  {
    type metadata accessor for UIKitHoverGestureRecognizer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHoverGestureRecognizer and conformance UIKitHoverGestureRecognizer);
  }
  return result;
}

void type metadata accessor for (UITouch, HoverEvent)()
{
  if (!lazy cache variable for type metadata for (UITouch, HoverEvent))
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UITouch, HoverEvent));
    }
  }
}

uint64_t Scene.commandsRemoved()(uint64_t a1, uint64_t a2)
{
  return Scene.modifier<A>(_:)(a1, a1, &type metadata for CommandsRemovedModifier, a2);
}

uint64_t Scene.commandsReplaced<A>(content:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v17[0] = a4;
  v17[1] = a6;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)v17 - v12;
  Scene.modifier<A>(_:)(v14, a3, &type metadata for CommandsRemovedModifier, a5);
  v17[2] = a5;
  double v17[3] = (uint64_t)&protocol witness table for CommandsRemovedModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  Scene.commands<A>(content:)(a1, a2, v10, v17[0], WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_187FDBB6C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187FDBBD0()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for CommandsRemovedModifier()
{
  return &type metadata for CommandsRemovedModifier;
}

uint64_t static CommandsRemovedModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  int v9 = *((_DWORD *)a1 + 14);
  uint64_t v22 = *a1;
  int v23 = v5;
  uint64_t v24 = v6;
  long long v25 = *(_OWORD *)(a1 + 3);
  uint64_t v26 = v8;
  uint64_t v27 = v7;
  int v28 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove(_:)();
  uint64_t v13 = v22;
  int v14 = v23;
  uint64_t v15 = v6;
  long long v16 = v25;
  uint64_t v17 = v8;
  uint64_t v18 = v7;
  int v19 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a2(&v20, v10, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v13 = v7;
  int v14 = v9;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v12 = v21;
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

uint64_t implicit closure #1 in static CommandsRemovedModifier._makeScene(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #1 in implicit closure #1 in static CommandsRemovedModifier._makeScene(modifier:inputs:body:)(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
LABEL_11:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = result;
    }
    unint64_t v4 = 0;
    unint64_t v5 = *(void *)(v1 + 16);
    uint64_t v6 = 216;
    do
    {
      if (v4 >= v5)
      {
        __break(1u);
        goto LABEL_11;
      }
      if ((*(unsigned char *)(v1 + v6) & 1) == 0) {
        *(unsigned char *)(v1 + v6) |= 1u;
      }
      ++v4;
      v6 += 280;
    }
    while (v2 != v4);
    *uint64_t v3 = v1;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyEventDispatcher()
{
  return &type metadata for KeyEventDispatcher;
}

uint64_t KeyEventDispatcher.receiveEvents(_:manager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  if (!MEMORY[0x18C119DF0](v5)) {
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6);
  swift_unknownObjectRelease();
  uint64_t v9 = MEMORY[0x1E4FBC870];
  if (!v8) {
    return v9;
  }
  uint64_t v10 = swift_conformsToProtocol2();
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10) {
    int v12 = (void *)v8;
  }
  else {
    int v12 = 0;
  }
  if (!v12)
  {
    swift_release();
    return v9;
  }
  unint64_t v56 = v12;
  uint64_t v57 = v11;
  uint64_t v90 = v9;
  uint64_t v13 = a1;
  uint64_t v59 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a1 + 64);
  uint64_t v17 = &v78;
  uint64_t v18 = (long long *)&v89;
  int64_t v61 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  int v58 = (char *)MEMORY[0x1E4FBC860];
  int v21 = &type metadata for KeyEvent;
  if (!v16) {
    goto LABEL_15;
  }
LABEL_13:
  unint64_t v22 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  unint64_t v23 = v22 | (v20 << 6);
  while (2)
  {
    uint64_t v24 = *(void *)(v13 + 56);
    long long v25 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v23);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    *(void *)&long long v77 = v27;
    *((void *)&v77 + 1) = v26;
    outlined init with copy of TableColumnList(v24 + 40 * v23, (uint64_t)v17);
    while (1)
    {
      outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v77, (uint64_t)v88, (uint64_t (*)(void))type metadata accessor for (key: EventID, value: EventType)?);
      Swift::UInt v31 = v88[0];
      if (!v88[0])
      {
        swift_release();
        uint64_t v45 = *((void *)v58 + 2);
        if (v45)
        {
          uint64_t v46 = (Swift::UInt *)(v58 + 40);
          do
          {
            unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(*(v46 - 1), *v46);
            if (v48)
            {
              unint64_t v49 = v47;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v51 = *v3;
              *(void *)&long long v77 = *v3;
              *uint64_t v3 = 0x8000000000000000;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v51 = v77;
              }
              specialized _NativeDictionary._delete(at:)(v49, v51);
              *uint64_t v3 = v51;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v46 += 2;
            --v45;
          }
          while (v45);
        }
        swift_release();
        swift_bridgeObjectRelease();
        return v90;
      }
      Swift::UInt v32 = v88[1];
      outlined init with take of OptionalBinaryInteger(v18, (uint64_t)v85);
      outlined init with copy of TableColumnList((uint64_t)v85, (uint64_t)v84);
      outlined init with copy of TableColumnList((uint64_t)v84, (uint64_t)v69);
      type metadata accessor for EventType();
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v68 = 0;
        long long v66 = 0u;
        long long v67 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        outlined destroy of KeyEvent?((uint64_t)&v62, (uint64_t (*)(void))type metadata accessor for KeyEvent?);
        long long v70 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        uint64_t v76 = 0;
LABEL_41:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
        outlined destroy of KeyEvent?((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for KeyEvent?);
        goto LABEL_42;
      }
      long long v74 = v66;
      long long v75 = v67;
      uint64_t v76 = v68;
      long long v72 = v64;
      long long v73 = v65;
      long long v70 = v62;
      long long v71 = v63;
      if (!*((void *)&v64 + 1)) {
        goto LABEL_41;
      }
      uint64_t v33 = v18;
      BOOL v34 = v17;
      uint64_t v35 = v21;
      long long v81 = v74;
      long long v82 = v75;
      uint64_t v83 = v76;
      long long v77 = v70;
      long long v78 = v71;
      long long v79 = v72;
      long long v80 = v73;
      outlined init with copy of KeyEvent((uint64_t)&v77, (uint64_t)&v70);
      uint64_t v36 = HIBYTE(*((void *)&v72 + 1)) & 0xFLL;
      if ((*((void *)&v72 + 1) & 0x2000000000000000) == 0) {
        uint64_t v36 = v72 & 0xFFFFFFFFFFFFLL;
      }
      if (v36)
      {
        swift_bridgeObjectRetain();
        uint64_t v54 = String.subscript.getter();
        uint64_t v55 = v37;
        outlined destroy of KeyEvent((uint64_t)&v70);
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
        uint64_t v38 = qword_1883B9B60[(char)v77];
        uint64_t v39 = *((void *)&v79 + 1);
        uint64_t v52 = v79;
        uint64_t v53 = *((void *)&v78 + 1);
        swift_bridgeObjectRetain();
        outlined destroy of KeyEvent((uint64_t)&v77);
        *(void *)&long long v70 = v31;
        *((void *)&v70 + 1) = v32;
        *(void *)&long long v77 = v38;
        *((void *)&v77 + 1) = v54;
        *(void *)&long long v78 = v55;
        *((void *)&v78 + 1) = v52;
        *(void *)&long long v79 = v39;
        *((void *)&v79 + 1) = v53;
        LOBYTE(v38) = KeyEventDispatcher.bind(_:_:_:)((Swift::UInt *)&v70, (uint64_t *)&v77, v56, v57);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v38) {
          specialized Set._Variant.insert(_:)((Swift::UInt *)&v77, v31, v32);
        }
        uint64_t v41 = v86;
        uint64_t v40 = v87;
        __swift_project_boxed_opaque_existential_1(v85, v86);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v40 + 8))(&v77, v41, v40);
        if (v77 == 2 || v77 == 3)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v58 + 2) + 1, 1, v58);
          }
          unint64_t v43 = *((void *)v58 + 2);
          unint64_t v42 = *((void *)v58 + 3);
          if (v43 >= v42 >> 1) {
            int v58 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v42 > 1), v43 + 1, 1, v58);
          }
          *((void *)v58 + 2) = v43 + 1;
          uint64_t v44 = &v58[16 * v43];
          *((void *)v44 + 4) = v31;
          *((void *)v44 + 5) = v32;
        }
        int v21 = v35;
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
        uint64_t v17 = v34;
        uint64_t v18 = v33;
        uint64_t v13 = a1;
        if (v16) {
          goto LABEL_13;
        }
        goto LABEL_15;
      }
      outlined destroy of KeyEvent((uint64_t)&v70);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v84);
      outlined destroy of KeyEvent((uint64_t)&v77);
      uint64_t v17 = v34;
      uint64_t v18 = v33;
      uint64_t v13 = a1;
LABEL_42:
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      if (v16) {
        goto LABEL_13;
      }
LABEL_15:
      int64_t v28 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        goto LABEL_67;
      }
      if (v28 < v61)
      {
        unint64_t v29 = *(void *)(v59 + 8 * v28);
        if (v29) {
          goto LABEL_18;
        }
        int64_t v30 = v20 + 2;
        ++v20;
        if (v28 + 1 < v61)
        {
          unint64_t v29 = *(void *)(v59 + 8 * v30);
          if (v29) {
            goto LABEL_21;
          }
          int64_t v20 = v28 + 1;
          if (v28 + 2 < v61)
          {
            unint64_t v29 = *(void *)(v59 + 8 * (v28 + 2));
            if (v29)
            {
              v28 += 2;
              goto LABEL_18;
            }
            int64_t v30 = v28 + 3;
            int64_t v20 = v28 + 2;
            if (v28 + 3 < v61) {
              break;
            }
          }
        }
      }
LABEL_32:
      unint64_t v16 = 0;
      *(void *)&long long v80 = 0;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v77 = 0u;
    }
    unint64_t v29 = *(void *)(v59 + 8 * v30);
    if (v29)
    {
LABEL_21:
      int64_t v28 = v30;
LABEL_18:
      unint64_t v16 = (v29 - 1) & v29;
      unint64_t v23 = __clz(__rbit64(v29)) + (v28 << 6);
      int64_t v20 = v28;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v61)
    {
      int64_t v20 = v61 - 1;
      goto LABEL_32;
    }
    unint64_t v29 = *(void *)(v59 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }
LABEL_67:
  __break(1u);
  return result;
}

uint64_t KeyEventDispatcher.bind(_:_:_:)(Swift::UInt *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  void (*v65)(uint64_t *__return_ptr, uint64_t *);
  char v66;
  uint64_t v67;
  void *v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  int v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(char *, uint64_t);
  char v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char v89;
  void (*v90)(uint64_t *__return_ptr, uint64_t *);
  char v91;
  uint64_t *v93;
  char isUniquelyReferenced_nonNull_native;
  Swift::UInt v95;
  Swift::UInt v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  void (**v101)(char *, uint64_t);
  void (**v102)(char *, uint64_t *, uint64_t);
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  char v118 = a4;
  uint64_t v112 = a3;
  uint64_t v108 = type metadata accessor for CharacterSet();
  char v101 = *(void (***)(char *, uint64_t))(v108 - 8);
  MEMORY[0x1F4188790](v108);
  uint64_t v107 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v106 = (char *)&v95 - v8;
  MEMORY[0x1F4188790](v9);
  char v105 = (char *)&v95 - v10;
  uint64_t v11 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v117 = (uint64_t *)((char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v119 = (uint64_t)&v95 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v95 - v16;
  MEMORY[0x1F4188790](v18);
  int64_t v20 = (void (**)(char *, uint64_t *, uint64_t))((char *)&v95 - v19);
  uint64_t v21 = type metadata accessor for KeyPress.Handler(0);
  int v98 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v95 - v25;
  v28.n128_f64[0] = MEMORY[0x1F4188790](v27);
  int64_t v30 = (char *)&v95 - v29;
  Swift::UInt v31 = *a1;
  Swift::UInt v32 = a1[1];
  uint64_t v34 = *a2;
  uint64_t v33 = a2[1];
  uint64_t v35 = a2[2];
  uint64_t v114 = a2[3];
  char v115 = v35;
  uint64_t v113 = a2[4];
  BOOL v104 = a2[5];
  uint64_t v36 = *v99;
  uint64_t v37 = *(void *)(*v99 + 16);
  uint64_t v116 = v11;
  uint64_t v109 = v34;
  uint64_t v110 = v38;
  uint64_t v111 = v33;
  uint64_t v103 = v23;
  if (v37)
  {
    Swift::UInt v39 = v31;
    uint64_t v40 = v17;
    Swift::UInt v41 = v32;
    unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
    Swift::UInt v32 = v41;
    uint64_t v43 = (uint64_t)v40;
    unint64_t v23 = v103;
    Swift::UInt v31 = v39;
    if (v44)
    {
      uint64_t v45 = *(void *)(*(void *)(v36 + 56) + 8 * v42);
      uint64_t v46 = *(uint64_t **)(v45 + 16);
      if (v46)
      {
        uint64_t v119 = v45 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
        uint64_t v112 = v101 + 4;
        uint64_t v103 = (char *)(v101 + 1);
        char v118 = *(void *)(v98 + 72);
        char v101 = (void (**)(char *, uint64_t))v45;
        swift_bridgeObjectRetain();
        uint64_t v47 = 0;
        uint64_t v117 = v46;
        uint64_t v102 = v20;
        while (1)
        {
          outlined init with copy of KeyPress.Handler(v119 + v118 * v47, (uint64_t)v30, type metadata accessor for KeyPress.Handler);
          outlined init with copy of KeyPress.Handler((uint64_t)v30, (uint64_t)v20, type metadata accessor for KeyPress.Handler.Subject);
          outlined init with copy of KeyPress.Handler((uint64_t)v20, v43, type metadata accessor for KeyPress.Handler.Subject);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (!EnumCaseMultiPayload) {
            break;
          }
          if (EnumCaseMultiPayload != 1) {
            goto LABEL_20;
          }
          unint64_t v49 = v105;
          uint64_t v50 = v108;
          ((void (*)(char *, uint64_t, uint64_t))*v112)(v105, v43, v108);
          uint64_t v51 = v107;
          CharacterSet.init(charactersIn:)();
          uint64_t v52 = v106;
          CharacterSet.intersection(_:)();
          uint64_t v53 = *(void (**)(char *, uint64_t))v103;
          (*(void (**)(char *, uint64_t))v103)(v51, v50);
          lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
          dispatch thunk of SetAlgebra.init()();
          lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
          char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v55 = v51;
          uint64_t v21 = v110;
          v53(v55, v50);
          unint64_t v56 = v52;
          uint64_t v34 = v109;
          v53(v56, v50);
          uint64_t v57 = v49;
          uint64_t v46 = v117;
          v53(v57, v50);
          int64_t v20 = v102;
          outlined destroy of KeyEvent?((uint64_t)v102, type metadata accessor for KeyPress.Handler.Subject);
          if (v54) {
            goto LABEL_6;
          }
LABEL_21:
          if ((v34 & ~*(void *)&v30[*(int *)(v21 + 20)]) != 0) {
            goto LABEL_6;
          }
          long long v65 = *(void (**)(uint64_t *__return_ptr, uint64_t *))&v30[*(int *)(v21 + 24)];
          uint64_t v120 = v34;
          char v121 = v111;
          uint64_t v122 = v115;
          int v123 = v114;
          uint64_t v124 = v113;
          uint64_t v125 = v104;
          v65(&v126, &v120);
          long long v66 = v126;
          outlined destroy of KeyEvent?((uint64_t)v30, type metadata accessor for KeyPress.Handler);
          if ((v66 & 1) == 0) {
            goto LABEL_53;
          }
LABEL_7:
          if ((uint64_t *)++v47 == v46) {
            goto LABEL_51;
          }
        }
        uint64_t v58 = *(void *)v43;
        if (!*(void *)(*(void *)v43 + 16)) {
          goto LABEL_5;
        }
        Hasher.init(_seed:)();
        String.hash(into:)();
        Swift::Int v59 = Hasher._finalize()();
        uint64_t v60 = -1 << *(unsigned char *)(v58 + 32);
        unint64_t v61 = v59 & ~v60;
        if (((*(void *)(v58 + 56 + ((v61 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v61) & 1) == 0) {
          goto LABEL_5;
        }
        uint64_t v62 = *(void *)(v58 + 48);
        long long v63 = (void *)(v62 + 16 * v61);
        BOOL v64 = *v63 == v111 && v63[1] == v115;
        if (!v64 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          long long v67 = ~v60;
          while (1)
          {
            unint64_t v61 = (v61 + 1) & v67;
            if (((*(void *)(v58 + 56 + ((v61 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v61) & 1) == 0) {
              break;
            }
            uint64_t v68 = (void *)(v62 + 16 * v61);
            uint64_t v69 = *v68 == v111 && v68[1] == v115;
            if (v69 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_19;
            }
          }
LABEL_5:
          swift_bridgeObjectRelease();
          outlined destroy of KeyEvent?((uint64_t)v20, type metadata accessor for KeyPress.Handler.Subject);
          uint64_t v34 = v109;
          uint64_t v21 = v110;
LABEL_6:
          outlined destroy of KeyEvent?((uint64_t)v30, type metadata accessor for KeyPress.Handler);
          goto LABEL_7;
        }
LABEL_19:
        swift_bridgeObjectRelease();
        uint64_t v34 = v109;
        uint64_t v21 = v110;
LABEL_20:
        outlined destroy of KeyEvent?((uint64_t)v20, type metadata accessor for KeyPress.Handler.Subject);
        goto LABEL_21;
      }
      return 0;
    }
  }
  uint64_t v95 = v32;
  uint64_t v96 = v31;
  long long v70 = (*(uint64_t (**)(void, __n128))(v118 + 48))(*v112, v28);
  long long v71 = *(void *)(v70 + 16);
  if (!v71)
  {
LABEL_50:
    swift_bridgeObjectRelease();
LABEL_51:
    swift_bridgeObjectRelease();
    return 0;
  }
  long long v72 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
  uint64_t v97 = v70;
  uint64_t v112 = (void *)v72;
  long long v73 = v70 + v72;
  char v118 = *(void *)(v98 + 72);
  uint64_t v102 = (void (**)(char *, uint64_t *, uint64_t))(v101 + 4);
  ++v101;
  long long v74 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v100 = v26;
  while (1)
  {
    outlined init with copy of KeyPress.Handler(v73, (uint64_t)v26, type metadata accessor for KeyPress.Handler);
    outlined init with copy of KeyPress.Handler((uint64_t)v26, (uint64_t)v23, type metadata accessor for KeyPress.Handler);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v74 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
    }
    uint64_t v76 = v74[2];
    long long v75 = v74[3];
    if (v76 >= v75 >> 1) {
      long long v74 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1, v74);
    }
    v74[2] = v76 + 1;
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)v23, (uint64_t)v112 + (void)v74 + v76 * v118, type metadata accessor for KeyPress.Handler);
    long long v77 = v119;
    outlined init with copy of KeyPress.Handler((uint64_t)v26, v119, type metadata accessor for KeyPress.Handler.Subject);
    outlined init with copy of KeyPress.Handler(v77, (uint64_t)v117, type metadata accessor for KeyPress.Handler.Subject);
    long long v78 = swift_getEnumCaseMultiPayload();
    if (v78) {
      break;
    }
    uint64_t v89 = specialized Set.contains(_:)(v33, v115, *v117);
    swift_bridgeObjectRelease();
    outlined destroy of KeyEvent?(v119, type metadata accessor for KeyPress.Handler.Subject);
    if (v89) {
      goto LABEL_47;
    }
LABEL_34:
    outlined destroy of KeyEvent?((uint64_t)v26, type metadata accessor for KeyPress.Handler);
LABEL_35:
    v73 += v118;
    if (!--v71) {
      goto LABEL_50;
    }
  }
  if (v78 == 1)
  {
    long long v79 = v105;
    long long v80 = v108;
    (*v102)(v105, v117, v108);
    long long v81 = v107;
    CharacterSet.init(charactersIn:)();
    long long v82 = v106;
    CharacterSet.intersection(_:)();
    uint64_t v83 = *v101;
    (*v101)(v81, v80);
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
    dispatch thunk of SetAlgebra.init()();
    lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(&lazy protocol witness table cache variable for type CharacterSet and conformance CharacterSet);
    int v84 = dispatch thunk of static Equatable.== infix(_:_:)();
    int v85 = v81;
    uint64_t v33 = v111;
    v83(v85, v80);
    uint64_t v86 = v82;
    uint64_t v34 = v109;
    v83(v86, v80);
    uint64_t v87 = v79;
    unint64_t v23 = v103;
    uint64_t v88 = v80;
    uint64_t v21 = v110;
    v83(v87, v88);
    uint64_t v26 = v100;
    outlined destroy of KeyEvent?(v119, type metadata accessor for KeyPress.Handler.Subject);
    if ((v84 & 1) == 0) {
      goto LABEL_47;
    }
    goto LABEL_34;
  }
  outlined destroy of KeyEvent?(v119, type metadata accessor for KeyPress.Handler.Subject);
LABEL_47:
  if ((v34 & ~*(void *)&v26[*(int *)(v21 + 20)]) != 0) {
    goto LABEL_34;
  }
  uint64_t v90 = *(void (**)(uint64_t *__return_ptr, uint64_t *))&v26[*(int *)(v21 + 24)];
  uint64_t v120 = v34;
  char v121 = v33;
  uint64_t v122 = v115;
  int v123 = v114;
  uint64_t v124 = v113;
  uint64_t v125 = v104;
  v90(&v126, &v120);
  char v91 = v126;
  outlined destroy of KeyEvent?((uint64_t)v26, type metadata accessor for KeyPress.Handler);
  if (v91) {
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  uint64_t v93 = v99;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v120 = *v93;
  *uint64_t v93 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v74, v96, v95, isUniquelyReferenced_nonNull_native);
  *uint64_t v93 = v120;
LABEL_53:
  swift_bridgeObjectRelease();
  return 1;
}

BOOL protocol witness for ForwardedEventDispatcher.isActive.getter in conformance KeyEventDispatcher()
{
  return *(void *)(*(void *)v0 + 16) != 0;
}

uint64_t protocol witness for ForwardedEventDispatcher.reset() in conformance KeyEventDispatcher()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v0 = v1;
  return result;
}

uint64_t outlined init with take of (key: EventID, value: EventType)?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of KeyPress.Handler(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of KeyEvent?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type CharacterSet and conformance CharacterSet(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CharacterSet();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static _DigitalCrownModifier._makeView(modifier:inputs:body:)()
{
}

void protocol witness for ViewModifier.body(content:) in conformance _DigitalCrownModifier()
{
}

_UNKNOWN **base witness table accessor for ViewModifier in _DigitalCrownModifier()
{
  return &protocol witness table for _DigitalCrownModifier;
}

uint64_t destroy for _DigitalCrownModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  int v2 = *(unsigned __int8 *)(a1 + 144);
  if (v2 != 255) {
    outlined consume of _CrownHapticsConfiguration(*(void *)(a1 + 128), *(void *)(a1 + 136), v2);
  }

  return swift_release();
}

uint64_t initializeWithCopy for _DigitalCrownModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_DWORD *)(a1 + 105) = *(_DWORD *)(a2 + 105);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  int v8 = *(unsigned __int8 *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v8 == 255)
  {
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 128);
    uint64_t v10 = *(void *)(a2 + 136);
    outlined copy of _CrownHapticsConfiguration(v9, v10, v8);
    *(void *)(a1 + 128) = v9;
    *(void *)(a1 + 136) = v10;
    *(unsigned char *)(a1 + 144) = v8;
  }
  *(_DWORD *)(a1 + 145) = *(_DWORD *)(a2 + 145);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  uint64_t v11 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v11;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _DigitalCrownModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  uint64_t v7 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v7;
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  int v8 = (long long *)(a1 + 128);
  uint64_t v9 = (long long *)(a2 + 128);
  int v10 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned __int8 *)(a1 + 144) == 255)
  {
    if (v10 == 255)
    {
      long long v19 = *v9;
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *int v8 = v19;
    }
    else
    {
      uint64_t v16 = *(void *)(a2 + 128);
      uint64_t v17 = *(void *)(a2 + 136);
      outlined copy of _CrownHapticsConfiguration(v16, v17, *(unsigned char *)(a2 + 144));
      *(void *)(a1 + 128) = v16;
      *(void *)(a1 + 136) = v17;
      *(unsigned char *)(a1 + 144) = v10;
    }
  }
  else if (v10 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 128);
    char v18 = *(unsigned char *)(a2 + 144);
    *int v8 = *v9;
    *(unsigned char *)(a1 + 144) = v18;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 128);
    uint64_t v12 = *(void *)(a2 + 136);
    outlined copy of _CrownHapticsConfiguration(v11, v12, *(unsigned char *)(a2 + 144));
    uint64_t v13 = *(void *)(a1 + 128);
    uint64_t v14 = *(void *)(a1 + 136);
    *(void *)(a1 + 128) = v11;
    *(void *)(a1 + 136) = v12;
    char v15 = *(unsigned char *)(a1 + 144);
    *(unsigned char *)(a1 + 144) = v10;
    outlined consume of _CrownHapticsConfiguration(v13, v14, v15);
  }
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  uint64_t v20 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v20;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _DigitalCrownModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  *(unsigned char *)(a1 + 107) = *(unsigned char *)(a2 + 107);
  *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
  *(unsigned char *)(a1 + 109) = *(unsigned char *)(a2 + 109);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  uint64_t v4 = (_OWORD *)(a2 + 128);
  int v5 = *(unsigned __int8 *)(a1 + 144);
  if (v5 == 255) {
    goto LABEL_5;
  }
  int v6 = *(unsigned __int8 *)(a2 + 144);
  if (v6 == 255)
  {
    outlined destroy of _CrownHapticsConfiguration(a1 + 128);
LABEL_5:
    *(_OWORD *)(a1 + 128) = *v4;
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    goto LABEL_6;
  }
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *v4;
  *(unsigned char *)(a1 + 144) = v6;
  outlined consume of _CrownHapticsConfiguration(v7, v8, v5);
LABEL_6:
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(_WORD *)(a1 + 146) = *(_WORD *)(a2 + 146);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(unsigned char *)(a1 + 149) = *(unsigned char *)(a2 + 149);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _DigitalCrownModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _DigitalCrownModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DigitalCrownModifier()
{
  return &type metadata for _DigitalCrownModifier;
}

uint64_t static FileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t FileDocumentConfiguration.document.getter(uint64_t a1)
{
  return FileDocumentConfiguration.document.getter(a1, MEMORY[0x1E4F41620]);
}

uint64_t FileDocumentConfiguration.document.setter(uint64_t a1, uint64_t a2)
{
  specialized FocusState.Binding.wrappedValue.setter();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

void (*FileDocumentConfiguration.document.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v4 = malloc(0x38uLL);
  *a1 = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  *uint64_t v4 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[1] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v4[2] = malloc(v7);
  v4[3] = malloc(v7);
  uint64_t v8 = type metadata accessor for Binding();
  v4[4] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  v4[5] = v9;
  v4[6] = malloc(*(void *)(v9 + 64));
  (*(void (**)(void))(v10 + 16))();
  MEMORY[0x18C113DA0](v8);
  return FileDocumentConfiguration.document.modify;
}

void FileDocumentConfiguration.document.modify(uint64_t **a1, char a2)
{
  unint64_t v2 = *a1;
  uint64_t v4 = (*a1)[5];
  uint64_t v3 = (void *)(*a1)[6];
  uint64_t v5 = (void *)(*a1)[3];
  uint64_t v6 = (*a1)[4];
  uint64_t v8 = (*a1)[1];
  size_t v7 = (void *)(*a1)[2];
  uint64_t v9 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v8 + 16))((*a1)[2], v5, v9);
    specialized Binding.wrappedValue.setter();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v7, v9);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
    v10(v5, v9);
  }
  else
  {
    specialized Binding.wrappedValue.setter();
    (*(void (**)(void *, uint64_t))(v8 + 8))(v5, v9);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v3, v6);
  }
  free(v3);
  free(v5);
  free(v7);

  free(v2);
}

uint64_t FileDocumentConfiguration.$document.getter(uint64_t a1)
{
  return FileDocumentConfiguration.document.getter(a1, MEMORY[0x1E4F41628]);
}

uint64_t FileDocumentConfiguration.document.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2 = type metadata accessor for Binding();

  return a2(v2);
}

uint64_t FileDocumentConfiguration.fileURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of URL?(v2 + *(int *)(a1 + 36), a2);
}

uint64_t FileDocumentConfiguration.fileURL.setter(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of URL?(a1, v2 + *(int *)(a2 + 36));
}

uint64_t (*FileDocumentConfiguration.fileURL.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FileDocumentConfiguration.isEditable.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t FileDocumentConfiguration.isEditable.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*FileDocumentConfiguration.isEditable.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t FileDocumentConfiguration.init(document:fileURL:isEditable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for FileDocumentConfiguration();
  uint64_t result = outlined init with take of URL?(a2, a4 + *(int *)(v9 + 36));
  *(unsigned char *)(a4 + *(int *)(v9 + 40)) = a3;
  return result;
}

uint64_t property wrapper backing initializer of FileDocumentBox.base(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - v5, a1, v2, v4);
  Published.init(wrappedValue:)((uint64_t)v6, v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t FileDocumentBox.base.didset(uint64_t a1)
{
  uint64_t v20 = *v1;
  uint64_t v3 = *(void *)(v20 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  long long v19 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v18 - v8;
  FileDocumentBox.base.getter();
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48);
  BOOL v11 = v10(v9, 1, v3) != 1;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  *((unsigned char *)v1 + *(void *)(*v1 + 120)) = v11;
  static Transaction.current.getter();
  Transaction.subscript.getter();
  uint64_t result = swift_release();
  if ((v21 & 1) == 0)
  {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(a1, 1, v3);
    if (result != 1)
    {
      uint64_t v13 = (id *)((char *)v1 + *(void *)(*v1 + 128));
      uint64_t result = swift_beginAccess();
      if (*v13)
      {
        id v18 = *v13;
        uint64_t v14 = v19;
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v19, a1, v4);
        unint64_t v15 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = v3;
        *(void *)(v16 + 24) = *(void *)(v20 + 88);
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v16 + v15, v14, v4);
        type metadata accessor for FileDocumentBox();
        id v17 = v18;
        NSUndoManager.registerUndo<A>(withTarget:handler:)();

        return swift_release();
      }
    }
  }
  return result;
}

uint64_t FileDocumentBox.base.getter()
{
  return FileDocumentBox.base.getter();
}

{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  return swift_release();
}

void (*FileDocumentBox.base.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for Optional();
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  FileDocumentBox.base.getter();
  return FileDocumentBox.base.modify;
}

void FileDocumentBox.base.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized FileDocumentBox.base.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized FileDocumentBox.base.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t property wrapper backing initializer of FileDocumentBox.fileURL(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2);
  outlined init with copy of URL?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return outlined destroy of FileDocumentWriteConfiguration(a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t FileDocumentBox.fileURL.getter()
{
  return FileDocumentBox.base.getter();
}

uint64_t FileDocumentBox.fileURL.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v3 + 80);
  uint64_t v7 = v11;
  uint64_t v12 = *(void *)(v3 + 88);
  uint64_t v8 = v12;
  swift_getKeyPath();
  v10[0] = v7;
  v10[1] = v8;
  swift_getKeyPath();
  outlined init with copy of URL?(a1, (uint64_t)v6);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of FileDocumentWriteConfiguration(a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t (*FileDocumentBox.fileURL.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

uint64_t FileDocumentBox.isEditable.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t FileDocumentBox.isEditable.setter()
{
  return static Published.subscript.setter();
}

uint64_t (*FileDocumentBox.isEditable.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

uint64_t FileDocumentBox.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  FileDocumentBox.init()();
  return v0;
}

uint64_t *FileDocumentBox.init()()
{
  uint64_t v1 = *v0;
  type metadata accessor for Published<Bool>();
  uint64_t v34 = *(void *)(v2 - 8);
  uint64_t v35 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v33 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation3URLVSgMaTm_1(0, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F1AC70]);
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v32 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v29 = (char *)&v27 - v5;
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + 80);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v30 = v10;
  uint64_t v11 = type metadata accessor for Published();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v28 = *(void *)(v10 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  id v18 = (char *)&v27 - v17;
  uint64_t v19 = (uint64_t)v0 + *(void *)(v1 + 96);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(v9 - 8) + 56);
  v20((char *)&v27 - v17, 1, 1, v9, v16);
  property wrapper backing initializer of FileDocumentBox.base((uint64_t)v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v19, v14, v11);
  uint64_t v21 = (uint64_t)v0 + *(void *)(*v0 + 104);
  uint64_t v22 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v8, 1, 1, v22);
  unint64_t v23 = v29;
  property wrapper backing initializer of FileDocumentBox.fileURL((uint64_t)v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v21, v23, v32);
  uint64_t v24 = (uint64_t)v0 + *(void *)(*v0 + 112);
  char v36 = 0;
  uint64_t v25 = v33;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v24, v25, v35);
  *((unsigned char *)v0 + *(void *)(*v0 + 120)) = 0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)) = 0;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v20)(v18, 1, 1, v9);
  specialized FileDocumentBox.base.setter((uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v30);
  return v0;
}

id FileDocumentBox.read(from:contentType:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void *)*v2;
  uint64_t Configuration = type metadata accessor for FileDocumentReadConfiguration(0);
  uint64_t v8 = Configuration - 8;
  MEMORY[0x1F4188790](Configuration);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v6[10];
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v12 - 8);
  uint64_t v24 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = (id *)((char *)v3 + v6[16]);
  swift_beginAccess();
  objc_msgSend(*v15, sel_disableUndoRegistration);
  uint64_t v16 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v10, a2, v16);
  *(void *)&v10[*(int *)(v8 + 28)] = a1;
  uint64_t v17 = v6[11];
  id v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 24);
  id v19 = a1;
  uint64_t v20 = v25;
  v18(v10, v11, v17);
  if (!v20)
  {
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v14, 0, 1, v11);
    specialized FileDocumentBox.base.setter((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v24);
  }
  uint64_t v21 = (id *)((char *)v3 + *(void *)(*v3 + 128));
  swift_beginAccess();
  return objc_msgSend(*v21, sel_enableUndoRegistration);
}

uint64_t (*FileDocumentBox.snapshotForSerialization(contentType:)(uint64_t a1))(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v26 = a1;
  uint64_t v27 = v3;
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v25 = v5;
  uint64_t v30 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v2 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v25 - v16;
  FileDocumentBox.base.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return 0;
  }
  else
  {
    id v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v19(v17, v10, v6);
    v19(v14, v17, v6);
    uint64_t v21 = v28;
    uint64_t v20 = v29;
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, v26, v29);
    unint64_t v22 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v23 = (v12 + *(unsigned __int8 *)(v21 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v6;
    *(void *)(v24 + 24) = *(void *)(v27 + 88);
    v19((char *)(v24 + v22), v14, v6);
    (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v24 + v23, v30, v20);
    return partial apply for closure #1 in FileDocumentBox.snapshotForSerialization(contentType:);
  }
}

uint64_t closure #1 in FileDocumentBox.snapshotForSerialization(contentType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for FileDocumentWriteConfiguration(0);
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, a3, v13);
  *(void *)&v12[*(int *)(v10 + 28)] = a1;
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(a5 + 32);
  id v15 = a1;
  uint64_t v16 = v14(v12, a4, a5);
  outlined destroy of FileDocumentWriteConfiguration((uint64_t)v12, type metadata accessor for FileDocumentWriteConfiguration);
  return v16;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance FileDocumentBox<A>@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for FileDocumentBox();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id protocol witness for FileWrapperObservableDocumentBox.read(from:contentType:) in conformance FileDocumentBox<A>(void *a1, uint64_t a2)
{
  return FileDocumentBox.read(from:contentType:)(a1, a2);
}

uint64_t (*protocol witness for FileWrapperObservableDocumentBox.snapshotForSerialization(contentType:) in conformance FileDocumentBox<A>(uint64_t a1))(void *a1)
{
  return FileDocumentBox.snapshotForSerialization(contentType:)(a1);
}

uint64_t protocol witness for DocumentBaseBox.base.setter in conformance FileDocumentBox<A>(uint64_t a1)
{
  specialized FileDocumentBox.base.setter(a1);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t (*protocol witness for DocumentBaseBox.base.modify in conformance FileDocumentBox<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FileDocumentBox.base.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ObservableDocumentBox.fileURL.modify in conformance FileDocumentBox<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FileDocumentBox.fileURL.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ObservableDocumentBox.isEditable.modify in conformance FileDocumentBox<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = FileDocumentBox.isEditable.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ObservableDocumentBox.readableContentTypes.getter in conformance FileDocumentBox<A>(uint64_t a1)
{
  return specialized FileDocumentBox.readableContentTypes.getter(*(void *)(a1 + 80), *(void *)(a1 + 88));
}

uint64_t protocol witness for ObservableDocumentBox.writableContentTypes.getter in conformance FileDocumentBox<A>(uint64_t a1)
{
  return specialized FileDocumentBox.writableContentTypes.getter(*(void *)(a1 + 80), *(void *)(a1 + 88));
}

uint64_t DocumentGroupConfiguration.NewFileDocument.provideNewDocument(to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v13 - v9;
  type metadata accessor for FileDocumentBox();
  swift_dynamicCastClassUnconditional();
  uint64_t v11 = swift_unknownObjectRetain();
  a3(v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v10, 0, 1, a5);
  specialized FileDocumentBox.base.setter((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for NewDocumentProvider.provideNewDocument(to:) in conformance DocumentGroupConfiguration.NewFileDocument<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DocumentGroupConfiguration.NewFileDocument.provideNewDocument(to:)(a1, a2, *(void (**)(uint64_t))v3, *(void *)(v3 + 8), *(void *)(a3 + 16));
}

uint64_t DocumentGroupConfiguration.EditorFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DocumentGroupConfiguration.EditorFileDocumentContainer.body.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.EditorFileDocumentContainer.configuration.getter);
}

uint64_t DocumentGroupConfiguration.EditorFileDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v18 = a5;
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v17 - v13;
  type metadata accessor for FileDocumentBox();
  swift_getWitnessTable();
  ObservedObject.projectedValue.getter();
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  swift_getKeyPath();
  type metadata accessor for FileDocumentBox();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  swift_retain();
  FileDocumentBox.fileURL.getter();
  swift_release();
  swift_retain();
  char v15 = FileDocumentBox.isEditable.getter();
  swift_release();
  return FileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v14, (uint64_t)v11, v15 & 1, v18);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>(void *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void))DocumentGroupConfiguration.EditorFileDocumentContainer.body.getter);
}

uint64_t property wrapper backing initializer of DocumentGroupConfiguration.EditorFileDocumentContainer.modelBox()
{
  type metadata accessor for FileDocumentBox();
  swift_getWitnessTable();

  return ObservedObject.init(wrappedValue:)();
}

uint64_t DocumentGroupConfiguration.ViewerFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DocumentGroupConfiguration.EditorFileDocumentContainer.body.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.ViewerFileDocumentContainer.configuration.getter);
}

uint64_t DocumentGroupConfiguration.EditorFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v64 = a8;
  uint64_t v65 = a9;
  uint64_t v57 = a1;
  uint64_t v58 = a3;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v60 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a5;
  uint64_t v18 = a7;
  uint64_t v19 = type metadata accessor for FileDocumentConfiguration();
  uint64_t v54 = *(void *)(v19 - 8);
  uint64_t v55 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v50 - v20;
  uint64_t v59 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v50 - v29;
  uint64_t v31 = type metadata accessor for _ConditionalContent();
  uint64_t v62 = *(void *)(v31 - 8);
  uint64_t v63 = v31;
  double v32 = MEMORY[0x1F4188790](v31);
  unint64_t v61 = (char *)&v50 - v33;
  if (*(unsigned char *)(a2 + *(void *)(*(void *)a2 + 120)) == 1)
  {
    uint64_t v50 = v24;
    uint64_t v52 = v25;
    uint64_t v51 = v27;
    uint64_t v34 = a6;
    uint64_t v35 = v58;
    uint64_t v53 = v30;
    uint64_t v36 = v64;
    a10(v57, a2, (void (*)(void))v58, a4, v17, v34, v18, v64, v32);
    v35(v21);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v21, v55);
    swift_getKeyPath();
    uint64_t v37 = v60;
    uint64_t v38 = v52;
    DocumentGroupConfiguration.EditorFileDocumentContainer.documentConfiguration.getter(v60);
    uint64_t v39 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v37, 0, 1, v39);
    uint64_t v40 = (uint64_t)v51;
    Swift::UInt v41 = v50;
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of FileDocumentWriteConfiguration((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v41, v34);
    uint64_t v42 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v66 = v36;
    uint64_t v67 = v42;
    swift_getWitnessTable();
    uint64_t v43 = v53;
    static ViewBuilder.buildExpression<A>(_:)(v40);
    char v44 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
    v44(v40, v38);
    static ViewBuilder.buildExpression<A>(_:)(v43);
    uint64_t v45 = v61;
    static ViewBuilder.buildEither<A, B>(first:)(v40, v38);
    v44(v40, v38);
    v44((uint64_t)v43, v38);
  }
  else
  {
    uint64_t v74 = static Color.clear.getter();
    uint64_t v46 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v36 = v64;
    uint64_t v72 = v64;
    uint64_t v73 = v46;
    swift_getWitnessTable();
    uint64_t v45 = v61;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v74, v25, MEMORY[0x1E4F414E0]);
    swift_release();
  }
  uint64_t v47 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
  uint64_t v70 = v36;
  uint64_t v71 = v47;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v69 = MEMORY[0x1E4F414D8];
  uint64_t v48 = v63;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v45);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v45, v48);
}

uint64_t DocumentGroupConfiguration.ViewerFileDocumentContainer.configuration.getter@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v17 = a5;
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v16 - v13;
  type metadata accessor for FileDocumentBox();
  swift_getWitnessTable();
  ObservedObject.projectedValue.getter();
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  swift_getKeyPath();
  type metadata accessor for FileDocumentBox();
  swift_getWitnessTable();
  ObservedObject.Wrapper.subscript.getter();
  swift_release();
  swift_release();
  swift_retain();
  FileDocumentBox.fileURL.getter();
  swift_release();
  return FileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v14, (uint64_t)v11, 0, v17);
}

uint64_t DocumentGroupConfiguration.EditorFileDocumentContainer.documentConfiguration.getter@<X0>(unsigned char *a1@<X8>)
{
  swift_retain();
  char v2 = FileDocumentBox.isEditable.getter();
  swift_release();
  type metadata accessor for DocumentConfiguration();
  swift_retain();
  FileDocumentBox.fileURL.getter();
  uint64_t result = swift_release();
  *a1 = v2 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.ViewerFileDocumentContainer<A, B>(void *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void))DocumentGroupConfiguration.ViewerFileDocumentContainer.body.getter);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], v3[3], a1[2], a1[3], a1[4], a1[5]);
}

uint64_t Published.init(wrappedValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v5);
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, a2);
}

uint64_t key path setter for FileDocumentBox.fileURL : <A>FileDocumentBox<A>(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v4);
  return FileDocumentBox.fileURL.setter((uint64_t)v4);
}

uint64_t specialized FileDocumentBox.base.setter(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v21 = v3;
  uint64_t v22 = *(void *)(v2 + 88);
  uint64_t v11 = v22;
  swift_getKeyPath();
  uint64_t v19 = v3;
  uint64_t v20 = v11;
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v17 = v3;
  uint64_t v18 = v11;
  swift_getKeyPath();
  uint64_t v15 = v3;
  uint64_t v16 = v11;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
  swift_retain();
  static Published.subscript.setter();
  FileDocumentBox.base.didset((uint64_t)v10);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_187FE10D4()
{
  uint64_t v0 = type metadata accessor for FileDocumentConfiguration();
  return FileDocumentConfiguration.document.getter(v0);
}

uint64_t sub_187FE1110()
{
  return specialized FocusState.Binding.wrappedValue.setter();
}

uint64_t sub_187FE1150()
{
  return 16;
}

__n128 sub_187FE115C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static FileDocument.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static FileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FileDocument.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of FileDocument.fileWrapper(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

void type metadata completion function for FileDocumentConfiguration()
{
  type metadata accessor for Binding();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?(319);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDocumentConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  unint64_t v12 = ((v7 + 16) & ~(unint64_t)v7) + v8 + v11;
  if (*(_DWORD *)(v10 + 84)) {
    size_t v13 = *(void *)(v10 + 64);
  }
  else {
    size_t v13 = *(void *)(v10 + 64) + 1;
  }
  int v14 = (*(_DWORD *)(v10 + 80) | v7) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v11 | (unint64_t)v7) > 7 || v14 != 0 || v13 + (v12 & ~v11) + 1 > 0x18)
  {
    a1 = (uint64_t *)(v15
                   + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v26 = ~v11;
    uint64_t v27 = v9;
    uint64_t v18 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    unint64_t v25 = ((unint64_t)v18 + v7 + 8) & ~(unint64_t)v7;
    unint64_t v20 = ((unint64_t)v19 + v7 + 8) & ~(unint64_t)v7;
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v21(v25, v20, v5);
    uint64_t v22 = (void *)(((unint64_t)a1 + v12) & v26);
    uint64_t v23 = (const void *)(((unint64_t)a2 + v12) & v26);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v23, 1, v27))
    {
      memcpy(v22, v23, v13);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v22, v23, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v22, 0, 1, v27);
    }
    *((unsigned char *)v22 + v13) = *((unsigned char *)v23 + v13);
  }
  return a1;
}

uint64_t destroy for FileDocumentConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
  uint64_t v8 = (v7 + 16) & ~v7;
  uint64_t v9 = *(void *)(v6 + 56);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (v9 + a1 + *(unsigned __int8 *)(v11 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = v11;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10);
  if (!result)
  {
    int v14 = *(uint64_t (**)(unint64_t, uint64_t))(v15 + 8);
    return v14(v12, v10);
  }
  return result;
}

void *initializeWithCopy for FileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 48);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = ((v10 + 16) & ~v10) + v13 + v16;
  uint64_t v18 = (void *)(((unint64_t)a1 + v17) & ~v16);
  uint64_t v19 = (const void *)(((unint64_t)a2 + v17) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v19, 1, v14))
  {
    int v20 = *(_DWORD *)(v15 + 84);
    size_t v21 = *(void *)(v15 + 64);
    if (v20) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v21 + 1;
    }
    memcpy(v18, v19, v22);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v18, v19, v14);
    uint64_t v24 = *(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56);
    uint64_t v23 = v15 + 56;
    v24(v18, 0, 1, v14);
    int v20 = *(_DWORD *)(v23 + 28);
    size_t v21 = *(void *)(v23 + 8);
  }
  if (v20) {
    size_t v25 = v21;
  }
  else {
    size_t v25 = v21 + 1;
  }
  *((unsigned char *)v18 + v25) = *((unsigned char *)v19 + v25);
  return a1;
}

void *assignWithCopy for FileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = *(void *)(v9 + 40);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = ((v10 + 16) & ~v10) + v11 + v14;
  uint64_t v16 = (void *)(((unint64_t)a1 + v15) & ~v14);
  uint64_t v17 = (void *)(((unint64_t)a2 + v15) & ~v14);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  LODWORD(v11) = v18(v16, 1, v12);
  int v19 = v18(v17, 1, v12);
  if (v11)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 16))(v16, v17, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      goto LABEL_12;
    }
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  else
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 24))(v16, v17, v12);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
    int v20 = *(_DWORD *)(v13 + 84);
    size_t v21 = *(void *)(v13 + 64);
  }
  if (v20) {
    size_t v22 = v21;
  }
  else {
    size_t v22 = v21 + 1;
  }
  memcpy(v16, v17, v22);
LABEL_12:
  if (*(_DWORD *)(v13 + 84)) {
    uint64_t v23 = *(void *)(v13 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v13 + 64) + 1;
  }
  *((unsigned char *)v16 + v23) = *((unsigned char *)v17 + v23);
  return a1;
}

void *initializeWithTake for FileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v10 + v11 + v14;
  uint64_t v16 = (void *)(((unint64_t)a1 + v15) & ~v14);
  uint64_t v17 = (const void *)(((unint64_t)a2 + v15) & ~v14);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v17, 1, v12))
  {
    int v18 = *(_DWORD *)(v13 + 84);
    size_t v19 = *(void *)(v13 + 64);
    if (v18) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v19 + 1;
    }
    memcpy(v16, v17, v20);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v16, v17, v12);
    size_t v22 = *(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56);
    uint64_t v21 = v13 + 56;
    v22(v16, 0, 1, v12);
    int v18 = *(_DWORD *)(v21 + 28);
    size_t v19 = *(void *)(v21 + 8);
  }
  if (v18) {
    size_t v23 = v19;
  }
  else {
    size_t v23 = v19 + 1;
  }
  *((unsigned char *)v16 + v23) = *((unsigned char *)v17 + v23);
  return a1;
}

void *assignWithTake for FileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = (v10 + 16) & ~v10;
  uint64_t v12 = *(void *)(v9 + 24);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v11 + v12 + v15;
  uint64_t v17 = (void *)(((unint64_t)a1 + v16) & ~v15);
  int v18 = (void *)(((unint64_t)a2 + v16) & ~v15);
  size_t v19 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  LODWORD(v12) = v19(v17, 1, v13);
  int v20 = v19(v18, 1, v13);
  if (v12)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v17, v18, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v17, 0, 1, v13);
      goto LABEL_12;
    }
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v17, v18, v13);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v13);
    int v21 = *(_DWORD *)(v14 + 84);
    size_t v22 = *(void *)(v14 + 64);
  }
  if (v21) {
    size_t v23 = v22;
  }
  else {
    size_t v23 = v22 + 1;
  }
  memcpy(v17, v18, v23);
LABEL_12:
  if (*(_DWORD *)(v14 + 84)) {
    uint64_t v24 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v24 = *(void *)(v14 + 64) + 1;
  }
  *((unsigned char *)v17 + v24) = *((unsigned char *)v18 + v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentConfiguration(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 <= v8) {
    unsigned int v13 = v8;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(v9 + 64);
  if (v11) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = 2;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = ((v14 + 16) & ~v14) + *(void *)(v6 + 64) + v15;
  if (a2 > v13)
  {
    uint64_t v19 = v17 + v16 + (v18 & ~v15);
    char v20 = 8 * v19;
    if (v19 > 3) {
      goto LABEL_16;
    }
    unsigned int v22 = ((a2 - v13 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v22 >= 2)
    {
LABEL_16:
      int v21 = *((unsigned __int8 *)a1 + v19);
      if (!*((unsigned char *)a1 + v19)) {
        goto LABEL_33;
      }
LABEL_23:
      int v23 = (v21 - 1) << v20;
      if (v19 > 3) {
        int v23 = 0;
      }
      if (v19)
      {
        if (v19 <= 3) {
          int v24 = v19;
        }
        else {
          int v24 = 4;
        }
        switch(v24)
        {
          case 2:
            int v25 = *a1;
            break;
          case 3:
            int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v25 = *(_DWORD *)a1;
            break;
          default:
            int v25 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v25 = 0;
      }
      return v13 + (v25 | v23) + 1;
    }
  }
LABEL_33:
  if (v8 >= v12)
  {
    uint64_t v27 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v7 & 0x80000000) != 0)
    {
      uint64_t v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
      return v30(((unint64_t)v27 + v14 + 8) & ~v14, v7, v5);
    }
    else
    {
      unint64_t v28 = *v27;
      if (v28 >= 0xFFFFFFFF) {
        LODWORD(v28) = -1;
      }
      return (v28 + 1);
    }
  }
  else
  {
    if (v11 < 2) {
      return 0;
    }
    unsigned int v29 = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)a1 + v18) & ~v15);
    if (v29 >= 2) {
      return v29 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for FileDocumentConfiguration(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v37 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v13 = v12;
  int v14 = *(_DWORD *)(v12 + 84);
  unsigned int v15 = v14 - 1;
  if (!v14) {
    unsigned int v15 = 0;
  }
  if (v15 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  size_t v18 = ((v17 + 16) & ~v17) + *(void *)(v8 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  size_t v20 = v18 + v19;
  size_t v21 = *(void *)(v12 + 64);
  if (!v14) {
    ++v21;
  }
  size_t v22 = v21 + ((v18 + v19) & ~v19) + 1;
  if (a3 <= v16) {
    goto LABEL_21;
  }
  if (v22 <= 3)
  {
    unsigned int v24 = ((a3 - v16 + ~(-1 << (8 * v22))) >> (8 * v22)) + 1;
    if (HIWORD(v24))
    {
      int v11 = 4;
      if (v16 < a2) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v24 >= 0x100) {
      int v11 = 2;
    }
    else {
      int v11 = v24 > 1;
    }
LABEL_21:
    if (v16 < a2) {
      goto LABEL_22;
    }
LABEL_14:
    uint64_t v23 = ~v19;
    switch(v11)
    {
      case 1:
        a1[v22] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v22] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 3:
        goto LABEL_75;
      case 4:
        *(_DWORD *)&a1[v22] = 0;
        goto LABEL_29;
      default:
LABEL_29:
        if (a2)
        {
LABEL_30:
          if (v10 >= v15)
          {
            if (v10 >= a2)
            {
              uint64_t v34 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
              if ((v9 & 0x80000000) != 0)
              {
                uint64_t v36 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
                v36(((unint64_t)v34 + v17 + 8) & ~v17, a2, v9, v7);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v35 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v35 = (a2 - 1);
                }
                *uint64_t v34 = v35;
              }
            }
            else
            {
              if (v18 <= 3) {
                int v31 = ~(-1 << (8 * v18));
              }
              else {
                int v31 = -1;
              }
              if (v18)
              {
                int v29 = v31 & (~v10 + a2);
                if (v18 <= 3) {
                  int v32 = v18;
                }
                else {
                  int v32 = 4;
                }
                bzero(a1, v18);
                switch(v32)
                {
                  case 2:
LABEL_69:
                    *(_WORD *)a1 = v29;
                    break;
                  case 3:
LABEL_70:
                    *(_WORD *)a1 = v29;
                    a1[2] = BYTE2(v29);
                    break;
                  case 4:
LABEL_71:
                    *(_DWORD *)a1 = v29;
                    break;
                  default:
LABEL_49:
                    *a1 = v29;
                    break;
                }
              }
            }
          }
          else
          {
            a1 = (unsigned char *)((unint64_t)&a1[v20] & v23);
            if (v15 >= a2)
            {
              uint64_t v33 = *(void (**)(unsigned char *, void))(v13 + 56);
              v33(a1, (a2 + 1));
            }
            else
            {
              if (v21 <= 3) {
                int v28 = ~(-1 << (8 * v21));
              }
              else {
                int v28 = -1;
              }
              if (v21)
              {
                int v29 = v28 & (~v15 + a2);
                if (v21 <= 3) {
                  int v30 = v21;
                }
                else {
                  int v30 = 4;
                }
                bzero(a1, v21);
                switch(v30)
                {
                  case 2:
                    goto LABEL_69;
                  case 3:
                    goto LABEL_70;
                  case 4:
                    goto LABEL_71;
                  default:
                    goto LABEL_49;
                }
              }
            }
          }
        }
        break;
    }
    return;
  }
  int v11 = 1;
  if (v16 >= a2) {
    goto LABEL_14;
  }
LABEL_22:
  unsigned int v25 = ~v16 + a2;
  if (v22 < 4)
  {
    int v26 = (v25 >> (8 * v22)) + 1;
    if (v21 + ((v18 + v19) & ~v19) != -1)
    {
      int v27 = v25 & ~(-1 << (8 * v22));
      bzero(a1, v22);
      if (v22 == 3)
      {
        *(_WORD *)a1 = v27;
        a1[2] = BYTE2(v27);
      }
      else if (v22 == 2)
      {
        *(_WORD *)a1 = v27;
      }
      else
      {
        *a1 = v27;
      }
    }
  }
  else
  {
    bzero(a1, v22);
    *(_DWORD *)a1 = v25;
    int v26 = 1;
  }
  switch(v11)
  {
    case 1:
      a1[v22] = v26;
      break;
    case 2:
      *(_WORD *)&a1[v22] = v26;
      break;
    case 3:
LABEL_75:
      __break(1u);
      JUMPOUT(0x187FE2554);
    case 4:
      *(_DWORD *)&a1[v22] = v26;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for FileDocumentConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata completion function for FileDocumentBox()
{
  type metadata accessor for Optional();
  type metadata accessor for Published();
  if (v0 <= 0x3F)
  {
    _s10Foundation3URLVSgMaTm_1(319, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F1AC70]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Bool>();
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for FileDocumentBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187FE2724()
{
  return FileDocumentBox.base.getter();
}

uint64_t sub_187FE2748(uint64_t a1)
{
  return specialized FileDocumentBox.base.setter(a1);
}

uint64_t sub_187FE276C()
{
  return 16;
}

__n128 sub_187FE2778(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187FE2784()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileDocumentBox.base.didset()
{
  uint64_t v1 = *(void *)(type metadata accessor for Optional() - 8);
  return specialized FileDocumentBox.base.setter(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t specialized FileDocumentBox.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t specialized FileDocumentBox.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_187FE2980()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileDocumentBox.snapshotForSerialization(contentType:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v7 = *(void *)(type metadata accessor for UTType() - 8);
  return closure #1 in FileDocumentBox.snapshotForSerialization(contentType:)(a1, v1 + v6, v1 + ((v6 + v5 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v3, v4);
}

uint64_t sub_187FE2BA4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = FileDocumentBox.isEditable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187FE2BD4()
{
  return FileDocumentBox.isEditable.setter();
}

uint64_t sub_187FE2BFC()
{
  return 16;
}

__n128 sub_187FE2C08(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187FE2C14()
{
  return FileDocumentBox.fileURL.getter();
}

uint64_t sub_187FE2C3C()
{
  return 16;
}

__n128 sub_187FE2C48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187FE2C54()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for DocumentGroupConfiguration.ViewerFileDocumentContainer()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for DocumentGroupConfiguration.NewFileDocument()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DocumentGroupConfiguration.EditorFileDocumentContainer()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EditorFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.ViewerFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t sub_187FE2D9C()
{
  return FileDocumentBox.base.getter();
}

uint64_t sub_187FE2DC0(uint64_t a1)
{
  return specialized FileDocumentBox.base.setter(a1);
}

uint64_t sub_187FE2DE4()
{
  return 32;
}

__n128 sub_187FE2DF0(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t sub_187FE2DFC()
{
  return swift_getWitnessTable();
}

uint64_t WidgetCurvesContentModifier.curvesContent.getter()
{
  return *v0;
}

uint64_t WidgetCurvesContentModifier.curvesContent.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*WidgetCurvesContentModifier.curvesContent.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::WidgetCurvesContentModifier __swiftcall WidgetCurvesContentModifier.init(curvesContent:)(SwiftUI::WidgetCurvesContentModifier curvesContent)
{
  v1->curvesContent = curvesContent.curvesContent;
  return curvesContent;
}

void WidgetCurvesContentModifier.body(content:)(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

double static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, double *a4@<X8>)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  int v32 = *a1;
  uint64_t v4 = *a2;
  unsigned int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  unsigned int v7 = *((_DWORD *)a2 + 6);
  unsigned int v8 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v9 = *((_DWORD *)a2 + 9);
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  unsigned int v13 = *((_DWORD *)a2 + 14);
  unsigned int v14 = *((_DWORD *)a2 + 15);
  unsigned int v15 = *((_DWORD *)a2 + 16);
  unsigned int v16 = *((_DWORD *)a2 + 17);
  unsigned int v17 = *((_DWORD *)a2 + 18);
  unsigned int v18 = *((_DWORD *)a2 + 19);
  int v19 = *((_DWORD *)a2 + 20);
  uint64_t v65 = *a2;
  unsigned int v66 = v5;
  uint64_t v67 = v6;
  unint64_t v68 = __PAIR64__(v8, v7);
  int v69 = v10;
  int v70 = v9;
  int v47 = v9;
  *(void *)&long long v71 = v11;
  *((void *)&v71 + 1) = v12;
  unsigned int v45 = v13;
  *(void *)&long long v72 = __PAIR64__(v14, v13);
  unsigned int v43 = v14;
  unsigned int v41 = v15;
  *((void *)&v72 + 1) = __PAIR64__(v16, v15);
  unsigned int v39 = v16;
  unsigned int v37 = v17;
  unint64_t v73 = __PAIR64__(v18, v17);
  unsigned int v35 = v18;
  int v33 = v19;
  int v74 = v19;
  a3(&v53, a1, &v65);
  lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v65 == 1)
  {
    LODWORD(v65) = v32;
    type metadata accessor for _GraphValue<WidgetCurvesContentBaseModifier>();
    _GraphValue.value.getter();
    AGGraphCreateOffsetAttribute2();
    uint64_t v55 = v4;
    unsigned int v56 = v5;
    uint64_t v57 = v6;
    unint64_t v58 = __PAIR64__(v8, v7);
    int v59 = v10;
    int v60 = v47;
    *(void *)&long long v61 = v11;
    *((void *)&v61 + 1) = v12;
    *(void *)&long long v62 = __PAIR64__(v43, v45);
    *((void *)&v62 + 1) = __PAIR64__(v39, v41);
    unint64_t v63 = __PAIR64__(v35, v37);
    int v64 = v33;
    _ViewInputs.withoutGeometryDependencies.getter();
    _ViewInputs.hasWidgetMetadata.setter();
    specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
    PreferenceKeys.add(_:)();
    PreferenceKeys.add(_:)();
    v70 |= 0x10u;
    uint64_t v55 = v65;
    unsigned int v56 = v66;
    uint64_t v57 = v67;
    unint64_t v58 = v68;
    int v59 = v69;
    int v60 = v70;
    long long v61 = v71;
    long long v62 = v72;
    unint64_t v63 = v73;
    int v64 = v74;
    LODWORD(v55) = _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewInputs.EnvironmentTransform and conformance _ViewInputs.EnvironmentTransform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.environment.setter();
    PreferenceKeys.add(_:)();
    uint64_t v20 = v65;
    uint64_t v21 = v67;
    long long v22 = v71;
    unsigned int v23 = DWORD2(v72);
    uint64_t v55 = v65;
    unsigned int v46 = v66;
    unsigned int v56 = v66;
    uint64_t v57 = v67;
    unsigned int v44 = v68;
    unint64_t v58 = v68;
    unsigned int v42 = HIDWORD(v68);
    int v40 = v69;
    int v59 = v69;
    int v60 = v70;
    int v38 = v70;
    long long v61 = v71;
    unsigned int v48 = v72;
    long long v62 = v72;
    unsigned int v36 = DWORD1(v72);
    unsigned int v34 = HIDWORD(v72);
    unsigned int v31 = v73;
    unint64_t v63 = v73;
    unsigned int v30 = HIDWORD(v73);
    int v29 = v74;
    int v64 = v74;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v24 = swift_bridgeObjectRetain();
    a3(&v51, (int *)v24, &v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v25 = v51;
    unsigned int v26 = v52;
    uint64_t v55 = v51;
    unsigned int v56 = v52;
    if ((PreferencesOutputs.subscript.getter() & 0x100000000) != 0)
    {
      uint64_t v55 = v20;
      unsigned int v56 = v46;
      uint64_t v57 = v21;
      unint64_t v58 = __PAIR64__(v42, v44);
      int v59 = v40;
      int v60 = v38;
      long long v61 = v22;
      *(void *)&long long v62 = __PAIR64__(v36, v48);
      *((void *)&v62 + 1) = __PAIR64__(v34, v23);
      unint64_t v63 = __PAIR64__(v30, v31);
      int v64 = v29;
      uint64_t v51 = MEMORY[0x1E4FBC860];
      _ViewInputs.intern<A>(_:id:)();
    }
    uint64_t v55 = v25;
    unsigned int v56 = v26;
    PreferencesOutputs.subscript.getter();
    uint64_t v55 = v25;
    unsigned int v56 = v26;
    PreferencesOutputs.subscript.getter();
    uint64_t v55 = v25;
    unsigned int v56 = v26;
    PreferencesOutputs.subscript.getter();
    uint64_t v27 = swift_bridgeObjectRelease();
    uint64_t v55 = *((void *)&v22 + 1);
    unsigned int v56 = v48;
    MEMORY[0x1F4188790](v27);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *(void *)a4 = v53;
  double result = v54;
  a4[1] = v54;
  return result;
}

uint64_t implicit closure #2 in static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter.value.getter@<X0>(id *a1@<X8>)
{
  unsigned int v39 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v35 - v3;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v5);
  unsigned int v7 = (char *)&v35 - v6;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (void (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  MEMORY[0x1F4188790](v8 - 8);
  int v10 = (char *)&v35 - v9;
  int v11 = *(_DWORD *)(v1 + 4);
  int v12 = *(_DWORD *)(v1 + 8);
  int v13 = *(_DWORD *)(v1 + 12);
  long long v38 = *(_OWORD *)(v1 + 24);
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    int v36 = v13;
    int v37 = v11;
    AGGraphGetValue();
    uint64_t v14 = swift_bridgeObjectRetain();
    PlatformItemList.mergedContentItem.getter(v14, (uint64_t)v10);
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v10, 0, 1, v15);
    int v16 = *MEMORY[0x1E4F4E7A0];
    if (v12 == *MEMORY[0x1E4F4E7A0])
    {
      uint64_t v17 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v7, 1, 1, v17);
    }
    else
    {
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of WidgetAuxiliaryViewMetadata?(Value, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    }
    if (v36 == v16)
    {
      long long v24 = xmmword_18834BB90;
      long long v25 = 0uLL;
      long long v26 = 0uLL;
      long long v27 = 0uLL;
    }
    else
    {
      uint64_t v28 = AGGraphGetValue();
      char v29 = *(unsigned char *)(v28 + 16);
      v41[1] = *(_OWORD *)v28;
      char v42 = v29;
      long long v30 = *(_OWORD *)AGGraphGetValue();
      long long v40 = v38;
      v41[0] = v30;
      AccessibilityAttachment.Tree.metadataAccessibility(in:idiom:)((uint64_t *)v41, (uint64_t)&v43);
      long long v24 = v43;
      long long v25 = v44;
      long long v26 = v45;
      long long v27 = v46;
    }
    long long v43 = v24;
    long long v44 = v25;
    long long v45 = v26;
    long long v46 = v27;
    unsigned int v31 = v39;
    if (v37 == v16)
    {
      uint64_t v32 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v4, 1, 1, v32);
    }
    else
    {
      uint64_t v33 = AGGraphGetValue();
      outlined init with copy of WidgetAuxiliaryViewMetadata?(v33, (uint64_t)v4, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
    }
    WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v10, (uint64_t)v7, (uint64_t *)&v43, (uint64_t)v4, v31);
    uint64_t v34 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    return (*(uint64_t (**)(id *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v31, 0, 1, v34);
  }
  else
  {
    uint64_t v18 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
    int v19 = *(uint64_t (**)(id *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v20 = v18;
    uint64_t v21 = v39;
    return v19(v21, 1, 1, v20);
  }
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void protocol witness for ViewModifier.body(content:) in conformance WidgetCurvesContentBaseModifier()
{
}

uint64_t static WidgetAuxiliaryCurvedContentKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryCurvedContentKey.defaultValue);
  return outlined init with copy of WidgetAuxiliaryViewMetadata?(v3, a1, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t static WidgetAuxiliaryCurvedContentKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with take of WidgetAuxiliaryViewMetadata?(a1, (uint64_t)v6);
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    a2();
    outlined destroy of WidgetAuxiliaryViewMetadata?((uint64_t)v6);
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v6, (uint64_t)v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return outlined init with take of WidgetAuxiliaryViewMetadata?((uint64_t)v9, a1);
}

uint64_t outlined init with take of WidgetAuxiliaryViewMetadata?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance WidgetAuxiliaryCurvedContentKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static WidgetAuxiliaryCurvedContentKey.defaultValue);
  return outlined init with copy of WidgetAuxiliaryViewMetadata?(v3, a1, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance WidgetAuxiliaryCurvedContentKey(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with take of WidgetAuxiliaryViewMetadata?(a1, (uint64_t)v6);
  uint64_t v10 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    a2();
    outlined destroy of WidgetAuxiliaryViewMetadata?((uint64_t)v6);
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v6, (uint64_t)v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return outlined init with take of WidgetAuxiliaryViewMetadata?((uint64_t)v9, a1);
}

uint64_t View.widgetCurvedContentAllowed()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed();

  return View.input<A>(_:)((uint64_t)&type metadata for WidgetCurvedContentAllowed, a1, (uint64_t)&type metadata for WidgetCurvedContentAllowed, a2, v4);
}

unint64_t lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed;
  if (!lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance WidgetCurvedContentAllowed()
{
  lazy protocol witness table accessor for type WidgetCurvedContentAllowed and conformance WidgetCurvedContentAllowed();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WidgetCurvedContentAllowed()
{
  return PropertyList.subscript.setter();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in WidgetCurvesContentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for WidgetCurvesContentModifier()
{
  return &type metadata for WidgetCurvesContentModifier;
}

ValueMetadata *type metadata accessor for WidgetAuxiliaryCurvedContentKey()
{
  return &type metadata for WidgetAuxiliaryCurvedContentKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>)
  {
    type metadata accessor for _ViewModifier_Content<WidgetCurvesContentModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetCurvesContentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier, (uint64_t)&type metadata for WidgetCurvesContentModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<WidgetCurvesContentModifier>, WidgetCurvesContentBaseModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier;
  if (!lazy protocol witness table cache variable for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<WidgetCurvesContentModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<WidgetCurvesContentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetCurvesContentModifier and conformance WidgetCurvesContentModifier, (uint64_t)&type metadata for WidgetCurvesContentModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<WidgetCurvesContentModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_187FE4674()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _ViewModifier_Content<WidgetCurvesContentModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for WidgetCurvesContentModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187FE484CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WidgetCurvesContentBaseModifier()
{
  return &type metadata for WidgetCurvesContentBaseModifier;
}

ValueMetadata *type metadata accessor for WidgetCurvedContentAllowed()
{
  return &type metadata for WidgetCurvedContentAllowed;
}

_UNKNOWN **base witness table accessor for ViewModifier in WidgetCurvesContentBaseModifier()
{
  return &protocol witness table for WidgetCurvesContentBaseModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in WidgetCurvedContentAllowed()
{
  return &protocol witness table for WidgetCurvedContentAllowed;
}

void type metadata accessor for _GraphValue<WidgetCurvesContentBaseModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<WidgetCurvesContentBaseModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WidgetCurvesContentBaseModifier>);
    }
  }
}

uint64_t partial apply for implicit closure #2 in static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static WidgetCurvesContentBaseModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter;
  if (!lazy protocol witness table cache variable for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter and conformance WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter);
  }
  return result;
}

void type metadata accessor for WidgetAuxiliaryViewMetadata?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of WidgetAuxiliaryViewMetadata?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void *type metadata accessor for WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter()
{
  return &unk_1ED45C1A8;
}

void specialized Sequence.first(where:)(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, char *a4@<X8>)
{
  long long v25 = a4;
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  v24[1] = a1;
  if (v14)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v16 = v8 + 16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v30 = v16;
    unsigned int v31 = v15;
    uint64_t v18 = *(void *)(v16 + 56);
    unint64_t v19 = v16 + 40;
    uint64_t v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 32);
    char v29 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    long long v26 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v27 = v18;
    swift_bridgeObjectRetain();
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t, uint64_t))v19;
    v24[0] = v19 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    int v28 = a3 & 1;
    while (1)
    {
      v31(v13, v17, v7);
      uint64_t v21 = *v32;
      (*v32)(v13, 0, 1, v7);
      if ((*v20)(v13, 1, v7) == 1) {
        break;
      }
      long long v22 = *v29;
      (*v29)(v10, v13, v7);
      if (DocumentBrowserViewController.presentDocument(at:animated:)((uint64_t)v10, v28))
      {
        swift_bridgeObjectRelease();
        unsigned int v23 = v25;
        v22(v25, v10, v7);
        v21(v23, 0, 1, v7);
        goto LABEL_11;
      }
      (*v26)(v10, v7);
      v17 += v27;
      if (!--v14) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v24[0] = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    swift_bridgeObjectRetain();
LABEL_8:
    v21(v13, 1, 1, v7);
  }
  swift_bridgeObjectRelease();
  v21(v25, 1, 1, v7);
LABEL_11:
}

id specialized DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectWeakInit();
  uint64_t v7 = &v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t v8 = (uint64_t *)&v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_onDocumentClose];
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = &v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier];
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  *((void *)v9 + 6) = 1;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation] = 0;
  unint64_t v10 = &v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentBrowserMediator];
  *(void *)unint64_t v10 = a1;
  *((void *)v10 + 1) = &protocol witness table for IdentifiedDocumentGroupDocumentCreation;
  uint64_t v11 = *v8;
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v12 = a1;
  outlined copy of AppIntentExecutor?(a2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
  v22.receiver = v3;
  v22.super_class = (Class)type metadata accessor for DocumentViewController();
  id v13 = objc_msgSendSuper2(&v22, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  uint64_t v15 = (uint64_t (**)(void *))&v12[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_newDocumentHandler];
  uint64_t v16 = *(void *)&v12[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_newDocumentHandler];
  *uint64_t v15 = partial apply for closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:);
  v15[1] = (uint64_t (*)(void *))v14;
  id v17 = v13;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
  id v18 = IdentifiedDocumentGroupDocumentCreation.documentBrowser.getter();
  id v19 = objc_msgSend(v18, sel_presentationController);

  if (v19)
  {
    objc_msgSend(v19, sel_setDelegate_, v17);
  }
  id v20 = v17;
  objc_msgSend(v20, sel_setDefinesPresentationContext_, 1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);

  return v20;
}

{
  char *v3;
  char *v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  objc_super v22;

  swift_unknownObjectWeakInit();
  uint64_t v7 = &v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
  *((void *)v7 + 4) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t v8 = (uint64_t *)&v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_onDocumentClose];
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v9 = &v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier];
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  *((void *)v9 + 6) = 1;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation] = 0;
  unint64_t v10 = &v3[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentBrowserMediator];
  *(void *)unint64_t v10 = a1;
  *((void *)v10 + 1) = &protocol witness table for URLDocumentCreation;
  uint64_t v11 = *v8;
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v12 = a1;
  outlined copy of AppIntentExecutor?(a2);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
  v22.receiver = v3;
  v22.super_class = (Class)type metadata accessor for DocumentViewController();
  id v13 = objc_msgSendSuper2(&v22, sel_initWithNibName_bundle_, 0, 0);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  uint64_t v15 = &v12[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_newDocumentHandler];
  uint64_t v16 = *(void *)&v12[OBJC_IVAR____TtC7SwiftUI19URLDocumentCreation_newDocumentHandler];
  *(void *)uint64_t v15 = closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)partial apply;
  *((void *)v15 + 1) = v14;
  id v17 = v13;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
  id v18 = URLDocumentCreation.documentBrowser.getter();
  id v19 = objc_msgSend(v18, sel_presentationController);

  if (v19)
  {
    objc_msgSend(v19, sel_setDelegate_, v17);
  }
  id v20 = v17;
  objc_msgSend(v20, sel_setDefinesPresentationContext_, 1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);

  return v20;
}

uint64_t (*DocumentBrowserViewController.configurationMap.modify())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t DocumentBrowserViewController.init(configurations:rootModifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations;
  uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations] = MEMORY[0x1E4FBC860];
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_configurationMap] = MEMORY[0x1E4FBC868];
  *(void *)&v2[v5] = a1;
  uint64_t v7 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of RootModifier(a2, (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier]);

  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_19:
    type metadata accessor for UTType();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v30.receiver = v7;
    v30.super_class = (Class)type metadata accessor for DocumentBrowserViewController();
    id v22 = objc_msgSendSuper2(&v30, sel_initForOpeningContentTypes_, isa);

    id v23 = v22;
    objc_msgSend(v23, sel_setDelegate_, v23);
    objc_msgSend(v23, sel_setDefinesPresentationContext_, 1);
    if (v8)
    {
      uint64_t v24 = a1 + 32;
      swift_bridgeObjectRetain();
      id v25 = v23;
      while (1)
      {
        outlined init with copy of IdentifiedDocumentGroupConfiguration(v24, (uint64_t)v31);
        char v26 = v31[0];
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v31);
        if ((v26 & 1) == 0) {
          break;
        }
        v24 += 128;
        if (!--v8)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease_n();
      uint64_t v28 = 1;
    }
    else
    {
      id v27 = v23;
      swift_bridgeObjectRelease();
LABEL_25:
      uint64_t v28 = 0;
    }
    objc_msgSend(v23, sel_setAllowsDocumentCreation_, v28, v29);

    outlined destroy of RootModifier(a2);
    return (uint64_t)v23;
  }
  uint64_t v29 = a2;
  uint64_t v9 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v10 = v8;
  while (1)
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v9, (uint64_t)v31);
    uint64_t v11 = v32;
    swift_bridgeObjectRetain();
    uint64_t result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v31);
    uint64_t v13 = *(void *)(v11 + 16);
    int64_t v14 = v6[2];
    int64_t v15 = v14 + v13;
    if (__OFADD__(v14, v13)) {
      break;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v15 <= v6[3] >> 1)
    {
      if (*(void *)(v11 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v14 <= v15) {
        int64_t v16 = v14 + v13;
      }
      else {
        int64_t v16 = v14;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v16, 1, v6);
      uint64_t v6 = (void *)result;
      if (*(void *)(v11 + 16))
      {
LABEL_14:
        uint64_t v17 = (v6[3] >> 1) - v6[2];
        uint64_t result = type metadata accessor for UTType();
        if (v17 < v13) {
          goto LABEL_30;
        }
        uint64_t result = swift_arrayInitWithCopy();
        if (v13)
        {
          uint64_t v18 = v6[2];
          BOOL v19 = __OFADD__(v18, v13);
          uint64_t v20 = v18 + v13;
          if (v19) {
            goto LABEL_31;
          }
          _OWORD v6[2] = v20;
        }
        goto LABEL_4;
      }
    }
    if (v13) {
      goto LABEL_29;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v9 += 128;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      a2 = v29;
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(char a1, void (*a2)(char *, void), uint64_t a3, void *a4, uint64_t a5)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  double v16 = MEMORY[0x1F4188790](v13);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)aBlock - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v13, v16);
    unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a2;
    *(void *)(v18 + 24) = a3;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)aBlock - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    aBlock[4] = partial apply for closure #1 in closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_35_1;
    BOOL v19 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a4, sel_closeWithCompletionHandler_, v19);
    _Block_release(v19);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v14 + 56))(v12, 1, 1, v13, v16);
    a2(v12, 0);
    outlined destroy of WeakBox<DocumentViewController>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for URL?);
  }
}

uint64_t closure #1 in closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(char a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a4, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v10);
    uint64_t v13 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    uint64_t v13 = 0;
  }
  a2(v9, v13);
  return outlined destroy of WeakBox<DocumentViewController>((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for URL?);
}

Swift::OpaquePointer_optional __swiftcall DocumentBrowserViewController.presentDocuments(at:animated:)(Swift::OpaquePointer at, Swift::Bool animated)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = &v20[-v13];
  specialized Sequence.first(where:)((uint64_t)at._rawValue, v2, animated, &v20[-v13]);
  outlined init with copy of WeakBox<DocumentViewController>((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for URL?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    outlined destroy of WeakBox<DocumentViewController>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for URL?);
    outlined destroy of WeakBox<DocumentViewController>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for URL?);
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v17 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v6 + 32);
    v17(v8, v11, v5);
    type metadata accessor for WeakBox<DocumentViewController>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
    unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
    v17((unsigned char *)(v16 + v18), v8, v5);
    outlined destroy of WeakBox<DocumentViewController>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for URL?);
  }
  BOOL v19 = (void *)v16;
  result.value._rawuint64_t Value = v19;
  result.is_nil = v15;
  return result;
}

uint64_t DocumentBrowserViewController.presentDocument(at:animated:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  MEMORY[0x1F4188790](v6);
  long long v44 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UTType?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UTType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v3;
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations);
  swift_bridgeObjectRetain();
  static DocumentUtils.contentType(of:)(a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of WeakBox<DocumentViewController>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UTType?);
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    memset(v54, 0, 25);
    swift_bridgeObjectRelease();
LABEL_17:
    outlined destroy of DocumentGroupConfiguration?((uint64_t)&v48, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    int v40 = a2;
    uint64_t v42 = v15 + 32;
    swift_bridgeObjectRetain();
    uint64_t v17 = 0;
    uint64_t v41 = a1;
    uint64_t v39 = v16;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v42 + (v17 << 7), (uint64_t)&v55);
      uint64_t v18 = *(void *)(*((void *)&v60 + 1) + 16);
      if (v18) {
        break;
      }
LABEL_5:
      ++v17;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v55);
      if (v17 == v16)
      {
        swift_bridgeObjectRelease();
        LOBYTE(a2) = v40;
        goto LABEL_13;
      }
    }
    unint64_t v19 = *((void *)&v60 + 1)
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    swift_bridgeObjectRetain_n();
    uint64_t v20 = *(void *)(v12 + 72);
    while ((UTType.conforms(to:)() & 1) == 0)
    {
      v19 += v20;
      if (!--v18)
      {
        swift_bridgeObjectRelease_n();
        a1 = v41;
        uint64_t v16 = v39;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v52 = v59;
    long long v53 = v60;
    v54[0] = v61[0];
    *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)v61 + 9);
    long long v48 = v55;
    long long v49 = v56;
    long long v50 = v57;
    long long v51 = v58;
    LOBYTE(a2) = v40;
    a1 = v41;
  }
  else
  {
LABEL_13:
    long long v53 = 0u;
    memset(v54, 0, 25);
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v48 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_bridgeObjectRelease();
  if (!*((void *)&v48 + 1)) {
    goto LABEL_17;
  }
  long long v59 = v52;
  long long v60 = v53;
  v61[0] = v54[0];
  *(_OWORD *)((char *)v61 + 9) = *(_OWORD *)((char *)v54 + 9);
  long long v55 = v48;
  long long v56 = v49;
  long long v57 = v50;
  long long v58 = v51;
  uint64_t v21 = *((void *)&v48 + 1);
  uint64_t v22 = v49;
  uint64_t v23 = (*(uint64_t (**)(void, void))(v49 + 8))(*((void *)&v48 + 1), v49);
  uint64_t v24 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, a1, v46);
  id v25 = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 120))(v24, v21, v22);
  outlined init with copy of NewDocumentProvider?((uint64_t)&v56 + 8, (uint64_t)&v48);
  uint64_t v26 = *((void *)&v49 + 1);
  if (*((void *)&v49 + 1))
  {
    uint64_t v27 = v50;
    __swift_project_boxed_opaque_existential_1(&v48, *((uint64_t *)&v49 + 1));
    uint64_t v28 = *(void *)&v25[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8);
    uint64_t v30 = swift_unknownObjectRetain();
    v29(v30, v28, v26, v27);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  }
  else
  {
    outlined destroy of NewDocumentProvider?((uint64_t)&v48);
  }
  uint64_t v32 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)&v55, (uint64_t)&v48);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v32;
  *(void *)(v33 + 24) = v25;
  long long v34 = v53;
  *(_OWORD *)(v33 + 96) = v52;
  *(_OWORD *)(v33 + 112) = v34;
  *(_OWORD *)(v33 + 128) = v54[0];
  *(_OWORD *)(v33 + 137) = *(_OWORD *)((char *)v54 + 9);
  long long v35 = v49;
  *(_OWORD *)(v33 + 32) = v48;
  *(_OWORD *)(v33 + 48) = v35;
  long long v36 = v51;
  *(_OWORD *)(v33 + 64) = v50;
  *(_OWORD *)(v33 + 80) = v36;
  *(unsigned char *)(v33 + 153) = a2 & 1;
  v47[4] = partial apply for closure #1 in DocumentBrowserViewController.presentDocument(at:animated:);
  v47[5] = v33;
  v47[0] = MEMORY[0x1E4F143A8];
  v47[1] = 1107296256;
  v47[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  void v47[3] = &block_descriptor_68;
  int v37 = _Block_copy(v47);
  long long v38 = v25;
  swift_release();
  objc_msgSend(v38, sel_openWithCompletionHandler_, v37);
  _Block_release(v37);

  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v55);
  return 1;
}

void closure #1 in DocumentBrowserViewController.presentDocument(at:animated:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1)
  {
    uint64_t v8 = a2 + 16;
    swift_beginAccess();
    uint64_t v9 = MEMORY[0x18C119DF0](v8);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      id v11 = DocumentBrowserViewController.makeHost(document:configuration:)(a3, a4);
      id v12 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v11);
      objc_msgSend(v12, sel_loadViewIfNeeded);
      objc_msgSend(v12, sel_setModalPresentationStyle_, 0);
      objc_msgSend(v12, sel_setTransitioningDelegate_, v10);
      objc_msgSend(v10, sel_presentViewController_animated_completion_, v12, a5 & 1, 0);
    }
  }
}

id DocumentBrowserViewController.makeHost(document:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for RootModifier?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IdentifiedDocumentGroupConfiguration>, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, v6 + 32);
  id v7 = objc_allocWithZone((Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation());
  id v8 = IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)(v6, MEMORY[0x1E4FBC860]);
  id v9 = objc_allocWithZone((Class)type metadata accessor for DocumentViewController());
  id v10 = v8;
  id v11 = specialized DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(v10, 0, 0);
  uint64_t v12 = v2 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier;
  swift_beginAccess();
  outlined init with copy of RootModifier(v12, (uint64_t)v33);
  DocumentViewController.rootModifier.setter((uint64_t)v33);
  IdentifiedDocumentGroupDocumentCreation.updateCurrentDocument(with:configuration:)(a1, a2);
  uint64_t v13 = v3 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_configurationMap;
  swift_beginAccess();
  if (*(void *)(*(void *)v13 + 16)
    && (swift_bridgeObjectRetain(),
        specialized __RawDictionaryStorage.find<A>(_:)(a2),
        char v15 = v14,
        swift_bridgeObjectRelease(),
        (v15 & 1) != 0))
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v33);
    uint64_t v16 = DocumentBrowserViewController.configurationMap.modify();
    uint64_t v18 = specialized Dictionary.subscript.modify(v31, (uint64_t)v33);
    if (*v17)
    {
      unint64_t v19 = (void **)v17;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<DocumentViewController>((uint64_t)v29, (uint64_t)v30);
      uint64_t v20 = *v19;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v19 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        *unint64_t v19 = v20;
      }
      unint64_t v23 = v20[2];
      unint64_t v22 = v20[3];
      unint64_t v24 = v23 + 1;
      if (v23 >= v22 >> 1)
      {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v22 > 1), v23 + 1, 1, v20);
        unint64_t v24 = v23 + 1;
        uint64_t v20 = v28;
        *unint64_t v19 = v28;
      }
      _OWORD v20[2] = v24;
      outlined init with take of WeakBox<DocumentViewController>((uint64_t)v30, (uint64_t)&v20[v23 + 4]);
      ((void (*)(void *, void))v18)(v31, 0);
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v33);
      ((void (*)(unsigned char *, void))v16)(v32, 0);
    }
    else
    {
      ((void (*)(void *, void))v18)(v31, 0);
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v33);
      ((void (*)(unsigned char *, void))v16)(v32, 0);
    }
  }
  else
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v33);
    type metadata accessor for WeakBox<DocumentViewController>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<DocumentViewController>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<DocumentViewController>, MEMORY[0x1E4FBBE00]);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_18834BB80;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<DocumentViewController>((uint64_t)v32, v25 + 32);
    swift_beginAccess();
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    v31[0] = *(void *)v13;
    *(void *)uint64_t v13 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, (uint64_t)v33, v26);
    *(void *)uint64_t v13 = v31[0];
    swift_bridgeObjectRelease();
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v33);
    swift_endAccess();
  }

  return v11;
}

uint64_t DocumentBrowserViewController.updateHosts()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_configurationMap);
  swift_beginAccess();
  uint64_t v32 = *v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(*v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(*v1 + 64);
  uint64_t v5 = v0 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier;
  int64_t v33 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v34 = *v1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  id v8 = &OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier;
  id v9 = &type metadata for RootModifier;
  id v10 = &unk_1E902D000;
  id v11 = (unint64_t *)&lazy cache variable for type metadata for RootModifier?;
  uint64_t v37 = v5;
  while (v4)
  {
    unint64_t v12 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v13 = v12 | (v7 << 6);
LABEL_23:
    uint64_t result = *(void *)(*(void *)(v34 + 56) + 8 * v13);
    uint64_t v17 = *(void *)(result + 16);
    if (v17)
    {
      unint64_t v35 = v4;
      int64_t v36 = v7;
      uint64_t v18 = result + 32;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      do
      {
        outlined init with copy of WeakBox<DocumentViewController>(v18, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for WeakBox<DocumentViewController>);
        uint64_t v19 = MEMORY[0x18C119DF0](v42);
        if (v19)
        {
          uint64_t v20 = (char *)v19;
          outlined init with copy of RootModifier(v5, (uint64_t)v41);
          uint64_t v21 = (uint64_t)&v20[*v8];
          swift_beginAccess();
          outlined assign with copy of RootModifier?((uint64_t)v41, v21);
          swift_endAccess();
          outlined init with copy of RootModifier?(v21, (uint64_t)v38);
          if (v39 == 1)
          {
            outlined destroy of DocumentGroupConfiguration?((uint64_t)v38, v11, (uint64_t)v9);
          }
          else
          {
            outlined init with take of RootModifier((uint64_t)v38, (uint64_t)v40);
            uint64_t v22 = MEMORY[0x18C119DF0](&v20[v10[6]]);
            if (v22)
            {
              unint64_t v23 = (void *)v22;
              type metadata accessor for DocumentHostingController(0);
              uint64_t v24 = swift_dynamicCastClass();
              if (v24)
              {
                uint64_t v25 = v24;
                outlined init with copy of RootModifier((uint64_t)v40, (uint64_t)v38);
                char v26 = v11;
                uint64_t v27 = v9;
                uint64_t v28 = v10;
                uint64_t v29 = v8;
                uint64_t v30 = v25 + direct field offset for DocumentHostingController.rootModifier;
                swift_beginAccess();
                uint64_t v31 = v30;
                id v8 = v29;
                id v10 = v28;
                id v9 = v27;
                id v11 = v26;
                uint64_t v5 = v37;
                outlined assign with copy of RootModifier((uint64_t)v38, v31);
                swift_endAccess();
                DocumentHostingController.scenesDidChange(phaseChanged:)(1);
                outlined destroy of RootModifier((uint64_t)v38);
              }
            }
            outlined destroy of RootModifier((uint64_t)v40);
          }
          outlined destroy of DocumentGroupConfiguration?((uint64_t)v41, v11, (uint64_t)v9);
        }
        outlined destroy of WeakBox<DocumentViewController>((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for WeakBox<DocumentViewController>);
        v18 += 8;
        --v17;
      }
      while (v17);
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v4 = v35;
      int64_t v7 = v36;
    }
  }
  int64_t v14 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v33) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v32 + 8 * v14);
  ++v7;
  if (v15) {
    goto LABEL_22;
  }
  int64_t v7 = v14 + 1;
  if (v14 + 1 >= v33) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v32 + 8 * v7);
  if (v15) {
    goto LABEL_22;
  }
  int64_t v7 = v14 + 2;
  if (v14 + 2 >= v33) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v32 + 8 * v7);
  if (v15) {
    goto LABEL_22;
  }
  int64_t v7 = v14 + 3;
  if (v14 + 3 >= v33) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v32 + 8 * v7);
  if (v15)
  {
LABEL_22:
    unint64_t v4 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
    goto LABEL_23;
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v33) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v32 + 8 * v16);
  if (v15)
  {
    int64_t v7 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v7 >= v33) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v32 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

void DocumentBrowserViewController.animationController(forDismissed:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  id v8 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v9 = a1;
  id v10 = objc_msgSend(v8, sel_childViewControllers);
  type metadata accessor for UIViewController();
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_11:
    id v12 = (id)MEMORY[0x18C117680](0, v11);
    goto LABEL_6;
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  id v12 = *(id *)(v11 + 32);
LABEL_6:
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  type metadata accessor for DocumentViewController();
  id v14 = objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_document);
  if (v14)
  {
    unint64_t v15 = v14;
    id v16 = objc_msgSend(v14, sel_fileURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL._bridgeToObjectiveC()(v17);
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    id v20 = objc_msgSend(v2, sel_transitionControllerForDocumentAtURL_, v19);

    id v21 = objc_msgSend(v8, sel_view);
    objc_msgSend(v20, sel_setTargetView_, v21);
  }
  else
  {
  }
}

id DocumentBrowserViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DocumentBrowserViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DocumentBrowserViewController()
{
  return self;
}

uint64_t outlined init with copy of RootModifier?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RootModifier?(0, (unint64_t *)&lazy cache variable for type metadata for RootModifier?, (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DocumentGroupConfiguration?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for RootModifier?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with take of WeakBox<DocumentViewController>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<DocumentViewController>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187FE7490()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(void *a1)
{
  return closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(a1);
}

uint64_t outlined init with copy of NewDocumentProvider?(uint64_t a1, uint64_t a2)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, &lazy cache variable for type metadata for NewDocumentProvider?, &lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NewDocumentProvider?(uint64_t a1)
{
  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, &lazy cache variable for type metadata for NewDocumentProvider?, &lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187FE75E8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187FE7620()
{
  swift_release();

  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(void *)(v0 + 136), *(void *)(v0 + 144), *(unsigned char *)(v0 + 152));

  return swift_deallocObject();
}

void partial apply for closure #1 in DocumentBrowserViewController.presentDocument(at:animated:)(char a1)
{
  closure #1 in DocumentBrowserViewController.presentDocument(at:animated:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32, *(unsigned char *)(v1 + 153));
}

uint64_t outlined destroy of WeakBox<DocumentViewController>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for WeakBox<DocumentViewController>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void specialized DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v59 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  int v64 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  uint64_t v6 = *(void *)(v62 + 64);
  MEMORY[0x1F4188790](v5);
  long long v56 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  long long v61 = (char *)&v52 - v8;
  MEMORY[0x1F4188790](v9);
  long long v60 = (char *)&v52 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v65 = (char *)&v52 - v12;
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_documentConfigurations);
  unint64_t v14 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  unint64_t v15 = 0;
  if (v14) {
    goto LABEL_3;
  }
LABEL_2:
  long long v80 = 0u;
  memset(v81, 0, 25);
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  unint64_t v15 = v14;
  for (long long i = 0u; ; outlined init with copy of IdentifiedDocumentGroupConfiguration(v13 + 32 + (v15++ << 7), (uint64_t)&i))
  {
    outlined init with take of IdentifiedDocumentGroupConfiguration?((uint64_t)&i, (uint64_t)&v68);
    if (!*((void *)&v68 + 1)) {
      goto LABEL_10;
    }
    v66[4] = v72;
    v66[5] = v73;
    v67[0] = v74[0];
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)((char *)v74 + 9);
    v66[0] = v68;
    v66[1] = v69;
    v66[2] = v70;
    v66[3] = v71;
    outlined init with copy of DocumentGroupConfiguration((uint64_t)v66, (uint64_t)&v82);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v66);
    if (!*((void *)&v82 + 1))
    {
LABEL_10:
      long long v89 = 0u;
      long long v90 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      uint64_t v95 = 0;
      swift_bridgeObjectRelease();
LABEL_11:
      outlined destroy of DocumentGroupConfiguration?((uint64_t)&v89, (unint64_t *)&lazy cache variable for type metadata for DocumentGroupConfiguration?, (uint64_t)&type metadata for DocumentGroupConfiguration);
      return;
    }
    long long v79 = v86;
    long long v80 = v87;
    v81[0] = v88;
    long long i = v82;
    long long v76 = v83;
    long long v77 = v84;
    long long v78 = v85;
    if ((v82 & 1) == 0) {
      break;
    }
    outlined destroy of DocumentGroupConfiguration((uint64_t)&i);
    if (v15 == v14) {
      goto LABEL_2;
    }
LABEL_3:
    if (v15 >= *(void *)(v13 + 16))
    {
      __break(1u);
LABEL_19:
      __break(1u);
      return;
    }
  }
  long long v93 = v86;
  long long v94 = v87;
  uint64_t v95 = v88;
  long long v89 = v82;
  long long v90 = v83;
  long long v91 = v84;
  long long v92 = v85;
  swift_bridgeObjectRelease();
  if (!*((void *)&v89 + 1)) {
    goto LABEL_11;
  }
  long long v79 = v93;
  long long v80 = v94;
  v81[0] = v95;
  long long i = v89;
  long long v76 = v90;
  long long v77 = v91;
  long long v78 = v92;
  id v16 = objc_msgSend(self, sel_defaultManager);
  id v17 = objc_msgSend(v16, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v19 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  v96._object = (void *)0x800000018832CC80;
  v20._countAndFlagsBits = 0x64656C7469746E55;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0x746E656D75636F44;
  v21.value._object = (void *)0xE900000000000073;
  v22._countAndFlagsBits = 0x64656C7469746E55;
  v22._object = (void *)0xE800000000000000;
  v96._countAndFlagsBits = 0xD00000000000001DLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v96);

  if (!*(void *)(*((void *)&v80 + 1) + 16)) {
    goto LABEL_19;
  }
  uint64_t v55 = v3;
  (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v64, *((void *)&v80 + 1) + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), v59);
  uint64_t v23 = v60;
  URL.appendingPathComponent(_:conformingTo:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = *((void *)&i + 1);
  uint64_t v25 = v76;
  uint64_t v26 = (*(uint64_t (**)(void, void))(v76 + 8))(*((void *)&i + 1), v76);
  uint64_t v27 = v61;
  long long v53 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
  uint64_t v54 = v62 + 16;
  v53(v61, v23, v63);
  uint64_t v28 = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 120))(v27, v24, v25);
  outlined init with copy of NewDocumentProvider?((uint64_t)&v76 + 8, (uint64_t)&v68);
  uint64_t v29 = *((void *)&v69 + 1);
  if (*((void *)&v69 + 1))
  {
    uint64_t v30 = v70;
    __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
    uint64_t v31 = *(void *)&v28[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 8);
    uint64_t v33 = swift_unknownObjectRetain();
    v32(v33, v31, v29, v30);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
  }
  else
  {
    outlined destroy of NewDocumentProvider?((uint64_t)&v68);
  }
  uint64_t v34 = *(void *)&v28[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8];
  uint64_t ObjectType = swift_getObjectType();
  int64_t v36 = *(void (**)(void, uint64_t, uint64_t))(v34 + 40);
  swift_unknownObjectRetain();
  v36(0, ObjectType, v34);
  swift_unknownObjectRelease();
  id v37 = objc_msgSend(v28, sel_fileURL);
  long long v38 = v61;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v39);
  long long v52 = v40;
  uint64_t v41 = v56;
  uint64_t v42 = v28;
  uint64_t v43 = v63;
  v53(v56, v38, v63);
  uint64_t v44 = v62;
  unint64_t v45 = (*(unsigned __int8 *)(v62 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80);
  uint64_t v46 = (char *)swift_allocObject();
  uint64_t v47 = v58;
  *((void *)v46 + 2) = v57;
  *((void *)v46 + 3) = v47;
  *((void *)v46 + 4) = v42;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v46[v45], v41, v43);
  *(void *)&long long v70 = partial apply for closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:);
  *((void *)&v70 + 1) = v46;
  *(void *)&long long v68 = MEMORY[0x1E4F143A8];
  *((void *)&v68 + 1) = 1107296256;
  *(void *)&long long v69 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  *((void *)&v69 + 1) = &block_descriptor_29_1;
  long long v48 = _Block_copy(&v68);
  swift_retain();
  id v49 = v42;
  swift_release();
  long long v50 = v52;
  objc_msgSend(v49, sel_saveToURL_forSaveOperation_completionHandler_, v52, 0, v48);
  _Block_release(v48);

  long long v51 = *(void (**)(char *, uint64_t))(v44 + 8);
  v51(v38, v43);
  v51(v60, v43);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v64, v59);
  v51(v65, v43);
  outlined destroy of DocumentGroupConfiguration((uint64_t)&i);
}

uint64_t specialized DocumentBrowserViewController.documentBrowser(_:didPickDocumentsAt:)(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t, double))(v6 + 16))(v4, a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
      DocumentBrowserViewController.presentDocument(at:animated:)((uint64_t)v9, 1);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v6 + 56))(v4, 1, 1, v5, v7);
  }
  return outlined destroy of WeakBox<DocumentViewController>((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for URL?);
}

void specialized DocumentBrowserViewController.documentBrowser(_:failedToImportDocumentAt:error:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v5 = self;
  id v6 = objc_msgSend(v5, sel_bundleForClass_, ObjCClassFromMetadata);
  v42._countAndFlagsBits = 0xD000000000000037;
  v42._object = (void *)0x800000018833E1F0;
  v7._object = (void *)0x800000018833E1C0;
  v7._countAndFlagsBits = 0xD000000000000020;
  v8.value._countAndFlagsBits = 0x746E656D75636F44;
  v8.value._object = (void *)0xE900000000000073;
  v9._countAndFlagsBits = 0xD000000000000020;
  v9._object = (void *)0x800000018833E1C0;
  Swift::String v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v42);

  id v11 = objc_msgSend(v5, sel_bundleForClass_, ObjCClassFromMetadata);
  v43._countAndFlagsBits = 0xD000000000000081;
  v43._object = (void *)0x800000018833E270;
  v12._object = (void *)0x800000018833E230;
  v12._countAndFlagsBits = 0x1000000000000031;
  v13.value._countAndFlagsBits = 0x746E656D75636F44;
  v13.value._object = (void *)0xE900000000000073;
  v14._countAndFlagsBits = 0x1000000000000031;
  v14._object = (void *)0x800000018833E230;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v43);

  if (a3)
  {
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    unint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v17 = 0xE000000000000000;
  }
  id v18 = objc_msgSend(self, sel_defaultManager);
  uint64_t v19 = URL.absoluteString.getter();
  Swift::String v20 = (void *)MEMORY[0x18C115780](v19);
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v18, sel_displayNameAtPath_, v20);

  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;

  _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (unint64_t *)&lazy cache variable for type metadata for CVarArg, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_18834BB70;
  uint64_t v26 = MEMORY[0x1E4FBB1A0];
  *(void *)(v25 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v27 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v25 + 32) = v22;
  *(void *)(v25 + 40) = v24;
  *(void *)(v25 + 96) = v26;
  *(void *)(v25 + 104) = v27;
  *(void *)(v25 + 64) = v27;
  *(void *)(v25 + 72) = v15;
  *(void *)(v25 + 80) = v17;
  uint64_t v28 = String.init(format:_:)();
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  id v31 = objc_msgSend(v5, sel_bundleForClass_, ObjCClassFromMetadata);
  v44._countAndFlagsBits = 0xD000000000000029;
  v44._object = (void *)0x800000018833E300;
  v32._countAndFlagsBits = 19279;
  v32._object = (void *)0xE200000000000000;
  v33.value._countAndFlagsBits = 0x746E656D75636F44;
  v33.value._object = (void *)0xE900000000000073;
  v34._countAndFlagsBits = 19279;
  v34._object = (void *)0xE200000000000000;
  Swift::String v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v44);

  int64_t v36 = (void *)MEMORY[0x18C115780](v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease();
  id v37 = (void *)MEMORY[0x18C115780](v28, v30);
  swift_bridgeObjectRelease();
  id v38 = objc_msgSend(self, sel_alertControllerWithTitle_message_preferredStyle_, v36, v37, 1);

  uint64_t v39 = (void *)MEMORY[0x18C115780](v35._countAndFlagsBits, v35._object);
  swift_bridgeObjectRelease();
  id v40 = objc_msgSend(self, sel_actionWithTitle_style_handler_, v39, 1, 0);

  objc_msgSend(v38, sel_addAction_, v40);
  objc_msgSend(a1, sel_presentViewController_animated_completion_, v38, 1, 0);
}

void specialized DocumentBrowserViewController.animationController(forPresented:presenting:source:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  Swift::String v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  self;
  Swift::String_optional v8 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v9 = a1;
  id v10 = objc_msgSend(v8, sel_childViewControllers);
  type metadata accessor for UIViewController();
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v11 >> 62))
  {
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_11:
    id v12 = (id)MEMORY[0x18C117680](0, v11);
    goto LABEL_6;
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return;
  }
  id v12 = *(id *)(v11 + 32);
LABEL_6:
  Swift::String_optional v13 = v12;
  swift_bridgeObjectRelease();
  type metadata accessor for DocumentViewController();
  id v14 = objc_msgSend((id)swift_dynamicCastClassUnconditional(), sel_document);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = objc_msgSend(v14, sel_fileURL);
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    URL._bridgeToObjectiveC()(v17);
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    id v20 = objc_msgSend(v2, sel_transitionControllerForDocumentAtURL_, v19);

    id v21 = objc_msgSend(v8, sel_view);
    objc_msgSend(v20, sel_setTargetView_, v21);

    id v22 = objc_msgSend(v15, sel_progress);
    objc_msgSend(v20, sel_setLoadingProgress_, v22);
  }
  else
  {
  }
}

uint64_t sub_187FE8814()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t outlined init with take of IdentifiedDocumentGroupConfiguration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RootModifier?(0, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for RootModifier?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_187FE8920()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = (void (*)(char *, void))v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(a1, v4, v5, v6, v7);
}

uint64_t sub_187FE8A6C()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void (**)(char *, uint64_t))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in closure #2 in DocumentBrowserViewController.documentBrowser(_:didRequestDocumentCreationWithHandler:)(a1, v4, v5, v6);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI11GeneralItem33_69F00159ECCD7162D5EDC19B53BBB085LLVs5NeverOTg503_s7d42UI10GridLayoutV5CacheV13sizeGenerally33_69hijklm9LLyyFAA11fG12AGLLVSiXEfU_AG0qR0V0T0VAG4AxisO3SetVTf1cn_n(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v35 = result;
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result)) {
    goto LABEL_32;
  }
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (!v4) {
    return v5;
  }
  uint64_t v7 = a2;
  uint64_t v37 = MEMORY[0x1E4FBC860];
  uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if (v7 < v35 || v4 < 0) {
    goto LABEL_33;
  }
  uint64_t v32 = v7;
  uint64_t v5 = v37;
  unint64_t v8 = v35;
  uint64_t v9 = 104 * v35 + 112;
  uint64_t v33 = a3;
  while (v7 != v8)
  {
    uint64_t result = LayoutSubviews.subscript.getter();
    if (v35 < 0) {
      goto LABEL_30;
    }
    uint64_t v10 = *(void *)(a3 + 136);
    if (v8 >= *(void *)(v10 + 16)) {
      goto LABEL_31;
    }
    int v11 = *a4;
    int v36 = *(unsigned __int8 *)(v10 + v9);
    LayoutProxy.layoutPriority.getter();
    uint64_t v13 = v12;
    static ProposedViewSize.zero.getter();
    LayoutSubview.sizeThatFits(_:)();
    double v15 = v14;
    double v17 = v16;
    static ProposedViewSize.infinity.getter();
    uint64_t result = LayoutSubview.sizeThatFits(_:)();
    if (v11 == 1)
    {
      double v27 = v15;
      uint64_t v7 = v32;
      a3 = v33;
    }
    else
    {
      uint64_t v7 = v32;
      if (v11 == 3)
      {
        double v20 = v15 + v17;
        double v21 = v18 + v19 - (v15 + v17);
        double v22 = v18 - v15;
        double v23 = v19 - v17;
        if (v23 < v22) {
          double v22 = v23;
        }
        if ((~*(void *)&v21 & 0x7FF0000000000000) != 0) {
          double v24 = 0.0;
        }
        else {
          double v24 = v22;
        }
        double v25 = -v20;
        if ((~*(void *)&v24 & 0x7FF0000000000000) != 0) {
          double v26 = 0.0;
        }
        else {
          double v26 = -v20;
        }
        a3 = v33;
        goto LABEL_25;
      }
      double v18 = v19;
      double v27 = v17;
      a3 = v33;
    }
    double v21 = v18 - v27;
    double v28 = v18 - v27;
    double v25 = -v27;
    double v26 = 0.0;
    if ((~*(void *)&v28 & 0x7FF0000000000000) != 0) {
      double v24 = 0.0;
    }
    else {
      double v24 = -v27;
    }
LABEL_25:
    unint64_t v30 = *(void *)(v37 + 16);
    unint64_t v29 = *(void *)(v37 + 24);
    if (v30 >= v29 >> 1) {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1);
    }
    LODWORD(v25) = v36 & v11;
    *(void *)(v37 + 16) = v30 + 1;
    uint64_t v31 = v37 + (v30 << 6);
    *(void *)(v31 + 32) = v8;
    *(void *)(v31 + 40) = v13;
    *(double *)(v31 + 48) = v15;
    *(double *)(v31 + 56) = v17;
    *(double *)(v31 + 64) = v21;
    *(double *)(v31 + 72) = v24;
    *(double *)(v31 + 80) = v26;
    *(unsigned char *)(v31 + 88) = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)&v25));
    ++v8;
    v9 += 104;
    if (v7 == v8) {
      return v5;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Grid._tree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t Grid._tree.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*Grid._tree.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t Grid.init(alignment:horizontalSpacing:verticalSpacing:content:)()
{
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t closure #1 in Grid.init(alignment:horizontalSpacing:verticalSpacing:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

uint64_t partial apply for closure #1 in Grid.init(alignment:horizontalSpacing:verticalSpacing:content:)()
{
  return closure #1 in Grid.init(alignment:horizontalSpacing:verticalSpacing:content:)(v0[4], v0[5], v0[2]);
}

uint64_t static Grid._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static Grid._makeView(view:inputs:)(uint64_t a1)
{
  v5[2] = type metadata accessor for Grid();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t partial apply for closure #1 in static Grid._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static Grid._makeView(view:inputs:)(a1);
}

uint64_t type metadata accessor for Grid()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Grid<A>()
{
  return static Grid._makeView(view:inputs:)();
}

uint64_t GridRow.alignment.getter()
{
  return *(void *)v0;
}

uint64_t GridRow.alignment.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*GridRow.alignment.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridRow.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 36));
}

uint64_t GridRow.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 36), a1);
}

uint64_t (*GridRow.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static GridRow._makeView(view:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 20);
  LODWORD(v17) = *a1;
  type metadata accessor for GridRow();
  type metadata accessor for _GraphValue();
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  long long v15 = *(_OWORD *)(a2 + 7);
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[9];
  _GraphValue.subscript.getter();
  uint64_t v17 = v7;
  int v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v11;
  uint64_t v21 = v12;
  long long v22 = v16;
  long long v23 = v15;
  uint64_t v24 = v13;
  int v25 = v10;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(v26, &v17, a3, a4);
}

uint64_t partial apply for closure #1 in static GridRow._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static GridRow._makeView(view:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t static GridRow._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v6 = *a1;
  int v7 = v3;
  uint64_t v8 = v4;
  return (*(uint64_t (**)(long long *))(a3 + 40))(&v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GridRow<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static GridRow._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance GridRow<A>(long long *a1, uint64_t a2)
{
  return static GridRow._viewListCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for Rule.value.getter in conformance RowTransformTrait@<X0>(void *a1@<X8>)
{
  return RowTransformTrait.value.getter(*v1, a1);
}

uint64_t View.gridCellColumns(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  char v5 = 0;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _GridCellSizeModifier, a3);
}

uint64_t View.gridCellAnchor(_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)char v5 = a3;
  *(double *)&v5[1] = a4;
  return MEMORY[0x18C113660](v5, a1, &type metadata for _GridAnchorModifier, a2);
}

uint64_t View.gridCellUnsizedAxes(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _GridUnsizedAxesModifier, a3);
}

uint64_t View.gridCell(x:y:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result > 0x7FFFFFFF)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if ((int)a2 < (int)result)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (result < (uint64_t)0xFFFFFFFF80000000
    || a2 < (uint64_t)0xFFFFFFFF80000000
    || a3 < (uint64_t)0xFFFFFFFF80000000
    || a4 < (uint64_t)0xFFFFFFFF80000000)
  {
    goto LABEL_16;
  }
  if (a4 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((int)a4 >= (int)a3)
  {
    v6[0] = result;
    v6[1] = a2;
    _OWORD v6[2] = a3;
    v6[3] = a4;
    return MEMORY[0x18C113660](v6, a5, &type metadata for _GridCellRangeModifier, a6);
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t View.gridRowAlignment(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _GridAlignmentModifier, a3);
}

uint64_t _GridCellRangeModifier.horizontal.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_GridCellRangeModifier.horizontal.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _GridCellRangeModifier.vertical.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _GridCellRangeModifier.vertical.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_GridCellRangeModifier.vertical.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridCellRangeModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 28);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unsigned int v21 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 72);
  char v17 = *(unsigned char *)(a2 + 80);
  int v18 = *(_DWORD *)(a2 + 64);
  unint64_t v33 = *(void *)a2;
  int v34 = v3;
  uint64_t v35 = v4;
  *(void *)&long long v36 = __PAIR64__(v6, v5);
  *((void *)&v36 + 1) = __PAIR64__(v21, v7);
  uint64_t v37 = v8;
  *(void *)&long long v38 = v20;
  *((void *)&v38 + 1) = v19;
  int v39 = v18;
  unint64_t v40 = v9;
  char v41 = v17;
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for _GraphValue<_GridCellRangeModifier>, (uint64_t)&type metadata for _GridCellRangeModifier, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v10 = _GraphValue.value.getter();
  unint64_t v24 = v33;
  int v25 = v3;
  uint64_t v26 = v4;
  *(void *)&long long v27 = __PAIR64__(v6, v5);
  *((void *)&v27 + 1) = __PAIR64__(v21, v7);
  uint64_t v28 = v8;
  *(void *)&long long v29 = v20;
  *((void *)&v29 + 1) = v19;
  int v30 = v18;
  unint64_t v31 = v9;
  char v32 = v17;
  uint64_t v11 = _ViewListInputs.traits.getter();
  unsigned int v12 = *MEMORY[0x1E4F4E7A0];
  if ((v11 & 0x100000000) == 0) {
    unsigned int v12 = v11;
  }
  unint64_t v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  char v13 = v41;
  if (v40)
  {
    unint64_t v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    unint64_t v14 = v24;
    char v13 = v25;
  }
  else
  {
    unint64_t v14 = 0;
  }
  unint64_t v24 = v33;
  int v25 = v34;
  uint64_t v26 = v35;
  long long v27 = v36;
  uint64_t v28 = v37;
  long long v29 = v38;
  int v30 = v39;
  unint64_t v31 = v14;
  char v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridCellRangeModifier.CellRangeTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v14 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  uint64_t Value = (unsigned int *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v5 = Value[1];
  uint64_t v6 = Value[2];
  uint64_t v7 = Value[3];
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v8 = (char *)v13;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1, (char *)v13);
  }
  unint64_t v10 = *((void *)v8 + 2);
  unint64_t v9 = *((void *)v8 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v8);
  }
  *((void *)v8 + 2) = v10 + 1;
  uint64_t v11 = &v8[24 * v10];
  *((void *)v11 + 4) = v4 | (v6 << 32);
  *((void *)v11 + 5) = v5 | (v7 << 32);
  v11[48] = 0;
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v14;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridCellRangeModifier.CellRangeTrait@<X0>(void *a1@<X8>)
{
  return _GridCellRangeModifier.CellRangeTrait.value.getter(*v1, a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridCellRangeModifier()
{
}

uint64_t _GridCellSizeModifier.count.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_GridCellSizeModifier.count.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _GridCellSizeModifier.axis.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t _GridCellSizeModifier.axis.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result & 1;
  return result;
}

uint64_t (*_GridCellSizeModifier.axis.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridCellSizeModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 28);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unsigned int v21 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 72);
  char v17 = *(unsigned char *)(a2 + 80);
  int v18 = *(_DWORD *)(a2 + 64);
  unint64_t v33 = *(void *)a2;
  int v34 = v3;
  uint64_t v35 = v4;
  *(void *)&long long v36 = __PAIR64__(v6, v5);
  *((void *)&v36 + 1) = __PAIR64__(v21, v7);
  uint64_t v37 = v8;
  *(void *)&long long v38 = v20;
  *((void *)&v38 + 1) = v19;
  int v39 = v18;
  unint64_t v40 = v9;
  char v41 = v17;
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for _GraphValue<_GridCellSizeModifier>, (uint64_t)&type metadata for _GridCellSizeModifier, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v10 = _GraphValue.value.getter();
  unint64_t v24 = v33;
  int v25 = v3;
  uint64_t v26 = v4;
  *(void *)&long long v27 = __PAIR64__(v6, v5);
  *((void *)&v27 + 1) = __PAIR64__(v21, v7);
  uint64_t v28 = v8;
  *(void *)&long long v29 = v20;
  *((void *)&v29 + 1) = v19;
  int v30 = v18;
  unint64_t v31 = v9;
  char v32 = v17;
  uint64_t v11 = _ViewListInputs.traits.getter();
  unsigned int v12 = *MEMORY[0x1E4F4E7A0];
  if ((v11 & 0x100000000) == 0) {
    unsigned int v12 = v11;
  }
  unint64_t v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  char v13 = v41;
  if (v40)
  {
    unint64_t v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    unint64_t v14 = v24;
    char v13 = v25;
  }
  else
  {
    unint64_t v14 = 0;
  }
  unint64_t v24 = v33;
  int v25 = v34;
  uint64_t v26 = v35;
  long long v27 = v36;
  uint64_t v28 = v37;
  long long v29 = v38;
  int v30 = v39;
  unint64_t v31 = v14;
  char v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridCellSizeModifier.MergedCellTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(a1, (void (*)(unsigned char *, uint64_t))_GridCellSizeModifier.MergedCellTrait.update(data:), a2);
}

uint64_t _GridCellSizeModifier.MergedCellTrait.update(data:)(uint64_t *a1)
{
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (!v4)
  {
LABEL_5:
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 + 1, 1, (char *)v3);
      uint64_t v3 = result;
    }
    unint64_t v9 = *(void *)(v3 + 16);
    unint64_t v8 = *(void *)(v3 + 24);
    if (v9 >= v8 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v3);
      uint64_t v3 = result;
    }
    *(void *)(v3 + 16) = v9 + 1;
    uint64_t v10 = v3 + 24 * v9;
    *(void *)(v10 + 32) = v2;
    uint64_t v11 = v10 + 32;
    goto LABEL_14;
  }
  unint64_t v5 = 0;
  uint64_t v6 = 32;
  while ((*(unsigned char *)(v3 + v6 + 16) & 0xE0) != 0x40)
  {
    ++v5;
    v6 += 24;
    if (v4 == v5) {
      goto LABEL_5;
    }
  }
  uint64_t v12 = *(void *)(v3 + v6);
  uint64_t v13 = v2 * v12;
  if ((unsigned __int128)(v2 * (__int128)v12) >> 64 == (v2 * v12) >> 63)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_12;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  uint64_t v3 = result;
LABEL_12:
  if (v5 < *(void *)(v3 + 16))
  {
    uint64_t v11 = v3 + v6;
    *(void *)(v3 + v6) = v13;
LABEL_14:
    *(void *)(v11 + 8) = 0;
    *(unsigned char *)(v11 + 16) = 64;
    *a1 = v3;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridCellSizeModifier.MergedCellTrait@<X0>(void *a1@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(*v1, (void (*)(unsigned char *, uint64_t))_GridCellSizeModifier.MergedCellTrait.update(data:), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridCellSizeModifier()
{
}

void _GridAnchorModifier.anchor.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*_GridAnchorModifier.anchor.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridAnchorModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 28);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unsigned int v21 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 72);
  char v17 = *(unsigned char *)(a2 + 80);
  int v18 = *(_DWORD *)(a2 + 64);
  unint64_t v33 = *(void *)a2;
  int v34 = v3;
  uint64_t v35 = v4;
  *(void *)&long long v36 = __PAIR64__(v6, v5);
  *((void *)&v36 + 1) = __PAIR64__(v21, v7);
  uint64_t v37 = v8;
  *(void *)&long long v38 = v20;
  *((void *)&v38 + 1) = v19;
  int v39 = v18;
  unint64_t v40 = v9;
  char v41 = v17;
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for _GraphValue<_GridAnchorModifier>, (uint64_t)&type metadata for _GridAnchorModifier, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v10 = _GraphValue.value.getter();
  unint64_t v24 = v33;
  int v25 = v3;
  uint64_t v26 = v4;
  *(void *)&long long v27 = __PAIR64__(v6, v5);
  *((void *)&v27 + 1) = __PAIR64__(v21, v7);
  uint64_t v28 = v8;
  *(void *)&long long v29 = v20;
  *((void *)&v29 + 1) = v19;
  int v30 = v18;
  unint64_t v31 = v9;
  char v32 = v17;
  uint64_t v11 = _ViewListInputs.traits.getter();
  unsigned int v12 = *MEMORY[0x1E4F4E7A0];
  if ((v11 & 0x100000000) == 0) {
    unsigned int v12 = v11;
  }
  unint64_t v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  char v13 = v41;
  if (v40)
  {
    unint64_t v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    unint64_t v14 = v24;
    char v13 = v25;
  }
  else
  {
    unint64_t v14 = 0;
  }
  unint64_t v24 = v33;
  int v25 = v34;
  uint64_t v26 = v35;
  long long v27 = v36;
  uint64_t v28 = v37;
  long long v29 = v38;
  int v30 = v39;
  unint64_t v31 = v14;
  char v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridAnchorModifier.AnchoredCellTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v10 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v8 = *(_OWORD *)AGGraphGetValue();
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  int v3 = (char *)v9;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
  }
  unint64_t v5 = *((void *)v3 + 2);
  unint64_t v4 = *((void *)v3 + 3);
  if (v5 >= v4 >> 1) {
    int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v3);
  }
  *((void *)v3 + 2) = v5 + 1;
  unsigned int v6 = &v3[24 * v5];
  *((_OWORD *)v6 + 2) = v8;
  v6[48] = 96;
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v10;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridAnchorModifier.AnchoredCellTrait@<X0>(void *a1@<X8>)
{
  return _GridAnchorModifier.AnchoredCellTrait.value.getter(*v1, a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridAnchorModifier()
{
}

uint64_t _GridAlignmentModifier.alignment.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_GridAlignmentModifier.alignment.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridAlignmentModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 28);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unsigned int v21 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 72);
  char v17 = *(unsigned char *)(a2 + 80);
  int v18 = *(_DWORD *)(a2 + 64);
  unint64_t v33 = *(void *)a2;
  int v34 = v3;
  uint64_t v35 = v4;
  *(void *)&long long v36 = __PAIR64__(v6, v5);
  *((void *)&v36 + 1) = __PAIR64__(v21, v7);
  uint64_t v37 = v8;
  *(void *)&long long v38 = v20;
  *((void *)&v38 + 1) = v19;
  int v39 = v18;
  unint64_t v40 = v9;
  char v41 = v17;
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for _GraphValue<_GridAlignmentModifier>, (uint64_t)&type metadata for _GridAlignmentModifier, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v10 = _GraphValue.value.getter();
  unint64_t v24 = v33;
  int v25 = v3;
  uint64_t v26 = v4;
  *(void *)&long long v27 = __PAIR64__(v6, v5);
  *((void *)&v27 + 1) = __PAIR64__(v21, v7);
  uint64_t v28 = v8;
  *(void *)&long long v29 = v20;
  *((void *)&v29 + 1) = v19;
  int v30 = v18;
  unint64_t v31 = v9;
  char v32 = v17;
  uint64_t v11 = _ViewListInputs.traits.getter();
  unsigned int v12 = *MEMORY[0x1E4F4E7A0];
  if ((v11 & 0x100000000) == 0) {
    unsigned int v12 = v11;
  }
  unint64_t v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  char v13 = v41;
  if (v40)
  {
    unint64_t v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    unint64_t v14 = v24;
    char v13 = v25;
  }
  else
  {
    unint64_t v14 = 0;
  }
  unint64_t v24 = v33;
  int v25 = v34;
  uint64_t v26 = v35;
  long long v27 = v36;
  uint64_t v28 = v37;
  long long v29 = v38;
  int v30 = v39;
  unint64_t v31 = v14;
  char v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridAlignmentModifier.AlignedCellTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(a1, (void (*)(unsigned char *, uint64_t))_GridAlignmentModifier.AlignedCellTrait.update(data:), a2);
}

uint64_t _GridAlignmentModifier.AlignedCellTrait.update(data:)(uint64_t *a1)
{
  uint64_t v2 = *(void *)AGGraphGetValue();
  AlignmentKey.id.getter();
  if (v2)
  {
    uint64_t v11 = VerticalAlignment.init(_:)();
    uint64_t v4 = *a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }
    unint64_t v13 = *(void *)(v4 + 16);
    unint64_t v12 = *(void *)(v4 + 24);
    if (v13 >= v12 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }
    *(void *)(v4 + 16) = v13 + 1;
    unint64_t v14 = v4 + 24 * v13;
    *(void *)(v14 + 32) = v11;
    unint64_t v9 = v14 + 32;
    char v10 = -96;
  }
  else
  {
    uint64_t v3 = AlignmentKey.init(id:axis:)();
    uint64_t v4 = *a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }
    unint64_t v7 = *(void *)(v4 + 16);
    unint64_t v6 = *(void *)(v4 + 24);
    if (v7 >= v6 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, (char *)v4);
      uint64_t v4 = result;
    }
    *(void *)(v4 + 16) = v7 + 1;
    unint64_t v8 = v4 + 24 * v7;
    *(void *)(v8 + 32) = v3;
    unint64_t v9 = v8 + 32;
    char v10 = 0x80;
  }
  *(void *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 16) = v10;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridAlignmentModifier.AlignedCellTrait@<X0>(void *a1@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(*v1, (void (*)(unsigned char *, uint64_t))_GridAlignmentModifier.AlignedCellTrait.update(data:), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridAlignmentModifier()
{
}

uint64_t _GridUnsizedAxesModifier.axes.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_GridUnsizedAxesModifier.axes.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GridUnsizedAxesModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 28);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unsigned int v21 = *(_DWORD *)(a2 + 36);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 56);
  uint64_t v20 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 72);
  char v17 = *(unsigned char *)(a2 + 80);
  int v18 = *(_DWORD *)(a2 + 64);
  unint64_t v33 = *(void *)a2;
  int v34 = v3;
  uint64_t v35 = v4;
  *(void *)&long long v36 = __PAIR64__(v6, v5);
  *((void *)&v36 + 1) = __PAIR64__(v21, v7);
  uint64_t v37 = v8;
  *(void *)&long long v38 = v20;
  *((void *)&v38 + 1) = v19;
  int v39 = v18;
  unint64_t v40 = v9;
  char v41 = v17;
  type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for _GraphValue<_GridUnsizedAxesModifier>, (uint64_t)&type metadata for _GridUnsizedAxesModifier, MEMORY[0x1E4F3F590]);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v10 = _GraphValue.value.getter();
  unint64_t v24 = v33;
  int v25 = v3;
  uint64_t v26 = v4;
  *(void *)&long long v27 = __PAIR64__(v6, v5);
  *((void *)&v27 + 1) = __PAIR64__(v21, v7);
  uint64_t v28 = v8;
  *(void *)&long long v29 = v20;
  *((void *)&v29 + 1) = v19;
  int v30 = v18;
  unint64_t v31 = v9;
  char v32 = v17;
  uint64_t v11 = _ViewListInputs.traits.getter();
  unsigned int v12 = *MEMORY[0x1E4F4E7A0];
  if ((v11 & 0x100000000) == 0) {
    unsigned int v12 = v11;
  }
  unint64_t v24 = __PAIR64__(v12, v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait();
  Attribute.init<A>(body:value:flags:update:)();
  LOBYTE(v24) = 0;
  _ViewListInputs.traits.setter();
  char v13 = v41;
  if (v40)
  {
    unint64_t v24 = v40;
    LOBYTE(v25) = v41 & 1;
    specialized Set._Variant.insert(_:)(&v23, (uint64_t)&type metadata for GridMetadata);
    unint64_t v14 = v24;
    char v13 = v25;
  }
  else
  {
    unint64_t v14 = 0;
  }
  unint64_t v24 = v33;
  int v25 = v34;
  uint64_t v26 = v35;
  long long v27 = v36;
  uint64_t v28 = v37;
  long long v29 = v38;
  int v30 = v39;
  unint64_t v31 = v14;
  char v32 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v24);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t _GridUnsizedAxesModifier.UnsizedAxesCellTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(a1, (void (*)(unsigned char *, uint64_t))_GridUnsizedAxesModifier.UnsizedAxesCellTrait.update(data:), a2);
}

uint64_t _GridCellSizeModifier.MergedCellTrait.value.getter@<X0>(uint64_t a1@<X0>, void (*a2)(unsigned char *, uint64_t)@<X1>, void *a3@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v8 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  a2(v7, a1);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a3 = v8;
  return result;
}

uint64_t _GridUnsizedAxesModifier.UnsizedAxesCellTrait.update(data:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3)
  {
LABEL_5:
    uint64_t v6 = *(unsigned __int8 *)AGGraphGetValue();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 + 1, 1, (char *)v2);
      uint64_t v2 = result;
    }
    unint64_t v9 = *(void *)(v2 + 16);
    unint64_t v8 = *(void *)(v2 + 24);
    if (v9 >= v8 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v2);
      uint64_t v2 = result;
    }
    *(void *)(v2 + 16) = v9 + 1;
    uint64_t v10 = v2 + 24 * v9;
    *(void *)(v10 + 32) = v6;
    uint64_t v11 = v10 + 32;
    goto LABEL_14;
  }
  unint64_t v4 = 0;
  uint64_t v5 = 32;
  while ((*(unsigned char *)(v2 + v5 + 16) & 0xE0) != 0xC0)
  {
    ++v4;
    v5 += 24;
    if (v3 == v4) {
      goto LABEL_5;
    }
  }
  char v12 = *(unsigned char *)(v2 + v5);
  char v13 = *(unsigned char *)AGGraphGetValue();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = result;
  }
  if (v4 < *(void *)(v2 + 16))
  {
    uint64_t v11 = v2 + v5;
    *(void *)(v2 + v5) = (v13 | v12);
LABEL_14:
    *(void *)(v11 + 8) = 0;
    *(unsigned char *)(v11 + 16) = -64;
    *a1 = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait@<X0>(void *a1@<X8>)
{
  return _GridCellSizeModifier.MergedCellTrait.value.getter(*v1, (void (*)(unsigned char *, uint64_t))_GridUnsizedAxesModifier.UnsizedAxesCellTrait.update(data:), a1);
}

void protocol witness for ViewModifier.body(content:) in conformance _GridUnsizedAxesModifier()
{
}

uint64_t GridLayout.alignment.getter()
{
  return *(void *)v0;
}

uint64_t GridLayout.alignment.setter(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = result;
  v2[1] = a2;
  return result;
}

uint64_t (*GridLayout.alignment.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.horizontalSpacing.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t GridLayout.horizontalSpacing.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*GridLayout.horizontalSpacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.verticalSpacing.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t GridLayout.verticalSpacing.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*GridLayout.verticalSpacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static GridLayout._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static GridLayout._makeView(root:inputs:body:)(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type GridLayout and conformance GridLayout);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type GridLayout and conformance GridLayout);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for GridLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance GridLayout(uint64_t a1)
{
}

uint64_t GridLayout.makeCache(subviews:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  char v6 = *((unsigned char *)a1 + 16);
  char v7 = *((unsigned char *)a1 + 17);
  *(void *)(a2 + 72) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(unsigned char *)(a2 + 96) = 1;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 104) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 112) = v8;
  *(void *)(a2 + 120) = v8;
  *(void *)(a2 + 128) = v8;
  uint64_t v9 = MEMORY[0x1E4FBC868];
  *(void *)(a2 + 136) = v8;
  *(void *)(a2 + 144) = v9;
  long long v10 = *v2;
  long long v11 = v2[1];
  *(_OWORD *)(a2 + 25) = *(long long *)((char *)v2 + 25);
  *(_OWORD *)a2 = v10;
  *(_OWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(unsigned char *)(a2 + 64) = v6;
  *(unsigned char *)(a2 + 65) = v7;
  swift_bridgeObjectRetain();
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t GridLayout.updateCache(_:subviews:)(uint64_t a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = *((void *)a2 + 1);
  char v6 = *((unsigned char *)a2 + 16);
  char v7 = *((unsigned char *)a2 + 17);
  long long v8 = v2[1];
  *(_OWORD *)a1 = *v2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)v2 + 25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 65) = v7;
  *(void *)(a1 + 88) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t GridLayout.spacing(subviews:cache:)@<X0>(uint64_t a1@<X8>)
{
  return GridLayout.Cache.spacing()(a1);
}

uint64_t GridLayout.Cache.spacing()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1[13] + 16);
  if (v2 && (uint64_t v3 = v1[14], (v4 = *(void *)(v3 + 16)) != 0))
  {
    uint64_t v18 = v1[13];
    uint64_t v5 = v1[18];
    uint64_t result = ViewSpacing.init()();
    uint64_t v7 = 0;
    uint64_t v20 = (*(void *)(v3 + 16) << 32) - 0x100000000;
    do
    {
      if (*(void *)(v5 + 16))
      {
        uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
        if (v8)
        {
          LayoutSubviews.subscript.getter();
          LayoutSubview.spacing.getter();
          char v9 = v21;
          if (v23 != 2) {
            char v9 = v23;
          }
          char v23 = v9;
          AbsoluteEdge.Set.init(_:layoutDirection:)();
          Spacing.incorporate(_:of:)();
          uint64_t result = swift_bridgeObjectRelease();
        }
        if (*(void *)(v5 + 16))
        {
          uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7 | (unint64_t)v20);
          if (v10)
          {
            LayoutSubviews.subscript.getter();
            LayoutSubview.spacing.getter();
            char v11 = v21;
            if (v23 != 2) {
              char v11 = v23;
            }
            char v23 = v11;
            AbsoluteEdge.Set.init(_:layoutDirection:)();
            Spacing.incorporate(_:of:)();
            uint64_t result = swift_bridgeObjectRelease();
          }
        }
      }
      ++v7;
    }
    while (v2 != v7);
    unint64_t v12 = 0;
    uint64_t v13 = (*(_DWORD *)(v18 + 16) - 1);
    do
    {
      if (*(void *)(v5 + 16))
      {
        uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v12);
        if (v14)
        {
          LayoutSubviews.subscript.getter();
          LayoutSubview.spacing.getter();
          char v15 = v21;
          if (v23 != 2) {
            char v15 = v23;
          }
          char v23 = v15;
          AbsoluteEdge.Set.init(_:layoutDirection:)();
          Spacing.incorporate(_:of:)();
          uint64_t result = swift_bridgeObjectRelease();
        }
        if (*(void *)(v5 + 16))
        {
          uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13 + v12);
          if (v16)
          {
            LayoutSubviews.subscript.getter();
            LayoutSubview.spacing.getter();
            char v17 = v21;
            if (v23 != 2) {
              char v17 = v23;
            }
            char v23 = v17;
            AbsoluteEdge.Set.init(_:layoutDirection:)();
            Spacing.incorporate(_:of:)();
            uint64_t result = swift_bridgeObjectRelease();
          }
        }
      }
      v12 += 0x100000000;
      --v4;
    }
    while (v4);
    *(void *)a1 = v22;
    *(unsigned char *)(a1 + 8) = v23;
  }
  else
  {
    return MEMORY[0x1F40FD650]();
  }
  return result;
}

double GridLayout.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  GridLayout.Cache.setProposal(_:)(a1, a2 & 1, a3, a4 & 1);
  *(void *)&double result = *(_OWORD *)&GridLayout.Cache.size()();
  return result;
}

uint64_t GridLayout.Cache.setProposal(_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v9 = *(void *)(v4 + 72);
  int v10 = *(unsigned __int8 *)(v4 + 80);
  LOBYTE(v33) = a2 & 1;
  uint64_t result = static ProposedViewSize.== infix(_:_:)();
  if ((result & 1) == 0)
  {
    if (v10) {
      uint64_t v12 = 0x7FF0000000000000;
    }
    else {
      uint64_t v12 = v9;
    }
    uint64_t v13 = ~v12 & 0x7FF0000000000000;
    uint64_t v14 = v12 & 0xFFFFFFFFFFFFFLL;
    if (v13) {
      BOOL v15 = 1;
    }
    else {
      BOOL v15 = v14 == 0;
    }
    if (v15)
    {
      char v16 = *(char **)(v4 + 104);
      uint64_t v17 = *((void *)v16 + 2);
      if (!v17) {
        goto LABEL_16;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_42;
      }
      while (1)
      {
        unint64_t v18 = 0;
        unint64_t v19 = *((void *)v16 + 2);
        uint64_t v20 = 56;
        do
        {
          if (v18 >= v19)
          {
            __break(1u);
            goto LABEL_40;
          }
          ++v18;
          char v21 = &v16[v20];
          *(void *)char v21 = 0;
          *((void *)v21 + 1) = 0;
          v20 += 64;
        }
        while (v17 != v18);
        *(void *)(v4 + 104) = v16;
LABEL_16:
        char v16 = *(char **)(v4 + 112);
        uint64_t v17 = *((void *)v16 + 2);
        if (v17)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
          }
          unint64_t v22 = 0;
          unint64_t v23 = *((void *)v16 + 2);
          uint64_t v24 = 56;
          while (v22 < v23)
          {
            ++v22;
            int v25 = &v16[v24];
            *(void *)int v25 = 0;
            *((void *)v25 + 1) = 0;
            v24 += 64;
            if (v17 == v22)
            {
              *(void *)(v4 + 112) = v16;
              goto LABEL_23;
            }
          }
LABEL_40:
          __break(1u);
        }
        else
        {
LABEL_23:
          char v16 = *(char **)(v4 + 136);
          uint64_t v17 = *((void *)v16 + 2);
          if (!v17) {
            break;
          }
          char v32 = a4;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
          }
          unint64_t v26 = 0;
          long long v27 = v16 + 64;
          while (v26 < *((void *)v16 + 2))
          {
            ++v26;
            static ViewDimensions.invalidValue.getter();
            a4 = v34;
            swift_release();
            *((void *)v27 - 2) = v33;
            *((void *)v27 - 1) = v34;
            *(void *)long long v27 = v35;
            *(_OWORD *)(v27 + 8) = v36;
            *((void *)v27 + 3) = v37;
            *((void *)v27 + 7) = 0;
            *((void *)v27 + 8) = 0;
            v27 += 104;
            if (v17 == v26)
            {
              *(void *)(v4 + 136) = v16;
              a4 = v32;
              goto LABEL_30;
            }
          }
        }
        __break(1u);
LABEL_42:
        char v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
      }
    }
LABEL_30:
    *(void *)(v4 + 72) = a1;
    *(unsigned char *)(v4 + 80) = a2 & 1;
    *(void *)(v4 + 88) = a3;
    *(unsigned char *)(v4 + 96) = a4 & 1;
    static ProposedViewSize.unspecified.getter();
    if (static ProposedViewSize.== infix(_:_:)())
    {
      uint64_t v28 = *(void *)(*(void *)(v4 + 136) + 16);
      if (v28)
      {
        for (unint64_t i = 0; i != v28; ++i)
        {
          uint64_t v30 = static ProposedViewSize.unspecified.getter();
          GridLayout.Cache.resize(at:proposal:)(i, v30, v31 & 1);
        }
      }
    }
    else
    {
      GridLayout.Cache.sizeGenerally()();
    }
    GridLayout.Cache.finalizeSizes()();
    GridLayout.Cache.applyAlignment(in:)(0);
    GridLayout.Cache.applyAlignment(in:)(1);
    assignPositions #1 (to:) in GridLayout.Cache.assignPositions()(v4 + 104);
    return assignPositions #1 (to:) in GridLayout.Cache.assignPositions()(v4 + 112);
  }
  return result;
}

CGSize __swiftcall GridLayout.Cache.size()()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v2 + 16);
  double v4 = 0.0;
  double v5 = 0.0;
  if (v3)
  {
    char v6 = (double *)(v2 + 64);
    do
    {
      double v7 = *(v6 - 4);
      double v8 = *v6;
      v6 += 8;
      double v5 = v5 + v7 + v8;
      --v3;
    }
    while (v3);
  }
  uint64_t v9 = *(void *)(v1 + 16);
  if (v9)
  {
    int v10 = (double *)(v1 + 64);
    double v4 = 0.0;
    do
    {
      double v11 = *(v10 - 4);
      double v12 = *v10;
      v10 += 8;
      double v4 = v4 + v11 + v12;
      --v9;
    }
    while (v9);
  }
  result.height = v4;
  result.width = v5;
  return result;
}

void GridLayout.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
}

Swift::Void __swiftcall GridLayout.Cache.placeSubviews(at:)(CGPoint at)
{
  uint64_t v2 = v1[17];
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v6 = v1[13];
    uint64_t v5 = v1[14];
    for (uint64_t i = v2 + 64; ; i += 104)
    {
      uint64_t v8 = *(int *)(i - 32);
      if ((v8 & 0x80000000) != 0) {
        break;
      }
      if (*(void *)(v6 + 16) <= v8) {
        goto LABEL_10;
      }
      uint64_t v9 = *(int *)(i - 28);
      if ((v9 & 0x80000000) != 0) {
        goto LABEL_11;
      }
      if (*(void *)(v5 + 16) <= v9) {
        goto LABEL_12;
      }
      uint64_t v10 = v4 + 1;
      LayoutSubviews.subscript.getter();
      swift_retain();
      default argument 1 of LayoutSubview.place(at:anchor:dimensions:)();
      LayoutSubview.place(at:anchor:dimensions:)();
      swift_release();
      uint64_t v4 = v10;
      if (v3 == v10) {
        return;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
}

uint64_t GridLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, uint64_t a7, uint64_t a8)
{
  LOBYTE(v24) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  long long v11 = *(_OWORD *)(a8 + 96);
  long long v12 = *(_OWORD *)(a8 + 128);
  long long v31 = *(_OWORD *)(a8 + 112);
  long long v32 = v12;
  uint64_t v33 = *(void *)(a8 + 144);
  long long v13 = *(_OWORD *)(a8 + 48);
  long long v26 = *(_OWORD *)(a8 + 32);
  long long v27 = v13;
  long long v14 = *(_OWORD *)(a8 + 80);
  long long v28 = *(_OWORD *)(a8 + 64);
  long long v29 = v14;
  long long v30 = v11;
  long long v15 = *(_OWORD *)(a8 + 16);
  long long v24 = *(_OWORD *)a8;
  long long v25 = v15;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  AlignmentKey.id.getter();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 120) = v30;
  long long v17 = v32;
  *(_OWORD *)(v16 + 136) = v31;
  *(_OWORD *)(v16 + 152) = v17;
  long long v18 = v27;
  *(_OWORD *)(v16 + 56) = v26;
  *(_OWORD *)(v16 + 72) = v18;
  long long v19 = v29;
  *(_OWORD *)(v16 + 88) = v28;
  *(_OWORD *)(v16 + 104) = v19;
  long long v20 = v25;
  *(_OWORD *)(v16 + 24) = v24;
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 168) = v33;
  *(_OWORD *)(v16 + 40) = v20;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  double v21 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a8) = v22;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v24);
  if (a8) {
    *(double *)&uint64_t result = v21;
  }
  else {
    *(double *)&uint64_t result = v21 + a6;
  }
  return result;
}

uint64_t GridLayout.explicitAlignment(of:in:proposal:subviews:cache:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  LOBYTE(v25) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  long long v12 = *(_OWORD *)(a9 + 96);
  long long v13 = *(_OWORD *)(a9 + 128);
  long long v32 = *(_OWORD *)(a9 + 112);
  long long v33 = v13;
  uint64_t v34 = *(void *)(a9 + 144);
  long long v14 = *(_OWORD *)(a9 + 48);
  long long v27 = *(_OWORD *)(a9 + 32);
  long long v28 = v14;
  long long v15 = *(_OWORD *)(a9 + 80);
  long long v29 = *(_OWORD *)(a9 + 64);
  long long v30 = v15;
  long long v31 = v12;
  long long v16 = *(_OWORD *)(a9 + 16);
  long long v25 = *(_OWORD *)a9;
  long long v26 = v16;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  AlignmentKey.id.getter();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 120) = v31;
  long long v18 = v33;
  *(_OWORD *)(v17 + 136) = v32;
  *(_OWORD *)(v17 + 152) = v18;
  long long v19 = v28;
  *(_OWORD *)(v17 + 56) = v27;
  *(_OWORD *)(v17 + 72) = v19;
  long long v20 = v30;
  *(_OWORD *)(v17 + 88) = v29;
  *(_OWORD *)(v17 + 104) = v20;
  long long v21 = v26;
  *(_OWORD *)(v17 + 24) = v25;
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 168) = v34;
  *(_OWORD *)(v17 + 40) = v21;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  double v22 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a9) = v23;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v25);
  if (a9) {
    *(double *)&uint64_t result = v22;
  }
  else {
    *(double *)&uint64_t result = v22 + a7;
  }
  return result;
}

uint64_t protocol witness for Layout.updateCache(_:subviews:) in conformance GridLayout(uint64_t a1, int *a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  char v5 = *(unsigned char *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  char v7 = *(unsigned char *)(v2 + 40);
  int v8 = *a2;
  uint64_t v9 = *((void *)a2 + 1);
  char v10 = *((unsigned char *)a2 + 16);
  char v11 = *((unsigned char *)a2 + 17);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 65) = v11;
  *(void *)(a1 + 88) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 96) = 0;
  GridLayout.Cache.assignSubviews()();
  GridLayout.Cache.assignSpacing(in:)(0);
  return GridLayout.Cache.assignSpacing(in:)(1);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance GridLayout@<X0>(uint64_t a1@<X8>)
{
  return GridLayout.Cache.spacing()(a1);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, char a2, uint64_t a3, char a4)
{
  GridLayout.Cache.setProposal(_:)(a1, a2 & 1, a3, a4 & 1);
  *(void *)&double result = *(_OWORD *)&GridLayout.Cache.size()();
  return result;
}

void protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, uint64_t a7, uint64_t a8)
{
  LOBYTE(v24) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  long long v11 = *(_OWORD *)(a8 + 96);
  long long v12 = *(_OWORD *)(a8 + 128);
  long long v31 = *(_OWORD *)(a8 + 112);
  long long v32 = v12;
  uint64_t v33 = *(void *)(a8 + 144);
  long long v13 = *(_OWORD *)(a8 + 48);
  long long v26 = *(_OWORD *)(a8 + 32);
  long long v27 = v13;
  long long v14 = *(_OWORD *)(a8 + 80);
  long long v28 = *(_OWORD *)(a8 + 64);
  long long v29 = v14;
  long long v30 = v11;
  long long v15 = *(_OWORD *)(a8 + 16);
  long long v24 = *(_OWORD *)a8;
  long long v25 = v15;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  AlignmentKey.id.getter();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 120) = v30;
  long long v17 = v32;
  *(_OWORD *)(v16 + 136) = v31;
  *(_OWORD *)(v16 + 152) = v17;
  long long v18 = v27;
  *(_OWORD *)(v16 + 56) = v26;
  *(_OWORD *)(v16 + 72) = v18;
  long long v19 = v29;
  *(_OWORD *)(v16 + 88) = v28;
  *(_OWORD *)(v16 + 104) = v19;
  long long v20 = v25;
  *(_OWORD *)(v16 + 24) = v24;
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 168) = v33;
  *(_OWORD *)(v16 + 40) = v20;
  outlined retain of GridLayout.Cache((uint64_t)&v24);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  double v21 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a8) = v22;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v24);
  if (a8) {
    *(double *)&uint64_t result = v21;
  }
  else {
    *(double *)&uint64_t result = v21 + a6;
  }
  return result;
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance GridLayout(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  LOBYTE(v25) = a3 & 1;
  GridLayout.Cache.setProposal(_:)(a2, a3 & 1, a4, a5 & 1);
  long long v12 = *(_OWORD *)(a9 + 96);
  long long v13 = *(_OWORD *)(a9 + 128);
  long long v32 = *(_OWORD *)(a9 + 112);
  long long v33 = v13;
  uint64_t v34 = *(void *)(a9 + 144);
  long long v14 = *(_OWORD *)(a9 + 48);
  long long v27 = *(_OWORD *)(a9 + 32);
  long long v28 = v14;
  long long v15 = *(_OWORD *)(a9 + 80);
  long long v29 = *(_OWORD *)(a9 + 64);
  long long v30 = v15;
  long long v31 = v12;
  long long v16 = *(_OWORD *)(a9 + 16);
  long long v25 = *(_OWORD *)a9;
  long long v26 = v16;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  AlignmentKey.id.getter();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 120) = v31;
  long long v18 = v33;
  *(_OWORD *)(v17 + 136) = v32;
  *(_OWORD *)(v17 + 152) = v18;
  long long v19 = v28;
  *(_OWORD *)(v17 + 56) = v27;
  *(_OWORD *)(v17 + 72) = v19;
  long long v20 = v30;
  *(_OWORD *)(v17 + 88) = v29;
  *(_OWORD *)(v17 + 104) = v20;
  long long v21 = v26;
  *(_OWORD *)(v17 + 24) = v25;
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 168) = v34;
  *(_OWORD *)(v17 + 40) = v21;
  outlined retain of GridLayout.Cache((uint64_t)&v25);
  type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
  lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>();
  double v22 = COERCE_DOUBLE(static AlignmentID.combineExplicit<A>(_:)());
  LOBYTE(a9) = v23;
  swift_release();
  outlined release of GridLayout.Cache((uint64_t)&v25);
  if (a9) {
    *(double *)&uint64_t result = v22;
  }
  else {
    *(double *)&uint64_t result = v22 + a7;
  }
  return result;
}

uint64_t (*_GridLayout.alignment.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*_GridLayout.horizontalSpacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*_GridLayout.verticalSpacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.init(alignment:horizontalSpacing:verticalSpacing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 16) = a3;
  *(unsigned char *)(a7 + 24) = a4 & 1;
  *(void *)(a7 + 32) = a5;
  *(unsigned char *)(a7 + 40) = a6 & 1;
  return result;
}

uint64_t static _GridLayout._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static GridLayout._makeView(root:inputs:body:)(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout);
}

uint64_t static GridLayout._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return static Layout._makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  return static Layout._makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _GridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for _GridLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _GridLayout(uint64_t a1)
{
}

__n128 _GridLayout.base.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  unsigned __int8 v3 = v1[1].n128_u8[8];
  unint64_t v4 = v1[2].n128_u64[0];
  unsigned __int8 v5 = v1[2].n128_u8[8];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u8[8] = v5;
  return result;
}

__n128 protocol witness for DerivedLayout.base.getter in conformance _GridLayout@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  unsigned __int8 v3 = v1[1].n128_u8[8];
  unint64_t v4 = v1[2].n128_u64[0];
  unsigned __int8 v5 = v1[2].n128_u8[8];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u8[8] = v5;
  return result;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance GridMetadata@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static GridMetadata.defaultValue;

  return swift_bridgeObjectRetain();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance GridRange()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance GridRange()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Swift::UInt32 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance GridRange()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GridRange(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  return a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t GridLayout.Cache.assignSubviews()()
{
  unint64_t v1 = v0;
  Swift::UInt32 v2 = (uint64_t *)(v0 + 104);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v4 = *(void *)(v0 + 104);
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v4 + 16));
  }
  else
  {
    *Swift::UInt32 v2 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v4 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  unsigned __int8 v5 = (uint64_t *)(v1 + 112);
  int v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *(void *)(v1 + 112);
  if (v6)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v7 + 16));
  }
  else
  {
    *unsigned __int8 v5 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v7 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  int v8 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *(void *)(v1 + 136);
  if (v8)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v9 + 16));
  }
  else
  {
    *(void *)(v1 + 136) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v1 + 144) + 16))
  {
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v162 = *(void *)(v1 + 144);
    *(void *)(v1 + 144) = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<GridIndex, Int>();
    Swift::Bool v11 = v10;
    unsigned __int8 v5 = (uint64_t *)(v1 + 112);
    _NativeDictionary.removeAll(isUnique:)(v11);
    *(void *)(v1 + 144) = v162;
    swift_bridgeObjectRelease();
  }
  unint64_t v12 = *(void *)(v1 + 56);
  char v13 = *(unsigned char *)(v1 + 64);
  char v14 = *(unsigned char *)(v1 + 65);
  int v168 = *(_DWORD *)(v1 + 48);
  unint64_t v169 = v12;
  LOBYTE(v170) = v13;
  HIBYTE(v170) = v14;
  uint64_t v171 = 0;
  swift_bridgeObjectRetain();
  unint64_t v161 = v1;
  uint64_t v151 = v2;
  uint64_t v147 = (char **)(v1 + 136);
  if (!LayoutSubviews.endIndex.getter())
  {
    swift_bridgeObjectRelease();
    LODWORD(v15) = 0;
    unsigned int v140 = 0;
    uint64_t v19 = MEMORY[0x1E4FBC860];
    goto LABEL_173;
  }
  int v139 = 0;
  unsigned int v140 = 0;
  LODWORD(v15) = 0;
  uint64_t v16 = 0;
  uint64_t v148 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v150 = v5;
LABEL_14:
  LayoutSubviews.subscript.getter();
  unint64_t v17 = v162;
  int v18 = v163;
  LODWORD(v162) = v168;
  unint64_t v163 = v169;
  LOWORD(v164) = v170;
  uint64_t v19 = (uint64_t)&v162;
  uint64_t v20 = LayoutSubviews.endIndex.getter();
  if (v16 < 0 || v16 >= v20) {
    goto LABEL_233;
  }
  uint64_t v171 = v16 + 1;
  static UnitPoint.infinity.getter();
  double v22 = v21;
  double v24 = v23;
  unint64_t v162 = v17;
  LODWORD(v163) = v18;
  uint64_t v19 = (uint64_t)&v162;
  LayoutProxy.subscript.getter();
  uint64_t v25 = *(void *)(v167 + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease();
    if (v139)
    {
      int v26 = 0;
      double v27 = 0.0;
      int v156 = 1;
      double v144 = 0.0;
      unint64_t v1 = 1;
      char v28 = 0;
      char v146 = 1;
      char v29 = 1;
      if (!v15)
      {
        double v144 = 0.0;
        double v145 = 0.0;
        LODWORD(v27) = 0;
        uint64_t v154 = v140;
        int v139 = 0;
        LODWORD(v15) = 0;
        unint64_t v1 = 1;
        int v46 = 1;
        char v28 = 0;
        char v146 = 1;
        goto LABEL_82;
      }
      goto LABEL_80;
    }
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    int v26 = 0;
    double v27 = 0.0;
    int v156 = 1;
    double v48 = 0.0;
    unint64_t v1 = 1;
    char v49 = 0;
    char v50 = 1;
    char v29 = 1;
    if (v47)
    {
      double v144 = 0.0;
      unint64_t v1 = 1;
      char v28 = 0;
      char v146 = 1;
      goto LABEL_74;
    }
LABEL_171:
    double v144 = v48;
    char v146 = v50;
    char v28 = v49;
    uint64_t v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v148 + 2) + 1, 1, v148);
LABEL_74:
    unint64_t v52 = *((void *)v148 + 2);
    unint64_t v51 = *((void *)v148 + 3);
    uint64_t v19 = v52 + 1;
    if (v52 >= v51 >> 1) {
      uint64_t v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, v148);
    }
    *((void *)v148 + 2) = v19;
    long long v53 = &v148[8 * v52];
    *((_DWORD *)v53 + 8) = v15;
    *((_DWORD *)v53 + 9) = v140;
LABEL_77:
    if (!v15)
    {
      double v145 = v27;
      LODWORD(v27) = 0;
      uint64_t v154 = v140;
      int v139 = v26;
      goto LABEL_81;
    }
LABEL_80:
    double v145 = v27;
    LODWORD(v27) = 0;
    LODWORD(v15) = 0;
    uint64_t v154 = v140 + 1;
    int v139 = v26;
    ++v140;
    goto LABEL_81;
  }
  double v144 = 0.0;
  double v145 = 0.0;
  int v26 = 0;
  double v27 = 0.0;
  char v28 = 0;
  int v156 = 1;
  unint64_t v1 = 1;
  uint64_t v19 = 1;
  char v146 = 1;
  char v29 = 1;
  uint64_t v30 = 0;
LABEL_18:
  while (2)
  {
    uint64_t v31 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      goto LABEL_218;
    }
    uint64_t v32 = v167 + 32 + 24 * v30;
    double v33 = *(double *)v32;
    double v34 = *(double *)(v32 + 8);
    unsigned int v35 = *(unsigned __int8 *)(v32 + 16);
    if (!(v35 >> 5))
    {
      unint64_t v1 = (LODWORD(v34) - LODWORD(v33));
      BOOL v36 = SLODWORD(v34) < SLODWORD(v33);
      if (__OFSUB__(LODWORD(v34), LODWORD(v33)))
      {
LABEL_220:
        __break(1u);
      }
      else
      {
        uint64_t v37 = HIDWORD(*(void *)&v34);
        if (!v36 && (int)v37 >= SHIDWORD(v33))
        {
          int v156 = v37 - HIDWORD(v33);
          if (!__OFSUB__(v37, HIDWORD(v33)))
          {
            if (v26) {
              goto LABEL_248;
            }
            if (v31 == v25)
            {
LABEL_68:
              double v27 = v33;
              char v45 = v29;
LABEL_69:
              swift_bridgeObjectRelease();
              char v29 = v45;
LABEL_70:
              int v46 = 0;
              uint64_t v154 = HIDWORD(*(void *)&v27);
              goto LABEL_82;
            }
            int v39 = (double *)(v167 + 72 + 24 * v30);
            double v27 = v33;
            while (1)
            {
              uint64_t v30 = v31 + 1;
              if (__OFADD__(v31, 1)) {
                break;
              }
              double v33 = *(v39 - 2);
              double v34 = *(v39 - 1);
              int v40 = *(unsigned __int8 *)v39 >> 5;
              if (v40)
              {
                switch(v40)
                {
                  case 2:
                    int v26 = 0;
                    uint64_t v19 = 0;
                    ++v31;
                    goto LABEL_41;
                  case 3:
                    int v26 = 0;
                    uint64_t v19 = 0;
                    ++v31;
                    goto LABEL_53;
                  case 4:
                    int v26 = 0;
                    uint64_t v19 = 0;
                    char v29 = 0;
                    char v45 = 0;
                    double v144 = *(v39 - 2);
                    if (v30 == v25) {
                      goto LABEL_69;
                    }
                    goto LABEL_18;
                  case 5:
                    int v26 = 0;
                    uint64_t v19 = 0;
                    char v146 = 0;
                    ++v31;
                    goto LABEL_50;
                  case 6:
                    int v26 = 0;
                    uint64_t v19 = 0;
                    ++v31;
                    goto LABEL_62;
                  default:
                    goto LABEL_248;
                }
              }
              unint64_t v1 = (LODWORD(v34) - LODWORD(v33));
              BOOL v41 = SLODWORD(v34) < SLODWORD(v33);
              if (__OFSUB__(LODWORD(v34), LODWORD(v33))) {
                goto LABEL_220;
              }
              uint64_t v42 = HIDWORD(*(void *)&v34);
              if (v41 || (int)v42 < SHIDWORD(v33)) {
                goto LABEL_221;
              }
              int v156 = v42 - HIDWORD(v33);
              if (__OFSUB__(v42, HIDWORD(v33))) {
                goto LABEL_222;
              }
              ++v31;
              v39 += 3;
              double v27 = v33;
              if (v30 == v25) {
                goto LABEL_68;
              }
            }
LABEL_218:
            __break(1u);
            goto LABEL_219;
          }
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
      }
LABEL_221:
      __break(1u);
      goto LABEL_222;
    }
    switch(v35 >> 5)
    {
      case 2u:
LABEL_41:
        unint64_t v1 = SLODWORD(v33) * (uint64_t)(int)v1;
        if (v1 != (int)v1) {
          goto LABEL_239;
        }
        goto LABEL_63;
      case 3u:
LABEL_53:
        if ((~*(void *)&v33 & 0x7FF0000000000000) != 0) {
          double v22 = v33;
        }
        if ((~*(void *)&v34 & 0x7FF0000000000000) != 0) {
          double v24 = v34;
        }
        if (v31 == v25) {
          goto LABEL_164;
        }
        goto LABEL_64;
      case 4u:
        char v29 = 0;
        double v144 = v33;
        if (v31 == v25) {
          goto LABEL_164;
        }
        goto LABEL_64;
      case 5u:
        char v146 = 0;
LABEL_50:
        double v145 = v33;
        if (v31 == v25) {
          goto LABEL_164;
        }
        goto LABEL_64;
      case 6u:
LABEL_62:
        v28 |= LOBYTE(v33);
LABEL_63:
        if (v31 != v25) {
          goto LABEL_64;
        }
        goto LABEL_164;
      default:
        double v44 = v145;
        if ((v35 & 1) == 0) {
          double v44 = v34;
        }
        double v145 = v44;
        if ((v19 & 1) == 0) {
          goto LABEL_248;
        }
        v146 &= v35;
        uint64_t v19 = 1;
        int v26 = LODWORD(v33);
        if (v31 != v25)
        {
LABEL_64:
          uint64_t v30 = v31;
          continue;
        }
LABEL_164:
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0) {
          goto LABEL_70;
        }
        if (!v139)
        {
          char v107 = swift_isUniquelyReferenced_nonNull_native();
          char v49 = v28;
          double v48 = v144;
          double v27 = v145;
          char v50 = v146;
          if (v107) {
            goto LABEL_74;
          }
          goto LABEL_171;
        }
        double v27 = v145;
        if (!v26 || v26 != v139) {
          goto LABEL_77;
        }
        LODWORD(v27) = v15;
        uint64_t v154 = v140;
LABEL_81:
        int v46 = v1;
LABEL_82:
        int v54 = LODWORD(v27) + v1;
        if (__OFADD__(LODWORD(v27), v1)) {
          goto LABEL_234;
        }
        int v141 = v46;
        char v142 = v28;
        int v143 = v15;
        int v152 = LODWORD(v27) + v1;
        unint64_t v15 = v54;
        uint64_t v19 = *v2;
        uint64_t v55 = *(void *)(*v2 + 16);
        if (v55 < v54)
        {
          char v56 = swift_isUniquelyReferenced_nonNull_native();
          *Swift::UInt32 v2 = v19;
          if ((v56 & 1) == 0) {
            uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55 + 1, 1, (char *)v19);
          }
          unint64_t v57 = *(void *)(v19 + 16);
          do
          {
            uint64_t v58 = 0;
            if (v57 && (*(unsigned char *)(v161 + 24) & 1) == 0) {
              uint64_t v58 = *(void *)(v161 + 16);
            }
            *Swift::UInt32 v2 = v19;
            unint64_t v59 = *(void *)(v19 + 24);
            if (v57 >= v59 >> 1) {
              uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v57 + 1, 1, (char *)v19);
            }
            *(void *)(v19 + 16) = v57 + 1;
            uint64_t v60 = v19 + (v57 << 6);
            *(void *)(v60 + 32) = v58;
            *(void *)(v60 + 40) = 0;
            *(unsigned char *)(v60 + 48) = 1;
            *(_OWORD *)(v60 + 56) = 0u;
            *(_OWORD *)(v60 + 72) = 0u;
            *(void *)(v60 + 88) = 0;
            *Swift::UInt32 v2 = v19;
            unint64_t v57 = *(void *)(v19 + 16);
          }
          while (v57 < v15);
        }
        if ((int)v1 < 2)
        {
          unint64_t v1 = v161;
          int v61 = v154;
        }
        else
        {
          unint64_t v1 = v161;
          int v61 = v154;
          if ((~*(void *)&v22 & 0x7FF0000000000000) == 0)
          {
            unint64_t v162 = *(void *)v161;
            lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
            uint64_t v19 = (uint64_t)&v162;
            AlignmentGuide.fraction.getter();
            double v22 = v62;
          }
        }
        int v63 = v61 + v156;
        if (__OFADD__(v61, v156)) {
          goto LABEL_235;
        }
        int v158 = v61 + v156;
        unint64_t v64 = v63;
        uint64_t v19 = *v5;
        uint64_t v65 = *(void *)(*v5 + 16);
        if (v65 < v63)
        {
          char v66 = swift_isUniquelyReferenced_nonNull_native();
          *unsigned __int8 v5 = v19;
          if ((v66 & 1) == 0) {
            uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65 + 1, 1, (char *)v19);
          }
          unint64_t v67 = *(void *)(v19 + 16);
          do
          {
            uint64_t v68 = 0;
            if (v67 && (*(unsigned char *)(v1 + 40) & 1) == 0) {
              uint64_t v68 = *(void *)(v1 + 32);
            }
            *unsigned __int8 v5 = v19;
            unint64_t v69 = *(void *)(v19 + 24);
            if (v67 >= v69 >> 1) {
              uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v67 + 1, 1, (char *)v19);
            }
            *(void *)(v19 + 16) = v67 + 1;
            uint64_t v70 = v19 + (v67 << 6);
            *(void *)(v70 + 32) = v68;
            *(void *)(v70 + 40) = 0;
            *(unsigned char *)(v70 + 48) = 1;
            *(_OWORD *)(v70 + 56) = 0u;
            *(_OWORD *)(v70 + 72) = 0u;
            *(void *)(v70 + 88) = 0;
            *unsigned __int8 v5 = v19;
            unint64_t v67 = *(void *)(v19 + 16);
          }
          while (v67 < v64);
        }
        if (v156 < 2)
        {
          LODWORD(v15) = LODWORD(v27);
          if (v29) {
            goto LABEL_122;
          }
        }
        else
        {
          LODWORD(v15) = LODWORD(v27);
          if ((~*(void *)&v24 & 0x7FF0000000000000) == 0)
          {
            unint64_t v162 = *(void *)(v1 + 8);
            lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment();
            uint64_t v19 = (uint64_t)&v162;
            AlignmentGuide.fraction.getter();
            double v24 = v71;
          }
          if (v29) {
            goto LABEL_122;
          }
        }
        if ((v15 & 0x80000000) != 0) {
          goto LABEL_240;
        }
        uint64_t v19 = *v2;
        if (*(void *)(*v2 + 16) <= (int)v15) {
          goto LABEL_241;
        }
        uint64_t v72 = v19 + 32 + ((uint64_t)(int)v15 << 6);
        if ((*(unsigned char *)(v72 + 16) & 1) != 0 || *(void *)(v72 + 8) == *(void *)&v144)
        {
          char v73 = swift_isUniquelyReferenced_nonNull_native();
          *Swift::UInt32 v2 = v19;
          if ((v73 & 1) == 0) {
            uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
          }
          if (*(void *)(v19 + 16) <= (int)v15) {
            goto LABEL_245;
          }
          uint64_t v74 = v19 + ((uint64_t)(int)v15 << 6);
          *(double *)(v74 + 40) = v144;
          *(unsigned char *)(v74 + 48) = 0;
          *Swift::UInt32 v2 = v19;
LABEL_122:
          int v75 = v158;
          if ((v146 & 1) == 0)
          {
LABEL_123:
            if ((v154 & 0x80000000) != 0) {
              goto LABEL_242;
            }
            uint64_t v19 = *v5;
            if (*(void *)(*v5 + 16) <= (int)v154) {
              goto LABEL_243;
            }
            uint64_t v76 = v19 + 32 + ((uint64_t)(int)v154 << 6);
            if ((*(unsigned char *)(v76 + 16) & 1) != 0 || *(void *)(v76 + 8) == *(void *)&v145)
            {
              char v77 = swift_isUniquelyReferenced_nonNull_native();
              *unsigned __int8 v5 = v19;
              if ((v77 & 1) == 0) {
                uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
              }
              if (*(void *)(v19 + 16) <= (int)v154) {
                goto LABEL_246;
              }
              uint64_t v78 = v19 + ((uint64_t)(int)v154 << 6);
              *(double *)(v78 + 40) = v145;
              *(unsigned char *)(v78 + 48) = 0;
              *unsigned __int8 v5 = v19;
            }
            else
            {
              unint64_t v162 = 0;
              unint64_t v163 = 0xE000000000000000;
              _StringGuts.grow(_:)(46);
              swift_bridgeObjectRelease();
              unint64_t v162 = 0xD00000000000002CLL;
              unint64_t v163 = 0x800000018833E3D0;
              LODWORD(v167) = v154;
              v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v80);
              swift_bridgeObjectRelease();
              uint64_t v19 = v163;
              MEMORY[0x18C112B90](v162, v163);
              swift_bridgeObjectRelease();
            }
          }
        }
        else
        {
          unint64_t v162 = 0;
          unint64_t v163 = 0xE000000000000000;
          _StringGuts.grow(_:)(49);
          swift_bridgeObjectRelease();
          unint64_t v162 = 0xD00000000000002FLL;
          unint64_t v163 = 0x800000018833E400;
          LODWORD(v167) = v15;
          v79._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v79);
          swift_bridgeObjectRelease();
          uint64_t v19 = v163;
          MEMORY[0x18C112B90](v162, v163);
          swift_bridgeObjectRelease();
          int v75 = v158;
          if ((v146 & 1) == 0) {
            goto LABEL_123;
          }
        }
        int v81 = v152;
        if (v152 < (int)v15) {
          goto LABEL_236;
        }
        if (v15 == v152)
        {
LABEL_136:
          static ViewDimensions.invalidValue.getter();
          unint64_t v82 = v162;
          unint64_t v15 = v163;
          uint64_t v83 = v164;
          long long v159 = v165;
          uint64_t v84 = v166;
          long long v85 = *v147;
          char v86 = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v147 = v85;
          if ((v86 & 1) == 0)
          {
            long long v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v85 + 2) + 1, 1, v85);
            *uint64_t v147 = v85;
          }
          unint64_t v88 = *((void *)v85 + 2);
          unint64_t v87 = *((void *)v85 + 3);
          if (v88 >= v87 >> 1) {
            long long v85 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v87 > 1), v88 + 1, 1, v85);
          }
          *((void *)v85 + 2) = v88 + 1;
          long long v89 = &v85[104 * v88];
          *((_DWORD *)v89 + 8) = LODWORD(v27);
          *((_DWORD *)v89 + 9) = v154;
          *((_DWORD *)v89 + 10) = v152;
          *((_DWORD *)v89 + 11) = v75;
          *((void *)v89 + 6) = v82;
          *((void *)v89 + 7) = v15;
          *((void *)v89 + 8) = v83;
          *(_OWORD *)(v89 + 72) = v159;
          *((void *)v89 + 11) = v84;
          *((double *)v89 + 12) = v22;
          *((double *)v89 + 13) = v24;
          v89[112] = v142;
          *((void *)v89 + 15) = 0;
          *((void *)v89 + 16) = 0;
          *uint64_t v147 = v85;
          LODWORD(v15) = v141 + v143;
          uint64_t v16 = v171;
          if (v16 == LayoutSubviews.endIndex.getter()) {
            goto LABEL_215;
          }
          goto LABEL_14;
        }
        if (v75 < (int)v154) {
          goto LABEL_244;
        }
        LODWORD(v15) = LODWORD(v27);
        while (1)
        {
          if ((int)v15 >= v81) {
            goto LABEL_224;
          }
          if (v154 != v75) {
            break;
          }
LABEL_144:
          LODWORD(v15) = v15 + 1;
          Swift::UInt32 v2 = v151;
          int v81 = v152;
          unsigned __int8 v5 = v150;
          if (v15 == v152) {
            goto LABEL_136;
          }
        }
        int v90 = v156;
        uint64_t v91 = v154;
        while (2)
        {
          if ((int)v91 < v75)
          {
            if (*(void *)(*(void *)(v1 + 144) + 16))
            {
              specialized __RawDictionaryStorage.find<A>(_:)(v15 | (unint64_t)(v91 << 32));
              if (v92) {
                goto LABEL_248;
              }
            }
            uint64_t v93 = *(void *)(*(void *)(v1 + 136) + 16);
            char v94 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v162 = *(void *)(v1 + 144);
            uint64_t v19 = v162;
            *(void *)(v1 + 144) = 0x8000000000000000;
            unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(v15 | (unint64_t)(v91 << 32));
            uint64_t v96 = *(void *)(v19 + 16);
            BOOL v97 = (v95 & 1) == 0;
            uint64_t v98 = v96 + v97;
            if (__OFADD__(v96, v97)) {
              goto LABEL_213;
            }
            char v99 = v95;
            if (*(void *)(v19 + 24) >= v98)
            {
              if (v94)
              {
                uint64_t v102 = (void *)v162;
                if ((v95 & 1) == 0) {
                  goto LABEL_160;
                }
              }
              else
              {
                uint64_t v19 = (uint64_t)&v162;
                specialized _NativeDictionary.copy()();
                uint64_t v102 = (void *)v162;
                if ((v99 & 1) == 0) {
                  goto LABEL_160;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v98, v94);
              uint64_t v19 = v162;
              unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v15 | (unint64_t)(v91 << 32));
              if ((v99 & 1) != (v101 & 1))
              {
                while (1)
                {
LABEL_249:
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                  __break(1u);
LABEL_248:
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                }
              }
              unint64_t v1 = v100;
              uint64_t v102 = (void *)v162;
              if ((v99 & 1) == 0)
              {
LABEL_160:
                v102[(v1 >> 6) + 8] |= 1 << v1;
                uint64_t v103 = (_DWORD *)(v102[6] + 8 * v1);
                *uint64_t v103 = v15;
                v103[1] = v91;
                *(void *)(v102[7] + 8 * v1) = v93;
                uint64_t v104 = v102[2];
                BOOL v105 = __OFADD__(v104, 1);
                uint64_t v106 = v104 + 1;
                if (v105) {
                  goto LABEL_214;
                }
                v102[2] = v106;
                goto LABEL_149;
              }
            }
            *(void *)(v102[7] + 8 * v1) = v93;
LABEL_149:
            unint64_t v1 = v161;
            *(void *)(v161 + 144) = v102;
            swift_bridgeObjectRelease();
            uint64_t v91 = (v91 + 1);
            --v90;
            int v75 = v158;
            if (!v90) {
              goto LABEL_144;
            }
            continue;
          }
          break;
        }
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        swift_bridgeObjectRelease();
        if (!v139)
        {
LABEL_219:
          uint64_t v19 = (uint64_t)v148;
LABEL_173:
          if (swift_isUniquelyReferenced_nonNull_native()) {
            goto LABEL_174;
          }
          goto LABEL_247;
        }
        uint64_t v19 = (uint64_t)v148;
        int64_t v155 = *((void *)v148 + 2);
        if (v155)
        {
          while (1)
          {
            unint64_t v15 = 0;
            uint64_t v153 = v19 + 32;
            uint64_t v149 = v19;
            while (1)
            {
              if (v15 >= *(void *)(v19 + 16)) {
                goto LABEL_226;
              }
              uint64_t v19 = *(void *)(v1 + 144);
              if (*(void *)(v19 + 16))
              {
                uint64_t v160 = *(unsigned int *)(v153 + 8 * v15 + 4);
                unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)((*(_DWORD *)(v153 + 8 * v15) - 1) | ((unint64_t)v160 << 32));
                if (v112)
                {
                  unint64_t v113 = *(void *)(*(void *)(v19 + 56) + 8 * v111);
                  if ((v113 & 0x8000000000000000) != 0) {
                    goto LABEL_228;
                  }
                  uint64_t v19 = (uint64_t)*v147;
                  unint64_t v114 = *((void *)*v147 + 2);
                  if (v113 >= v114) {
                    goto LABEL_229;
                  }
                  if ((~*(void *)(v19 + 104 * v113 + 96) & 0x7FF0000000000000) == 0)
                  {
                    unint64_t v162 = *(void *)v1;
                    lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment();
                    AlignmentGuide.fraction.getter();
                    uint64_t v116 = v115;
                    uint64_t v19 = *(void *)(v1 + 136);
                    char v117 = swift_isUniquelyReferenced_nonNull_native();
                    *(void *)(v1 + 136) = v19;
                    if ((v117 & 1) == 0) {
                      uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
                    }
                    if (v113 >= *(void *)(v19 + 16)) {
                      goto LABEL_237;
                    }
                    *(void *)(v19 + 104 * v113 + 96) = v116;
                    *uint64_t v147 = (char *)v19;
                    unint64_t v114 = *(void *)(v19 + 16);
                  }
                  if (v113 >= v114) {
                    goto LABEL_230;
                  }
                  uint64_t v118 = v19 + 104 * v113;
                  int v119 = *(_DWORD *)(v118 + 32);
                  int v120 = *(_DWORD *)(v118 + 40);
                  if (v120 < v119) {
                    goto LABEL_231;
                  }
                  unint64_t v121 = *(void *)(*v151 + 16);
                  if (v121 >> 31) {
                    goto LABEL_232;
                  }
                  if (v120 < (int)v121)
                  {
                    char v122 = swift_isUniquelyReferenced_nonNull_native();
                    int v123 = (uint64_t *)v147;
                    *uint64_t v147 = (char *)v19;
                    if ((v122 & 1) == 0)
                    {
                      Swift::Int v137 = specialized _ArrayBuffer._consumeAndCreateNew()(v19);
                      int v123 = (uint64_t *)v147;
                      uint64_t v19 = (uint64_t)v137;
                    }
                    if (v113 >= *(void *)(v19 + 16)) {
                      goto LABEL_238;
                    }
                    uint64_t v124 = v19 + 104 * v113;
                    *(_DWORD *)(v124 + 32) = v119;
                    *(_DWORD *)(v124 + 40) = v121;
                    *int v123 = v19;
                    if (v119 != v121) {
                      break;
                    }
                  }
                }
              }
LABEL_178:
              ++v15;
              uint64_t v19 = v149;
              if (v15 == v155) {
                return swift_bridgeObjectRelease();
              }
            }
            uint64_t v157 = v160 << 32;
            while (v119 < (int)v121)
            {
              if (v119 >= v120)
              {
                char v125 = swift_isUniquelyReferenced_nonNull_native();
                unint64_t v162 = *(void *)(v1 + 144);
                uint64_t v19 = v162;
                *(void *)(v1 + 144) = 0x8000000000000000;
                unint64_t v127 = specialized __RawDictionaryStorage.find<A>(_:)(v157 | v119);
                uint64_t v128 = *(void *)(v19 + 16);
                BOOL v129 = (v126 & 1) == 0;
                uint64_t v130 = v128 + v129;
                if (__OFADD__(v128, v129)) {
                  goto LABEL_225;
                }
                unint64_t v1 = v126;
                if (*(void *)(v19 + 24) >= v130)
                {
                  if ((v125 & 1) == 0)
                  {
                    uint64_t v19 = (uint64_t)&v162;
                    specialized _NativeDictionary.copy()();
                  }
                }
                else
                {
                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v130, v125);
                  uint64_t v19 = v162;
                  unint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(v157 | v119);
                  if ((v1 & 1) != (v132 & 1)) {
                    goto LABEL_249;
                  }
                  unint64_t v127 = v131;
                }
                uint64_t v133 = (void *)v162;
                if (v1)
                {
                  *(void *)(*(void *)(v162 + 56) + 8 * v127) = v113;
                }
                else
                {
                  *(void *)(v162 + 8 * (v127 >> 6) + 64) |= 1 << v127;
                  uint64_t v134 = (int *)(v133[6] + 8 * v127);
                  *uint64_t v134 = v119;
                  v134[1] = v160;
                  *(void *)(v133[7] + 8 * v127) = v113;
                  uint64_t v135 = v133[2];
                  BOOL v105 = __OFADD__(v135, 1);
                  uint64_t v136 = v135 + 1;
                  if (v105) {
                    goto LABEL_227;
                  }
                  v133[2] = v136;
                }
                unint64_t v1 = v161;
                *(void *)(v161 + 144) = v133;
                swift_bridgeObjectRelease();
              }
              if (v121 == ++v119) {
                goto LABEL_178;
              }
            }
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
LABEL_235:
            __break(1u);
LABEL_236:
            __break(1u);
LABEL_237:
            __break(1u);
LABEL_238:
            __break(1u);
LABEL_239:
            __break(1u);
LABEL_240:
            __break(1u);
LABEL_241:
            __break(1u);
LABEL_242:
            __break(1u);
LABEL_243:
            __break(1u);
LABEL_244:
            __break(1u);
LABEL_245:
            __break(1u);
LABEL_246:
            __break(1u);
LABEL_247:
            uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, (char *)v19);
LABEL_174:
            unint64_t v109 = *(void *)(v19 + 16);
            unint64_t v108 = *(void *)(v19 + 24);
            int64_t v155 = v109 + 1;
            if (v109 >= v108 >> 1) {
              uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v108 > 1), v155, 1, (char *)v19);
            }
            *(void *)(v19 + 16) = v155;
            uint64_t v110 = v19 + 8 * v109;
            *(_DWORD *)(v110 + 32) = v15;
            *(_DWORD *)(v110 + 36) = v140;
          }
        }
        return swift_bridgeObjectRelease();
    }
  }
}

uint64_t GridLayout.Cache.sizeGenerally()()
{
  uint64_t v1 = v0;
  char v209 = *(unsigned char *)(v0 + 80);
  unsigned __int8 v2 = v209 ^ 1;
  v217[0] = v209 ^ 1;
  if ((*(unsigned char *)(v1 + 96) & 1) == 0)
  {
    v2 |= 2u;
    v217[0] = v2;
  }
  uint64_t v216 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI11GeneralItem33_69F00159ECCD7162D5EDC19B53BBB085LLVs5NeverOTg503_s7d42UI10GridLayoutV5CacheV13sizeGenerally33_69hijklm9LLyyFAA11fG12AGLLVSiXEfU_AG0qR0V0T0VAG4AxisO3SetVTf1cn_n(0, *(void *)(*(void *)(v1 + 136) + 16), v1, v217);
  uint64_t result = specialized MutableCollection<>.sort(by:)(&v216);
  uint64_t v4 = v216;
  uint64_t v5 = *((void *)v216 + 2);
  if (!v5) {
    return swift_bridgeObjectRelease();
  }
  unsigned __int8 v208 = v2;
  unint64_t v6 = 0;
  uint64_t v7 = v216 + 32;
  uint64_t v205 = v216 + 40;
  v215 = v216;
  while (1)
  {
    if ((v6 & 0x8000000000000000) != 0) {
      goto LABEL_351;
    }
    if (v6 >= *((void *)v4 + 2)) {
      goto LABEL_352;
    }
    unint64_t v210 = v6;
    if ((uint64_t)v6 < v5)
    {
      double v8 = *(double *)&v205[64 * v6];
      int64_t v9 = v6;
      while ((v9 & 0x8000000000000000) == 0)
      {
        if ((unint64_t)v9 >= *((void *)v4 + 2)) {
          goto LABEL_323;
        }
        char v10 = &v7[64 * v9];
        if (*((double *)v10 + 1) != v8) {
          goto LABEL_65;
        }
        unint64_t v11 = *(void *)v10;
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_329;
        }
        uint64_t v12 = *(void *)(v1 + 136);
        if (v11 >= *(void *)(v12 + 16)) {
          goto LABEL_330;
        }
        char v13 = (int *)(v12 + 104 * v11);
        uint64_t v14 = v13[8];
        uint64_t v15 = v13[10];
        if ((int)v15 < (int)v14) {
          goto LABEL_331;
        }
        uint64_t v16 = v13[9];
        uint64_t v17 = v13[11];
        if (v15 == v14) {
          goto LABEL_41;
        }
        if ((int)v17 < (int)v16) {
          goto LABEL_340;
        }
        if (__OFSUB__(v17, v16)) {
          goto LABEL_341;
        }
        uint64_t v18 = *(void *)(v1 + 104);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v18);
          uint64_t v18 = result;
        }
        BOOL v19 = (int)(v15 ^ v14) >= 0;
        if ((int)v14 >= 0) {
          int v20 = v14;
        }
        else {
          int v20 = -(int)v14;
        }
        if ((int)v15 >= 0) {
          int v21 = v15;
        }
        else {
          int v21 = -(int)v15;
        }
        int v22 = v15 - v14;
        if (!__OFSUB__(v15, v14)) {
          BOOL v19 = 0;
        }
        uint64_t v23 = v22;
        uint64_t v24 = (v21 + v20);
        if ((int)(v15 ^ v14) < 0) {
          uint64_t v23 = -v24;
        }
        uint64_t v25 = (_DWORD *)(v18 + (v14 << 6) + 92);
        uint64_t v26 = v14;
        do
        {
          if (v26 >= v15)
          {
LABEL_303:
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
LABEL_307:
            __break(1u);
LABEL_308:
            __break(1u);
LABEL_309:
            __break(1u);
LABEL_310:
            __break(1u);
            goto LABEL_311;
          }
          if ((v14 & 0x80000000) != 0) {
            goto LABEL_304;
          }
          uint64_t v27 = *(void *)(v18 + 16);
          if (v27 <= v26) {
            goto LABEL_305;
          }
          *(v25 - 1) += v17 - v16;
          if (v19) {
            goto LABEL_309;
          }
          if (v23 != v27) {
            ++*v25;
          }
          v25 += 16;
          ++v26;
          --v22;
        }
        while (v22);
        *(void *)(v1 + 104) = v18;
        uint64_t v4 = v215;
LABEL_41:
        if ((int)v17 < (int)v16) {
          goto LABEL_332;
        }
        if (v17 == v16) {
          goto LABEL_10;
        }
        BOOL v28 = __OFSUB__(v15, v14);
        int v29 = v15 - v14;
        if (v28) {
          goto LABEL_344;
        }
        uint64_t v30 = *(void *)(v1 + 112);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v30);
          uint64_t v30 = result;
        }
        BOOL v31 = (int)(v17 ^ v16) >= 0;
        if ((int)v16 >= 0) {
          int v32 = v16;
        }
        else {
          int v32 = -(int)v16;
        }
        if ((int)v17 >= 0) {
          int v33 = v17;
        }
        else {
          int v33 = -(int)v17;
        }
        int v34 = v17 - v16;
        if (!__OFSUB__(v17, v16)) {
          BOOL v31 = 0;
        }
        uint64_t v35 = v34;
        uint64_t v36 = (v33 + v32);
        if ((int)(v17 ^ v16) < 0) {
          uint64_t v35 = -v36;
        }
        uint64_t v37 = (_DWORD *)(v30 + (v16 << 6) + 92);
        uint64_t v38 = v16;
        do
        {
          if (v38 >= v17) {
            goto LABEL_306;
          }
          if ((v16 & 0x80000000) != 0) {
            goto LABEL_307;
          }
          uint64_t v39 = *(void *)(v30 + 16);
          if (v39 <= v38) {
            goto LABEL_308;
          }
          *(v37 - 1) += v29;
          if (v31) {
            goto LABEL_310;
          }
          if (v35 != v39) {
            ++*v37;
          }
          v37 += 16;
          ++v38;
          --v34;
        }
        while (v34);
        *(void *)(v1 + 112) = v30;
LABEL_10:
        if (++v9 >= v5) {
          goto LABEL_65;
        }
      }
      goto LABEL_322;
    }
    int64_t v9 = v6;
LABEL_65:
    if (v5 < v9) {
      goto LABEL_353;
    }
    if (v9 != v5) {
      break;
    }
LABEL_67:
    if (*(unsigned char *)(v1 + 80))
    {
      uint64_t v40 = v210;
      goto LABEL_140;
    }
    uint64_t v63 = *(void *)(v1 + 104);
    uint64_t v64 = *(void *)(v63 + 16);
    double v65 = 0.0;
    uint64_t v40 = v210;
    if (v64)
    {
      char v66 = (double *)(v63 + 72);
      double v67 = 0.0;
      uint64_t v68 = *(void *)(v63 + 16);
      do
      {
        double v69 = *(v66 - 1);
        if (v69 <= *v66) {
          double v69 = *v66;
        }
        double v67 = v67 + *(v66 - 5) + v69;
        v66 += 8;
        --v68;
      }
      while (v68);
    }
    else
    {
      double v67 = 0.0;
    }
    uint64_t v70 = *(void *)(v1 + 120);
    uint64_t v71 = *(void *)(v70 + 16);
    if (v71)
    {
      uint64_t v72 = (double *)(v70 + 40);
      double v65 = 0.0;
      do
      {
        double v73 = *v72;
        v72 += 3;
        double v65 = v65 + v73;
        --v71;
      }
      while (v71);
    }
    uint64_t v74 = *(void *)(v1 + 112);
    unint64_t v75 = *(void *)(v74 + 16);
    if (v75)
    {
      if (v75 >= 4)
      {
        uint64_t v76 = v75 & 0x7FFFFFFFFFFFFFFCLL;
        int32x2_t v78 = 0;
        Swift::String v79 = (__int32 *)(v74 + 280);
        uint64_t v80 = v75 & 0x7FFFFFFFFFFFFFFCLL;
        int32x2_t v81 = 0;
        do
        {
          v82.i32[0] = *(v79 - 48);
          v82.i32[1] = *(v79 - 32);
          v83.i32[0] = *(v79 - 16);
          v83.i32[1] = *v79;
          int32x2_t v78 = vmax_s32(v82, v78);
          int32x2_t v81 = vmax_s32(v83, v81);
          v79 += 64;
          v80 -= 4;
        }
        while (v80);
        int32x2_t v84 = vmax_s32(v78, v81);
        int v77 = vpmax_s32(v84, v84).u32[0];
        if (v75 == v76) {
          goto LABEL_122;
        }
      }
      else
      {
        uint64_t v76 = 0;
        int v77 = 0;
      }
      unint64_t v85 = v75 - v76;
      char v86 = (int *)(v74 + (v76 << 6) + 88);
      do
      {
        int v88 = *v86;
        v86 += 16;
        int v87 = v88;
        if (v88 > v77) {
          int v77 = v87;
        }
        --v85;
      }
      while (v85);
    }
    else
    {
      int v77 = 0;
    }
LABEL_122:
    double v89 = (*(double *)(v1 + 72) - v67 - v65) / (double)v77;
    if (v89 < 0.0) {
      double v90 = 0.0;
    }
    else {
      double v90 = v89;
    }
    if (v64)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v63);
        uint64_t v63 = result;
      }
      unint64_t v91 = *(void *)(v63 + 16);
      unint64_t v92 = v64 - 1;
      if (v91 < v64 - 1) {
        unint64_t v92 = *(void *)(v63 + 16);
      }
      if (v92 >= 2)
      {
        unint64_t v94 = v92 + 1;
        uint64_t v95 = v94 & 1;
        if ((v94 & 1) == 0) {
          uint64_t v95 = 2;
        }
        unint64_t v93 = v94 - v95;
        uint64_t v96 = (double *)(v63 + 144);
        unint64_t v97 = v93;
        do
        {
          *(v96 - 8) = v90;
          *uint64_t v96 = v90;
          v96 += 16;
          v97 -= 2;
        }
        while (v97);
      }
      else
      {
        unint64_t v93 = 0;
      }
      uint64_t v98 = (v93 << 6) + 80;
      do
      {
        if (v93 >= v91) {
          goto LABEL_313;
        }
        ++v93;
        *(double *)(v63 + v98) = v90;
        v98 += 64;
      }
      while (v64 != v93);
      *(void *)(v1 + 104) = v63;
    }
LABEL_140:
    if (*(unsigned char *)(v1 + 96)) {
      goto LABEL_180;
    }
    uint64_t v99 = *(void *)(v1 + 112);
    uint64_t v100 = *(void *)(v99 + 16);
    double v101 = 0.0;
    if (v100)
    {
      uint64_t v102 = (double *)(v99 + 72);
      double v103 = 0.0;
      uint64_t v104 = *(void *)(v99 + 16);
      do
      {
        double v105 = *(v102 - 1);
        if (v105 <= *v102) {
          double v105 = *v102;
        }
        double v103 = v103 + *(v102 - 5) + v105;
        v102 += 8;
        --v104;
      }
      while (v104);
    }
    else
    {
      double v103 = 0.0;
    }
    uint64_t v106 = *(void *)(v1 + 128);
    uint64_t v107 = *(void *)(v106 + 16);
    if (v107)
    {
      unint64_t v108 = (double *)(v106 + 40);
      double v101 = 0.0;
      do
      {
        double v109 = *v108;
        v108 += 3;
        double v101 = v101 + v109;
        --v107;
      }
      while (v107);
    }
    uint64_t v110 = *(void *)(v1 + 104);
    unint64_t v111 = *(void *)(v110 + 16);
    if (v111)
    {
      if (v111 >= 4)
      {
        uint64_t v112 = v111 & 0x7FFFFFFFFFFFFFFCLL;
        int32x2_t v114 = 0;
        uint64_t v115 = (__int32 *)(v110 + 280);
        uint64_t v116 = v111 & 0x7FFFFFFFFFFFFFFCLL;
        int32x2_t v117 = 0;
        do
        {
          v118.i32[0] = *(v115 - 48);
          v118.i32[1] = *(v115 - 32);
          v119.i32[0] = *(v115 - 16);
          v119.i32[1] = *v115;
          int32x2_t v114 = vmax_s32(v118, v114);
          int32x2_t v117 = vmax_s32(v119, v117);
          v115 += 64;
          v116 -= 4;
        }
        while (v116);
        int32x2_t v120 = vmax_s32(v114, v117);
        int v113 = vpmax_s32(v120, v120).u32[0];
        if (v111 == v112) {
          goto LABEL_162;
        }
      }
      else
      {
        uint64_t v112 = 0;
        int v113 = 0;
      }
      unint64_t v121 = v111 - v112;
      char v122 = (int *)(v110 + (v112 << 6) + 88);
      do
      {
        int v124 = *v122;
        v122 += 16;
        int v123 = v124;
        if (v124 > v113) {
          int v113 = v123;
        }
        --v121;
      }
      while (v121);
    }
    else
    {
      int v113 = 0;
    }
LABEL_162:
    double v125 = (*(double *)(v1 + 88) - v103 - v101) / (double)v113;
    if (v125 < 0.0) {
      double v126 = 0.0;
    }
    else {
      double v126 = v125;
    }
    if (v100)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v99);
        uint64_t v99 = result;
      }
      unint64_t v127 = *(void *)(v99 + 16);
      unint64_t v128 = v100 - 1;
      if (v127 < v100 - 1) {
        unint64_t v128 = *(void *)(v99 + 16);
      }
      if (v128 >= 2)
      {
        unint64_t v130 = v128 + 1;
        uint64_t v131 = v130 & 1;
        if ((v130 & 1) == 0) {
          uint64_t v131 = 2;
        }
        unint64_t v129 = v130 - v131;
        char v132 = (double *)(v99 + 144);
        unint64_t v133 = v129;
        do
        {
          *(v132 - 8) = v126;
          double *v132 = v126;
          v132 += 16;
          v133 -= 2;
        }
        while (v133);
      }
      else
      {
        unint64_t v129 = 0;
      }
      uint64_t v134 = (v129 << 6) + 80;
      do
      {
        if (v129 >= v127) {
          goto LABEL_314;
        }
        ++v129;
        *(double *)(v99 + v134) = v126;
        v134 += 64;
      }
      while (v100 != v129);
      *(void *)(v1 + 112) = v99;
    }
LABEL_180:
    if (v9 < v40) {
      goto LABEL_355;
    }
    uint64_t v204 = v5;
    if (v40 != v9)
    {
      uint64_t v142 = v40;
      uint64_t v214 = v7;
      do
      {
        if (v142 == v9) {
          goto LABEL_347;
        }
        uint64_t v145 = *((void *)v4 + 2);
        if (v40 < v142)
        {
          if (v142 >= v145) {
            goto LABEL_354;
          }
          char v146 = &v7[64 * v142];
          double v147 = *((double *)v146 + 1);
          uint64_t v148 = &v7[64 * v40];
          double v149 = *((double *)v148 + 1);
          if (v147 == v149)
          {
            double v150 = *((double *)v146 + 4);
            double v151 = *((double *)v148 + 4);
            BOOL v152 = v150 < v151;
            if (v150 == v151)
            {
              double v153 = *((double *)v146 + 5);
              double v154 = *((double *)v148 + 5);
              BOOL v152 = v153 < v154;
              if (v153 == v154)
              {
                double v155 = *((double *)v146 + 6);
                double v156 = *((double *)v148 + 6);
                BOOL v152 = v155 < v156;
                if (v155 == v156)
                {
                  if (v146[56] > v148[56]) {
                    goto LABEL_211;
                  }
                  goto LABEL_204;
                }
              }
            }
          }
          else
          {
            BOOL v152 = v149 < v147;
          }
          if (!v152)
          {
LABEL_211:
            while (v40 < *((void *)v4 + 2))
            {
              unint64_t v168 = *(void *)&v7[64 * v40];
              if ((v168 & 0x8000000000000000) != 0) {
                goto LABEL_325;
              }
              uint64_t v169 = *(void *)(v1 + 136);
              if (v168 >= *(void *)(v169 + 16)) {
                goto LABEL_326;
              }
              __int16 v170 = (int *)(v169 + 104 * v168);
              uint64_t v171 = v170[8];
              uint64_t v172 = v170[10];
              if ((int)v172 < (int)v171) {
                goto LABEL_327;
              }
              uint64_t v173 = v40;
              uint64_t v174 = v170[9];
              uint64_t v175 = v170[11];
              if (v172 != v171)
              {
                if ((int)v175 < (int)v174) {
                  goto LABEL_335;
                }
                if (!__OFSUB__(v175, v174))
                {
                  uint64_t v176 = *(void *)(v1 + 104);
                  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                  if ((result & 1) == 0)
                  {
                    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v176);
                    uint64_t v176 = result;
                  }
                  uint64_t v177 = (v171 << 6) + 88;
                  int v178 = v172 - v171;
                  uint64_t v179 = v171;
                  while (v179 < v172)
                  {
                    if ((v171 & 0x80000000) != 0) {
                      goto LABEL_298;
                    }
                    if (*(void *)(v176 + 16) <= v179) {
                      goto LABEL_299;
                    }
                    *(_DWORD *)(v176 + v177) -= v175 - v174;
                    v177 += 64;
                    ++v179;
                    if (!--v178)
                    {
                      *(void *)(v1 + 104) = v176;
                      uint64_t v4 = v215;
                      goto LABEL_226;
                    }
                  }
                  goto LABEL_297;
                }
                goto LABEL_336;
              }
LABEL_226:
              if (((v172 ^ v171) & 0x80000000) != 0)
              {
                if ((int)v171 >= 0) {
                  int v181 = v171;
                }
                else {
                  int v181 = -(int)v171;
                }
                if ((int)v172 >= 0) {
                  int v182 = v172;
                }
                else {
                  int v182 = -(int)v172;
                }
                BOOL v183 = __CFADD__(v181, v182);
                uint64_t v180 = (v181 + v182);
                if (v183) {
                  goto LABEL_345;
                }
                if ((int)v171 >= 0) {
                  uint64_t v180 = -v180;
                }
              }
              else
              {
                LODWORD(v180) = v172 - v171;
                if (__OFSUB__(v172, v171)) {
                  goto LABEL_333;
                }
                uint64_t v180 = (int)v180;
              }
              uint64_t v184 = *(void *)(v1 + 104);
              if (v180 != *(void *)(v184 + 16))
              {
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if (result)
                {
                  if ((v171 & 0x80000000) != 0) {
                    goto LABEL_339;
                  }
                }
                else
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v184);
                  uint64_t v184 = result;
                  if ((v171 & 0x80000000) != 0) {
                    goto LABEL_339;
                  }
                }
                if (*(void *)(v184 + 16) <= v171) {
                  goto LABEL_337;
                }
                uint64_t v185 = v184 + (v171 << 6);
                --*(_DWORD *)(v185 + 92);
                *(void *)(v1 + 104) = v184;
                if (!*(_DWORD *)(v185 + 92)) {
                  uint64_t result = GridLayout.Cache.reassignAvailability(in:at:)(0, v171);
                }
              }
              if ((int)v175 < (int)v174) {
                goto LABEL_328;
              }
              if (v175 != v174)
              {
                BOOL v28 = __OFSUB__(v172, v171);
                int v186 = v172 - v171;
                if (v28) {
                  goto LABEL_338;
                }
                uint64_t v187 = *(void *)(v1 + 112);
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if ((result & 1) == 0)
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v187);
                  uint64_t v187 = result;
                }
                uint64_t v188 = (v174 << 6) + 88;
                int v189 = v175 - v174;
                uint64_t v190 = v174;
                while (v190 < v175)
                {
                  if ((v174 & 0x80000000) != 0) {
                    goto LABEL_301;
                  }
                  if (*(void *)(v187 + 16) <= v190) {
                    goto LABEL_302;
                  }
                  *(_DWORD *)(v187 + v188) -= v186;
                  v188 += 64;
                  ++v190;
                  if (!--v189)
                  {
                    *(void *)(v1 + 112) = v187;
                    goto LABEL_255;
                  }
                }
                goto LABEL_300;
              }
LABEL_255:
              if (((v175 ^ v174) & 0x80000000) != 0)
              {
                if ((int)v174 >= 0) {
                  int v192 = v174;
                }
                else {
                  int v192 = -(int)v174;
                }
                if ((int)v175 >= 0) {
                  int v193 = v175;
                }
                else {
                  int v193 = -(int)v175;
                }
                BOOL v183 = __CFADD__(v192, v193);
                uint64_t v191 = (v192 + v193);
                if (v183) {
                  goto LABEL_346;
                }
                if ((int)v174 >= 0) {
                  uint64_t v191 = -v191;
                }
              }
              else
              {
                LODWORD(v191) = v175 - v174;
                if (__OFSUB__(v175, v174)) {
                  goto LABEL_334;
                }
                uint64_t v191 = (int)v191;
              }
              uint64_t v194 = *(void *)(v1 + 112);
              uint64_t v195 = v173;
              uint64_t v7 = v214;
              if (v191 != *(void *)(v194 + 16))
              {
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                if (result)
                {
                  if ((v174 & 0x80000000) != 0) {
                    goto LABEL_343;
                  }
                }
                else
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v194);
                  uint64_t v194 = result;
                  if ((v174 & 0x80000000) != 0) {
                    goto LABEL_343;
                  }
                }
                if (*(void *)(v194 + 16) <= v174) {
                  goto LABEL_342;
                }
                uint64_t v196 = v194 + (v174 << 6);
                --*(_DWORD *)(v196 + 92);
                *(void *)(v1 + 112) = v194;
                if (!*(_DWORD *)(v196 + 92)) {
                  uint64_t result = GridLayout.Cache.reassignAvailability(in:at:)(1, v174);
                }
              }
              uint64_t v40 = v195 + 1;
              if (v40 >= v142)
              {
                if (v142 < *((void *)v4 + 2)) {
                  goto LABEL_205;
                }
                goto LABEL_350;
              }
            }
            goto LABEL_324;
          }
        }
LABEL_204:
        if (v142 >= v145) {
          goto LABEL_350;
        }
LABEL_205:
        unint64_t v157 = *(void *)&v7[64 * v142];
        if ((v157 & 0x8000000000000000) != 0) {
          goto LABEL_348;
        }
        uint64_t v158 = *(void *)(v1 + 136);
        if (v157 >= *(void *)(v158 + 16)) {
          goto LABEL_349;
        }
        uint64_t v211 = v40;
        uint64_t v159 = v158 + 104 * v157;
        uint64_t v160 = *(unsigned int *)(v159 + 32);
        uint64_t v161 = *(unsigned int *)(v159 + 36);
        uint64_t v162 = *(unsigned int *)(v159 + 40);
        uint64_t v163 = *(unsigned int *)(v159 + 44);
        char v164 = *(unsigned char *)(v159 + 112);
        uint64_t v165 = static ProposedViewSize.unspecified.getter();
        uint64_t v206 = v162;
        uint64_t v207 = v161;
        if (v209)
        {
          uint64_t v144 = v165;
          char v167 = v166 & 1;
          if ((v208 & 2) == 0) {
            goto LABEL_191;
          }
        }
        else
        {
          GridLayout.Cache.proposal(for:in:includeAvailable:)(0, v160 | (v161 << 32), v162 | (v163 << 32), (v164 & 1) == 0);
          char v167 = 0;
          uint64_t v144 = v197;
          if ((v208 & 2) == 0) {
            goto LABEL_191;
          }
        }
        uint64_t v143 = v144;
        GridLayout.Cache.proposal(for:in:includeAvailable:)(1, v160 | (v207 << 32), v206 | (v163 << 32), (v164 & 2) == 0);
        uint64_t v144 = v143;
LABEL_191:
        uint64_t v4 = v215;
        ++v142;
        uint64_t result = GridLayout.Cache.resize(at:proposal:)(v157, v144, v167);
        uint64_t v40 = v211;
        uint64_t v7 = v214;
      }
      while (v142 != v9);
    }
    uint64_t v135 = v7;
    uint64_t v136 = *(void *)(v1 + 104);
    uint64_t v137 = *(void *)(v136 + 16);
    if (v137)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v5 = v204;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v136);
        uint64_t v136 = result;
      }
      unint64_t v138 = 0;
      unint64_t v139 = *(void *)(v136 + 16);
      uint64_t v140 = 72;
      while (v138 < v139)
      {
        ++v138;
        int v141 = (void *)(v136 + v140);
        void *v141 = 0;
        v141[1] = 0;
        v141[2] = 0;
        v140 += 64;
        if (v137 == v138)
        {
          *(void *)(v1 + 104) = v136;
          goto LABEL_282;
        }
      }
LABEL_311:
      __break(1u);
      goto LABEL_312;
    }
    uint64_t v5 = v204;
LABEL_282:
    uint64_t v198 = *(void *)(v1 + 112);
    uint64_t v199 = *(void *)(v198 + 16);
    if (v199)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v198);
        uint64_t v198 = result;
      }
      unint64_t v200 = 0;
      unint64_t v201 = *(void *)(v198 + 16);
      uint64_t v202 = 72;
      while (v200 < v201)
      {
        ++v200;
        uint64_t v203 = (void *)(v198 + v202);
        void *v203 = 0;
        v203[1] = 0;
        v203[2] = 0;
        v202 += 64;
        if (v199 == v200)
        {
          *(void *)(v1 + 112) = v198;
          goto LABEL_289;
        }
      }
LABEL_312:
      __break(1u);
LABEL_313:
      __break(1u);
LABEL_314:
      __break(1u);
      goto LABEL_315;
    }
LABEL_289:
    unint64_t v6 = v9;
    uint64_t v7 = v135;
    if (v9 >= v5) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v213 = *(void *)(v1 + 136);
  uint64_t v212 = v9;
  unint64_t v41 = v9;
  while (v41 != v5)
  {
    if (v9 < 0) {
      goto LABEL_316;
    }
    if (v41 >= *((void *)v4 + 2)) {
      goto LABEL_317;
    }
    uint64_t v42 = &v7[64 * v41];
    unint64_t v43 = *(void *)v42;
    if ((*(void *)v42 & 0x8000000000000000) != 0) {
      goto LABEL_318;
    }
    if (v43 >= *(void *)(v213 + 16)) {
      goto LABEL_319;
    }
    double v44 = v7;
    uint64_t v45 = v5;
    int v46 = (int *)(v213 + 32 + 104 * v43);
    uint64_t v47 = *v46;
    uint64_t v48 = v46[2];
    if ((int)v48 < (int)v47) {
      goto LABEL_320;
    }
    double v49 = *((double *)v42 + 3);
    uint64_t v50 = v46[1];
    uint64_t v51 = v46[3];
    if (v48 == v47) {
      goto LABEL_89;
    }
    double v52 = *((double *)v42 + 2);
    uint64_t v53 = *(void *)(v1 + 104);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v53);
      uint64_t v53 = result;
    }
    double v54 = v52 / (double)((int)v48 - (int)v47);
    uint64_t v55 = (v47 << 6) + 72;
    int v56 = v48 - v47;
    uint64_t v57 = v47;
    do
    {
      if (v57 >= v48)
      {
        __break(1u);
LABEL_292:
        __break(1u);
LABEL_293:
        __break(1u);
LABEL_294:
        __break(1u);
LABEL_295:
        __break(1u);
LABEL_296:
        __break(1u);
LABEL_297:
        __break(1u);
LABEL_298:
        __break(1u);
LABEL_299:
        __break(1u);
LABEL_300:
        __break(1u);
LABEL_301:
        __break(1u);
LABEL_302:
        __break(1u);
        goto LABEL_303;
      }
      if ((v47 & 0x80000000) != 0) {
        goto LABEL_292;
      }
      if (*(void *)(v53 + 16) <= v57) {
        goto LABEL_293;
      }
      if (v54 < *(double *)(v53 + v55)) {
        *(double *)(v53 + v55) = v54;
      }
      v55 += 64;
      ++v57;
      --v56;
    }
    while (v56);
    *(void *)(v1 + 104) = v53;
LABEL_89:
    if ((int)v51 < (int)v50) {
      goto LABEL_321;
    }
    uint64_t v5 = v45;
    if (v51 == v50)
    {
      uint64_t v7 = v44;
      int64_t v9 = v212;
    }
    else
    {
      uint64_t v58 = *(void *)(v1 + 112);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v7 = v44;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v58);
        uint64_t v58 = result;
      }
      int64_t v9 = v212;
      double v59 = v49 / (double)((int)v51 - (int)v50);
      uint64_t v60 = (v50 << 6) + 72;
      int v61 = v51 - v50;
      uint64_t v62 = v50;
      do
      {
        if (v62 >= v51) {
          goto LABEL_294;
        }
        if ((v50 & 0x80000000) != 0) {
          goto LABEL_295;
        }
        if (*(void *)(v58 + 16) <= v62) {
          goto LABEL_296;
        }
        if (v59 < *(double *)(v58 + v60)) {
          *(double *)(v58 + v60) = v59;
        }
        v60 += 64;
        ++v62;
        --v61;
      }
      while (v61);
      *(void *)(v1 + 112) = v58;
    }
    ++v41;
    uint64_t v4 = v215;
    if (v41 == v5) {
      goto LABEL_67;
    }
  }
LABEL_315:
  __break(1u);
LABEL_316:
  __break(1u);
LABEL_317:
  __break(1u);
LABEL_318:
  __break(1u);
LABEL_319:
  __break(1u);
LABEL_320:
  __break(1u);
LABEL_321:
  __break(1u);
LABEL_322:
  __break(1u);
LABEL_323:
  __break(1u);
LABEL_324:
  __break(1u);
LABEL_325:
  __break(1u);
LABEL_326:
  __break(1u);
LABEL_327:
  __break(1u);
LABEL_328:
  __break(1u);
LABEL_329:
  __break(1u);
LABEL_330:
  __break(1u);
LABEL_331:
  __break(1u);
LABEL_332:
  __break(1u);
LABEL_333:
  __break(1u);
LABEL_334:
  __break(1u);
LABEL_335:
  __break(1u);
LABEL_336:
  __break(1u);
LABEL_337:
  __break(1u);
LABEL_338:
  __break(1u);
LABEL_339:
  __break(1u);
LABEL_340:
  __break(1u);
LABEL_341:
  __break(1u);
LABEL_342:
  __break(1u);
LABEL_343:
  __break(1u);
LABEL_344:
  __break(1u);
LABEL_345:
  __break(1u);
LABEL_346:
  __break(1u);
LABEL_347:
  __break(1u);
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __break(1u);
LABEL_354:
  __break(1u);
LABEL_355:
  __break(1u);
  return result;
}

uint64_t GridLayout.Cache.finalizeSizes()()
{
  finalize #1 (_:rowsOrColumns:) in GridLayout.Cache.finalizeSizes()((uint64_t *)v0 + 15, (uint64_t *)v0 + 13);
  uint64_t result = finalize #1 (_:rowsOrColumns:) in GridLayout.Cache.finalizeSizes()((uint64_t *)v0 + 16, (uint64_t *)v0 + 14);
  unsigned __int8 v2 = (char *)*((void *)v0 + 17);
  uint64_t v3 = *((void *)v2 + 2);
  if (!v3) {
    return result;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_68:
  }
    unsigned __int8 v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  unint64_t v4 = 0;
  int v50 = *((_DWORD *)v0 + 12);
  uint64_t v49 = *((void *)v0 + 7);
  uint64_t v5 = *((void *)v0 + 13);
  uint64_t v6 = *((void *)v0 + 14);
  uint64_t v7 = v2 + 32;
  char v47 = *((unsigned char *)v0 + 65);
  char v48 = *((unsigned char *)v0 + 64);
  int v46 = v0;
  while (1)
  {
    if (v4 == v3) {
      goto LABEL_56;
    }
    if (v4 >= *((void *)v2 + 2)) {
      goto LABEL_57;
    }
    unint64_t v11 = (unsigned int *)&v7[104 * v4];
    int64_t v12 = (int)*v11;
    uint64_t v13 = v11[2];
    if ((int)v13 < (int)v12) {
      goto LABEL_58;
    }
    uint64_t v14 = *v11;
    if ((v12 & 0x80000000) != 0) {
      goto LABEL_59;
    }
    unint64_t v15 = *(void *)(v5 + 16);
    if ((uint64_t)v15 <= v12) {
      goto LABEL_60;
    }
    int64_t v16 = (int)v11[1];
    uint64_t v17 = v11[3];
    double v18 = *(double *)(v5 + 32 + (v12 << 6) + 32);
    if (v13 != v12)
    {
      if (v12 == 0x7FFFFFFF) {
        goto LABEL_64;
      }
      if ((int)v13 < (int)v12 + 1) {
        goto LABEL_65;
      }
      if (v12 + 1 != v13)
      {
        unint64_t v19 = (v13 + ~v12);
        if (v15 <= v14 + 1) {
          unint64_t v15 = v14 + 1;
        }
        uint64_t v20 = ~v14;
        unint64_t v21 = v15 + ~v14;
        unint64_t v22 = v13 - v14 - 2;
        if (v21 < v22) {
          unint64_t v22 = v21;
        }
        if (v22 >= v19) {
          unint64_t v23 = v19;
        }
        else {
          unint64_t v23 = v22;
        }
        uint64_t v24 = (double *)(v5 + 128 + (v14 << 6));
        uint64_t v25 = v20 + v13;
        while (v22 < v19)
        {
          if (v21 == v23) {
            goto LABEL_53;
          }
          double v26 = *(v24 - 4);
          double v27 = *v24;
          v24 += 8;
          double v18 = v18 + v26 + v27;
          if (!--v25) {
            goto LABEL_26;
          }
        }
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
    }
LABEL_26:
    if ((int)v17 < (int)v16) {
      goto LABEL_61;
    }
    uint64_t v28 = v16;
    if ((v16 & 0x80000000) != 0) {
      goto LABEL_62;
    }
    unint64_t v29 = *(void *)(v6 + 16);
    if ((uint64_t)v29 <= v16) {
      goto LABEL_63;
    }
    double v30 = *(double *)(v6 + 32 + (v16 << 6) + 32);
    if (v17 != v16)
    {
      if (v16 == 0x7FFFFFFF) {
        goto LABEL_66;
      }
      if ((int)v17 < (int)v16 + 1) {
        goto LABEL_67;
      }
      if (v16 + 1 != v17)
      {
        unint64_t v31 = (v17 + ~v16);
        if (v29 <= v28 + 1) {
          unint64_t v29 = v28 + 1;
        }
        uint64_t v32 = ~v28;
        unint64_t v33 = v29 + ~v28;
        unint64_t v34 = v17 - v28 - 2;
        if (v33 < v34) {
          unint64_t v34 = v33;
        }
        if (v34 >= v31) {
          unint64_t v35 = v31;
        }
        else {
          unint64_t v35 = v34;
        }
        uint64_t v36 = (double *)(v6 + 128 + (v28 << 6));
        uint64_t v37 = v32 + v17;
        while (v34 < v31)
        {
          if (v33 == v35) {
            goto LABEL_55;
          }
          double v38 = *(v36 - 4);
          double v39 = *v36;
          v36 += 8;
          double v30 = v30 + v38 + v39;
          if (!--v37) {
            goto LABEL_44;
          }
        }
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
    }
LABEL_44:
    uint64_t v40 = &v7[104 * v4];
    long long v42 = *((_OWORD *)v40 + 2);
    unint64_t v41 = v40 + 32;
    long long v43 = v41[1];
    long long v55 = v42;
    long long v56 = v43;
    uint64_t v0 = &v55;
    if (MEMORY[0x18C114450]() != v18 || v44 != v30) {
      break;
    }
LABEL_5:
    ++v4;
    uint64_t result = 104;
    if (v4 == v3) {
      goto LABEL_50;
    }
  }
  LODWORD(v55) = v50;
  *((void *)&v55 + 1) = v49;
  LOBYTE(v56) = v48;
  BYTE1(v56) = v47;
  LayoutSubviews.subscript.getter();
  long long v51 = v53;
  char v52 = v54;
  LOBYTE(v55) = 0;
  uint64_t v0 = &v51;
  uint64_t result = LayoutSubview.dimensions(in:)();
  if (v4 < *((void *)v2 + 2))
  {
    double v8 = v41 - 1;
    uint64_t v9 = *((void *)&v55 + 1);
    *double v8 = v55;
    v8[1] = v9;
    long long v10 = v57;
    *unint64_t v41 = v56;
    v41[1] = v10;
    swift_release();
    goto LABEL_5;
  }
  __break(1u);
LABEL_50:
  *((void *)v46 + 17) = v2;
  return result;
}

uint64_t closure #1 in GridLayout.Cache.alignment(of:)@<X0>(double *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(int *)a1;
  uint64_t v7 = *((int *)a1 + 1);
  double v9 = a1[11];
  double v10 = a1[12];
  *(double *)&uint64_t result = COERCE_DOUBLE(ViewDimensions.subscript.getter());
  if (v12)
  {
LABEL_12:
    *(double *)a4 = *(double *)&result;
    *(unsigned char *)(a4 + 8) = v12 & 1;
    return result;
  }
  if ((v8 & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v13 = *(void *)(a3 + 104);
  if (*(void *)(v13 + 16) <= v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((v7 & 0x80000000) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v14 = *(void *)(a3 + 112);
  if (*(void *)(v14 + 16) > v7)
  {
    double v15 = *(double *)(v13 + (v8 << 6) + 56);
    if (a2) {
      double v16 = v10;
    }
    else {
      double v16 = v9;
    }
    if (a2) {
      double v15 = *(double *)(v14 + (v7 << 6) + 56);
    }
    *(double *)&uint64_t result = v16 + v15 + *(double *)&result;
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t (*GridLayout.Cache.subscript.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GridLayout.Cache.assignSpacing(in:)(uint64_t result)
{
  char v38 = result & 1;
  unsigned __int8 v2 = (unsigned char *)(v1 + 24);
  if (result) {
    unsigned __int8 v2 = (unsigned char *)(v1 + 40);
  }
  if (*v2 != 1) {
    return result;
  }
  uint64_t v3 = *(void *)(v1 + 104);
  uint64_t v4 = *(void *)(v1 + 112);
  if (result)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    if (!v5)
    {
LABEL_18:
      uint64_t v6 = *(void *)(v3 + 16);
      if (!v6) {
        return result;
      }
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (!v5)
    {
      uint64_t v6 = *(void *)(v4 + 16);
      if (!v6) {
        return result;
      }
LABEL_19:
      uint64_t v13 = 0;
      uint64_t v40 = v1;
      uint64_t v36 = v6;
      while (v13 != v6)
      {
        uint64_t v37 = v13;
        if (v38) {
          uint64_t v14 = *(void *)(v1 + 112);
        }
        else {
          uint64_t v14 = *(void *)(v1 + 104);
        }
        uint64_t v39 = *(void *)(v14 + 16);
        if (v39)
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          unint64_t v17 = 0;
          LOBYTE(v18) = 2;
          uint64_t v19 = 32;
          do
          {
            char v20 = v18;
            uint64_t v21 = v16;
            uint64_t v22 = v15;
            if (*(void *)(*(void *)(v40 + 144) + 16)
              && ((int v23 = *(_DWORD *)(v40 + 48),
                   uint64_t v24 = *(void *)(v40 + 56),
                   char v25 = *(unsigned char *)(v40 + 64),
                   char v26 = *(unsigned char *)(v40 + 65),
                   v38)
                ? (unsigned int v27 = v17)
                : (unsigned int v27 = v37),
                  v38 ? (unsigned int v28 = v37) : (unsigned int v28 = v17),
                  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v28 | ((unint64_t)v27 << 32)),
                  (v29 & 1) != 0))
            {
              LODWORD(v46) = v23;
              uint64_t v47 = v24;
              char v48 = v25;
              char v49 = v26;
              uint64_t result = LayoutSubviews.subscript.getter();
              uint64_t v15 = v43;
              uint64_t v16 = v44;
              int v18 = v45;
            }
            else
            {
              uint64_t v15 = 0;
              uint64_t v16 = 0;
              int v18 = 2;
            }
            if (v20 != 2 && v18 != 2)
            {
              uint64_t v46 = v22;
              uint64_t v47 = v21;
              char v48 = v20;
              uint64_t v43 = v15;
              uint64_t v44 = v16;
              unsigned __int8 v45 = v18;
              uint64_t result = MEMORY[0x18C10DB90](&v46, &v43);
              if ((result & 1) == 0)
              {
                uint64_t v46 = v22;
                uint64_t v47 = v21;
                char v48 = v20;
                LayoutSubview.spacing.getter();
                uint64_t v46 = v15;
                uint64_t v47 = v16;
                char v48 = v18;
                LayoutSubview.spacing.getter();
                uint64_t v46 = v41;
                LOBYTE(v47) = v42;
                ViewSpacing.distance(to:along:)();
                double v31 = v30;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v32 = (uint64_t (*)(uint64_t *, void))GridLayout.Cache.subscript.modify();
                unint64_t v34 = v33;
                uint64_t v35 = *v33;
                uint64_t result = swift_isUniquelyReferenced_nonNull_native();
                *unint64_t v34 = v35;
                if (result)
                {
                  if ((v17 & 0x8000000000000000) != 0) {
                    goto LABEL_48;
                  }
                }
                else
                {
                  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
                  uint64_t v35 = result;
                  *unint64_t v34 = result;
                  if ((v17 & 0x8000000000000000) != 0)
                  {
LABEL_48:
                    __break(1u);
                    return result;
                  }
                }
                if (v17 >= *(void *)(v35 + 16))
                {
                  __break(1u);
                  goto LABEL_51;
                }
                if (*(double *)(v35 + v19) < v31) {
                  *(double *)(v35 + v19) = v31;
                }
                uint64_t result = v32(&v46, 0);
              }
            }
            ++v17;
            v19 += 64;
          }
          while (v39 != v17);
        }
        uint64_t v13 = v37 + 1;
        uint64_t v6 = v36;
        uint64_t v1 = v40;
        if (v37 + 1 == v36) {
          return result;
        }
      }
LABEL_52:
      __break(1u);
      return result;
    }
  }
  unint64_t v7 = 0;
  uint64_t v8 = 32;
  do
  {
    double v9 = (uint64_t (*)(uint64_t *, void))GridLayout.Cache.subscript.modify();
    unint64_t v11 = v10;
    uint64_t v12 = *v10;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v11 = v12;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v12);
      uint64_t v12 = result;
      *unint64_t v11 = result;
    }
    if (v7 >= *(void *)(v12 + 16))
    {
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    ++v7;
    *(void *)(v12 + v8) = 0;
    uint64_t result = v9(&v46, 0);
    v8 += 64;
  }
  while (v5 != v7);
  if (v38)
  {
    uint64_t v3 = *(void *)(v1 + 104);
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(*(void *)(v1 + 112) + 16);
  if (v6) {
    goto LABEL_19;
  }
  return result;
}

uint64_t GridLayout.Cache.applyAlignment(in:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 104);
  uint64_t v81 = *(void *)(v1 + 112);
  if (result)
  {
    uint64_t v3 = *(long long **)(*(void *)(v1 + 112) + 16);
    if (!v3) {
      return result;
    }
  }
  else
  {
    uint64_t v3 = *(long long **)(v2 + 16);
    if (!v3) {
      return result;
    }
  }
  int v4 = result & 1;
  uint64_t v87 = *(void *)(v86 + 136);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
LABEL_145:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v87);
    uint64_t v87 = result;
  }
  unint64_t v5 = 0;
  char v85 = 0;
  *(void *)(v86 + 136) = v87;
  uint64_t v6 = v81;
  if (!v4) {
    uint64_t v6 = v2;
  }
  uint64_t v84 = v6;
  int32x2_t v82 = v3;
  uint64_t v83 = v6 + 32;
  uint64_t v88 = v87 + 32;
  uint64_t v80 = v2;
  do
  {
    if ((long long *)v5 == v3)
    {
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
      goto LABEL_145;
    }
    if (v5 >= *(void *)(v84 + 16)) {
      goto LABEL_131;
    }
    if (*(unsigned char *)(v83 + (v5 << 6) + 16) == 1)
    {
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (!v4)
    {
LABEL_17:
      uint64_t v7 = *(void *)(v81 + 16);
      if (!v7) {
        goto LABEL_10;
      }
      goto LABEL_20;
    }
    uint64_t v7 = *(void *)(v2 + 16);
    if (!v7) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(v86 + 144);
    double v10 = INFINITY;
    double v11 = -INFINITY;
    do
    {
      if (v4) {
        unsigned int v22 = v5;
      }
      else {
        unsigned int v22 = v8;
      }
      if (v4) {
        uint64_t v2 = v8;
      }
      else {
        uint64_t v2 = v5;
      }
      if (*(void *)(v9 + 16))
      {
        uint64_t v3 = (long long *)v9;
        uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v2 | ((unint64_t)v22 << 32));
        if (v23)
        {
          unint64_t v24 = *(void *)(*(void *)(v9 + 56) + 8 * result);
          if ((v24 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (v24 >= *(void *)(v87 + 16)) {
            goto LABEL_126;
          }
          char v25 = (int *)(v88 + 104 * v24);
          int v27 = *v25;
          int v26 = v25[1];
          if (v27 == v2 && v26 == v22)
          {
            uint64_t v29 = *(void *)(v86 + 56);
            char v30 = *(unsigned char *)(v86 + 64);
            char v31 = *(unsigned char *)(v86 + 65);
            LODWORD(v89) = *(_DWORD *)(v86 + 48);
            *((void *)&v89 + 1) = v29;
            LOBYTE(v90) = v30;
            BYTE1(v90) = v31;
            uint64_t v3 = &v89;
            LayoutSubviews.subscript.getter();
            uint64_t v2 = 0x7FF0000000000000;
            if (v24 >= *(void *)(v87 + 16)) {
              goto LABEL_127;
            }
            uint64_t result = UnitPoint.subscript.getter();
            if ((~v32 & 0x7FF0000000000000) != 0)
            {
              char v85 = 1;
            }
            else
            {
              uint64_t v12 = v88 + 104 * v24;
              uint64_t v13 = *(void *)(v12 + 24);
              *(void *)&long long v89 = *(void *)(v12 + 16);
              *((void *)&v89 + 1) = v13;
              long long v14 = *(_OWORD *)(v12 + 48);
              long long v90 = *(_OWORD *)(v12 + 32);
              long long v91 = v14;
              ViewDimensions.subscript.getter();
              double v16 = INFINITY;
              if ((*(void *)&v15 & 0xFFFFFFFFFFFFFLL) == 0) {
                double v16 = v15;
              }
              if ((~*(void *)&v15 & 0x7FF0000000000000) != 0) {
                double v17 = v15;
              }
              else {
                double v17 = v16;
              }
              long long v18 = *(_OWORD *)(v12 + 48);
              if (v10 > -v17) {
                double v10 = -v17;
              }
              long long v89 = *(_OWORD *)(v12 + 32);
              long long v90 = v18;
              uint64_t result = ViewSize.subscript.getter();
              double v20 = v19 - v17;
              if (v11 < v20) {
                double v11 = v20;
              }
              uint64_t v21 = (double *)(v12 + 88);
              if (v4) {
                uint64_t v21 = (double *)(v12 + 96);
              }
              *uint64_t v21 = -v17;
            }
          }
        }
      }
      ++v8;
    }
    while (v7 != v8);
    uint64_t v3 = v82;
    if (v10 > v11)
    {
      uint64_t v2 = v80;
      goto LABEL_10;
    }
    if (v5 >= *(void *)(v84 + 16)) {
      goto LABEL_134;
    }
    double v33 = *(double *)(v83 + (v5 << 6) + 32);
    uint64_t result = AlignmentKey.fraction.getter();
    double v34 = 0.0;
    uint64_t v2 = v80;
    if (v35 != 0.0)
    {
      uint64_t result = AlignmentKey.fraction.getter();
      double v34 = (v33 - (v11 - v10)) * v36;
    }
    double v37 = v34 - v10;
    if (v37 != 0.0)
    {
      if (v4)
      {
        uint64_t v38 = *(void *)(v80 + 16);
        if (!v38) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v38 = *(void *)(v81 + 16);
        if (!v38) {
          goto LABEL_10;
        }
      }
      uint64_t v39 = 0;
      uint64_t v3 = *(long long **)(v86 + 144);
      do
      {
        if (v4) {
          unsigned int v40 = v5;
        }
        else {
          unsigned int v40 = v39;
        }
        if (v4) {
          unsigned int v41 = v39;
        }
        else {
          unsigned int v41 = v5;
        }
        if (*((void *)v3 + 2))
        {
          uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v41 | ((unint64_t)v40 << 32));
          if (v42)
          {
            unint64_t v43 = *(void *)(*((void *)v3 + 7) + 8 * result);
            if ((v43 & 0x8000000000000000) != 0) {
              goto LABEL_132;
            }
            if (v43 >= *(void *)(v87 + 16)) {
              goto LABEL_133;
            }
            uint64_t v44 = (int *)(v88 + 104 * v43);
            int v46 = *v44;
            int v45 = v44[1];
            if (v46 == v41 && v45 == v40)
            {
              uint64_t result = UnitPoint.subscript.getter();
              if ((~v48 & 0x7FF0000000000000) == 0)
              {
                uint64_t v49 = v88 + 104 * v43;
                int v50 = (double *)(v49 + 96);
                long long v51 = (double *)(v49 + 88);
                if (v4) {
                  long long v51 = v50;
                }
                *long long v51 = v37 + *v51;
              }
            }
          }
        }
        ++v39;
      }
      while (v38 != v39);
      uint64_t v3 = v82;
    }
LABEL_10:
    ++v5;
  }
  while ((long long *)v5 != v3);
  *(void *)(v86 + 136) = v87;
  if (v85)
  {
    uint64_t v52 = *(void *)(v87 + 16);
    if (v52)
    {
      unint64_t v53 = 0;
      while (v53 < *(void *)(v87 + 16))
      {
        uint64_t v3 = (long long *)(v88 + 104 * v53);
        uint64_t result = UnitPoint.subscript.getter();
        double v55 = v54;
        if ((~*(void *)&v54 & 0x7FF0000000000000) != 0)
        {
          unint64_t v56 = *(void *)(v87 + 16);
          if (v53 >= v56) {
            goto LABEL_136;
          }
          if (v4)
          {
            signed int v57 = *((_DWORD *)v3 + 3);
            signed int v58 = *((_DWORD *)v3 + 1);
            if (v57 < v58) {
              goto LABEL_142;
            }
            uint64_t v59 = v81;
          }
          else
          {
            signed int v57 = *((_DWORD *)v3 + 2);
            signed int v58 = *(_DWORD *)v3;
            if (v57 < *(_DWORD *)v3) {
              goto LABEL_141;
            }
            uint64_t v59 = v2;
          }
          if (v58 < 0) {
            goto LABEL_137;
          }
          unint64_t v60 = *(void *)(v59 + 16);
          if ((uint64_t)v60 <= v58) {
            goto LABEL_138;
          }
          double v61 = *(double *)(v59 + ((uint64_t)v58 << 6) + 64);
          if (v57 < 0 || v57 != v58)
          {
            if (v58 == 0x7FFFFFFF) {
              goto LABEL_143;
            }
            if (v57 <= v58) {
              goto LABEL_144;
            }
            ++v58;
          }
          unint64_t v62 = (v57 - v58);
          if (v57 < v58) {
            goto LABEL_139;
          }
          if (v57 != v58)
          {
            unint64_t v63 = v58;
            uint64_t v64 = v57;
            unint64_t v65 = ~(unint64_t)v58 + v57;
            unint64_t v66 = v60 - v63;
            if (v60 < v63) {
              unint64_t v66 = 0;
            }
            if (v65 >= v66) {
              unint64_t v65 = v66;
            }
            if (v65 >= v62) {
              unint64_t v67 = v62;
            }
            else {
              unint64_t v67 = v65;
            }
            uint64_t v68 = (double *)(v59 + (v63 << 6) + 64);
            uint64_t v69 = v64 - v63;
            while (v65 < v62)
            {
              if (v66 == v67) {
                goto LABEL_129;
              }
              double v70 = *(v68 - 4);
              double v71 = *v68;
              v68 += 8;
              double v61 = v61 + v70 + v71;
              if (!--v69) {
                goto LABEL_115;
              }
            }
            goto LABEL_128;
          }
LABEL_115:
          if (v55 == 0.0)
          {
            double v72 = 0.0;
            if (v53 >= v56) {
              goto LABEL_140;
            }
          }
          else
          {
            uint64_t v73 = v88 + 104 * v53;
            long long v74 = *(_OWORD *)(v73 + 48);
            long long v89 = *(_OWORD *)(v73 + 32);
            long long v90 = v74;
            uint64_t v3 = &v89;
            uint64_t result = MEMORY[0x18C114450](result);
            if (v4) {
              double v75 = v76;
            }
            double v72 = v55 * (v61 - v75);
            if (v53 >= *(void *)(v87 + 16)) {
              goto LABEL_140;
            }
          }
          uint64_t v77 = v88 + 104 * v53;
          int32x2_t v78 = (double *)(v77 + 88);
          Swift::String v79 = (double *)(v77 + 96);
          if (!v4) {
            Swift::String v79 = v78;
          }
          *Swift::String v79 = v72;
          *(void *)(v86 + 136) = v87;
        }
        if (++v53 == v52) {
          return result;
        }
      }
      goto LABEL_135;
    }
  }
  return result;
}

uint64_t assignPositions #1 (to:) in GridLayout.Cache.assignPositions()(uint64_t result)
{
  uint64_t v1 = *(void *)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      uint64_t v1 = result;
    }
    int v4 = (double *)(v1 + 64);
    double v5 = 0.0;
    do
    {
      double v6 = v5 + *(v4 - 4);
      *(v4 - 1) = v6;
      double v7 = *v4;
      v4 += 8;
      double v5 = v6 + v7;
      --v2;
    }
    while (v2);
    *uint64_t v3 = v1;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GeneralItem.FlexibilityEstimate(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t GeneralItem.order(to:)(uint64_t a1)
{
  double v2 = *(double *)(v1 + 8);
  double v3 = *(double *)(a1 + 8);
  if (v2 == v3)
  {
    double v4 = *(double *)(v1 + 32);
    double v5 = *(double *)(a1 + 32);
    BOOL v6 = v4 < v5;
    if (v4 == v5)
    {
      double v7 = *(double *)(v1 + 40);
      double v8 = *(double *)(a1 + 40);
      BOOL v6 = v7 < v8;
      if (v7 == v8)
      {
        double v9 = *(double *)(v1 + 48);
        double v10 = *(double *)(a1 + 48);
        BOOL v6 = v9 < v10;
        if (v9 == v10)
        {
          int v11 = *(unsigned __int8 *)(v1 + 56);
          int v12 = *(unsigned __int8 *)(a1 + 56);
          if (v11 == v12) {
            return 1;
          }
          else {
            return 2 * ((char)v11 >= (char)v12);
          }
        }
      }
    }
  }
  else
  {
    BOOL v6 = v3 < v2;
  }
  int v14 = !v6;
  return (2 * v14);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance GeneralItem(long long *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  long long v8 = *a1;
  long long v9 = v2;
  v10[0] = a1[2];
  *(_OWORD *)((char *)v10 + 9) = *(long long *)((char *)a1 + 41);
  long long v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a2 + 41);
  int v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4) {
    return 1;
  }
  if (v4 == 1) {
    return (uint64_t)v8 < *(void *)&v6[0];
  }
  return 0;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance GeneralItem(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  long long v8 = *a2;
  long long v9 = v3;
  v10[0] = a2[2];
  *(_OWORD *)((char *)v10 + 9) = *(long long *)((char *)a2 + 41);
  int v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4) {
    return 0;
  }
  if (v4 == 1) {
    return (uint64_t)v8 >= *(void *)&v6[0];
  }
  return 1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance GeneralItem(long long *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  long long v8 = *a1;
  long long v9 = v2;
  v10[0] = a1[2];
  *(_OWORD *)((char *)v10 + 9) = *(long long *)((char *)a1 + 41);
  long long v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a2 + 41);
  int v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4) {
    return 0;
  }
  if (v4 == 1) {
    return (uint64_t)v8 >= *(void *)&v6[0];
  }
  return 1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance GeneralItem(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v6[0] = *a1;
  v6[1] = v2;
  v7[0] = a1[2];
  *(_OWORD *)((char *)v7 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  long long v8 = *a2;
  long long v9 = v3;
  v10[0] = a2[2];
  *(_OWORD *)((char *)v10 + 9) = *(long long *)((char *)a2 + 41);
  int v4 = GeneralItem.order(to:)((uint64_t)v6);
  if (!v4) {
    return 1;
  }
  if (v4 == 1) {
    return (uint64_t)v8 < *(void *)&v6[0];
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance GeneralItem(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  long long v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return specialized static GeneralItem.== infix(_:_:)((uint64_t)v5, (uint64_t)v7);
}

uint64_t GridLayout.Cache.resize(at:proposal:)(unint64_t a1, uint64_t a2, char a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v15 = *(void *)(v3 + 136);
  if (*(void *)(v15 + 16) <= a1)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
    uint64_t v8 = result;
LABEL_8:
    if (*(void *)(v8 + 16) <= v4)
    {
      __break(1u);
    }
    else
    {
      unint64_t v24 = (void *)(v8 + 32 + 104 * v4);
      void v24[2] = v5;
      _OWORD v24[3] = v6;
      v24[4] = v11;
      v24[5] = v12;
      v24[6] = v13;
      v24[7] = v14;
      uint64_t result = swift_release();
      *(void *)(v7 + 136) = v8;
      if (*(void *)(v8 + 16) > v4)
      {
        uint64_t result = GridLayout.Cache.resize(axis:size:in:)(0, *(void *)(v8 + 32 + 104 * v4), *(char **)(v8 + 32 + 104 * v4 + 8), v10);
        uint64_t v25 = *(void *)(v7 + 136);
        if (*(void *)(v25 + 16) > v4)
        {
          GridLayout.Cache.resize(axis:size:in:)(1uLL, *(void *)(v25 + 104 * v4 + 32), *(char **)(v25 + 104 * v4 + 40), v9);
          goto LABEL_12;
        }
LABEL_21:
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v27 = *(void *)(v3 + 136);
  uint64_t v31 = *(void *)(v15 + 104 * a1 + 88);
  swift_retain();
  ViewSize.proposal.getter();
  HIDWORD(v28) = v34;
  uint64_t v30 = v35;
  LOBYTE(v31) = v36;
  ProposedViewSize.init(_:)();
  swift_release();
  char v17 = a3 & 1;
  uint64_t result = static ProposedViewSize.== infix(_:_:)();
  if (result) {
    return result;
  }
  uint64_t v7 = v3;
  LODWORD(v28) = *(_DWORD *)(v3 + 48);
  uint64_t v29 = *(void *)(v3 + 56);
  LOWORD(v30) = *(_WORD *)(v3 + 64);
  unint64_t v4 = a1;
  LayoutSubviews.subscript.getter();
  LOBYTE(v28) = v17;
  uint64_t v19 = LayoutSubview.dimensions(in:)();
  uint64_t v6 = v29;
  uint64_t v5 = v28;
  uint64_t v12 = v31;
  uint64_t v11 = v30;
  uint64_t v14 = v33;
  uint64_t v13 = v32;
  uint64_t v20 = MEMORY[0x18C114450](v19);
  uint64_t v8 = v27;
  if (*(void *)(v27 + 16) <= a1) {
    goto LABEL_17;
  }
  double v10 = v21;
  double v9 = v22;
  if (MEMORY[0x18C114450](v20) != v21 || v23 != v9)
  {
    swift_retain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_12:

  return swift_release();
}

uint64_t GridLayout.Cache.reassignAvailability(in:at:)(uint64_t result, uint64_t a2)
{
  uint64_t v9 = a2;
  double v10 = v2 + 13;
  if (result) {
    double v10 = v2 + 14;
  }
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(*v10 + 16);
  if (v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v11 + 32;
    uint64_t v15 = (int *)(v11 + 92);
    uint64_t v16 = v12;
    do
    {
      int v17 = *v15;
      v15 += 16;
      uint64_t v18 = v17 != 0;
      BOOL v19 = __OFADD__(v13, v18);
      v13 += v18;
      if (v19)
      {
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      --v16;
    }
    while (v16);
    if ((uint64_t)v13 > 0)
    {
      if ((a2 & 0x80000000) != 0) {
        goto LABEL_83;
      }
      uint64_t v6 = (int)a2;
      if (v12 <= (int)a2) {
        goto LABEL_84;
      }
      uint64_t v20 = v14 + ((uint64_t)(int)a2 << 6);
      double v7 = *(double *)(v20 + 48);
      double v8 = *(double *)(v20 + 32);
      unsigned int v56 = result & 1;
      uint64_t v3 = (char *)GridLayout.Cache.subscript.modify();
      uint64_t v5 = (char *)v21;
      uint64_t v4 = *v21;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v5 = v4;
      if ((result & 1) == 0) {
        goto LABEL_85;
      }
      while (*(void *)(v4 + 16) > v6)
      {
        double v7 = v7 - v8;
        *(double *)(v4 + (v6 << 6) + 80) = *(double *)(v4 + (v6 << 6) + 80) - v7;
        ((void (*)(unsigned char *, void))v3)(v57, 0);
        double v22 = v2 + 15;
        uint64_t v4 = v56;
        if ((_BYTE)v56) {
          double v22 = v2 + 16;
        }
        uint64_t result = *v22;
        uint64_t v3 = *(char **)(*v22 + 16);
        if (v3)
        {
          uint64_t v5 = (char *)(result + 32);
          uint64_t v23 = swift_bridgeObjectRetain();
          unint64_t v24 = 0;
          double v8 = 0.0;
          uint64_t v53 = v23;
          uint64_t v54 = v9;
          long long v51 = v5;
          uint64_t v52 = v3;
          while (v24 < *(void *)(v23 + 16))
          {
            uint64_t v25 = &v5[24 * v24];
            LODWORD(v27) = *(_DWORD *)v25;
            int v26 = *((_DWORD *)v25 + 1);
            uint64_t v27 = (int)v27;
            if ((int)v27 <= (int)v9 && v26 > (int)v9)
            {
              uint64_t v29 = v26;
              unint64_t v55 = v24;
              uint64_t v30 = &v5[24 * v24];
              if (v7 > *((double *)v30 + 1)) {
                double v31 = v7;
              }
              else {
                double v31 = *((double *)v30 + 1);
              }
              if (v29 != v27)
              {
                BOOL v32 = 0;
                uint64_t v33 = v2 + 14;
                if (!(_BYTE)v4) {
                  uint64_t v33 = v2 + 13;
                }
                uint64_t v34 = *v33;
                uint64_t v9 = (uint64_t)(int)v27 << 6;
                uint64_t v35 = (_DWORD *)(v34 + v9 + 92);
                uint64_t v36 = (int)v27;
                while (1)
                {
                  if ((v27 & 0x80000000) != 0)
                  {
                    __break(1u);
LABEL_72:
                    __break(1u);
LABEL_73:
                    __break(1u);
LABEL_74:
                    __break(1u);
                    goto LABEL_75;
                  }
                  if (*(void *)(v34 + 16) <= v36) {
                    goto LABEL_72;
                  }
                  BOOL v19 = __OFADD__(v32, *v35);
                  int v37 = v32 + *v35;
                  if (v19) {
                    goto LABEL_73;
                  }
                  if (v29 - 1 == v36) {
                    break;
                  }
                  BOOL v32 = v37 != 0;
                  if (v27 != 0x7FFFFFFF)
                  {
                    v35 += 16;
                    if (++v36 < v29) {
                      continue;
                    }
                  }
                  goto LABEL_74;
                }
                if (v37) {
                  double v38 = 1.0;
                }
                else {
                  double v38 = 0.0;
                }
                int v39 = v29 - v27;
                double v40 = v31 / v38;
                while (v27 < v29)
                {
                  if (v6 != v27)
                  {
                    unsigned int v41 = v2 + 13;
                    if ((_BYTE)v4) {
                      unsigned int v41 = v2 + 14;
                    }
                    if (v27 < 0) {
                      goto LABEL_77;
                    }
                    uint64_t v42 = *v41;
                    if (*(void *)(v42 + 16) <= (unint64_t)v27) {
                      goto LABEL_78;
                    }
                    if (*(_DWORD *)(v42 + v9 + 92))
                    {
                      uint64_t v3 = (char *)v6;
                      uint64_t v4 = (uint64_t)GridLayout.Cache.subscript.modify();
                      uint64_t v6 = (uint64_t)v43;
                      uint64_t v5 = *v43;
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      *(void *)uint64_t v6 = v5;
                      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                      {
                        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
                        *(void *)uint64_t v6 = v5;
                      }
                      if (*((void *)v5 + 2) <= (unint64_t)v27) {
                        goto LABEL_79;
                      }
                      uint64_t v6 = (uint64_t)v3;
                      *(double *)&v5[v9 + 80] = v40 + *(double *)&v5[v9 + 80];
                      ((void (*)(unsigned char *, void))v4)(v57, 0);
                      uint64_t v4 = v56;
                    }
                  }
                  v9 += 64;
                  ++v27;
                  if (!--v39) {
                    goto LABEL_16;
                  }
                }
LABEL_75:
                __break(1u);
                goto LABEL_76;
              }
LABEL_16:
              double v7 = v7 - v31;
              uint64_t v23 = v53;
              uint64_t v9 = v54;
              uint64_t v5 = v51;
              uint64_t v3 = v52;
              unint64_t v24 = v55;
            }
            if ((char *)++v24 == v3)
            {
              uint64_t result = swift_bridgeObjectRelease();
              goto LABEL_55;
            }
          }
        }
        else
        {
LABEL_55:
          if ((_BYTE)v4)
          {
            uint64_t v9 = *(void *)(v2[14] + 16);
            if (!v9) {
              return result;
            }
          }
          else
          {
            uint64_t v9 = *(void *)(v2[13] + 16);
            if (!v9) {
              return result;
            }
          }
          uint64_t v5 = 0;
          uint64_t v6 = 0;
          double v7 = v7 / (double)(uint64_t)v13;
          uint64_t v13 = v57;
          while (1)
          {
            int v45 = v2 + 13;
            if ((_BYTE)v4) {
              int v45 = v2 + 14;
            }
            uint64_t v46 = *v45;
            if ((unint64_t)v6 >= *(void *)(v46 + 16)) {
              break;
            }
            if (*(_DWORD *)&v5[v46 + 92])
            {
              uint64_t v47 = (uint64_t (*)(unsigned char *, void))GridLayout.Cache.subscript.modify();
              uint64_t v49 = v48;
              uint64_t v3 = *v48;
              char v50 = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v49 = v3;
              if ((v50 & 1) == 0)
              {
                uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
                *uint64_t v49 = v3;
              }
              uint64_t v4 = v56;
              if ((unint64_t)v6 >= *((void *)v3 + 2)) {
                goto LABEL_82;
              }
              *(double *)&v5[(void)v3 + 80] = v7 + *(double *)&v5[(void)v3 + 80];
              uint64_t result = v47(v57, 0);
            }
            ++v6;
            v5 += 64;
            if (v9 == v6) {
              return result;
            }
          }
LABEL_80:
          __break(1u);
        }
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v4);
        uint64_t v4 = result;
        *(void *)uint64_t v5 = result;
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t GridLayout.Cache.proposal(for:in:includeAvailable:)(char a1, unint64_t a2, unint64_t a3, char a4)
{
  int v8 = a1 & 1;
  uint64_t v9 = v4[13];
  uint64_t v10 = v4[14];
  uint64_t v11 = v4[15];
  uint64_t v12 = v4[16];
  *(double *)&uint64_t result = COERCE_DOUBLE(ProposedViewSize.subscript.getter());
  if (v14) {
    goto LABEL_77;
  }
  if (*(double *)&result >= INFINITY) {
    return result;
  }
  if (!v8)
  {
    uint64_t v15 = v9;
    if ((int)a3 >= (int)a2) {
      goto LABEL_7;
    }
    __break(1u);
  }
  uint64_t v15 = v10;
  a2 >>= 32;
  a3 >>= 32;
  if ((int)a3 < (int)a2)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
LABEL_7:
  if ((a2 & 0x80000000) != 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  int64_t v16 = (int)a2;
  int64_t v17 = *(void *)(v15 + 16);
  if (v17 <= v16)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  double v18 = *(double *)(v15 + (v16 << 6) + 64);
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v16, 1, a3, v16 | ((unint64_t)a3 << 32)));
  if ((result & 0x100000000) != 0) {
    int v19 = a3;
  }
  else {
    int v19 = result;
  }
  int v20 = a3 - v19;
  if ((int)a3 < v19) {
    goto LABEL_72;
  }
  if (a3 != v19)
  {
    uint64_t v21 = v19;
    if (v17 <= v19) {
      int64_t v22 = v19;
    }
    else {
      int64_t v22 = v17;
    }
    uint64_t v23 = (double *)(v15 + ((uint64_t)v19 << 6) + 64);
    while (v21 < (int)a3)
    {
      if (v19 < 0) {
        goto LABEL_68;
      }
      if (v22 == v21) {
        goto LABEL_69;
      }
      double v24 = *(v23 - 4);
      double v25 = *v23;
      v23 += 8;
      double v18 = v18 + v24 + v25;
      ++v21;
      if (!--v20) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
LABEL_22:
  if (v8) {
    uint64_t v26 = v12;
  }
  else {
    uint64_t v26 = v11;
  }
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27) {
    goto LABEL_48;
  }
  if (v27 == 1)
  {
    uint64_t v28 = 0;
LABEL_41:
    uint64_t v40 = v27 - v28;
    unsigned int v41 = (void *)(v26 + 24 * v28 + 40);
    do
    {
      int v42 = *((_DWORD *)v41 - 2);
      int v43 = *((_DWORD *)v41 - 1);
      double v44 = *(double *)v41;
      v41 += 3;
      double v45 = v44;
      if ((int)a3 < v43 || v42 < (int)v16) {
        double v45 = -0.0;
      }
      double v18 = v18 + v45;
      --v40;
    }
    while (v40);
    goto LABEL_48;
  }
  uint64_t v28 = v27 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v29 = (void *)(v26 + 64);
  uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    int v31 = *((_DWORD *)v29 - 8);
    int v32 = *((_DWORD *)v29 - 7);
    int v33 = *((_DWORD *)v29 - 2);
    int v34 = *((_DWORD *)v29 - 1);
    double v35 = *((double *)v29 - 3);
    double v36 = *(double *)v29;
    v29 += 6;
    double v37 = v36;
    if ((int)a3 < v32 || v31 < (int)v16) {
      double v35 = -0.0;
    }
    if ((int)a3 < v34 || v33 < (int)v16) {
      double v37 = -0.0;
    }
    double v18 = v18 + v35 + v37;
    v30 -= 2;
  }
  while (v30);
  if (v27 != v28) {
    goto LABEL_41;
  }
LABEL_48:
  if (a4)
  {
    uint64_t v47 = v8 ? v10 : v9;
    if (v16 != a3)
    {
      if ((int)a3 < (int)v16)
      {
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      int64_t v48 = *(void *)(v47 + 16);
      unint64_t v49 = (a3 + ~v16);
      if (v48 <= v16) {
        int64_t v48 = v16;
      }
      unint64_t v50 = v48 - v16;
      if (v49 >= v50) {
        unint64_t v51 = v50;
      }
      else {
        unint64_t v51 = (a3 + ~v16);
      }
      if ((int)a3 - v16 <= v51) {
        goto LABEL_75;
      }
      if (v50 <= v49)
      {
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
        return result;
      }
      int64_t v52 = v16 + 1;
      double v53 = *(double *)(v47 + 32 + (v16 << 6) + 48) + 0.0;
      if (a3 != v16 + 1)
      {
        uint64_t v54 = (double *)(v47 + (v16 << 6) + 96);
        int v55 = ~v16 + a3;
        do
        {
          double v53 = v53 + v54[6];
          if (v52 > v16) {
            double v53 = v53 + *v54;
          }
          v54 += 8;
          ++v52;
          --v55;
        }
        while (v55);
      }
    }
  }
  return result;
}

unint64_t GridLayout.Cache.resize(axis:size:in:)(unint64_t result, unint64_t a2, char *a3, double a4)
{
  double v10 = a4;
  uint64_t v11 = a3;
  if ((result & 1) == 0)
  {
    LODWORD(v12) = a2;
    LODWORD(v13) = a3;
    if ((int)a3 >= (int)a2) {
      goto LABEL_5;
    }
    __break(1u);
  }
  unint64_t v12 = HIDWORD(a2);
  unint64_t v13 = (unint64_t)a3 >> 32;
  if (SHIDWORD(a3) < SHIDWORD(a2)) {
    goto LABEL_107;
  }
LABEL_5:
  if (__OFSUB__(v13, v12)) {
    goto LABEL_106;
  }
  uint64_t v4 = (uint64_t (*)(unsigned char *, void))(result & 1);
  if (v13 - v12 != 1)
  {
    uint64_t v7 = *((void *)v5 + 15);
    uint64_t v8 = *((void *)v5 + 16);
    if (result)
    {
      if (SHIDWORD(a3) < SHIDWORD(a2)) {
        goto LABEL_114;
      }
      uint64_t v26 = v5 + 112;
      a2 >>= 32;
      uint64_t v11 = (char *)((unint64_t)a3 >> 32);
    }
    else
    {
      if ((int)a3 < (int)a2) {
        goto LABEL_113;
      }
      uint64_t v26 = v5 + 104;
    }
    if ((a2 & 0x80000000) != 0) {
      goto LABEL_110;
    }
    uint64_t v27 = *(void *)v26;
    uint64_t v6 = (int)a2;
    uint64_t v28 = *(void *)(*(void *)v26 + 16);
    if (v28 <= (int)a2) {
      goto LABEL_111;
    }
    double v9 = *(double *)(v27 + ((uint64_t)(int)a2 << 6) + 64);
    uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)((int)a2, 1, (int)v11, a2 | ((unint64_t)v11 << 32));
    if ((result & 0x100000000) != 0) {
      int v29 = (int)v11;
    }
    else {
      int v29 = result;
    }
    int v30 = v11 - v29;
    if ((int)v11 < v29) {
      goto LABEL_112;
    }
    if (v11 != v29)
    {
      uint64_t v31 = v29;
      if (v28 <= v29) {
        uint64_t v32 = v29;
      }
      else {
        uint64_t v32 = v28;
      }
      int v33 = (double *)(v27 + ((uint64_t)v29 << 6) + 64);
      while (v31 < (int)v11)
      {
        if (v29 < 0) {
          goto LABEL_102;
        }
        if (v32 == v31) {
          goto LABEL_103;
        }
        double v34 = *(v33 - 4);
        double v35 = *v33;
        v33 += 8;
        double v9 = v9 + v34 + v35;
        ++v31;
        if (!--v30) {
          goto LABEL_51;
        }
      }
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
LABEL_51:
    if (v4) {
      uint64_t v36 = v8;
    }
    else {
      uint64_t v36 = v7;
    }
    uint64_t v37 = *(void *)(v36 + 16);
    if (v37)
    {
      if (v37 == 1)
      {
        uint64_t v38 = 0;
LABEL_72:
        uint64_t v48 = v37 - v38;
        unint64_t v49 = (void *)(v36 + 24 * v38 + 40);
        do
        {
          int v50 = *((_DWORD *)v49 - 2);
          int v51 = *((_DWORD *)v49 - 1);
          double v52 = *(double *)v49;
          v49 += 3;
          double v53 = v52;
          if (v50 <= (int)v6) {
            int v50 = v6;
          }
          if (v51 >= (int)v11) {
            int v51 = (int)v11;
          }
          if (v50 >= v51) {
            double v53 = -0.0;
          }
          double v9 = v9 + v53;
          --v48;
        }
        while (v48);
        goto LABEL_80;
      }
      uint64_t v38 = v37 & 0x7FFFFFFFFFFFFFFELL;
      int v39 = (void *)(v36 + 64);
      uint64_t v40 = v37 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        int v41 = *((_DWORD *)v39 - 8);
        int v42 = *((_DWORD *)v39 - 7);
        int v43 = *((_DWORD *)v39 - 2);
        int v44 = *((_DWORD *)v39 - 1);
        double v45 = *((double *)v39 - 3);
        double v46 = *(double *)v39;
        v39 += 6;
        double v47 = v46;
        if (v41 <= (int)v6) {
          int v41 = v6;
        }
        if (v43 <= (int)v6) {
          int v43 = v6;
        }
        if (v42 >= (int)v11) {
          int v42 = (int)v11;
        }
        if (v44 >= (int)v11) {
          int v44 = (int)v11;
        }
        if (v41 >= v42) {
          double v45 = -0.0;
        }
        if (v43 >= v44) {
          double v47 = -0.0;
        }
        double v9 = v9 + v45 + v47;
        v40 -= 2;
      }
      while (v40);
      if (v37 != v38) {
        goto LABEL_72;
      }
    }
LABEL_80:
    double v10 = v10 - v9;
    if (v10 <= 0.0) {
      return result;
    }
    uint64_t v4 = (uint64_t (*)(unsigned char *, void))GridLayout.Cache.subscript.modify();
    uint64_t v11 = v54;
    uint64_t v5 = *(char **)v54;
    int v55 = *(void **)(*(void *)v54 + 16);
    if (!v55)
    {
LABEL_88:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)uint64_t v11 = v5;
      if (isUniquelyReferenced_nonNull_native)
      {
LABEL_89:
        unint64_t v60 = *((void *)v5 + 2);
        unint64_t v59 = *((void *)v5 + 3);
        if (v60 >= v59 >> 1)
        {
          uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v59 > 1), v60 + 1, 1, v5);
          *(void *)uint64_t v11 = v5;
        }
        *((void *)v5 + 2) = v60 + 1;
        double v61 = &v5[24 * v60];
        *((_DWORD *)v61 + 8) = v12;
        *((_DWORD *)v61 + 9) = v13;
        *((double *)v61 + 5) = v10;
        *((void *)v61 + 6) = 0;
        return v4(v64, 0);
      }
LABEL_117:
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v5 + 2) + 1, 1, v5);
      *(void *)uint64_t v11 = v5;
      goto LABEL_89;
    }
    uint64_t v56 = 0;
    uint64_t v7 = 0;
    while (*(_DWORD *)&v5[v56 + 32] != v12 || *(_DWORD *)&v5[v56 + 36] != v13)
    {
      ++v7;
      v56 += 24;
      if (v55 == (void *)v7) {
        goto LABEL_88;
      }
    }
    char v62 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v11 = v5;
    if ((v62 & 1) == 0)
    {
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
      *(void *)uint64_t v11 = v5;
    }
    if ((unint64_t)v7 >= *((void *)v5 + 2))
    {
      __break(1u);
LABEL_119:
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
      *(void *)uint64_t v5 = v11;
LABEL_97:
      if ((unint64_t)v7 >= *((void *)v11 + 2))
      {
        __break(1u);
LABEL_121:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      *(double *)&v11[24 * v7 + 40] = *(double *)&v11[24 * v7 + 40] - v10;
      *(double *)(*(void *)v5 + 24 * v7 + 48) = v10 + *(double *)(*(void *)v5 + 24 * v7 + 48);
    }
    else
    {
      *(double *)&v5[v56 + 40] = v10 + *(double *)&v5[v56 + 40];
    }
    return v4(v64, 0);
  }
  char v14 = (uint64_t *)(v5 + 104);
  if (result) {
    char v14 = (uint64_t *)(v5 + 112);
  }
  if ((v12 & 0x80000000) != 0) {
    goto LABEL_108;
  }
  uint64_t v15 = *v14;
  uint64_t v8 = (int)v12;
  if (*(void *)(v15 + 16) <= (int)v12) {
    goto LABEL_109;
  }
  double v9 = *(double *)(v15 + ((uint64_t)(int)v12 << 6) + 64);
  if (v9 < a4)
  {
    uint64_t v11 = (char *)GridLayout.Cache.subscript.modify();
    uint64_t v7 = (uint64_t)v16;
    uint64_t v6 = *v16;
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v7 = v6;
    if ((v17 & 1) == 0) {
      goto LABEL_115;
    }
    while (*(void *)(v6 + 16) > v8)
    {
      *(double *)(v6 + (v8 << 6) + 64) = v10;
      ((void (*)(unsigned char *, void))v11)(v64, 0);
      uint64_t v6 = (uint64_t)v64;
      uint64_t v4 = (uint64_t (*)(unsigned char *, void))GridLayout.Cache.subscript.modify();
      uint64_t v11 = *v18;
      uint64_t v8 = *((void *)*v18 + 2);
      if (!v8) {
        return v4(v64, 0);
      }
      uint64_t v5 = (char *)v18;
      uint64_t v7 = 0;
      double v10 = v10 - v9;
      while ((unint64_t)v7 < *((void *)v11 + 2))
      {
        int v19 = (int *)&v11[24 * v7 + 32];
        int v21 = *v19;
        int v20 = v19[1];
        if ((int)v12 > v21) {
          int v21 = v12;
        }
        if ((int)v13 < v20) {
          int v20 = v13;
        }
        if (v21 >= v20)
        {
          if (++v7 >= v8) {
            return v4(v64, 0);
          }
        }
        else
        {
          double v9 = *(double *)&v11[24 * v7 + 40];
          if (v10 < v9)
          {
            char v63 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v5 = v11;
            if ((v63 & 1) == 0) {
              goto LABEL_119;
            }
            goto LABEL_97;
          }
          char v22 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v5 = v11;
          if ((v22 & 1) == 0)
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            *(void *)uint64_t v5 = v11;
          }
          unint64_t v23 = *((void *)v11 + 2);
          if (v7 >= v23) {
            goto LABEL_105;
          }
          unint64_t v24 = v23 - 1;
          uint64_t v25 = v23 - 1 - v7;
          if (v25 < 0) {
            goto LABEL_121;
          }
          double v10 = v10 - v9;
          memmove(&v11[24 * v7 + 32], &v11[24 * v7 + 56], 24 * v25);
          *((void *)v11 + 2) = v24;
          *(void *)uint64_t v5 = v11;
          if (v10 <= 0.0) {
            return v4(v64, 0);
          }
          if (v7 >= --v8) {
            return v4(v64, 0);
          }
        }
      }
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      uint64_t v6 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
      *(void *)uint64_t v7 = v6;
    }
    __break(1u);
    goto LABEL_117;
  }
  return result;
}

uint64_t finalize #1 (_:rowsOrColumns:) in GridLayout.Cache.finalizeSizes()(uint64_t *a1, uint64_t *a2)
{
  long long v2 = a1;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (!v4)
  {
LABEL_49:
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *v2;
    if (isUniquelyReferenced_nonNull_native) {
      return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v28 + 16));
    }
    if (*(void *)(v28 + 24) >= 2uLL)
    {
      type metadata accessor for VerticalAlignment?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Earmark>, (uint64_t)&type metadata for GridLayout.Cache.Earmark, MEMORY[0x1E4FBBE00]);
      int v29 = (void *)swift_allocObject();
      size_t v30 = _swift_stdlib_malloc_size_2(v29);
      v29[2] = 0;
      v29[3] = 2 * ((uint64_t)(v30 - 32) / 24);
    }
    else
    {
      int v29 = (void *)MEMORY[0x1E4FBC860];
    }
    *long long v2 = (uint64_t)v29;
    return swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  while (1)
  {
    if (v7 >= *(void *)(v3 + 16)) {
      goto LABEL_65;
    }
    uint64_t v8 = (double *)(v3 + 32 + 24 * v7);
    unint64_t v9 = *(int *)v8;
    uint64_t v10 = *((int *)v8 + 1);
    double v11 = v8[1];
    if (v10 != v9)
    {
      if ((int)v10 < (int)v9) {
        goto LABEL_67;
      }
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(*a2 + 16);
      if (v13 <= (uint64_t)v9) {
        uint64_t v13 = v9;
      }
      char v14 = (double *)(*a2 + (v9 << 6) + 64);
      int v15 = v10 - v9;
      uint64_t v16 = v9;
      while (v16 < v10)
      {
        if ((v9 & 0x80000000) != 0) {
          goto LABEL_60;
        }
        if (v13 == v16) {
          goto LABEL_61;
        }
        uint64_t v17 = *v14 == 0.0;
        BOOL v18 = __OFADD__(v12, v17);
        v12 += v17;
        if (v18) {
          goto LABEL_62;
        }
        v14 += 8;
        ++v16;
        if (!--v15)
        {
          if (!v12) {
            goto LABEL_17;
          }
          char v19 = 0;
          goto LABEL_33;
        }
      }
      goto LABEL_59;
    }
LABEL_17:
    if (((v10 ^ v9) & 0x80000000) == 0) {
      break;
    }
    if ((v9 & 0x80000000) == 0) {
      int v20 = v9;
    }
    else {
      int v20 = -(int)v9;
    }
    if ((int)v10 >= 0) {
      int v21 = v10;
    }
    else {
      int v21 = -(int)v10;
    }
    BOOL v22 = __CFADD__(v20, v21);
    uint64_t v12 = (v20 + v21);
    if (v22) {
      goto LABEL_69;
    }
    if ((v9 & 0x80000000) != 0)
    {
      if (v10 != v9) {
        goto LABEL_32;
      }
    }
    else if (v9 != v10)
    {
      uint64_t v12 = -v12;
      goto LABEL_32;
    }
LABEL_3:
    if (++v7 == v4)
    {
LABEL_48:
      swift_bridgeObjectRelease();
      long long v2 = a1;
      goto LABEL_49;
    }
  }
  LODWORD(v12) = v10 - v9;
  if (__OFSUB__(v10, v9)) {
    goto LABEL_68;
  }
  if (v10 == v9) {
    goto LABEL_3;
  }
  uint64_t v12 = (int)v12;
LABEL_32:
  char v19 = 1;
LABEL_33:
  if ((int)v10 >= (int)v9)
  {
    double v23 = v11 / (double)v12;
    uint64_t v24 = (v9 << 6) + 64;
    int v25 = v10 - v9;
    while ((uint64_t)v9 < v10)
    {
      uint64_t v26 = *a2;
      if (v19) {
        goto LABEL_42;
      }
      if ((v9 & 0x8000000000000000) != 0) {
        goto LABEL_63;
      }
      if (*(void *)(v26 + 16) <= v9) {
        goto LABEL_64;
      }
      if (*(double *)(v26 + v24) == 0.0)
      {
LABEL_42:
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if ((v9 & 0x8000000000000000) != 0) {
            goto LABEL_47;
          }
        }
        else
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
          uint64_t v26 = result;
          if ((v9 & 0x8000000000000000) != 0)
          {
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
        }
        if (*(void *)(v26 + 16) <= v9) {
          goto LABEL_58;
        }
        *(double *)(v26 + v24) = v23 + *(double *)(v26 + v24);
        *a2 = v26;
      }
      v24 += 64;
      ++v9;
      if (!--v25) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait;
  if (!lazy protocol witness table cache variable for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridCellRangeModifier.CellRangeTrait and conformance _GridCellRangeModifier.CellRangeTrait);
  }
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = (double *)(*a4 + (a3 << 6));
LABEL_5:
    uint64_t v6 = result;
    unint64_t v7 = v5;
    while (1)
    {
      double v8 = *v7;
      double v9 = v7[1];
      double v10 = v7[4];
      double v11 = v7[5];
      double v12 = v7[6];
      int v13 = *((char *)v7 + 56);
      double v14 = *(v7 - 7);
      if (v9 == v14)
      {
        double v15 = *(v7 - 4);
        BOOL v16 = v10 < v15;
        if (v10 == v15
          && (v17 = *(v7 - 3), BOOL v16 = v11 < v17, v11 == v17)
          && (v18 = *(v7 - 2), BOOL v16 = v12 < v18, v12 == v18))
        {
          int v19 = *((char *)v7 - 8);
          if (v13 == v19)
          {
            if (*(uint64_t *)&v8 >= *((void *)v7 - 8)) {
              goto LABEL_4;
            }
          }
          else if (v13 >= v19)
          {
LABEL_4:
            ++a3;
            v5 += 8;
            if (a3 == a2) {
              return result;
            }
            goto LABEL_5;
          }
        }
        else if (!v16)
        {
          goto LABEL_4;
        }
      }
      else if (v14 >= v9)
      {
        goto LABEL_4;
      }
      if (!v4) {
        break;
      }
      long long v20 = *((_OWORD *)v7 + 1);
      long long v21 = *((_OWORD *)v7 - 3);
      *(_OWORD *)unint64_t v7 = *((_OWORD *)v7 - 4);
      *((_OWORD *)v7 + 1) = v21;
      long long v22 = *((_OWORD *)v7 - 1);
      *((_OWORD *)v7 + 2) = *((_OWORD *)v7 - 2);
      *((_OWORD *)v7 + 3) = v22;
      *(v7 - 7) = v9;
      *((_OWORD *)v7 - 3) = v20;
      *(v7 - 4) = v10;
      *(v7 - 3) = v11;
      *(v7 - 2) = v12;
      *((unsigned char *)v7 - 8) = v13;
      ++v6;
      *(v7 - 8) = v8;
      v7 -= 8;
      if (a3 == v6) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  long long v15;
  uint64_t v17;

  double v17 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 16 * a3 - 16;
LABEL_5:
    unint64_t v7 = *(void **)(v5 + 16 * v4);
    double v8 = v17;
    double v9 = v6;
    while (1)
    {
      double v10 = *(void **)v9;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      objc_msgSend(v7, sel_frame);
      double v12 = v11;
      objc_msgSend(v10, sel_frame);
      double v14 = v13;
      swift_unknownObjectRelease();
      unint64_t result = swift_unknownObjectRelease();
      if (v12 >= v14)
      {
LABEL_4:
        ++v4;
        v6 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      double v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)v9;
      *(_OWORD *)double v9 = v15;
      v9 -= 16;
      unint64_t v7 = (void *)v15;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait;
  if (!lazy protocol witness table cache variable for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridCellSizeModifier.MergedCellTrait and conformance _GridCellSizeModifier.MergedCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait;
  if (!lazy protocol witness table cache variable for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridAnchorModifier.AnchoredCellTrait and conformance _GridAnchorModifier.AnchoredCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait;
  if (!lazy protocol witness table cache variable for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridAlignmentModifier.AlignedCellTrait and conformance _GridAlignmentModifier.AlignedCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait;
  if (!lazy protocol witness table cache variable for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GridUnsizedAxesModifier.UnsizedAxesCellTrait and conformance _GridUnsizedAxesModifier.UnsizedAxesCellTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GridLayout and conformance GridLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type GridLayout and conformance GridLayout;
  if (!lazy protocol witness table cache variable for type GridLayout and conformance GridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridLayout and conformance GridLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GridLayout and conformance GridLayout;
  if (!lazy protocol witness table cache variable for type GridLayout and conformance GridLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridLayout and conformance GridLayout);
  }
  return result;
}

uint64_t outlined retain of GridLayout.Cache(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in GridLayout.Cache.alignment(of:)@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in GridLayout.Cache.alignment(of:)(a1, *(void *)(v2 + 16), v2 + 24, a2);
}

void type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>()
{
  if (!lazy cache variable for type metadata for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>)
  {
    type metadata accessor for VerticalAlignment?(255, &lazy cache variable for type metadata for [GridLayout.Cache.Cell], (uint64_t)&type metadata for GridLayout.Cache.Cell, MEMORY[0x1E4FBB320]);
    type metadata accessor for VerticalAlignment?(255, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type [GridLayout.Cache.Cell] and conformance [A]();
    unint64_t v0 = type metadata accessor for LazyMapSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [GridLayout.Cache.Cell] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [GridLayout.Cache.Cell] and conformance [A];
  if (!lazy protocol witness table cache variable for type [GridLayout.Cache.Cell] and conformance [A])
  {
    type metadata accessor for VerticalAlignment?(255, &lazy cache variable for type metadata for [GridLayout.Cache.Cell], (uint64_t)&type metadata for GridLayout.Cache.Cell, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [GridLayout.Cache.Cell] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>;
  if (!lazy protocol witness table cache variable for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>)
  {
    type metadata accessor for LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyMapSequence<[GridLayout.Cache.Cell], CGFloat?> and conformance LazyMapSequence<A, B>);
  }
  return result;
}

uint64_t outlined release of GridLayout.Cache(uint64_t a1)
{
  return a1;
}

_UNKNOWN **base witness table accessor for View in Grid<A>()
{
  return &protocol witness table for Grid<A>;
}

_UNKNOWN **base witness table accessor for View in GridRow<A>()
{
  return &protocol witness table for GridRow<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridCellRangeModifier()
{
  return &protocol witness table for _GridCellRangeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridCellSizeModifier()
{
  return &protocol witness table for _GridCellSizeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridAnchorModifier()
{
  return &protocol witness table for _GridAnchorModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridAlignmentModifier()
{
  return &protocol witness table for _GridAlignmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _GridUnsizedAxesModifier()
{
  return &protocol witness table for _GridUnsizedAxesModifier;
}

unint64_t instantiation function for generic protocol witness table for GridLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GridLayout and conformance GridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for _GridLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _GridLayout and conformance _GridLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for Grid()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for Grid(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 41) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v9;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 41) & ~v5, ((unint64_t)a2 + v5 + 41) & ~v5);
  }
  return v3;
}

uint64_t destroy for Grid(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

_OWORD *initializeWithCopy for Grid(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithCopy for Grid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 41 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 41 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_OWORD *initializeWithTake for Grid(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for Grid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 41 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 41 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for Grid(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 41) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 41) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for Grid(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 41) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187FF2E3CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 41] & ~v8;
        double v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

void *initializeBufferWithCopyOfBuffer for GridRow(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 9) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    (*(void (**)(uint64_t, unint64_t))(v4 + 16))((a1 + v5 + 9) & ~v5, ((unint64_t)a2 + v5 + 9) & ~v5);
  }
  return v3;
}

uint64_t assignWithTake for GridRow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for GridRow(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 9) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 9) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for GridRow(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 9) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187FF3380);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 9] & ~v8;
        double v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

ValueMetadata *type metadata accessor for _GridCellRangeModifier()
{
  return &type metadata for _GridCellRangeModifier;
}

uint64_t getEnumTagSinglePayload for _GridCellSizeModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for _GridCellSizeModifier()
{
  return &type metadata for _GridCellSizeModifier;
}

ValueMetadata *type metadata accessor for _GridAnchorModifier()
{
  return &type metadata for _GridAnchorModifier;
}

ValueMetadata *type metadata accessor for _GridAlignmentModifier()
{
  return &type metadata for _GridAlignmentModifier;
}

ValueMetadata *type metadata accessor for _GridUnsizedAxesModifier()
{
  return &type metadata for _GridUnsizedAxesModifier;
}

uint64_t getEnumTagSinglePayload for GridLayout(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for GridLayout(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GridLayout()
{
  return &type metadata for GridLayout;
}

ValueMetadata *type metadata accessor for _GridLayout()
{
  return &type metadata for _GridLayout;
}

uint64_t destroy for GridLayout.Cache()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for GridLayout.Cache(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v6;
  uint64_t v7 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for GridLayout.Cache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  LOBYTE(v5) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  uint64_t v6 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for GridLayout.Cache(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GridLayout.Cache(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GridLayout.Cache(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 104) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GridLayout.Cache()
{
  return &type metadata for GridLayout.Cache;
}

uint64_t sub_187FF38BC()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187FF38D0()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187FF38E4()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187FF38F8()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187FF390C()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

ValueMetadata *type metadata accessor for GridIndex()
{
  return &type metadata for GridIndex;
}

ValueMetadata *type metadata accessor for GridLayout.Cache.Earmark()
{
  return &type metadata for GridLayout.Cache.Earmark;
}

ValueMetadata *type metadata accessor for GridLayout.Cache.RowOrColumn()
{
  return &type metadata for GridLayout.Cache.RowOrColumn;
}

uint64_t initializeWithCopy for GridLayout.Cache.Cell(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GridLayout.Cache.Cell(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for GridLayout.Cache.Cell(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  return a1;
}

ValueMetadata *type metadata accessor for GridLayout.Cache.Cell()
{
  return &type metadata for GridLayout.Cache.Cell;
}

void *type metadata accessor for _GridUnsizedAxesModifier.UnsizedAxesCellTrait()
{
  return &unk_1ED445038;
}

void *type metadata accessor for _GridAlignmentModifier.AlignedCellTrait()
{
  return &unk_1ED43C840;
}

void *type metadata accessor for _GridAnchorModifier.AnchoredCellTrait()
{
  return &unk_1ED42F358;
}

void *type metadata accessor for _GridCellSizeModifier.MergedCellTrait()
{
  return &unk_1ED437B80;
}

uint64_t getEnumTagSinglePayload for GridMetadata(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7A && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 122);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x79) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GridMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 122;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for GridMetadata(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 5;
}

uint64_t destructiveProjectEnumData for GridMetadata(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for GridMetadata(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (32 * a2);
  return result;
}

void *type metadata accessor for _GridCellRangeModifier.CellRangeTrait()
{
  return &unk_1ED43C8E8;
}

BOOL specialized static GeneralItem.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32)
    && (*(double *)(a1 + 40) == *(double *)(a2 + 40) ? (BOOL v2 = *(double *)(a1 + 48) == *(double *)(a2 + 48)) : (BOOL v2 = 0), v2))
  {
    return *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
  }
  else
  {
    return 0;
  }
}

void specialized _VariadicView_ViewRoot<>.body(children:)(uint64_t a1)
{
}

void specialized _VariadicView_ViewRoot<>.body(children:)(uint64_t a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = a2;
  v5._object = a3;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for _NativeDictionary<GridIndex, Int>()
{
  if (!lazy cache variable for type metadata for _NativeDictionary<GridIndex, Int>)
  {
    lazy protocol witness table accessor for type GridIndex and conformance GridIndex();
    unint64_t v0 = type metadata accessor for _NativeDictionary();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _NativeDictionary<GridIndex, Int>);
    }
  }
}

void *type metadata accessor for RowTransformTrait()
{
  return &unk_1ED4249F0;
}

ValueMetadata *type metadata accessor for GeneralItem()
{
  return &type metadata for GeneralItem;
}

void *type metadata accessor for GridRange()
{
  return &unk_1ED4689D8;
}

unint64_t lazy protocol witness table accessor for type GridRange and conformance GridRange()
{
  unint64_t result = lazy protocol witness table cache variable for type GridRange and conformance GridRange;
  if (!lazy protocol witness table cache variable for type GridRange and conformance GridRange)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridRange and conformance GridRange);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeneralItem and conformance GeneralItem()
{
  unint64_t result = lazy protocol witness table cache variable for type GeneralItem and conformance GeneralItem;
  if (!lazy protocol witness table cache variable for type GeneralItem and conformance GeneralItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeneralItem and conformance GeneralItem);
  }
  return result;
}

void *type metadata accessor for GeneralItem.FlexibilityEstimate()
{
  return &unk_1ED40EA48;
}

BOOL SearchFieldState.isSearching.getter()
{
  return *v0 != 2;
}

Swift::Void __swiftcall SearchFieldState.endEditing()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2);
  long long v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *v1;
  int v6 = v1[2];
  _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v1, (uint64_t)v4, type metadata accessor for SearchFieldState);
  if (v6 == 2)
  {
    int v7 = v4[3];
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v4, type metadata accessor for SearchFieldState);
    if (v7 == 2 || (v7 & 1) == 0) {
      goto LABEL_14;
    }
  }
  else
  {
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v4, type metadata accessor for SearchFieldState);
    if ((v6 & 1) == 0) {
      goto LABEL_14;
    }
  }
  if (v1[1] == 1)
  {
    int v8 = *v1;
    if (v8 != 2 && v5 != 2 && (v8 & 1) != 0)
    {
      if (AttributedString.isEmpty.getter()) {
        char v9 = 2;
      }
      else {
        char v9 = 0;
      }
      *uint64_t v1 = v9;
    }
  }
LABEL_14:
  v1[*(int *)(v2 + 40)] = 0;
}

uint64_t SearchFieldState.hasCustomAccessory.setter(unsigned __int8 a1)
{
  uint64_t v3 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v3 - 8);
  int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int v8 = (char *)&v14 - v7;
  v1[3] = a1;
  int v9 = v1[2];
  _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v1, (uint64_t)&v14 - v7, type metadata accessor for SearchFieldState);
  if (v9 == 2)
  {
    int v9 = v8[3];
    uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v8, type metadata accessor for SearchFieldState);
    if (v9 == 2) {
      return result;
    }
  }
  else
  {
    uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v8, type metadata accessor for SearchFieldState);
  }
  int v11 = *v1;
  if ((v9 & 1) == 0)
  {
    if (v11 == 2) {
      return result;
    }
    char v12 = 0;
LABEL_15:
    *uint64_t v1 = v12;
    return result;
  }
  if (v11 == 2) {
    return result;
  }
  int v13 = v1[2];
  _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v1, (uint64_t)v5, type metadata accessor for SearchFieldState);
  if (v13 != 2)
  {
    uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v5, type metadata accessor for SearchFieldState);
    goto LABEL_13;
  }
  int v13 = v5[3];
  uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v5, type metadata accessor for SearchFieldState);
  if (v13 != 2)
  {
LABEL_13:
    if ((v13 & 1) == 0) {
      return result;
    }
    char v12 = 1;
    goto LABEL_15;
  }
  return result;
}

uint64_t SearchField<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v25[0] = a1;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (uint64_t *)((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for SearchFieldState(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v10 = 2;
  int v11 = self;
  id v12 = objc_msgSend(v11, sel_currentTraitCollection);
  id v13 = objc_msgSend(v12, sel_horizontalSizeClass);

  id v14 = objc_msgSend(v11, sel_currentTraitCollection);
  id v15 = objc_msgSend(v14, sel_userInterfaceIdiom);

  char v16 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v13, (uint64_t)v15, 2u);
  v10[1] = (v16 == 2) | v16 & 1;
  *((_WORD *)v10 + 1) = 2;
  *((_DWORD *)v10 + 1) = 0;
  v10[8] = 1;
  AttributedString.init()();
  v10[*(int *)(v8 + 48)] = 0;
  unint64_t v17 = &v10[*(int *)(v8 + 52)];
  *(_DWORD *)unint64_t v17 = 0;
  uint64_t v17[4] = 0;
  _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v10, a2, type metadata accessor for SearchFieldState);
  type metadata accessor for State<SearchFieldState>(0);
  *(void *)(a2 + *(int *)(v18 + 28)) = 0;
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v10, type metadata accessor for SearchFieldState);
  type metadata accessor for SearchField<SearchFieldConfiguration.Control>();
  uint64_t v20 = a2 + *(int *)(v19 + 36);
  *(void *)uint64_t v20 = 0;
  *(void *)(v20 + 8) = 0;
  *(_WORD *)(v20 + 16) = 0;
  *(unsigned char *)(a2 + *(int *)(v19 + 44)) = 0;
  _s7SwiftUI16SearchFieldStateVWOhTm_4(a2, (uint64_t (*)(void))type metadata accessor for StateOrBinding<SearchFieldState>);
  uint64_t v21 = v25[0];
  _s7SwiftUI16SearchFieldStateVWOcTm_0(v25[0], a2, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI16SearchFieldStateVWOcTm_0(v21, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  v25[1] = swift_getKeyPath();
  LOBYTE(v8) = *((unsigned char *)v6 + *(int *)(v4 + 40)) != 2;
  type metadata accessor for WritableKeyPath<SearchFieldState, Bool>(0);
  lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, Bool> and conformance WritableKeyPath<A, B>, type metadata accessor for WritableKeyPath<SearchFieldState, Bool>);
  uint64_t v22 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v23 = *v6;
  swift_retain();
  swift_release();
  _s7SwiftUI16SearchFieldStateVWOhTm_4(v21, type metadata accessor for SearchFieldConfiguration);
  _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  uint64_t result = outlined consume of StateOrBinding<Bool>(*(void *)v20, *(void *)(v20 + 8), *(unsigned __int8 *)(v20 + 16), *(unsigned char *)(v20 + 17));
  *(void *)uint64_t v20 = v23;
  *(void *)(v20 + 8) = v22;
  *(unsigned char *)(v20 + 16) = v8;
  *(unsigned char *)(v20 + 17) = 1;
  return result;
}

uint64_t SearchFieldState.init()@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 2;
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_currentTraitCollection);
  id v4 = objc_msgSend(v3, sel_horizontalSizeClass);

  id v5 = objc_msgSend(v2, sel_currentTraitCollection);
  id v6 = objc_msgSend(v5, sel_userInterfaceIdiom);

  char v7 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v4, (uint64_t)v6, 2u);
  *(unsigned char *)(a1 + 1) = (v7 == 2) | v7 & 1;
  *(_WORD *)(a1 + 2) = 2;
  *(_DWORD *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v8 = type metadata accessor for SearchFieldState(0);
  uint64_t result = AttributedString.init()();
  *(unsigned char *)(a1 + *(int *)(v8 + 40)) = 0;
  uint64_t v10 = a1 + *(int *)(v8 + 44);
  *(_DWORD *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 4) = 0;
  return result;
}

void type metadata accessor for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>)
  {
    type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>(255);
    lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions();
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?> and conformance _UnaryViewAdaptor<A>, type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>);
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>);
    }
  }
}

void type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>(uint64_t a1)
{
}

void type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>(uint64_t a1)
{
}

void type metadata accessor for _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>)
  {
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>, (uint64_t)&type metadata for SearchSuggestionsPlacement, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>);
    }
  }
}

void type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>)
  {
    type metadata accessor for SearchEnvironmentTransformModifier<SearchTextTransform>(255);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>);
    }
  }
}

void type metadata accessor for SearchEnvironmentTransformModifier<SearchTextTransform>(uint64_t a1)
{
}

uint64_t type metadata accessor for SearchTextTransform(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchTextTransform);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>();
    lazy protocol witness table accessor for type ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?> and conformance TextInputSuggestions<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?> and conformance TextInputSuggestions<A>()
{
  return lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?> and conformance TextInputSuggestions<A>, type metadata accessor for TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>);
}

uint64_t sub_187FF4D9C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for SearchField();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  type metadata accessor for StateOrBinding<SearchFieldState>(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_release();
    swift_release();
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v5 = *(int *)(v4 + 32);
    uint64_t v6 = v3 + v5 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v7 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  }
  else
  {
    uint64_t v8 = v3 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v9 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    type metadata accessor for State<SearchFieldState>(0);
    swift_release();
  }
  outlined consume of StateOrBinding<Bool>(*(void *)(v3 + *(int *)(v2 + 36)), *(void *)(v3 + *(int *)(v2 + 36) + 8), *(unsigned __int8 *)(v3 + *(int *)(v2 + 36) + 16), *(unsigned char *)(v3 + *(int *)(v2 + 36) + 17));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v2 + 40), v1);

  return swift_deallocObject();
}

uint64_t SearchField.multiSuggestions(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = a1;
  uint64_t v57 = a3;
  type metadata accessor for SearchEnvironmentTransformModifier<SearchTextTransform>(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v52 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v10);
  id v13 = (uint64_t *)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v54 = v14;
  MEMORY[0x1F4188790](v14);
  char v16 = (uint64_t *)((char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for SearchTextTransform(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>();
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>();
  uint64_t v50 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v53 = (uint64_t)&v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>(0);
  uint64_t v26 = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v51 = (uint64_t)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(int *)(a2 + 44);
  uint64_t v55 = v3;
  if (*(unsigned char *)(v3 + v29) == 1 && (v49 = v27, v30 = SearchField.renderSuggestions(_:)(v56), uint64_t v27 = v49, (v30 & 1) != 0))
  {
    _s7SwiftUI16SearchFieldStateVWOcTm_0(v56, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v31 = (char *)v13 + *(int *)(v11 + 32);
    _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v16 + *(int *)(v54 + 32), (uint64_t)v9, type metadata accessor for SearchFieldState);
    uint64_t v32 = &v9[*(int *)(v7 + 36)];
    uint64_t v33 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
    type metadata accessor for WritableKeyPath<SearchFieldState, AttributedString>();
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, AttributedString> and conformance WritableKeyPath<A, B>, (void (*)(uint64_t))type metadata accessor for WritableKeyPath<SearchFieldState, AttributedString>);
    uint64_t v34 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    void *v13 = *v16;
    v13[1] = v34;
    swift_retain();
    swift_release();
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1((uint64_t)v13, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
    uint64_t v35 = v52;
    _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v19, v52, type metadata accessor for SearchTextTransform);
    _s7SwiftUI16SearchFieldStateVWOcTm_0(v35, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransformModifier<SearchTextTransform>);
    _s7SwiftUI16SearchFieldStateVWOhTm_4(v35, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransformModifier<SearchTextTransform>);
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v19, type metadata accessor for SearchTextTransform);
    uint64_t v36 = swift_getKeyPath();
    uint64_t v37 = v54;
    MEMORY[0x18C113DA0](v54);
    LOBYTE(v35) = v9[1];
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v9, type metadata accessor for SearchFieldState);
    uint64_t v38 = v53;
    _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v22, v53, (uint64_t (*)(void))type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>);
    uint64_t v39 = v38 + *(int *)(v50 + 36);
    *(void *)uint64_t v39 = v36;
    *(unsigned char *)(v39 + 8) = v35;
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>);
    SearchField.$state.getter((uint64_t)v16);
    uint64_t KeyPath = swift_getKeyPath();
    char v40 = *((unsigned char *)v16 + *(int *)(v37 + 32) + 2);
    type metadata accessor for WritableKeyPath<SearchFieldState, Bool?>();
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type WritableKeyPath<SearchFieldState, Bool?> and conformance WritableKeyPath<A, B>, (void (*)(uint64_t))type metadata accessor for WritableKeyPath<SearchFieldState, Bool?>);
    uint64_t v41 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    uint64_t v42 = *v16;
    swift_retain();
    swift_release();
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    uint64_t v43 = v51;
    _s7SwiftUI16SearchFieldStateVWOcTm_0(v38, v51, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>);
    uint64_t v44 = v43 + *(int *)(v26 + 36);
    *(void *)uint64_t v44 = v42;
    *(void *)(v44 + 8) = v41;
    *(unsigned char *)(v44 + 16) = v40;
    _s7SwiftUI16SearchFieldStateVWOhTm_4(v38, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>);
    uint64_t v45 = v57;
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_1(v43, v57, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v26);
  }
  else
  {
    double v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56);
    uint64_t v48 = v57;
    return v47(v48, 1, 1, v26);
  }
}

uint64_t SearchField.renderSuggestions(_:)(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v1 = type metadata accessor for AttributedString.Index();
  uint64_t v26 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t v7 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v25 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (unsigned __int8 *)&v24 - v17;
  SearchField.state.getter();
  int v19 = *v18;
  _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v18, type metadata accessor for SearchFieldState);
  _s7SwiftUI16SearchFieldStateVWOcTm_0(v27, (uint64_t)v12, type metadata accessor for SearchFieldConfiguration);
  if (v19 == 2)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    MEMORY[0x18C113DA0]();
    AttributedString.characters.getter();
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v15, type metadata accessor for SearchFieldState);
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type AttributedString.CharacterView and conformance AttributedString.CharacterView, MEMORY[0x1E4F27270]);
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of Collection.endIndex.getter();
    lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type AttributedString.Index and conformance AttributedString.Index, MEMORY[0x1E4F27388]);
    char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v26 + 8);
    v21(v3, v1);
    v21(v6, v1);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v12, type metadata accessor for SearchFieldConfiguration);
    char v22 = v20 ^ 1;
  }
  else
  {
    _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v12, type metadata accessor for SearchFieldConfiguration);
    char v22 = 1;
  }
  return v22 & 1;
}

uint64_t SearchFieldState.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t key path getter for SearchFieldState.text : SearchFieldState@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SearchFieldState(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI16SearchFieldStateVWOcTm_0(a1, (uint64_t)v7, type metadata accessor for SearchFieldState);
  uint64_t v8 = &v7[*(int *)(v5 + 44)];
  uint64_t v9 = type metadata accessor for AttributedString();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a2, v8, v9);
}

uint64_t key path setter for SearchFieldState.text : SearchFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v12((char *)&v16 - v10, a1, v4, v9);
  uint64_t v13 = a2 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  ((void (*)(char *, uint64_t, uint64_t))v12)(v7, v13, v4);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v13, v11, v4);
  SearchFieldState.textDidChange(from:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v11, v4);
  return ((uint64_t (*)(char *, uint64_t))v14)(v7, v4);
}

uint64_t SearchFieldState.hasSuggestions.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t SearchFieldState.hasSuggestions.setter(unsigned __int8 a1)
{
  int v3 = a1;
  uint64_t v4 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  double v9 = (char *)&v14 - v8;
  v1[2] = a1;
  _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v1, (uint64_t)&v14 - v8, type metadata accessor for SearchFieldState);
  if (v3 == 2)
  {
    int v3 = v9[3];
    uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v9, type metadata accessor for SearchFieldState);
    if (v3 == 2) {
      return result;
    }
  }
  else
  {
    uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v9, type metadata accessor for SearchFieldState);
  }
  int v11 = *v1;
  if ((v3 & 1) == 0)
  {
    if (v11 == 2) {
      return result;
    }
    char v12 = 0;
LABEL_15:
    *uint64_t v1 = v12;
    return result;
  }
  if (v11 == 2) {
    return result;
  }
  int v13 = v1[2];
  _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v1, (uint64_t)v6, type metadata accessor for SearchFieldState);
  if (v13 != 2)
  {
    uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v6, type metadata accessor for SearchFieldState);
    goto LABEL_13;
  }
  int v13 = v6[3];
  uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v6, type metadata accessor for SearchFieldState);
  if (v13 != 2)
  {
LABEL_13:
    if ((v13 & 1) == 0) {
      return result;
    }
    char v12 = 1;
    goto LABEL_15;
  }
  return result;
}

uint64_t SearchField.init(state:isPresented:control:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  property wrapper backing initializer of SearchField.state(a1, a5);
  double v9 = (int *)type metadata accessor for SearchField();
  uint64_t v10 = a5 + v9[9];
  *(void *)uint64_t v10 = a2 & 1;
  *(void *)(v10 + 8) = 0;
  *(_WORD *)(v10 + 16) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + v9[10], a3, a4);
  *(unsigned char *)(a5 + v9[11]) = 0;
  return result;
}

uint64_t protocol witness for SearchEnvironmentTransform.update(properties:) in conformance SearchTextTransform(uint64_t a1)
{
  uint64_t v2 = a1 + *(int *)(type metadata accessor for SearchEnvironmentProperties(0) + 20);
  _s7SwiftUI16SearchFieldStateVWOhTm_4(v2, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
  _s7SwiftUI16SearchFieldStateVWOcTm_0(v1, v2, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 0, 1, v3);
}

uint64_t SearchFieldState.textDidChange(from:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributedString.characters.getter();
  uint64_t v9 = AttributedString.CharacterView._count.getter();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v8, v5);
  AttributedString.characters.getter();
  uint64_t v11 = AttributedString.CharacterView._count.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v10)(v8, v5);
  uint64_t v13 = v11 - v9;
  if (__OFSUB__(v11, v9))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (v13 < 0)
  {
    BOOL v14 = __OFSUB__(0, v13);
    uint64_t v13 = v9 - v11;
    if (v14) {
      goto LABEL_17;
    }
  }
  BOOL v15 = v13 != 1 || v11 < 1;
  if (!v15 && *v1 != 2)
  {
    int v16 = v1[2];
    _s7SwiftUI16SearchFieldStateVWOcTm_0((uint64_t)v1, (uint64_t)v4, type metadata accessor for SearchFieldState);
    if (v16 == 2)
    {
      int v17 = v4[3];
      uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v4, type metadata accessor for SearchFieldState);
      if (v17 != 2 && (v17 & 1) != 0) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v4, type metadata accessor for SearchFieldState);
      if (v16) {
LABEL_12:
      }
        *uint64_t v1 = 1;
    }
  }
  return result;
}

Swift::Void __swiftcall SearchFieldState.updateIsSearching(_:)(Swift::Bool a1)
{
  BOOL v3 = a1;
  uint64_t v4 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v37 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v39 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v38 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v12 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v12);
  BOOL v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v34 - v17;
  int v19 = *v1;
  if ((v19 != 2) != v3)
  {
    uint64_t v20 = (uint64_t)v1;
    if (a1)
    {
      if (v19) {
        return;
      }
      uint64_t v21 = v16;
      int v22 = *(unsigned __int8 *)(v20 + 2);
      _s7SwiftUI16SearchFieldStateVWOcTm_0(v20, (uint64_t)&v34 - v17, type metadata accessor for SearchFieldState);
      if (v22 == 2)
      {
        int v22 = v18[3];
        _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v18, type metadata accessor for SearchFieldState);
        if (v22 == 2)
        {
          char v23 = 0;
LABEL_18:
          *(unsigned char *)uint64_t v20 = v23;
          char v32 = 1;
LABEL_25:
          *(unsigned char *)(v20 + *(int *)(v21 + 40)) = v32;
          return;
        }
      }
      else
      {
        _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v18, type metadata accessor for SearchFieldState);
      }
      char v23 = v22 & 1;
      goto LABEL_18;
    }
    *uint64_t v1 = 2;
    uint64_t v24 = v16;
    AttributedString.init(stringLiteral:)();
    uint64_t v35 = v24;
    uint64_t v25 = v20 + *(int *)(v24 + 36);
    uint64_t v26 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v38, v25, v7);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 24))(v25, v11, v7);
    AttributedString.characters.getter();
    uint64_t v36 = AttributedString.CharacterView._count.getter();
    uint64_t v27 = *(void (**)(char *, uint64_t))(v37 + 8);
    v27(v6, v4);
    AttributedString.characters.getter();
    uint64_t v28 = AttributedString.CharacterView._count.getter();
    v27(v6, v4);
    uint64_t v29 = v28 - v36;
    if (__OFSUB__(v28, v36))
    {
      __break(1u);
    }
    else if ((v29 & 0x8000000000000000) == 0 || (v30 = __OFSUB__(0, v29), uint64_t v29 = v36 - v28, !v30))
    {
      if (v29 == 1 && v28 >= 1 && *(unsigned char *)v20 != 2)
      {
        int v31 = *(unsigned __int8 *)(v20 + 2);
        _s7SwiftUI16SearchFieldStateVWOcTm_0(v20, (uint64_t)v14, type metadata accessor for SearchFieldState);
        if (v31 == 2)
        {
          int v31 = v14[3];
          _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v14, type metadata accessor for SearchFieldState);
          if (v31 == 2) {
            goto LABEL_22;
          }
        }
        else
        {
          _s7SwiftUI16SearchFieldStateVWOhTm_4((uint64_t)v14, type metadata accessor for SearchFieldState);
        }
        if (v31) {
          *(unsigned char *)uint64_t v20 = 1;
        }
      }
LABEL_22:
      uint64_t v33 = *(void (**)(char *, uint64_t))(v39 + 8);
      v33(v11, v7);
      v33(v38, v7);
      char v32 = 0;
      if ((*(unsigned char *)(v20 + 8) & 1) == 0)
      {
        *(_DWORD *)(v20 + 4) = 0;
        *(unsigned char *)(v20 + 8) = 1;
      }
      uint64_t v21 = v35;
      goto LABEL_25;
    }
    __break(1u);
  }
}

uint64_t SearchField.init<A, B>(text:tokens:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  v50.n128_u64[0] = a7;
  v50.n128_u64[1] = a8;
  uint64_t v52 = a4;
  uint64_t v53 = a6;
  uint64_t v58 = a2;
  uint64_t v59 = a5;
  uint64_t v51 = a3;
  uint64_t v57 = a1;
  uint64_t v55 = a9;
  uint64_t v46 = a11;
  uint64_t v47 = a10;
  uint64_t v45 = a12;
  uint64_t v18 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v54 = (uint64_t)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Binding();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v48 = v20;
  uint64_t v49 = v21;
  MEMORY[0x1F4188790](v20);
  char v23 = (char *)&v42 - v22;
  uint64_t v60 = a13;
  uint64_t v61 = a14;
  uint64_t v62 = a15;
  uint64_t v63 = a16;
  uint64_t v64 = a17;
  uint64_t v65 = a18;
  uint64_t v43 = type metadata accessor for SearchFieldTokenControl();
  uint64_t v56 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v42 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char **)((char *)&v42 - v27);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v23, v59, v20, v26);
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = a13;
  v29[3] = a14;
  _OWORD v29[4] = a15;
  v29[5] = a16;
  v29[6] = a17;
  v29[7] = a18;
  uint64_t v30 = v45;
  char v29[8] = v46;
  v29[9] = v30;
  uint64_t v31 = v47;
  char v32 = v50.n128_i8[8];
  uint64_t v33 = v50.n128_u64[0];
  uint64_t v44 = v28;
  uint64_t v34 = v53;
  __n128 v35 = SearchFieldTokenControl.init(text:tokens:token:prompt:)(v57, v58, v51, v52, (uint64_t)v23, (uint64_t)partial apply for closure #1 in SearchField.init<A, B>(text:tokens:prompt:token:), (uint64_t)v29, v53, v28, v50, v47);
  uint64_t v36 = (uint64_t)v42;
  uint64_t v37 = v28;
  uint64_t v38 = v43;
  (*(void (**)(char *, void *, uint64_t, __n128))(v56 + 16))(v42, v37, v43, v35);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v39 = v31;
  outlined copy of Text?(v34, v33, v32, v31);
  swift_getWitnessTable();
  uint64_t v40 = v54;
  SearchFieldState.init()(v54);
  SearchField.init(state:isPresented:control:)(v40, 0, v36, v38, v55);
  swift_release();
  outlined consume of Text?(v34, v33, v32, v39);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v59, v48);
  return (*(uint64_t (**)(void *, uint64_t))(v56 + 8))(v44, v38);
}

{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v47.n128_u64[0] = a7;
  v47.n128_u64[1] = a8;
  uint64_t v49 = a4;
  __n128 v50 = a6;
  uint64_t v55 = a2;
  uint64_t v56 = a5;
  uint64_t v48 = a3;
  uint64_t v54 = a1;
  uint64_t v52 = a9;
  uint64_t v46 = a11;
  uint64_t v42 = a10;
  v40[1] = a14;
  uint64_t v43 = a12;
  uint64_t v18 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v51 = (uint64_t)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Binding();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v44 = v20;
  uint64_t v45 = v21;
  MEMORY[0x1F4188790](v20);
  char v23 = (char *)v40 - v22;
  uint64_t v57 = a13;
  uint64_t v58 = a14;
  uint64_t v59 = a15;
  uint64_t v60 = a16;
  uint64_t v61 = a17;
  uint64_t v62 = a18;
  uint64_t v41 = type metadata accessor for SearchFieldTokenControl();
  uint64_t v53 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v25 = (char *)v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[0] = (uint64_t)v25;
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (uint64_t *)((char *)v40 - v28);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v23, v56, v20, v27);
  uint64_t v30 = v42;
  uint64_t v31 = v47.n128_i8[8];
  char v32 = v47.n128_u64[0];
  uint64_t v33 = (uint64_t)v23;
  uint64_t v34 = v50;
  __n128 v35 = SearchFieldTokenControl.init(text:tokens:token:prompt:)(v54, v55, v48, v49, v33, v46, v43, v50, v29, v47, v42);
  uint64_t v36 = v25;
  uint64_t v37 = v41;
  (*(void (**)(char *, void *, uint64_t, __n128))(v53 + 16))(v36, v29, v41, v35);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Text?(v34, v32, v31, v30);
  swift_getWitnessTable();
  uint64_t v38 = v51;
  SearchFieldState.init()(v51);
  SearchField.init(state:isPresented:control:)(v38, 0, v40[0], v37, v52);
  swift_release();
  outlined consume of Text?(v34, v32, v31, v30);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v56, v44);
  return (*(uint64_t (**)(void *, uint64_t))(v53 + 8))(v29, v37);
}

uint64_t type metadata accessor for SearchFieldTokenControl()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in SearchField.init<A, B>(text:tokens:prompt:token:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v9 - v5;
  uint64_t v7 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v7);
  a2(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, AssociatedTypeWitness);
}

uint64_t sub_187FF6BA4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SearchField.init<A, B>(text:tokens:prompt:token:)(uint64_t a1)
{
  return closure #1 in SearchField.init<A, B>(text:tokens:prompt:token:)(a1, *(void (**)(char *))(v1 + 64));
}

__n128 SearchFieldTokenControl.init(text:tokens:token:prompt:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, __n128 a10, uint64_t a11)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v16 = (int *)type metadata accessor for SearchFieldTokenControl();
  uint64_t v17 = (char *)a9 + v16[17];
  uint64_t v18 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a5, v18);
  uint64_t v19 = (void *)((char *)a9 + v16[18]);
  *uint64_t v19 = a6;
  v19[1] = a7;
  uint64_t v20 = (char *)a9 + v16[19];
  *(void *)uint64_t v20 = a8;
  __n128 result = a10;
  *(__n128 *)(v20 + 8) = a10;
  *((void *)v20 + 3) = a11;
  return result;
}

uint64_t SearchFieldTokenControl.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v43 = a2;
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v44 = MEMORY[0x1E4F417F8];
  uint64_t v45 = AssociatedTypeWitness;
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v38 = v10;
  uint64_t v39 = v9;
  uint64_t v46 = v9;
  uint64_t v47 = MEMORY[0x1E4F417F0];
  uint64_t v48 = v10;
  uint64_t v49 = v11;
  uint64_t v37 = v11;
  uint64_t v12 = type metadata accessor for TokenField();
  uint64_t v41 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  BOOL v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v42 = v7;
  SearchFieldTokenControl.attributedText.getter((void *)a1, (uint64_t)v7);
  uint64_t v18 = (uint64_t *)(v2 + *(int *)(a1 + 76));
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  uint64_t v22 = v18[2];
  uint64_t v21 = v18[3];
  if (v21)
  {
    unsigned int v23 = v22 & 1;
    uint64_t v35 = v20;
    uint64_t v36 = v19;
    uint64_t v34 = v21;
  }
  else
  {
    uint64_t v24 = static Text.System.search.getter();
    uint64_t v35 = v25;
    uint64_t v36 = v24;
    uint64_t v34 = v26;
    unsigned int v23 = v27 & 1;
  }
  uint64_t v28 = v23;
  uint64_t v29 = (uint64_t *)(v3 + *(int *)(a1 + 72));
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  outlined copy of Text?(v19, v20, v22, v21);
  swift_retain();
  TokenField.init(valueType:text:prompt:token:label:)(v40, (uint64_t)v42, v36, v35, v28, v34, v30, v31, (uint64_t)v14, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, MEMORY[0x1E4F417F8]);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  char v32 = *(void (**)(char *, uint64_t))(v41 + 8);
  v32(v14, v12);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v32)(v17, v12);
}

uint64_t SearchFieldTokenControl.attributedText.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = a1[2];
  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - v6;
  swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - v10;
  Binding.projectedValue.getter();
  uint64_t v24 = TextField.$text.getter();
  uint64_t v25 = v12;
  uint64_t v26 = v13;
  uint64_t v27 = v14;
  Binding.zip<A>(with:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v15 = a1[4];
  uint64_t v16 = a1[5];
  uint64_t v17 = a1[7];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v3, v15, v16, v17);
  uint64_t v24 = v3;
  uint64_t v25 = v15;
  uint64_t v26 = v16;
  uint64_t v27 = v17;
  type metadata accessor for StringTokensToAttributedStringProjection();
  swift_getWitnessTable();
  uint64_t v18 = v21;
  Binding.projecting<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v11, v18);
}

uint64_t associated type witness table accessor for View.Body : View in SearchFieldTokenControl<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeBufferWithCopyOfBuffer for SearchField(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  unint64_t v9 = v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = ((v9 + 9) & ~v9) + v10;
  unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v14 = v8 | 3;
  if (v12 + ((v9 + 16) & ~(v9 | 3)) <= v13) {
    unint64_t v15 = v13;
  }
  else {
    unint64_t v15 = v12 + ((v8 + 16) & ~(v8 | 3));
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  int v18 = (*(_DWORD *)(v16 + 80) | v8) & 0x100000;
  if ((v17 | v9) > 7
    || v18 != 0
    || *(void *)(v16 + 64) + ((v17 + (v15 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v17) + 1 > 0x18)
  {
    uint64_t v21 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v21 + (((v17 | v9) & 0xF8 ^ 0x1F8) & ((v17 | v9) + 16));
    swift_retain();
  }
  else
  {
    unsigned int v22 = a2[v15];
    unsigned int v23 = v22 - 2;
    if (v22 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v24 = v15;
      }
      else {
        uint64_t v24 = 4;
      }
      switch(v24)
      {
        case 1:
          int v25 = *a2;
          if (v15 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 2:
          int v25 = *(unsigned __int16 *)a2;
          if (v15 >= 4) {
            goto LABEL_25;
          }
          goto LABEL_23;
        case 3:
          int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v15 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 4:
          int v25 = *(_DWORD *)a2;
          if (v15 < 4) {
LABEL_23:
          }
            unsigned int v22 = (v25 | (v23 << (8 * v15))) + 2;
          else {
LABEL_25:
          }
            unsigned int v22 = v25 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v63 = *(void *)(v16 + 64);
    uint64_t v64 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v65 = *(void *)(a3 + 16);
    uint64_t v26 = ~v9;
    unint64_t v62 = v15 + 1;
    if (v22 == 1)
    {
      uint64_t v27 = ~v14;
      unint64_t v28 = (unint64_t)(a2 + 15);
      uint64_t v30 = *(void *)a2;
      unint64_t v29 = (unint64_t)(a2 + 7);
      *(void *)a1 = v30;
      uint64_t v31 = a1 + 7;
      char v32 = (void *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      v28 &= 0xFFFFFFFFFFFFFFF8;
      *char v32 = *(void *)v28;
      uint64_t v33 = (char *)v32 + v14;
      uint64_t v34 = (char *)(v28 + v14);
      uint64_t v35 = (unint64_t)(v33 + 8) & v27;
      uint64_t v36 = (unint64_t)(v34 + 8) & v27;
      *(unsigned char *)uint64_t v35 = *(unsigned char *)v36;
      *(unsigned char *)(v35 | 1) = *(unsigned char *)(v36 | 1);
      *(unsigned char *)(v35 | 2) = *(unsigned char *)(v36 | 2);
      *(unsigned char *)(v35 | 3) = *(unsigned char *)(v36 | 3);
      unint64_t v37 = (v35 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v38 = (v36 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v35) = *(_DWORD *)v38;
      *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
      *(_DWORD *)unint64_t v37 = v35;
      unint64_t v39 = v9 + 5;
      unint64_t v40 = (v39 + v37) & v26;
      unint64_t v41 = (v39 + v38) & v26;
      uint64_t v42 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      uint64_t v43 = v6;
      swift_retain();
      swift_retain();
      v42(v40, v41, v43);
      *(unsigned char *)(v40 + v10) = *(unsigned char *)(v41 + v10);
      unint64_t v44 = (v40 + v10) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v45 = (v41 + v10) & 0xFFFFFFFFFFFFFFFCLL;
      int v46 = *(_DWORD *)(v45 + 4);
      *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
      *(_DWORD *)(v44 + 4) = v46;
      char v47 = 1;
    }
    else
    {
      *(unsigned char *)a1 = *a2;
      *(unsigned char *)(a1 + 1) = a2[1];
      *(unsigned char *)(a1 + 2) = a2[2];
      *(unsigned char *)(a1 + 3) = a2[3];
      uint64_t v31 = a1 + 7;
      unint64_t v48 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v29 = (unint64_t)(a2 + 7);
      int v49 = *(_DWORD *)(v29 & 0xFFFFFFFFFFFFFFFCLL);
      *(unsigned char *)(v48 + 4) = *(unsigned char *)((v29 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      *(_DWORD *)unint64_t v48 = v49;
      uint64_t v50 = (v48 + v9 + 5) & v26;
      unint64_t v51 = ((v29 & 0xFFFFFFFFFFFFFFFCLL) + v9 + 5) & v26;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v50, v51, v6);
      *(unsigned char *)(v50 + v10) = *(unsigned char *)(v51 + v10);
      unint64_t v52 = (v50 + v10) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v53 = (v51 + v10) & 0xFFFFFFFFFFFFFFFCLL;
      int v54 = *(_DWORD *)(v53 + 4);
      *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
      *(_DWORD *)(v52 + 4) = v54;
      *(void *)((a1 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v29 + v12) & 0xFFFFFFFFFFFFFFF8);
      swift_retain();
      char v47 = 0;
    }
    *(unsigned char *)(a1 + v15) = v47;
    unint64_t v55 = (v31 + v62) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v56 = (v29 + v62) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v57 = *(unsigned __int8 *)(v56 + 17);
    if (v57 >= 2) {
      unsigned int v57 = *(_DWORD *)v56 + 2;
    }
    uint64_t v58 = ~v17;
    if (v57 == 1)
    {
      *(void *)unint64_t v55 = *(void *)v56;
      *(void *)(v55 + 8) = *(void *)(v56 + 8);
      *(unsigned char *)(v55 + 16) = *(unsigned char *)(v56 + 16);
      swift_retain();
      char v59 = 1;
    }
    else
    {
      char v59 = 0;
      *(unsigned char *)unint64_t v55 = *(unsigned char *)v56;
      *(void *)(v55 + 8) = *(void *)(v56 + 8);
    }
    swift_retain();
    *(unsigned char *)(v55 + 17) = v59;
    uint64_t v60 = (v17 + 18 + v56) & v58;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v64 + 16))((v17 + 18 + v55) & v58, v60, v65);
    *(unsigned char *)(((v17 + 18 + v55) & v58) + v63) = *(unsigned char *)(v60 + v63);
  }
  return a1;
}

unsigned __int8 *assignWithCopy for SearchField(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v63 = type metadata accessor for AttributedString();
    uint64_t v6 = *(void *)(v63 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v61 = *(void *)(v6 + 64);
    uint64_t v8 = ((v7 + 9) & ~v7) + v61;
    unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          if (v12 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v16 = *(_DWORD *)a1;
          if (v12 < 4) {
LABEL_15:
          }
            unsigned int v13 = (v16 | (v14 << (8 * v12))) + 2;
          else {
LABEL_17:
          }
            unsigned int v13 = v16 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v62 = a3;
    uint64_t v17 = ~v7;
    uint64_t v18 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v17, v63);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v17, v63);
      swift_release();
    }
    unsigned int v19 = a2[v12];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_31:
            unsigned int v19 = (v22 | (v20 << (8 * v12))) + 2;
            break;
          }
LABEL_35:
          if (v22 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v19 == 1)
    {
LABEL_33:
      *(void *)a1 = *(void *)a2;
      unsigned int v23 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v23 = *v24;
      uint64_t v25 = ((unint64_t)v23 + v11 + 8) & v18;
      uint64_t v26 = ((unint64_t)v24 + v11 + 8) & v18;
      *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
      *(unsigned char *)(v25 | 1) = *(unsigned char *)(v26 | 1);
      *(unsigned char *)(v25 | 2) = *(unsigned char *)(v26 | 2);
      *(unsigned char *)(v25 | 3) = *(unsigned char *)(v26 | 3);
      unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v29 = *(_DWORD *)v28;
      *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
      *(_DWORD *)unint64_t v27 = v29;
      uint64_t v30 = v7 + 5;
      uint64_t v31 = (v7 + 5 + v27) & v17;
      unint64_t v32 = (v30 + v28) & v17;
      uint64_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v33(v31, v32, v63);
      *(unsigned char *)(v31 + v61) = *(unsigned char *)(v32 + v61);
      unint64_t v34 = (v31 + v61) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v35 = (v32 + v61) & 0xFFFFFFFFFFFFFFFCLL;
      int v36 = *(_DWORD *)(v35 + 4);
      *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
      *(_DWORD *)(v34 + 4) = v36;
      a1[v12] = 1;
    }
    else
    {
LABEL_36:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      unint64_t v37 = (unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v38 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v39 = *(_DWORD *)v38;
      *(unsigned char *)(v37 + 4) = *(unsigned char *)(v38 + 4);
      *(_DWORD *)unint64_t v37 = v39;
      uint64_t v40 = (v37 + v7 + 5) & v17;
      uint64_t v41 = (v38 + v7 + 5) & v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v40, v41, v63);
      *(unsigned char *)(v40 + v61) = *(unsigned char *)(v41 + v61);
      unint64_t v42 = (v40 + v61) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v43 = (v41 + v61) & 0xFFFFFFFFFFFFFFFCLL;
      int v44 = *(_DWORD *)(v43 + 4);
      *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
      *(_DWORD *)(v42 + 4) = v44;
      *(void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      a1[v12] = 0;
      swift_retain();
    }
    a3 = v62;
  }
  uint64_t v45 = *(void *)(type metadata accessor for AttributedString() - 8);
  unint64_t v46 = ((*(_DWORD *)(v45 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v45 + 80))
      + *(void *)(v45 + 64);
  unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v49 = ((*(_DWORD *)(v45 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v45 + 80) + 16)) + v47 + 9;
  if (v49 <= v48) {
    unint64_t v49 = v48;
  }
  unint64_t v50 = v49 + 8;
  unint64_t v51 = (unint64_t)&a1[v50] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (unint64_t)&a2[v50] & 0xFFFFFFFFFFFFFFF8;
  if (v51 != v52)
  {
    unsigned int v53 = *(unsigned __int8 *)(v51 + 17);
    if (v53 >= 2) {
      unsigned int v53 = *(_DWORD *)v51 + 2;
    }
    if (v53 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v54 = *(unsigned __int8 *)(v52 + 17);
    if (v54 >= 2) {
      unsigned int v54 = *(_DWORD *)v52 + 2;
    }
    if (v54 == 1)
    {
      *(void *)unint64_t v51 = *(void *)v52;
      *(void *)(v51 + 8) = *(void *)(v52 + 8);
      *(unsigned char *)(v51 + 16) = *(unsigned char *)(v52 + 16);
      *(unsigned char *)(v51 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v51 = *(unsigned char *)v52;
      *(void *)(v51 + 8) = *(void *)(v52 + 8);
      *(unsigned char *)(v51 + 17) = 0;
    }
    swift_retain();
  }
  uint64_t v55 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v56 = v55 + 24;
  uint64_t v57 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v58 = (v51 + v57 + 18) & ~v57;
  uint64_t v59 = (v52 + v57 + 18) & ~v57;
  (*(void (**)(uint64_t, uint64_t))(v55 + 24))(v58, v59);
  *(unsigned char *)(v58 + *(void *)(v56 + 40)) = *(unsigned char *)(v59 + *(void *)(v56 + 40));
  return a1;
}

uint64_t initializeWithTake for SearchField(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = ((v8 + 9) & ~v8) + v9;
  unint64_t v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  }
  unsigned int v15 = a2[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *a2;
        if (v14 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 2:
        int v18 = *(unsigned __int16 *)a2;
        if (v14 >= 4) {
          goto LABEL_16;
        }
        goto LABEL_14;
      case 3:
        int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v14 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 4:
        int v18 = *(_DWORD *)a2;
        if (v14 < 4) {
LABEL_14:
        }
          unsigned int v15 = (v18 | (v16 << (8 * v14))) + 2;
        else {
LABEL_16:
        }
          unsigned int v15 = v18 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v19 = ~v8;
  if (v15 == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v20 = ~v13;
    uint64_t v21 = (void *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v22 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    unsigned int v23 = (char *)v21 + v13;
    uint64_t v24 = (char *)v22 + v13;
    uint64_t v25 = (unint64_t)(v23 + 8) & v20;
    uint64_t v26 = (unint64_t)(v24 + 8) & v20;
    *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
    *(unsigned char *)(v25 | 1) = *(unsigned char *)(v26 | 1);
    *(unsigned char *)(v25 | 2) = *(unsigned char *)(v26 | 2);
    *(unsigned char *)(v25 | 3) = *(unsigned char *)(v26 | 3);
    unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v20) = *(_DWORD *)v28;
    *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
    *(_DWORD *)unint64_t v27 = v20;
    uint64_t v29 = v8 + 5;
    unint64_t v30 = (v29 + v27) & v19;
    unint64_t v31 = (v29 + v28) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v30, v31, v6);
    *(unsigned char *)(v30 + v9) = *(unsigned char *)(v31 + v9);
    unint64_t v32 = (v30 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v33 = (v31 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    int v34 = *(_DWORD *)(v33 + 4);
    *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
    *(_DWORD *)(v32 + 4) = v34;
    char v35 = 1;
  }
  else
  {
    *(unsigned char *)a1 = *a2;
    *(unsigned char *)(a1 + 1) = a2[1];
    *(unsigned char *)(a1 + 2) = a2[2];
    *(unsigned char *)(a1 + 3) = a2[3];
    unint64_t v36 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v37 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v38 = *(_DWORD *)v37;
    *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
    *(_DWORD *)unint64_t v36 = v38;
    uint64_t v39 = (v36 + v8 + 5) & v19;
    uint64_t v40 = (v37 + v8 + 5) & v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v39, v40, v6);
    char v35 = 0;
    *(unsigned char *)(v39 + v9) = *(unsigned char *)(v40 + v9);
    unint64_t v41 = (v39 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v42 = (v40 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    int v43 = *(_DWORD *)(v42 + 4);
    *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
    *(_DWORD *)(v41 + 4) = v43;
    *(void *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
  }
  *(unsigned char *)(a1 + v14) = v35;
  unint64_t v44 = (v14 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (unint64_t)&a2[v14 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v46 = *(unsigned __int8 *)(v45 + 17);
  if (v46 >= 2) {
    unsigned int v46 = *(_DWORD *)v45 + 2;
  }
  if (v46 == 1)
  {
    long long v47 = *(_OWORD *)v45;
    *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
    *(_OWORD *)unint64_t v44 = v47;
    char v48 = 1;
  }
  else
  {
    char v48 = 0;
    *(_OWORD *)unint64_t v44 = *(_OWORD *)v45;
  }
  *(unsigned char *)(v44 + 17) = v48;
  uint64_t v49 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v50 = v49 + 32;
  uint64_t v51 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v52 = (v44 + v51 + 18) & ~v51;
  uint64_t v53 = (v45 + v51 + 18) & ~v51;
  (*(void (**)(uint64_t, uint64_t))(v49 + 32))(v52, v53);
  *(unsigned char *)(v52 + *(void *)(v50 + 32)) = *(unsigned char *)(v53 + *(void *)(v50 + 32));
  return a1;
}

unsigned __int8 *assignWithTake for SearchField(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v65 = type metadata accessor for AttributedString();
    uint64_t v6 = *(void *)(v65 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v63 = *(void *)(v6 + 64);
    uint64_t v8 = ((v7 + 9) & ~v7) + v63;
    unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          if (v12 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v16 = *(_DWORD *)a1;
          if (v12 < 4) {
LABEL_15:
          }
            unsigned int v13 = (v16 | (v14 << (8 * v12))) + 2;
          else {
LABEL_17:
          }
            unsigned int v13 = v16 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v17 = ~v7;
    uint64_t v18 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v17, v65);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v17, v65);
      swift_release();
    }
    unsigned int v19 = a2[v12];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_31:
            unsigned int v19 = (v22 | (v20 << (8 * v12))) + 2;
            break;
          }
LABEL_35:
          if (v22 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v19 == 1)
    {
LABEL_33:
      *(void *)a1 = *(void *)a2;
      unsigned int v23 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v23 = *v24;
      uint64_t v25 = ((unint64_t)v23 + v11 + 8) & v18;
      uint64_t v26 = ((unint64_t)v24 + v11 + 8) & v18;
      *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
      *(unsigned char *)(v25 | 1) = *(unsigned char *)(v26 | 1);
      *(unsigned char *)(v25 | 2) = *(unsigned char *)(v26 | 2);
      *(unsigned char *)(v25 | 3) = *(unsigned char *)(v26 | 3);
      unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v29 = *(_DWORD *)v28;
      *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
      *(_DWORD *)unint64_t v27 = v29;
      uint64_t v30 = v7 + 5;
      uint64_t v31 = (v7 + 5 + v27) & v17;
      unint64_t v32 = (v30 + v28) & v17;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v31, v32, v65);
      *(unsigned char *)(v31 + v63) = *(unsigned char *)(v32 + v63);
      unint64_t v33 = (v31 + v63) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v34 = (v32 + v63) & 0xFFFFFFFFFFFFFFFCLL;
      int v35 = *(_DWORD *)(v34 + 4);
      *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
      *(_DWORD *)(v33 + 4) = v35;
      a1[v12] = 1;
    }
    else
    {
LABEL_36:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      unint64_t v36 = (unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v37 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v38 = *(_DWORD *)v37;
      *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
      *(_DWORD *)unint64_t v36 = v38;
      uint64_t v39 = v37 + v7;
      uint64_t v40 = (v36 + v7 + 5) & v17;
      uint64_t v41 = (v39 + 5) & v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v40, v41, v65);
      *(unsigned char *)(v40 + v63) = *(unsigned char *)(v41 + v63);
      unint64_t v42 = (v40 + v63) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v43 = (v41 + v63) & 0xFFFFFFFFFFFFFFFCLL;
      int v44 = *(_DWORD *)(v43 + 4);
      *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
      *(_DWORD *)(v42 + 4) = v44;
      *(void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      a1[v12] = 0;
    }
    uint64_t v3 = a3;
  }
  uint64_t v45 = *(void *)(type metadata accessor for AttributedString() - 8);
  unint64_t v46 = ((*(_DWORD *)(v45 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v45 + 80))
      + *(void *)(v45 + 64);
  unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v49 = ((*(_DWORD *)(v45 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v45 + 80) + 16)) + v47 + 9;
  if (v49 <= v48) {
    unint64_t v49 = v48;
  }
  unint64_t v50 = v49 + 8;
  unint64_t v51 = (unint64_t)&a1[v50] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (unint64_t)&a2[v50] & 0xFFFFFFFFFFFFFFF8;
  if (v51 != v52)
  {
    unsigned int v53 = *(unsigned __int8 *)(v51 + 17);
    if (v53 >= 2) {
      unsigned int v53 = *(_DWORD *)v51 + 2;
    }
    if (v53 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v54 = *(unsigned __int8 *)(v52 + 17);
    if (v54 >= 2) {
      unsigned int v54 = *(_DWORD *)v52 + 2;
    }
    if (v54 == 1)
    {
      long long v55 = *(_OWORD *)v52;
      *(unsigned char *)(v51 + 16) = *(unsigned char *)(v52 + 16);
      *(_OWORD *)unint64_t v51 = v55;
      char v56 = 1;
    }
    else
    {
      char v56 = 0;
      *(_OWORD *)unint64_t v51 = *(_OWORD *)v52;
    }
    *(unsigned char *)(v51 + 17) = v56;
  }
  uint64_t v57 = *(void *)(*(void *)(v3 + 16) - 8);
  uint64_t v58 = v57 + 40;
  uint64_t v59 = *(unsigned __int8 *)(v57 + 80);
  uint64_t v60 = (v51 + v59 + 18) & ~v59;
  uint64_t v61 = (v52 + v59 + 18) & ~v59;
  (*(void (**)(uint64_t, uint64_t))(v57 + 40))(v60, v61);
  *(unsigned char *)(v60 + *(void *)(v58 + 24)) = *(unsigned char *)(v61 + *(void *)(v58 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchField(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for AttributedString() - 8);
  unint64_t v7 = ((*(_DWORD *)(v6 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v6 + 80))
     + *(void *)(v6 + 64);
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v10 = ((*(_DWORD *)(v6 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v6 + 80) + 16)) + v8 + 9;
  if (v10 <= v9) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= 0xFE) {
    unsigned int v15 = 254;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v12 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v15) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v12 + 64) + ((v14 + (v11 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v14) + 1;
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((a2 - v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_28:
      if (v13 > 0xFE)
      {
        uint64_t v25 = *(uint64_t (**)(unint64_t))(v12 + 48);
        return v25((v14 + (((unint64_t)a1 + v11 + 8) & 0xFFFFFFFFFFFFFFF8) + 18) & ~v14);
      }
      else
      {
        unsigned int v24 = *((unsigned __int8 *)a1 + v11);
        if (v24 >= 2) {
          return (v24 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_28;
  }
LABEL_18:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v15 + (v23 | v21) + 1;
}

void storeEnumTagSinglePayload for SearchField(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  unint64_t v9 = ((*(_DWORD *)(v8 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v8 + 80))
     + *(void *)(v8 + 64);
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v12 = ((*(_DWORD *)(v8 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v8 + 80) + 16)) + v10 + 9;
  uint64_t v13 = *(void *)(*(void *)(a4 + 16) - 8);
  if (v12 <= v11) {
    unint64_t v12 = v11;
  }
  uint64_t v14 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v15 = *(_DWORD *)(v13 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = *(void *)(v13 + 64);
  if (v15 <= 0xFE) {
    unsigned int v18 = 254;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v13 + 84);
  }
  size_t v19 = v17 + ((v16 + (v12 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v16) + 1;
  if (a3 <= v18)
  {
    int v20 = 0;
  }
  else if (v19 <= 3)
  {
    unsigned int v24 = ((a3 - v18 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
    if (HIWORD(v24))
    {
      int v20 = 4;
    }
    else if (v24 >= 0x100)
    {
      int v20 = 2;
    }
    else
    {
      int v20 = v24 > 1;
    }
  }
  else
  {
    int v20 = 1;
  }
  if (v18 < a2)
  {
    unsigned int v21 = ~v18 + a2;
    if (v19 < 4)
    {
      int v22 = (v21 >> (8 * v19)) + 1;
      if (v19)
      {
        int v25 = v21 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v19] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v22;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v19] = v22;
        return;
      default:
        return;
    }
  }
  size_t v23 = v12 + 1;
  switch(v20)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x187FF9164);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v15 > 0xFE)
        {
          uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v14 + 56);
          v26((v16 + ((unint64_t)&a1[v23 + 7] & 0xFFFFFFFFFFFFFFF8) + 18) & ~v16, a2);
        }
        else if (a2 > 0xFE)
        {
          if (v23 <= 3) {
            int v27 = ~(-1 << (8 * v23));
          }
          else {
            int v27 = -1;
          }
          if (v12 != -1)
          {
            int v28 = v27 & (a2 - 255);
            if (v23 <= 3) {
              int v29 = v12 + 1;
            }
            else {
              int v29 = 4;
            }
            bzero(a1, v23);
            switch(v29)
            {
              case 2:
                *(_WORD *)a1 = v28;
                break;
              case 3:
                *(_WORD *)a1 = v28;
                a1[2] = BYTE2(v28);
                break;
              case 4:
                *(_DWORD *)a1 = v28;
                break;
              default:
                *a1 = v28;
                break;
            }
          }
        }
        else
        {
          a1[v12] = -(char)a2;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for SearchFieldTokenControl()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchFieldTokenControl(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = ((v7 + 16) & ~v7) + *(void *)(v5 + 64) + 7;
  int v10 = v6 & 0x100000;
  uint64_t v11 = *a2;
  *a1 = *a2;
  if (v7 > 7
    || v10 != 0
    || ((((v9 + (v8 & (v7 + 32))) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 32 > 0x18)
  {
    a1 = (uint64_t *)(v11 + (v8 & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = a2[2];
    a1[1] = a2[1];
    a1[2] = v14;
    a1[3] = a2[3];
    unsigned int v15 = (void *)(v8 & ((unint64_t)a1 + 39));
    uint64_t v16 = (void *)(v8 & ((unint64_t)a2 + 39));
    *unsigned int v15 = *v16;
    uint64_t v17 = ~v7;
    unsigned int v18 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    size_t v19 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v18 = *v19;
    uint64_t v20 = v7 + 8;
    unint64_t v33 = ((unint64_t)v19 + v20) & v17;
    unint64_t v34 = ((unint64_t)v18 + v20) & v17;
    unsigned int v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v21(v34, v33, v4);
    int v22 = (void *)(((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8);
    size_t v23 = (void *)(((unint64_t)v16 + v9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = v23[1];
    *int v22 = *v23;
    v22[1] = v24;
    unint64_t v25 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = *(void *)(v26 + 24);
    swift_retain();
    if (v27 < 0xFFFFFFFF)
    {
      long long v31 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16) = v31;
    }
    else
    {
      uint64_t v28 = *(void *)v26;
      uint64_t v29 = *(void *)(v26 + 8);
      char v30 = *(unsigned char *)(v26 + 16);
      outlined copy of Text.Storage(*(void *)v26, v29, v30);
      *(void *)unint64_t v25 = v28;
      *(void *)(v25 + 8) = v29;
      *(unsigned char *)(v25 + 16) = v30;
      *(void *)(v25 + 24) = *(void *)(v26 + 24);
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t destroy for SearchFieldTokenControl(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (a1 + (v6 | 7) + 32) & ~(v6 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6, v4);
  unint64_t v8 = (((v6 + 16) & ~v6) + *(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = swift_release();
  unint64_t v10 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v10 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for SearchFieldTokenControl(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v29 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v29 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v7 = v6 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 | 7) + 32;
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  unint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  *unint64_t v10 = *v11;
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  uint64_t v27 = ((unint64_t)v12 + v8 + 8) & ~v8;
  uint64_t v14 = ((unint64_t)v13 + v8 + 8) & ~v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v28(v27, v14, v29);
  uint64_t v15 = *(void *)(v7 + 48) + ((v8 + 16) & ~v8) + 7;
  uint64_t v16 = (void *)(((unint64_t)v10 + v15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)(((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  unint64_t v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = *(void *)(v20 + 24);
  swift_retain();
  if (v21 < 0xFFFFFFFF)
  {
    long long v25 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v25;
  }
  else
  {
    uint64_t v22 = *(void *)v20;
    uint64_t v23 = *(void *)(v20 + 8);
    char v24 = *(unsigned char *)(v20 + 16);
    outlined copy of Text.Storage(*(void *)v20, v23, v24);
    *(void *)unint64_t v19 = v22;
    *(void *)(v19 + 8) = v23;
    *(unsigned char *)(v19 + 16) = v24;
    *(void *)(v19 + 24) = *(void *)(v20 + 24);
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for SearchFieldTokenControl(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 32;
  unint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *unint64_t v10 = *v11;
  swift_retain();
  swift_release();
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8, v6);
  uint64_t v14 = *(void *)(v7 + 64) + ((v8 + 16) & ~v8) + 7;
  uint64_t v15 = (void *)(((unint64_t)v10 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v11 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  unint64_t v18 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = *(void *)(v19 + 24);
  if (*(void *)(v18 + 24) < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      uint64_t v27 = *(void *)v19;
      uint64_t v28 = *(void *)(v19 + 8);
      char v29 = *(unsigned char *)(v19 + 16);
      outlined copy of Text.Storage(*(void *)v19, v28, v29);
      *(void *)unint64_t v18 = v27;
      *(void *)(v18 + 8) = v28;
      *(unsigned char *)(v18 + 16) = v29;
      *(void *)(v18 + 24) = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v30 = *(_OWORD *)(v19 + 16);
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    *(_OWORD *)(v18 + 16) = v30;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v18, *(void *)(v18 + 8), *(unsigned char *)(v18 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v21 = *(void *)v19;
  uint64_t v22 = *(void *)(v19 + 8);
  char v23 = *(unsigned char *)(v19 + 16);
  outlined copy of Text.Storage(*(void *)v19, v22, v23);
  uint64_t v24 = *(void *)v18;
  uint64_t v25 = *(void *)(v18 + 8);
  char v26 = *(unsigned char *)(v18 + 16);
  *(void *)unint64_t v18 = v21;
  *(void *)(v18 + 8) = v22;
  *(unsigned char *)(v18 + 16) = v23;
  outlined consume of Text.Storage(v24, v25, v26);
  *(void *)(v18 + 24) = *(void *)(v19 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for SearchFieldTokenControl(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void (**)(unint64_t, unint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 | 7) + 32;
  unint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *unint64_t v10 = *v11;
  unint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v12 = *v13;
  v6(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8);
  uint64_t v14 = *(void *)(v7 + 32) + ((v8 + 16) & ~v8) + 7;
  uint64_t v15 = (_OWORD *)(((unint64_t)v10 + v14) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (_OWORD *)(((unint64_t)v11 + v14) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  uint64_t v17 = (long long *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v19 = *v17;
  long long v18 = v17[1];
  unint64_t v20 = (_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v20 = v19;
  v20[1] = v18;
  return a1;
}

void *assignWithTake for SearchFieldTokenControl(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 32;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  unint64_t v12 = (void *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  swift_release();
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v13 = *v14;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9, v7);
  uint64_t v15 = *(void *)(v8 + 64) + ((v9 + 16) & ~v9) + 7;
  uint64_t v16 = (_OWORD *)(((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (unint64_t)v12 + v15;
  unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 23;
  *uint64_t v16 = *(_OWORD *)(v17 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v19 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v19 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v20 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v25 = *(_OWORD *)(v20 + 16);
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    *(_OWORD *)(v19 + 16) = v25;
    return a1;
  }
  char v21 = *(unsigned char *)(v20 + 16);
  uint64_t v22 = *(void *)v19;
  uint64_t v23 = *(void *)(v19 + 8);
  char v24 = *(unsigned char *)(v19 + 16);
  *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  *(unsigned char *)(v19 + 16) = v21;
  outlined consume of Text.Storage(v22, v23, v24);
  *(void *)(v19 + 24) = *(void *)(v20 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldTokenControl(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= 0) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v8 | 7;
  if (v9 < a2)
  {
    unint64_t v11 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v8 + 16) & ~v8) + ((v8 + 32) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 32;
    unsigned int v12 = a2 - v9;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *(unsigned __int8 *)(a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v17 = *(unsigned __int16 *)(a1 + v11);
        if (v17) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187FF9DDCLL);
      case 4:
        int v17 = *(_DWORD *)(a1 + v11);
        if (!v17) {
          break;
        }
LABEL_25:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *(_DWORD *)a1;
        }
        return v9 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  if (v9 != 0x7FFFFFFF) {
    return (*(uint64_t (**)(unint64_t))(v5 + 48))((v8
  }
                                                                  + ((((a1 + v10 + 32) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                  + 8) & ~v8);
  unint64_t v20 = *(void *)(a1 + 8);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v20) = -1;
  }
  return (v20 + 1);
}

void storeEnumTagSinglePayload for SearchFieldTokenControl(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7 >= 0) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~(v9 | 7)) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 32;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_19:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_44;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v8 == 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0)
              {
                *((void *)a1 + 2) = 0;
                *((void *)a1 + 3) = 0;
                *(void *)a1 = a2 ^ 0x80000000;
                *((void *)a1 + 1) = 0;
              }
              else
              {
                *((void *)a1 + 1) = a2 - 1;
              }
            }
            else
            {
              unint64_t v18 = (v9 + ((((unint64_t)&a1[(v9 | 7) + 32] & ~(v9 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9;
              int v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
           + ((v9 + 32) & ~(v9 | 7))
           + ((v9 + 16) & ~v9)
           + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFE0)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_19;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
         + ((v9 + 32) & ~(v9 | 7))
         + ((v9 + 16) & ~v9)
         + 7) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFE0)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
         + ((v9 + 32) & ~(v9 | 7))
         + ((v9 + 16) & ~v9)
         + 7) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187FFA028);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

_UNKNOWN **sub_187FFA050()
{
  return &protocol witness table for SearchFieldConfigurationReader<A, B>;
}

uint64_t sub_187FFA05C()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for SearchTextTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187FFA10C);
}

uint64_t sub_187FFA10C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SearchTextTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187FFA18C);
}

uint64_t sub_187FFA18C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void *initializeBufferWithCopyOfBuffer for SearchFieldState(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
    *(_WORD *)(a1 + 2) = *((_WORD *)a2 + 1);
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    uint64_t v7 = a3[9];
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v10 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    unsigned int v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(_DWORD *)unsigned int v12 = *(_DWORD *)v13;
    v12[4] = *(unsigned char *)(v13 + 4);
  }
  return v4;
}

uint64_t initializeWithTake for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t sub_187FFA3EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 2) {
      return v4 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for AttributedString();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_187FFA494(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 1) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for AttributedString();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

unsigned char *sub_187FFA538@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 2;
  return result;
}

void sub_187FFA54C(Swift::Bool *a1)
{
}

void type metadata accessor for WritableKeyPath<SearchFieldState, Bool>(uint64_t a1)
{
}

void type metadata accessor for WritableKeyPath<SearchFieldState, SearchSuggestionsPlacement.Role>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for WritableKeyPath<SearchFieldState, AttributedString>()
{
  if (!lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, AttributedString>)
  {
    type metadata accessor for SearchFieldState(255);
    type metadata accessor for AttributedString();
    unint64_t v0 = type metadata accessor for WritableKeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, AttributedString>);
    }
  }
}

uint64_t sub_187FFA6CC@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 2);
  return result;
}

uint64_t sub_187FFA6D8(unsigned __int8 *a1)
{
  return SearchFieldState.hasSuggestions.setter(*a1);
}

void type metadata accessor for WritableKeyPath<SearchFieldState, Bool?>()
{
  if (!lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, Bool?>)
  {
    type metadata accessor for SearchFieldState(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>(255, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for WritableKeyPath();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WritableKeyPath<SearchFieldState, Bool?>);
    }
  }
}

ValueMetadata *type metadata accessor for SearchFocusUpdate()
{
  return &type metadata for SearchFocusUpdate;
}

uint64_t getEnumTagSinglePayload for SearchState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187FFA8A0);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for SearchState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x187FFA988);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchState()
{
  return &type metadata for SearchState;
}

uint64_t specialized Sequence._copyContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = (void *)result;
  if (!a2)
  {
    uint64_t v6 = 0;
    goto LABEL_11;
  }
  uint64_t v6 = a3;
  if (!a3)
  {
LABEL_11:
    *unsigned int v5 = a4;
    v5[1] = v6;
    return v6;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7)
    {
      uint64_t v8 = a2;
      unint64_t v9 = 0;
      uint64_t v10 = a4 + 32;
      uint64_t v11 = a3 - 1;
      while (v9 < *(void *)(a4 + 16))
      {
        uint64_t result = outlined init with copy of FocusStoreList.Item(v10, v8);
        if (v11 == v9) {
          goto LABEL_11;
        }
        v8 += 72;
        ++v9;
        v10 += 72;
        if (v7 == v9) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v6 = v7;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  if (a4 < 0)
  {
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    uint64_t v14 = a2;
    unint64_t v15 = result;
    char v16 = a3 & 1;
    uint64_t result = outlined copy of [A : B].Index._Variant<A, B>(result, a2, a3 & 1);
    if (a4)
    {
      uint64_t v17 = 0;
      char v31 = a7 & 1;
      char v18 = (a3 | a7) & 1;
      uint64_t v19 = a8 + 64;
      uint64_t v20 = a5;
      while (1)
      {
        if (v18) {
          goto LABEL_36;
        }
        if (v14 != a6)
        {
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        if (v15 == v20)
        {
          uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v20, v14, 0);
          *(void *)a9 = 0;
          *(void *)(a9 + 8) = 0;
          *(unsigned char *)(a9 + 16) = -1;
          return result;
        }
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_32;
        }
        uint64_t v21 = 1 << *(unsigned char *)(a8 + 32);
        if ((uint64_t)v15 >= v21) {
          goto LABEL_32;
        }
        unint64_t v22 = v15 >> 6;
        unint64_t v23 = *(void *)(v19 + 8 * (v15 >> 6));
        if (((v23 >> v15) & 1) == 0) {
          goto LABEL_33;
        }
        if (*(_DWORD *)(a8 + 36) != a6) {
          goto LABEL_34;
        }
        unint64_t v24 = v23 & (-2 << (v15 & 0x3F));
        if (v24)
        {
          uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v15, v14, 0);
          unint64_t v15 = __clz(__rbit64(v24)) | v15 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          unint64_t v25 = v22 + 1;
          unint64_t v26 = (unint64_t)(v21 + 63) >> 6;
          if (v22 + 1 < v26)
          {
            unint64_t v27 = *(void *)(v19 + 8 * v25);
            if (v27) {
              goto LABEL_16;
            }
            unint64_t v25 = v22 + 2;
            if (v22 + 2 >= v26)
            {
LABEL_26:
              uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v15, v14, 0);
              unint64_t v15 = v21;
            }
            else
            {
              unint64_t v27 = *(void *)(v19 + 8 * v25);
              if (!v27)
              {
                unint64_t v25 = v22 + 3;
                if (v22 + 3 >= v26) {
                  goto LABEL_26;
                }
                unint64_t v27 = *(void *)(v19 + 8 * v25);
                if (!v27)
                {
                  unint64_t v28 = v26 - 4;
                  while (v28 != v22)
                  {
                    unint64_t v27 = *(void *)(a8 + 96 + 8 * v22++);
                    if (v27)
                    {
                      unint64_t v25 = v22 + 3;
                      goto LABEL_16;
                    }
                  }
                  goto LABEL_26;
                }
              }
LABEL_16:
              uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v15, v14, 0);
              unint64_t v15 = __clz(__rbit64(v27)) | (v25 << 6);
            }
            uint64_t v20 = a5;
            goto LABEL_5;
          }
          uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v15, v14, 0);
          unint64_t v15 = v21;
        }
LABEL_5:
        ++v17;
        uint64_t v14 = a6;
        char v18 = v31;
        if (v17 == a4)
        {
          char v16 = 0;
          uint64_t v14 = a6;
          break;
        }
      }
    }
    *(void *)a9 = v15;
    *(void *)(a9 + 8) = v14;
    *(unsigned char *)(a9 + 16) = v16;
  }
  return result;
}

uint64_t (*FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v8 = *(void *)(a4 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  type metadata accessor for CollectionOfOne<Hashable>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  unint64_t v13 = (v10 + *(unsigned __int8 *)(*(void *)(v12 - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v12 - 8) + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v14 + v9, a1, a4);
  *(void *)(v14 + v10) = a2;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_2(a3, v14 + v13, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, v11);
  return partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:);
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t result)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = result;
  if (result < 0)
  {
LABEL_13:
    __break(1u);
  }
  else if (!(*v1 >> 62))
  {
    unint64_t v3 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_5:
  uint64_t v4 = v2;
  do
  {
    if (v3 <= v2 - 1)
    {
      __break(1u);
      goto LABEL_13;
    }
    --v4;
  }
  while (v4);
  unint64_t v5 = MEMORY[0x1E4FBC860];

  return specialized Array.replaceSubrange<A>(_:with:)(0, v2, v5);
}

int64_t specialized RangeReplaceableCollection.removeFirst(_:)(int64_t result)
{
  if (result)
  {
    if ((result & 0x8000000000000000) == 0)
    {
      int64_t v2 = result;
      while (*(void *)(*(void *)v1 + 16) > (unint64_t)(result - 1))
      {
        if (!--v2) {
          return specialized Array.replaceSubrange<A>(_:with:)(0, result);
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v30 = MEMORY[0x1E4FBC860];
  outlined init with copy of Binding<SearchFieldState>(a3, (uint64_t)&v24, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBBB08]);
  outlined init with take of Decodable & Encodable & Hashable(&v24, (uint64_t)v19);
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v15 = 0u;
  outlined assign with take of Hashable?((uint64_t)v19, (uint64_t)&v15, &lazy cache variable for type metadata for (Decodable & Encodable & Hashable)?, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable);
  long long v26 = v15;
  long long v27 = v16;
  long long v28 = v17;
  uint64_t i = v18;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_2((uint64_t)&v26, (uint64_t)&v24, &lazy cache variable for type metadata for (Decodable & Encodable & Hashable)?, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBB718]);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  for (uint64_t i = 0; v25; uint64_t i = 0)
  {
    outlined init with take of Decodable & Encodable & Hashable(&v24, (uint64_t)v19);
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    uint64_t v5 = v22;
    uint64_t v6 = v23;
    uint64_t v7 = __swift_project_boxed_opaque_existential_1(v19, v20);
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBBB08];
    type metadata accessor for CollectionOfOne<Hashable>(0, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBBB08]);
    uint64_t v10 = v9;
    uint64_t v11 = lazy protocol witness table accessor for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Decodable & Encodable & Hashable> and conformance CollectionOfOne<A>, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, v8);
    specialized append #1 <A><A1>(_:) in NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v7, &v30, v10, v3, v11, v4, v5, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_2((uint64_t)&v26, (uint64_t)&v24, &lazy cache variable for type metadata for (Decodable & Encodable & Hashable)?, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBB718]);
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
  }
  outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)&v26, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>.Iterator, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBBAF8]);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, v30);
}

long long *specialized RangeReplaceableCollection.init(repeating:count:)@<X0>(long long *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v13 = MEMORY[0x1E4FBC860];
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      *(void *)&v12[0] = a2;
      outlined init with take of Decodable & Encodable & Hashable(result, (uint64_t)v12 + 8);
      v10[0] = v12[0];
      v10[1] = v12[1];
      _OWORD v10[2] = v12[2];
      v10[3] = v12[3];
      uint64_t v11 = 0;
      uint64_t v4 = 0;
      while (1)
      {
        uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBC798];
        outlined init with copy of Binding<SearchFieldState>((uint64_t)v10, (uint64_t)v9, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBC798]);
        uint64_t v6 = v9[0];
        uint64_t result = (long long *)outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)v9, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, v5);
        if (v4 < 0 || v4 >= v6) {
          break;
        }
        if (v4 >= *(uint64_t *)&v10[0]) {
          goto LABEL_15;
        }
        uint64_t v11 = v4 + 1;
        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v7 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        outlined init with copy of Decodable & Encodable & Hashable((uint64_t)v10 + 8, (uint64_t)v9);
        specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v7, v7, (uint64_t)v9);
        outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)v9, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBBB08]);
        uint64_t v4 = v11;
        if (v11 == *(void *)&v10[0])
        {
          unint64_t v8 = v13;
          uint64_t result = (long long *)outlined destroy of IndexingIterator<Repeated<Decodable & Encodable & Hashable>>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>);
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t result = (long long *)__swift_destroy_boxed_opaque_existential_1((uint64_t)result);
    unint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_13:
    *a3 = v8;
  }
  return result;
}

{
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void v9[6];
  _OWORD v10[3];
  uint64_t v11;
  _OWORD v12[3];
  unint64_t v13;

  unint64_t v13 = MEMORY[0x1E4FBC860];
  if (a2)
  {
    if ((a2 & 0x8000000000000000) == 0)
    {
      *(void *)&v12[0] = a2;
      outlined init with take of OptionalBinaryInteger(result, (uint64_t)v12 + 8);
      v10[0] = v12[0];
      v10[1] = v12[1];
      _OWORD v10[2] = v12[2];
      uint64_t v11 = 0;
      uint64_t v4 = 0;
      while (1)
      {
        uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBC798];
        outlined init with copy of Binding<SearchFieldState>((uint64_t)v10, (uint64_t)v9, &lazy cache variable for type metadata for Repeated<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBC798]);
        uint64_t v6 = v9[0];
        uint64_t result = (long long *)outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)v9, &lazy cache variable for type metadata for Repeated<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, v5);
        if (v4 < 0 || v4 >= v6) {
          break;
        }
        if (v4 >= *(uint64_t *)&v10[0]) {
          goto LABEL_15;
        }
        uint64_t v11 = v4 + 1;
        if (v13 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v7 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        outlined init with copy of TableColumnList((uint64_t)v10 + 8, (uint64_t)v9);
        specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v7, v7, (uint64_t)v9);
        outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBBB08]);
        uint64_t v4 = v11;
        if (v11 == *(void *)&v10[0])
        {
          unint64_t v8 = v13;
          uint64_t result = (long long *)outlined destroy of IndexingIterator<Repeated<Decodable & Encodable & Hashable>>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Repeated<Hashable>>);
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    uint64_t result = (long long *)__swift_destroy_boxed_opaque_existential_1((uint64_t)result);
    unint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_13:
    *a3 = v8;
  }
  return result;
}

uint64_t specialized RangeReplaceableCollection.append(_:)(long long *a1)
{
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  outlined init with take of OptionalBinaryInteger(a1, (uint64_t)v5);
  specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v3, v3, (uint64_t)v5);
  return outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBBB08]);
}

{
  void *v1;
  uint64_t v3;
  unsigned char v5[56];

  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  outlined init with take of Decodable & Encodable & Hashable(a1, (uint64_t)v5);
  specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v3, v3, (uint64_t)v5);
  return outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)v5, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBBB08]);
}

uint64_t specialized RangeReplaceableCollection.remove(at:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = result;
  unint64_t v5 = *v2;
  if (!(v5 >> 62))
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_12;
  }
LABEL_3:
  if ((v5 & 0xC000000000000001) == 0)
  {
    if (v3 < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v3)
    {
      uint64_t v6 = *(void *)(v5 + 8 * v3 + 32);
      uint64_t v7 = swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v7 = MEMORY[0x18C117680](v3, v5);
  uint64_t v6 = v7;
LABEL_7:
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v6 + 120))(&v10, v7);
  uint64_t result = swift_release();
  if (v11)
  {
    outlined init with take of Decodable & Encodable & Hashable(&v10, (uint64_t)v12);
    uint64_t result = outlined init with take of Decodable & Encodable & Hashable(v12, a2);
    uint64_t v8 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      if (v8 >= v3) {
        return specialized Array.replaceSubrange<A>(_:with:)(v3, v8, MEMORY[0x1E4FBC860]);
      }
      goto LABEL_17;
    }
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(uint64_t result)
{
  uint64_t v2 = result;
  uint64_t v3 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v3 & 0xC000000000000001) == 0)
  {
    if (v2 < 0)
    {
      __break(1u);
    }
    else if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) > (unint64_t)v2)
    {
      uint64_t v4 = *(void *)(v3 + 8 * v2 + 32);
      uint64_t v5 = swift_retain();
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v5 = MEMORY[0x18C117680](v2, v3);
  uint64_t v4 = v5;
LABEL_7:
  (*(void (**)(uint64_t))(*(void *)v4 + 112))(v5);
  uint64_t result = swift_release();
  uint64_t v6 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 < v2)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  unint64_t v7 = MEMORY[0x1E4FBC860];

  return specialized Array.replaceSubrange<A>(_:with:)(v2, v6, v7);
}

unint64_t specialized RangeReplaceableCollection.remove(at:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = *(void *)(*(void *)v2 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v4 = result;
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 <= result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  outlined init with copy of FocusStoreList.Item(*(void *)v2 + 72 * result + 32, a2);

  return specialized Array.replaceSubrange<A>(_:with:)(v4, v4 + 1);
}

void specialized RangeReplaceableCollection.removeFirst()(uint64_t a1@<X8>)
{
  unint64_t v3 = *v1;
  if (!(*v1 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  specialized Collection.first.getter(v3, (uint64_t)&v5);
  if (v6)
  {
    outlined init with take of Decodable & Encodable & Hashable(&v5, a1);
    specialized RangeReplaceableCollection.removeFirst(_:)(1);
    return;
  }
LABEL_7:
  __break(1u);
}

{
  uint64_t v1;
  uint64_t vars8;

  if (*(void *)(*(void *)v1 + 16))
  {
    outlined init with copy of FocusStoreList.Item(*(void *)v1 + 32, a1);
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
  }
  else
  {
    __break(1u);
  }
}

void specialized RangeReplaceableCollection.removeFirst()()
{
  uint64_t v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v5)
  {
    __break(1u);
    goto LABEL_10;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_11:
    uint64_t v3 = MEMORY[0x18C117680](0, v1);
    uint64_t v2 = v3;
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    uint64_t v3 = swift_retain();
LABEL_6:
    (*(void (**)(uint64_t))(*(void *)v2 + 112))(v3);
    swift_release();
    specialized RangeReplaceableCollection.removeFirst(_:)(1);
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(long long *), uint64_t a2)
{
  unint64_t v6 = *(void *)v2;
  unint64_t v30 = MEMORY[0x1E4FBC860];
  unint64_t v7 = v6 >> 62;
  if (!(v6 >> 62))
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_26:
    unint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_27:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v2 = v21;
    return result;
  }
LABEL_25:
  swift_bridgeObjectRetain_n();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_26;
  }
LABEL_3:
  unint64_t v9 = 0;
  unint64_t v10 = v6 & 0xC000000000000001;
  uint64_t v11 = v6 & 0xFFFFFFFFFFFFFF8;
  uint64_t v23 = v2;
  unint64_t v24 = v6 & 0xC000000000000001;
  uint64_t v25 = v6 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (v10)
    {
      uint64_t v12 = MEMORY[0x18C117680](v9, v6);
      uint64_t v2 = v12;
    }
    else
    {
      if (v9 >= *(void *)(v11 + 16))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v2 = *(void *)(v6 + 8 * v9 + 32);
      uint64_t v12 = swift_retain();
    }
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v2 + 120))(&v26, v12);
    uint64_t result = swift_release();
    if (!v27) {
      break;
    }
    outlined init with take of Decodable & Encodable & Hashable(&v26, (uint64_t)v28);
    outlined init with take of Decodable & Encodable & Hashable(v28, (uint64_t)v29);
    unint64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_24;
    }
    outlined init with take of Decodable & Encodable & Hashable(v29, (uint64_t)v28);
    char v15 = a1(v28);
    if (v3)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    if (v15)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
    }
    else
    {
      unint64_t v16 = v6;
      unint64_t v17 = v7;
      uint64_t v18 = a1;
      uint64_t v19 = a2;
      if (v30 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      outlined init with take of Decodable & Encodable & Hashable(v28, (uint64_t)&v26);
      specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v20, v20, (uint64_t)&v26);
      outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)&v26, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBBB08]);
      a2 = v19;
      a1 = v18;
      unint64_t v7 = v17;
      unint64_t v6 = v16;
      unint64_t v10 = v24;
    }
    uint64_t v11 = v25;
    if (v7)
    {
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v11 = v25;
    }
    else
    {
      uint64_t v2 = *(void *)(v25 + 16);
    }
    ++v9;
    if (v14 == v2)
    {
      unint64_t v21 = v30;
      uint64_t v2 = v23;
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(long long *);
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned char v26[40];
  long long v27[2];
  long long v28[2];
  unint64_t v29;

  unint64_t v6 = *(void *)v2;
  char v29 = MEMORY[0x1E4FBC860];
  unint64_t v7 = v6 >> 62;
  if (v6 >> 62) {
    goto LABEL_24;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v8)
  {
    while (1)
    {
      unint64_t v9 = 0;
      unint64_t v10 = v6 & 0xC000000000000001;
      uint64_t v11 = v6 & 0xFFFFFFFFFFFFFF8;
      uint64_t v23 = v2;
      unint64_t v24 = v6 & 0xC000000000000001;
      uint64_t v25 = v6 & 0xFFFFFFFFFFFFFF8;
      while (v10)
      {
        uint64_t v12 = MEMORY[0x18C117680](v9, v6);
        uint64_t v2 = v12;
LABEL_7:
        (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v2 + 112))(v28, v12);
        swift_release();
        unint64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_23;
        }
        outlined init with take of OptionalBinaryInteger(v28, (uint64_t)v27);
        unint64_t v14 = a1(v27);
        if (v3)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        if (v14)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        }
        else
        {
          char v15 = v6;
          unint64_t v16 = v7;
          unint64_t v17 = a1;
          uint64_t v18 = a2;
          if (v29 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v19 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          outlined init with take of OptionalBinaryInteger(v27, (uint64_t)v26);
          specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v19, v19, (uint64_t)v26);
          outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBBB08]);
          a2 = v18;
          a1 = v17;
          unint64_t v7 = v16;
          unint64_t v6 = v15;
          unint64_t v10 = v24;
        }
        uint64_t v11 = v25;
        if (v7)
        {
          swift_bridgeObjectRetain();
          uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          uint64_t v11 = v25;
        }
        else
        {
          uint64_t v2 = *(void *)(v25 + 16);
        }
        ++v9;
        if (v13 == v2)
        {
          unint64_t v21 = v29;
          uint64_t v2 = v23;
          goto LABEL_26;
        }
      }
      if (v9 < *(void *)(v11 + 16)) {
        break;
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain_n();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v22) {
        goto LABEL_25;
      }
    }
    uint64_t v2 = *(void *)(v6 + 8 * v9 + 32);
    uint64_t v12 = swift_retain();
    goto LABEL_7;
  }
LABEL_25:
  unint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_26:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v2 = v21;
  return result;
}

uint64_t specialized RangeReplaceableCollection.removeAll(where:)(uint64_t (*a1)(unsigned char *))
{
  uint64_t v4 = *v1;
  uint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of FocusStoreList.Item(v6, (uint64_t)v15);
      char v9 = a1(v15);
      if (v2) {
        break;
      }
      if (v9)
      {
        outlined destroy of FocusStoreList.Item((uint64_t)v15);
      }
      else
      {
        uint64_t v7 = *(void *)(v16 + 16);
        outlined init with take of FocusStoreList.Item((uint64_t)v15, (uint64_t)v14);
        uint64_t v8 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4FBBB08];
        _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_1((uint64_t)v14, (uint64_t)v13, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, MEMORY[0x1E4FBBB08]);
        specialized Array.replaceSubrange<A>(_:with:)(v7, v7, (uint64_t)v13);
        _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_2((uint64_t)v14, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, v8);
      }
      v6 += 72;
      if (!--v5)
      {
        uint64_t v1 = v12;
        uint64_t v10 = v16;
        goto LABEL_10;
      }
    }
    outlined destroy of FocusStoreList.Item((uint64_t)v15);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v10;
  }
  return result;
}

uint64_t specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v21 = MEMORY[0x1E4FBC860];
  outlined init with copy of Binding<SearchFieldState>(a3, (uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBBB08]);
  outlined init with take of OptionalBinaryInteger(&v16, (uint64_t)v14);
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  outlined assign with take of Hashable?((uint64_t)v14, (uint64_t)&v11, &lazy cache variable for type metadata for Hashable?, (uint64_t (*)(uint64_t))type metadata accessor for Hashable);
  long long v18 = v11;
  long long v19 = v12;
  uint64_t i = v13;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_2((uint64_t)&v18, (uint64_t)&v16, &lazy cache variable for type metadata for Hashable?, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBB718]);
  long long v18 = 0u;
  long long v19 = 0u;
  for (uint64_t i = 0; v17; uint64_t i = 0)
  {
    outlined init with take of OptionalBinaryInteger(&v16, (uint64_t)v14);
    uint64_t v4 = v15;
    uint64_t v5 = __swift_project_boxed_opaque_existential_1(v14, v15);
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBBB08];
    type metadata accessor for CollectionOfOne<Hashable>(0, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBBB08]);
    uint64_t v8 = v7;
    lazy protocol witness table accessor for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>(&lazy protocol witness table cache variable for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>, v6);
    specialized append #1 <A><A1>(_:) in NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)((uint64_t)v5, &v21, v8, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_2((uint64_t)&v18, (uint64_t)&v16, &lazy cache variable for type metadata for Hashable?, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBB718]);
    long long v18 = 0u;
    long long v19 = 0u;
  }
  outlined destroy of Repeated<Decodable & Encodable & Hashable>((uint64_t)&v18, &lazy cache variable for type metadata for CollectionOfOne<Hashable>.Iterator, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBBAF8]);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, v21);
}

uint64_t FocusStoreList.replaceSubrange<A>(_:with:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v4, v5, v1);
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for [FocusStoreList.Item], MEMORY[0x1E4FBB320]);
  return Array.replaceSubrange<A>(_:with:)();
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance FocusStoreList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  FocusStoreList.replaceSubrange<A>(_:with:)(*a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance FocusStoreList@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RangeReplaceableCollection.init(repeating:count:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance FocusStoreList(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  outlined init with take of FocusStoreList.Item(a1, (uint64_t)v6);
  uint64_t v3 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4FBBB08];
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_1((uint64_t)v6, (uint64_t)v5, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, MEMORY[0x1E4FBBB08]);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v5);
  return _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_2((uint64_t)v6, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, v3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance FocusStoreList(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  outlined init with take of FocusStoreList.Item(a1, (uint64_t)v6);
  uint64_t v3 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4FBBB08];
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_1((uint64_t)v6, (uint64_t)v5, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, MEMORY[0x1E4FBBB08]);
  specialized Array.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v5);
  return _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_2((uint64_t)v6, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, v3);
}

unint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance FocusStoreList@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1, a2);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance FocusStoreList(uint64_t *a1)
{
  return specialized Array.replaceSubrange<A>(_:with:)(*a1, a1[1]);
}

double protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance FocusStoreList@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance FocusStoreList(char a1)
{
  if (a1)
  {
    int64_t v2 = *(void *)(*(void *)v1 + 16);
    return specialized Array.replaceSubrange<A>(_:with:)(0, v2);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance FocusStoreList(uint64_t (*a1)(unsigned char *))
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1);
}

void protocol witness for Collection.endIndex.getter in conformance FocusStoreList(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance FocusStoreList(uint64_t a1, void *a2))(void, void, void, void)
{
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(void *)(*(void *)v2 + 16))
  {
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance FocusStoreList@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (v4 = result[1], uint64_t result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t protocol witness for Collection.indices.getter in conformance FocusStoreList@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *a1 = *(void *)v1;
  a1[1] = 0;
  a1[2] = v2;
  return swift_bridgeObjectRetain();
}

BOOL protocol witness for Collection.isEmpty.getter in conformance FocusStoreList()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance FocusStoreList@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized Collection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance FocusStoreList()
{
  return *(void *)(*(void *)v0 + 16);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance FocusStoreList()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance FocusStoreList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in FocusStoreList()
{
  return lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<FocusStoreList>, MEMORY[0x1E4FBBC18]);
}

unint64_t lazy protocol witness table accessor for type FocusStoreList and conformance FocusStoreList()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList;
  if (!lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList;
  if (!lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList;
  if (!lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreList and conformance FocusStoreList);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in FocusStoreList()
{
  return lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type DefaultIndices<FocusStoreList> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<FocusStoreList>, MEMORY[0x1E4FBAF10]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<FocusStoreList>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in FocusStoreList()
{
  return lazy protocol witness table accessor for type IndexingIterator<FocusStoreList> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<FocusStoreList>, MEMORY[0x1E4FBC320]);
}

void type metadata accessor for IndexingIterator<FocusStoreList>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type FocusStoreList and conformance FocusStoreList();
    unint64_t v7 = a3(a1, &type metadata for FocusStoreList, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Slice<FocusStoreList> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance <> Slice<A>)
  {
    type metadata accessor for IndexingIterator<FocusStoreList>(255, &lazy cache variable for type metadata for Slice<FocusStoreList>, MEMORY[0x1E4FBC320]);
    lazy protocol witness table accessor for type FocusStoreList and conformance FocusStoreList();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<FocusStoreList> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a2;
  uint64_t v23 = a4;
  uint64_t v24 = a1;
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  type metadata accessor for CollectionOfOne<Hashable>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for FocusStore.Entry();
  uint64_t v16 = type metadata accessor for Optional();
  double v17 = MEMORY[0x1F4188790](v16 - 8);
  long long v19 = (char *)&v21 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v22, a5, v17);
  outlined init with copy of Binding<SearchFieldState>(v23, (uint64_t)v10, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, v7);
  FocusStore.Entry.init(value:focusScopes:searchFieldState:)((uint64_t)v14, a3, (uint64_t)v10, a5, (uint64_t)v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v19, 0, 1, v15);
  type metadata accessor for FocusStore.Key();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  return PropertyList.subscript.setter();
}

uint64_t specialized Collection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  if (a2)
  {
    unint64_t v3 = a3 - result;
    if (a3 - result >= (unint64_t)(a2 - 1)) {
      unint64_t v3 = a2 - 1;
    }
    if (v3 >= (result ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v3 = result ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    unint64_t v4 = v3 + 1;
    if (v4 >= 5)
    {
      uint64_t v7 = v4 & 3;
      if ((v4 & 3) == 0) {
        uint64_t v7 = 4;
      }
      unint64_t v5 = v4 - v7;
      int64x2_t v8 = 0uLL;
      int64x2_t v9 = (int64x2_t)(unint64_t)result;
      int64x2_t v10 = vdupq_n_s64(1uLL);
      unint64_t v11 = v5;
      do
      {
        int64x2_t v8 = vaddq_s64(v8, v10);
        int64x2_t v9 = vaddq_s64(v9, v10);
        v11 -= 4;
      }
      while (v11);
      uint64_t v6 = vaddvq_s64(vaddq_s64(vzip2q_s64(v9, v8), vzip1q_s64(v9, v8)));
    }
    else
    {
      unint64_t v5 = 0;
      uint64_t v6 = result;
    }
    uint64_t v12 = v5 + result - 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v13 = v5 + result - a3;
    uint64_t v14 = a2 - v5;
    unint64_t result = v6;
    while (1)
    {
      if (!v13) {
        return 0;
      }
      if (!v12) {
        break;
      }
      ++result;
      ++v12;
      ++v13;
      if (!--v14) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t specialized static FocusStoreList.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v9);
  uint64_t v3 = *(void *)(v9[0] + 16);
  if (v3)
  {
    uint64_t v4 = v9[0] + 32;
    do
    {
      uint64_t v5 = *(void *)(*(void *)a1 + 16);
      outlined init with copy of FocusStoreList.Item(v4, (uint64_t)v9);
      uint64_t v6 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4FBBB08];
      _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_1((uint64_t)v9, (uint64_t)v8, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, MEMORY[0x1E4FBBB08]);
      specialized Array.replaceSubrange<A>(_:with:)(v5, v5, (uint64_t)v8);
      _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_2((uint64_t)v9, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, v6);
      v4 += 72;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized RangeReplaceableCollection.init(repeating:count:)(uint64_t result, uint64_t a2)
{
  uint64_t v15 = MEMORY[0x1E4FBC860];
  if (!a2)
  {
    outlined destroy of FocusStoreList.Item(result);
    return MEMORY[0x1E4FBC860];
  }
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = a2;
    outlined init with take of FocusStoreList.Item(result, (uint64_t)&v14);
    outlined init with take of Repeated<FocusStoreList.Item>((uint64_t)&v13, (uint64_t)&v10);
    uint64_t v12 = 0;
    if (v10)
    {
      uint64_t v2 = 0;
      while (1)
      {
        uint64_t v3 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4FBC798];
        _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_1((uint64_t)&v10, (uint64_t)v9, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, MEMORY[0x1E4FBC798]);
        uint64_t v4 = v9[0];
        unint64_t result = _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_2((uint64_t)v9, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, v3);
        if (v2 < 0 || v2 >= v4) {
          break;
        }
        if (v2 >= v10) {
          goto LABEL_15;
        }
        uint64_t v12 = v2 + 1;
        uint64_t v5 = *(void *)(v15 + 16);
        outlined init with copy of FocusStoreList.Item((uint64_t)&v11, (uint64_t)v9);
        uint64_t v6 = (uint64_t (*)(void, ValueMetadata *))MEMORY[0x1E4FBBB08];
        _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_1((uint64_t)v9, (uint64_t)v8, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, MEMORY[0x1E4FBBB08]);
        specialized Array.replaceSubrange<A>(_:with:)(v5, v5, (uint64_t)v8);
        _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_2((uint64_t)v9, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, v6);
        uint64_t v2 = v12;
        if (v12 == v10)
        {
          uint64_t v7 = v15;
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    uint64_t v7 = MEMORY[0x1E4FBC860];
LABEL_12:
    outlined destroy of IndexingIterator<Repeated<Decodable & Encodable & Hashable>>((uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for IndexingIterator<Repeated<FocusStoreList.Item>>);
    return v7;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t outlined init with take of Repeated<FocusStoreList.Item>(uint64_t a1, uint64_t a2)
{
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, MEMORY[0x1E4FBC798]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for IndexingIterator<Repeated<FocusStoreList.Item>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Repeated<FocusStoreList.Item>>)
  {
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(255, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, MEMORY[0x1E4FBC798]);
    lazy protocol witness table accessor for type Repeated<FocusStoreList.Item> and conformance Repeated<A>();
    unint64_t v0 = type metadata accessor for IndexingIterator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Repeated<FocusStoreList.Item>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Repeated<FocusStoreList.Item> and conformance Repeated<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Repeated<FocusStoreList.Item> and conformance Repeated<A>;
  if (!lazy protocol witness table cache variable for type Repeated<FocusStoreList.Item> and conformance Repeated<A>)
  {
    _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(255, &lazy cache variable for type metadata for Repeated<FocusStoreList.Item>, MEMORY[0x1E4FBC798]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Repeated<FocusStoreList.Item> and conformance Repeated<A>);
  }
  return result;
}

uint64_t outlined destroy of Repeated<Decodable & Encodable & Hashable>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for CollectionOfOne<Hashable>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t type metadata accessor for Hashable()
{
  unint64_t result = lazy cache variable for type metadata for Hashable;
  if (!lazy cache variable for type metadata for Hashable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Hashable);
  }
  return result;
}

uint64_t outlined destroy of IndexingIterator<Repeated<Decodable & Encodable & Hashable>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for IndexingIterator<Repeated<Hashable>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Repeated<Hashable>>)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBC798];
    type metadata accessor for CollectionOfOne<Hashable>(255, &lazy cache variable for type metadata for Repeated<Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, MEMORY[0x1E4FBC798]);
    lazy protocol witness table accessor for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>(&lazy protocol witness table cache variable for type Repeated<Hashable> and conformance Repeated<A>, &lazy cache variable for type metadata for Repeated<Hashable>, v0);
    unint64_t v1 = type metadata accessor for IndexingIterator();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Repeated<Hashable>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type CollectionOfOne<Hashable> and conformance CollectionOfOne<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CollectionOfOne<Hashable>(255, a2, (uint64_t (*)(uint64_t))type metadata accessor for Hashable, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined assign with take of Hashable?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for CollectionOfOne<Hashable>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CollectionOfOne<Hashable>(255, a2, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of Decodable & Encodable & Hashable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  uint64_t v4 = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>()
{
  if (!lazy cache variable for type metadata for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBC798];
    type metadata accessor for CollectionOfOne<Hashable>(255, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable, MEMORY[0x1E4FBC798]);
    lazy protocol witness table accessor for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>(&lazy protocol witness table cache variable for type Repeated<Decodable & Encodable & Hashable> and conformance Repeated<A>, &lazy cache variable for type metadata for Repeated<Decodable & Encodable & Hashable>, v0);
    unint64_t v1 = type metadata accessor for IndexingIterator();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<Repeated<Decodable & Encodable & Hashable>>);
    }
  }
}

void type metadata accessor for CollectionOfOne<Hashable>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_187FFDA00()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for CollectionOfOne<Hashable>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = v5 - 8;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v4 + v7 + 8) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v9 = *(int *)(v6 + 40);
  uint64_t v10 = v0 + v8 + v9 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v11 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  unint64_t v5 = (*(void *)(*(void *)(v3 - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for CollectionOfOne<Hashable>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = v1
     + ((v5 + *(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80));

  return closure #1 in FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)(a1, v1 + v4, v7, v8, v3);
}

uint64_t sub_187FFDCF4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for FocusState.Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  unint64_t v5 = (v3 + *(void *)(v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();
  unint64_t v7 = v6 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v8 = *(void (**)(unint64_t, uint64_t))(v4 + 8);
  v8(v7, v1);
  v8(v0 + v5, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusStateBindingUpdateAction.init<A>(binding:value:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for FocusState.Binding();
  return specialized FocusState.Binding.binding.setter(v0+ ((((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80))+ *(void *)(*(void *)(v2 - 8) + 64)+ *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v2);
}

ValueMetadata *type metadata accessor for FocusStoreList.Key()
{
  return &type metadata for FocusStoreList.Key;
}

uint64_t assignWithCopy for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v7;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
LABEL_8:
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v7;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  swift_release();
LABEL_8:
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusStoreList.Item(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusStoreList.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusStoreList.Item()
{
  return &type metadata for FocusStoreList.Item;
}

ValueMetadata *type metadata accessor for FocusStoreUpdateAction()
{
  return &type metadata for FocusStoreUpdateAction;
}

ValueMetadata *type metadata accessor for FocusStateBindingUpdateAction()
{
  return &type metadata for FocusStateBindingUpdateAction;
}

uint64_t sub_187FFE17C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187FFE1B4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187FFE1EC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t static View.makeMapKitView(inputs:_:)(uint64_t *a1, void (*a2)(uint64_t *, uint64_t *))
{
  uint64_t v2 = *a1;
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  int v5 = *((_DWORD *)a1 + 6);
  int v6 = *((_DWORD *)a1 + 7);
  int v7 = *((_DWORD *)a1 + 8);
  int v8 = *((_DWORD *)a1 + 9);
  uint64_t v9 = a1[5];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  uint64_t v12 = v2;
  int v13 = v3;
  uint64_t v14 = v4;
  int v15 = v5;
  int v16 = v6;
  int v17 = v7;
  int v18 = v8;
  uint64_t v19 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  a2(&v12, &v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t MapKitViewTraitCollection.updateTraitKeysWithForEach<A>(contentID:id:offset:isConstant:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return ViewTraitCollection.setTag<A>(for:value:)();
  }
  type metadata accessor for TagValueTraitKey<Int>();
  lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>();
  return ViewTraitCollection.subscript.setter();
}

void type metadata accessor for TagValueTraitKey<Int>()
{
  if (!lazy cache variable for type metadata for TagValueTraitKey<Int>)
  {
    unint64_t v0 = type metadata accessor for TagValueTraitKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TagValueTraitKey<Int>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>;
  if (!lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>)
  {
    type metadata accessor for TagValueTraitKey<Int>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>);
  }
  return result;
}

uint64_t CGSize.withinRange(axes:rangeCosine:)(unsigned __int8 *a1, CGFloat a2)
{
  unsigned int v3 = *a1;
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  if (v3 == static _EventDirections.all) {
    return 1;
  }
  CGSize v4 = CGSize.normalized()();
  if ((v3 & 1) != 0 && -v4.width > a2) {
    return 1;
  }
  if ((v3 & 2) != 0 && v4.width > a2 || (v3 & 4) != 0 && -v4.height > a2) {
    return 1;
  }
  else {
    return (v4.height > a2) & (v3 >> 3);
  }
}

void *static _EventDirections.all.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for all, &static _EventDirections.all, a1);
}

uint64_t _EventDirections.rawValue.getter()
{
  return *v0;
}

uint64_t _EventDirections.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static _EventDirections.left.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static _EventDirections.right.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static _EventDirections.up.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static _EventDirections.down.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

void *static _EventDirections.horizontal.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for horizontal, &static _EventDirections.horizontal, a1);
}

void *static _EventDirections.vertical.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for vertical, static _EventDirections.vertical, a1);
}

unint64_t lazy protocol witness table accessor for type _EventDirections and conformance _EventDirections()
{
  unint64_t result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections;
  if (!lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EventDirections and conformance _EventDirections);
  }
  return result;
}

void View.sidebarState(isCollapsed:)()
{
}

void View.fixedSidebar(_:)()
{
}

void View.resizesContainerOnCollapse(_:)()
{
}

unint64_t lazy protocol witness table accessor for type MagnifyEvent and conformance MagnifyEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent;
  if (!lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent;
  if (!lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagnifyEvent and conformance MagnifyEvent);
  }
  return result;
}

__n128 (*protocol witness for SpatialEventType.location.modify in conformance MagnifyEvent(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  return protocol witness for SpatialEventType.location.modify in conformance MagnifyEvent;
}

__n128 protocol witness for SpatialEventType.location.modify in conformance MagnifyEvent(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 24) = *a1;
  return result;
}

uint64_t protocol witness for EventType.init(_:) in conformance MagnifyEvent@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 24) = v7;
    long long v3 = v8;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
    long long v3 = 0uLL;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  *(_OWORD *)(a1 + 40) = v3;
  return result;
}

uint64_t protocol witness for HitTestableEventType.hitTestLocation.getter in conformance MagnifyEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type MagnifyEvent and conformance MagnifyEvent();

  return MEMORY[0x1F40FFB78](a1, a2, v4);
}

uint64_t protocol witness for HitTestableEventType.hitTestRadius.getter in conformance MagnifyEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type MagnifyEvent and conformance MagnifyEvent();

  return MEMORY[0x1F40FFB70](a1, a2, v4);
}

uint64_t initializeWithCopy for MagnifyEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MagnifyEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for MagnifyEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for MagnifyEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MagnifyEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MagnifyEvent()
{
  return &type metadata for MagnifyEvent;
}

BOOL specialized static MagnifyEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  double v8 = *(double *)(a1 + 24);
  double v7 = *(double *)(a1 + 32);
  double v10 = *(double *)(a1 + 40);
  double v9 = *(double *)(a1 + 48);
  uint64_t v11 = *(void *)(a2 + 16);
  double v13 = *(double *)(a2 + 24);
  double v12 = *(double *)(a2 + 32);
  double v14 = *(double *)(a2 + 40);
  if (!v6)
  {
    if (!v11)
    {
      if (v8 != v13 || v7 != v12 || v10 != v14) {
        return 0;
      }
      return v9 == *(double *)(a2 + 48);
    }
    swift_release();
    return 0;
  }
  if (!v11)
  {
    swift_retain();
    swift_release();
    return 0;
  }
  uint64_t v3 = 0;
  if (v6 == v11)
  {
    BOOL v15 = v8 == v13 && v7 == v12;
    if (v15 && v10 == v14) {
      return v9 == *(double *)(a2 + 48);
    }
  }
  return v3;
}

uint64_t type metadata completion function for OptionButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for OptionButton(void *a1, void *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) != 0 && (v6 & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    uint64_t v9 = *a2;
    *int v4 = *a2;
    int v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    unint64_t v10 = ((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)(v11 + 16);
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(void *)(v10 + 16) = v12;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for OptionButton(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(unsigned char *)uint64_t v7 = *(unsigned char *)v8;
  v7 &= 0xFFFFFFFFFFFFFFF8;
  v8 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 16);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithTake for OptionButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(_OWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionButton(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187FFF30CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for OptionButton(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  if ((v9 & 0xFFFFFFF8) == 0xFFFFFFE8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if ((v9 & 0xFFFFFFF8) == 0xFFFFFFE8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if ((v9 & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, (v9 & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187FFF4F8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (unint64_t)&a1[v9] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            *(void *)(v18 + 16) = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *(void *)(v18 + 8) = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for OptionButton()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in OptionButton<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187FFF57C()
{
  return MEMORY[0x1E4F417F0];
}

void EnvironmentValues.defaultWheelPickerItemHeight.getter()
{
}

void EnvironmentValues.defaultWheelPickerItemHeight.setter()
{
}

void EnvironmentValues.defaultWheelPickerItemHeight.modify()
{
}

void View.defaultWheelPickerItemHeight(_:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void sub_187FFF5D8()
{
}

void sub_187FFF600()
{
}

uint64_t sub_187FFF614()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>);
    }
  }
}

uint64_t View.platformNavigationPresentationBridgingEnabled(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.platformNavigationPresentationBridgingEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_187FFF87C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.platformNavigationPresentationBridgingEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187FFF8BC()
{
  return EnvironmentValues.platformNavigationPresentationBridgingEnabled.setter();
}

uint64_t EnvironmentValues.platformNavigationPresentationBridgingEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PlatformNavigationPresentationBridgingEnabledKey>);
    }
  }
}

ValueMetadata *type metadata accessor for PlatformNavigationPresentationBridgingEnabledKey()
{
  return &type metadata for PlatformNavigationPresentationBridgingEnabledKey;
}

ValueMetadata *type metadata accessor for ScrollEventConverter()
{
  return &type metadata for ScrollEventConverter;
}

unint64_t ScrollEventConverter.convert(_:in:)(unint64_t a1, void *a2)
{
  id v5 = objc_msgSend((id)a1, sel_phase);
  if ((unint64_t)v5 > 1)
  {
    unint64_t v8 = (unint64_t)v5;
    uint64_t v9 = *(unsigned int *)v2;
    type metadata accessor for (UIScrollEvent, PanEvent)();
    uint64_t v11 = v10;
    unint64_t v12 = v9 ^ a1;
    objc_msgSend((id)a1, sel__adjustedAcceleratedDeltaInView_, a2);
    double v15 = v14 + v2[2];
    v2[1] = v2[1] + v13;
    v2[2] = v15;
    id v16 = (id)a1;
    id v17 = a2;
    PanEvent.init(_:accumulatedScrollDelta:in:)(v16, a2, (uint64_t)v32);
    uint64_t v18 = v32[0];
    uint64_t v19 = v32[1];
    uint64_t v20 = v32[2];
    uint64_t v21 = v32[3];
    char v22 = v33;
    uint64_t v23 = v34;
    uint64_t v24 = v35;
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    uint64_t v27 = v38;
    uint64_t v31 = v39;
    char v28 = v40;
    if ((v8 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      *(_DWORD *)unsigned __int8 v2 = v9 + 1;
      v2[1] = 0.0;
      v2[2] = 0.0;
    }
    type metadata accessor for _ContiguousArrayStorage<(EventID, PanEvent)>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    *(void *)(inited + 32) = v11;
    *(void *)(inited + 40) = v12;
    *(void *)(inited + 48) = v18;
    *(void *)(inited + 56) = v19;
    *(void *)(inited + 64) = v20;
    *(void *)(inited + 72) = v21;
    *(unsigned char *)(inited + 80) = v22;
    *(void *)(inited + 88) = v23;
    *(void *)(inited + 96) = v24;
    *(void *)(inited + 104) = v25;
    *(void *)(inited + 112) = v26;
    *(void *)(inited + 120) = v27;
    *(void *)(inited + 128) = v31;
    *(unsigned char *)(inited + 136) = v28;
    unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for (EventID, PanEvent)();
    swift_arrayDestroy();
    return v30;
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
    return specialized Dictionary.init(dictionaryLiteral:)(v6);
  }
}

void PanEvent.init(_:accumulatedScrollDelta:in:)(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  objc_msgSend(a1, sel_locationInView_, a2);
  objc_msgSend(a1, sel_timestamp);
  objc_msgSend(a1, sel_phase);
  PanEvent.init(globalLocation:phase:timestamp:globalTranslation:touchType:)();
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  *(unsigned char *)(a3 + 32) = v10;
  *(void *)(a3 + 40) = v11;
  *(void *)(a3 + 48) = v12;
  *(void *)(a3 + 56) = v13;
  *(void *)(a3 + 64) = v14;
  *(void *)(a3 + 72) = v15;
  *(void *)(a3 + 80) = v16;
  *(unsigned char *)(a3 + 88) = v17;
  PanEvent.globalTranslation.getter();
  PanEvent.translation.setter();

  swift_release();
  *(void *)(a3 + 48) = 0;
}

void type metadata accessor for (UIScrollEvent, PanEvent)()
{
  if (!lazy cache variable for type metadata for (UIScrollEvent, PanEvent))
  {
    type metadata accessor for UIScrollEvent();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIScrollEvent, PanEvent));
    }
  }
}

unint64_t type metadata accessor for UIScrollEvent()
{
  unint64_t result = lazy cache variable for type metadata for UIScrollEvent;
  if (!lazy cache variable for type metadata for UIScrollEvent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIScrollEvent);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(EventID, PanEvent)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, PanEvent)>)
  {
    type metadata accessor for (EventID, PanEvent)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, PanEvent)>);
    }
  }
}

void type metadata accessor for (EventID, PanEvent)()
{
  if (!lazy cache variable for type metadata for (EventID, PanEvent))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (EventID, PanEvent));
    }
  }
}

uint64_t getEnumTagSinglePayload for PlatformSliderStyle.ValueLabel(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PlatformSliderStyle.ValueLabel(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188000290);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for PlatformSliderStyle.ValueLabel()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for PlatformSliderStyle.SymbolEffectState()
{
  return &type metadata for PlatformSliderStyle.SymbolEffectState;
}

uint64_t associated type witness table accessor for View.Body : View in PlatformSliderStyle.ValueLabel<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformSliderStyle.ValueLabel.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v1);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void @objc PresentationHostingControllerBase._remoteSheet.getter()
{
}

id PresentationHostingControllerBase.__allocating_init(rootView:)(objc_class *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  id v5 = specialized UIHostingController.init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*((void *)v2 + 120) - 8) + 8))(a1);
  return v5;
}

id PresentationHostingControllerBase.__allocating_init(coder:rootView:)(void *a1, objc_class *a2)
{
  id v5 = objc_allocWithZone(v2);
  return PresentationHostingControllerBase.init(coder:rootView:)(a1, a2);
}

id PresentationHostingControllerBase.init(coder:rootView:)(void *a1, objc_class *a2)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v2;
  id v6 = specialized UIHostingController.init(coder:rootView:)((uint64_t)a1, a2);

  uint64_t v7 = *(void *)(v5 + 960);
  size_t v8 = *(void (**)(objc_class *, uint64_t))(*(void *)(v7 - 8) + 8);
  id v9 = v6;
  v8(a2, v7);
  if (v6) {

  }
  return v6;
}

id PresentationHostingControllerBase.init(coder:)(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for PresentationHostingControllerBase();
  id v3 = objc_msgSendSuper2(&v5, sel_initWithCoder_, a1);

  return v3;
}

id @objc PresentationHostingControllerBase.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return PresentationHostingControllerBase.init(coder:)(a3);
}

uint64_t PresentationHostingControllerBase.__allocating_init(hostingView:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return UIHostingController.init(hostingView:)(a1);
}

id PresentationHostingControllerBase.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresentationHostingControllerBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

double @objc PresentationHostingController.preferredContentSize.getter(void *a1)
{
  id v1 = a1;
  PresentationHostingController.preferredContentSize.getter();
  double v3 = v2;

  return v3;
}

id PresentationHostingController.preferredContentSize.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_preferredContentSize);
}

void @objc PresentationHostingController.preferredContentSize.setter(void *a1, double a2, double a3)
{
  id v5 = a1;
  PresentationHostingController.preferredContentSize.setter(a2, a3);
}

uint64_t PresentationHostingController.preferredContentSize.setter(double a1, double a2)
{
  id v5 = self;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  *(double *)(v6 + 24) = a1;
  *(double *)(v6 + 32) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in PresentationHostingController.preferredContentSize.setter;
  *(void *)(v7 + 24) = v6;
  _OWORD v12[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v12[5] = v7;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed () -> ();
  long long v12[3] = &block_descriptor_69;
  size_t v8 = _Block_copy(v12);
  id v9 = v2;
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_performWithoutAnimation_, v8);
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

id closure #1 in PresentationHostingController.preferredContentSize.setter(void *a1, double a2, double a3)
{
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for PresentationHostingController();
  return objc_msgSendSuper2(&v6, sel_setPreferredContentSize_, a2, a3);
}

uint64_t closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2)
{
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  _ProposedSize.init(width:height:)();
  swift_beginAccess();
  type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
  ViewGraphGeometryObservers.stopObserving(proposal:)();
  swift_endAccess();
  uint64_t result = swift_release();
  uint64_t v4 = a2 + direct field offset for PresentationHostingController.observedSize;
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = 1;
  return result;
}

uint64_t PresentationHostingController.shouldUsePresentationSizing.getter()
{
  UIHostingController.sizingOptions.getter(v7);
  if (!v7[0]
    && (id v3 = objc_msgSend(v0, sel_sheetPresentationController)) != 0
    && (uint64_t v4 = v3, v5 = objc_msgSend(v3, sel_presentationStyle), v4, v5 == (id)2))
  {
    objc_super v6 = &v0[direct field offset for PresentationHostingController.lastPresentationOptions];
    swift_beginAccess();
    if (*(void *)v6) {
      char v1 = v6[136] ^ 1;
    }
    else {
      char v1 = 1;
    }
  }
  else
  {
    char v1 = 0;
  }
  return v1 & 1;
}

void closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x18C119DF0](v7);
  if (!v8) {
    return;
  }
  id v9 = (char *)v8;
  unsigned int v10 = (void *)(v8 + direct field offset for PresentationHostingController.lastPresentationOptions);
  swift_beginAccess();
  if (!*v10)
  {
    unint64_t v46 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
LABEL_17:

    outlined destroy of PresentationSizing?((uint64_t)&v44);
    return;
  }
  outlined init with copy of PresentationOptionsPreference((uint64_t)v10, (uint64_t)&v32);
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?((uint64_t)&v40, (uint64_t)&v30);
    if (v31)
    {
      outlined init with take of OptionalBinaryInteger(&v30, (uint64_t)&v44);
    }
    else
    {
      *((void *)&v45 + 1) = &type metadata for AutomaticPresentationSizing;
      unint64_t v46 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v30);
    }
  }
  else
  {
    unint64_t v46 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
  }
  outlined destroy of PresentationOptionsPreference((uint64_t)&v32);
  if (!*((void *)&v45 + 1)) {
    goto LABEL_17;
  }
  outlined init with take of OptionalBinaryInteger(&v44, (uint64_t)v47);
  id v11 = objc_msgSend(v9, sel_presentingViewController);
  if (v11)
  {
    id v12 = v11;
    id v13 = objc_msgSend(v12, sel_presentingViewController);
    unsigned int v14 = v12;
    if (v13)
    {
      int v15 = v12;
      do
      {
        unsigned int v14 = v13;

        id v13 = objc_msgSend(v14, sel_presentingViewController);
        int v15 = v14;
      }
      while (v13);
    }
    id v16 = objc_msgSend(v14, sel_parentViewController);
    if (v16)
    {
      do
      {
        char v17 = v16;

        id v16 = objc_msgSend(v17, sel_parentViewController);
        unsigned int v14 = v17;
      }
      while (v16);
    }
    else
    {
      char v17 = v14;
    }
    id v18 = objc_msgSend(v17, sel_view);

    if (v18)
    {
      uint64_t v19 = *(void *)&v9[direct field offset for PresentationHostingController.lastColumnCount];
      uint64_t ObjectType = (objc_class *)swift_getObjectType();
      v32.receiver = v9;
      v32.super_class = ObjectType;
      objc_msgSendSuper2(&v32, sel_preferredContentSize);
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      outlined init with copy of TableColumnList((uint64_t)v47, (uint64_t)&v32);
      id v33 = v18;
      uint64_t v34 = v19;
      uint64_t v35 = v22;
      uint64_t v36 = v24;
      char v37 = 0;
      uint64_t v38 = 0;
      char v39 = 1;
      uint64_t v40 = 0;
      char v41 = 1;
      uint64_t v42 = a4;
      uint64_t v43 = a5;
      specialized UIHostingController.host.getter();
      specialized UIHostingController.host.getter();
      type metadata accessor for _UIHostingView();
      *((void *)&v44 + 1) = swift_getWitnessTable();
      swift_unknownObjectWeakInit();
      id v25 = v18;
      specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)((uint64_t)&v44);
      double v27 = v26;
      double v29 = v28;
      outlined destroy of weak FallbackResponderProvider?((uint64_t)&v44);
      PresentationHostingController.preferredContentSize.setter(v27, v29);

      outlined destroy of SheetSizing((uint64_t)&v32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  }
}

Class @objc PresentationHostingController.keyCommands.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = PresentationHostingController.keyCommands.getter();

  if (v2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.Class isa = 0;
  }

  return v3.super.isa;
}

uint64_t PresentationHostingController.keyCommands.getter()
{
  char v1 = *(unsigned char *)(v0 + direct field offset for PresentationHostingController.lastInteractiveDismissDisabled);
  static Semantics.v6_1.getter();
  char v2 = isLinkedOnOrAfter(_:)();
  uint64_t result = 0;
  if (v1 & 1) == 0 && (v2)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v5 = (void *)MEMORY[0x18C115780](v4);
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(self, sel_keyCommandWithInput_modifierFlags_action_, v5, 0, sel_escapeKeyPressed);

    type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_188351940;
    *(void *)(v7 + 32) = v6;
    uint64_t v8 = v7;
    specialized Array._endMutation()();
    return v8;
  }
  return result;
}

void @objc PresentationHostingController.escapeKeyPressed()(void *a1)
{
  id v1 = a1;
  protocol witness for PlatformFilePicker.dismiss() in conformance UIDocumentPickerViewController();
}

BOOL closure #1 in PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1, uint64_t a2)
{
  return (PresentationOptionsPreference.sheetConfigurationChanged(from:)(a2) & 1) == 0;
}

void PresentationHostingController.__allocating_init(rootView:)()
{
  id v1 = objc_allocWithZone(v0);
  specialized PresentationHostingController.init(rootView:)();
}

void @objc PresentationHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized PresentationHostingController.init(rootView:)();
}

Swift::Bool __swiftcall PresentationHostingController._canShowWhileLocked()()
{
  static Update.ensure<A>(_:)();
  return v1;
}

id closure #1 in PresentationHostingController._canShowWhileLocked()@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.preferenceValue<A>(_:)();
  swift_release();
  if (v7 == 2)
  {
    v6.receiver = a1;
    v6.super_class = ObjectType;
    id result = objc_msgSendSuper2(&v6, sel__canShowWhileLocked);
  }
  else
  {
    id result = (id)(v7 & 1);
  }
  *a2 = (_BYTE)result;
  return result;
}

BOOL @objc PresentationHostingController._canShowWhileLocked()(void *a1)
{
  id v1 = a1;
  Swift::Bool canShowWhile = PresentationHostingController._canShowWhileLocked()();

  return canShowWhile;
}

uint64_t PresentationHostingController.willTransition(to:with:)(void *a1, void *a2)
{
  v13.receiver = v2;
  v13.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v13, sel_willTransitionToTraitCollection_withTransitionCoordinator_, a1, a2);
  id v5 = &v2[direct field offset for PresentationHostingController.delegate];
  uint64_t result = MEMORY[0x18C119DF0](&v2[direct field offset for PresentationHostingController.delegate]);
  if (result)
  {
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t ObjectType = swift_getObjectType();
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7) & 1) != 0
      && objc_msgSend(a1, sel_horizontalSizeClass) == (id)2)
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v2;
      _OWORD v12[4] = partial apply for closure #1 in PresentationHostingController.willTransition(to:with:);
      v12[5] = v9;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 1107296256;
      void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
      long long v12[3] = &block_descriptor_27_0;
      unsigned int v10 = _Block_copy(v12);
      id v11 = v2;
      swift_release();
      objc_msgSend(a2, sel_animateAlongsideTransition_completion_, v10, 0);
      _Block_release(v10);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in PresentationHostingController.willTransition(to:with:)(int a1, id a2)
{
  id v3 = objc_msgSend(a2, sel_view);
  if (v3)
  {
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_setHidden_, 1);

    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a2;
    v8[4] = partial apply for closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:);
    v8[5] = v5;
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1107296256;
    _OWORD v8[2] = thunk for @escaping @callee_guaranteed () -> ();
    v8[3] = &block_descriptor_33_0;
    objc_super v6 = _Block_copy(v8);
    id v7 = a2;
    swift_release();
    objc_msgSend(v7, sel_dismissViewControllerAnimated_completion_, 0, v6);
    _Block_release(v6);
  }
  else
  {
    __break(1u);
  }
}

void closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_setHidden_, 0);
  }
  else
  {
    __break(1u);
  }
}

void @objc PresentationHostingController.willTransition(to:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  swift_unknownObjectRetain();
  id v7 = a1;
  PresentationHostingController.willTransition(to:with:)(v6, a4);

  swift_unknownObjectRelease();
}

Swift::Void __swiftcall PresentationHostingController.viewWillDisappear(_:)(Swift::Bool a1)
{
  id v2 = v1;
  v17.receiver = v1;
  v17.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v17, sel_viewWillDisappear_, a1);
  uint64_t v4 = direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively;
  uint64_t v5 = v1;
  id v6 = objc_msgSend(v5, sel_presentingViewController);
  id v7 = v5;
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = v5;
    while (1)
    {
      uint64_t v10 = swift_dynamicCastClass();
      if (!v10) {
        break;
      }
      id v7 = (unsigned char *)v10;

      if (v7[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] == 1) {
        v2[v4] = 1;
      }
      id v8 = objc_msgSend(v7, sel_presentingViewController);
      uint64_t v9 = v7;
      if (!v8) {
        goto LABEL_8;
      }
    }

    id v7 = v9;
  }
LABEL_8:
  if (objc_msgSend(v5, sel_isBeingDismissed))
  {
    id v11 = objc_msgSend(v5, sel_transitionCoordinator);
    if (v11)
    {
      id v12 = v11;
      if (objc_msgSend(v11, sel_isInteractive))
      {
        uint64_t v13 = swift_allocObject();
        *(void *)(v13 + 16) = v5;
        _OWORD v16[4] = partial apply for closure #1 in PresentationHostingController.viewWillDisappear(_:);
        v16[5] = v13;
        v16[0] = MEMORY[0x1E4F143A8];
        v16[1] = 1107296256;
        v16[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
        v16[3] = &block_descriptor_21_2;
        unsigned int v14 = _Block_copy(v16);
        int v15 = v5;
        swift_release();
        objc_msgSend(v12, sel_notifyWhenInteractionChangesUsingBlock_, v14);

        _Block_release(v14);
        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
  }
}

uint64_t closure #1 in PresentationHostingController.viewWillDisappear(_:)(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_isInteractive);
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)objc_msgSend(a1, sel_isCancelled);
    if ((result & 1) == 0)
    {
      uint64_t v5 = a2 + direct field offset for PresentationHostingController.delegate;
      uint64_t result = MEMORY[0x18C119DF0](a2 + direct field offset for PresentationHostingController.delegate);
      if (result)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a2, ObjectType, v6);
        return swift_unknownObjectRelease();
      }
    }
  }
  return result;
}

void @objc PresentationHostingController.viewWillDisappear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4 = a1;
  PresentationHostingController.viewWillDisappear(_:)(a3);
}

Swift::Void __swiftcall PresentationHostingController.viewDidDisappear(_:)(Swift::Bool a1)
{
  id v2 = v1;
  v7.receiver = v2;
  v7.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v7, sel_viewDidDisappear_, a1);
  if (objc_msgSend(v2, sel_isBeingDismissed))
  {
    id v4 = &v2[direct field offset for PresentationHostingController.delegate];
    if (MEMORY[0x18C119DF0](&v2[direct field offset for PresentationHostingController.delegate]))
    {
      uint64_t v5 = *((void *)v4 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, void, void, uint64_t, uint64_t))(v5 + 16))(v2, v2[direct field offset for PresentationHostingController.wasPreempted], v2[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively], ObjectType, v5);
      swift_unknownObjectRelease();
    }
  }
  v2[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
}

void @objc PresentationHostingController.viewDidDisappear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4 = a1;
  PresentationHostingController.viewDidDisappear(_:)(a3);
}

id PresentationHostingController.configureDetents(of:using:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  if (!PresentationHostingController.shouldIgnoreDetentsConfiguration.getter()
    || (uint64_t v6 = &v2[direct field offset for PresentationHostingController.delegate],
        MEMORY[0x18C119DF0](&v2[direct field offset for PresentationHostingController.delegate]))
    && (uint64_t v7 = *((void *)v6 + 1),
        uint64_t ObjectType = swift_getObjectType(),
        LOBYTE(v7) = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 24))(ObjectType, v7),
        swift_unknownObjectRelease(),
        (v7 & 1) != 0))
  {
    if (one-time initialization token for clientNeedsOscillationSuppression != -1) {
      goto LABEL_66;
    }
    while (1)
    {
      Swift::Bool v9 = clientNeedsOscillationSuppression;
      outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)v80);
      if (v9)
      {
        uint64_t v10 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined init with copy of PresentationOptionsPreference?(v10, (uint64_t)&v76);
        LOBYTE(v10) = PresentationOptionsPreference.sheetConfigurationChanged(from:)((uint64_t)&v76);
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1((uint64_t)&v76, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
        id result = (id)outlined destroy of PresentationOptionsPreference((uint64_t)v80);
        if ((v10 & 1) == 0) {
          return result;
        }
      }
      else
      {
        outlined destroy of PresentationOptionsPreference((uint64_t)v80);
      }
      uint64_t v16 = *(void *)&v3[direct field offset for PresentationHostingController.oscillationDetector];
      if (v16)
      {
        uint64_t v17 = a1;
        swift_beginAccess();
        uint64_t v18 = *(void *)(v16 + 16);
        uint64_t v19 = *(void *)(v18 + 16);
        uint64_t v20 = (void *)&unk_1EB2E6000;
        if (v19)
        {
          uint64_t v21 = a2;
          uint64_t v22 = v18 + 32;
          swift_bridgeObjectRetain();
          while (1)
          {
            uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 32);
            swift_retain();
            LOBYTE(v23) = v23(v21, v22);
            swift_release();
            if (v23) {
              break;
            }
            v22 += 144;
            if (!--v19)
            {
              swift_bridgeObjectRelease();
              a2 = v21;
              uint64_t v20 = &unk_1EB2E6000;
              goto LABEL_19;
            }
          }
          swift_bridgeObjectRelease();
          *(void *)&long long v76 = 0;
          *((void *)&v76 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(281);
          long long v75 = v76;
          v46._object = (void *)0x800000018833DA30;
          v46._countAndFlagsBits = 0xD000000000000083;
          String.append(_:)(v46);
          uint64_t v47 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
          swift_beginAccess();
          uint64_t v48 = outlined init with copy of PresentationOptionsPreference?(v47, (uint64_t)&v76);
          MEMORY[0x1F4188790](v48);
          uint64_t v49 = _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI29PresentationOptionsPreferenceV_s5NeverOSSTg5((void (*)(uint64_t *__return_ptr, _OWORD *))_s7SwiftUI29PresentationHostingControllerC16configureDetents2of5usingySo07UISheetcE0C_AA0C17OptionsPreferenceVtFSSSgAJXEfU_TA_0);
          unint64_t v51 = v50;
          _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1((uint64_t)&v76, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
          if (v51) {
            uint64_t v52 = v49;
          }
          else {
            uint64_t v52 = 0;
          }
          if (!v51) {
            unint64_t v51 = 0xE000000000000000;
          }
          unint64_t v53 = v51;
          String.append(_:)(*(Swift::String *)&v52);
          swift_bridgeObjectRelease();
          v54._countAndFlagsBits = 0xD000000000000094;
          v54._object = (void *)0x800000018833DAC0;
          String.append(_:)(v54);
          MEMORY[0x18C112B90](v75, *((void *)&v75 + 1));
          return (id)swift_bridgeObjectRelease();
        }
LABEL_19:
        outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v76);
        uint64_t v24 = (uint64_t)&v3[v20[53]];
        swift_beginAccess();
        outlined assign with take of PresentationOptionsPreference?((uint64_t)&v76, v24);
        swift_endAccess();
        specialized OscillationDetector.insert(_:)(a2);
        a1 = v17;
      }
      else
      {
        outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v76);
        uint64_t v25 = (uint64_t)&v3[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
        swift_beginAccess();
        outlined assign with take of PresentationOptionsPreference?((uint64_t)&v76, v25);
        swift_endAccess();
      }
      uint64_t v68 = a2;
      a2 = *(void *)a2;
      uint64_t v26 = *(void *)(a2 + 16);
      unint64_t v27 = MEMORY[0x1E4FBC860];
      if (!v26) {
        goto LABEL_38;
      }
      uint64_t v66 = a1;
      unint64_t v67 = v3;
      *(void *)&long long v72 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      a1 = specialized Set.startIndex.getter(a2);
      id v3 = v28;
      char v30 = v29 & 1;
LABEL_26:
      if (a1 < 0 || a1 >= 1 << *(unsigned char *)(a2 + 32)) {
        break;
      }
      if (((*(void *)(a2 + 56 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a1) & 1) == 0) {
        goto LABEL_64;
      }
      if (*(_DWORD *)(a2 + 36) == v3)
      {
        uint64_t v36 = (uint64_t *)(*(void *)(a2 + 48) + 16 * a1);
        uint64_t v38 = *v36;
        unint64_t v37 = v36[1];
        switch(v37 >> 62)
        {
          case 1uLL:
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
            *(void *)&long long v76 = 0x3A746867696548;
            *((void *)&v76 + 1) = 0xE700000000000000;
            v39._countAndFlagsBits = Double.description.getter();
            String.append(_:)(v39);
            swift_bridgeObjectRelease();
            objc_super v32 = (void *)MEMORY[0x18C115780](v76, *((void *)&v76 + 1));
            swift_bridgeObjectRelease();
            *(void *)(swift_allocObject() + 16) = v38;
            goto LABEL_24;
          case 2uLL:
            uint64_t v69 = v37 & 0x3FFFFFFFFFFFFFFFLL;
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
            *(void *)&long long v76 = 0x3A6D6F74737543;
            *((void *)&v76 + 1) = 0xE700000000000000;
            v40._countAndFlagsBits = _typeName(_:qualified:)();
            String.append(_:)(v40);
            swift_bridgeObjectRelease();
            objc_super v32 = (void *)MEMORY[0x18C115780](v76, *((void *)&v76 + 1));
            swift_bridgeObjectRelease();
            uint64_t v41 = swift_allocObject();
            *(void *)(v41 + 16) = v38;
            *(void *)(v41 + 24) = v69;
            goto LABEL_24;
          case 3uLL:
            unint64_t v42 = v38 | v37 ^ 0xC000000000000000;
            uint64_t v43 = self;
            if (v42) {
              id v44 = objc_msgSend(v43, sel_largeDetent);
            }
            else {
              id v44 = objc_msgSend(v43, sel_mediumDetent);
            }
            id v45 = v44;
            goto LABEL_25;
          default:
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
            *(void *)&long long v76 = 0x6E6F697463617246;
            *((void *)&v76 + 1) = 0xE90000000000003ALL;
            v31._countAndFlagsBits = Double.description.getter();
            String.append(_:)(v31);
            swift_bridgeObjectRelease();
            objc_super v32 = (void *)MEMORY[0x18C115780](v76, *((void *)&v76 + 1));
            swift_bridgeObjectRelease();
            *(void *)(swift_allocObject() + 16) = v38;
LABEL_24:
            static UISheetPresentationControllerDetent.custom(identifier:resolver:)();

            swift_release();
LABEL_25:
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            uint64_t v33 = specialized _NativeSet.index(after:)(a1, v3, v30 & 1, a2);
            a1 = v33;
            id v3 = (char *)v34;
            char v30 = v35 & 1;
            if (--v26) {
              goto LABEL_26;
            }
            outlined consume of Set<UIOpenURLContext>.Index._Variant(v33, v34, v35 & 1);
            unint64_t v27 = v72;
            swift_bridgeObjectRelease();
            a1 = v66;
            id v3 = v67;
            break;
        }
LABEL_38:
        a2 = v68;
        if (v27 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v57) {
            goto LABEL_68;
          }
LABEL_40:
          swift_bridgeObjectRetain();
        }
        else
        {
          if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_40;
          }
LABEL_68:
          type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
          uint64_t v58 = swift_allocObject();
          *(_OWORD *)(v58 + 16) = xmmword_188351940;
          *(void *)(v58 + 32) = objc_msgSend(self, sel_largeDetent);
          *(void *)&long long v76 = v58;
          specialized Array._endMutation()();
        }
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend((id)a1, sel_setDetents_, isa);

        uint64_t v60 = *(void **)(v68 + 48);
        if (v60 == (void *)2)
        {
          objc_msgSend((id)a1, sel_setLargestUndimmedDetentIdentifier_, 0);
        }
        else
        {
          outlined copy of PresentationDimmingBehavior?(*(id *)(v68 + 48));
          specialized PresentationDimmingBehavior.setLargestUndimmedDetentIdentifier(of:detents:)((id)a1, (uint64_t)v60);
          outlined consume of PresentationDimmingBehavior?(v60);
        }
        objc_msgSend((id)a1, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, *(unsigned __int8 *)(v68 + 57) != 2);
        UISheetPresentationController.preferredCornerRadius.setter();
        objc_msgSend((id)a1, sel_setPrefersEdgeAttachedInCompactHeight_, (*(unsigned char *)(v68 + 41) & 0xFD) == 1);
        if (*(unsigned char *)(v68 + 58))
        {
          if (*(unsigned char *)(v68 + 58) == 1)
          {
            swift_bridgeObjectRelease();
            BOOL v61 = 1;
          }
          else
          {
            swift_bridgeObjectRelease();
            BOOL v61 = 0;
          }
        }
        else
        {
          if (v27 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v62 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          BOOL v61 = v62 > 1;
        }
        objc_msgSend((id)a1, sel_setPrefersGrabberVisible_, v61);
        uint64_t v63 = (double *)(v68 + 80);
        if (*(unsigned char *)(v68 + 88)) {
          uint64_t v63 = (double *)MEMORY[0x1E4FB32C0];
        }
        objc_msgSend((id)a1, sel__setGrabberTopSpacing_, *v63);
        id v64 = objc_msgSend((id)a1, sel_prefersEdgeAttachedInCompactHeight);
        objc_msgSend((id)a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, v64);
        if ((v64 & 1) != 0 || objc_msgSend(v3, sel_modalPresentationStyle) == (id)2) {
          uint64_t v65 = 1;
        }
        else {
          uint64_t v65 = objc_msgSend((id)a1, sel_prefersPageSizing) ^ 1;
        }
        objc_msgSend((id)a1, sel__setMode_, v65);
        return PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, (void *)a1);
      }
LABEL_65:
      __break(1u);
LABEL_66:
      swift_once();
    }
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_188351940;
  *(void *)(v12 + 32) = objc_msgSend(self, sel_largeDetent);
  v80[0] = v12;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISheetPresentationControllerDetent);
  Class v13 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend((id)a1, sel_setDetents_, v13);

  objc_msgSend((id)a1, sel_setLargestUndimmedDetentIdentifier_, 0);
  objc_msgSend((id)a1, sel_setPrefersScrollingExpandsWhenScrolledToEdge_, 1);
  UISheetPresentationController.preferredCornerRadius.setter();
  objc_msgSend((id)a1, sel_setPrefersEdgeAttachedInCompactHeight_, 0);
  objc_msgSend((id)a1, sel_setPrefersGrabberVisible_, *(unsigned __int8 *)(a2 + 58) == 1);
  unsigned int v14 = (double *)(a2 + 80);
  if (*(unsigned char *)(a2 + 88)) {
    unsigned int v14 = (double *)MEMORY[0x1E4FB32C0];
  }
  objc_msgSend((id)a1, sel__setGrabberTopSpacing_, *v14);
  outlined init with copy of PresentationSizing?(a2 + 96, (uint64_t)v80);
  uint64_t v15 = v80[3];
  outlined destroy of PresentationSizing?((uint64_t)v80);
  outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)v80);
  if (v15)
  {
    outlined destroy of PresentationOptionsPreference((uint64_t)v80);
    outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v76);
  }
  else
  {
    if (static SemanticFeature.isEnabled.getter())
    {
      outlined init with copy of PresentationSizing?((uint64_t)&v81, (uint64_t)&v72);
      if (*((void *)&v73 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&v72, (uint64_t)&v76);
      }
      else
      {
        *((void *)&v77 + 1) = &type metadata for AutomaticPresentationSizing;
        int32x2_t v78 = &protocol witness table for AutomaticPresentationSizing;
        outlined destroy of PresentationSizing?((uint64_t)&v72);
      }
    }
    else
    {
      int32x2_t v78 = 0;
      long long v76 = 0u;
      long long v77 = 0u;
    }
    outlined destroy of PresentationOptionsPreference((uint64_t)v80);
    uint64_t v55 = *((void *)&v77 + 1);
    outlined destroy of PresentationSizing?((uint64_t)&v76);
    outlined init with copy of PresentationOptionsPreference(a2, (uint64_t)&v76);
    if (!v55)
    {
      outlined destroy of PresentationOptionsPreference((uint64_t)&v76);
      goto LABEL_59;
    }
  }
  int v56 = v79;
  outlined destroy of PresentationOptionsPreference((uint64_t)&v76);
  if (v56 == 1)
  {
LABEL_59:
    objc_msgSend((id)a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
    return objc_msgSend((id)a1, sel__setMode_, objc_msgSend(v3, sel_modalPresentationStyle) == (id)2);
  }
  if (static SemanticFeature.isEnabled.getter())
  {
    outlined init with copy of PresentationSizing?(a2 + 96, (uint64_t)&v70);
    if (v71)
    {
      outlined init with take of OptionalBinaryInteger(&v70, (uint64_t)&v72);
    }
    else
    {
      *((void *)&v73 + 1) = &type metadata for AutomaticPresentationSizing;
      long long v74 = &protocol witness table for AutomaticPresentationSizing;
      outlined destroy of PresentationSizing?((uint64_t)&v70);
    }
    outlined destroy of PresentationSizing?((uint64_t)&v72);
    id result = objc_msgSend(v3, sel_modalPresentationStyle);
    if (result != (id)7)
    {
      objc_msgSend((id)a1, sel_setWidthFollowsPreferredContentSizeWhenEdgeAttached_, 0);
      return PresentationHostingController.configureSizingOptions(for:sheetController:)(a2, (void *)a1);
    }
  }
  else
  {
    long long v74 = 0;
    long long v72 = 0u;
    long long v73 = 0u;
    return (id)outlined destroy of PresentationSizing?((uint64_t)&v72);
  }
  return result;
}

uint64_t closure #1 in PresentationHostingController.configureDetents(of:using:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = PresentationOptionsPreference.differenceMessage(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in closure #1 in PresentationHostingController.updateDetentsSelection(of:using:);
  *(void *)(v5 + 24) = v4;
  _OWORD v10[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  v10[5] = v5;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 1107296256;
  _OWORD v10[2] = thunk for @escaping @callee_guaranteed () -> ();
  v10[3] = &block_descriptor_43;
  uint64_t v6 = _Block_copy(v10);
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_animateChanges_, v6);
  _Block_release(v6);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  return result;
}

id @objc PresentationHostingController._showcaseView.getter(void *a1)
{
  id v1 = a1;
  id v2 = PresentationHostingController._showcaseView.getter();

  return v2;
}

id PresentationHostingController._showcaseView.getter()
{
  uint64_t v0 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v1 = v0;
  swift_getWitnessTable();
  ViewRendererHost.preferenceValue<A>(_:)();

  if (v11 == 1)
  {
    _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for _NavigationTransitionOutputs?, (uint64_t)&type metadata for _NavigationTransitionOutputs, MEMORY[0x1E4FBB718]);
    return 0;
  }
  outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)v10, (uint64_t)&v6);
  outlined destroy of _NavigationTransitionOutputs((uint64_t)v10);
  outlined init with take of _NavigationTransitionOutputs.Content((uint64_t)&v6, (uint64_t)v10);
  outlined init with copy of _NavigationTransitionOutputs.Content((uint64_t)v10, (uint64_t)&v6);
  if (!*((void *)&v8 + 1))
  {
    outlined destroy of _NavigationTransitionOutputs.Content((uint64_t)v10);
    return 0;
  }
  v4[0] = v7;
  v4[1] = v8;
  uint64_t v5 = v9;
  id v2 = UIHostingController.findMatchedTransitionDestinationView<A>(id:namespace:)((uint64_t)v4, v6, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968]);
  outlined destroy of AnyHashable((uint64_t)v4);
  outlined destroy of _NavigationTransitionOutputs.Content((uint64_t)v10);
  return v2;
}

void PresentationHostingController.__allocating_init(coder:rootView:)()
{
}

void PresentationHostingController.__allocating_init(hostingView:)()
{
}

uint64_t PresentationHostingController.__ivar_destroyer()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + direct field offset for PresentationHostingController.delegate);
  id v1 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1(v0 + direct field offset for PresentationHostingController.lastPresentationOptions, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1(v0 + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, v1);

  return swift_release();
}

uint64_t @objc PresentationHostingController.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of weak FallbackResponderProvider?(a1 + direct field offset for PresentationHostingController.delegate);
  id v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1(a1 + direct field offset for PresentationHostingController.lastPresentationOptions, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1(a1 + direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, v2);

  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for PresentationHostingControllerPresenterKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188002E50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationHostingControllerPresenterKind()
{
  return &type metadata for PresentationHostingControllerPresenterKind;
}

unint64_t lazy protocol witness table accessor for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind;
  if (!lazy protocol witness table cache variable for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationHostingControllerPresenterKind and conformance PresentationHostingControllerPresenterKind);
  }
  return result;
}

uint64_t specialized closure #2 in PresentationHostingController.init(rootView:delegate:drawsBackground:)(uint64_t a1)
{
  uint64_t v1 = a1 + direct field offset for PresentationHostingController.lastPresentationOptions;
  swift_beginAccess();
  outlined init with copy of PresentationOptionsPreference?(v1, (uint64_t)v3);
  if (!*(void *)&v3[0]) {
    return _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  }
  v5[6] = v3[6];
  v6[0] = v4[0];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v4 + 9);
  _OWORD v5[2] = v3[2];
  void v5[3] = v3[3];
  v5[4] = v3[4];
  v5[5] = v3[5];
  v5[0] = v3[0];
  v5[1] = v3[1];
  specialized PresentationHostingController.updateSheet(with:)((uint64_t *)v5);
  return outlined destroy of PresentationOptionsPreference((uint64_t)v5);
}

void specialized PresentationDimmingBehavior.setLargestUndimmedDetentIdentifier(of:detents:)(id a1, uint64_t a2)
{
  if (a2 == 1)
  {
    id v3 = objc_msgSend(self, sel_largeDetent);
    id v4 = objc_msgSend(v3, sel_identifier);

    id v5 = objc_msgSend(self, sel_appearanceWithSmallestDimmedDetentIdentifier_, v4);
    objc_msgSend(a1, sel__setStandardAppearance_, v5);
  }
  else
  {
    objc_msgSend(a1, sel_setLargestUndimmedDetentIdentifier_, a2);
  }
}

void specialized PresentationHostingController.init(rootView:)()
{
  *(void *)&v0[direct field offset for PresentationHostingController.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[direct field offset for PresentationHostingController.bridgedPresentationWantsTransparentBackground] = 0;
  v0[direct field offset for PresentationHostingController.presentingBridgeKind] = 2;
  *(void *)&v0[direct field offset for PresentationHostingController.lastColumnCount] = 0;
  v0[direct field offset for PresentationHostingController.lastInteractiveDismissDisabled] = 2;
  v0[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 0;
  v0[direct field offset for PresentationHostingController.wasPreempted] = 0;
  uint64_t v1 = &v0[direct field offset for PresentationHostingController.lastPresentationOptions];
  *uint64_t v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[5] = 0u;
  v1[6] = 0u;
  v1[7] = 0u;
  *(_OWORD *)((char *)v1 + 121) = 0u;
  id v2 = &v0[direct field offset for PresentationHostingController.lastPreferenceForSheetControllerConfiguration];
  *id v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  *(_OWORD *)((char *)v2 + 121) = 0u;
  id v3 = &v0[direct field offset for PresentationHostingController.observedSize];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1)
{
  return closure #1 in PresentationHostingController.sizingOptionsDidChange(from:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_188003204()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_18800323C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(uint64_t a1, uint64_t a2)
{
  closure #2 in PresentationHostingController.sizingOptionsDidChange(from:)(a1, a2, v2[4], v2[5], v2[6]);
}

uint64_t sub_188003284()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in PresentationHostingController.preferredContentSize.setter()
{
  return closure #1 in PresentationHostingController.preferredContentSize.setter(*(void **)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1880032C8()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of RemoteSheetContainerVCKey.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of RemoteSheetContainerVCKey.Storage(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of _NavigationTransitionOutputs.Content(uint64_t a1)
{
  return a1;
}

uint64_t sub_1880033DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PresentationHostingController.viewWillDisappear(_:)(void *a1)
{
  return closure #1 in PresentationHostingController.viewWillDisappear(_:)(a1, *(void *)(v1 + 16));
}

void partial apply for closure #1 in PresentationHostingController.willTransition(to:with:)(int a1)
{
  closure #1 in PresentationHostingController.willTransition(to:with:)(a1, *(id *)(v1 + 16));
}

void partial apply for closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:)()
{
  closure #1 in closure #1 in PresentationHostingController.willTransition(to:with:)(*(void **)(v0 + 16));
}

id partial apply for closure #1 in PresentationHostingController._canShowWhileLocked()@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in PresentationHostingController._canShowWhileLocked()(*(void **)(v1 + 16), a1);
}

uint64_t sub_188003448()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in closure #1 in PresentationHostingController.updateDetentsSelection(of:using:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setSelectedDetentIdentifier_, *(void *)(v0 + 24));
}

uint64_t sub_188003498()
{
  return swift_deallocObject();
}

uint64_t sub_1880034A8()
{
  return swift_deallocObject();
}

uint64_t sub_1880034B8()
{
  return swift_deallocObject();
}

uint64_t sub_1880034C8()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI29PresentationHostingControllerC16configureDetents2of5usingySo07UISheetcE0C_AA0C17OptionsPreferenceVtFSSSgAJXEfU_TA_0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = PresentationOptionsPreference.differenceMessage(from:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t assignWithCopy for PresentationState(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of PresentationState.Base(a1);
    switch(*((unsigned char *)a2 + 233))
    {
      case 0:
        *(void *)a1 = *(void *)a2;
        uint64_t v4 = *((void *)a2 + 1);
        swift_retain();
        if (v4)
        {
          uint64_t v5 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v4;
          *(void *)(a1 + 16) = v5;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v41 = (_OWORD *)(a1 + 32);
        unint64_t v42 = a2 + 2;
        uint64_t v43 = *((void *)a2 + 7);
        if (v43)
        {
          *(void *)(a1 + 56) = v43;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v43 - 8))(v41, v42);
        }
        else
        {
          long long v68 = *v42;
          long long v69 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v41 = v68;
          *(_OWORD *)(a1 + 48) = v69;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        long long v70 = (void *)*((void *)a2 + 14);
        *(void *)(a1 + 112) = v70;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(unsigned char *)(a1 + 233) = 0;
        goto LABEL_54;
      case 1:
        *(void *)a1 = *(void *)a2;
        uint64_t v17 = *((void *)a2 + 1);
        swift_retain();
        if (v17)
        {
          uint64_t v18 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v17;
          *(void *)(a1 + 16) = v18;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        id v44 = (_OWORD *)(a1 + 32);
        id v45 = a2 + 2;
        uint64_t v46 = *((void *)a2 + 7);
        if (v46)
        {
          *(void *)(a1 + 56) = v46;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v46 - 8))(v44, v45);
        }
        else
        {
          long long v71 = *v45;
          long long v72 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *id v44 = v71;
          *(_OWORD *)(a1 + 48) = v72;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        long long v70 = (void *)*((void *)a2 + 14);
        *(void *)(a1 + 112) = v70;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(unsigned char *)(a1 + 233) = 1;
LABEL_54:
        swift_retain();
        swift_retain();
        swift_retain();
        id v73 = v70;
        return a1;
      case 2:
        uint64_t v19 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v20 = *((void *)a2 + 2);
        id v21 = v19;
        swift_retain();
        if (v20)
        {
          uint64_t v22 = *((void *)a2 + 3);
          *(void *)(a1 + 16) = v20;
          *(void *)(a1 + 24) = v22;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        uint64_t v47 = (_OWORD *)(a1 + 40);
        uint64_t v48 = (long long *)((char *)a2 + 40);
        uint64_t v49 = *((void *)a2 + 8);
        if (v49)
        {
          *(void *)(a1 + 64) = v49;
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          (**(void (***)(_OWORD *, long long *))(v49 - 8))(v47, v48);
        }
        else
        {
          long long v74 = *v48;
          long long v75 = *(long long *)((char *)a2 + 56);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *uint64_t v47 = v74;
          *(_OWORD *)(a1 + 56) = v75;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        char v76 = 2;
        goto LABEL_75;
      case 3:
        uint64_t v23 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v24 = *((void *)a2 + 2);
        id v25 = v23;
        swift_retain();
        if (v24)
        {
          uint64_t v26 = *((void *)a2 + 3);
          *(void *)(a1 + 16) = v24;
          *(void *)(a1 + 24) = v26;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        unint64_t v50 = (_OWORD *)(a1 + 40);
        unint64_t v51 = (long long *)((char *)a2 + 40);
        uint64_t v52 = *((void *)a2 + 8);
        if (v52)
        {
          *(void *)(a1 + 64) = v52;
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          (**(void (***)(_OWORD *, long long *))(v52 - 8))(v50, v51);
        }
        else
        {
          long long v77 = *v51;
          long long v78 = *(long long *)((char *)a2 + 56);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *unint64_t v50 = v77;
          *(_OWORD *)(a1 + 56) = v78;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        char v76 = 3;
        goto LABEL_75;
      case 4:
        *(void *)a1 = *(void *)a2;
        uint64_t v27 = *((void *)a2 + 1);
        swift_retain();
        if (v27)
        {
          uint64_t v28 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v27;
          *(void *)(a1 + 16) = v28;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        unint64_t v53 = (_OWORD *)(a1 + 32);
        Swift::String v54 = a2 + 2;
        uint64_t v55 = *((void *)a2 + 7);
        if (v55)
        {
          *(void *)(a1 + 56) = v55;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v55 - 8))(v53, v54);
        }
        else
        {
          long long v79 = *v54;
          long long v80 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          _OWORD *v53 = v79;
          *(_OWORD *)(a1 + 48) = v80;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        char v76 = 4;
        goto LABEL_75;
      case 5:
        char v29 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v30 = *((void *)a2 + 2);
        id v31 = v29;
        swift_retain();
        if (v30)
        {
          uint64_t v32 = *((void *)a2 + 3);
          *(void *)(a1 + 16) = v30;
          *(void *)(a1 + 24) = v32;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        int v56 = (_OWORD *)(a1 + 40);
        uint64_t v57 = (long long *)((char *)a2 + 40);
        uint64_t v58 = *((void *)a2 + 8);
        if (v58)
        {
          *(void *)(a1 + 64) = v58;
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          (**(void (***)(_OWORD *, long long *))(v58 - 8))(v56, v57);
        }
        else
        {
          long long v81 = *v57;
          long long v82 = *(long long *)((char *)a2 + 56);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *int v56 = v81;
          *(_OWORD *)(a1 + 56) = v82;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        char v76 = 5;
        goto LABEL_75;
      case 6:
        *(void *)a1 = *(void *)a2;
        uint64_t v33 = *((void *)a2 + 1);
        swift_retain();
        if (v33)
        {
          uint64_t v34 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v33;
          *(void *)(a1 + 16) = v34;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v59 = (_OWORD *)(a1 + 32);
        uint64_t v60 = a2 + 2;
        uint64_t v61 = *((void *)a2 + 7);
        if (v61)
        {
          *(void *)(a1 + 56) = v61;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v61 - 8))(v59, v60);
        }
        else
        {
          long long v83 = *v60;
          long long v84 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v59 = v83;
          *(_OWORD *)(a1 + 48) = v84;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        char v76 = 6;
        goto LABEL_75;
      case 7:
        char v35 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 233) = 7;
        id v36 = v35;
        return a1;
      case 8:
        *(void *)a1 = *(void *)a2;
        uint64_t v37 = *((void *)a2 + 1);
        swift_retain();
        if (v37)
        {
          uint64_t v38 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v37;
          *(void *)(a1 + 16) = v38;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v62 = (_OWORD *)(a1 + 32);
        uint64_t v63 = a2 + 2;
        uint64_t v64 = *((void *)a2 + 7);
        if (v64)
        {
          *(void *)(a1 + 56) = v64;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v64 - 8))(v62, v63);
        }
        else
        {
          long long v85 = *v63;
          long long v86 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v62 = v85;
          *(_OWORD *)(a1 + 48) = v86;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        uint64_t v87 = (void *)*((void *)a2 + 14);
        *(void *)(a1 + 112) = v87;
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 128) = *((void *)a2 + 16);
        uint64_t v88 = *((void *)a2 + 17);
        swift_retain();
        swift_retain();
        swift_retain();
        id v89 = v87;
        swift_retain();
        if (v88)
        {
          uint64_t v90 = *((void *)a2 + 18);
          *(void *)(a1 + 136) = v88;
          *(void *)(a1 + 144) = v90;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
        }
        *(void *)(a1 + 152) = *((void *)a2 + 19);
        unint64_t v93 = (_OWORD *)(a1 + 160);
        unint64_t v94 = a2 + 10;
        uint64_t v95 = *((void *)a2 + 23);
        if (v95)
        {
          *(void *)(a1 + 184) = v95;
          *(void *)(a1 + 192) = *((void *)a2 + 24);
          (**(void (***)(_OWORD *, long long *))(v95 - 8))(v93, v94);
        }
        else
        {
          long long v96 = *v94;
          long long v97 = a2[11];
          *(void *)(a1 + 192) = *((void *)a2 + 24);
          *unint64_t v93 = v96;
          *(_OWORD *)(a1 + 176) = v97;
        }
        *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
        *(unsigned char *)(a1 + 201) = *((unsigned char *)a2 + 201);
        *(void *)(a1 + 208) = *((void *)a2 + 26);
        *(void *)(a1 + 216) = *((void *)a2 + 27);
        *(void *)(a1 + 224) = *((void *)a2 + 28);
        *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
        char v76 = 8;
        goto LABEL_75;
      case 9:
        *(void *)a1 = *(void *)a2;
        uint64_t v39 = *((void *)a2 + 1);
        swift_retain();
        if (v39)
        {
          uint64_t v40 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v39;
          *(void *)(a1 + 16) = v40;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v65 = (_OWORD *)(a1 + 32);
        uint64_t v66 = a2 + 2;
        uint64_t v67 = *((void *)a2 + 7);
        if (v67)
        {
          *(void *)(a1 + 56) = v67;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v67 - 8))(v65, v66);
        }
        else
        {
          long long v91 = *v66;
          long long v92 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v65 = v91;
          *(_OWORD *)(a1 + 48) = v92;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        char v76 = 9;
LABEL_75:
        *(unsigned char *)(a1 + 233) = v76;
        swift_retain();
        swift_retain();
        swift_retain();
        break;
      default:
        long long v6 = *a2;
        long long v7 = a2[2];
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)a1 = v6;
        long long v8 = a2[3];
        long long v9 = a2[4];
        long long v10 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = v9;
        long long v11 = a2[7];
        long long v12 = a2[8];
        long long v13 = a2[10];
        *(_OWORD *)(a1 + 144) = a2[9];
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a1 + 112) = v11;
        *(_OWORD *)(a1 + 128) = v12;
        long long v14 = a2[11];
        long long v15 = a2[12];
        long long v16 = a2[13];
        *(_OWORD *)(a1 + 218) = *(long long *)((char *)a2 + 218);
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 208) = v16;
        *(_OWORD *)(a1 + 176) = v14;
        break;
    }
  }
  return a1;
}

__n128 __swift_memcpy234_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(_OWORD *)(a1 + 218) = *(long long *)((char *)a2 + 218);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

_OWORD *assignWithTake for PresentationState(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of PresentationState.Base((uint64_t)a1);
    long long v4 = a2[13];
    a1[12] = a2[12];
    a1[13] = v4;
    *(_OWORD *)((char *)a1 + 218) = *(_OWORD *)((char *)a2 + 218);
    long long v5 = a2[9];
    a1[8] = a2[8];
    a1[9] = v5;
    long long v6 = a2[11];
    a1[10] = a2[10];
    a1[11] = v6;
    long long v7 = a2[5];
    a1[4] = a2[4];
    a1[5] = v7;
    long long v8 = a2[7];
    a1[6] = a2[6];
    a1[7] = v8;
    long long v9 = a2[1];
    *a1 = *a2;
    a1[1] = v9;
    long long v10 = a2[3];
    a1[2] = a2[2];
    a1[3] = v10;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 234)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 233);
  if (v3 <= 0xA) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 232) = 0;
    *(void *)__n128 result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 234) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 234) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 233) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationState()
{
  return &type metadata for PresentationState;
}

uint64_t assignWithCopy for PresentationState.Base(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 233);
    if (v4 >= 0xA) {
      unsigned int v4 = *(_DWORD *)a1 + 10;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
        swift_release();
        if (*(void *)(a1 + 8)) {
          swift_release();
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        }
        swift_release();
        swift_release();
        swift_release();

        break;
      case 2u:
      case 3u:
      case 5u:

        swift_release();
        if (*(void *)(a1 + 16)) {
          swift_release();
        }
        if (*(void *)(a1 + 64)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 40);
        }
        goto LABEL_29;
      case 4u:
      case 6u:
      case 9u:
        swift_release();
        if (*(void *)(a1 + 8)) {
          swift_release();
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        }
        goto LABEL_29;
      case 7u:

        break;
      case 8u:
        swift_release();
        if (*(void *)(a1 + 8)) {
          swift_release();
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 32);
        }
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        if (*(void *)(a1 + 136)) {
          swift_release();
        }
        if (*(void *)(a1 + 184)) {
          __swift_destroy_boxed_opaque_existential_1(a1 + 160);
        }
LABEL_29:
        swift_release();
        swift_release();
        swift_release();
        break;
      default:
        break;
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 233);
    if (v5 >= 0xA) {
      unsigned int v5 = *(_DWORD *)a2 + 10;
    }
    switch(v5)
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        uint64_t v6 = *((void *)a2 + 1);
        swift_retain();
        if (v6)
        {
          uint64_t v7 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v6;
          *(void *)(a1 + 16) = v7;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v43 = (_OWORD *)(a1 + 32);
        id v44 = a2 + 2;
        uint64_t v45 = *((void *)a2 + 7);
        if (v45)
        {
          *(void *)(a1 + 56) = v45;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v45 - 8))(v43, v44);
        }
        else
        {
          long long v70 = *v44;
          long long v71 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v43 = v70;
          *(_OWORD *)(a1 + 48) = v71;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        long long v72 = (void *)*((void *)a2 + 14);
        *(void *)(a1 + 112) = v72;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(unsigned char *)(a1 + 233) = 0;
        goto LABEL_84;
      case 1u:
        *(void *)a1 = *(void *)a2;
        uint64_t v19 = *((void *)a2 + 1);
        swift_retain();
        if (v19)
        {
          uint64_t v20 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v19;
          *(void *)(a1 + 16) = v20;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v46 = (_OWORD *)(a1 + 32);
        uint64_t v47 = a2 + 2;
        uint64_t v48 = *((void *)a2 + 7);
        if (v48)
        {
          *(void *)(a1 + 56) = v48;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v48 - 8))(v46, v47);
        }
        else
        {
          long long v73 = *v47;
          long long v74 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v46 = v73;
          *(_OWORD *)(a1 + 48) = v74;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        long long v72 = (void *)*((void *)a2 + 14);
        *(void *)(a1 + 112) = v72;
        *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
        *(unsigned char *)(a1 + 233) = 1;
LABEL_84:
        swift_retain();
        swift_retain();
        swift_retain();
        id v75 = v72;
        return a1;
      case 2u:
        id v21 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v22 = *((void *)a2 + 2);
        id v23 = v21;
        swift_retain();
        if (v22)
        {
          uint64_t v24 = *((void *)a2 + 3);
          *(void *)(a1 + 16) = v22;
          *(void *)(a1 + 24) = v24;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        uint64_t v49 = (_OWORD *)(a1 + 40);
        unint64_t v50 = (long long *)((char *)a2 + 40);
        uint64_t v51 = *((void *)a2 + 8);
        if (v51)
        {
          *(void *)(a1 + 64) = v51;
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          (**(void (***)(_OWORD *, long long *))(v51 - 8))(v49, v50);
        }
        else
        {
          long long v76 = *v50;
          long long v77 = *(long long *)((char *)a2 + 56);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *uint64_t v49 = v76;
          *(_OWORD *)(a1 + 56) = v77;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        char v78 = 2;
        goto LABEL_105;
      case 3u:
        id v25 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v26 = *((void *)a2 + 2);
        id v27 = v25;
        swift_retain();
        if (v26)
        {
          uint64_t v28 = *((void *)a2 + 3);
          *(void *)(a1 + 16) = v26;
          *(void *)(a1 + 24) = v28;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        uint64_t v52 = (_OWORD *)(a1 + 40);
        unint64_t v53 = (long long *)((char *)a2 + 40);
        uint64_t v54 = *((void *)a2 + 8);
        if (v54)
        {
          *(void *)(a1 + 64) = v54;
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          (**(void (***)(_OWORD *, long long *))(v54 - 8))(v52, v53);
        }
        else
        {
          long long v79 = *v53;
          long long v80 = *(long long *)((char *)a2 + 56);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          _OWORD *v52 = v79;
          *(_OWORD *)(a1 + 56) = v80;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        char v78 = 3;
        goto LABEL_105;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v29 = *((void *)a2 + 1);
        swift_retain();
        if (v29)
        {
          uint64_t v30 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v29;
          *(void *)(a1 + 16) = v30;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v55 = (_OWORD *)(a1 + 32);
        int v56 = a2 + 2;
        uint64_t v57 = *((void *)a2 + 7);
        if (v57)
        {
          *(void *)(a1 + 56) = v57;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v57 - 8))(v55, v56);
        }
        else
        {
          long long v81 = *v56;
          long long v82 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v55 = v81;
          *(_OWORD *)(a1 + 48) = v82;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        char v78 = 4;
        goto LABEL_105;
      case 5u:
        id v31 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v32 = *((void *)a2 + 2);
        id v33 = v31;
        swift_retain();
        if (v32)
        {
          uint64_t v34 = *((void *)a2 + 3);
          *(void *)(a1 + 16) = v32;
          *(void *)(a1 + 24) = v34;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = a2[1];
        }
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        uint64_t v58 = (_OWORD *)(a1 + 40);
        uint64_t v59 = (long long *)((char *)a2 + 40);
        uint64_t v60 = *((void *)a2 + 8);
        if (v60)
        {
          *(void *)(a1 + 64) = v60;
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          (**(void (***)(_OWORD *, long long *))(v60 - 8))(v58, v59);
        }
        else
        {
          long long v83 = *v59;
          long long v84 = *(long long *)((char *)a2 + 56);
          *(void *)(a1 + 72) = *((void *)a2 + 9);
          *uint64_t v58 = v83;
          *(_OWORD *)(a1 + 56) = v84;
        }
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
        char v78 = 5;
        goto LABEL_105;
      case 6u:
        *(void *)a1 = *(void *)a2;
        uint64_t v35 = *((void *)a2 + 1);
        swift_retain();
        if (v35)
        {
          uint64_t v36 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v35;
          *(void *)(a1 + 16) = v36;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v61 = (_OWORD *)(a1 + 32);
        uint64_t v62 = a2 + 2;
        uint64_t v63 = *((void *)a2 + 7);
        if (v63)
        {
          *(void *)(a1 + 56) = v63;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v63 - 8))(v61, v62);
        }
        else
        {
          long long v85 = *v62;
          long long v86 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v61 = v85;
          *(_OWORD *)(a1 + 48) = v86;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        char v78 = 6;
        goto LABEL_105;
      case 7u:
        uint64_t v37 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 233) = 7;
        id v38 = v37;
        return a1;
      case 8u:
        *(void *)a1 = *(void *)a2;
        uint64_t v39 = *((void *)a2 + 1);
        swift_retain();
        if (v39)
        {
          uint64_t v40 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v39;
          *(void *)(a1 + 16) = v40;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v64 = (_OWORD *)(a1 + 32);
        uint64_t v65 = a2 + 2;
        uint64_t v66 = *((void *)a2 + 7);
        if (v66)
        {
          *(void *)(a1 + 56) = v66;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v66 - 8))(v64, v65);
        }
        else
        {
          long long v87 = *v65;
          long long v88 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v64 = v87;
          *(_OWORD *)(a1 + 48) = v88;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        id v89 = (void *)*((void *)a2 + 14);
        *(void *)(a1 + 112) = v89;
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 128) = *((void *)a2 + 16);
        uint64_t v90 = *((void *)a2 + 17);
        swift_retain();
        swift_retain();
        swift_retain();
        id v91 = v89;
        swift_retain();
        if (v90)
        {
          uint64_t v92 = *((void *)a2 + 18);
          *(void *)(a1 + 136) = v90;
          *(void *)(a1 + 144) = v92;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
        }
        *(void *)(a1 + 152) = *((void *)a2 + 19);
        uint64_t v95 = (_OWORD *)(a1 + 160);
        long long v96 = a2 + 10;
        uint64_t v97 = *((void *)a2 + 23);
        if (v97)
        {
          *(void *)(a1 + 184) = v97;
          *(void *)(a1 + 192) = *((void *)a2 + 24);
          (**(void (***)(_OWORD *, long long *))(v97 - 8))(v95, v96);
        }
        else
        {
          long long v98 = *v96;
          long long v99 = a2[11];
          *(void *)(a1 + 192) = *((void *)a2 + 24);
          *uint64_t v95 = v98;
          *(_OWORD *)(a1 + 176) = v99;
        }
        *(unsigned char *)(a1 + 200) = *((unsigned char *)a2 + 200);
        *(unsigned char *)(a1 + 201) = *((unsigned char *)a2 + 201);
        *(void *)(a1 + 208) = *((void *)a2 + 26);
        *(void *)(a1 + 216) = *((void *)a2 + 27);
        *(void *)(a1 + 224) = *((void *)a2 + 28);
        *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
        char v78 = 8;
        goto LABEL_105;
      case 9u:
        *(void *)a1 = *(void *)a2;
        uint64_t v41 = *((void *)a2 + 1);
        swift_retain();
        if (v41)
        {
          uint64_t v42 = *((void *)a2 + 2);
          *(void *)(a1 + 8) = v41;
          *(void *)(a1 + 16) = v42;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
        }
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        uint64_t v67 = (_OWORD *)(a1 + 32);
        long long v68 = a2 + 2;
        uint64_t v69 = *((void *)a2 + 7);
        if (v69)
        {
          *(void *)(a1 + 56) = v69;
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          (**(void (***)(_OWORD *, long long *))(v69 - 8))(v67, v68);
        }
        else
        {
          long long v93 = *v68;
          long long v94 = a2[3];
          *(void *)(a1 + 64) = *((void *)a2 + 8);
          *uint64_t v67 = v93;
          *(_OWORD *)(a1 + 48) = v94;
        }
        *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
        *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        *(void *)(a1 + 88) = *((void *)a2 + 11);
        *(void *)(a1 + 96) = *((void *)a2 + 12);
        *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
        char v78 = 9;
LABEL_105:
        *(unsigned char *)(a1 + 233) = v78;
        swift_retain();
        swift_retain();
        swift_retain();
        break;
      default:
        long long v8 = *a2;
        long long v9 = a2[2];
        *(_OWORD *)(a1 + 16) = a2[1];
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)a1 = v8;
        long long v10 = a2[3];
        long long v11 = a2[4];
        long long v12 = a2[6];
        *(_OWORD *)(a1 + 80) = a2[5];
        *(_OWORD *)(a1 + 96) = v12;
        *(_OWORD *)(a1 + 48) = v10;
        *(_OWORD *)(a1 + 64) = v11;
        long long v13 = a2[7];
        long long v14 = a2[8];
        long long v15 = a2[10];
        *(_OWORD *)(a1 + 144) = a2[9];
        *(_OWORD *)(a1 + 160) = v15;
        *(_OWORD *)(a1 + 112) = v13;
        *(_OWORD *)(a1 + 128) = v14;
        long long v16 = a2[11];
        long long v17 = a2[12];
        long long v18 = a2[13];
        *(_OWORD *)(a1 + 218) = *(long long *)((char *)a2 + 218);
        *(_OWORD *)(a1 + 192) = v17;
        *(_OWORD *)(a1 + 208) = v18;
        *(_OWORD *)(a1 + 176) = v16;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationState.Base(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 234)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 233);
  if (v3 >= 0xB) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PresentationState.Base(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 218) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 234) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 234) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 233) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PresentationState.Base(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 233);
  if (result >= 0xA) {
    return (*(_DWORD *)a1 + 10);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for PresentationState.Base(uint64_t result, unsigned int a2)
{
  if (a2 > 9)
  {
    *(_OWORD *)(result + 217) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 10;
    LOBYTE(a2) = 10;
  }
  *(unsigned char *)(result + 233) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PresentationState.Base()
{
  return &type metadata for PresentationState.Base;
}

Swift::Void __swiftcall PresentationState.dismiss(willPresentAgain:hasNoModifier:)(Swift::Bool willPresentAgain, Swift::Bool hasNoModifier)
{
  uint64_t v3 = v2;
  outlined init with copy of PresentationState.Base(v3, (uint64_t)v12);
  if (v16 < 2u)
  {
    id v6 = v14;
    long long v21 = v12[4];
    v22[0] = v13[0];
    *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v13 + 9);
    long long v17 = v12[0];
    long long v18 = v12[1];
    long long v19 = v12[2];
    long long v20 = v12[3];
    if (hasNoModifier && (static SemanticFeature.isEnabled.getter() & 1) != 0)
    {

      char v7 = 4;
      long long v8 = v12;
    }
    else
    {
      long long v8 = (_OWORD *)((char *)v12 + 8);
      *(void *)&v12[0] = v6;
      if (willPresentAgain) {
        char v7 = 5;
      }
      else {
        char v7 = 2;
      }
    }
    long long v9 = v22[0];
    v8[4] = v21;
    v8[5] = v9;
    *(_OWORD *)((char *)v8 + 89) = *(_OWORD *)((char *)v22 + 9);
    long long v10 = v18;
    *long long v8 = v17;
    v8[1] = v10;
    long long v11 = v20;
    _OWORD v8[2] = v19;
    v8[3] = v11;
    unsigned __int8 v16 = v7;
    PresentationState.base.willset((uint64_t)v12);
    outlined assign with take of PresentationState.Base((uint64_t)v12, v3);
  }
  else
  {
    if (v16 == 4)
    {
LABEL_5:
      outlined destroy of SheetPreference((uint64_t)v12);
      return;
    }
    if (v16 == 8)
    {

      outlined destroy of SheetPreference((uint64_t)&v15);
      goto LABEL_5;
    }
    outlined destroy of PresentationState.Base((uint64_t)v12);
  }
}

uint64_t PresentationState.isDismissalPreemptable.getter()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)&v3);
  uint64_t result = 0;
  switch(v6[105])
  {
    case 2:
    case 3:

      outlined destroy of SheetPreference((uint64_t)v4);
      return 1;
    case 4:
    case 6:
      goto LABEL_7;
    case 5:

      uint64_t v2 = (id *)v4;
      goto LABEL_8;
    case 7:
    case 9:
      outlined destroy of PresentationState.Base((uint64_t)&v3);
      return 0;
    case 8:

      outlined destroy of SheetPreference((uint64_t)v6);
      goto LABEL_7;
    case 0xA:
      return result;
    default:

LABEL_7:
      uint64_t v2 = &v3;
LABEL_8:
      outlined destroy of SheetPreference((uint64_t)v2);
      return 0;
  }
}

uint64_t PresentationState.enqueueDelayedPresentation(_:animated:)(uint64_t a1, char a2)
{
  PresentationState.Base.lastPresentation.getter((uint64_t)v6);
  if (!*(void *)&v6[0]) {
    return _ss11AnyHashableVSgWOhTm_3((uint64_t)v6, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  }
  v11[4] = v6[4];
  v12[0] = v7[0];
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)v7 + 9);
  v11[0] = v6[0];
  v11[1] = v6[1];
  _OWORD v11[2] = v6[2];
  v11[3] = v6[3];
  outlined init with copy of SheetPreference(a1, (uint64_t)v6);
  uint64_t v8 = PresentationState.Base.presentedVC.getter();
  char v9 = a2 & 1;
  outlined init with copy of SheetPreference((uint64_t)v11, (uint64_t)v10);
  v10[105] = 8;
  PresentationState.base.willset((uint64_t)v6);
  outlined assign with take of PresentationState.Base((uint64_t)v6, v2);
  return outlined destroy of SheetPreference((uint64_t)v11);
}

Swift::Void __swiftcall PresentationState.presentationDidBeginInteractiveDismissal()()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)v5);
  switch(v7)
  {
    case 2:
    case 3:
    case 5:

      uint64_t v1 = &v5[8];
      goto LABEL_6;
    case 4:
    case 6:
      goto LABEL_5;
    case 7:

      return;
    case 8:

      outlined destroy of SheetPreference((uint64_t)&v6);
LABEL_5:
      uint64_t v1 = v5;
LABEL_6:
      outlined destroy of SheetPreference((uint64_t)v1);
      break;
    case 9:
      outlined destroy of PresentationState.Base((uint64_t)v5);
      break;
    case 10:
      return;
    default:
      long long v2 = *(_OWORD *)&v5[64];
      long long v12 = *(_OWORD *)&v5[64];
      v13[0] = *(_OWORD *)&v5[80];
      *(_OWORD *)((char *)v13 + 9) = *(_OWORD *)&v5[89];
      long long v3 = *(_OWORD *)v5;
      long long v8 = *(_OWORD *)v5;
      long long v9 = *(_OWORD *)&v5[16];
      long long v4 = *(_OWORD *)&v5[32];
      long long v10 = *(_OWORD *)&v5[32];
      long long v11 = *(_OWORD *)&v5[48];
      *(void *)id v5 = *(void *)&v5[112];
      *(_OWORD *)&v5[56] = *(_OWORD *)&v5[48];
      *(_OWORD *)&unsigned char v5[72] = v2;
      *(_OWORD *)&v5[88] = v13[0];
      *(_OWORD *)&v5[97] = *(_OWORD *)((char *)v13 + 9);
      *(_OWORD *)&v5[8] = v3;
      *(_OWORD *)&v5[24] = v9;
      *(_OWORD *)&unsigned char v5[40] = v4;
      char v7 = 3;
      PresentationState.base.willset((uint64_t)v5);
      outlined assign with take of PresentationState.Base((uint64_t)v5, v0);
      break;
  }
}

double PresentationState.delayedPresentation.getter@<D0>(uint64_t a1@<X8>)
{
  outlined init with copy of PresentationState.Base(v1, (uint64_t)v9);
  if (v13[105] == 8)
  {
    uint64_t v3 = v11;
    char v4 = v12;
    long long v5 = v10[0];
    *(_OWORD *)(a1 + 64) = v9[4];
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)((char *)v10 + 9);
    long long v6 = v9[1];
    *(_OWORD *)a1 = v9[0];
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = v9[3];
    *(_OWORD *)(a1 + 32) = v9[2];
    *(_OWORD *)(a1 + 48) = v7;
    outlined destroy of SheetPreference((uint64_t)v13);
    *(void *)(a1 + 112) = v3;
    *(unsigned char *)(a1 + 120) = v4;
  }
  else
  {
    outlined destroy of PresentationState.Base((uint64_t)v9);
    double result = 0.0;
    *(_OWORD *)(a1 + 105) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

Swift::Void __swiftcall PresentationState.presentationDidDisappear()()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)&v7);
  switch(v15)
  {
    case 2:
    case 3:

      outlined destroy of SheetPreference((uint64_t)&v7 + 8);
      goto LABEL_10;
    case 4:
    case 6:
      goto LABEL_3;
    case 5:
      uint64_t v1 = (char *)&v7 + 8;
      v3[0] = v7;
      char v4 = 7;
      id v2 = (id)v7;
      PresentationState.base.willset((uint64_t)v3);
      outlined assign with take of PresentationState.Base((uint64_t)v3, v0);

      goto LABEL_7;
    case 7:

      goto LABEL_10;
    case 8:

      uint64_t v1 = v14;
      v5[4] = v11;
      v6[0] = v12[0];
      *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v12 + 9);
      v5[0] = v7;
      v5[1] = v8;
      _OWORD v5[2] = v9;
      void v5[3] = v10;
      outlined init with copy of SheetPreference((uint64_t)v5, (uint64_t)v3);
      char v4 = 9;
      PresentationState.base.willset((uint64_t)v3);
      outlined assign with take of PresentationState.Base((uint64_t)v3, v0);
      outlined destroy of SheetPreference((uint64_t)v5);
LABEL_7:
      outlined destroy of SheetPreference((uint64_t)v1);
      return;
    case 9:
      outlined destroy of PresentationState.Base((uint64_t)&v7);
      goto LABEL_10;
    case 10:
      goto LABEL_10;
    default:

LABEL_3:
      outlined destroy of SheetPreference((uint64_t)&v7);
LABEL_10:
      memset(v14, 0, sizeof(v14));
      long long v13 = 0u;
      long long v11 = 0u;
      memset(v12, 0, sizeof(v12));
      long long v9 = 0u;
      long long v10 = 0u;
      long long v7 = 0u;
      long long v8 = 0u;
      char v15 = 10;
      PresentationState.base.willset((uint64_t)&v7);
      outlined assign with take of PresentationState.Base((uint64_t)&v7, v0);
      return;
  }
}

Swift::Void __swiftcall PresentationState.dismissInspector()()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)v1);
  if (v4 >= 2u)
  {
    if (v4 == 6) {
      outlined destroy of SheetPreference((uint64_t)v1);
    }
    else {
      outlined destroy of PresentationState.Base((uint64_t)v1);
    }
  }
  else
  {

    *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)&v2[9];
    long long v9 = v1[4];
    v10[0] = *(_OWORD *)v2;
    long long v7 = v1[2];
    long long v8 = v1[3];
    long long v5 = v1[0];
    long long v6 = v1[1];
    *(_OWORD *)&v2[9] = *(_OWORD *)((char *)v10 + 9);
    unsigned __int8 v4 = 6;
    PresentationState.base.willset((uint64_t)v1);
    outlined assign with take of PresentationState.Base((uint64_t)v1, v0);
  }
}

uint64_t PresentationState.Base.description.getter()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)v100);
  uint64_t v1 = (void *)0xEE006E6F69746174;
  uint64_t v2 = 0x6E65736572506F6ELL;
  switch(v108)
  {
    case 1:
      id v3 = *(void **)&v100[112];
      int v4 = v101;
      long long v98 = *(_OWORD *)&v100[64];
      v99[0] = *(_OWORD *)&v100[80];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[89];
      long long v94 = *(_OWORD *)v100;
      long long v95 = *(_OWORD *)&v100[16];
      long long v96 = *(_OWORD *)&v100[32];
      long long v97 = *(_OWORD *)&v100[48];
      *(void *)&v92[0] = 0;
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      *(void *)&long long v73 = 0x65746E6573657270;
      *((void *)&v73 + 1) = 0xEA00000000002864;
      outlined init with copy of SheetPreference((uint64_t)&v94, (uint64_t)v92);
      outlined init with copy of SheetPreference?((uint64_t)v92, (uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((void)v80)
      {
        long long v90 = v84;
        v91[0] = v85[0];
        *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)((char *)v85 + 9);
        long long v86 = v80;
        long long v87 = v81;
        long long v88 = v82;
        long long v89 = v83;
        *(void *)&long long v80 = *((void *)&v81 + 1);
        uint64_t v9 = String.init<A>(describing:)();
        long long v11 = v10;
        outlined destroy of SheetPreference((uint64_t)&v86);
      }
      else
      {
        uint64_t v9 = 7104878;
        _ss11AnyHashableVSgWOhTm_3((uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        long long v11 = (void *)0xE300000000000000;
      }
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v92, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v50._countAndFlagsBits = v9;
      v50._object = v11;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._countAndFlagsBits = 0x6E6573657270202CLL;
      v51._object = (void *)0xEF203A4356646574;
      String.append(_:)(v51);
      *(void *)&v92[0] = v3;
      v52._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      v53._countAndFlagsBits = 0x203A646565732029;
      v53._object = (void *)0xE800000000000000;
      String.append(_:)(v53);
      if (v4 == -1) {
        goto LABEL_35;
      }
      if (!v4) {
        goto LABEL_30;
      }
      goto LABEL_34;
    case 2:
      uint64_t v12 = 7104878;
      long long v13 = *(void **)v100;
      long long v98 = *(_OWORD *)&v100[72];
      v99[0] = *(_OWORD *)&v100[88];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[97];
      long long v94 = *(_OWORD *)&v100[8];
      long long v95 = *(_OWORD *)&v100[24];
      long long v96 = *(_OWORD *)&v100[40];
      long long v97 = *(_OWORD *)&v100[56];
      *(void *)&v92[0] = 0;
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v14 = 0xD00000000000001BLL;
      char v15 = "programmaticallyDismissing(";
      goto LABEL_8;
    case 3:
      uint64_t v12 = 7104878;
      long long v13 = *(void **)v100;
      long long v98 = *(_OWORD *)&v100[72];
      v99[0] = *(_OWORD *)&v100[88];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[97];
      long long v94 = *(_OWORD *)&v100[8];
      long long v95 = *(_OWORD *)&v100[24];
      long long v96 = *(_OWORD *)&v100[40];
      long long v97 = *(_OWORD *)&v100[56];
      *(void *)&v92[0] = 0;
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      unint64_t v14 = 0xD000000000000018;
      char v15 = "interactivelyDismissing(";
LABEL_8:
      *(void *)&long long v73 = v14;
      *((void *)&v73 + 1) = (unint64_t)(v15 - 32) | 0x8000000000000000;
      if (v13)
      {
        *(void *)&v92[0] = v13;
        uint64_t v16 = String.init<A>(describing:)();
        unint64_t v18 = v17;
      }
      else
      {
        unint64_t v18 = 0xE300000000000000;
        uint64_t v16 = 7104878;
      }
      unint64_t v38 = v18;
      String.append(_:)(*(Swift::String *)&v16);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x203A7473616C202CLL;
      v39._object = (void *)0xE800000000000000;
      String.append(_:)(v39);
      outlined init with copy of SheetPreference((uint64_t)&v94, (uint64_t)v92);
      outlined init with copy of SheetPreference?((uint64_t)v92, (uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((void)v80) {
        goto LABEL_24;
      }
      goto LABEL_25;
    case 4:
      long long v98 = *(_OWORD *)&v100[64];
      v99[0] = *(_OWORD *)&v100[80];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[89];
      long long v94 = *(_OWORD *)v100;
      long long v95 = *(_OWORD *)&v100[16];
      long long v96 = *(_OWORD *)&v100[32];
      long long v97 = *(_OWORD *)&v100[48];
      *(void *)&v92[0] = 0;
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v19 = 0xD00000000000001CLL;
      long long v20 = "dismissingForLackOfModifier(";
      goto LABEL_18;
    case 5:
      long long v13 = *(void **)v100;
      long long v98 = *(_OWORD *)&v100[72];
      v99[0] = *(_OWORD *)&v100[88];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[97];
      long long v94 = *(_OWORD *)&v100[8];
      long long v95 = *(_OWORD *)&v100[24];
      long long v96 = *(_OWORD *)&v100[40];
      long long v97 = *(_OWORD *)&v100[56];
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      *(void *)&long long v73 = 0xD000000000000019;
      *((void *)&v73 + 1) = 0x800000018833E7C0;
      *(void *)&v92[0] = v13;
      v21._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 0x203A7473616C202CLL;
      v22._object = (void *)0xE800000000000000;
      String.append(_:)(v22);
      outlined init with copy of SheetPreference((uint64_t)&v94, (uint64_t)v92);
      outlined init with copy of SheetPreference?((uint64_t)v92, (uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((void)v80)
      {
LABEL_24:
        long long v90 = v84;
        v91[0] = v85[0];
        *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)((char *)v85 + 9);
        long long v86 = v80;
        long long v87 = v81;
        long long v88 = v82;
        long long v89 = v83;
        *(void *)&long long v80 = *((void *)&v81 + 1);
        uint64_t v12 = String.init<A>(describing:)();
        uint64_t v41 = v40;
        outlined destroy of SheetPreference((uint64_t)&v86);
      }
      else
      {
        uint64_t v12 = 7104878;
LABEL_25:
        _ss11AnyHashableVSgWOhTm_3((uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        uint64_t v41 = (void *)0xE300000000000000;
      }
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v92, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v42._countAndFlagsBits = v12;
      v42._object = v41;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._countAndFlagsBits = 41;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);

      goto LABEL_37;
    case 6:
      long long v98 = *(_OWORD *)&v100[64];
      v99[0] = *(_OWORD *)&v100[80];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[89];
      long long v94 = *(_OWORD *)v100;
      long long v95 = *(_OWORD *)&v100[16];
      long long v96 = *(_OWORD *)&v100[32];
      long long v97 = *(_OWORD *)&v100[48];
      *(void *)&v92[0] = 0;
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      unint64_t v19 = 0xD000000000000011;
      long long v20 = "dormantInspector(";
      goto LABEL_18;
    case 7:
      id v23 = *(void **)v100;
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      *(void *)&long long v94 = 0xD000000000000016;
      *((void *)&v94 + 1) = 0x800000018833E7A0;
      *(void *)&v92[0] = v23;
      v24._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 41;
      v25._object = (void *)0xE100000000000000;
      String.append(_:)(v25);

      uint64_t v1 = (void *)0x800000018833E7A0;
      uint64_t v2 = 0xD000000000000016;
      goto LABEL_39;
    case 8:
      uint64_t v26 = 7104878;
      id v27 = *(void **)&v100[112];
      int v28 = v101;
      long long v98 = *(_OWORD *)&v100[64];
      v99[0] = *(_OWORD *)&v100[80];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[89];
      long long v94 = *(_OWORD *)v100;
      long long v95 = *(_OWORD *)&v100[16];
      long long v96 = *(_OWORD *)&v100[32];
      long long v97 = *(_OWORD *)&v100[48];
      v92[4] = v106;
      v93[0] = *(_OWORD *)v107;
      *(_OWORD *)((char *)v93 + 9) = *(_OWORD *)&v107[9];
      v92[0] = v102;
      v92[1] = v103;
      v92[2] = v104;
      v92[3] = v105;
      *(void *)&long long v86 = 0;
      *((void *)&v86 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(71);
      long long v79 = v86;
      v29._countAndFlagsBits = 0xD00000000000001BLL;
      v29._object = (void *)0x800000018833E780;
      String.append(_:)(v29);
      outlined init with copy of SheetPreference((uint64_t)&v94, (uint64_t)&v86);
      outlined init with copy of SheetPreference?((uint64_t)&v86, (uint64_t)&v73, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((void)v73)
      {
        long long v84 = v77;
        v85[0] = v78[0];
        *(_OWORD *)((char *)v85 + 9) = *(_OWORD *)((char *)v78 + 9);
        long long v80 = v73;
        long long v81 = v74;
        long long v82 = v75;
        long long v83 = v76;
        *(void *)&long long v73 = *((void *)&v74 + 1);
        uint64_t v30 = String.init<A>(describing:)();
        uint64_t v32 = v31;
        outlined destroy of SheetPreference((uint64_t)&v80);
      }
      else
      {
        _ss11AnyHashableVSgWOhTm_3((uint64_t)&v73, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        uint64_t v32 = (void *)0xE300000000000000;
        uint64_t v30 = 7104878;
      }
      _ss11AnyHashableVSgWOhTm_3((uint64_t)&v86, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v58._countAndFlagsBits = v30;
      v58._object = v32;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      v59._countAndFlagsBits = 0x6E6573657270202CLL;
      v59._object = (void *)0xEF203A4356646574;
      String.append(_:)(v59);
      if (v27)
      {
        *(void *)&long long v86 = v27;
        uint64_t v60 = String.init<A>(describing:)();
        unint64_t v62 = v61;
      }
      else
      {
        unint64_t v62 = 0xE300000000000000;
        uint64_t v60 = 7104878;
      }
      unint64_t v63 = v62;
      String.append(_:)(*(Swift::String *)&v60);
      swift_bridgeObjectRelease();
      v64._countAndFlagsBits = 0x74616D696E61202CLL;
      v64._object = (void *)0xEC000000203A6465;
      String.append(_:)(v64);
      if (v28) {
        uint64_t v65 = 1702195828;
      }
      else {
        uint64_t v65 = 0x65736C6166;
      }
      if (v28) {
        unint64_t v66 = 0xE400000000000000;
      }
      else {
        unint64_t v66 = 0xE500000000000000;
      }
      unint64_t v67 = v66;
      String.append(_:)(*(Swift::String *)&v65);
      swift_bridgeObjectRelease();
      v68._countAndFlagsBits = 0x203A7473616C202CLL;
      v68._object = (void *)0xE800000000000000;
      String.append(_:)(v68);
      outlined init with copy of SheetPreference((uint64_t)v92, (uint64_t)&v86);
      outlined init with copy of SheetPreference?((uint64_t)&v86, (uint64_t)&v73, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((void)v73)
      {
        long long v84 = v77;
        v85[0] = v78[0];
        *(_OWORD *)((char *)v85 + 9) = *(_OWORD *)((char *)v78 + 9);
        long long v80 = v73;
        long long v81 = v74;
        long long v82 = v75;
        long long v83 = v76;
        *(void *)&long long v73 = *((void *)&v74 + 1);
        uint64_t v26 = String.init<A>(describing:)();
        long long v70 = v69;
        outlined destroy of SheetPreference((uint64_t)&v80);
      }
      else
      {
        _ss11AnyHashableVSgWOhTm_3((uint64_t)&v73, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        long long v70 = (void *)0xE300000000000000;
      }
      _ss11AnyHashableVSgWOhTm_3((uint64_t)&v86, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v71._countAndFlagsBits = v26;
      v71._object = v70;
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      v72._countAndFlagsBits = 41;
      v72._object = (void *)0xE100000000000000;
      String.append(_:)(v72);

      uint64_t v1 = (void *)*((void *)&v79 + 1);
      uint64_t v2 = v79;
      outlined destroy of SheetPreference((uint64_t)v92);
      goto LABEL_38;
    case 9:
      long long v98 = *(_OWORD *)&v100[64];
      v99[0] = *(_OWORD *)&v100[80];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[89];
      long long v94 = *(_OWORD *)v100;
      long long v95 = *(_OWORD *)&v100[16];
      long long v96 = *(_OWORD *)&v100[32];
      long long v97 = *(_OWORD *)&v100[48];
      *(void *)&v92[0] = 0;
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      unint64_t v19 = 0xD000000000000024;
      long long v20 = "waitingToPresentDelayedPresentation(";
LABEL_18:
      *(void *)&long long v73 = v19;
      *((void *)&v73 + 1) = (unint64_t)(v20 - 32) | 0x8000000000000000;
      outlined init with copy of SheetPreference((uint64_t)&v94, (uint64_t)v92);
      outlined init with copy of SheetPreference?((uint64_t)v92, (uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((void)v80)
      {
        long long v90 = v84;
        v91[0] = v85[0];
        *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)((char *)v85 + 9);
        long long v86 = v80;
        long long v87 = v81;
        long long v88 = v82;
        long long v89 = v83;
        *(void *)&long long v80 = *((void *)&v81 + 1);
        uint64_t v33 = String.init<A>(describing:)();
        uint64_t v35 = v34;
        outlined destroy of SheetPreference((uint64_t)&v86);
      }
      else
      {
        uint64_t v33 = 7104878;
        _ss11AnyHashableVSgWOhTm_3((uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        uint64_t v35 = (void *)0xE300000000000000;
      }
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v92, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v36._countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = 41;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      goto LABEL_37;
    case 10:
      goto LABEL_39;
    default:
      id v3 = *(void **)&v100[112];
      int v4 = v101;
      long long v98 = *(_OWORD *)&v100[64];
      v99[0] = *(_OWORD *)&v100[80];
      *(_OWORD *)((char *)v99 + 9) = *(_OWORD *)&v100[89];
      long long v94 = *(_OWORD *)v100;
      long long v95 = *(_OWORD *)&v100[16];
      long long v96 = *(_OWORD *)&v100[32];
      long long v97 = *(_OWORD *)&v100[48];
      *(void *)&v92[0] = 0;
      *((void *)&v92[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(51);
      long long v73 = v92[0];
      v5._object = (void *)0x800000018833E840;
      v5._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v5);
      outlined init with copy of SheetPreference((uint64_t)&v94, (uint64_t)v92);
      outlined init with copy of SheetPreference?((uint64_t)v92, (uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if ((void)v80)
      {
        long long v90 = v84;
        v91[0] = v85[0];
        *(_OWORD *)((char *)v91 + 9) = *(_OWORD *)((char *)v85 + 9);
        long long v86 = v80;
        long long v87 = v81;
        long long v88 = v82;
        long long v89 = v83;
        *(void *)&long long v80 = *((void *)&v81 + 1);
        uint64_t v6 = String.init<A>(describing:)();
        long long v8 = v7;
        outlined destroy of SheetPreference((uint64_t)&v86);
      }
      else
      {
        uint64_t v6 = 7104878;
        _ss11AnyHashableVSgWOhTm_3((uint64_t)&v80, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
        long long v8 = (void *)0xE300000000000000;
      }
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v92, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      v44._countAndFlagsBits = v6;
      v44._object = v8;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._countAndFlagsBits = 0x6E6573657270202CLL;
      v45._object = (void *)0xEF203A4356646574;
      String.append(_:)(v45);
      *(void *)&v92[0] = v3;
      v46._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = 0x203A646565732029;
      v47._object = (void *)0xE800000000000000;
      String.append(_:)(v47);
      if (v4 == -1)
      {
LABEL_35:
        unint64_t v49 = 0xE700000000000000;
        uint64_t v48 = 0x64696C61766E69;
      }
      else if (v4)
      {
LABEL_34:
        LODWORD(v92[0]) = v4;
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v49 = v54;
      }
      else
      {
LABEL_30:
        uint64_t v48 = 0x7974706D65;
        unint64_t v49 = 0xE500000000000000;
      }
      unint64_t v55 = v49;
      String.append(_:)(*(Swift::String *)&v48);

      swift_bridgeObjectRelease();
LABEL_37:
      uint64_t v1 = (void *)*((void *)&v73 + 1);
      uint64_t v2 = v73;
LABEL_38:
      outlined destroy of SheetPreference((uint64_t)&v94);
LABEL_39:
      *(void *)uint64_t v100 = 0x2E65736142;
      *(void *)&v100[8] = 0xE500000000000000;
      v56._countAndFlagsBits = v2;
      v56._object = v1;
      String.append(_:)(v56);
      swift_bridgeObjectRelease();
      return *(void *)v100;
  }
}

uint64_t sub_1880063C4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t static ToolbarEdges.contains(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3) >> (a1 & 1)) & 1;
}

uint64_t static ToolbarEdges.bars.getter(uint64_t a1, uint64_t a2)
{
  int v4 = *(void (**)(void))(a2 + 8);
  v4();
  char v5 = VerticalEdge.Set.contains(_:)();
  uint64_t v6 = MEMORY[0x1E4FBC870];
  if (v5)
  {
    memset(v12, 0, sizeof(v12));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, isUniquelyReferenced_nonNull_native, (uint64_t)v13);
    swift_bridgeObjectRelease();
    _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    memset(v12, 0, 24);
    *(_OWORD *)&v12[24] = xmmword_18838AA10;
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, v8, (uint64_t)v13);
    swift_bridgeObjectRelease();
    _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    memset(v12, 0, 24);
    *(_OWORD *)&v12[24] = xmmword_18834FC50;
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, v9, (uint64_t)v13);
    swift_bridgeObjectRelease();
    _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  }
  ((void (*)(uint64_t, uint64_t))v4)(a1, a2);
  if (VerticalEdge.Set.contains(_:)())
  {
    memset(v12, 0, 24);
    *(_OWORD *)&v12[24] = xmmword_188382680;
    char v10 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v12, v10, (uint64_t)v13);
    swift_bridgeObjectRelease();
    _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  }
  return v6;
}

void specialized ToolbarProxy.callAsFunction<A>(in:placement:range:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v11 = MEMORY[0x1E4FBC860];
  id v7 = *(id *)AGGraphGetInputValue();
  specialized ToolbarBridge.adjustEntries(in:_:)(a1, partial apply for closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:), v8);

  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v9 = *(void *)(v11 + 16);
  if (v9 < a3 || (uint64_t)v9 < a4) {
    goto LABEL_9;
  }
  if ((a4 & 0x8000000000000000) == 0)
  {
    type metadata accessor for ToolbarStorage.Entry(0);
    swift_getKeyPath();
    type metadata accessor for ArraySlice<ToolbarStorage.Entry>(0);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type ArraySlice<ToolbarStorage.Entry> and conformance ArraySlice<A>, type metadata accessor for ArraySlice<ToolbarStorage.Entry>);
    lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
    swift_bridgeObjectRetain();
    ForEach.init(_:idGenerator:content:)();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t InferredToolbarModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ViewModifier_Content();
  uint64_t v5 = *(void *)(a1 + 24);
  type metadata accessor for InferredToolbarModifier.OnScrollStateChange();
  v21[1] = v4;
  type metadata accessor for ModifiedContent();
  uint64_t v21[2] = v3;
  type metadata accessor for EdgesPredicate();
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  swift_getWitnessTable();
  type metadata accessor for StaticIf();
  type metadata accessor for ModifiedContent();
  type metadata accessor for EdgesPredicate();
  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  swift_getWitnessTable();
  type metadata accessor for StaticIf();
  type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = WitnessTable;
  uint64_t v41 = &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v7 = lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  uint64_t v8 = MEMORY[0x1E4F3F738];
  uint64_t v38 = v7;
  uint64_t v39 = MEMORY[0x1E4F3F738];
  uint64_t v36 = v6;
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v9 = swift_getWitnessTable();
  uint64_t v34 = lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  uint64_t v35 = v8;
  uint64_t v32 = v9;
  uint64_t v33 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v10 = v3;
  Swift::String v42 = &type metadata for EnableInferredToolbar;
  uint64_t v43 = type metadata accessor for ToolbarReader();
  uint64_t v44 = v4;
  unint64_t v45 = lazy protocol witness table accessor for type EnableInferredToolbar and conformance EnableInferredToolbar();
  uint64_t v11 = type metadata accessor for StaticIf();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)v21 - v16;
  uint64_t v27 = v10;
  uint64_t v28 = v5;
  uint64_t v29 = v23;
  uint64_t v25 = v10;
  uint64_t v26 = v5;
  uint64_t v18 = WitnessTable;
  StaticIf<>.init(_:then:else:)();
  uint64_t v30 = &protocol witness table for ToolbarReader<A, B>;
  uint64_t v31 = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  unint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v11);
}

uint64_t closure #1 in InferredToolbarModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v55 = a4;
  uint64_t v6 = type metadata accessor for InferredToolbarModifier();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v53 = *(void *)(v52 + 64);
  MEMORY[0x1F4188790](v6);
  Swift::String v51 = (char *)&v44 - v7;
  uint64_t v50 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v56 = (uint64_t)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = v6;
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for InferredToolbarModifier.OnScrollStateChange();
  type metadata accessor for ModifiedContent();
  uint64_t v67 = a2;
  Swift::String v68 = &type metadata for TopToolbarEdges;
  uint64_t v69 = a3;
  long long v70 = &protocol witness table for TopToolbarEdges;
  uint64_t v48 = a3;
  uint64_t v10 = type metadata accessor for EdgesPredicate();
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  uint64_t v12 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v67 = v10;
  Swift::String v68 = v12;
  uint64_t v14 = MEMORY[0x1E4F3F740];
  uint64_t v69 = MEMORY[0x1E4F3F740];
  long long v70 = (_UNKNOWN **)WitnessTable;
  type metadata accessor for StaticIf();
  type metadata accessor for ModifiedContent();
  uint64_t v67 = a2;
  Swift::String v68 = &type metadata for BottomToolbarEdges;
  uint64_t v69 = a3;
  long long v70 = &protocol witness table for BottomToolbarEdges;
  uint64_t v15 = type metadata accessor for EdgesPredicate();
  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  unint64_t v17 = v16;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v67 = v15;
  Swift::String v68 = v17;
  uint64_t v69 = v14;
  long long v70 = (_UNKNOWN **)v18;
  type metadata accessor for StaticIf();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v65 = swift_getWitnessTable();
  unint64_t v66 = &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  uint64_t v22 = MEMORY[0x1E4F3F738];
  uint64_t v63 = v21;
  uint64_t v64 = MEMORY[0x1E4F3F738];
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v61 = v20;
  uint64_t v62 = v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v59 = lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  uint64_t v60 = v22;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v57 = v24;
  uint64_t v58 = v25;
  uint64_t v46 = v19;
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v26 = a2;
  uint64_t v67 = a2;
  Swift::String v68 = (ValueMetadata *)v19;
  uint64_t v27 = v48;
  uint64_t v69 = v48;
  long long v70 = (_UNKNOWN **)v45;
  uint64_t v28 = type metadata accessor for ToolbarReader();
  uint64_t v47 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v44 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v32 = MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v44 - v33;
  uint64_t v35 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v50 + 16))(v56, v54, v26, v32);
  uint64_t v37 = v51;
  uint64_t v36 = v52;
  uint64_t v38 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v35, v49);
  uint64_t v39 = v36;
  unint64_t v40 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v26;
  *(void *)(v41 + 24) = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v41 + v40, v37, v38);
  ToolbarReader.init(edges:content:)(v56, (uint64_t)partial apply for closure #1 in closure #1 in InferredToolbarModifier.body(content:), v41, v26, (uint64_t)v30);
  static ViewBuilder.buildExpression<A>(_:)(v30);
  Swift::String v42 = *(void (**)(char *, uint64_t))(v47 + 8);
  v42(v30, v28);
  static ViewBuilder.buildExpression<A>(_:)(v34);
  return ((uint64_t (*)(char *, uint64_t))v42)(v34, v28);
}

uint64_t closure #1 in closure #1 in InferredToolbarModifier.body(content:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  int v35 = v7;
  uint64_t v34 = v8;
  uint64_t v9 = type metadata accessor for InferredToolbarModifier();
  uint64_t v10 = (uint64_t *)(v6 + *(int *)(v9 + 36));
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  v44[0] = v12;
  v44[1] = v11;
  type metadata accessor for State<InferredToolbarState>(0, &lazy cache variable for type metadata for State<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for _ViewModifier_Content();
  uint64_t v32 = v4;
  uint64_t v33 = v2;
  uint64_t v14 = type metadata accessor for InferredToolbarModifier.OnScrollStateChange();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v43, v45, v13, v14, WitnessTable);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v42[0] = v43[0];
  v42[1] = v43[1];
  _OWORD v42[2] = v43[2];
  InferredToolbarModifier.topSafeArea(toolbar:)(v34, v35, v9);
  memcpy(__dst, v45, sizeof(__dst));
  memcpy(v44, v45, 0x198uLL);
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v17 = type metadata accessor for EdgesPredicate();
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  uint64_t v19 = v18;
  uint64_t v20 = swift_getWitnessTable();
  v40[0] = v17;
  v40[1] = v19;
  v40[2] = MEMORY[0x1E4F3F740];
  v40[3] = v20;
  uint64_t v21 = type metadata accessor for StaticIf();
  uint64_t v38 = WitnessTable;
  uint64_t v39 = &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
  uint64_t v22 = swift_getWitnessTable();
  MEMORY[0x18C113660](__src, v44, v16, v21, v22);
  outlined release of StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>((uint64_t)__dst);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  memcpy(v42, __src, sizeof(v42));
  memcpy(v37, __src, sizeof(v37));
  InferredToolbarModifier.bottomSafeArea(toolbar:)(v34, v35, v9);
  memcpy(v43, v44, sizeof(v43));
  memcpy(v40, v44, 0x240uLL);
  uint64_t v23 = type metadata accessor for ModifiedContent();
  v45[0] = v32;
  v45[1] = &type metadata for BottomToolbarEdges;
  v45[2] = v33;
  v45[3] = &protocol witness table for BottomToolbarEdges;
  uint64_t v24 = type metadata accessor for EdgesPredicate();
  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(255);
  uint64_t v26 = v25;
  uint64_t v27 = swift_getWitnessTable();
  v45[0] = v24;
  v45[1] = v26;
  v45[2] = MEMORY[0x1E4F3F740];
  v45[3] = v27;
  uint64_t v28 = type metadata accessor for StaticIf();
  __src[128] = lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  __src[129] = MEMORY[0x1E4F3F738];
  uint64_t v29 = swift_getWitnessTable();
  __src[126] = v22;
  __src[127] = v29;
  uint64_t v30 = swift_getWitnessTable();
  MEMORY[0x18C113660](v45, v40, v23, v28, v30);
  outlined release of StaticIf<EdgesPredicate<A, BottomToolbarEdges>, _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>((uint64_t)v43);
  outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>((uint64_t)v42);
  memcpy(v44, v45, sizeof(v44));
  memcpy(__src, v45, 0x3F0uLL);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(__src);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>, StaticIf<EdgesPred((uint64_t)v44);
  memcpy(v45, v40, 0x3F0uLL);
  memcpy(__src, v40, 0x3F0uLL);
  static ViewBuilder.buildExpression<A>(_:)(__src);
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>, StaticIf<EdgesPred((uint64_t)v45);
}

uint64_t InferredToolbarModifier.topSafeArea(toolbar:)(uint64_t a1, int a2, uint64_t a3)
{
  InferredToolbarModifier.navigationBar(toolbar:)(a1, a2, __src);
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v4 = static HorizontalAlignment.center.getter();
  char v11 = 0;
  uint64_t v5 = *(void *)(a3 + 24);
  __src[0] = *(void *)(a3 + 16);
  __src[1] = &type metadata for TopToolbarEdges;
  __src[2] = v5;
  __src[3] = &protocol witness table for TopToolbarEdges;
  type metadata accessor for EdgesPredicate();
  memcpy(__src, __dst, 0x178uLL);
  __src[47] = 1;
  __src[48] = 0;
  char v8 = v11;
  char v9 = 0;
  uint64_t v10 = v4;
  type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(0);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  return StaticIf<>.init<>(_:then:)();
}

uint64_t InferredToolbarModifier.bottomSafeArea(toolbar:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  closure #1 in InferredToolbarModifier.bottomBar(toolbar:)(a1, a2, v3, v4, v5, v8);
  uint64_t v6 = static HorizontalAlignment.center.getter();
  char v17 = 0;
  uint64_t v13 = v4;
  uint64_t v14 = &type metadata for BottomToolbarEdges;
  uint64_t v15 = v5;
  uint64_t v16 = &protocol witness table for BottomToolbarEdges;
  type metadata accessor for EdgesPredicate();
  long long v9 = xmmword_18834FC50;
  char v10 = v17;
  char v11 = 2;
  uint64_t v12 = v6;
  type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(0);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>> and conformance _InsetViewModifier<A>, type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>);
  return StaticIf<>.init<>(_:then:)();
}

uint64_t closure #2 in InferredToolbarModifier.body(content:)()
{
  type metadata accessor for InferredToolbarModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v1 = static ViewBuilder.buildExpression<A>(_:)(WitnessTable);

  return static ViewBuilder.buildExpression<A>(_:)(v1);
}

uint64_t InferredToolbarModifier.bar<A>(toolbar:edge:content:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v42 = a4;
  uint64_t v47 = a9;
  type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
  uint64_t v46 = a7;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F40E10]);
  type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  v41[3] = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for VStack();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  char v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v41 - v19;
  unsigned int v48 = a3 & 1;
  uint64_t v21 = 3;
  if ((a3 & 1) == 0) {
    uint64_t v21 = 0;
  }
  memset(v52, 0, 24);
  v52[3] = v21;
  v52[4] = 0;
  int v45 = a2;
  ToolbarProxy.appearance(in:)((uint64_t)v52, (uint64_t)v50);
  int v22 = v51;
  swift_release();
  swift_release();
  swift_release();
  double v23 = 1.0;
  if (v22 == 1) {
    goto LABEL_7;
  }
  uint64_t v24 = a6;
  uint64_t v25 = v48;
  v41[0] = v20;
  v41[1] = a1;
  uint64_t v26 = v24;
  uint64_t v27 = (uint64_t *)(v41[2] + *(int *)(v24 + 36));
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  v50[0] = v29;
  v50[1] = v28;
  type metadata accessor for State<InferredToolbarState>(0, &lazy cache variable for type metadata for State<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, MEMORY[0x1E4F41580]);
  uint64_t result = State.wrappedValue.getter();
  uint64_t v31 = v49;
  if (*(void *)(v49 + 16))
  {
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v25);
    if (v32)
    {
      double v23 = *(double *)(*(void *)(v31 + 56) + 8 * result);
      swift_bridgeObjectRelease();
      a6 = v26;
      uint64_t v20 = (char *)v41[0];
LABEL_7:
      uint64_t v33 = *(void *)(a6 + 16);
      uint64_t v34 = *(void *)(a6 + 24);
      uint64_t v35 = specialized InferredToolbarModifier.backgroundStyle(in:toolbar:opacity:)((uint64_t)v52, v23);
      MEMORY[0x1F4188790](v35);
      uint64_t v36 = v46;
      v41[-10] = v33;
      v41[-9] = v36;
      uint64_t v37 = v43;
      v41[-8] = v34;
      v41[-7] = v37;
      LOBYTE(v41[-6]) = v48;
      *(double *)&v41[-5] = v23;
      uint64_t v38 = v44;
      v41[-4] = v42;
      v41[-3] = v38;
      v41[-2] = v39;
      static HorizontalAlignment.center.getter();
      VStack.init(alignment:spacing:content:)();
      outlined destroy of ToolbarPlacement.Role((uint64_t)v52);
      swift_release();
      swift_getWitnessTable();
      static ViewBuilder.buildExpression<A>(_:)(v17);
      unint64_t v40 = *(void (**)(char *, uint64_t))(v15 + 8);
      v40(v17, v14);
      static ViewBuilder.buildExpression<A>(_:)(v20);
      return ((uint64_t (*)(char *, uint64_t))v40)(v20, v14);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in InferredToolbarModifier.bar<A>(toolbar:edge:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(double)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X7>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v43 = a3;
  uint64_t v37 = a2;
  int v44 = a1;
  uint64_t v45 = a6;
  uint64_t v39 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v36 - v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v36 - v16;
  type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F40E10]);
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v38 = (char *)&v36 - v23;
  v37(v22);
  static Alignment.center.getter();
  View.frame(width:height:alignment:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, a4);
  static Edge.Set.horizontal.getter();
  v54[7] = a5;
  v54[8] = MEMORY[0x1E4F3F698];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v12);
  v54[0] = v43;
  static Edge.Set.all.getter();
  v54[5] = WitnessTable;
  v54[6] = MEMORY[0x1E4F3FA78];
  uint64_t v25 = swift_getWitnessTable();
  View.background<A>(_:ignoresSafeAreaEdges:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v17, v15);
  unint64_t v26 = lazy protocol witness table accessor for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>();
  v54[3] = v25;
  v54[4] = v26;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v28 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v20);
  uint64_t v29 = v40;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v40 + 8);
  v30(v20, v18);
  char v31 = v44 & 1;
  if (v44) {
    double v32 = a7;
  }
  else {
    double v32 = 0.0;
  }
  if (v44) {
    double v33 = 0.0;
  }
  else {
    double v33 = a7;
  }
  double v52 = v32;
  BOOL v53 = (v44 & 1) == 0;
  v54[0] = &v52;
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v20, v28, v18);
  double v50 = v33;
  char v51 = v31;
  v54[1] = v20;
  _OWORD v54[2] = &v50;
  type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
  v49[0] = v34;
  v49[1] = v18;
  v49[2] = v34;
  unint64_t v46 = lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?();
  uint64_t v47 = v27;
  unint64_t v48 = v46;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v54, 3uLL, (uint64_t)v49);
  v30(v28, v18);
  return ((uint64_t (*)(char *, uint64_t))v30)(v20, v18);
}

void *InferredToolbarModifier.navigationBar(toolbar:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  closure #1 in InferredToolbarModifier.navigationBar(toolbar:)(a1, a2, __src);
  lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition();
  uint64_t v4 = AnyTransition.init<A>(_:)();
  uint64_t result = memcpy(a3, __src, 0x170uLL);
  a3[46] = v4;
  return result;
}

void *closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  memset(v21, 0, 40);
  int v6 = ToolbarProxy.visibility(in:)((uint64_t)v21);
  uint64_t v7 = outlined destroy of ToolbarPlacement.Role((uint64_t)v21);
  if (v6 == 2)
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    *(void *)&v15[0] = v16;
    BYTE8(v15[0]) = v17;
    *(void *)&v15[1] = v18;
    BYTE8(v15[1]) = v19;
    long long v15[2] = v20;
    _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi0_((uint64_t)v15);
  }
  else
  {
    MEMORY[0x1F4188790](v7);
    v14[4] = a1;
    void v14[5] = v8;
    v14[6] = a2;
    uint64_t v9 = type metadata accessor for InferredToolbarModifier();
    type metadata accessor for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>();
    uint64_t v11 = v10;
    uint64_t v12 = lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>);
    InferredToolbarModifier.bar<A>(toolbar:edge:content:)(a1, a2, 0, (uint64_t)partial apply for closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:), (uint64_t)v14, v9, v11, v12, (uint64_t)v21);
    memcpy(v15, v21, 0x169uLL);
    _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi_((uint64_t)v15);
  }
  outlined init with take of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage((uint64_t)v15, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
  return memcpy(a3, v21, 0x16AuLL);
}

double closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static VerticalAlignment.center.getter();
  closure #1 in closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)((uint64_t)v9);
  *(_OWORD *)&v10[71] = v9[4];
  *(_OWORD *)&v10[55] = v9[3];
  *(_OWORD *)&v10[119] = v9[7];
  *(_OWORD *)&v10[135] = v9[8];
  *(_OWORD *)&v10[151] = v9[9];
  *(_OWORD *)&v10[167] = v9[10];
  *(_OWORD *)&v10[87] = v9[5];
  *(_OWORD *)&v10[103] = v9[6];
  *(_OWORD *)&v10[7] = v9[0];
  *(_OWORD *)&v10[23] = v9[1];
  *(_OWORD *)&v10[39] = v9[2];
  long long v3 = *(_OWORD *)&v10[144];
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v10[128];
  *(_OWORD *)(a1 + 161) = v3;
  *(_OWORD *)(a1 + 177) = *(_OWORD *)&v10[160];
  long long v4 = *(_OWORD *)&v10[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = v4;
  long long v5 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v5;
  long long v6 = *(_OWORD *)&v10[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v10;
  *(_OWORD *)(a1 + 33) = v6;
  double result = *(double *)&v10[32];
  long long v8 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 192) = *(void *)&v10[175];
  *(_OWORD *)(a1 + 65) = v8;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<X0>(uint64_t a1@<X8>)
{
  memset(v19, 0, 24);
  *(_OWORD *)((char *)&v19[1] + 8) = xmmword_188382680;
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  char v18 = -1;
  ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)v19, (uint64_t)&v15, 0);
  _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)&v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)v19);
  long long v2 = *(_OWORD *)v21;
  uint64_t v13 = v22;
  uint64_t v14 = *(void *)&v21[16];
  long long v12 = v20;
  memset(v19, 0, 40);
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  char v18 = -1;
  ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)v19, (uint64_t)&v15, 0);
  _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)&v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)v19);
  uint64_t v3 = *(void *)&v21[16];
  uint64_t v4 = v22;
  long long v10 = v20;
  long long v11 = *(_OWORD *)v21;
  memset(v19, 0, 24);
  *(_OWORD *)((char *)&v19[1] + 8) = xmmword_18838AA10;
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  char v18 = -1;
  ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)v19, (uint64_t)&v15, 0);
  _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)&v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)v19);
  uint64_t v5 = *(void *)v21;
  uint64_t v6 = v22;
  long long v7 = *(_OWORD *)&v21[8];
  long long v8 = v20;
  LOBYTE(v20) = 1;
  LOBYTE(v15) = 1;
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v11;
  *(void *)(a1 + 96) = v3;
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  *(_OWORD *)(a1 + 128) = v8;
  *(void *)(a1 + 144) = v5;
  *(_OWORD *)(a1 + 152) = v7;
  *(void *)(a1 + 168) = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void *closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  memset(v29, 0, 24);
  *(_OWORD *)&v29[3] = xmmword_188382680;
  int v12 = ToolbarProxy.visibility(in:)((uint64_t)v29);
  uint64_t v13 = outlined destroy of ToolbarPlacement.Role((uint64_t)v29);
  if (v12 == 2)
  {
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    *(void *)&v27[0] = *(void *)&v26[0];
    BYTE8(v27[0]) = BYTE8(v26[0]);
    *(void *)&v27[1] = *(void *)&v26[1];
    BYTE8(v27[1]) = BYTE8(v26[1]);
    v27[2] = v26[2];
    _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi0_((uint64_t)v27);
  }
  else
  {
    MEMORY[0x1F4188790](v13);
    uint64_t v21[2] = a4;
    void v21[3] = a5;
    int v22 = a1;
    int v23 = v14;
    int v24 = a2;
    uint64_t v25 = a3;
    uint64_t v15 = type metadata accessor for InferredToolbarModifier();
    type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>(0);
    uint64_t v17 = v16;
    unint64_t v18 = lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    InferredToolbarModifier.bar<A>(toolbar:edge:content:)(a1, a2, 1, (uint64_t)partial apply for closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:), (uint64_t)v21, v15, v17, v18, (uint64_t)v29);
    memcpy(v26, v29, 0x209uLL);
    LOBYTE(v27[0]) = 2;
    lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition();
    uint64_t v19 = AnyTransition.init<A>(_:)();
    memcpy(v27, v26, sizeof(v27));
    uint64_t v28 = v19;
    _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi_((uint64_t)v27);
  }
  outlined init with take of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage((uint64_t)v27, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
  return memcpy(a6, v29, 0x219uLL);
}

void *closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(void *a1@<X8>)
{
  static VerticalAlignment.center.getter();
  closure #1 in closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)((uint64_t)v3);
  *(_OWORD *)((char *)&v3[48] + 7) = *(_OWORD *)&v3[20];
  *(_OWORD *)((char *)&v3[50] + 7) = *(_OWORD *)&v3[22];
  *(_OWORD *)((char *)&v3[52] + 7) = *(_OWORD *)&v3[24];
  *(_OWORD *)((char *)&v3[54] + 7) = *(_OWORD *)&v3[26];
  *(_OWORD *)((char *)&v3[40] + 7) = *(_OWORD *)&v3[12];
  *(_OWORD *)((char *)&v3[42] + 7) = *(_OWORD *)&v3[14];
  *(_OWORD *)((char *)&v3[44] + 7) = *(_OWORD *)&v3[16];
  *(_OWORD *)((char *)&v3[46] + 7) = *(_OWORD *)&v3[18];
  *(_OWORD *)((char *)&v3[32] + 7) = *(_OWORD *)&v3[4];
  *(_OWORD *)((char *)&v3[34] + 7) = *(_OWORD *)&v3[6];
  *(_OWORD *)((char *)&v3[36] + 7) = *(_OWORD *)&v3[8];
  *(_OWORD *)((char *)&v3[38] + 7) = *(_OWORD *)&v3[10];
  *(_OWORD *)((char *)&v3[28] + 7) = *(_OWORD *)v3;
  *(_OWORD *)((char *)&v3[30] + 7) = *(_OWORD *)&v3[2];
  char v4 = 1;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)__src, 0.0, 1, 0.0, 1);
  outlined release of TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>(v3);
  return memcpy(a1, __src, 0x168uLL);
}

uint64_t closure #1 in closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  long long v37 = xmmword_18838A9E0;
  uint64_t v30 = 11;
  long long v31 = 0u;
  long long v32 = 0u;
  char v33 = 2;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  long long v29 = xmmword_18838A9E0;
  *(void *)uint64_t v38 = 11;
  memset(&v38[8], 0, 32);
  v38[40] = 2;
  uint64_t v2 = ToolbarProxy.count(in:placement:)((uint64_t)&v26, (uint64_t)v38);
  _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)v38, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  uint64_t result = outlined destroy of Toolbar.BarLocation((uint64_t)&v26);
  if (v2 < 2)
  {
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v2 = (unint64_t)v2 >> 1;
  }
  specialized ToolbarProxy.callAsFunction<A>(in:placement:range:)((uint64_t)&v34, (uint64_t)&v30, 0, v2);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v30);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v34);
  long long v22 = *(_OWORD *)v38;
  uint64_t v20 = *(void *)&v38[24];
  uint64_t v21 = *(void *)&v38[16];
  uint64_t v24 = v39;
  uint64_t v25 = *(void *)&v38[40];
  uint64_t v23 = *((void *)&v39 + 1);
  uint64_t v18 = v40;
  uint64_t v19 = *(void *)&v38[32];
  uint64_t v30 = 0;
  long long v31 = 0uLL;
  long long v32 = xmmword_18838A9E0;
  *(void *)uint64_t v38 = 4;
  memset(&v38[8], 0, 32);
  v38[40] = 2;
  uint64_t v4 = ToolbarProxy.count(in:placement:)((uint64_t)&v30, (uint64_t)v38);
  _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)v38, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v30);
  if (v4)
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    long long v37 = xmmword_18838A9E0;
    uint64_t v30 = 4;
    long long v31 = 0u;
    long long v32 = 0u;
    char v33 = 2;
    ToolbarProxy.callAsFunction(in:placement:showSeparator:)((uint64_t)&v34, (uint64_t)&v30, 0);
    _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)&v30, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of Toolbar.BarLocation((uint64_t)&v34);
    uint64_t v6 = *(void *)&v38[8];
    uint64_t v5 = *(void *)v38;
    uint64_t v7 = *(void *)&v38[24];
    uint64_t v4 = *(void *)&v38[16];
    uint64_t v8 = 1;
    char v16 = 1;
    uint64_t v17 = *(void *)&v38[40];
    uint64_t v9 = *(void *)&v38[32];
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v17 = 0;
    char v16 = 0;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  long long v37 = xmmword_18838A9E0;
  uint64_t v30 = 11;
  long long v31 = 0u;
  long long v32 = 0u;
  char v33 = 2;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  long long v29 = xmmword_18838A9E0;
  *(void *)uint64_t v38 = 11;
  memset(&v38[8], 0, 32);
  v38[40] = 2;
  uint64_t v10 = ToolbarProxy.count(in:placement:)((uint64_t)&v26, (uint64_t)v38);
  _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0((uint64_t)v38, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v26);
  if (v10 <= 1) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = (unint64_t)v10 >> 1;
  }
  if (v10 <= 1) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v10;
  }
  specialized ToolbarProxy.callAsFunction<A>(in:placement:range:)((uint64_t)&v34, (uint64_t)&v30, v11, v12);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v30);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v34);
  long long v13 = *(_OWORD *)&v38[16];
  *(_OWORD *)(a1 + 152) = *(_OWORD *)v38;
  *(_OWORD *)(a1 + 168) = v13;
  long long v14 = v39;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)&v38[32];
  uint64_t v15 = v40;
  *(_OWORD *)a1 = v22;
  *(void *)(a1 + 16) = v21;
  *(void *)(a1 + 24) = v20;
  *(void *)(a1 + 32) = v19;
  *(void *)(a1 + 40) = v25;
  *(void *)(a1 + 48) = v24;
  *(void *)(a1 + 56) = v23;
  *(void *)(a1 + 64) = v18;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = v4;
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = v17;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = v16;
  *(_OWORD *)(a1 + 200) = v14;
  *(void *)(a1 + 216) = v15;
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(0, v8, v5);
  outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(0, v8, v5);
  swift_release();
  swift_release();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t static InferredToolbarModifier.OnScrollStateChange._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unsigned char *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  void (*v51)(unsigned char *__return_ptr, uint64_t, long long *);
  uint64_t v52;
  uint64_t v53;
  void *v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  char v64;
  long long v65;
  _OWORD v66[18];
  unsigned char v67[257];
  uint64_t v68;
  int v69;
  uint64_t v70;
  long long v71;
  uint64_t v72;
  uint64_t v73;
  long long v74;
  unint64_t v75;
  int v76;
  uint64_t v77;

  double v52 = a5;
  BOOL v53 = a6;
  uint64_t v50 = a4;
  char v51 = a3;
  uint64_t v54 = a7;
  long long v77 = *MEMORY[0x1E4F143B8];
  LODWORD(v41) = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  unsigned int v10 = *((_DWORD *)a2 + 6);
  unsigned int v11 = *((_DWORD *)a2 + 7);
  unsigned int v12 = *((_DWORD *)a2 + 8);
  unsigned int v13 = *((_DWORD *)a2 + 9);
  uint64_t v15 = a2[5];
  uint64_t v14 = a2[6];
  unsigned int v16 = *((_DWORD *)a2 + 14);
  unsigned int v17 = *((_DWORD *)a2 + 15);
  unsigned int v18 = *((_DWORD *)a2 + 16);
  unsigned int v19 = *((_DWORD *)a2 + 17);
  unsigned int v20 = *((_DWORD *)a2 + 18);
  unsigned int v21 = *((_DWORD *)a2 + 19);
  int v22 = *((_DWORD *)a2 + 20);
  Swift::String v68 = v7;
  uint64_t v60 = v8;
  uint64_t v61 = v11;
  uint64_t v69 = v8;
  long long v70 = v9;
  uint64_t v57 = v12;
  uint64_t v58 = v10;
  *(void *)&Swift::String v71 = __PAIR64__(v11, v10);
  *((void *)&v71 + 1) = __PAIR64__(v13, v12);
  Swift::String v72 = v15;
  long long v73 = v14;
  uint64_t v55 = v22;
  uint64_t v56 = v16;
  *(void *)&long long v74 = __PAIR64__(v17, v16);
  unsigned int v46 = v18;
  unsigned int v47 = v17;
  *((void *)&v74 + 1) = __PAIR64__(v19, v18);
  unsigned int v44 = v20;
  unsigned int v45 = v19;
  long long v75 = __PAIR64__(v21, v20);
  unsigned int v43 = v21;
  long long v76 = v22;
  uint64_t v49 = v7;
  swift_retain();
  uint64_t v59 = v9;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v42 = v14;
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  *(void *)&uint64_t v65 = v68;
  DWORD2(v65) = v69;
  *(void *)&v66[0] = v9;
  *(_OWORD *)((char *)v66 + 8) = v71;
  *((void *)&v66[1] + 1) = v15;
  *(void *)&v66[2] = v14;
  *(_OWORD *)((char *)&v66[2] + 8) = v74;
  *((void *)&v66[3] + 1) = v75;
  LODWORD(v66[4]) = v76;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  v51(v67, v23, &v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v48 = *(void *)v67;
  uint64_t v65 = *(_OWORD *)v67;
  LODWORD(v50) = *(_DWORD *)&v67[12];
  LODWORD(v51) = *(_DWORD *)&v67[8];
  uint64_t v24 = _ViewOutputs.subscript.getter();
  if ((v24 & 0x100000000) == 0)
  {
    LODWORD(v65) = v41;
    uint64_t v41 = v24;
    type metadata accessor for InferredToolbarModifier.OnScrollStateChange();
    type metadata accessor for _GraphValue();
    unsigned int v38 = _GraphValue.value.getter();
    unsigned int v39 = v13;
    *(void *)&uint64_t v65 = v49;
    DWORD2(v65) = v60;
    *(void *)&v66[0] = v59;
    *((void *)&v66[0] + 1) = __PAIR64__(v61, v58);
    *(void *)&v66[1] = __PAIR64__(v13, v57);
    uint64_t v40 = v15;
    *((void *)&v66[1] + 1) = v15;
    *(void *)&v66[2] = v42;
    *((void *)&v66[2] + 1) = __PAIR64__(v47, v56);
    *(void *)&v66[3] = __PAIR64__(v45, v46);
    *((void *)&v66[3] + 1) = __PAIR64__(v43, v44);
    LODWORD(v66[4]) = v55;
    unsigned int v37 = _ViewInputs.position.getter();
    *(void *)&uint64_t v65 = v49;
    DWORD2(v65) = v60;
    *(void *)&v66[0] = v59;
    *((void *)&v66[0] + 1) = __PAIR64__(v61, v58);
    *(void *)&v66[1] = __PAIR64__(v13, v57);
    *((void *)&v66[1] + 1) = v15;
    *(void *)&v66[2] = v42;
    *((void *)&v66[2] + 1) = __PAIR64__(v47, v56);
    *(void *)&v66[3] = __PAIR64__(v45, v46);
    *((void *)&v66[3] + 1) = __PAIR64__(v43, v44);
    LODWORD(v66[4]) = v55;
    unsigned int v36 = _ViewInputs.size.getter();
    *(void *)&uint64_t v65 = v49;
    DWORD2(v65) = v60;
    *(void *)&v66[0] = v59;
    *((void *)&v66[0] + 1) = __PAIR64__(v61, v58);
    *(void *)&v66[1] = __PAIR64__(v13, v57);
    *((void *)&v66[1] + 1) = v15;
    *(void *)&v66[2] = v42;
    *((void *)&v66[2] + 1) = __PAIR64__(v47, v56);
    *(void *)&v66[3] = __PAIR64__(v45, v46);
    *((void *)&v66[3] + 1) = __PAIR64__(v43, v44);
    LODWORD(v66[4]) = v55;
    unsigned int v35 = _ViewInputs.transform.getter();
    *(void *)&uint64_t v65 = v49;
    DWORD2(v65) = v60;
    *(void *)&v66[0] = v59;
    *((void *)&v66[0] + 1) = __PAIR64__(v61, v58);
    *(void *)&v66[1] = __PAIR64__(v13, v57);
    *((void *)&v66[1] + 1) = v15;
    *(void *)&v66[2] = v42;
    *((void *)&v66[2] + 1) = __PAIR64__(v47, v56);
    *(void *)&v66[3] = __PAIR64__(v45, v46);
    *((void *)&v66[3] + 1) = __PAIR64__(v43, v44);
    LODWORD(v66[4]) = v55;
    unsigned int v25 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init()(&v65);
    *(_OWORD *)&v67[196] = v66[11];
    *(_OWORD *)&v67[212] = v66[12];
    *(_OWORD *)&v67[228] = v66[13];
    *(_OWORD *)&v67[241] = *(_OWORD *)((char *)&v66[13] + 13);
    *(_OWORD *)&v67[132] = v66[7];
    *(_OWORD *)&v67[148] = v66[8];
    *(_OWORD *)&v67[164] = v66[9];
    *(_OWORD *)&v67[180] = v66[10];
    *(_OWORD *)&v67[68] = v66[3];
    *(_OWORD *)&v67[84] = v66[4];
    *(_OWORD *)&v67[100] = v66[5];
    *(_OWORD *)&v67[116] = v66[6];
    *(_OWORD *)&v67[4] = v65;
    *(_OWORD *)&v67[20] = v66[0];
    *(_OWORD *)&v67[36] = v66[1];
    *(_OWORD *)&v67[52] = v66[2];
    *(_WORD *)((char *)&v66[1] + 5) = v62;
    BYTE7(v66[1]) = BYTE2(v62);
    uint64_t v26 = memcpy((char *)&v66[1] + 12, v67, 0x101uLL);
    *(void *)&uint64_t v65 = __PAIR64__(v41, v38);
    *((void *)&v65 + 1) = __PAIR64__(v36, v37);
    *(void *)&v66[0] = __PAIR64__(v25, v35);
    *((void *)&v66[0] + 1) = v62;
    LODWORD(v66[1]) = v63;
    BYTE4(v66[1]) = v64;
    DWORD2(v66[1]) = 0;
    MEMORY[0x1F4188790](v26);
    uint64_t v33 = type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for State<InferredToolbarState>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&v32, v33, MEMORY[0x1E4FBC248], v27, MEMORY[0x1E4FBC278], v28);
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v30 = v54;
  *uint64_t v54 = v48;
  int v31 = v50;
  *((_DWORD *)v30 + 2) = v51;
  *((_DWORD *)v30 + 3) = v31;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InferredToolbarModifier<A>.OnScrollStateChange@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unsigned char *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static InferredToolbarModifier.OnScrollStateChange._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InferredToolbarModifier<A>.OnScrollStateChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

double InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init()@<D0>(_OWORD *a1@<X8>)
{
  _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v10);
  outlined init with take of ScrollGeometryState?((uint64_t)v10, (uint64_t)v11);
  outlined init with take of ScrollGeometryState?((uint64_t)v10, (uint64_t)v18);
  long long v2 = v18[5];
  a1[12] = v18[4];
  a1[13] = v2;
  a1[14] = v19[0];
  *(_OWORD *)((char *)a1 + 237) = *(_OWORD *)((char *)v19 + 13);
  long long v3 = v18[1];
  a1[8] = v18[0];
  a1[9] = v3;
  long long v4 = v18[3];
  a1[10] = v18[2];
  a1[11] = v4;
  long long v5 = v15;
  a1[4] = v14;
  a1[5] = v5;
  long long v6 = v17;
  a1[6] = v16;
  a1[7] = v6;
  long long v7 = v11[1];
  *a1 = v11[0];
  a1[1] = v7;
  double result = *(double *)&v12;
  long long v9 = v13;
  a1[2] = v12;
  a1[3] = v9;
  return result;
}

uint64_t InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init(top:bottom:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of ScrollGeometryState?(a1, (uint64_t)v6);
  outlined init with take of ScrollGeometryState?(a2, (uint64_t)v7);
  outlined init with take of ScrollGeometryState?((uint64_t)v6, a3);
  return outlined init with take of ScrollGeometryState?((uint64_t)v7, a3 + 128);
}

uint64_t InferredToolbarModifier.ScrollGeometryActionBinding.modifier.getter()
{
  type metadata accessor for InferredToolbarModifier.OnScrollStateChange();
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t *InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()()
{
  uint64_t v1 = (const void *)v0;
  memcpy(__dst, (const void *)v0, 0x12DuLL);
  int v2 = __dst[10];
  if (v2 == *(_DWORD *)AGGraphGetValue() >> 1)
  {
    outlined init with take of ScrollGeometryState?((uint64_t)&__dst[44], (uint64_t)v89);
    long long v3 = &__dst[12];
  }
  else
  {
    *(_DWORD *)(v0 + 40) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(void *)(v0 + 28) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 36) = 0;
    _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v67);
    outlined init with take of ScrollGeometryState?((uint64_t)v67, (uint64_t)v90);
    outlined init with take of ScrollGeometryState?((uint64_t)v67, (uint64_t)v89);
    InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init(top:bottom:)((uint64_t)v90, (uint64_t)v89, (uint64_t)v92);
    long long v4 = v92[13];
    *(_OWORD *)(v0 + 240) = v92[12];
    *(_OWORD *)(v0 + 256) = v4;
    *(_OWORD *)(v0 + 272) = v92[14];
    *(_OWORD *)(v0 + 285) = *(_OWORD *)((char *)&v92[14] + 13);
    long long v5 = v92[9];
    *(_OWORD *)(v0 + 176) = v92[8];
    *(_OWORD *)(v0 + 192) = v5;
    long long v6 = v92[11];
    *(_OWORD *)(v0 + 208) = v92[10];
    *(_OWORD *)(v0 + 224) = v6;
    long long v7 = v92[5];
    *(_OWORD *)(v0 + 112) = v92[4];
    *(_OWORD *)(v0 + 128) = v7;
    long long v8 = v92[7];
    *(_OWORD *)(v0 + 144) = v92[6];
    *(_OWORD *)(v0 + 160) = v8;
    long long v9 = v92[1];
    *(_OWORD *)(v0 + 48) = v92[0];
    *(_OWORD *)(v0 + 64) = v9;
    long long v10 = v92[3];
    *(_OWORD *)(v0 + 80) = v92[2];
    *(_OWORD *)(v0 + 96) = v10;
    outlined init with take of ScrollGeometryState?((uint64_t)&v92[8], (uint64_t)v89);
    long long v3 = v92;
  }
  outlined init with take of ScrollGeometryState?((uint64_t)v3, (uint64_t)v90);
  type metadata accessor for State<InferredToolbarState>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
  double result = (uint64_t *)AGGraphGetValue();
  if ((v12 & 1) == 0) {
    return result;
  }
  uint64_t v13 = *result;
  swift_bridgeObjectRetain();
  if ((UpdateCycleDetector.dispatch(label:isDebug:)() & 1) == 0) {
    return (uint64_t *)swift_bridgeObjectRelease();
  }
  AGGraphClearUpdate();
  type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v15 = *Value;
  uint64_t v16 = Value[1];
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  uint64_t v17 = AGGraphGetValue();
  long long v42 = *(_OWORD *)v17;
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v19 = *(void *)(v17 + 24);
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  uint64_t v20 = AGGraphGetValue();
  uint64_t v21 = *(void *)v20;
  long long v41 = *(_OWORD *)(v20 + 8);
  uint64_t v22 = *(void *)(v20 + 24);
  uint64_t v23 = *(void *)(v20 + 32);
  swift_retain();
  AGGraphSetUpdate();
  uint64_t v24 = static ScrollGeometryState.zero.getter();
  *(void *)&v92[0] = v15;
  *((void *)&v92[0] + 1) = v16;
  double v25 = MEMORY[0x18C10C240](v24);
  double v27 = v26;
  v92[0] = v42;
  *(void *)&v92[1] = v18;
  *((void *)&v92[1] + 1) = v19;
  double v28 = MEMORY[0x18C114450]();
  *(void *)uint64_t v61 = v21;
  *(_OWORD *)&v61[8] = v41;
  *(void *)&v61[24] = v22;
  *(void *)&long long v62 = v23;
  InferredToolbarModifier.ScrollGeometryActionBinding.findBestStates(in:position:size:transform:)(v13, (uint64_t *)v61, v67, v25, v27, v28, v29);
  swift_bridgeObjectRelease();
  outlined init with take of ScrollGeometryState?((uint64_t)v67, (uint64_t)v85);
  outlined init with take of ScrollGeometryState?((uint64_t)&v69, (uint64_t)v86);
  _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v87);
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v30 + 16;
  outlined init with take of ScrollGeometryState?((uint64_t)v87, v30 + 16);
  outlined init with take of ScrollGeometryState?((uint64_t)v85, (uint64_t)v88);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v88) == 1)
  {
    outlined init with take of ScrollGeometryState?((uint64_t)v90, (uint64_t)v92);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v92) == 1)
    {
      outlined init with take of ScrollGeometryState?((uint64_t)v87, (uint64_t)v77);
      goto LABEL_18;
    }
    long long v74 = v82;
    long long v75 = v83;
    v76[0] = v84[0];
    *(_OWORD *)((char *)v76 + 12) = *(_OWORD *)((char *)v84 + 12);
    long long v70 = v78;
    long long v71 = v79;
    long long v72 = v80;
    long long v73 = v81;
    goto LABEL_16;
  }
  outlined init with take of ScrollGeometryState?((uint64_t)v85, (uint64_t)v67);
  outlined init with take of ScrollGeometryState?((uint64_t)v90, (uint64_t)v92);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v92) == 1) {
    goto LABEL_15;
  }
  outlined init with take of ScrollGeometryState?((uint64_t)v90, (uint64_t)v61);
  long long v51 = v64;
  long long v52 = v65;
  v53[0] = v66[0];
  *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)((char *)v66 + 12);
  long long v47 = *(_OWORD *)v61;
  long long v48 = *(_OWORD *)&v61[16];
  long long v49 = v62;
  long long v50 = v63;
  if ((MEMORY[0x18C111100](v67, &v47) & 1) == 0)
  {
LABEL_15:
    outlined init with take of ScrollGeometryState?((uint64_t)v85, (uint64_t)v67);
    long long v74 = v67[4];
    long long v75 = v67[5];
    v76[0] = v68[0];
    *(_OWORD *)((char *)v76 + 12) = *(_OWORD *)((char *)v68 + 12);
    long long v70 = v67[0];
    long long v71 = v67[1];
    long long v72 = v67[2];
    long long v73 = v67[3];
LABEL_16:
    v92[4] = v74;
    _OWORD v92[5] = v75;
    v92[6] = v76[0];
    *(_OWORD *)((char *)&v92[6] + 12) = *(_OWORD *)((char *)v76 + 12);
    v92[0] = v70;
    v92[1] = v71;
    v92[2] = v72;
    v92[3] = v73;
    _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)v92);
    uint64_t v32 = v92;
    goto LABEL_17;
  }
  uint64_t v32 = v87;
LABEL_17:
  outlined init with take of ScrollGeometryState?((uint64_t)v32, (uint64_t)v77);
LABEL_18:
  outlined init with take of ScrollGeometryState?((uint64_t)v77, (uint64_t)v67);
  outlined init with take of ScrollGeometryState?((uint64_t)v86, (uint64_t)v61);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v61) == 1)
  {
    outlined init with take of ScrollGeometryState?((uint64_t)v89, (uint64_t)v92);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v92) == 1) {
      goto LABEL_25;
    }
    long long v58 = v82;
    long long v59 = v83;
    *(_OWORD *)uint64_t v60 = v84[0];
    *(_OWORD *)&v60[12] = *(_OWORD *)((char *)v84 + 12);
    long long v54 = v78;
    long long v55 = v79;
    long long v33 = v80;
    long long v34 = v81;
  }
  else
  {
    outlined init with take of ScrollGeometryState?((uint64_t)v86, (uint64_t)&v47);
    outlined init with take of ScrollGeometryState?((uint64_t)v89, (uint64_t)v92);
    if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v92) != 1)
    {
      outlined init with take of ScrollGeometryState?((uint64_t)v89, (uint64_t)v45);
      v43[4] = v45[4];
      v43[5] = v45[5];
      v44[0] = v46[0];
      *(_OWORD *)((char *)v44 + 12) = *(_OWORD *)((char *)v46 + 12);
      v43[0] = v45[0];
      v43[1] = v45[1];
      _OWORD v43[2] = v45[2];
      v43[3] = v45[3];
      if (MEMORY[0x18C111100](&v47, v43)) {
        goto LABEL_25;
      }
    }
    outlined init with take of ScrollGeometryState?((uint64_t)v86, (uint64_t)&v47);
    long long v58 = v51;
    long long v59 = v52;
    *(_OWORD *)uint64_t v60 = v53[0];
    *(_OWORD *)&v60[12] = *(_OWORD *)((char *)v53 + 12);
    long long v54 = v47;
    long long v55 = v48;
    long long v33 = v49;
    long long v34 = v50;
  }
  long long v56 = v33;
  long long v57 = v34;
  v92[4] = v58;
  _OWORD v92[5] = v59;
  v92[6] = *(_OWORD *)v60;
  *(_OWORD *)((char *)&v92[6] + 12) = *(_OWORD *)&v60[12];
  v92[0] = v54;
  v92[1] = v55;
  v92[2] = v33;
  v92[3] = v34;
  _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)v92);
  outlined init with take of ScrollGeometryState?((uint64_t)v92, v31);
LABEL_25:
  outlined init with take of ScrollGeometryState?((uint64_t)v77, (uint64_t)&v47);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v47) != 1
    || (outlined init with take of ScrollGeometryState?(v31, (uint64_t)v45),
        outlined init with take of ScrollGeometryState?((uint64_t)v45, (uint64_t)v92),
        _s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v92) != 1))
  {
    AGGraphClearUpdate();
    memcpy(v92, v1, 0x12DuLL);
    uint64_t v35 = InferredToolbarModifier.ScrollGeometryActionBinding.modifier.getter();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    AGGraphSetUpdate();
    uint64_t v40 = (void *)swift_allocObject();
    outlined init with take of ScrollGeometryState?((uint64_t)v67, (uint64_t)(v40 + 2));
    v40[18] = v35;
    v40[19] = v37;
    v40[20] = v39;
    v40[21] = v30;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  swift_release();
  return (uint64_t *)swift_release();
}

unint64_t implicit closure #1 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()()
{
  return 0xD000000000000012;
}

double InferredToolbarModifier.ScrollGeometryActionBinding.findBestStates(in:position:size:transform:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  *(double *)&v53[16] = a6;
  *(double *)&v53[24] = a7;
  *(double *)BOOL v53 = a4;
  *(double *)&v53[8] = a5;
  uint64_t v52 = *a2;
  uint64_t v50 = a2[2];
  uint64_t v51 = a2[1];
  uint64_t v48 = a2[4];
  uint64_t v49 = a2[3];
  InferredToolbarModifier.ScrollGeometryActionBinding.Candidates.init()(v90);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = a1 + (v8 << 7) - 40;
    for (uint64_t i = v8 - 1; ; --i)
    {
      uint64_t v11 = *(void *)(v9 - 56);
      uint64_t v12 = *(void *)(v9 - 48);
      uint64_t v13 = *(void *)(v9 - 40);
      uint64_t v14 = *(void *)(v9 - 32);
      uint64_t v15 = *(void *)(v9 - 24);
      uint64_t v16 = *(void *)(v9 - 16);
      uint64_t v17 = *(void *)(v9 - 8);
      uint64_t v18 = *(void *)v9;
      uint64_t v19 = *(void *)(v9 + 8);
      uint64_t v20 = *(void *)(v9 + 16);
      uint64_t v21 = *(void *)(v9 + 24);
      uint64_t v22 = *(void *)(v9 + 32);
      uint64_t v23 = *(void *)(v9 + 40);
      uint64_t v24 = *(void *)(v9 + 48);
      uint64_t v88 = *(void *)(v9 + 56);
      int v89 = *(_DWORD *)(v9 + 64);
      uint64_t v70 = v11;
      uint64_t v71 = v12;
      uint64_t v72 = v13;
      uint64_t v73 = v14;
      uint64_t v74 = v15;
      uint64_t v75 = v16;
      uint64_t v76 = v17;
      uint64_t v77 = v18;
      uint64_t v61 = v20;
      uint64_t v62 = v19;
      uint64_t v78 = v19;
      uint64_t v79 = v20;
      uint64_t v59 = v22;
      uint64_t v60 = v21;
      uint64_t v80 = v21;
      uint64_t v81 = v22;
      uint64_t v57 = v24;
      uint64_t v58 = v23;
      uint64_t v82 = v23;
      uint64_t v83 = v24;
      uint64_t v84 = *(void *)(v9 + 56);
      int v85 = *(_DWORD *)(v9 + 64);
      ScrollGeometryState.transform.getter();
      uint64_t v25 = v65;
      if (v65 != 1)
      {
        uint64_t v26 = v66;
        uint64_t v27 = v67;
        uint64_t v28 = v68;
        uint64_t v29 = v69;
        CGRect rect = *(CGRect *)v53;
        hostingViewCoordinateSpace.getter();
        uint64_t v70 = v64[0];
        LOBYTE(v75) = 1;
        uint64_t v65 = v52;
        uint64_t v66 = v51;
        uint64_t v67 = v50;
        uint64_t v68 = v49;
        uint64_t v69 = v48;
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)&v70);
        uint64_t v70 = v11;
        uint64_t v71 = v12;
        uint64_t v72 = v13;
        uint64_t v73 = v14;
        uint64_t v74 = v15;
        uint64_t v75 = v16;
        uint64_t v76 = v17;
        uint64_t v77 = v18;
        uint64_t v78 = v62;
        uint64_t v79 = v61;
        uint64_t v80 = v60;
        uint64_t v81 = v59;
        uint64_t v82 = v58;
        uint64_t v83 = v57;
        ScrollGeometry.bounds.getter();
        v86.origin.x = v30;
        v86.origin.CGFloat y = v31;
        v86.size.width = v32;
        v86.size.height = v33;
        hostingViewCoordinateSpace.getter();
        uint64_t v70 = v64[0];
        LOBYTE(v75) = 1;
        uint64_t v65 = v25;
        uint64_t v66 = v26;
        uint64_t v67 = v27;
        uint64_t v68 = v28;
        uint64_t v69 = v29;
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)&v70);
        uint64_t v34 = v18;
        uint64_t v35 = v13;
        CGFloat y = rect.origin.y;
        CGFloat v56 = v86.origin.y;
        uint64_t v54 = v34;
        if (rect.origin.y == v86.origin.y)
        {
          uint64_t v70 = v11;
          uint64_t v71 = v12;
          uint64_t v72 = v35;
          uint64_t v73 = v14;
          uint64_t v74 = v15;
          uint64_t v75 = v16;
          uint64_t v76 = v17;
          uint64_t v77 = v34;
          uint64_t v78 = v62;
          uint64_t v79 = v61;
          uint64_t v80 = v60;
          uint64_t v81 = v59;
          uint64_t v82 = v58;
          uint64_t v83 = v57;
          uint64_t v84 = v88;
          int v85 = v89;
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v70);
          outlined init with take of ScrollGeometryState?((uint64_t)&v70, (uint64_t)v90);
        }
        uint64_t v55 = v17;
        v99.origin.x = rect.origin.x;
        v99.size.width = rect.size.width;
        v99.size.height = rect.size.height;
        v99.origin.CGFloat y = y;
        double MaxY = CGRectGetMaxY(v99);
        v100.origin.x = v86.origin.x;
        v100.size.width = v86.size.width;
        v100.size.height = v86.size.height;
        v100.origin.CGFloat y = v56;
        double v38 = CGRectGetMaxY(v100);
        outlined consume of Transaction?(v25);
        if (MaxY == v38)
        {
          uint64_t v70 = v11;
          uint64_t v71 = v12;
          uint64_t v72 = v35;
          uint64_t v73 = v14;
          uint64_t v74 = v15;
          uint64_t v75 = v16;
          uint64_t v76 = v55;
          uint64_t v77 = v54;
          uint64_t v78 = v62;
          uint64_t v79 = v61;
          uint64_t v80 = v60;
          uint64_t v81 = v59;
          uint64_t v82 = v58;
          uint64_t v83 = v57;
          uint64_t v84 = v88;
          int v85 = v89;
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v70);
          outlined init with take of ScrollGeometryState?((uint64_t)&v70, (uint64_t)v97);
        }
        outlined init with take of ScrollGeometryState?((uint64_t)v90, (uint64_t)&v65);
        outlined init with take of ScrollGeometryState?((uint64_t)&v65, (uint64_t)&v70);
        if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v70) != 1)
        {
          outlined init with take of ScrollGeometryState?((uint64_t)v97, (uint64_t)v63);
          outlined init with take of ScrollGeometryState?((uint64_t)v63, (uint64_t)v64);
          if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v64) != 1) {
            break;
          }
        }
      }
      if (!i) {
        break;
      }
      v9 -= 128;
    }
    swift_bridgeObjectRelease();
  }
  long long v39 = v97[5];
  a3[12] = v97[4];
  a3[13] = v39;
  a3[14] = v98[0];
  *(_OWORD *)((char *)a3 + 237) = *(_OWORD *)((char *)v98 + 13);
  long long v40 = v97[1];
  a3[8] = v97[0];
  a3[9] = v40;
  long long v41 = v97[3];
  a3[10] = v97[2];
  a3[11] = v41;
  long long v42 = v94;
  a3[4] = v93;
  a3[5] = v42;
  long long v43 = v96;
  a3[6] = v95;
  a3[7] = v43;
  long long v44 = v90[1];
  *a3 = v90[0];
  a3[1] = v44;
  double result = *(double *)&v91;
  long long v46 = v92;
  a3[2] = v91;
  a3[3] = v46;
  return result;
}

uint64_t specialized closure #5 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a5 + 16;
  outlined init with take of ScrollGeometryState?(a1, (uint64_t)v20);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v20) != 1)
  {
    long long v17 = v20[4];
    long long v18 = v20[5];
    long long v19 = v20[6];
    long long v13 = v20[0];
    long long v14 = v20[1];
    long long v15 = v20[2];
    long long v16 = v20[3];
    v12[0] = a2;
    v12[1] = a3;
    _OWORD v12[2] = a4;
    type metadata accessor for State<InferredToolbarState>(0, &lazy cache variable for type metadata for Binding<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](v11);
    InferredToolbarState.update(edge:to:)(0);
    v12[0] = *(void *)&v11[0];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  outlined init with take of ScrollGeometryState?(v8, (uint64_t)v12);
  outlined init with take of ScrollGeometryState?((uint64_t)v12, (uint64_t)&v13);
  uint64_t result = _s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v13);
  if (result != 1)
  {
    v11[0] = v13;
    v11[1] = v14;
    _OWORD v11[2] = v15;
    v11[3] = v16;
    v11[4] = v17;
    _OWORD v11[5] = v18;
    v11[6] = v19;
    type metadata accessor for State<InferredToolbarState>(0, &lazy cache variable for type metadata for Binding<InferredToolbarState>, (uint64_t)&type metadata for InferredToolbarState, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v10);
    InferredToolbarState.update(edge:to:)(1);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t static InferredToolbarState.Storage.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge();
  uint64_t v9 = MEMORY[0x1E4F3F658];

  return MEMORY[0x1F41834E0](a1, a2, v9, a3, v8, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InferredToolbarState.Storage<A>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return static InferredToolbarState.Storage.== infix(_:_:)(*a1, *a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InferredToolbarState(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static ToolbarEdges.edges.getter in conformance AllToolbarEdges()
{
  return MEMORY[0x1F40FDA18]();
}

BOOL static EdgesPredicate.evaluate(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a2, a4);
  return ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5) & ~v7) == 0;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EdgesPredicate<A, B>(uint64_t a1, uint64_t *a2)
{
  return static EdgesPredicate.evaluate(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance InferredToolbarUserDefaultFeature())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance InferredToolbarUserDefaultFeature()
{
  lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance InferredToolbarUserDefaultFeature()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance InferredToolbarUserDefaultFeature@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t View.inferToolbar()(uint64_t a1, uint64_t a2)
{
  v6[0] = specialized InferredToolbarState.init()();
  v6[1] = 0;
  type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(0, &lazy cache variable for type metadata for InferredToolbarModifier<AllToolbarEdges>, (uint64_t)&type metadata for AllToolbarEdges, (uint64_t)&protocol witness table for AllToolbarEdges, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InferredToolbarModifier);
  MEMORY[0x18C113660](v6, a1, v4, a2);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for InferredToolbarModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18800AC24()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>;
  if (!lazy protocol witness table cache variable for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>)
  {
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for InferredToolbarModifier<AllToolbarEdges>, (uint64_t)&type metadata for AllToolbarEdges, (uint64_t)&protocol witness table for AllToolbarEdges, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for InferredToolbarModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InferredToolbarModifier<AllToolbarEdges> and conformance InferredToolbarModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for InferredToolbarState()
{
  return &type metadata for InferredToolbarState;
}

ValueMetadata *type metadata accessor for AllToolbarEdges()
{
  return &type metadata for AllToolbarEdges;
}

uint64_t type metadata completion function for InferredToolbarModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InferredToolbarModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for InferredToolbarModifier(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for InferredToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InferredToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InferredToolbarModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InferredToolbarModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18800B28CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for InferredToolbarModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x18800B480);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          long long v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *long long v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InferredToolbarModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for InferredToolbarModifier.OnScrollStateChange()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EdgesPredicate()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>(255);
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>(uint64_t a1)
{
}

void type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for _UnaryViewAdaptor();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>();
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>);
    }
  }
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>?)
  {
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>?);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>);
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F40E10]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>)
  {
    type metadata accessor for TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>(uint64_t a1)
{
}

void type metadata accessor for (ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)()
{
  if (!lazy cache variable for type metadata for (ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>))
  {
    type metadata accessor for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>();
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>));
    }
  }
}

void type metadata accessor for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>()
{
  if (!lazy cache variable for type metadata for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)
  {
    type metadata accessor for [ToolbarStorage.Entry]();
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>((unint64_t *)&lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A], (void (*)(uint64_t))type metadata accessor for [ToolbarStorage.Entry]);
    lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>);
    lazy protocol witness table accessor for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>);
    lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>> and conformance _UnaryViewAdaptor<A>, type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>);
    lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(uint64_t a1)
{
}

void type metadata accessor for _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(255, a3, a4);
    a5();
    unint64_t v7 = type metadata accessor for _InsetViewModifier();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>();
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>();
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v6) {
      atomic_store(TupleTypeMetadata3, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>);
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F40E10]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>)
  {
    type metadata accessor for TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>(uint64_t a1)
{
}

void type metadata accessor for (ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)()
{
  if (!lazy cache variable for type metadata for (ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>))
  {
    type metadata accessor for ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>();
    type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(255, &lazy cache variable for type metadata for TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>));
    }
  }
}

void type metadata accessor for ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>()
{
  if (!lazy cache variable for type metadata for ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)
  {
    type metadata accessor for ArraySlice<ToolbarStorage.Entry>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type ArraySlice<ToolbarStorage.Entry> and conformance ArraySlice<A>, type metadata accessor for ArraySlice<ToolbarStorage.Entry>);
    lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>);
    }
  }
}

void type metadata accessor for ArraySlice<ToolbarStorage.Entry>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)()
{
  if (!lazy cache variable for type metadata for (Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer))
  {
    type metadata accessor for ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer));
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>();
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<EmptyView, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>);
    lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>, type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>> and conformance _UnaryViewAdaptor<A>, type metadata accessor for _UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>);
    lazy protocol witness table accessor for type StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnableInferredToolbar and conformance EnableInferredToolbar()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableInferredToolbar and conformance EnableInferredToolbar;
  if (!lazy protocol witness table cache variable for type EnableInferredToolbar and conformance EnableInferredToolbar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableInferredToolbar and conformance EnableInferredToolbar);
  }
  return result;
}

uint64_t partial apply for closure #1 in InferredToolbarModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in InferredToolbarModifier.body(content:)(v1[4], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #2 in InferredToolbarModifier.body(content:)()
{
  return closure #2 in InferredToolbarModifier.body(content:)();
}

uint64_t sub_18800C8F8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for InferredToolbarModifier() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in InferredToolbarModifier.body(content:)(uint64_t a1)
{
  type metadata accessor for InferredToolbarModifier();

  return closure #1 in closure #1 in InferredToolbarModifier.body(content:)(a1);
}

uint64_t outlined release of StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>(uint64_t a1)
{
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v3 = *(_OWORD *)(a1 + 224);
  long long v4 = *(_OWORD *)(a1 + 240);
  outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    *(void *)(a1 + 352),
    *(unsigned char *)(a1 + 360),
    *(unsigned char *)(a1 + 361));
  swift_release();
  return a1;
}

uint64_t outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,char a47)
{
  if ((a47 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of StaticIf<EdgesPredicate<A, BottomToolbarEdges>, _InsetViewModifier<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>(uint64_t a1)
{
  long long v17 = *(_OWORD *)(a1 + 464);
  long long v18 = *(_OWORD *)(a1 + 480);
  long long v15 = *(_OWORD *)(a1 + 432);
  long long v16 = *(_OWORD *)(a1 + 448);
  long long v13 = *(_OWORD *)(a1 + 400);
  long long v14 = *(_OWORD *)(a1 + 416);
  long long v11 = *(_OWORD *)(a1 + 368);
  long long v12 = *(_OWORD *)(a1 + 384);
  long long v9 = *(_OWORD *)(a1 + 336);
  long long v10 = *(_OWORD *)(a1 + 352);
  long long v7 = *(_OWORD *)(a1 + 304);
  long long v8 = *(_OWORD *)(a1 + 320);
  long long v5 = *(_OWORD *)(a1 + 272);
  long long v6 = *(_OWORD *)(a1 + 288);
  long long v3 = *(_OWORD *)(a1 + 240);
  long long v4 = *(_OWORD *)(a1 + 256);
  outlined consume of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    *(void *)(a1 + 496));
  return a1;
}

uint64_t outlined consume of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((a68 & 1) == 0)
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(a18, a19, a20);
    swift_release();
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>(uint64_t a1)
{
  uint64_t v30 = *(void *)(a1 + 32);
  uint64_t v31 = *(void *)(a1 + 24);
  uint64_t v28 = *(void *)(a1 + 48);
  uint64_t v29 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v27 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  long long v25 = *(_OWORD *)(a1 + 104);
  long long v26 = *(_OWORD *)(a1 + 88);
  long long v23 = *(_OWORD *)(a1 + 136);
  long long v24 = *(_OWORD *)(a1 + 120);
  long long v21 = *(_OWORD *)(a1 + 168);
  long long v22 = *(_OWORD *)(a1 + 152);
  long long v19 = *(_OWORD *)(a1 + 200);
  long long v20 = *(_OWORD *)(a1 + 184);
  long long v17 = *(_OWORD *)(a1 + 232);
  long long v18 = *(_OWORD *)(a1 + 216);
  long long v15 = *(_OWORD *)(a1 + 264);
  long long v16 = *(_OWORD *)(a1 + 248);
  long long v13 = *(_OWORD *)(a1 + 296);
  long long v14 = *(_OWORD *)(a1 + 280);
  long long v11 = *(_OWORD *)(a1 + 328);
  long long v12 = *(_OWORD *)(a1 + 312);
  long long v9 = *(_OWORD *)(a1 + 360);
  long long v10 = *(_OWORD *)(a1 + 344);
  uint64_t v5 = *(void *)(a1 + 376);
  char v6 = *(unsigned char *)(a1 + 384);
  char v7 = *(unsigned char *)(a1 + 385);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(v31, v30, v29, v28, v27, v2, v3, v4, v26, *((uint64_t *)&v26 + 1), v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v21,
    *((uint64_t *)&v21 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v5,
    v6,
    v7);
  swift_release();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<InferredToolbarModifier<A>>, InferredToolbarModifier<A>.OnScrollStateChange>, StaticIf<EdgesPredicate<A, TopToolbarEdges>, _InsetViewModifier<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<_ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>>, _TraitWritingModifier<TransitionTraitKey>>, StaticIf<BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature>, ToolbarScopeModifier, EmptyModifier>>>, EmptyModifier>>, StaticIf<EdgesPred(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v54 = *(void *)(a1 + 40);
  uint64_t v55 = *(void *)(a1 + 32);
  uint64_t v52 = *(void *)(a1 + 56);
  uint64_t v53 = *(void *)(a1 + 48);
  uint64_t v51 = *(void *)(a1 + 64);
  uint64_t v50 = *(void *)(a1 + 72);
  uint64_t v49 = *(void *)(a1 + 80);
  long long v43 = *(_OWORD *)(a1 + 88);
  long long v41 = *(_OWORD *)(a1 + 104);
  long long v39 = *(_OWORD *)(a1 + 120);
  long long v37 = *(_OWORD *)(a1 + 136);
  long long v35 = *(_OWORD *)(a1 + 152);
  long long v32 = *(_OWORD *)(a1 + 184);
  long long v33 = *(_OWORD *)(a1 + 168);
  long long v30 = *(_OWORD *)(a1 + 216);
  long long v31 = *(_OWORD *)(a1 + 200);
  long long v28 = *(_OWORD *)(a1 + 248);
  long long v29 = *(_OWORD *)(a1 + 232);
  long long v26 = *(_OWORD *)(a1 + 280);
  long long v27 = *(_OWORD *)(a1 + 264);
  long long v25 = *(_OWORD *)(a1 + 296);
  long long v23 = *(_OWORD *)(a1 + 312);
  long long v21 = *(_OWORD *)(a1 + 328);
  long long v19 = *(_OWORD *)(a1 + 344);
  long long v16 = *(_OWORD *)(a1 + 360);
  uint64_t v3 = *(void *)(a1 + 376);
  char v4 = *(unsigned char *)(a1 + 384);
  char v5 = *(unsigned char *)(a1 + 385);
  uint64_t v66 = *(void *)(a1 + 440);
  uint64_t v67 = *(void *)(a1 + 432);
  uint64_t v64 = *(void *)(a1 + 456);
  uint64_t v65 = *(void *)(a1 + 448);
  uint64_t v62 = *(void *)(a1 + 472);
  uint64_t v63 = *(void *)(a1 + 464);
  uint64_t v60 = *(void *)(a1 + 488);
  uint64_t v61 = *(void *)(a1 + 480);
  long long v58 = *(_OWORD *)(a1 + 512);
  long long v59 = *(_OWORD *)(a1 + 496);
  long long v56 = *(_OWORD *)(a1 + 544);
  long long v57 = *(_OWORD *)(a1 + 528);
  long long v48 = *(_OWORD *)(a1 + 560);
  long long v47 = *(_OWORD *)(a1 + 576);
  long long v46 = *(_OWORD *)(a1 + 592);
  long long v45 = *(_OWORD *)(a1 + 608);
  long long v44 = *(_OWORD *)(a1 + 624);
  long long v42 = *(_OWORD *)(a1 + 640);
  long long v40 = *(_OWORD *)(a1 + 656);
  long long v38 = *(_OWORD *)(a1 + 672);
  long long v36 = *(_OWORD *)(a1 + 688);
  long long v34 = *(_OWORD *)(a1 + 704);
  long long v24 = *(_OWORD *)(a1 + 720);
  long long v22 = *(_OWORD *)(a1 + 736);
  long long v20 = *(_OWORD *)(a1 + 752);
  long long v17 = *(_OWORD *)(a1 + 784);
  long long v18 = *(_OWORD *)(a1 + 768);
  long long v14 = *(_OWORD *)(a1 + 816);
  long long v15 = *(_OWORD *)(a1 + 800);
  long long v12 = *(_OWORD *)(a1 + 848);
  long long v13 = *(_OWORD *)(a1 + 832);
  long long v10 = *(_OWORD *)(a1 + 880);
  long long v11 = *(_OWORD *)(a1 + 864);
  long long v8 = *(_OWORD *)(a1 + 912);
  long long v9 = *(_OWORD *)(a1 + 896);
  long long v7 = *(_OWORD *)(a1 + 928);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(v2, v55, v54, v53, v52, v51, v50, v49, v43, *((uint64_t *)&v43 + 1), v41, *((uint64_t *)&v41 + 1), v39, *((uint64_t *)&v39 + 1), v37, *((uint64_t *)&v37 + 1), v35, *((uint64_t *)&v35 + 1), v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v3,
    v4,
    v5);
  swift_release();
  outlined consume of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(v67, v66, v65, v64, v63, v62, v61, v60, v59, *((uint64_t *)&v59 + 1), v58, *((uint64_t *)&v58 + 1), v57, *((uint64_t *)&v57 + 1), v56, *((uint64_t *)&v56 + 1), v48, *((uint64_t *)&v48 + 1), v47,
    *((uint64_t *)&v47 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    v7);
  return a1;
}

void *partial apply for closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)@<X0>(void *a1@<X8>)
{
  return closure #1 in closure #1 in InferredToolbarModifier.bottomBar(toolbar:)(a1);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>> and conformance HStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MoveTransition and conformance MoveTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition;
  if (!lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveTransition and conformance MoveTransition);
  }
  return result;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi_(uint64_t result)
{
  *(unsigned char *)(result + 536) = 0;
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>();
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for _ConditionalContent.Storage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
    }
  }
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA08ModifiedD0VyAA6VStackVyAA9TupleViewVyAGyAA7DividerVAA14_OpacityEffectVGSg_AGyAGyAGyAGyAA6HStackVyAKyAA7ForEachVys10ArraySliceVyAA07ToolbarE0V5EntryVGA_2IDVAA07BarItemI0VG_AKyAA6SpacerV_AUySayA_GA2_A4_GA7_tGSgA5_tGGAA16_FlexFrameLayoutVGAA01_yZ0VGAA08_PaddingZ0VGAA24_BackgroundStyleModifierVyAA13AnyShapeStyleVGGAQtGGAA21_TraitWritingModifierVyAA18TransitionTraitKeyVGGAGyAA05EmptyI0VA18_G_GWOi0_(uint64_t result)
{
  *(unsigned char *)(result + 536) = 1;
  return result;
}

uint64_t specialized InferredToolbarModifier.backgroundStyle(in:toolbar:opacity:)(uint64_t a1, double a2)
{
  ToolbarProxy.appearance(in:)(a1, (uint64_t)&v7);
  uint64_t v3 = *(void *)v9;
  swift_release();
  swift_release();
  if (v3)
  {
    float v4 = a2;
    uint64_t v7 = v3;
    *(float *)&uint64_t v8 = v4;
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
  }
  else
  {
    static Material.bar.getter();
    float v5 = a2;
    v9[0] = v5;
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<Material>, MEMORY[0x1E4F41748], MEMORY[0x1E4F41740], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>();
  }
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t partial apply for closure #1 in InferredToolbarModifier.bar<A>(toolbar:edge:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in InferredToolbarModifier.bar<A>(toolbar:edge:content:)(*(unsigned __int8 *)(v1 + 48), *(void (**)(double))(v1 + 64), *(void *)(v1 + 80), *(void *)(v1 + 24), *(void *)(v1 + 40), a1, *(double *)(v1 + 56));
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F40E10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<AnyShapeStyle> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<Divider, _OpacityEffect>?();
    lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for ModifiedContent<Divider, _OpacityEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void *outlined release of TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>(void *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[9];
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  outlined consume of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(v5, v4, v2);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined copy of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:)(a1, a2, *(void *)(v2 + 16), *(void ***)(v2 + 24));
}

double partial apply for closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in InferredToolbarModifier.navigationBar(toolbar:)(a1);
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi_(uint64_t result)
{
  *(unsigned char *)(result + 361) = 0;
  return result;
}

uint64_t outlined init with take of _ConditionalContent<ModifiedContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>, _FlexFrameLayout>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, _TraitWritingModifier<TransitionTraitKey>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>();
    type metadata accessor for InferredToolbarModifier<AllToolbarEdges>(255, &lazy cache variable for type metadata for ModifiedContent<EmptyView, _FrameLayout>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for _ConditionalContent.Storage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<VStack<TupleView<(ModifiedContent<Divider, _OpacityEffect>?, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>)>>, _FrameLayout>, _PaddingLayout>, _BackgroundStyleModifier<AnyShapeStyle>>, ModifiedContent<Divider, _OpacityEffect>?)>>, ModifiedContent<EmptyView, _FrameLayout>>.Storage);
    }
  }
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyAA6VStackVyAA9TupleViewVyAA08ModifiedD0VyAA7DividerVAA14_OpacityEffectVGSg_AKyAKyAKyAA6HStackVyAIyAA7ForEachVySayAA07ToolbarE0V5EntryVGAY2IDVAA07BarItemH0VG_AA6SpacerVA3_A5_A3_tGGAA12_FrameLayoutVGAA08_PaddingW0VGAA24_BackgroundStyleModifierVyAA08AnyShapeZ0VGGAQtGGAKyAA05EmptyH0VA9_G_GWOi0_(uint64_t result)
{
  *(unsigned char *)(result + 361) = 1;
  return result;
}

ValueMetadata *type metadata accessor for BottomToolbarEdges()
{
  return &type metadata for BottomToolbarEdges;
}

ValueMetadata *type metadata accessor for TopToolbarEdges()
{
  return &type metadata for TopToolbarEdges;
}

ValueMetadata *type metadata accessor for EnableInferredToolbar()
{
  return &type metadata for EnableInferredToolbar;
}

uint64_t type metadata accessor for InferredToolbarState.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18800DC24()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in InferredToolbarModifier<A>.OnScrollStateChange()
{
  return &protocol witness table for InferredToolbarModifier<A>.OnScrollStateChange;
}

uint64_t type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of ScrollGeometryState?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for State<InferredToolbarState>(0, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL specialized static EnableInferredToolbar.evaluate(inputs:)()
{
  if (((*(uint64_t (**)(void))(MEMORY[0x1E4F405C0] + 16))() & 1) == 0) {
    return 0;
  }
  unint64_t v0 = lazy protocol witness table accessor for type InferredToolbarUserDefaultFeature and conformance InferredToolbarUserDefaultFeature();
  if (((*(uint64_t (**)(ValueMetadata *, unint64_t))(v0 + 16))(&type metadata for InferredToolbarUserDefaultFeature, v0) & 1) == 0)return 0; {
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2 == *MEMORY[0x1E4F4E7A0];
}

void *__swift_memcpy301_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x12DuLL);
}

uint64_t getEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 301)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 36);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 300) = 0;
    *(_DWORD *)(result + 296) = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 301) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 301) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 36) = a2 + 1;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in InferredToolbarModifier<A>.ScrollGeometryActionBinding()
{
  return swift_getWitnessTable();
}

uint64_t sub_18800E21C()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI19ScrollGeometryStateVSgWOg(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 124)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_18800E248()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #5 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()()
{
  return specialized closure #5 in InferredToolbarModifier.ScrollGeometryActionBinding.updateValue()((uint64_t)(v0 + 2), v0[18], v0[19], v0[20], v0[21]);
}

uint64_t _s7SwiftUI20ToolbarItemPlacementV4RoleOSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for State<InferredToolbarState>(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for State<InferredToolbarState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

__n128 __swift_memcpy253_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(_OWORD *)(a1 + 237) = *(long long *)((char *)a2 + 237);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding.Candidates(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 253)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InferredToolbarModifier.ScrollGeometryActionBinding.Candidates(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 252) = 0;
    *(_DWORD *)(result + 248) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 253) = v3;
  return result;
}

uint64_t type metadata accessor for InferredToolbarModifier.ScrollGeometryActionBinding.Candidates()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static BackgroundTaskProtocol<>.runTasks(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *long long v9 = v4;
  _OWORD v9[5] = a3;
  v9[6] = a4;
  void v9[4] = a2;
  v9[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  v9[2] = a1;
  return MEMORY[0x1F4188298](static BackgroundTaskProtocol.runTasks(_:identifier:), 0, 0);
}

uint64_t _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = v4;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for TaskPriority();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v12);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v17 = v16;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v15 = 0;
  uint64_t v17 = 0;
LABEL_6:
  uint64_t v18 = *v5;
  long long v19 = (void *)swift_allocObject();
  _OWORD v19[2] = *(void *)(a4 + 16);
  _OWORD v19[3] = a2;
  v19[4] = a3;
  long long v20 = (void *)(v17 | v15);
  if (v17 | v15)
  {
    v23[0] = 0;
    v23[1] = 0;
    long long v20 = v23;
    v23[2] = v15;
    v23[3] = v17;
  }
  v22[1] = 1;
  _OWORD v22[2] = v20;
  void v22[3] = v18;
  swift_task_create();
  return swift_release();
}

uint64_t static BackgroundTaskProtocol<>.runTasks(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *long long v9 = v4;
  _OWORD v9[5] = a3;
  v9[6] = a4;
  v9[3] = a2;
  void v9[4] = a2;
  v9[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  v9[2] = a1;
  return MEMORY[0x1F4188298](static BackgroundTaskProtocol.runTasks(_:identifier:), 0, 0);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  type metadata accessor for ()?();
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = a4;
  _OWORD v10[3] = a2;
  _OWORD v10[4] = a3;
  return swift_task_create();
}

uint64_t Scene.backgroundTask<A, B>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Scene.backgroundTask<A, B>(_:action:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))Scene.modifier<A>(_:));
}

uint64_t BackgroundTask.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_1, a1, a2);
}

void static BackgroundTask.urlSession.getter(uint64_t (**a1)()@<X8>)
{
  a1[3] = (uint64_t (*)())&type metadata for UnidentifiedURLSessionBackgroundTask;
  a1[4] = (uint64_t (*)())&protocol witness table for UnidentifiedURLSessionBackgroundTask;
  *a1 = protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key;
  a1[1] = 0;
}

uint64_t static BackgroundTask.urlSession(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  a3[3] = (uint64_t (*)(uint64_t, uint64_t))&type metadata for URLSessionBackgroundTask;
  a3[4] = (uint64_t (*)(uint64_t, uint64_t))&protocol witness table for URLSessionBackgroundTask;
  *a3 = partial apply for closure #1 in URLSessionBackgroundTask.init(identifier:);
  a3[1] = (uint64_t (*)(uint64_t, uint64_t))v6;

  return swift_bridgeObjectRetain();
}

uint64_t static BackgroundTask.urlSession(matching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = &type metadata for UnidentifiedURLSessionBackgroundTask;
  a3[4] = &protocol witness table for UnidentifiedURLSessionBackgroundTask;
  *a3 = a1;
  a3[1] = a2;
  return swift_retain();
}

void static BackgroundTask.appRefresh.getter()
{
}

uint64_t static BackgroundTask.appRefresh(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = &type metadata for AppRefreshBackgroundTask;
  a3[4] = &protocol witness table for AppRefreshBackgroundTask;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t WidgetConfiguration.backgroundTask<A, B>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Scene.backgroundTask<A, B>(_:action:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))WidgetConfiguration.modifier<A>(_:));
}

uint64_t Scene.backgroundTask<A, B>(_:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(unsigned char *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v14 = type metadata accessor for BackgroundTask();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v17, a1, v14);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v15 = type metadata accessor for BackgroundTaskModifier();
  swift_retain();
  a8(v17, a4, v15, a7);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v15 - 8) + 8))(v17, v15);
}

uint64_t BackgroundTaskProtocol.predicate(_:)()
{
  return 1;
}

uint64_t static BackgroundTaskProtocol.currentTasks()(uint64_t a1, uint64_t a2)
{
  void v12[6] = a1;
  v12[7] = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskActionsContainer();
  static Update.ensure<A>(_:)();
  v13[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v13[1] = v4;
  type metadata accessor for TaskActionsContainer.ContainerEntry();
  uint64_t v5 = type metadata accessor for Array();
  MEMORY[0x18C115450](v14, v13, v14[2], MEMORY[0x1E4FBB1A0], v5, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_bridgeObjectRelease();
  if (v14[0])
  {
    v13[0] = v14[0];
    MEMORY[0x1F4188790](v6);
    _OWORD v12[2] = a1;
    _OWORD v12[3] = a2;
    uint64_t v7 = type metadata accessor for BackgroundTaskEntry();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v10 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in static BackgroundTaskProtocol.currentTasks(), (uint64_t)v12, v5, v7, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BackgroundTaskEntry();
    return static Array._allocateUninitialized(_:)();
  }
  return v10;
}

uint64_t closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t *a1@<X8>)
{
  if (static AppGraph.shared)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    type metadata accessor for TaskActionsContainer.Key();
    swift_retain();
    swift_getWitnessTable();
    GraphHost.preferenceValue<A>(_:)();
    return swift_release();
  }
  else
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    uint64_t result = TaskActionsContainer.init()();
    *a1 = result;
  }
  return result;
}

uint64_t TaskActionsContainer.init()()
{
  type metadata accessor for TaskActionsContainer.ContainerEntry();
  type metadata accessor for Array();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static BackgroundTaskProtocol.runTasks(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[5] = a4;
  v5[6] = a5;
  void v5[3] = a2;
  v5[4] = a3;
  _OWORD v5[2] = a1;
  return MEMORY[0x1F4188298](static BackgroundTaskProtocol.runTasks(_:identifier:), 0, 0);
}

uint64_t static BackgroundTaskProtocol.runTasks(_:identifier:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  uint64_t v3 = static BackgroundTaskProtocol.currentTasks()(v1, v2);
  uint64_t v4 = (void *)swift_allocObject();
  _OWORD v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v0[7] = v4;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:)
                                                          + async function pointer to partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[8] = v5;
  *uint64_t v5 = v0;
  v5[1] = static BackgroundTaskProtocol.runTasks(_:identifier:);
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[2];
  return v10(v8, v6, v7);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t type metadata accessor for BackgroundTask()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for BackgroundTaskModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  _DWORD v6[4] = a3;
  _OWORD v6[5] = a4;
  void v6[2] = a1;
  v6[3] = a2;
  v6[8] = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Result();
  v6[9] = v7;
  _DWORD v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v6[13] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v6[14] = v9;
  v6[15] = *(void *)(v9 + 64);
  v6[16] = swift_task_alloc();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  v6[17] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v6[18] = v11;
  v6[19] = *(void *)(v11 + 64);
  v6[20] = swift_task_alloc();
  type metadata accessor for TaskPriority?(0);
  v6[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v23 = v2;
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 112);
  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v27 = v1;
  uint64_t v28 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 32);
  uint64_t v26 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 24);
  uint64_t v10 = type metadata accessor for TaskPriority();
  long long v24 = *(_OWORD *)(v0 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v1, 1, 1, v10);
  uint64_t v11 = v2;
  uint64_t v12 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v11, v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v9, v7);
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v14 = (v25 + *(unsigned __int8 *)(v6 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0;
  *(_OWORD *)(v15 + 32) = v24;
  *(void *)(v15 + 48) = v26;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v15 + v13, v23, v12);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v15 + v14, v4, v7);
  swift_bridgeObjectRetain();
  uint64_t v16 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v27, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v15, v28);
  *(void *)(v0 + 176) = v16;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v17;
  *uint64_t v17 = v0;
  v17[1] = closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t v20 = MEMORY[0x1E4FBC248];
  uint64_t v21 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F4187DA0](v18, v16, v19, v20, v21);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

{
  void *v0;
  int EnumCaseMultiPayload;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  (*(void (**)(void, void, void))(v0[10] + 16))(v0[11], v0[12], v0[9]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v2 = v0[12];
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = v0[9];
    uint64_t v4 = v0[10];
    (*(void (**)(void))(v0[7] + 64))();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }
  else
  {
    uint64_t v5 = v0[11];
    uint64_t v6 = v0[8];
    uint64_t v7 = v0[2];
    (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v7, v5, v6);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  _OWORD v8[2] = a1;
  v8[3] = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  long long v6 = *(_OWORD *)(v0 + 24);
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v2;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + 48) = v3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v8 = *(void *)(v0 + 16);
  return MEMORY[0x1F4187F28](v8, AssociatedTypeWitness, AssociatedTypeWitness, 0, 0, &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v5, AssociatedTypeWitness);
}

uint64_t closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[9] = a6;
  v7[10] = a7;
  _OWORD v7[7] = a4;
  unsigned char v7[8] = a5;
  _OWORD v7[5] = a2;
  v7[6] = a3;
  v7[4] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[11] = AssociatedTypeWitness;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  v7[12] = v9;
  v7[13] = *(void *)(v9 + 64);
  v7[14] = swift_task_alloc();
  type metadata accessor for TaskPriority?(0);
  v7[15] = swift_task_alloc();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  v7[16] = v10;
  v7[17] = *(void *)(v10 - 8);
  v7[18] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for BackgroundTaskEntry();
  v7[19] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v7[20] = v12;
  v7[21] = *(void *)(v12 + 64);
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  v7[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = swift_bridgeObjectRetain();
  if (MEMORY[0x18C115CB0](v2, v1))
  {
    uint64_t v3 = 0;
    uint64_t v40 = *(void *)(v0 + 168);
    uint64_t v50 = *(void *)(v0 + 160);
    uint64_t v51 = (void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
    long long v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 80) + 48);
    uint64_t v49 = (void (**)(unint64_t, uint64_t, uint64_t))(v50 + 32);
    uint64_t v41 = *(void *)(v0 + 96);
    do
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
        v7(*(void *)(v0 + 192), *(void *)(v0 + 48)+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v3, *(void *)(v0 + 152));
        uint64_t v8 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v23 = _ArrayBuffer._getElementSlowPath(_:)();
        if (v40 != 8)
        {
          __break(1u);
          return MEMORY[0x1F4187E90](v23, v24, v25, v26, v27, v28, WitnessTable);
        }
        uint64_t v30 = v23;
        uint64_t v31 = *(void *)(v0 + 192);
        uint64_t v32 = *(void *)(v0 + 152);
        *(void *)(v0 + 16) = v30;
        uint64_t v7 = *v51;
        (*v51)(v31, v0 + 16, v32);
        swift_unknownObjectRelease();
        uint64_t v8 = v3 + 1;
        if (__OFADD__(v3, 1))
        {
LABEL_11:
          __break(1u);
          break;
        }
      }
      uint64_t v10 = *(void *)(v0 + 72);
      uint64_t v9 = *(void *)(v0 + 80);
      uint64_t v11 = *(void *)(v0 + 56);
      uint64_t v12 = *v49;
      (*v49)(*(void *)(v0 + 184), *(void *)(v0 + 192), *(void *)(v0 + 152));
      if (v48(v11, v10, v9))
      {
        uint64_t v13 = *(void *)(v0 + 176);
        uint64_t v45 = v13;
        uint64_t v14 = *(void *)(v0 + 152);
        unint64_t v43 = *(void *)(v0 + 184);
        uint64_t v44 = v14;
        uint64_t v15 = *(void *)(v0 + 120);
        uint64_t v47 = *(void *)(v0 + 168);
        uint64_t v16 = *(void *)(v0 + 112);
        uint64_t v17 = *(void *)(v0 + 88);
        uint64_t v42 = *(void *)(v0 + 64);
        uint64_t v18 = type metadata accessor for TaskPriority();
        long long v46 = *(_OWORD *)(v0 + 72);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 1, 1, v18);
        v7(v13, v43, v14);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v16, v42, v17);
        unint64_t v19 = (*(unsigned __int8 *)(v50 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
        unint64_t v20 = (v47 + *(unsigned __int8 *)(v41 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = 0;
        *(void *)(v21 + 24) = 0;
        *(_OWORD *)(v21 + 32) = v46;
        v12(v21 + v19, v45, v44);
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32))(v21 + v20, v16, v17);
        uint64_t v22 = type metadata accessor for TaskGroup();
        _sScG7addTask8priority9operationyScPSg_xyYaYAcntF(v15, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), v21, v22);
        outlined destroy of TaskPriority?(v15);
      }
      uint64_t v4 = *(void *)(v0 + 152);
      uint64_t v5 = *(void *)(v0 + 48);
      (*(void (**)(void, uint64_t))(v50 + 8))(*(void *)(v0 + 184), v4);
      ++v3;
    }
    while (v8 != MEMORY[0x18C115CB0](v5, v4));
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v0 + 72);
  uint64_t v34 = *(void *)(v0 + 80);
  *(void *)(v0 + 24) = **(void **)(v0 + 40);
  (*(void (**)(uint64_t, uint64_t))(v34 + 64))(v33, v34);
  long long v35 = (void *)swift_allocObject();
  *(void *)(v0 + 200) = v35;
  v35[2] = v33;
  v35[3] = v34;
  v35[4] = v33;
  long long v36 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v36;
  _OWORD v36[2] = v33;
  v36[3] = v34;
  v36[4] = partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  v36[5] = v35;
  long long v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v37;
  uint64_t v38 = type metadata accessor for TaskGroup();
  uint64_t WitnessTable = swift_getWitnessTable();
  *long long v37 = v0;
  v37[1] = closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v24 = *(void *)(v0 + 144);
  uint64_t v28 = *(void *)(v0 + 128);
  uint64_t v23 = *(void *)(v0 + 32);
  uint64_t v25 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response);
  uint64_t v26 = v36;
  uint64_t v27 = v38;
  return MEMORY[0x1F4187E90](v23, v24, v25, v26, v27, v28, WitnessTable);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void *)(*v0 + 144);
  uint64_t v2 = *(void *)(*v0 + 136);
  uint64_t v3 = *(void *)(*v0 + 128);
  long long v6 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v7[5] = a6;
  v7[6] = a7;
  uint64_t v7[3] = a4;
  v7[4] = a5;
  _OWORD v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (void *)(v1 + *(int *)(type metadata accessor for BackgroundTaskEntry() + 36));
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*v2 + *(int *)*v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[7] = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[2];
  return v7(v5, v4);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  a4(a2, a3);
  uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
  return thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(v5);
}

int *static BackgroundTaskProtocol.runTasks(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BackgroundTaskProtocol.runTasks(from:)(a1, a2, a3);
}

{
  uint64_t v5;
  void *v6;

  uint64_t v5 = static BackgroundTaskProtocol.currentTasks(in:)();
  long long v6 = (void *)swift_allocObject();
  void v6[2] = a2;
  v6[3] = a3;
  _DWORD v6[4] = v5;
  return &async function pointer to partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:);
}

uint64_t closure #1 in static BackgroundTaskProtocol.currentTasks(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskActionsContainer.Key();
  swift_getWitnessTable();
  WidgetBundleHost.readPreference<A>(_:)();
  v15[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  v15[1] = v6;
  type metadata accessor for TaskActionsContainer.ContainerEntry();
  uint64_t v7 = type metadata accessor for Array();
  MEMORY[0x18C115450](v16, v15, v16[1], MEMORY[0x1E4FBB1A0], v7, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_bridgeObjectRelease();
  if (v16[0])
  {
    v15[0] = v16[0];
    MEMORY[0x1F4188790](v8);
    v14[2] = a1;
    void v14[3] = a2;
    uint64_t v9 = type metadata accessor for BackgroundTaskEntry();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks(in:), (uint64_t)v14, v7, v9, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v11);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BackgroundTaskEntry();
    uint64_t result = static Array._allocateUninitialized(_:)();
    uint64_t v12 = result;
  }
  *a3 = v12;
  return result;
}

uint64_t closure #2 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for BackgroundTask();
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v14, a1, v9);
  outlined init with take of OptionalBinaryInteger(v14, (uint64_t)v15);
  type metadata accessor for BackgroundTaskProtocol();
  swift_dynamicCast();
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
  uint64_t v12 = (void *)(a3 + *(int *)(type metadata accessor for BackgroundTaskEntry() + 36));
  *uint64_t v12 = v11;
  v12[1] = v10;
  return swift_retain();
}

int *static BackgroundTaskProtocol.runTasks<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static BackgroundTaskProtocol.runTasks(from:)(a1, a2, a3);
}

uint64_t static BackgroundTaskProtocol.currentTasks(in:)()
{
  type metadata accessor for BackgroundTaskEntry();
  type metadata accessor for Array();
  static Update.ensure<A>(_:)();
  return v1;
}

uint64_t closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskActionsContainer.Key();
  swift_getWitnessTable();
  WidgetHost.readPreference<A>(_:)();
  v19[0] = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v19[1] = v8;
  type metadata accessor for TaskActionsContainer.ContainerEntry();
  uint64_t v9 = type metadata accessor for Array();
  MEMORY[0x18C115450](v20, v19, v20[2], MEMORY[0x1E4FBB1A0], v9, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_bridgeObjectRelease();
  if (v20[0])
  {
    v19[0] = v20[0];
    MEMORY[0x1F4188790](v10);
    uint64_t v11 = *(void *)(v7 + 80);
    uint64_t v12 = *(void *)(v7 + 88);
    _OWORD v18[2] = a2;
    v18[3] = v11;
    v18[4] = a3;
    v18[5] = v12;
    uint64_t v13 = type metadata accessor for BackgroundTaskEntry();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:), (uint64_t)v18, v9, v13, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v15);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for BackgroundTaskEntry();
    uint64_t result = static Array._allocateUninitialized(_:)();
    uint64_t v16 = result;
  }
  *a4 = v16;
  return result;
}

uint64_t closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for BackgroundTask();
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v14, a1, v9);
  outlined init with take of OptionalBinaryInteger(v14, (uint64_t)v15);
  type metadata accessor for BackgroundTaskProtocol();
  swift_dynamicCast();
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v8, a2);
  uint64_t v12 = (void *)(a3 + *(int *)(type metadata accessor for BackgroundTaskEntry() + 36));
  *uint64_t v12 = v11;
  v12[1] = v10;
  return swift_retain();
}

Swift::Bool __swiftcall URLSessionBackgroundTask.predicate(_:)(Swift::String a1)
{
  return (*v1)(a1._countAndFlagsBits, a1._object) & 1;
}

uint64_t static URLSessionBackgroundTask.taskIdentifier.getter()
{
  return 0x69737365534C5255;
}

uint64_t protocol witness for static BackgroundTaskProtocol.taskIdentifier.getter in conformance URLSessionBackgroundTask()
{
  return 0x69737365534C5255;
}

uint64_t protocol witness for BackgroundTaskProtocol.predicate(_:) in conformance URLSessionBackgroundTask(void *a1)
{
  return (*v1)(*a1, a1[1]) & 1;
}

uint64_t sub_1880113DC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in URLSessionBackgroundTask.init(identifier:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + 16) == a1 && *(void *)(v2 + 24) == a2) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t static UnidentifiedURLSessionBackgroundTask.taskIdentifier.getter()
{
  return 0xD000000000000016;
}

unint64_t protocol witness for static BackgroundTaskProtocol.taskIdentifier.getter in conformance UnidentifiedURLSessionBackgroundTask()
{
  return 0xD000000000000016;
}

uint64_t dispatch thunk of BackgroundTaskProtocol.register()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static BackgroundTaskProtocol.taskIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of BackgroundTaskProtocol.predicate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static BackgroundTaskProtocol.reduce(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of static BackgroundTaskProtocol.defaultResponse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

ValueMetadata *type metadata accessor for URLSessionBackgroundTask()
{
  return &type metadata for URLSessionBackgroundTask;
}

ValueMetadata *type metadata accessor for UnidentifiedURLSessionBackgroundTask()
{
  return &type metadata for UnidentifiedURLSessionBackgroundTask;
}

uint64_t sub_1880114F0()
{
  return get_witness_table_7SwiftUI5SceneRzs8SendableRd__sACRd_0_r_0_lAA15ModifiedContentVyxAA22BackgroundTaskModifierVyqd__qd_0_GGAaBHpxAaBHD1__AhA01_cI0HPyHCHCTm();
}

uint64_t sub_188011510()
{
  return get_witness_table_7SwiftUI5SceneRzs8SendableRd__sACRd_0_r_0_lAA15ModifiedContentVyxAA22BackgroundTaskModifierVyqd__qd_0_GGAaBHpxAaBHD1__AhA01_cI0HPyHCHCTm();
}

uint64_t get_witness_table_7SwiftUI5SceneRzs8SendableRd__sACRd_0_r_0_lAA15ModifiedContentVyxAA22BackgroundTaskModifierVyqd__qd_0_GGAaBHpxAaBHD1__AhA01_cI0HPyHCHCTm()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for AppRefreshBackgroundTask()
{
  return &type metadata for AppRefreshBackgroundTask;
}

Swift::Void __swiftcall AppRefreshBackgroundTask.register()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  void v9[4] = v3;
  _OWORD v9[5] = v2;
  LODWORD(v3) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  swift_bridgeObjectRetain();
  if (v3 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v6);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    if (v9[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &async function pointer to partial apply for closure #1 in AppRefreshBackgroundTask.register();
  *(void *)(v13 + 24) = v9;
  if (v11 | v10)
  {
    v14[0] = 0;
    v14[1] = 0;
    long long v14[2] = v10;
    void v14[3] = v11;
  }
  swift_task_create();
  swift_release();
}

uint64_t closure #1 in AppRefreshBackgroundTask.register()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 64) = a4;
  *(void *)(v5 + 72) = a5;
  return MEMORY[0x1F4188298](closure #1 in AppRefreshBackgroundTask.register(), 0, 0);
}

uint64_t closure #1 in AppRefreshBackgroundTask.register()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static BGTaskSchedulerWrapper.shared;
  *(void *)(v0 + 80) = static BGTaskSchedulerWrapper.shared;
  return MEMORY[0x1F4188298](closure #1 in AppRefreshBackgroundTask.register(), v1, 0);
}

{
  void *v0;
  Swift::Int v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t (*v10)(void);
  Swift::Int v12;
  void *v13;
  uint64_t v14;

  uint64_t v13 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[8];
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  LOBYTE(v1) = specialized Set._Variant.insert(_:)(&v12, v2, v1);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v4 = v0[9];
    uint64_t v3 = v0[10];
    uint64_t v5 = v0[8];
    uint64_t v6 = *(id *)(v3 + 112);
    uint64_t v7 = (void *)MEMORY[0x18C115780](v5, v4);
    uint64_t v8 = (void *)swift_allocObject();
    _OWORD v8[2] = v3;
    v8[3] = v5;
    v8[4] = v4;
    v0[6] = partial apply for closure #1 in BGTaskSchedulerWrapper.observeTask(_:);
    v0[7] = v8;
    v0[2] = MEMORY[0x1E4F143A8];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v0[5] = &block_descriptor_70;
    uint64_t v9 = _Block_copy(v0 + 2);
    swift_retain();
    swift_release();
    objc_msgSend(v6, sel_registerForTaskWithIdentifier_launchHandler_, v7, v9);
    _Block_release(v9);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

void protocol witness for BackgroundTaskProtocol.register() in conformance AppRefreshBackgroundTask()
{
}

uint64_t protocol witness for static BackgroundTaskProtocol.taskIdentifier.getter in conformance AppRefreshBackgroundTask()
{
  return 0x6572666552707041;
}

uint64_t protocol witness for BackgroundTaskProtocol.predicate(_:) in conformance AppRefreshBackgroundTask(void *a1)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  if (*a1 == *v1 && v2 == v1[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t BackgroundTaskModifier.Registration.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for BackgroundTaskModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void (**)(_OWORD *, uint64_t, uint64_t))(v7 + 16);
  v8(v24, Value, v5);
  uint64_t v9 = v25;
  uint64_t v10 = v26;
  __swift_project_boxed_opaque_existential_1(v24, v25);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
  uint64_t v13 = v12;
  v8(v22, (uint64_t)v24, v5);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  *(void *)(v14 + 32) = v11;
  *(void *)(v14 + 40) = v13;
  long long v15 = v22[1];
  *(_OWORD *)(v14 + 48) = v22[0];
  *(_OWORD *)(v14 + 64) = v15;
  *(_OWORD *)(v14 + 80) = v22[2];
  *(void *)(v14 + 96) = v23;
  uint64_t v16 = type metadata accessor for TaskActionsContainer.Key();
  uint64_t WitnessTable = swift_getWitnessTable();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v16, WitnessTable, v18, v19);
  uint64_t v20 = _PreferenceTransformModifier.init(key:transform:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v24, v5);
  return v20;
}

uint64_t closure #1 in closure #1 in BackgroundTaskModifier.Registration.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TaskActionsContainer.ContainerEntry();
  type metadata accessor for Array();
  swift_getTupleTypeMetadata2();
  type metadata accessor for _ContiguousArrayStorage();
  swift_initStackObject();
  static Array._adoptStorage(_:count:)();
  uint64_t v7 = v6;
  *uint64_t v6 = a1;
  v6[1] = a2;
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v8 = static Array._adoptStorage(_:count:)();
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for BackgroundTask();
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v17, a3, v11);
  uint64_t v12 = *(void *)(a3 + 40);
  uint64_t v13 = *(void *)(a3 + 48);
  uint64_t v14 = v18;
  long long v15 = v17[1];
  *(_OWORD *)uint64_t v10 = v17[0];
  *(_OWORD *)(v10 + 16) = v15;
  *(void *)(v10 + 32) = v14;
  *(void *)(v10 + 40) = v12;
  *(void *)(v10 + 48) = v13;
  _finalizeUninitializedArray<A>(_:)();
  _OWORD v7[2] = v8;
  _finalizeUninitializedArray<A>(_:)();
  swift_retain();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t static TaskActionsContainer.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void))
{
  return Dictionary.merge(_:uniquingKeysWith:)();
}

uint64_t protocol witness for Rule.value.getter in conformance BackgroundTaskModifier<A, B>.Registration@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = BackgroundTaskModifier.Registration.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance BackgroundTaskModifier<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BackgroundTaskModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t (*)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static _PreferenceTransformModifier._makeScene(modifier:inputs:body:));
}

uint64_t static BackgroundTaskModifier._makeScene(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = *a2;
  int v24 = *((_DWORD *)a2 + 2);
  uint64_t v23 = a2[2];
  int v26 = *((_DWORD *)a2 + 14);
  LODWORD(v35) = *a1;
  int v10 = v35;
  type metadata accessor for BackgroundTaskModifier();
  type metadata accessor for _GraphValue();
  long long v22 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  LODWORD(v35) = _GraphValue.value.getter();
  uint64_t v13 = type metadata accessor for TaskActionsContainer.Key();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = type metadata accessor for _PreferenceTransformModifier();
  uint64_t v33 = type metadata accessor for BackgroundTaskModifier.Registration();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v35, a7, (uint64_t)v31, v33, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
  LODWORD(v35) = v10;
  _GraphValue.value.getter();
  uint64_t Value = AGGraphGetValue();
  uint64_t v18 = type metadata accessor for BackgroundTask();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(&v35, Value, v18);
  uint64_t v19 = v38;
  uint64_t v20 = v39;
  __swift_project_boxed_opaque_existential_1(&v35, v38);
  (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
  _GraphValue.init(_:)();
  uint64_t v35 = v25;
  int v36 = v24;
  uint64_t v37 = v23;
  uint64_t v38 = v11;
  uint64_t v39 = v12;
  long long v40 = v22;
  int v41 = v26;
  return a8(&v30, &v35, a3, a4, v13, WitnessTable);
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance BackgroundTaskModifier<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BackgroundTaskModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t (*)(int *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:));
}

uint64_t sub_188012244()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AppRefreshBackgroundTask.register()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  unsigned char v4[8] = v2;
  v4[9] = v3;
  return MEMORY[0x1F4188298](closure #1 in AppRefreshBackgroundTask.register(), 0, 0);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance TaskActionsContainer<A, B>.Key@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = static TaskActionsContainer.Key.defaultValue.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance TaskActionsContainer<A, B>.Key(uint64_t a1)
{
  return static TaskActionsContainer.Key.reduce(value:nextValue:)(a1, (void (*)(void))partial apply for thunk for @callee_guaranteed () -> (@out TaskActionsContainer<A, B>));
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance TaskActionsContainer<A, B>.Key(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF388](a1, WitnessTable);
}

uint64_t sub_188012404()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_;
  return v6(a1);
}

uint64_t sub_188012518()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(uint64_t a1)
{
  return closure #1 in BGTaskSchedulerWrapper.observeTask(_:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA_28(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t type metadata accessor for TaskActionsContainer.Key()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for BackgroundTaskModifier.Registration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *uint64_t v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_;
  return v5(v2 + 32);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TQ0_()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu);
  return v6(a1, v4);
}

void type metadata accessor for ()?()
{
  if (!lazy cache variable for type metadata for ()?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ()?);
    }
  }
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static BackgroundTaskProtocol.currentTasks()(a1);
}

uint64_t type metadata accessor for TaskActionsContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TaskActionsContainer.ContainerEntry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for BackgroundTaskEntry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)(*(uint64_t **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks<A>(in:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1880129FC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[2];
  uint64_t v9 = v3[3];
  uint64_t v10 = v3[4];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v11;
  *uint64_t v11 = v4;
  v11[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, a3, v10, v8, v9);
}

uint64_t sub_188012B00()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v6 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = v1[6];
  uint64_t v13 = (char *)v1 + v8;
  uint64_t v14 = (char *)v1 + (v11 & ~v10);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[6] = v6;
  v15[7] = v5;
  v15[4] = v13;
  v15[5] = v14;
  void v15[2] = a1;
  void v15[3] = v12;
  v15[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t sub_188012E34()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *unint64_t v11 = v3;
  v11[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(a1, a2, v8, v9, v10, v6, v7);
}

uint64_t sub_18801300C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(v2 + 24) + 56))(a1, a2, *(void *)(v2 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 32);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void (*)(uint64_t, uint64_t)))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)
                                                                                                 + async function pointer to thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response));
  return v10(a1, a2, a3, v8);
}

uint64_t sub_188013138()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(type metadata accessor for BackgroundTaskEntry() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3, v1);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v7 = *(void *)(type metadata accessor for BackgroundTaskEntry() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = v1 + v8;
  uint64_t v13 = v1 + (v11 & ~v10);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  void v14[5] = v6;
  v14[6] = v5;
  void v14[3] = v12;
  void v14[4] = v13;
  v14[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  long long v14[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in closure #1 in static BackgroundTaskProtocol.runTasks(actions:), 0, 0);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 24);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRTu);
  return v6(a1, v4);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed A.BackgroundTaskProtocol.Response, @in_guaranteed A.BackgroundTaskProtocol.Response) -> (@out A.BackgroundTaskProtocol.Response)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in static BackgroundTaskProtocol.currentTasks(in:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static BackgroundTaskProtocol.currentTasks(in:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in static BackgroundTaskProtocol.currentTasks()(a1, *(void *)(v2 + 16), a2);
}

uint64_t getEnumTagSinglePayload for BackgroundTaskEntry(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880136BCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for BackgroundTaskEntry(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1880138B0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t destroy for TaskActionsContainer.ContainerEntry(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_release();
}

uint64_t initializeWithCopy for BackgroundTaskModifier(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for BackgroundTaskModifier(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BackgroundTaskModifier(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t instantiation function for generic protocol witness table for TaskActionsContainer<A, B>.Key(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in BackgroundTaskModifier<A, B>.Registration()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> (@out TaskActionsContainer<A, B>)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 32))(&v2);
  return v2;
}

uint64_t partial apply for closure #1 in static TaskActionsContainer.Key.reduce(value:nextValue:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TaskActionsContainer.ContainerEntry();
  uint64_t result = static Array.+ infix(_:_:)();
  *a1 = result;
  return result;
}

uint64_t sub_188013AF4()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in BackgroundTaskModifier.Registration.value.getter(uint64_t a1)
{
  return static TaskActionsContainer.Key.reduce(value:nextValue:)(a1, (void (*)(void))partial apply for closure #1 in closure #1 in BackgroundTaskModifier.Registration.value.getter);
}

uint64_t partial apply for closure #1 in closure #1 in BackgroundTaskModifier.Registration.value.getter()
{
  return closure #1 in closure #1 in BackgroundTaskModifier.Registration.value.getter(v0[4], v0[5], v0[6]);
}

uint64_t partial apply for closure #2 in static BackgroundTaskProtocol.currentTasks()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in static BackgroundTaskProtocol.currentTasks(in:)(a1, a2);
}

uint64_t View.accessibilityAutomationType(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  char v5 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AD8], (uint64_t)&v4, 1, a2, MEMORY[0x1E4F40AD8], a3);
}

uint64_t assignWithCopy for FocusItem.ViewItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FocusItem.ViewItem(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FocusItem.ViewItem()
{
  return &type metadata for FocusItem.ViewItem;
}

uint64_t assignWithCopy for FocusItem(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of FocusItem.Base(a1);
    int v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 == 2)
    {
      swift_unknownObjectWeakCopyInit();
      char v5 = 2;
    }
    else
    {
      if (v4 != 1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v6 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v6;
        *(unsigned char *)(a1 + 32) = 0;
        swift_retain();
        goto LABEL_8;
      }
      swift_unknownObjectWeakCopyInit();
      char v5 = 1;
    }
    *(unsigned char *)(a1 + 32) = v5;
  }
LABEL_8:
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  swift_weakCopyAssign();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for FocusItem(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of FocusItem.Base(a1);
    int v4 = *(unsigned __int8 *)(a2 + 32);
    if (v4 == 2)
    {
      swift_unknownObjectWeakTakeInit();
      char v5 = 2;
    }
    else if (v4 == 1)
    {
      swift_unknownObjectWeakTakeInit();
      char v5 = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      char v5 = *(unsigned char *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 32) = v5;
  }
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  swift_weakTakeAssign();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for FocusItem.Base(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2 || v4 == 1) {
      swift_unknownObjectWeakDestroy();
    }
    else {
      swift_release();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      swift_unknownObjectWeakCopyInit();
      char v6 = 2;
    }
    else
    {
      if (v5 != 1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        uint64_t v7 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = v7;
        *(unsigned char *)(a1 + 32) = 0;
        swift_retain();
        return a1;
      }
      swift_unknownObjectWeakCopyInit();
      char v6 = 1;
    }
    *(unsigned char *)(a1 + 32) = v6;
  }
  return a1;
}

uint64_t initializeWithTake for FocusItem.Base(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 32);
  if (v2 >= 3) {
    unsigned int v2 = *(_DWORD *)a2 + 3;
  }
  if (v2 == 2)
  {
    uint64_t result = swift_unknownObjectWeakTakeInit();
    char v3 = 2;
  }
  else if (v2 == 1)
  {
    uint64_t result = swift_unknownObjectWeakTakeInit();
    char v3 = 1;
  }
  else
  {
    char v3 = 0;
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v4;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

uint64_t assignWithTake for FocusItem.Base(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 32);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2 || v4 == 1) {
      swift_unknownObjectWeakDestroy();
    }
    else {
      swift_release();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 32);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      swift_unknownObjectWeakTakeInit();
      char v6 = 2;
    }
    else if (v5 == 1)
    {
      swift_unknownObjectWeakTakeInit();
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
    }
    *(unsigned char *)(a1 + 32) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusItem.Base(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for FocusItem.Base(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for FocusItem.Base(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 32);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for FocusItem.Base(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FocusItem.Base()
{
  return &type metadata for FocusItem.Base;
}

void type metadata accessor for (FocusItem.Base, FocusItem.Base)()
{
  if (!lazy cache variable for type metadata for (FocusItem.Base, FocusItem.Base))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (FocusItem.Base, FocusItem.Base));
    }
  }
}

ValueMetadata *type metadata accessor for FocusedItemInputKey()
{
  return &type metadata for FocusedItemInputKey;
}

uint64_t getEnumTagSinglePayload for TokenFieldStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TokenFieldStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188014564);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in TokenFieldStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedTokenFieldStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResolvedTokenFieldStyle(v1, a1, type metadata accessor for TokenFieldConfiguration);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedTokenFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle(&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTokenFieldStyle);

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTokenFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle(&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTokenFieldStyle);

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTokenFieldStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedTokenFieldStyle@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ResolvedTokenFieldStyle(v1, a1, type metadata accessor for ResolvedTokenFieldStyle);
}

uint64_t TokenFieldStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TokenFieldStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TokenFieldStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

ValueMetadata *type metadata accessor for TokenFieldConfiguration.Label()
{
  return &type metadata for TokenFieldConfiguration.Label;
}

uint64_t *initializeBufferWithCopyOfBuffer for ResolvedTokenFieldStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for TokenFieldConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = v4;
    a1[1] = a2[1];
    type metadata accessor for Binding<AttributedString>();
    uint64_t v9 = *(int *)(v8 + 32);
    double v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for AttributedString();
    int v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(v7 + 24);
    uint64_t v15 = (char *)a1 + v14;
    int v16 = (char *)a2 + v14;
    if (*(uint64_t *)((char *)a2 + v14 + 24))
    {
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = *((void *)v16 + 1);
      char v19 = v16[16];
      outlined copy of Text.Storage(*(void *)v16, v18, v19);
      *(void *)uint64_t v15 = v17;
      *((void *)v15 + 1) = v18;
      v15[16] = v19;
      *((void *)v15 + 3) = *((void *)v16 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
    }
    uint64_t v21 = *(int *)(v7 + 28);
    long long v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *long long v22 = *v23;
    v22[1] = v24;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for ResolvedTokenFieldStyle(uint64_t a1)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = a1 + *(int *)(type metadata accessor for TokenFieldConfiguration(0) + 24);
  if (*(void *)(v5 + 24))
  {
    outlined consume of Text.Storage(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

void *initializeWithCopy for ResolvedTokenFieldStyle(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  double v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v12 = *(int *)(v11 + 24);
  int v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  if (*(void *)((char *)a2 + v12 + 24))
  {
    uint64_t v15 = *(void *)v14;
    uint64_t v16 = *((void *)v14 + 1);
    char v17 = v14[16];
    outlined copy of Text.Storage(*(void *)v14, v16, v17);
    *(void *)int v13 = v15;
    *((void *)v13 + 1) = v16;
    v13[16] = v17;
    *((void *)v13 + 3) = *((void *)v14 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *((_OWORD *)v14 + 1);
    *(_OWORD *)int v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v18;
  }
  uint64_t v19 = *(int *)(v11 + 28);
  long long v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  uint64_t v22 = v21[1];
  *long long v20 = *v21;
  v20[1] = v22;
  swift_retain();
  return a1;
}

void *assignWithCopy for ResolvedTokenFieldStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  uint64_t v9 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)((char *)a1 + v10 + 24);
  uint64_t v14 = *(void *)((char *)a2 + v10 + 24);
  if (v13)
  {
    if (v14)
    {
      uint64_t v15 = *(void *)v12;
      uint64_t v16 = *((void *)v12 + 1);
      char v17 = v12[16];
      outlined copy of Text.Storage(*(void *)v12, v16, v17);
      uint64_t v18 = *(void *)v11;
      uint64_t v19 = *(void *)(v11 + 8);
      char v20 = *(unsigned char *)(v11 + 16);
      *(void *)uint64_t v11 = v15;
      *(void *)(v11 + 8) = v16;
      *(unsigned char *)(v11 + 16) = v17;
      outlined consume of Text.Storage(v18, v19, v20);
      *(void *)(v11 + 24) = *((void *)v12 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v11);
      long long v24 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(_OWORD *)(v11 + 16) = v24;
    }
  }
  else if (v14)
  {
    uint64_t v21 = *(void *)v12;
    uint64_t v22 = *((void *)v12 + 1);
    char v23 = v12[16];
    outlined copy of Text.Storage(*(void *)v12, v22, v23);
    *(void *)uint64_t v11 = v21;
    *(void *)(v11 + 8) = v22;
    *(unsigned char *)(v11 + 16) = v23;
    *(void *)(v11 + 24) = *((void *)v12 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v25 = *((_OWORD *)v12 + 1);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v25;
  }
  uint64_t v26 = *(int *)(v9 + 28);
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ResolvedTokenFieldStyle(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  long long v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  *(_OWORD *)((char *)a1 + *(int *)(v10 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v10 + 28));
  return a1;
}

void *assignWithTake for ResolvedTokenFieldStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  uint64_t v9 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  if (!*(void *)((char *)a1 + v10 + 24)) {
    goto LABEL_5;
  }
  if (!*((void *)v12 + 3))
  {
    outlined destroy of Text(v11);
LABEL_5:
    long long v17 = *((_OWORD *)v12 + 1);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(_OWORD *)(v11 + 16) = v17;
    goto LABEL_6;
  }
  char v13 = v12[16];
  uint64_t v14 = *(void *)v11;
  uint64_t v15 = *(void *)(v11 + 8);
  char v16 = *(unsigned char *)(v11 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = v13;
  outlined consume of Text.Storage(v14, v15, v16);
  *(void *)(v11 + 24) = *((void *)v12 + 3);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)((char *)a1 + *(int *)(v9 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(v9 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTokenFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18801517C);
}

uint64_t sub_18801517C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedTokenFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1880151FC);
}

uint64_t sub_1880151FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TokenFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ResolvedTokenFieldStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedTokenFieldStyle);
}

uint64_t type metadata completion function for ResolvedTokenFieldStyle()
{
  uint64_t result = type metadata accessor for TokenFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenFieldConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<AttributedString>();
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for AttributedString();
    char v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (char *)v7 + v14;
    char v16 = (char *)a2 + v14;
    if (*(uint64_t *)((char *)a2 + v14 + 24))
    {
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = *((void *)v16 + 1);
      char v19 = v16[16];
      outlined copy of Text.Storage(*(void *)v16, v18, v19);
      *(void *)uint64_t v15 = v17;
      *((void *)v15 + 1) = v18;
      v15[16] = v19;
      *((void *)v15 + 3) = *((void *)v16 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v20 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v20;
    }
    uint64_t v21 = *(int *)(a3 + 28);
    uint64_t v22 = (uint64_t *)((char *)v7 + v21);
    char v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
  }
  swift_retain();
  return v7;
}

uint64_t destroy for TokenFieldConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  if (*(void *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

void *initializeWithCopy for TokenFieldConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_retain();
  swift_retain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  if (*(void *)((char *)a2 + v13 + 24))
  {
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *((void *)v15 + 1);
    char v18 = v15[16];
    outlined copy of Text.Storage(*(void *)v15, v17, v18);
    *(void *)uint64_t v14 = v16;
    *((void *)v14 + 1) = v17;
    v14[16] = v18;
    *((void *)v14 + 3) = *((void *)v15 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *((_OWORD *)v15 + 1);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((_OWORD *)v14 + 1) = v19;
  }
  uint64_t v20 = *(int *)(a3 + 28);
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_retain();
  return a1;
}

void *assignWithCopy for TokenFieldConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)((char *)a1 + v11 + 24);
  uint64_t v15 = *(void *)((char *)a2 + v11 + 24);
  if (v14)
  {
    if (v15)
    {
      uint64_t v16 = *(void *)v13;
      uint64_t v17 = *((void *)v13 + 1);
      char v18 = v13[16];
      outlined copy of Text.Storage(*(void *)v13, v17, v18);
      uint64_t v19 = *(void *)v12;
      uint64_t v20 = *(void *)(v12 + 8);
      char v21 = *(unsigned char *)(v12 + 16);
      *(void *)uint64_t v12 = v16;
      *(void *)(v12 + 8) = v17;
      *(unsigned char *)(v12 + 16) = v18;
      outlined consume of Text.Storage(v19, v20, v21);
      *(void *)(v12 + 24) = *((void *)v13 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v12);
      long long v25 = *((_OWORD *)v13 + 1);
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
      *(_OWORD *)(v12 + 16) = v25;
    }
  }
  else if (v15)
  {
    uint64_t v22 = *(void *)v13;
    uint64_t v23 = *((void *)v13 + 1);
    char v24 = v13[16];
    outlined copy of Text.Storage(*(void *)v13, v23, v24);
    *(void *)uint64_t v12 = v22;
    *(void *)(v12 + 8) = v23;
    *(unsigned char *)(v12 + 16) = v24;
    *(void *)(v12 + 24) = *((void *)v13 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v26 = *((_OWORD *)v13 + 1);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v26;
  }
  uint64_t v27 = *(int *)(a3 + 28);
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for TokenFieldConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (_OWORD *)((char *)a1 + v12);
  uint64_t v15 = (_OWORD *)((char *)a2 + v12);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

void *assignWithTake for TokenFieldConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (uint64_t)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (!*(void *)((char *)a1 + v11 + 24)) {
    goto LABEL_5;
  }
  if (!*((void *)v13 + 3))
  {
    outlined destroy of Text(v12);
LABEL_5:
    long long v18 = *((_OWORD *)v13 + 1);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v18;
    goto LABEL_6;
  }
  char v14 = v13[16];
  uint64_t v15 = *(void *)v12;
  uint64_t v16 = *(void *)(v12 + 8);
  char v17 = *(unsigned char *)(v12 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  outlined consume of Text.Storage(v15, v16, v17);
  *(void *)(v12 + 24) = *((void *)v13 + 3);
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 28)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1880159E4);
}

uint64_t sub_1880159E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Binding<AttributedString>();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TokenFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188015AB8);
}

void sub_188015AB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Binding<AttributedString>();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
}

uint64_t sub_188015B74()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for View in ResolvedTokenFieldStyle()
{
  return lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle((unint64_t *)&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTokenFieldStyle);
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedTokenFieldStyle()
{
  return lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle(&lazy protocol witness table cache variable for type TokenFieldStyleModifier<AutomaticTokenFieldStyle> and conformance TokenFieldStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for TokenFieldStyleModifier<AutomaticTokenFieldStyle>);
}

uint64_t lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TokenFieldStyleModifier<AutomaticTokenFieldStyle>()
{
  if (!lazy cache variable for type metadata for TokenFieldStyleModifier<AutomaticTokenFieldStyle>)
  {
    lazy protocol witness table accessor for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle();
    unint64_t v0 = type metadata accessor for TokenFieldStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<AutomaticTokenFieldStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle;
  if (!lazy protocol witness table cache variable for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticTokenFieldStyle and conformance AutomaticTokenFieldStyle);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in TokenFieldConfiguration.Label()
{
  return &protocol witness table for TokenFieldConfiguration.Label;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedTokenFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for TokenFieldConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined init with copy of ResolvedTokenFieldStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void NSHostingSceneBridgingOptions.rawValue.getter()
{
}

SwiftUI::NSHostingSceneBridgingOptions __swiftcall NSHostingSceneBridgingOptions.init(rawValue:)(Swift::Int rawValue)
{
  result.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static NSHostingSceneBridgingOptions.all.getter()
{
}

unint64_t lazy protocol witness table accessor for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions;
  if (!lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSHostingSceneBridgingOptions and conformance NSHostingSceneBridgingOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for NSHostingSceneBridgingOptions()
{
  return &type metadata for NSHostingSceneBridgingOptions;
}

void static NSHostingSceneBridgingOptions.titles.getter()
{
}

void static NSHostingSceneBridgingOptions.toolbars.getter()
{
}

void static NSHostingSceneBridgingOptions.title.getter()
{
}

void *assignWithCopy for AnimatedValueTrack<A>.PacedPathSource(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.PacedPathSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t VectorArithmetic.scaled(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a3, v4, a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 16))(a1, a2, a4);
}

uint64_t AnimatedValueTrackSource.keyPath<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v8, v10, a2, v6);
  a3[3] = type metadata accessor for PrependingKeyPathSource();
  a3[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  PrependingKeyPathSource.init(base:keyPath:)((uint64_t)v8, a1, a2, (uint64_t)boxed_opaque_existential_1);
  return swift_retain();
}

uint64_t PrependingKeyPathSource.init(base:keyPath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for PrependingKeyPathSource();
  *(void *)(a4 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t PrependingKeyPathSource.update(value:mix:at:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
  (*(void (**)(uint64_t, void, double, double))(*(void *)(a4 + 32) + 24))(v8, *(void *)(a4 + 24), a1, a2);
  return v7(&v10, 0);
}

uint64_t PrependingKeyPathSource.update(velocity:mix:at:)(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
  (*(void (**)(uint64_t, void, double, double))(*(void *)(a4 + 32) + 32))(v8, *(void *)(a4 + 24), a1, a2);
  return v7(&v10, 0);
}

uint64_t PrependingKeyPathSource.duration.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 40))(*(void *)(a1 + 24));
}

uint64_t static PrependingKeyPathSource.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  type metadata accessor for AnyKeyPath();
  uint64_t v4 = type metadata accessor for PrependingKeyPathSource();
  return MEMORY[0x18C117280](*(void *)(a1 + *(int *)(v4 + 44)), *(void *)(a2 + *(int *)(v4 + 44))) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PrependingKeyPathSource<A, B>(uint64_t a1, uint64_t a2)
{
  return static PrependingKeyPathSource.== infix(_:_:)(a1, a2);
}

uint64_t AnimatedValueTrack<A>.PacedPathSource.init(duration:keyframes:interpolation:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AnimatedValueKeyframe();
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(v8 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v24 - v15;
  int v17 = *a2;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  uint64_t v18 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v31 = v18;
  if (MEMORY[0x18C115CB0](a1, v8))
  {
    uint64_t v25 = v13;
    int v26 = v17;
    uint64_t v27 = a3;
    uint64_t v28 = a4;
    uint64_t v19 = 0;
    uint64_t v29 = (void (**)(char *, double *, uint64_t))(v12 + 16);
    double v20 = 0.0;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v16, a1+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v19, v8);
        uint64_t v22 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v25 != 8)
        {
          __break(1u);
          return result;
        }
        double v30 = *(double *)&result;
        (*v29)(v16, &v30, v8);
        swift_unknownObjectRelease();
        uint64_t v22 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_10:
          __break(1u);
LABEL_11:
          swift_bridgeObjectRelease();
          uint64_t v18 = v31;
          a3 = v27;
          a4 = v28;
          LOBYTE(v17) = v26;
          goto LABEL_13;
        }
      }
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v11, v16, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v8);
      double v30 = v20;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      double v20 = v20 + 1.0;
      ++v19;
      if (v22 == MEMORY[0x18C115CB0](a1, v8)) {
        goto LABEL_11;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_13:
  LOBYTE(v30) = v17;
  return AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(v18, (char *)&v30, a3, a4);
}

uint64_t AnimatedValueTrack<A>.PacedPathSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v39 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v36 - v22;
  MEMORY[0x1F4188790](v24);
  uint64_t v38 = (char *)&v36 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v36 - v27;
  AnimatedValueTrack<A>.VectorPath.arcLength.getter(a2);
  AnimatedValueTrack<A>.VectorPath.value(atArcLength:)(a2, a3, a4, (uint64_t)v16, a6 / a7 * v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v37);
  }
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  int v36 = v28;
  v31(v28, v16, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v37 = *(void *)(AssociatedConformanceWitness + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v17 + 8);
  v33(v20, AssociatedTypeWitness);
  uint64_t v34 = v38;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v38, v23, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, a5);
  v33(v23, AssociatedTypeWitness);
  uint64_t v35 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 40))(v40, a3, a4);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v33(v34, AssociatedTypeWitness);
  v35(v40, 0);
  return ((uint64_t (*)(char *, uint64_t))v33)(v36, AssociatedTypeWitness);
}

uint64_t AnimatedValueTrack<A>.PacedPathSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  uint64_t v53 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v16 = (char *)&v44 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v51 = (char *)&v44 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v52 = (char *)&v44 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v44 - v26;
  MEMORY[0x1F4188790](v28);
  double v30 = (char *)&v44 - v29;
  double v31 = a6 / a7;
  AnimatedValueTrack<A>.VectorPath.arcLength.getter(a2);
  double v33 = v32;
  AnimatedValueTrack<A>.VectorPath.unitVelocityTangent(atArcLength:)(a2, a3, a4, (uint64_t)v16, v31 * v32);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v50);
  }
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  int v36 = v30;
  long long v48 = v30;
  v35(v30, v16, AssociatedTypeWitness);
  uint64_t v49 = a3;
  uint64_t v37 = v17;
  uint64_t v38 = v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  long long v46 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v46(v27, v36, AssociatedTypeWitness);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16);
  uint64_t v47 = v27;
  v45(AssociatedTypeWitness, AssociatedConformanceWitness, v33 / a7);
  uint64_t v44 = a4;
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(v49, a4);
  uint64_t v50 = *(void *)(AssociatedConformanceWitness + 8);
  long long v40 = v51;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  int v41 = *(void (**)(char *, uint64_t))(v37 + 8);
  v41(v38, AssociatedTypeWitness);
  uint64_t v42 = v52;
  v46(v52, v40, AssociatedTypeWitness);
  v45(AssociatedTypeWitness, AssociatedConformanceWitness, a5);
  v41(v40, AssociatedTypeWitness);
  unint64_t v43 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t))(v44 + 40))(v54, v49);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v41(v42, AssociatedTypeWitness);
  v43(v54, 0);
  v41(v47, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v41)(v48, AssociatedTypeWitness);
}

uint64_t static AnimatedValueTrack<A>.PacedPathSource.== infix(_:_:)(double a1, double a2)
{
  return static AnimatedValueTrack<A>.VectorPath.== infix(_:_:)() & (a1 == a2);
}

uint64_t protocol witness for AnimatedValueTrackSource.update(value:mix:at:) in conformance AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return AnimatedValueTrack<A>.PacedPathSource.update(value:mix:at:)(a1, *(void *)v4, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4, *(double *)(v4 + 8));
}

uint64_t protocol witness for AnimatedValueTrackSource.update(velocity:mix:at:) in conformance AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return AnimatedValueTrack<A>.PacedPathSource.update(velocity:mix:at:)(a1, *(void *)v4, *(void *)(a2 + 16), *(void *)(a2 + 24), a3, a4, *(double *)(v4 + 8));
}

double protocol witness for AnimatedValueTrackSource.duration.getter in conformance AnimatedValueTrack<A><A>.PacedPathSource()
{
  return *(double *)(v0 + 8);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1, uint64_t a2)
{
  return static AnimatedValueTrack<A>.PacedPathSource.== infix(_:_:)(*(double *)(a1 + 8), *(double *)(a2 + 8));
}

uint64_t instantiation function for generic protocol witness table for AnimatedValueTrack<A><A>.PacedPathSource(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

void CombinedSource.duration.getter(void *a1)
{
}

uint64_t CombinedSource.update(value:mix:at:)(uint64_t a1, void *a2, double a3, double a4)
{
  return (*(uint64_t (**)(uint64_t, void, double, double))(a2[6] + 24))(a1, a2[4], a3, a4);
}

uint64_t CombinedSource.update(velocity:mix:at:)(uint64_t a1, void *a2, double a3, double a4)
{
  return (*(uint64_t (**)(uint64_t, void, double, double))(a2[6] + 32))(a1, a2[4], a3, a4);
}

uint64_t static CombinedSource.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for CombinedSource();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t CombinedSource.init(first:second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1, a3);
  uint64_t v8 = type metadata accessor for CombinedSource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CombinedSource<A, B, C>()
{
  return static CombinedSource.== infix(_:_:)();
}

uint64_t AnimatedValueTrackSource.combined<A>(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v18, v20, a2, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  v23[1] = swift_getAssociatedTypeWitness();
  v23[2] = a2;
  v23[3] = a3;
  void v23[4] = a4;
  v23[5] = a5;
  a6[3] = type metadata accessor for CombinedSource();
  a6[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  return CombinedSource.init(first:second:)((uint64_t)v18, (uint64_t)v14, a2, a3, (uint64_t)boxed_opaque_existential_1);
}

uint64_t protocol witness for AnimatedValueTrackSource.update(value:mix:at:) in conformance EmptyAnimatedValueTrackSource<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, *(void *)(a2 + 16), a3, a4);
}

uint64_t type metadata accessor for PrependingKeyPathSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CombinedSource()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for CombinedSource(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for CombinedSource(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x188017C20);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for EmptyAnimatedValueTrackSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for PrependingKeyPathSource()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrependingKeyPathSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

uint64_t destroy for PrependingKeyPathSource(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PrependingKeyPathSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrependingKeyPathSource(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880181BCLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for PrependingKeyPathSource(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1880183ACLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unsigned int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *unsigned int v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for CombinedSource<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for EmptyAnimatedValueTrackSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PrependingKeyPathSource<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t EnvironmentValues.preferredPencilDoubleTapAction.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static PencilPreferredAction.switchEraser.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static PencilPreferredAction.switchPrevious.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static PencilPreferredAction.showColorPalette.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static PencilPreferredAction.showInkAttributes.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static PencilPreferredAction.showContextualPalette.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static PencilPreferredAction.runSystemShortcut.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static PencilPreferredAction.ignore.getter(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

void PencilPreferredAction.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static PencilPreferredAction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int PencilPreferredAction.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.preferredPencilDoubleTapAction.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilDoubleTapActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilDoubleTapActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.preferredPencilSqueezeAction.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilSqueezeActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilSqueezeActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>);
}

unint64_t lazy protocol witness table accessor for type PencilPreferredAction and conformance PencilPreferredAction()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilPreferredAction and conformance PencilPreferredAction;
  if (!lazy protocol witness table cache variable for type PencilPreferredAction and conformance PencilPreferredAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilPreferredAction and conformance PencilPreferredAction);
  }
  return result;
}

uint64_t sub_1880186EC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.preferredPencilDoubleTapAction : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_188018724(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.preferredPencilDoubleTapAction.setter((uint64_t)&v2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilDoubleTapActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilDoubleTapActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.preferredPencilDoubleTapAction : EnvironmentValues@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X3>, unint64_t *a3@<X6>, unsigned char *a4@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a3, a2);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a3, a2);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a4 = v8;
  return result;
}

uint64_t sub_1880188B0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.preferredPencilDoubleTapAction : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_1880188E8(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.preferredPencilDoubleTapAction.setter((uint64_t)&v2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>, (uint64_t)&type metadata for EnvironmentValues.PreferredPencilSqueezeActionKey, (uint64_t)&protocol witness table for EnvironmentValues.PreferredPencilSqueezeActionKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>);
}

unsigned char *storeEnumTagSinglePayload for PencilPreferredAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188018A18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PencilPreferredAction.Guts()
{
  return &unk_1ED436178;
}

ValueMetadata *type metadata accessor for EnvironmentValues.PreferredPencilSqueezeActionKey()
{
  return &type metadata for EnvironmentValues.PreferredPencilSqueezeActionKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.PreferredPencilDoubleTapActionKey()
{
  return &type metadata for EnvironmentValues.PreferredPencilDoubleTapActionKey;
}

unint64_t lazy protocol witness table accessor for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts;
  if (!lazy protocol witness table cache variable for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilPreferredAction.Guts and conformance PencilPreferredAction.Guts);
  }
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVG_AH8_PreviewVs5NeverOTg505_sSi7f5UI22_hi1_j2V7b5VAA8_k32VIgynr_Si6offset_AE7elementtAGs5l106OIegnrzr_TR03_s7a4UI11g75Host33_67D7E903140A6B255A06DD625425B26ALLC8previewsSayAA01_C0VGvgAGSi_AA22_cd1_e2P19F7VtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v26 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  outlined init with copy of EnumeratedSequence<_VariadicView_Children>(a1, (uint64_t)v23);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  if (_VariadicView_Children.endIndex.getter())
  {
    uint64_t v2 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v2 < 0 || v2 >= result) {
        break;
      }
      uint64_t v24 = v2 + 1;
      *(_OWORD *)&v18[40] = v20[2];
      *(_OWORD *)&v18[56] = v20[3];
      *(_OWORD *)&v18[72] = v20[4];
      *(_OWORD *)&v18[88] = v20[5];
      *(_OWORD *)&v18[8] = v20[0];
      *(_OWORD *)&v18[24] = v20[1];
      uint64_t v4 = v25;
      if (__OFADD__(v25, 1)) {
        goto LABEL_15;
      }
      ++v25;
      _OWORD v22[2] = *(_OWORD *)&v18[40];
      _OWORD v22[3] = *(_OWORD *)&v18[56];
      void v22[4] = *(_OWORD *)&v18[72];
      v22[5] = *(_OWORD *)&v18[88];
      v22[0] = *(_OWORD *)&v18[8];
      v22[1] = *(_OWORD *)&v18[24];
      uint64_t v21 = v4;
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v22, (uint64_t)v20);
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v20, (uint64_t)v18);
      *(void *)&v18[96] = v4;
      type metadata accessor for _VariadicView_Children.Element.Type();
      uint64_t v5 = String.init<A>(describing:)();
      uint64_t v7 = v6;
      outlined destroy of _VariadicView_Children.Element((uint64_t)v20);
      *(void *)&v18[104] = v5;
      uint64_t v19 = v7;
      outlined destroy of (offset: Int, element: _VariadicView_Children.Element)((uint64_t)&v21);
      uint64_t v8 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v26;
      }
      unint64_t v10 = *(void *)(v8 + 16);
      unint64_t v9 = *(void *)(v8 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
        uint64_t v8 = v26;
      }
      *(void *)(v8 + 16) = v10 + 1;
      uint64_t v11 = v8 + 120 * v10;
      long long v12 = *(_OWORD *)v18;
      long long v13 = *(_OWORD *)&v18[16];
      long long v14 = *(_OWORD *)&v18[48];
      *(_OWORD *)(v11 + 64) = *(_OWORD *)&v18[32];
      *(_OWORD *)(v11 + 80) = v14;
      *(_OWORD *)(v11 + 32) = v12;
      *(_OWORD *)(v11 + 48) = v13;
      long long v15 = *(_OWORD *)&v18[64];
      long long v16 = *(_OWORD *)&v18[80];
      long long v17 = *(_OWORD *)&v18[96];
      *(void *)(v11 + 144) = v19;
      *(_OWORD *)(v11 + 112) = v16;
      *(_OWORD *)(v11 + 128) = v17;
      *(_OWORD *)(v11 + 96) = v15;
      uint64_t v2 = v24;
      if (v2 == _VariadicView_Children.endIndex.getter()) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    uint64_t v8 = v26;
LABEL_13:
    _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v23, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, MEMORY[0x1E4FBBCF0]);
    return v8;
  }
  return result;
}

uint64_t _PreviewHost.objectWillChange.getter()
{
  return swift_retain();
}

uint64_t key path setter for _PreviewHost.environment : _PreviewHost(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  v7[0] = v3;
  v7[1] = v2;
  uint64_t v5 = *(uint64_t (**)(void *))(*(void *)v4 + 112);
  swift_retain();
  swift_retain();
  return v5(v7);
}

uint64_t _PreviewHost.environment.getter@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 32);
  *a1 = *(void *)(v1 + 24);
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t _PreviewHost.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_beginAccess();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v3;
  swift_release();
  return swift_release();
}

uint64_t _PreviewHost.focusedValues.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  char v3 = *(unsigned char *)(v1 + 48);
  int v4 = *(_DWORD *)(v1 + 52);
  *(void *)a1 = *(void *)(v1 + 40);
  *(unsigned char *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  return swift_retain();
}

uint64_t _PreviewHost.focusedValues.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  int v4 = *((_DWORD *)a1 + 3);
  swift_beginAccess();
  *(void *)(v1 + 40) = v2;
  *(unsigned char *)(v1 + 48) = v3;
  *(_DWORD *)(v1 + 52) = v4;
  return swift_release();
}

uint64_t static _PreviewHost.makeHost(providerType:)()
{
  lazy protocol witness table accessor for type PreviewDescriptor and conformance PreviewDescriptor();
  uint64_t v0 = static ProtocolDescriptor.conformance(of:)();
  if (!v2) {
    return 0;
  }
  MEMORY[0x1F4188790](v0);
  type metadata accessor for _PreviewHost?();
  static Update.ensure<A>(_:)();
  return v2;
}

unint64_t lazy protocol witness table accessor for type PreviewDescriptor and conformance PreviewDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewDescriptor and conformance PreviewDescriptor;
  if (!lazy protocol witness table cache variable for type PreviewDescriptor and conformance PreviewDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewDescriptor and conformance PreviewDescriptor);
  }
  return result;
}

uint64_t *partial apply for closure #1 in static _PreviewHost.makeHost(providerType:)@<X0>(uint64_t **a1@<X8>)
{
  unint64_t result = open #1 <A>(_:) in closure #1 in static _PreviewHost.makeHost(providerType:)();
  *a1 = result;
  return result;
}

void type metadata accessor for _PreviewHost?()
{
  if (!lazy cache variable for type metadata for _PreviewHost?)
  {
    type metadata accessor for _PreviewHost();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreviewHost?);
    }
  }
}

uint64_t type metadata accessor for _PreviewHost()
{
  return self;
}

uint64_t *open #1 <A>(_:) in closure #1 in static _PreviewHost.makeHost(providerType:)()
{
  return PreviewProviderHost.init()();
}

uint64_t *PreviewProviderHost.__allocating_init()()
{
  return PreviewProviderHost.init()();
}

uint64_t static _PreviewHost.makeHost<A>(content:)()
{
  type metadata accessor for PreviewHost<AnyView>();
  static Update.ensure<A>(_:)();
  return v1;
}

uint64_t closure #1 in static _PreviewHost.makeHost<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v6 = AnyView.init<A>(_:)();
  type metadata accessor for PreviewHost<AnyView>();
  swift_allocObject();
  uint64_t v7 = specialized PreviewHost.init(content:)(v6);
  uint64_t result = swift_release();
  *a2 = v7;
  return result;
}

uint64_t partial apply for closure #1 in static _PreviewHost.makeHost<A>(content:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in static _PreviewHost.makeHost<A>(content:)(*(void *)(v1 + 32), a1);
}

void type metadata accessor for PreviewHost<AnyView>()
{
  if (!lazy cache variable for type metadata for PreviewHost<AnyView>)
  {
    unint64_t v0 = type metadata accessor for PreviewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PreviewHost<AnyView>);
    }
  }
}

uint64_t type metadata accessor for PreviewHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _PreviewHost.updateContent<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreviewHost<AnyView>();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    uint64_t v8 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
    swift_retain();
    uint64_t v9 = AnyView.init<A>(_:)();
    swift_beginAccess();
    *(void *)(v8 + 120) = v9;
    swift_retain();
    swift_release();
    mainThreadPrecondition()();
    _OWORD v10[3] = 1;
    lazy protocol witness table accessor for type PreviewHost<AnyView> and conformance PreviewHost<A>(&lazy protocol witness table cache variable for type PreviewHost<AnyView> and conformance PreviewHost<A>, (void (*)(uint64_t))type metadata accessor for PreviewHost<AnyView>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall _PreviewHost.invalidateEverything()()
{
}

void _PreviewHost.previews.getter()
{
}

uint64_t _PreviewHost.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t _PreviewHost.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in _PreviewHost()
{
  return lazy protocol witness table accessor for type PreviewHost<AnyView> and conformance PreviewHost<A>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<(), Never>);
}

void type metadata accessor for PassthroughSubject<(), Never>()
{
  if (!lazy cache variable for type metadata for PassthroughSubject<(), Never>)
  {
    unint64_t v0 = type metadata accessor for PassthroughSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PassthroughSubject<(), Never>);
    }
  }
}

double sub_1880196CC@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a1 + 104))(&v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void *sub_18801972C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 128))(&v6);
  char v4 = v7;
  int v5 = v8;
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v5;
  return result;
}

uint64_t sub_188019798(uint64_t *a1, uint64_t *a2)
{
  char v2 = *((unsigned char *)a1 + 8);
  int v3 = *((_DWORD *)a1 + 3);
  uint64_t v4 = *a2;
  uint64_t v7 = *a1;
  char v8 = v2;
  int v9 = v3;
  int v5 = *(uint64_t (**)(uint64_t *))(*(void *)v4 + 136);
  swift_retain();
  return v5(&v7);
}

uint64_t method lookup function for _PreviewHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _PreviewHost);
}

uint64_t dispatch thunk of _PreviewHost.environment.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of _PreviewHost.environment.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of _PreviewHost.environment.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of _PreviewHost.focusedValues.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of _PreviewHost.focusedValues.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of _PreviewHost.focusedValues.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of _PreviewHost.invalidatePreviews()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of _PreviewHost.invalidateEverything()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of _PreviewHost.previews.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t type metadata completion function for PreviewHost()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t PreviewHost.content.didset()
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t PreviewHost.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  swift_beginAccess();
  *(void *)(v1 + 24) = v2;
  *(void *)(v1 + 32) = v3;
  swift_release();
  swift_release();
  return PreviewHost.environment.didset();
}

void (*PreviewHost.environment.modify(void *a1))(void *a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance TypeSelectHost<A>();
  return PreviewHost.environment.modify;
}

void PreviewHost.environment.modify(void *a1, char a2)
{
}

{
  void *v3;
  uint64_t vars8;

  uint64_t v3 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0) {
    PreviewHost.environment.didset();
  }

  free(v3);
}

uint64_t PreviewHost.environment.didset()
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t PreviewHost.focusedValues.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  int v4 = *((_DWORD *)a1 + 3);
  swift_beginAccess();
  *(void *)(v1 + 40) = v2;
  *(unsigned char *)(v1 + 48) = v3;
  *(_DWORD *)(v1 + 52) = v4;
  swift_release();
  return PreviewHost.environment.didset();
}

void (*PreviewHost.focusedValues.modify(void *a1))(void *a1, char a2)
{
  char v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance TypeSelectHost<A>();
  return PreviewHost.focusedValues.modify;
}

void PreviewHost.focusedValues.modify(void *a1, char a2)
{
}

void PreviewHost.invalidateEverything()()
{
  mainThreadPrecondition()();
  static Update.ensure<A>(_:)();
  id v0 = (id)GraphHost.graph.getter();
  AGGraphInvalidateAllValues();
}

uint64_t PreviewHost.previews.getter()
{
  mainThreadPrecondition()();
  MEMORY[0x18C113CA0]();
  if (*(_DWORD *)(v0 + *(void *)(*(void *)v0 + 296)) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v6 = MEMORY[0x1E4F3F750];
    uint64_t v7 = MEMORY[0x1E4F3F748];
  }
  else
  {
    type metadata accessor for ViewList();
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of TableColumnList(Value, (uint64_t)v5);
  }
  _ViewList_Subgraph.wrapping(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  GraphHost.rootSubgraph.getter();
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  _VariadicView_Children.init(_:contentSubgraph:transform:)();
  PreviewHost.renderUntilStable()();
  outlined init with copy of _VariadicView_Children((uint64_t)v5, (uint64_t)v4);
  uint64_t v2 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVG_AH8_PreviewVs5NeverOTg505_sSi7f5UI22_hi1_j2V7b5VAA8_k32VIgynr_Si6offset_AE7elementtAGs5l106OIegnrzr_TR03_s7a4UI11g75Host33_67D7E903140A6B255A06DD625425B26ALLC8previewsSayAA01_C0VGvgAGSi_AA22_cd1_e2P19F7VtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)v4);
  _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, MEMORY[0x1E4FBBCF8]);
  outlined destroy of _VariadicView_Children((uint64_t)v5);
  static Update.end()();
  return v2;
}

uint64_t PreviewHost.renderUntilStable()()
{
  uint64_t v1 = 32;
  while (1)
  {
    *(_WORD *)(v0 + 112) = 1;
    AGGraphClearUpdate();
    closure #1 in PreviewHost.renderUntilStable()();
    uint64_t result = AGGraphSetUpdate();
    if (*(unsigned char *)(v0 + 113) != 1) {
      break;
    }
    *(unsigned char *)(v0 + 112) = 0;
    if (!--v1) {
      return result;
    }
  }
  *(unsigned char *)(v0 + 112) = 0;
  return result;
}

uint64_t closure #1 in PreviewHost.renderUntilStable()()
{
  return ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
}

uint64_t PreviewHost.updateRootView()(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  int v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  char v8 = &v16[-v7];
  uint64_t v10 = v1 + *(void *)(v9 + 280);
  swift_beginAccess();
  uint64_t v11 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16);
  v11(v8, v10, v2);
  int v12 = *(_DWORD *)(v1 + *(void *)(*(void *)v1 + 288));
  v11(v5, (uint64_t)v8, v2);
  uint64_t v18 = v2;
  int v19 = v12;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)v17, v2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v13);
  long long v14 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  return ((uint64_t (*)(unsigned char *, uint64_t))v14)(v8, v2);
}

uint64_t PreviewHost.updateEnvironment()()
{
  _PreviewHost.environment.getter(&v2);
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.sceneStorageValues.setter(v0);
  swift_release();
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release_n();
  return swift_release_n();
}

uint64_t PreviewHost.updateFocusedValues()()
{
  return swift_release();
}

uint64_t PreviewHost.__ivar_destroyer()
{
  uint64_t v1 = *v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 280);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 184) - 8) + 8);

  return v3(v2);
}

uint64_t *PreviewHost.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 184) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 280));
  return v0;
}

uint64_t PreviewHost.__deallocating_deinit()
{
  PreviewHost.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for PreviewProviderHost()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance PreviewHost<A>()
{
  return swift_retain();
}

double protocol witness for ViewRendererHost.currentTimestamp.getter in conformance PreviewHost<A>@<D0>(double *a1@<X8>)
{
  swift_beginAccess();
  double result = *(double *)(v1 + 88);
  *a1 = result;
  return result;
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance PreviewHost<A>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 88) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance PreviewHost<A>())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.getter in conformance PreviewHost<A>@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 80);
  return result;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance PreviewHost<A>(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(_WORD *)(v1 + 80) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance PreviewHost<A>())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.getter in conformance PreviewHost<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 82);
  return result;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance PreviewHost<A>(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 82) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance PreviewHost<A>())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.getter in conformance PreviewHost<A>()
{
  swift_beginAccess();
  return *(void *)(v0 + 96);
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.setter in conformance PreviewHost<A>(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance PreviewHost<A>())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewGraphDelegate.as<A>(_:) in conformance PreviewHost<A1>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40FF430](a1, a3, a2);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance PreviewHost<A1>()
{
  swift_getWitnessTable();

  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance PreviewHost<A1>()
{
  swift_getWitnessTable();

  return ViewGraphDelegate.updateGraph<A>(body:)();
}

void protocol witness for GraphDelegate.graphDidChange() in conformance PreviewHost<A1>()
{
  swift_getWitnessTable();

  ViewRendererHost.graphDidChange()();
}

uint64_t *PreviewProviderHost.init()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  uint64_t v2 = *(void *)(*(void *)v0 + 368);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 32))(v2, v1, v5);
  char v8 = specialized PreviewHost.init(content:)((uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
  return v8;
}

uint64_t PreviewProviderHost.invalidatePreviews()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  uint64_t v2 = *(void *)(*(void *)v0 + 368);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 32))(v2, v1, v5);
  specialized PreviewHost.content.setter((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
}

uint64_t type metadata accessor for PreviewProviderHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for GraphDelegate in PreviewHost<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ViewGraphDelegate in PreviewHost<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized PreviewHost.requestUpdate(after:)()
{
  if (*(unsigned char *)(v0 + 112))
  {
    *(unsigned char *)(v0 + 113) = 1;
  }
  else
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in PreviewHost.requestUpdate(after:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = lazy protocol witness table accessor for type PreviewHost<AnyView> and conformance PreviewHost<A>(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<(), Never>);

  return MEMORY[0x1F40D6B68](v1, v2);
}

uint64_t *specialized PreviewHost.init(content:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 184);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v31 - v7;
  type metadata accessor for EventBindingManager();
  swift_retain();
  v1[9] = EventBindingManager.__allocating_init()();
  *((_WORD *)v1 + 40) = 0;
  *((unsigned char *)v1 + 82) = 0;
  v1[11] = 0;
  v1[12] = 0;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for SceneStorageValues();
  uint64_t v11 = (void *)swift_allocObject();
  v11[3] = specialized Dictionary.init(dictionaryLiteral:)(v9);
  v11[6] = 0;
  swift_unknownObjectWeakInit();
  _OWORD v11[2] = v10;
  v11[4] = *(void *)(v10 + 16);
  v2[13] = (uint64_t)v11;
  *((_WORD *)v2 + 56) = 0;
  *(_DWORD *)((char *)v2 + *(void *)(*v2 + 296)) = *MEMORY[0x1E4F4E7A0];
  LOBYTE(v52) = 0;
  type metadata accessor for ViewGraph();
  swift_allocObject();
  v2[7] = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  uint64_t v12 = swift_retain();
  unint64_t v52 = specialized FocusViewGraph.init(graph:)(v12);
  int v53 = v13;
  int v54 = v14;
  uint64_t v55 = v15;
  LOWORD(v56) = v16 & 0x101;
  BYTE2(v56) = v17 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  ViewGraph.setRootView<A>(_:)();
  id v39 = (id)AGSubgraphGetCurrent();
  uint64_t v18 = (void *)GraphHost.rootSubgraph.getter();
  AGSubgraphSetCurrent();

  type metadata accessor for _ViewList_Subgraph();
  GraphHost.rootSubgraph.getter();
  unsigned char v2[8] = _ViewList_Subgraph.__allocating_init(subgraph:)();
  int v19 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v19((char *)v2 + *(void *)(*v2 + 280), v3, v5);
  v19(v8, v3, v5);
  v40[2] = v5;
  uint64_t v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v40, v5, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_DWORD *)((char *)v2 + *(void *)(*v2 + 288)) = v52;
  swift_release();
  type metadata accessor for PassthroughSubject<(), Never>();
  swift_allocObject();
  v2[2] = PassthroughSubject.init()();
  EnvironmentValues.init()();
  v2[5] = 0;
  *((unsigned char *)v2 + 48) = 0;
  *((_DWORD *)v2 + 13) = 0;
  uint64_t v38 = *(void *)(v4 + 192);
  type metadata accessor for PreviewHost();
  swift_retain();
  swift_getWitnessTable();
  ViewRendererHost.initializeViewGraph()();
  uint64_t v22 = v2[7];
  swift_beginAccess();
  int v23 = *(_DWORD *)(v22 + 80);
  uint64_t v24 = *(void *)(v22 + 88);
  uint64_t v25 = *(void *)(v22 + 112);
  unint64_t v41 = *(void *)(v22 + 72);
  int v42 = v23;
  uint64_t v43 = v24;
  long long v44 = *(_OWORD *)(v22 + 96);
  uint64_t v45 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  uint64_t v26 = v59 | 0x400;
  _GraphValue.init(_:)();
  unint64_t v27 = v52;
  LODWORD(v3) = v53;
  LODWORD(v22) = DWORD1(v56);
  LODWORD(v25) = DWORD2(v56);
  LODWORD(v11) = HIDWORD(v56);
  uint64_t v28 = v58;
  uint64_t v32 = v57;
  int v37 = v60;
  uint64_t v33 = v61;
  uint64_t v34 = v55;
  unsigned int v35 = v56;
  int v36 = v62;
  unint64_t v41 = v52;
  int v42 = v53;
  uint64_t v43 = v55;
  long long v44 = v56;
  uint64_t v45 = v57;
  uint64_t v46 = v58;
  uint64_t v47 = v26;
  int v48 = v60;
  uint64_t v49 = v61;
  unsigned __int8 v50 = v62;
  static View.makeDebuggableViewList(view:inputs:)();
  unint64_t v41 = v27;
  int v42 = v3;
  uint64_t v43 = v34;
  *(void *)&long long v44 = __PAIR64__(v22, v35);
  *((void *)&v44 + 1) = __PAIR64__(v11, v25);
  uint64_t v45 = v32;
  uint64_t v46 = v28;
  uint64_t v47 = v26;
  int v48 = v37;
  uint64_t v49 = v33;
  unsigned __int8 v50 = v36;
  *(_DWORD *)((char *)v2 + *(void *)(*v2 + 296)) = _ViewListOutputs.makeAttribute(inputs:)();
  outlined destroy of _ViewListOutputs((uint64_t)&v51);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v29 = v39;
  AGSubgraphSetCurrent();

  swift_release();
  return v2;
}

uint64_t specialized PreviewHost.init(content:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  type metadata accessor for EventBindingManager();
  swift_retain();
  *(void *)(v1 + 72) = EventBindingManager.__allocating_init()();
  *(_WORD *)(v1 + 80) = 0;
  *(unsigned char *)(v1 + 82) = 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for SceneStorageValues();
  uint64_t v6 = (void *)swift_allocObject();
  v6[3] = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v6[6] = 0;
  swift_unknownObjectWeakInit();
  void v6[2] = v5;
  _DWORD v6[4] = *(void *)(v5 + 16);
  *(void *)(v2 + 104) = v6;
  *(_WORD *)(v2 + 112) = 0;
  *(_DWORD *)(v2 + 132) = *MEMORY[0x1E4F4E7A0];
  type metadata accessor for ViewGraph();
  swift_allocObject();
  *(void *)(v2 + 56) = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  uint64_t v7 = swift_retain();
  specialized FocusViewGraph.init(graph:)(v7);
  int v19 = v8;
  int v20 = v9;
  uint64_t v21 = v10;
  char v22 = v11 & 1;
  char v23 = v12 & 1;
  char v24 = v13 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  ViewGraph.setRootView<A>(_:)();
  id v16 = (id)AGSubgraphGetCurrent();
  int v14 = (void *)GraphHost.rootSubgraph.getter();
  AGSubgraphSetCurrent();

  type metadata accessor for _ViewList_Subgraph();
  GraphHost.rootSubgraph.getter();
  *(void *)(v2 + 64) = _ViewList_Subgraph.__allocating_init(subgraph:)();
  *(void *)(v2 + 120) = a1;
  uint64_t v18 = a1;
  type metadata accessor for External<AnyView>();
  lazy protocol witness table accessor for type PreviewHost<AnyView> and conformance PreviewHost<A>(&lazy protocol witness table cache variable for type External<AnyView> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<AnyView>);
  swift_retain();
  *(_DWORD *)(v2 + 128) = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  type metadata accessor for PassthroughSubject<(), Never>();
  swift_allocObject();
  *(void *)(v2 + 16) = PassthroughSubject.init()();
  EnvironmentValues.init()();
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  type metadata accessor for PreviewHost<AnyView>();
  lazy protocol witness table accessor for type PreviewHost<AnyView> and conformance PreviewHost<A>(&lazy protocol witness table cache variable for type PreviewHost<AnyView> and conformance PreviewHost<A>, (void (*)(uint64_t))type metadata accessor for PreviewHost<AnyView>);
  swift_retain();
  ViewRendererHost.initializeViewGraph()();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  _GraphValue.init(_:)();
  static View.makeDebuggableViewList(view:inputs:)();
  *(_DWORD *)(v2 + 132) = _ViewListOutputs.makeAttribute(inputs:)();
  outlined destroy of _ViewListOutputs((uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  swift_release();
  return v2;
}

uint64_t specialized PreviewHost.content.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 280);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 184) - 8) + 24))(v4, a1);
  swift_endAccess();
  return PreviewHost.content.didset();
}

uint64_t sub_18801B8C4()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of (offset: Int, element: _VariadicView_Children.Element)(uint64_t a1)
{
  type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in PreviewHost.invalidateEverything()()
{
}

void type metadata accessor for External<AnyView>()
{
  if (!lazy cache variable for type metadata for External<AnyView>)
  {
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<AnyView>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type PreviewHost<AnyView> and conformance PreviewHost<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarControlGroupStyle()
{
  return &type metadata for ToolbarControlGroupStyle;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in ToolbarControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)@<X0>(unint64_t *a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v34 = a3;
  unsigned int v35 = (void (*)(uint64_t, unint64_t *))a2;
  uint64_t v33 = a6;
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *a1;
  int v42 = *((_DWORD *)a1 + 2);
  unint64_t v9 = a1[2];
  unint64_t v44 = v8;
  unint64_t v45 = v9;
  LODWORD(v8) = *((_DWORD *)a1 + 6);
  unsigned int v10 = *((_DWORD *)a1 + 8);
  unsigned int v39 = *((_DWORD *)a1 + 7);
  unsigned int v40 = v8;
  unsigned int v11 = *((_DWORD *)a1 + 9);
  unint64_t v12 = a1[6];
  unint64_t v41 = a1[5];
  unint64_t v13 = a1[7];
  int v46 = *((_DWORD *)a1 + 16);
  unsigned int v47 = v11;
  unint64_t v37 = a1[9];
  unint64_t v38 = v13;
  int v48 = *((unsigned __int8 *)a1 + 80);
  v49[4] = a4;
  v49[5] = a5;
  type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  unsigned int v43 = v10;
  unint64_t v36 = v12;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  static View.makeDebuggableViewList(view:inputs:)();
  unsigned int v30 = _ViewListOutputs.makeAttribute(inputs:)();
  unint64_t v59 = v44;
  int v60 = v42;
  unint64_t v61 = v45;
  *(void *)&long long v62 = __PAIR64__(v39, v40);
  *((void *)&v62 + 1) = __PAIR64__(v11, v10);
  unint64_t v14 = v12;
  unint64_t v63 = v41;
  *(void *)&long long v64 = v12;
  *((void *)&v64 + 1) = v13;
  int v65 = v46;
  unint64_t v66 = v37;
  char v67 = v48;
  uint64_t v15 = _ViewListInputs.traits.getter();
  id v16 = (id)AGSubgraphGetCurrent();
  if (!v16) {
    __break(1u);
  }
  char v17 = v16;
  unsigned int v29 = *MEMORY[0x1E4F4E7A0];
  unint64_t v59 = v44;
  int v60 = v42;
  unint64_t v61 = v45;
  *(void *)&long long v62 = __PAIR64__(v39, v40);
  *((void *)&v62 + 1) = __PAIR64__(v47, v43);
  unint64_t v63 = v41;
  *(void *)&long long v64 = v14;
  *((void *)&v64 + 1) = v38;
  int v65 = v46;
  unint64_t v66 = v37;
  char v67 = v48;
  if (v37)
  {
    unint64_t v50 = v37;
    LOBYTE(v51) = v48 & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = specialized Set._Variant.insert(_:)(v49, (uint64_t)&type metadata for ControlGroupCollapsedViewKey);
    unint64_t v66 = v50;
    char v67 = (char)v51;
  }
  else
  {
    swift_retain();
    swift_retain();
    uint64_t v18 = swift_bridgeObjectRetain();
  }
  unsigned int v19 = v29;
  if ((v15 & 0x100000000) == 0) {
    unsigned int v19 = v15;
  }
  unint64_t v50 = __PAIR64__(v19, v30);
  id v51 = v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v27 = type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sypSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
  uint64_t v21 = v20;
  id v22 = v17;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v50, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)&v26, v27, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v23);

  LOBYTE(v50) = 0;
  _ViewListInputs.traits.setter();
  unint64_t v50 = v59;
  LODWORD(v51) = v60;
  unint64_t v52 = v61;
  long long v53 = v62;
  unint64_t v54 = v63;
  long long v55 = v64;
  int v56 = v65;
  unint64_t v57 = v66;
  char v58 = v67;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v24 = swift_bridgeObjectRetain();
  v35(v24, &v50);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();

  return outlined destroy of _ViewListOutputs((uint64_t)v68);
}

uint64_t closure #1 in static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier();
  uint64_t v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  TableRow.MakeList.traits.getter(a1, v8);
  if (v8[0]) {
    uint64_t v12 = v8[0];
  }
  else {
    ViewTraitCollection.init()();
  }
  type metadata accessor for ViewList();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)v8);
  id v6 = a2;
  default argument 2 of _VariadicView_Children.init(_:contentSubgraph:transform:)();
  _VariadicView_Children.init(_:contentSubgraph:transform:)();
  if (_VariadicView_Children.endIndex.getter())
  {
    _VariadicView_Children.subscript.getter();
    outlined init with copy of _ViewList_View((uint64_t)v8, (uint64_t)v9);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v8);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    uint64_t v10 = 0;
  }
  outlined init with copy of _ViewList_View?((uint64_t)v9, (uint64_t)v8);
  ViewTraitCollection.subscript.setter();
  outlined destroy of _ViewList_View?((uint64_t)v9);
  uint64_t result = outlined destroy of _VariadicView_Children((uint64_t)v11);
  *a3 = v12;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarControlGroupStyle.CollapsedViewModifier<A>.AddTrait@<X0>(uint64_t *a1@<X8>)
{
  return ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait.value.getter(*(void *)v1, *(void **)(v1 + 8), a1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToolbarControlGroupStyle.CollapsedViewModifier<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToolbarControlGroupStyle.CollapsedViewModifier<A>@<X0>(unint64_t *a1@<X1>, void (*a2)(uint64_t, unint64_t *)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

double protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance ToolbarControlGroupStyle@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarControlGroupStyle.CollapsedViewModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ToolbarControlGroupStyle.CollapsedViewModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18801C49CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        id v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>();
    lazy protocol witness table accessor for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>)
  {
    type metadata accessor for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>();
    type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>, ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>>);
    }
  }
}

void type metadata accessor for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>()
{
  if (!lazy cache variable for type metadata for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>)
  {
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>);
    }
  }
}

void type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>()
{
  if (!lazy cache variable for type metadata for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>)
  {
    type metadata accessor for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>();
    lazy protocol witness table accessor for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>();
    unint64_t v0 = type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ToolbarControlGroupStyle.CollapsedViewModifier<Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>>);
    }
  }
}

void type metadata accessor for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for Menu();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>;
  if (!lazy protocol witness table cache variable for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>)
  {
    type metadata accessor for Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Menu<ControlGroupStyleConfiguration.Label, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<EmptyView, ControlGroupStyleConfiguration.Content, EmptyView> and conformance <> Section<A, B, C>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarControlGroupStyle.CollapsedViewModifier<A>()
{
  return &protocol witness table for ToolbarControlGroupStyle.CollapsedViewModifier<A>;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ControlGroupCollapsedViewKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of _ViewList_View?((uint64_t)&static ControlGroupCollapsedViewKey.defaultValue, a1);
}

uint64_t outlined init with copy of _ViewList_View?(uint64_t a1, uint64_t a2)
{
  _sypSgMaTm_0(0, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static ToolbarControlGroupStyle.CollapsedViewModifier._makeViewList(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a2[1];
  a1[1] = v3;
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void **)(a2 + 8);
  id v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  id v5 = v3;

  return a1;
}

void *assignWithTake for ToolbarControlGroupStyle.CollapsedViewModifier.AddTrait(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)a1[1];
  a1[1] = a2[1];

  return a1;
}

ValueMetadata *type metadata accessor for ControlGroupCollapsedViewKey()
{
  return &type metadata for ControlGroupCollapsedViewKey;
}

uint64_t base witness table accessor for _AttributeBody in ToolbarControlGroupStyle.CollapsedViewModifier<A>.AddTrait()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of _ViewList_View?(uint64_t a1)
{
  _sypSgMaTm_0(0, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*PressableGestureCallbacks.dispatch(phase:state:)(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t a1), uint64_t a6, uint64_t a7, uint64_t a8))()
{
  uint64_t v57 = a4;
  uint64_t v58 = a8;
  uint64_t v55 = a6;
  int v56 = a5;
  uint64_t v59 = a3;
  uint64_t v11 = *(void *)(a7 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](a1);
  int v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  id v16 = (char *)&v55 - v15;
  uint64_t v17 = type metadata accessor for GesturePhase();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v55 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v55 - v20, a1, v17, v19);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v28 = v56;
    unsigned int v29 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v29(v16, v21, a7);
    int v30 = *a2;
    *a2 = 0;
    if (v30 == 1 && v59)
    {
      if (v28)
      {
        v29(v13, v16, a7);
        unint64_t v31 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        uint64_t v32 = (void *)swift_allocObject();
        uint64_t v33 = v58;
        uint64_t v34 = v59;
        v32[2] = a7;
        v32[3] = v33;
        uint64_t v35 = v57;
        void v32[4] = v34;
        v32[5] = v35;
        unint64_t v36 = (char *)v32 + v31;
        uint64_t v37 = v55;
        v32[6] = v28;
        v32[7] = v37;
        v29(v36, v13, a7);
        outlined copy of AppIntentExecutor?(v34);
        outlined copy of AppIntentExecutor?((uint64_t)v28);
        return partial apply for closure #1 in PressableGestureCallbacks.dispatch(phase:state:);
      }
      else
      {
        unsigned int v47 = *(void (**)(char *, uint64_t))(v11 + 8);
        uint64_t v48 = v57;
        swift_retain();
        v47(v16, a7);
        uint64_t v49 = swift_allocObject();
        *(void *)(v49 + 16) = v59;
        *(void *)(v49 + 24) = v48;
        return partial apply for closure #1 in Coordinator.menuWillDismiss();
      }
    }
    else
    {
      uint64_t v44 = (uint64_t)v28;
      if (v28)
      {
        uint64_t v45 = swift_allocObject();
        uint64_t v46 = v55;
        *(void *)(v45 + 16) = v28;
        *(void *)(v45 + 24) = v46;
        uint64_t v28 = partial apply for thunk for @escaping @callee_guaranteed (@unowned CGPoint?) -> ();
      }
      else
      {
        uint64_t v45 = 0;
      }
      uint64_t v50 = v58;
      id v51 = *(uint64_t (**)(uint64_t, uint64_t))(v58 + 16);
      outlined copy of AppIntentExecutor?(v44);
      uint64_t v60 = v51(a7, v50);
      uint64_t v61 = v52;
      char v62 = v53 & 1;
      type metadata accessor for CGPoint?();
      uint64_t v38 = bind<A>(_:_:)();
      outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v28, v45);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, a7);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 3)
    {
      int v23 = *a2;
      *a2 = 0;
      if (v23 == 1)
      {
        uint64_t v24 = v59;
        if (v59)
        {
          uint64_t v25 = swift_allocObject();
          uint64_t v26 = v57;
          *(void *)(v25 + 16) = v24;
          *(void *)(v25 + 24) = v26;
          uint64_t v27 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v25 = 0;
        }
        LOBYTE(v60) = 0;
        outlined copy of AppIntentExecutor?(v24);
        uint64_t v38 = bind<A>(_:_:)();
        outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v27, v25);
        return (uint64_t (*)())v38;
      }
      return 0;
    }
    int v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 24))(a1, a7) & 1;
    if (v39 == *a2)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
      return 0;
    }
    *a2 = v39;
    uint64_t v40 = v59;
    if (v59)
    {
      uint64_t v41 = swift_allocObject();
      uint64_t v42 = v57;
      *(void *)(v41 + 16) = v40;
      *(void *)(v41 + 24) = v42;
      unsigned int v43 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    }
    else
    {
      unsigned int v43 = 0;
      uint64_t v41 = 0;
    }
    LOBYTE(v60) = v39;
    outlined copy of AppIntentExecutor?(v40);
    uint64_t v38 = bind<A>(_:_:)();
    outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v43, v41);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  }
  return (uint64_t (*)())v38;
}

uint64_t PressableGestureCallbacks.cancel(state:)(char a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 1) == 0) {
    return 0;
  }
  if (a2)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a2;
    *(void *)(v5 + 24) = a3;
    uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  outlined copy of AppIntentExecutor?(a2);
  uint64_t v7 = bind<A>(_:_:)();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v6, v5);
  return v7;
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance PressableGestureCallbacks<A>(uint64_t a1, unsigned char *a2, uint64_t a3))()
{
  return PressableGestureCallbacks.dispatch(phase:state:)(a1, a2, *(void *)v3, *(void *)(v3 + 8), *(uint64_t (**)(uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for GestureCallbacks.cancel(state:) in conformance PressableGestureCallbacks<A>(char *a1)
{
  return PressableGestureCallbacks.cancel(state:)(*a1, *v1, v1[1]);
}

BOOL protocol witness for static PressableEventValue.isPressing(_:) in conformance CGPoint(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17) - 1 < 2 || !*(unsigned char *)(a1 + 17) && (*(unsigned char *)(a1 + 16) & 1) == 0;
}

unint64_t instantiation function for generic protocol witness table for CGPoint(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CGPoint and conformance CGPoint();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CGPoint and conformance CGPoint()
{
  unint64_t result = lazy protocol witness table cache variable for type CGPoint and conformance CGPoint;
  if (!lazy protocol witness table cache variable for type CGPoint and conformance CGPoint)
  {
    type metadata accessor for CGPoint(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance PhysicalButtonEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 25) - 1 >= 2)
  {
    if (*(unsigned char *)(a1 + 25)) {
      return 0;
    }
    if (*(void *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<PhysicalButtonEvent>(*(void *)a1, *(void *)(a1 + 8), 1, *(unsigned __int8 *)(a1 + 24), 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for PhysicalButtonEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PhysicalButtonEvent and conformance PhysicalButtonEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonEvent and conformance PhysicalButtonEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonEvent and conformance PhysicalButtonEvent;
  if (!lazy protocol witness table cache variable for type PhysicalButtonEvent and conformance PhysicalButtonEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonEvent and conformance PhysicalButtonEvent);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance SpatialEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 72) - 1 >= 2)
  {
    if (*(unsigned char *)(a1 + 72)) {
      return 0;
    }
    if (*(void *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<SpatialEvent>(*(void *)a1, *(void *)(a1 + 8), 1, *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for SpatialEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SpatialEvent and conformance SpatialEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialEvent and conformance SpatialEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialEvent and conformance SpatialEvent;
  if (!lazy protocol witness table cache variable for type SpatialEvent and conformance SpatialEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialEvent and conformance SpatialEvent);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance TappableEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) - 1 >= 2)
  {
    if (*(unsigned char *)(a1 + 24)) {
      return 0;
    }
    if (*(void *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<TappableEvent>(*(void *)a1, *(void *)(a1 + 8), 1, 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for TappableEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TappableEvent and conformance TappableEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TappableEvent and conformance TappableEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type TappableEvent and conformance TappableEvent;
  if (!lazy protocol witness table cache variable for type TappableEvent and conformance TappableEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TappableEvent and conformance TappableEvent);
  }
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance TappableSpatialEvent(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 64) - 1 >= 2)
  {
    if (*(unsigned char *)(a1 + 64)) {
      return 0;
    }
    if (*(void *)(a1 + 16) == 1)
    {
      outlined consume of GesturePhase<TappableSpatialEvent>(*(void *)a1, *(void *)(a1 + 8), 1, *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), 0);
      return 0;
    }
  }
  return 1;
}

unint64_t instantiation function for generic protocol witness table for TappableSpatialEvent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TappableSpatialEvent and conformance TappableSpatialEvent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TappableSpatialEvent and conformance TappableSpatialEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type TappableSpatialEvent and conformance TappableSpatialEvent;
  if (!lazy protocol witness table cache variable for type TappableSpatialEvent and conformance TappableSpatialEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TappableSpatialEvent and conformance TappableSpatialEvent);
  }
  return result;
}

uint64_t protocol witness for PressableEventValue.pressLocation.getter in conformance SpatialLongPressGesture.Value()
{
  return *(void *)v0;
}

BOOL protocol witness for static PressableEventValue.isPressing(_:) in conformance SpatialLongPressGesture.Value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17) - 1 < 2 || !*(unsigned char *)(a1 + 17) && *(unsigned char *)(a1 + 16) != 2;
}

unint64_t instantiation function for generic protocol witness table for SpatialLongPressGesture.Value(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SpatialLongPressGesture.Value and conformance SpatialLongPressGesture.Value();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_18801D580()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for CGPoint?()
{
  if (!lazy cache variable for type metadata for CGPoint?)
  {
    type metadata accessor for CGPoint(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGPoint?);
    }
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGPoint?) -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_18801D644()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PressableGestureCallbacks.dispatch(phase:state:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 48);
  (*(void (**)(void))(v0 + 32))(0);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  return v3(v4);
}

uint64_t closure #1 in Gesture<>.callbacks(pressing:pressed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (a4) {
    return a4();
  }
  return result;
}

uint64_t sub_18801D7F0()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t outlined consume of GesturePhase<TappableSpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9 == 2 || a9 == 1) {
    return swift_release();
  }
  if (!a9) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<TappableEvent>(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 2 || a4 == 1) {
    return swift_release();
  }
  if (!a4) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<PhysicalButtonEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 == 2 || a5 == 1) {
    return swift_release();
  }
  if (!a5) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

void DoubleColumnNavigationViewStyle._body(configuration:)(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void DoubleColumnNavigationViewStyle._columnBasedBody(configuration:)(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in DoubleColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in DoubleColumnNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DoubleColumnNavigationViewStyle()
{
  return &type metadata for DoubleColumnNavigationViewStyle;
}

uint64_t type metadata completion function for BridgedSplitView.Coordinator()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in DoubleColumnNavigationView.body(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = _VariadicView_Children.endIndex.getter();
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (v2 < 0 || result < v2) {
    goto LABEL_13;
  }
  if ((unint64_t)v2 >= 2)
  {
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if (result)
    {
      uint64_t result = _VariadicView_Children.endIndex.getter();
      uint64_t v4 = result - 1;
      if (!__OFSUB__(result, 1))
      {
        uint64_t result = _VariadicView_Children.endIndex.getter();
        if ((v4 & 0x8000000000000000) == 0 && v4 < result)
        {
          _VariadicView_Children.subscript.getter();
          outlined init with copy of _VariadicView_Children.Element((uint64_t)v5, a1);
          *(unsigned char *)(a1 + 96) = 0;
          return outlined destroy of _VariadicView_Children.Element((uint64_t)v5);
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return result;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *(unsigned char *)(a1 + 96) = 1;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance DoubleColumnNavigationView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance DoubleColumnNavigationView@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result)
  {
    _VariadicView_Children.subscript.getter();
    closure #1 in DoubleColumnNavigationView.body(children:)((uint64_t)&v5);
    char v3 = static Edge.Set.all.getter();
    outlined init with copy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>((uint64_t)v4, a1);
    *(void *)(a1 + 200) = -1;
    *(unsigned char *)(a1 + 208) = v3;
    return outlined destroy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>((uint64_t)v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id BridgedSplitView.makeCoordinator()(uint64_t a1)
{
  char v3 = (objc_class *)type metadata accessor for BridgedSplitView.Coordinator();
  type metadata accessor for UIHostingController();
  id v4 = specialized UIHostingController.__allocating_init(rootView:)((objc_class *)(v1 + *(int *)(a1 + 52)));
  id v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v4);

  id v6 = objc_allocWithZone(v3);
  return BridgedSplitView.Coordinator.init(_:)((uint64_t)v5);
}

id BridgedSplitView.Coordinator.__allocating_init(_:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return BridgedSplitView.Coordinator.init(_:)(a1);
}

id BridgedSplitView.makeUIViewController(context:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  type metadata accessor for UIHostingController();
  id v3 = specialized UIHostingController.__allocating_init(rootView:)(v1);
  id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v3);
  id v5 = (id)specialized UIHostingController.host.getter();
  _UIHostingView.renderForPreferences(updateDisplayList:)(0);

  id v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NotificationSendingSplitViewController()), sel_initWithNibName_bundle_, 0, 0);
  objc_msgSend(v6, sel_setDelegate_, v2);
  type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1883863C0;
  *(void *)(v7 + 32) = v4;
  size_t v8 = *(void **)(v2 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController);
  *(void *)(v7 + 40) = v8;
  id v9 = v8;
  specialized Array._endMutation()();
  type metadata accessor for UIViewController();
  id v10 = v6;
  id v11 = v4;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setViewControllers_, isa);

  objc_msgSend(v10, sel_setPreferredDisplayMode_, 0);
  BridgedSplitView.Coordinator.placeholderHost.getter();
  uint64_t v14 = v13;
  id v15 = objc_msgSend(v13, sel_navigationItem);

  id v16 = objc_msgSend(v10, sel_displayModeButtonItem);
  objc_msgSend(v15, sel_setLeftBarButtonItem_, v16);

  return v10;
}

void BridgedSplitView.updateUIViewController(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v6 = *(void *)(a2 + 8);
  id v7 = objc_msgSend(a1, sel_viewControllers);
  type metadata accessor for UIViewController();
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    id v9 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  id v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v8 & 0xC000000000000001) != 0)
  {
LABEL_12:
    id v10 = (id)MEMORY[0x18C117680](0, v8);
    goto LABEL_6;
  }
  if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_14;
  }
  id v10 = *(id *)(v8 + 32);
LABEL_6:
  id v9 = v10;
  swift_bridgeObjectRelease();
  self;
  if (!swift_dynamicCastObjCClass())
  {
LABEL_14:

    __break(1u);
    return;
  }
  swift_retain();
  swift_retain();
  UINavigationController.updateRootHost<A>(root:environment:transaction:)(v4, (uint64_t)v13, v6);
  swift_release();
  swift_release();
  BridgedSplitView.Coordinator.placeholderHost.getter();
  id v12 = v11;
  specialized UIHostingController.rootView.setter((uint64_t)v4 + *(int *)(a3 + 52));
}

void BridgedSplitView.Coordinator.placeholderHost.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController), sel_viewControllers);
  type metadata accessor for UIViewController();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v2 & 0xC000000000000001) != 0)
  {
    MEMORY[0x18C117680](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v3 = *(id *)(v2 + 32);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for UIHostingController();

  swift_dynamicCastClassUnconditional();
}

id BridgedSplitView.Coordinator.init(_:)(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v1;
  *(void *)((char *)v1 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController) = a1;
  long long v4 = *(_OWORD *)(v2 + 80);
  long long v5 = *(_OWORD *)(v2 + 96);
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for BridgedSplitView.Coordinator();
  return objc_msgSendSuper2(&v6, sel_init, v4, v5);
}

BOOL @objc BridgedSplitView.Coordinator.splitViewController(_:collapseSecondary:onto:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized BridgedSplitView.Coordinator.splitViewController(_:collapseSecondary:onto:)(a4);
}

id @objc BridgedSplitView.Coordinator.splitViewController(_:separateSecondaryFrom:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  id v9 = specialized BridgedSplitView.Coordinator.splitViewController(_:separateSecondaryFrom:)();

  return v9;
}

void @objc BridgedSplitView.Coordinator.init()()
{
}

void BridgedSplitView.Coordinator.__ivar_destroyer()
{
}

id BridgedSplitView.Coordinator.__deallocating_deinit()
{
  long long v2 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50);
  long long v3 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for BridgedSplitView.Coordinator();
  return objc_msgSendSuper2(&v4, sel_dealloc, v2, v3);
}

void @objc BridgedSplitView.Coordinator.__ivar_destroyer(uint64_t a1)
{
}

uint64_t type metadata accessor for BridgedSplitView.Coordinator()
{
  return swift_getGenericMetadata();
}

id protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance BridgedSplitView<A, B>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = BridgedSplitView.makeCoordinator()(a1);
  *a2 = result;
  return result;
}

uint64_t NotificationSendingSplitViewController.showDetailViewController(_:sender:)(void *a1, uint64_t a2)
{
  id v5 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for willShowDetailNotification != -1) {
    swift_once();
  }
  uint64_t v6 = static DoubleColumnNavigationViewStyle.willShowDetailNotification;
  type metadata accessor for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (AnyHashable, Any), MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  v21[0] = 0xD000000000000017;
  v21[1] = 0x8000000188328A10;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = type metadata accessor for UIViewController();
  *(void *)(inited + 72) = a1;
  id v8 = a1;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_postNotificationName_object_userInfo_, v6, v2, isa);

  outlined init with copy of Any?(a2, (uint64_t)v21);
  uint64_t v10 = v22;
  if (v22)
  {
    id v11 = __swift_project_boxed_opaque_existential_1(v21, v22);
    uint64_t v12 = *(void *)(v10 - 8);
    double v13 = MEMORY[0x1F4188790](v11);
    id v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v12 + 16))(v15, v13);
    uint64_t v16 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    uint64_t v16 = 0;
  }
  uint64_t v17 = (objc_class *)type metadata accessor for NotificationSendingSplitViewController();
  v20.receiver = v2;
  v20.super_class = v17;
  objc_msgSendSuper2(&v20, sel_showDetailViewController_sender_, v8, v16);
  return swift_unknownObjectRelease();
}

id NotificationSendingSplitViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NotificationSendingSplitViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for NotificationSendingSplitViewController()
{
  return self;
}

uint64_t sub_18801E858()
{
  return lazy protocol witness table accessor for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>);
}

void type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>)
  {
    type metadata accessor for NavigationView<_NavigationViewStyleConfiguration.Content>(255, (unint64_t *)&lazy cache variable for type metadata for NavigationView<_NavigationViewStyleConfiguration.Content>, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, (uint64_t)&protocol witness table for _NavigationViewStyleConfiguration.Content, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NavigationView);
    type metadata accessor for NavigationViewStyleModifier<ColumnNavigationViewStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>);
    }
  }
}

void type metadata accessor for NavigationViewStyleModifier<ColumnNavigationViewStyle>()
{
  if (!lazy cache variable for type metadata for NavigationViewStyleModifier<ColumnNavigationViewStyle>)
  {
    lazy protocol witness table accessor for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle();
    unint64_t v0 = type metadata accessor for NavigationViewStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<ColumnNavigationViewStyle>);
    }
  }
}

ValueMetadata *type metadata accessor for DoubleColumnNavigationView()
{
  return &type metadata for DoubleColumnNavigationView;
}

unint64_t instantiation function for generic protocol witness table for DoubleColumnNavigationView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DoubleColumnNavigationView and conformance DoubleColumnNavigationView();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in DoubleColumnNavigationView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>()
{
  if (!lazy cache variable for type metadata for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>)
  {
    type metadata accessor for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>(255, &lazy cache variable for type metadata for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>();
    unint64_t v0 = type metadata accessor for BridgedSplitView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>)
  {
    type metadata accessor for NavigationView<_NavigationViewStyleConfiguration.Content>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<EmptyView>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F417F0], MEMORY[0x1E4F40210]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>);
    }
  }
}

void type metadata accessor for NavigationView<_NavigationViewStyleConfiguration.Content>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>)
  {
    type metadata accessor for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>(255, &lazy cache variable for type metadata for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>();
    lazy protocol witness table accessor for type _UnaryViewAdaptor<EmptyView> and conformance _UnaryViewAdaptor<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for BridgedSplitView()
{
  return swift_getGenericMetadata();
}

uint64_t outlined destroy of BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>(uint64_t a1)
{
  type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

BOOL specialized BridgedSplitView.Coordinator.splitViewController(_:collapseSecondary:onto:)(uint64_t a1)
{
  return *(void *)(v1 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController) == a1;
}

void *specialized BridgedSplitView.Coordinator.splitViewController(_:separateSecondaryFrom:)()
{
  self;
  uint64_t v1 = (void *)swift_dynamicCastObjCClass();
  if (!v1) {
    return 0;
  }
  id v2 = objc_msgSend(v1, sel_topViewController);
  if (v2)
  {
    long long v3 = v2;
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();

    if (v4) {
      return 0;
    }
  }
  id v5 = *(void **)(v0 + direct field offset for BridgedSplitView.Coordinator.placeholderNavController);
  id v6 = v5;
  return v5;
}

void specialized BridgedSplitView.Coordinator.init()()
{
}

uint64_t getEnumTagSinglePayload for BridgedSplitView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for BridgedSplitView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18801F3BCLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t sub_18801F3E4()
{
  return lazy protocol witness table accessor for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>)
  {
    type metadata accessor for BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BridgedSplitView<_VariadicView_Children.Element, Group<_ConditionalContent<_VariadicView_Children.Element, _UnaryViewAdaptor<EmptyView>>>>, _SafeAreaRegionsIgnoringLayout>);
    }
  }
}

uint64_t EnvironmentValues.isSelectable.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.isSelectable.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v8;
}

uint64_t Optional<A>.apply<A>(as:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v26 = a7;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int v17 = (char *)&v25 - v16;
  double v19 = MEMORY[0x1F4188790](v18);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v8, a4, v19);
  int v22 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v17, v22 ^ 1u, 1, a5);
  uint64_t v28 = *(void *)(a4 + 16);
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = v26;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))_sqd__Ign_qd__yts5NeverOIegnrzr_SHRzSHRd__r__lTRTA_0, (uint64_t)v27, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, v23, (uint64_t)&v34);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed A1) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t _sqd__Ign_qd__yts5NeverOIegnrzr_SHRzSHRd__r__lTRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t Set.apply<A>(as:operation:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v32 - v12;
  uint64_t result = _setDownCastConditional<A, B>(_:)();
  if (!result)
  {
    uint64_t v16 = static Array._allocateUninitialized(_:)();
    if (MEMORY[0x18C115CC0](v16, a6))
    {
      uint64_t v15 = specialized Set.init(_nonEmptyArrayLiteral:)(v16, a6, a8);
      uint64_t result = swift_bridgeObjectRelease();
      if ((v15 & 0xC000000000000001) != 0) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v15 = MEMORY[0x1E4FBC870];
      if ((MEMORY[0x1E4FBC870] & 0xC000000000000001) != 0) {
        goto LABEL_6;
      }
    }
LABEL_8:
    uint64_t v18 = 0;
    uint64_t v20 = -1 << *(unsigned char *)(v15 + 32);
    uint64_t v21 = *(void *)(v15 + 56);
    uint64_t v34 = v15 + 56;
    uint64_t v22 = ~v20;
    uint64_t v23 = -v20;
    if (v23 < 64) {
      uint64_t v24 = ~(-1 << v23);
    }
    else {
      uint64_t v24 = -1;
    }
    unint64_t v19 = v24 & v21;
    uint64_t v17 = v22;
    goto LABEL_12;
  }
  uint64_t v15 = result;
  if ((result & 0xC000000000000001) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  __CocoaSet.makeIterator()();
  uint64_t result = Set.Iterator.init(_cocoa:)();
  uint64_t v15 = v36;
  uint64_t v34 = v37;
  uint64_t v17 = v38;
  uint64_t v18 = v39;
  unint64_t v19 = v40;
LABEL_12:
  uint64_t v35 = v15 & 0x7FFFFFFFFFFFFFFFLL;
  v32[1] = v17;
  int64_t v33 = (unint64_t)(v17 + 64) >> 6;
  while (v15 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_32;
    }
    _forceBridgeFromObjectiveC<A>(_:_:)();
    swift_unknownObjectRelease();
    uint64_t v27 = *(void *)(a6 - 8);
LABEL_15:
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v13, 0, 1, a6);
    a2(v13);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, a6);
  }
  if (v19)
  {
    unint64_t v25 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v26 = v25 | (v18 << 6);
LABEL_14:
    uint64_t v27 = *(void *)(a6 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v13, *(void *)(v15 + 48) + *(void *)(v27 + 72) * v26, a6);
    goto LABEL_15;
  }
  int64_t v28 = v18 + 1;
  if (!__OFADD__(v18, 1))
  {
    if (v28 >= v33) {
      goto LABEL_32;
    }
    unint64_t v29 = *(void *)(v34 + 8 * v28);
    uint64_t v30 = v18 + 1;
    if (!v29)
    {
      uint64_t v30 = v18 + 2;
      if (v18 + 2 >= v33) {
        goto LABEL_32;
      }
      unint64_t v29 = *(void *)(v34 + 8 * v30);
      if (!v29)
      {
        uint64_t v30 = v18 + 3;
        if (v18 + 3 >= v33) {
          goto LABEL_32;
        }
        unint64_t v29 = *(void *)(v34 + 8 * v30);
        if (!v29)
        {
          uint64_t v31 = v18 + 4;
          while (v33 != v31)
          {
            unint64_t v29 = *(void *)(v34 + 8 * v31++);
            if (v29)
            {
              uint64_t v30 = v31 - 1;
              goto LABEL_29;
            }
          }
LABEL_32:
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 56))(v13, 1, 1, a6);
          return outlined consume of Set<UIPress>.Iterator._Variant();
        }
      }
    }
LABEL_29:
    unint64_t v19 = (v29 - 1) & v29;
    unint64_t v26 = __clz(__rbit64(v29)) + (v30 << 6);
    uint64_t v18 = v30;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance AsAnySelection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AsAnySelection.set(base:newValue:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t Optional<A>.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v29[1] = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  v29[0] = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v30 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  unsigned int v10 = (char *)v29 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v12);
  int64_t v33 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v29 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v6 + 56))((char *)v29 - v16, 1, 1, v5, v15);
  uint64_t v31 = TupleTypeMetadata2;
  uint64_t v18 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19(v10, v3, a1);
  v19(v18, (uint64_t)v17, a1);
  uint64_t v32 = v6;
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (v20(v10, 1, v5) != 1)
  {
    v19(v33, (uint64_t)v10, a1);
    if (v20(v18, 1, v5) != 1)
    {
      uint64_t v23 = v32;
      uint64_t v24 = v29[0];
      (*(void (**)(void, char *, uint64_t))(v32 + 32))(v29[0], v18, v5);
      unint64_t v25 = v33;
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v26(v24, v5);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
      v27(v17, a1);
      v26((uint64_t)v25, v5);
      v27(v10, a1);
      return v22 & 1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, a1);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v5);
    goto LABEL_6;
  }
  uint64_t v21 = *(void (**)(char *, uint64_t))(v11 + 8);
  v21(v17, a1);
  if (v20(v18, 1, v5) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
    char v22 = 0;
    return v22 & 1;
  }
  v21(v10, a1);
  char v22 = 1;
  return v22 & 1;
}

uint64_t Optional<A>.allowsMultiple.getter()
{
  return 0;
}

BOOL Optional<A>.count.getter(uint64_t a1, uint64_t a2)
{
  return (Optional<A>.isEmpty.getter(a1, a2) & 1) == 0;
}

uint64_t Optional<A>.contains<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v42 = a5;
  uint64_t v48 = a1;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v41 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v46 = (char *)&v40 - v13;
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v14 = v47;
  MEMORY[0x1F4188790](v15);
  uint64_t v49 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)&v40 - v18;
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v40 - v21;
  double v24 = MEMORY[0x1F4188790](v23);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0), v6, a2, v24);
  int v27 = swift_dynamicCast();
  int64_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
  v28(v22, v27 ^ 1u, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v19, v48, a3);
  v28(v19, 0, 1, a3);
  uint64_t v44 = TupleTypeMetadata2;
  uint64_t v29 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v30 = v46;
  uint64_t v31 = &v46[v29];
  uint64_t v48 = v14;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v32(v46, v22, v11);
  v32(v31, v19, v11);
  uint64_t v45 = v9;
  int64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v33(v30, 1, a3) != 1)
  {
    v32(v49, v30, v11);
    if (v33(v31, 1, a3) != 1)
    {
      uint64_t v36 = v45;
      uint64_t v37 = v41;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v41, v31, a3);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v38 = *(void (**)(char *, uint64_t))(v36 + 8);
      v38(v37, a3);
      uint64_t v34 = *(void (**)(char *, uint64_t))(v47 + 8);
      v34(v19, v11);
      v38(v49, a3);
      v34(v30, v11);
      goto LABEL_8;
    }
    uint64_t v34 = *(void (**)(char *, uint64_t))(v47 + 8);
    v34(v19, v11);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v49, a3);
    goto LABEL_6;
  }
  uint64_t v34 = *(void (**)(char *, uint64_t))(v47 + 8);
  v34(v19, v11);
  if (v33(v31, 1, a3) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v44);
    char v35 = 0;
    goto LABEL_8;
  }
  v34(v30, v11);
  char v35 = 1;
LABEL_8:
  v34(v22, v11);
  return v35 & 1;
}

uint64_t protocol witness for Selection.isEmpty.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  return Optional<A>.isEmpty.getter(a1, *(void *)(a2 - 8));
}

BOOL protocol witness for Selection.count.getter in conformance <A> A?(uint64_t a1, uint64_t a2)
{
  return Optional<A>.count.getter(a1, *(void *)(a2 - 8));
}

uint64_t protocol witness for Selection.contains<A>(id:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Optional<A>.contains<A>(id:)(a1, a4, a2, a4, a3);
}

uint64_t protocol witness for Selection.apply<A>(as:operation:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return Optional<A>.apply<A>(as:operation:)(a1, a2, a3, a6, a4, *(void *)(a7 - 8), a5);
}

uint64_t Set.allowsMultiple.getter()
{
  return 1;
}

uint64_t Set.contains<A>(id:)()
{
  uint64_t result = _setDownCastConditional<A, B>(_:)();
  if (result)
  {
    char v1 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    return v1 & 1;
  }
  return result;
}

uint64_t protocol witness for Selection.isEmpty.getter in conformance Set<A>()
{
  return Set.isEmpty.getter();
}

uint64_t protocol witness for Selection.count.getter in conformance Set<A>()
{
  return Set.count.getter();
}

uint64_t protocol witness for Selection.contains<A>(id:) in conformance Set<A>()
{
  return Set.contains<A>(id:)();
}

uint64_t protocol witness for Selection.apply<A>(as:operation:) in conformance Set<A>(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return Set.apply<A>(as:operation:)(a1, a2, a3, *v6, *(void *)(a6 + 16), a4, *(void *)(a6 + 24), a5);
}

uint64_t sub_1880207B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm_4(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSelected.getter, a3);
}

uint64_t sub_1880207C8(unsigned __int8 *a1)
{
  return EnvironmentValues.isSelectable.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_188020814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm_4(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSelectable.getter, a3);
}

uint64_t sub_18802082C(unsigned __int8 *a1)
{
  return EnvironmentValues.isSelectable.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectableKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectableKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t dispatch thunk of Selection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Selection.allowsMultiple.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Selection.count.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Selection.contains<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of Selection.apply<A>(as:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 40))();
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSelectedKey()
{
  return &type metadata for EnvironmentValues.IsSelectedKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSelectableKey()
{
  return &type metadata for EnvironmentValues.IsSelectableKey;
}

uint64_t specialized AsAnySelection.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v15[-v10];
  outlined init with copy of TableColumnList(a2, (uint64_t)v19);
  type metadata accessor for Selection();
  int v12 = swift_dynamicCast();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(v11, v12 ^ 1u, 1, a3);
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in AsAnySelection.set(base:newValue:), (uint64_t)v15, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, v13, (uint64_t)&v20);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t type metadata accessor for Selection()
{
  unint64_t result = lazy cache variable for type metadata for Selection;
  if (!lazy cache variable for type metadata for Selection)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Selection);
  }
  return result;
}

uint64_t partial apply for closure #1 in AsAnySelection.set(base:newValue:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(*(void *)(v1 + 16) - 8) + 24))(*(void *)(v1 + 32), a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CollectionChanges<A, B>.Element.Kind(char *a1, char *a2)
{
  return static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CollectionChanges<A, B>.Element.Kind()
{
  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CollectionChanges<A, B>.Element.Kind(uint64_t a1)
{
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CollectionChanges<A, B>.Element.Kind()
{
  Hasher.init(_seed:)();
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t CollectionChanges.Element.kind.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
      return 1;
    }
    else
    {
      uint64_t v8 = type metadata accessor for Range();
      uint64_t v9 = type metadata accessor for Range();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(&v5[*(int *)(TupleTypeMetadata2 + 48)], v9);
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v5, v8);
      return 2;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
    return 0;
  }
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance CollectionChanges<A, B>()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance CollectionChanges<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance CollectionChanges<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance CollectionChanges<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance CollectionChanges<A, B>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CollectionChanges.endIndex.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CollectionChanges<A, B>(void *a1, uint64_t *a2, uint64_t *a3))()
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = CollectionChanges.subscript.read(v7, *a2, *v3, a3[2], a3[3], a3[4], a3[5]);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void (*CollectionChanges.subscript.read(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t a1)
{
  int v12 = malloc(0x58uLL);
  *a1 = v12;
  _OWORD v12[4] = a4;
  _OWORD v12[5] = a5;
  void v12[6] = a6;
  v12[7] = a7;
  uint64_t v13 = type metadata accessor for CollectionChanges.Element();
  v12[8] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  void v12[9] = v14;
  v12[10] = malloc(*(void *)(v14 + 64));
  *int v12 = a4;
  v12[1] = a5;
  _OWORD v12[2] = a6;
  _OWORD v12[3] = a7;
  type metadata accessor for CollectionChanges.Element();
  Array.subscript.getter();
  return CollectionChanges.subscript.read;
}

void CollectionChanges.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 80);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 72) + 8))(v2, *(void *)(*(void *)a1 + 64));
  free(v2);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance CollectionChanges<A, B>()
{
  return MEMORY[0x1F4184430]();
}

uint64_t protocol witness for Collection.indices.getter in conformance CollectionChanges<A, B>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CollectionChanges<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CollectionChanges<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t CollectionChanges.description.getter()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CollectionChanges<A, B>()
{
  return CollectionChanges.description.getter();
}

Swift::Int __swiftcall CollectionChanges.Projection.index(before:)(Swift::Int before)
{
  if (__OFSUB__(before, 1))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for CollectionChanges.Element();
    type metadata accessor for Array();
    type metadata accessor for PartialRangeThrough<Int>(0, &lazy cache variable for type metadata for PartialRangeThrough<Int>, MEMORY[0x1E4FBBD60]);
    swift_getWitnessTable();
    lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>();
    uint64_t v1 = MutableCollection.subscript.getter();
    MEMORY[0x1F4188790](v1);
    type metadata accessor for ArraySlice();
    swift_getWitnessTable();
    BidirectionalCollection.lastIndex(where:)();
    swift_unknownObjectRelease();
    if ((v5 & 1) == 0) {
      return v4;
    }
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall CollectionChanges.Projection.index(after:)(Swift::Int after)
{
  if (__OFADD__(after, 1))
  {
    __break(1u);
  }
  else
  {
    Swift::Int v2 = v1;
    if (after + 1 >= v1) {
      return v2;
    }
    type metadata accessor for CollectionChanges.Element();
    type metadata accessor for Array();
    type metadata accessor for PartialRangeThrough<Int>(0, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>, MEMORY[0x1E4FBBC28]);
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t v3 = MutableCollection.subscript.getter();
    MEMORY[0x1F4188790](v3);
    type metadata accessor for ArraySlice();
    swift_getWitnessTable();
    Collection.firstIndex(where:)();
    swift_unknownObjectRelease();
    if ((v7 & 1) == 0) {
      return v6;
    }
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CollectionChanges.Projection.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X2>, uint64_t a3@<X5>, unint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v61 = a2;
  uint64_t v62 = a1;
  uint64_t v63 = a6;
  uint64_t v11 = type metadata accessor for Range();
  uint64_t v12 = type metadata accessor for Range();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v56 = (char *)&v52 - v13;
  uint64_t v58 = v12;
  uint64_t v59 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v54 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v52 - v17;
  uint64_t v64 = a5;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v19 - 8);
  uint64_t v53 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v55 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v52 - v22;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v52 - v25;
  uint64_t v60 = v11;
  uint64_t v27 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v52 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  int64_t v33 = (char *)&v52 - v32;
  uint64_t v66 = a3;
  unint64_t v67 = a4;
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v34 = type metadata accessor for CollectionChanges.Element();
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (char *)&v52 - v35;
  Array.subscript.getter();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v18, v36, v58);
      uint64_t v38 = v64;
      int v39 = swift_dynamicCast();
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
      if (v39)
      {
        uint64_t v41 = *(void *)(v38 - 8);
        v40(v23, 0, 1, v38);
        uint64_t v26 = v23;
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v63, v26, v38);
      }
      uint64_t v26 = v23;
      goto LABEL_12;
    }
    uint64_t v42 = TupleTypeMetadata2;
    uint64_t v43 = &v36[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    uint64_t v45 = v60;
    v44(v30, v36, v60);
    uint64_t v46 = v58;
    uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    uint64_t v48 = v54;
    v47(v54, v43, v58);
    uint64_t v61 = &v56[*(int *)(v42 + 48)];
    v44(v56, v30, v45);
    v47(v61, v48, v46);
    uint64_t v26 = v55;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v33, v36, v60);
  }
  uint64_t v38 = v64;
  int v49 = swift_dynamicCast();
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56);
  if (v49)
  {
    uint64_t v41 = *(void *)(v38 - 8);
    v40(v26, 0, 1, v38);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v41 + 32))(v63, v26, v38);
  }
LABEL_12:
  v40(v26, 1, 1, v64);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v53);
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  uint64_t v66 = 0x2064696C61766E69;
  unint64_t v67 = 0xEF203A7865646E69;
  uint64_t v65 = v62;
  v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void, void))CollectionChanges.Projection.index(before:), a3);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t *a1, void *a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))CollectionChanges.Projection.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance CollectionChanges<A, B>.Projection<A1>()
{
  return MEMORY[0x1F41836E8]();
}

void protocol witness for Collection.startIndex.getter in conformance CollectionChanges<A, B>.Projection<A1>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void protocol witness for Collection.endIndex.getter in conformance CollectionChanges<A, B>.Projection<A1>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
}

uint64_t (*protocol witness for Collection.subscript.read in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t **a1, uint64_t *a2, uint64_t a3))()
{
  char v7 = (uint64_t *)malloc(0x28uLL);
  *a1 = v7;
  v7[4] = (uint64_t)CollectionChanges.Projection.subscript.read(v7, *a2, *v3, *((char **)v3 + 1), *((void *)v3 + 2), *((void *)v3 + 3), *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48));
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void (*CollectionChanges.Projection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11))(void *a1)
{
  uint64_t v16 = *(void *)(a9 - 8);
  *a1 = a9;
  a1[1] = v16;
  uint64_t v17 = malloc(*(void *)(v16 + 64));
  a1[2] = (uint64_t)v17;
  CollectionChanges.Projection.subscript.getter(a2, a4, a7, a8, a9, (uint64_t)v17, a10, a11);
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance CollectionChanges<A, B>.Projection<A1>()
{
  swift_getWitnessTable();

  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance CollectionChanges<A, B>.Projection<A1>()
{
  swift_getWitnessTable();

  JUMPOUT(0x18C1155A0);
}

uint64_t protocol witness for Collection.index(after:) in conformance CollectionChanges<A, B>.Projection<A1>@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void, void, void))CollectionChanges.Projection.index(after:), a3);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance CollectionChanges<A, B>.Projection<A1>@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t (*a3)(void, void, void, void, void, void, void, void, void, void)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(*a1, *(unsigned __int8 *)v4, v4[1], v4[2], v4[3], a2[2], a2[3], a2[4], a2[5], a2[6]);
  *a4 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t *a1, void *a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void))CollectionChanges.Projection.index(after:));
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t *a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void, void, void, void))
{
  uint64_t result = a4(*a1, *(unsigned __int8 *)v4, v4[1], v4[2], v4[3], a2[2], a2[3], a2[4], a2[5], a2[6]);
  *a1 = result;
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance CollectionChanges<A, B>.Projection<A1>@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1->n128_u64[1];
  a1->n128_u8[0] = v1->n128_u8[0];
  a1->n128_u64[1] = v2;
  __n128 result = v1[1];
  a1[1] = result;
  a1[2].n128_u64[0] = result.n128_u64[0];
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CollectionChanges<A, B>.Projection<A1>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t base witness table accessor for Sequence in CollectionChanges<A, B>.Projection<A1>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in CollectionChanges<A, B>.Projection<A1>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in CollectionChanges<A, B>.Projection<A1>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CollectionChanges<A, B>.Projection<A1>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Sequence in CollectionChanges<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in CollectionChanges<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in CollectionChanges<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in CollectionChanges<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in CollectionChanges<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t result;

  Swift::String v5 = *(void *)(v2 + 16);
  Swift::Int v6 = *(void *)(v2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __n128 result = specialized CollectionChanges.getOffset<A>(from:)(a1, v5, v6, AssociatedTypeWitness);
  *a2 = result;
  return result;
}

uint64_t specialized CollectionChanges.getOffset<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for CollectionDifference.Change();
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - v8;
  (*(void (**)(char *, uint64_t, double))(v10 + 16))((char *)&v14 - v8, a1, v7);
  uint64_t v11 = *(void *)v9;
  _sSaySiGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB718]);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  (*(void (**)(char *, uint64_t))(*(void *)(a4 - 8) + 8))(&v9[*(int *)(TupleTypeMetadata3 + 48)], a4);
  return v11;
}

unint64_t lazy protocol witness table accessor for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>)
  {
    type metadata accessor for PartialRangeThrough<Int>(255, &lazy cache variable for type metadata for PartialRangeThrough<Int>, MEMORY[0x1E4FBBD60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeThrough<Int> and conformance PartialRangeThrough<A>);
  }
  return result;
}

BOOL partial apply for closure #1 in CollectionChanges.Projection.index(before:)()
{
  return partial apply for closure #1 in CollectionChanges.Projection.index(before:)();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 56);
  unint64_t v2 = type metadata accessor for CollectionChanges.Element();
  return v1 == CollectionChanges.Element.kind.getter(v2);
}

void type metadata accessor for PartialRangeThrough<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t initializeWithCopy for CollectionChanges.Projection(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CollectionChanges.Projection(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for CollectionChanges.Projection(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t type metadata accessor for CollectionChanges.Projection()
{
  return swift_getGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for CollectionChanges.Element(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  unint64_t v11 = ((v8 + v9) & ~v9) + v8;
  uint64_t v12 = *(void *)(v6 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  int v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = v13 + v14;
  unint64_t v16 = (v15 & ~(unint64_t)v14) + v13;
  if (v16 <= v11) {
    unint64_t v17 = ((v8 + v9) & ~v9) + v8;
  }
  else {
    unint64_t v17 = v16;
  }
  unint64_t v18 = v11 + v14;
  if (v16 + (v18 & ~(unint64_t)v14) <= v17) {
    unint64_t v19 = v17;
  }
  else {
    unint64_t v19 = v16 + (v18 & ~(unint64_t)v14);
  }
  if ((v14 | v9) > 7 || ((v14 | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v19 + 1 > 0x18)
  {
    uint64_t v22 = *(void *)a2;
    *unint64_t v4 = *(void *)a2;
    unint64_t v4 = (void *)(v22 + (((v14 | v9) + 16) & ~(v14 | v9)));
    swift_retain();
  }
  else
  {
    unsigned int v23 = a2[v19];
    unsigned int v24 = v23 - 3;
    if (v23 >= 3)
    {
      if (v19 <= 3) {
        uint64_t v25 = v19;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *a2;
          if (v19 < 4) {
            goto LABEL_26;
          }
          goto LABEL_28;
        case 2:
          int v26 = *(unsigned __int16 *)a2;
          if (v19 >= 4) {
            goto LABEL_28;
          }
          goto LABEL_26;
        case 3:
          int v26 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v19 < 4) {
            goto LABEL_26;
          }
          goto LABEL_28;
        case 4:
          int v26 = *(_DWORD *)a2;
          if (v19 < 4) {
LABEL_26:
          }
            unsigned int v23 = (v26 | (v24 << (8 * v19))) + 3;
          else {
LABEL_28:
          }
            unsigned int v23 = v26 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v27 = ~v9;
    unint64_t v28 = ~(unint64_t)v14;
    if (v23 == 2)
    {
      uint64_t v37 = *(void *)(a3 + 24);
      uint64_t v38 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16);
      uint64_t v36 = *(void *)(a3 + 16);
      v38(a1, a2, v5);
      v38((void *)(((unint64_t)v4 + v10) & v27), (unsigned __int8 *)((unint64_t)&a2[v10] & v27), v36);
      unint64_t v31 = (unint64_t)&a2[v18] & v28;
      uint64_t v32 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16);
      v32(((unint64_t)v4 + v18) & v28, v31, v37);
      v32((v15 + (((unint64_t)v4 + v18) & v28)) & v28, (v15 + v31) & v28, v37);
      *((unsigned char *)v4 + v19) = 2;
    }
    else if (v23 == 1)
    {
      uint64_t v29 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v12 + 16);
      uint64_t v30 = *(void *)(a3 + 24);
      v29(a1, a2, v6);
      v29((void *)(((unint64_t)v4 + v15) & v28), (unsigned __int8 *)((unint64_t)&a2[v15] & v28), v30);
      *((unsigned char *)v4 + v19) = 1;
    }
    else
    {
      int64_t v33 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16);
      uint64_t v34 = *(void *)(a3 + 16);
      v33(a1, a2, v5);
      v33((void *)(((unint64_t)v4 + v10) & v27), (unsigned __int8 *)((unint64_t)&a2[v10] & v27), v34);
      *((unsigned char *)v4 + v19) = 0;
    }
  }
  return v4;
}

uint64_t destroy for CollectionChanges.Element(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = *(void *)(v3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = v6 + v7;
  unint64_t v11 = ((v6 + v7) & ~v7) + v6;
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = v9 + v12;
  unint64_t v14 = ((v9 + v12) & ~v12) + v9;
  if (v14 <= v11) {
    unint64_t v15 = v11;
  }
  else {
    unint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v12;
  unint64_t v17 = v14 + ((v11 + v12) & ~v12);
  if (v17 <= v15) {
    unint64_t v17 = v15;
  }
  unsigned int v18 = a1[v17];
  unsigned int v19 = v18 - 3;
  if (v18 >= 3)
  {
    if (v17 <= 3) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *a1;
        goto LABEL_15;
      case 2:
        int v21 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v21 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v21 = *(_DWORD *)a1;
LABEL_15:
        int v22 = (v21 | (v19 << (8 * v17))) + 3;
        unsigned int v18 = v21 + 3;
        if (v17 < 4) {
          unsigned int v18 = v22;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v23 = ~v7;
  uint64_t v24 = ~v12;
  if (v18 == 2)
  {
    unint64_t v28 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
    uint64_t v33 = *(void *)(v3 - 8);
    v28(a1, v4);
    v28((unsigned __int8 *)((unint64_t)&a1[v10] & v23), v4);
    unint64_t v29 = (unint64_t)&a1[v16] & v24;
    uint64_t v32 = *(void (**)(unint64_t, uint64_t))(v33 + 8);
    v32(v29, v3);
    return ((uint64_t (*)(unint64_t, uint64_t))v32)((v13 + v29) & v24, v3);
  }
  else
  {
    if (v18 == 1)
    {
      unint64_t v31 = *(void (**)(unsigned __int8 *, uint64_t))(v8 + 8);
      v31(a1, v3);
      unint64_t v25 = (unint64_t)&a1[v13] & v24;
      uint64_t v26 = v3;
      uint64_t v27 = (uint64_t (*)(unint64_t, uint64_t))v31;
    }
    else
    {
      uint64_t v34 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
      v34(a1, v4);
      unint64_t v25 = (unint64_t)&a1[v10] & v23;
      uint64_t v26 = v4;
      uint64_t v27 = (uint64_t (*)(unint64_t, uint64_t))v34;
    }
    return v27(v25, v26);
  }
}

uint64_t initializeWithCopy for CollectionChanges.Element(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  unint64_t v11 = ((v8 + v9) & ~v9) + v8;
  uint64_t v12 = *(void *)(v6 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v13 + v14;
  unint64_t v16 = ((v13 + v14) & ~v14) + v13;
  if (v16 <= v11) {
    unint64_t v17 = v11;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = v11 + v14;
  unint64_t v19 = v16 + ((v11 + v14) & ~v14);
  if (v19 <= v17) {
    unint64_t v20 = v17;
  }
  else {
    unint64_t v20 = v19;
  }
  unsigned int v21 = a2[v20];
  unsigned int v22 = v21 - 3;
  if (v21 >= 3)
  {
    if (v20 <= 3) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *a2;
        goto LABEL_16;
      case 2:
        int v24 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v24 = *(_DWORD *)a2;
LABEL_16:
        int v25 = (v24 | (v22 << (8 * v20))) + 3;
        unsigned int v21 = v24 + 3;
        if (v20 < 4) {
          unsigned int v21 = v25;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v26 = ~v9;
  uint64_t v27 = ~v14;
  if (v21 == 2)
  {
    uint64_t v38 = v15;
    uint64_t v39 = *(void *)(a3 + 24);
    unint64_t v31 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 16);
    uint64_t v37 = *(void *)(a3 + 16);
    v31(a1, a2, v5);
    v31((v10 + a1) & v26, (unsigned __int8 *)((unint64_t)&a2[v10] & v26), v37);
    unint64_t v32 = (unint64_t)&a2[v18] & v27;
    uint64_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
    v33((v18 + a1) & v27, v32, v39);
    v33((v38 + ((v18 + a1) & v27)) & v27, (v38 + v32) & v27, v39);
    char v30 = 2;
  }
  else if (v21 == 1)
  {
    unint64_t v28 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v12 + 16);
    uint64_t v29 = v15;
    v28(a1, a2, v6);
    v28((v29 + a1) & v27, (unsigned __int8 *)((unint64_t)&a2[v29] & v27), v6);
    char v30 = 1;
  }
  else
  {
    uint64_t v34 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 16);
    uint64_t v35 = *(void *)(a3 + 16);
    v34(a1, a2, v5);
    v34((v10 + a1) & v26, (unsigned __int8 *)((unint64_t)&a2[v10] & v26), v35);
    char v30 = 0;
  }
  *(unsigned char *)(a1 + v20) = v30;
  return a1;
}

unsigned __int8 *assignWithCopy for CollectionChanges.Element(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    unint64_t v10 = ((v7 + v8) & ~v8) + v7;
    uint64_t v43 = *(void *)(a3 + 24);
    uint64_t v11 = *(void *)(v43 - 8);
    uint64_t v12 = *(void *)(v11 + 64);
    uint64_t v41 = v11;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v14 = v12 + v13;
    unint64_t v15 = ((v12 + v13) & ~v13) + v12;
    if (v15 <= v10) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v39 = v10 + v13;
    unint64_t v17 = v15 + ((v10 + v13) & ~v13);
    if (v17 <= v16) {
      unint64_t v18 = v16;
    }
    else {
      unint64_t v18 = v17;
    }
    unsigned int v19 = a1[v18];
    unsigned int v20 = v19 - 3;
    if (v19 >= 3)
    {
      if (v18 <= 3) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a1;
          if (v18 < 4) {
            goto LABEL_16;
          }
          goto LABEL_20;
        case 2:
          int v22 = *(unsigned __int16 *)a1;
          if (v18 < 4) {
            goto LABEL_16;
          }
          goto LABEL_20;
        case 3:
          int v22 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v18 < 4) {
            goto LABEL_16;
          }
          goto LABEL_20;
        case 4:
          int v22 = *(_DWORD *)a1;
          if (v18 < 4) {
LABEL_16:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v18))) + 3;
          else {
LABEL_20:
          }
            unsigned int v19 = v22 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v23 = ~v8;
    uint64_t v42 = ~v13;
    uint64_t v40 = v9;
    if (v19 == 2)
    {
      int v25 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v25(a1, v5);
      v25((unsigned __int8 *)((unint64_t)&a1[v9] & v23), v5);
      uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v41 + 8);
      v26((unint64_t)&a1[v39] & v42, v43);
      v26((v14 + ((unint64_t)&a1[v39] & v42)) & v42, v43);
    }
    else if (v19 == 1)
    {
      int v24 = *(void (**)(unsigned __int8 *, uint64_t))(v41 + 8);
      v24(a1, v43);
      v24((unsigned __int8 *)((unint64_t)&a1[v14] & v42), v43);
    }
    else
    {
      uint64_t v27 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v27(a1, v5);
      v27((unsigned __int8 *)((unint64_t)&a1[v9] & v23), v5);
    }
    unsigned int v28 = a2[v18];
    unsigned int v29 = v28 - 3;
    if (v28 >= 3)
    {
      if (v18 <= 3) {
        uint64_t v30 = v18;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *a2;
          if (v18 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 2:
          int v31 = *(unsigned __int16 *)a2;
          if (v18 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 3:
          int v31 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v18 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 4:
          int v31 = *(_DWORD *)a2;
          if (v18 < 4)
          {
LABEL_34:
            unsigned int v28 = (v31 | (v29 << (8 * v18))) + 3;
            break;
          }
LABEL_42:
          unsigned int v28 = v31 + 3;
          if (v28 == 2) {
            goto LABEL_43;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v28 == 2)
    {
LABEL_43:
      uint64_t v35 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
      v35(a1, a2, v5);
      v35((unsigned __int8 *)((unint64_t)&a1[v40] & v23), (unsigned __int8 *)((unint64_t)&a2[v40] & v23), v5);
      unint64_t v36 = (unint64_t)&a2[v39] & v42;
      uint64_t v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16);
      v37((unint64_t)&a1[v39] & v42, v36, v43);
      v37((v14 + ((unint64_t)&a1[v39] & v42)) & v42, (v14 + v36) & v42, v43);
      char v33 = 2;
    }
    else
    {
LABEL_36:
      if (v28 == 1)
      {
        unint64_t v32 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v41 + 16);
        v32(a1, a2, v43);
        v32((unsigned __int8 *)((unint64_t)&a1[v14] & v42), (unsigned __int8 *)((unint64_t)&a2[v14] & v42), v43);
        char v33 = 1;
      }
      else
      {
        uint64_t v34 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16);
        v34(a1, a2, v5);
        v34((unsigned __int8 *)((unint64_t)&a1[v40] & v23), (unsigned __int8 *)((unint64_t)&a2[v40] & v23), v5);
        char v33 = 0;
      }
    }
    a1[v18] = v33;
  }
  return a1;
}

uint64_t initializeWithTake for CollectionChanges.Element(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  unint64_t v11 = ((v8 + v9) & ~v9) + v8;
  uint64_t v12 = *(void *)(v6 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v13 + v14;
  unint64_t v16 = ((v13 + v14) & ~v14) + v13;
  if (v16 <= v11) {
    unint64_t v17 = v11;
  }
  else {
    unint64_t v17 = v16;
  }
  uint64_t v18 = v11 + v14;
  unint64_t v19 = v16 + ((v11 + v14) & ~v14);
  if (v19 <= v17) {
    unint64_t v20 = v17;
  }
  else {
    unint64_t v20 = v19;
  }
  unsigned int v21 = a2[v20];
  unsigned int v22 = v21 - 3;
  if (v21 >= 3)
  {
    if (v20 <= 3) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *a2;
        goto LABEL_16;
      case 2:
        int v24 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v24 = *(_DWORD *)a2;
LABEL_16:
        int v25 = (v24 | (v22 << (8 * v20))) + 3;
        unsigned int v21 = v24 + 3;
        if (v20 < 4) {
          unsigned int v21 = v25;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v26 = ~v9;
  uint64_t v27 = ~v14;
  if (v21 == 2)
  {
    uint64_t v38 = v15;
    uint64_t v39 = *(void *)(a3 + 24);
    int v31 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 32);
    uint64_t v37 = *(void *)(a3 + 16);
    v31(a1, a2, v5);
    v31((v10 + a1) & v26, (unsigned __int8 *)((unint64_t)&a2[v10] & v26), v37);
    unint64_t v32 = (unint64_t)&a2[v18] & v27;
    char v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 32);
    v33((v18 + a1) & v27, v32, v39);
    v33((v38 + ((v18 + a1) & v27)) & v27, (v38 + v32) & v27, v39);
    char v30 = 2;
  }
  else if (v21 == 1)
  {
    unsigned int v28 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v12 + 32);
    uint64_t v29 = v15;
    v28(a1, a2, v6);
    v28((v29 + a1) & v27, (unsigned __int8 *)((unint64_t)&a2[v29] & v27), v6);
    char v30 = 1;
  }
  else
  {
    uint64_t v34 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 32);
    uint64_t v35 = *(void *)(a3 + 16);
    v34(a1, a2, v5);
    v34((v10 + a1) & v26, (unsigned __int8 *)((unint64_t)&a2[v10] & v26), v35);
    char v30 = 0;
  }
  *(unsigned char *)(a1 + v20) = v30;
  return a1;
}

unsigned __int8 *assignWithTake for CollectionChanges.Element(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)(v6 + 64);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v9 = v7 + v8;
    unint64_t v10 = ((v7 + v8) & ~v8) + v7;
    uint64_t v43 = *(void *)(a3 + 24);
    uint64_t v11 = *(void *)(v43 - 8);
    uint64_t v12 = *(void *)(v11 + 64);
    uint64_t v41 = v11;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v14 = v12 + v13;
    unint64_t v15 = ((v12 + v13) & ~v13) + v12;
    if (v15 <= v10) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v15;
    }
    uint64_t v39 = v10 + v13;
    unint64_t v17 = v15 + ((v10 + v13) & ~v13);
    if (v17 <= v16) {
      unint64_t v18 = v16;
    }
    else {
      unint64_t v18 = v17;
    }
    unsigned int v19 = a1[v18];
    unsigned int v20 = v19 - 3;
    if (v19 >= 3)
    {
      if (v18 <= 3) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a1;
          if (v18 < 4) {
            goto LABEL_16;
          }
          goto LABEL_20;
        case 2:
          int v22 = *(unsigned __int16 *)a1;
          if (v18 < 4) {
            goto LABEL_16;
          }
          goto LABEL_20;
        case 3:
          int v22 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v18 < 4) {
            goto LABEL_16;
          }
          goto LABEL_20;
        case 4:
          int v22 = *(_DWORD *)a1;
          if (v18 < 4) {
LABEL_16:
          }
            unsigned int v19 = (v22 | (v20 << (8 * v18))) + 3;
          else {
LABEL_20:
          }
            unsigned int v19 = v22 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v23 = ~v8;
    uint64_t v42 = ~v13;
    uint64_t v40 = v9;
    if (v19 == 2)
    {
      int v25 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v25(a1, v5);
      v25((unsigned __int8 *)((unint64_t)&a1[v9] & v23), v5);
      uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v41 + 8);
      v26((unint64_t)&a1[v39] & v42, v43);
      v26((v14 + ((unint64_t)&a1[v39] & v42)) & v42, v43);
    }
    else if (v19 == 1)
    {
      int v24 = *(void (**)(unsigned __int8 *, uint64_t))(v41 + 8);
      v24(a1, v43);
      v24((unsigned __int8 *)((unint64_t)&a1[v14] & v42), v43);
    }
    else
    {
      uint64_t v27 = *(void (**)(unsigned __int8 *, uint64_t))(v6 + 8);
      v27(a1, v5);
      v27((unsigned __int8 *)((unint64_t)&a1[v9] & v23), v5);
    }
    unsigned int v28 = a2[v18];
    unsigned int v29 = v28 - 3;
    if (v28 >= 3)
    {
      if (v18 <= 3) {
        uint64_t v30 = v18;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *a2;
          if (v18 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_34;
        case 2:
          int v31 = *(unsigned __int16 *)a2;
          if (v18 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 3:
          int v31 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v18 < 4) {
            goto LABEL_34;
          }
          goto LABEL_42;
        case 4:
          int v31 = *(_DWORD *)a2;
          if (v18 < 4)
          {
LABEL_34:
            unsigned int v28 = (v31 | (v29 << (8 * v18))) + 3;
            break;
          }
LABEL_42:
          unsigned int v28 = v31 + 3;
          if (v28 == 2) {
            goto LABEL_43;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v28 == 2)
    {
LABEL_43:
      uint64_t v35 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
      v35(a1, a2, v5);
      v35((unsigned __int8 *)((unint64_t)&a1[v40] & v23), (unsigned __int8 *)((unint64_t)&a2[v40] & v23), v5);
      unint64_t v36 = (unint64_t)&a2[v39] & v42;
      uint64_t v37 = *(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 32);
      v37((unint64_t)&a1[v39] & v42, v36, v43);
      v37((v14 + ((unint64_t)&a1[v39] & v42)) & v42, (v14 + v36) & v42, v43);
      char v33 = 2;
    }
    else
    {
LABEL_36:
      if (v28 == 1)
      {
        unint64_t v32 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v41 + 32);
        v32(a1, a2, v43);
        v32((unsigned __int8 *)((unint64_t)&a1[v14] & v42), (unsigned __int8 *)((unint64_t)&a2[v14] & v42), v43);
        char v33 = 1;
      }
      else
      {
        uint64_t v34 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32);
        v34(a1, a2, v5);
        v34((unsigned __int8 *)((unint64_t)&a1[v40] & v23), (unsigned __int8 *)((unint64_t)&a2[v40] & v23), v5);
        char v33 = 0;
      }
    }
    a1[v18] = v33;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionChanges.Element(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = ((*(void *)(v4 + 64) + v5) & ~v5) + *(void *)(v4 + 64);
  if (v6 <= v3) {
    unint64_t v7 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
  }
         + *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  else {
    unint64_t v7 = v6;
  }
  unint64_t v8 = v6 + ((v3 + v5) & ~v5);
  if (v8 <= v7) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_26;
  }
  unint64_t v10 = v9 + 1;
  char v11 = 8 * (v9 + 1);
  if ((v9 + 1) <= 3)
  {
    unsigned int v14 = ((a2 + ~(-1 << v11) - 253) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_26:
      unsigned int v16 = *((unsigned __int8 *)a1 + v9);
      if (v16 >= 3) {
        return (v16 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_26;
  }
LABEL_18:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v10 | v15) + 254;
}

void storeEnumTagSinglePayload for CollectionChanges.Element(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = ((*(void *)(v6 + 64) + v7) & ~v7) + *(void *)(v6 + 64);
  if (v8 <= v5) {
    unint64_t v9 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)
  }
         + *(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a4 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  else {
    unint64_t v9 = v8;
  }
  unint64_t v10 = v8 + ((v5 + v7) & ~v7);
  if (v10 <= v9) {
    unint64_t v10 = v9;
  }
  size_t v11 = v10 + 1;
  if (a3 < 0xFE)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 + ~(-1 << (8 * v11)) - 253) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v13 = a2 - 254;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10 + 1);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x188024364);
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v12)
    {
      case 1:
        a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v11] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v11] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v10] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for CollectionChanges.Element(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = ((*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)
       + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80))
     + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = ((*(void *)(v3 + 64) + v4) & ~v4) + *(void *)(v3 + 64);
  if (v5 <= v2) {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)
  }
         + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  else {
    unint64_t v6 = v5;
  }
  unint64_t v7 = v5 + ((v2 + v4) & ~v4);
  if (v7 <= v6) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v7;
  }
  uint64_t v9 = a1[v8];
  int v10 = v9 - 3;
  if (v9 >= 3)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_16:
        unsigned int v13 = (v12 | (v10 << (8 * v8))) + 3;
        LODWORD(v9) = v12 + 3;
        if (v8 >= 4) {
          uint64_t v9 = v9;
        }
        else {
          uint64_t v9 = v13;
        }
        break;
      default:
        return v9;
    }
  }
  return v9;
}

void destructiveInjectEnumTag for CollectionChanges.Element(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 2)
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
    unint64_t v11 = ((*(void *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
        + *(void *)(v4 + 64);
    uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
    uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
    unint64_t v14 = ((*(void *)(v12 + 64) + v13) & ~v13) + *(void *)(v12 + 64);
    if (v14 <= v11) {
      unint64_t v15 = ((*(void *)(v4 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
    }
          + *(void *)(v4 + 64);
    else {
      unint64_t v15 = v14;
    }
    size_t v16 = v14 + ((v11 + v13) & ~v13);
    if (v16 <= v15) {
      size_t v17 = v15;
    }
    else {
      size_t v17 = v16;
    }
    unsigned int v18 = a2 - 3;
    if (v17 < 4)
    {
      unsigned int v19 = v18 >> (8 * v17);
      int v20 = v18 & ~(-1 << (8 * v17));
      a1[v17] = v19 + 3;
      bzero(a1, v17);
      if (v17 == 3)
      {
        *(_WORD *)a1 = v20;
        a1[2] = BYTE2(v20);
      }
      else if (v17 == 2)
      {
        *(_WORD *)a1 = v20;
      }
      else
      {
        *a1 = v20;
      }
    }
    else
    {
      a1[v17] = 3;
      bzero(a1, v17);
      *(_DWORD *)a1 = v18;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
         + *(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a3 + 16) - 8) + 80))
       + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    unint64_t v8 = (v6 + v7) & ~v7;
    unint64_t v9 = ((*(void *)(v5 + 64) + v7) & ~v7) + *(void *)(v5 + 64);
    unint64_t v10 = v8 + v9;
    if (v9 > v6) {
      unint64_t v6 = v9;
    }
    if (v10 > v6) {
      unint64_t v6 = v10;
    }
    a1[v6] = a2;
  }
}

unsigned char *storeEnumTagSinglePayload for CollectionChanges.Element.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188024794);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for CollectionChanges.Element.Kind()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for Equatable in CollectionChanges<A, B>.Element.Kind()
{
  return swift_getWitnessTable();
}

void HelpLink.init(action:)()
{
}

void HelpLink.init(destination:)()
{
}

void HelpLink.body.getter()
{
}

void HelpButton.init(action:)()
{
}

void HelpButton.body.getter()
{
}

uint64_t associated type witness table accessor for View.Body : View in HelpLink()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in HelpButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for HelpLink(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for HelpLink.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 20);
    unint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *((void *)v12 + 1);
    uint64_t v15 = *((void *)v12 + 2);
    uint64_t v16 = *((void *)v12 + 3);
    char v17 = v12[34];
    __int16 v18 = *((_WORD *)v12 + 16);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)v12, v14, v15, v16, v18, v17);
    *(void *)unint64_t v11 = v13;
    *((void *)v11 + 1) = v14;
    *((void *)v11 + 2) = v15;
    *((void *)v11 + 3) = v16;
    *((_WORD *)v11 + 16) = v18;
    v11[34] = v17;
  }
  return a1;
}

uint64_t type metadata accessor for HelpLink.Payload(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for HelpLink.Payload);
}

uint64_t destroy for HelpLink(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HelpLink.Payload(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(void *)(v5 + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  char v10 = *(unsigned char *)(v5 + 34);
  __int16 v11 = *(_WORD *)(v5 + 32);

  return outlined consume of Environment<OpenURLAction>.Content(v6, v7, v8, v9, v11, v10);
}

void *initializeWithCopy for HelpLink(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for HelpLink.Payload(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *((void *)v10 + 1);
  uint64_t v13 = *((void *)v10 + 2);
  uint64_t v14 = *((void *)v10 + 3);
  char v15 = v10[34];
  __int16 v16 = *((_WORD *)v10 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v10, v12, v13, v14, v16, v15);
  *(void *)uint64_t v9 = v11;
  *((void *)v9 + 1) = v12;
  *((void *)v9 + 2) = v13;
  *((void *)v9 + 3) = v14;
  *((_WORD *)v9 + 16) = v16;
  v9[34] = v15;
  return a1;
}

void *assignWithCopy for HelpLink(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    type metadata accessor for HelpLink.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *((void *)v10 + 1);
  uint64_t v13 = *((void *)v10 + 2);
  uint64_t v14 = *((void *)v10 + 3);
  char v15 = v10[34];
  __int16 v16 = *((_WORD *)v10 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v10, v12, v13, v14, v16, v15);
  uint64_t v17 = *(void *)v9;
  uint64_t v18 = *((void *)v9 + 1);
  uint64_t v19 = *((void *)v9 + 2);
  uint64_t v20 = *((void *)v9 + 3);
  char v21 = v9[34];
  *(void *)uint64_t v9 = v11;
  *((void *)v9 + 1) = v12;
  *((void *)v9 + 2) = v13;
  *((void *)v9 + 3) = v14;
  __int16 v22 = *((_WORD *)v9 + 16);
  *((_WORD *)v9 + 16) = v16;
  v9[34] = v15;
  outlined consume of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v22, v21);
  return a1;
}

uint64_t outlined destroy of HelpLink.Payload(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HelpLink.Payload(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for HelpLink(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HelpLink.Payload(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  char v10 = &a2[v8];
  long long v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  *(_DWORD *)(v9 + 31) = *(_DWORD *)(v10 + 31);
  return a1;
}

char *assignWithTake for HelpLink(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    uint64_t v6 = type metadata accessor for HelpLink.Payload(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  char v10 = &a2[v8];
  __int16 v11 = *((_WORD *)v10 + 16);
  char v12 = v10[34];
  uint64_t v13 = *(void *)v9;
  uint64_t v14 = *((void *)v9 + 1);
  uint64_t v15 = *((void *)v9 + 2);
  uint64_t v16 = *((void *)v9 + 3);
  char v17 = v9[34];
  long long v18 = *((_OWORD *)v10 + 1);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v18;
  __int16 v19 = *((_WORD *)v9 + 16);
  *((_WORD *)v9 + 16) = v11;
  v9[34] = v12;
  outlined consume of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v19, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for HelpLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188024F80);
}

uint64_t sub_188024F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for HelpLink.Payload(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 34);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for HelpLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188025054);
}

uint64_t sub_188025054(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for HelpLink.Payload(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 34) = -(char)a2;
  }
  return result;
}

uint64_t type metadata accessor for HelpLink(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for HelpLink);
}

uint64_t type metadata completion function for HelpLink()
{
  uint64_t result = type metadata accessor for HelpLink.Payload(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for HelpButton()
{
  return &type metadata for HelpButton;
}

unint64_t lazy protocol witness table accessor for type HelpLink and conformance HelpLink()
{
  unint64_t result = lazy protocol witness table cache variable for type HelpLink and conformance HelpLink;
  if (!lazy protocol witness table cache variable for type HelpLink and conformance HelpLink)
  {
    type metadata accessor for HelpLink(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpLink and conformance HelpLink);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HelpLink.Payload(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for HelpLink.Payload(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for URL();
    int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for HelpLink.Payload(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for HelpLink.Payload(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      uint64_t v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for HelpLink.Payload(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for HelpLink.Payload(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of HelpLink.Payload((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for HelpLink.Payload()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for MultiButtonPlatformItemsStrategy()
{
  return &type metadata for MultiButtonPlatformItemsStrategy;
}

ValueMetadata *type metadata accessor for LabelPlatformItemsStrategy()
{
  return &type metadata for LabelPlatformItemsStrategy;
}

BOOL specialized static UnaryPlatformItemsStrategy.hasChanges(from:to:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  int v4 = *(_DWORD *)(a1 + 16);
  if (v3 == -1 || v4 == -1)
  {
    outlined init with copy of PlatformItem(a2, (uint64_t)v9);
    outlined init with copy of PlatformItem(a1, (uint64_t)v8);
LABEL_9:
    BOOL v6 = 1;
    goto LABEL_10;
  }
  outlined init with copy of PlatformItem(a2, (uint64_t)v9);
  outlined init with copy of PlatformItem(a1, (uint64_t)v8);
  if (v3 != v4) {
    goto LABEL_9;
  }
  BOOL v6 = !specialized static Array<A>.== infix(_:_:)(v9[0], v8[0]);
LABEL_10:
  outlined destroy of PlatformItem((uint64_t)v9);
  outlined destroy of PlatformItem((uint64_t)v8);
  return v6;
}

BOOL specialized static MultiPlatformItemsStrategy.hasChanges(from:to:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5 == -1 || a2 == -1 || a5 != a2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = PlatformItems.id.getter();
  BOOL v6 = PlatformItems.id.getter();
  swift_bridgeObjectRelease();
  BOOL v7 = specialized static Array<A>.== infix(_:_:)((uint64_t)v5, (uint64_t)v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy, a1);
}

BOOL protocol witness for static PlatformItemsStrategy.hasChanges(from:to:) in conformance TextPlatformItemsStrategy(uint64_t a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsStrategy.hasChanges(from:to:)(a1, a2);
}

uint64_t protocol witness for static PlatformItemsStrategy.makeContent(from:) in conformance TextPlatformItemsStrategy()
{
  return protocol witness for static PlatformItemsStrategy.makeContent(from:) in conformance TextPlatformItemsStrategy();
}

{
  uint64_t v0;

  swift_bridgeObjectRetain();
  if ((PreferencesOutputs.subscript.getter() & 0x100000000) != 0)
  {
    uint64_t v0 = *MEMORY[0x1E4F4E7A0];
  }
  else
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem();
    uint64_t v0 = Attribute.init<A>(body:value:flags:update:)();
  }
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance StyledTextPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance StyledTextPlatformItemsStrategy, a1);
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance LabelPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance LabelPlatformItemsStrategy, a1);
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance ButtonPlatformItemsStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy((uint64_t)&outlined read-only object #0 of protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance ButtonPlatformItemsStrategy, a1);
}

uint64_t protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance TextPlatformItemsStrategy@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v5);
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = xmmword_18834FC50;
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  uint64_t result = outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v5, a2 + 24);
  *(void *)(a2 + 304) = 0;
  *(unsigned char *)(a2 + 312) = 1;
  *(void *)(a2 + 320) = 0;
  *(void *)(a2 + 328) = 0;
  return result;
}

void protocol witness for static PlatformItemsStrategy.defaultValue.getter in conformance MultiButtonPlatformItemsStrategy(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
}

BOOL protocol witness for static PlatformItemsStrategy.hasChanges(from:to:) in conformance MultiButtonPlatformItemsStrategy(uint64_t a1, uint64_t a2)
{
  return specialized static MultiPlatformItemsStrategy.hasChanges(from:to:)(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)(a1 + 16), *(void *)a2, *(_DWORD *)(a2 + 8));
}

uint64_t protocol witness for static PlatformItemsStrategy.makeContent(from:) in conformance MultiButtonPlatformItemsStrategy()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = PreferencesOutputs.subscript.getter();
  if ((v0 & 0x100000000) != 0) {
    uint64_t v1 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    uint64_t v1 = v0;
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t specialized static UnaryPlatformItemsStrategy.makeInputs(_:)()
{
  return PropertyList.subscript.setter();
}

{
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  PropertyList.subscript.setter();
  return PreferenceKeys.add(_:)();
}

{
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  return PropertyList.subscript.setter();
}

{
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  return PropertyList.subscript.setter();
}

void type metadata accessor for PlatformItem.PrimaryContent?()
{
  if (!lazy cache variable for type metadata for PlatformItem.PrimaryContent?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    }
  }
}

uint64_t specialized static MultiPlatformItemsStrategy.makeInputs(_:)()
{
  return PropertyList.subscript.setter();
}

ValueMetadata *type metadata accessor for TextPlatformItemsStrategy()
{
  return &type metadata for TextPlatformItemsStrategy;
}

ValueMetadata *type metadata accessor for ButtonPlatformItemsStrategy()
{
  return &type metadata for ButtonPlatformItemsStrategy;
}

ValueMetadata *type metadata accessor for StyledTextPlatformItemsStrategy()
{
  return &type metadata for StyledTextPlatformItemsStrategy;
}

uint64_t type metadata completion function for URLDocumentHostingController()
{
  return swift_initClassMetadata2();
}

char *DocumentGroupsIntroRootViewHostingController.__allocating_init(rootView:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  outlined init with copy of DocumentGroupsIntroRootView(a1, (uint64_t)v6);
  int v4 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v6);
  *(void *)(*(void *)&v4[direct field offset for UIHostingController.host]
            + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v4[direct field offset for UIHostingController.host])
                        + 0x198)
            + 8) = &protocol witness table for DocumentGroupsIntroRootViewHostingController;
  swift_unknownObjectWeakAssign();
  outlined destroy of DocumentGroupsIntroRootView(a1);
  return v4;
}

uint64_t DocumentHostingController.updateRootView(with:rootModifier:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of RootModifier(a2, (uint64_t)v17);
  uint64_t v5 = v2 + direct field offset for DocumentHostingController.rootModifier;
  swift_beginAccess();
  outlined assign with copy of RootModifier((uint64_t)v17, v5);
  swift_endAccess();
  DocumentHostingController.scenesDidChange(phaseChanged:)(1);
  outlined destroy of RootModifier((uint64_t)v17);
  uint64_t v6 = v2 + direct field offset for DocumentHostingController.configuration;
  swift_beginAccess();
  outlined assign with copy of IdentifiedDocumentGroupConfiguration(a1, v6);
  swift_endAccess();
  uint64_t v7 = *(void *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription);
  uint64_t v8 = *(void *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8);
  uint64_t v9 = *(void *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 16);
  uint64_t v10 = *(void *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 24);
  uint64_t v11 = *(void *)(v2 + direct field offset for URLDocumentHostingController.navigationItemDescription + 32);
  long long v14 = *(_OWORD *)(*(void *)(v2 + direct field offset for DocumentHostingController.document)
                  + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
  uint64_t v12 = *(void *)(a1 + 64);
  outlined init with copy of RootModifier(a2, (uint64_t)v17);
  long long v18 = v14;
  outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)v17, (uint64_t)&v16);
  uint64_t v15 = v12;
  swift_unknownObjectRetain_n();
  outlined copy of NavigationListState?(v7, v8);
  swift_retain();
  outlined destroy of DocumentSceneRootBoxModifier((uint64_t)v17);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)&v15, (uint64_t)v17, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  outlined copy of NavigationListState?(v7, v8);
  outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)&v15, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  swift_unknownObjectRelease();
  outlined consume of NavigationListState?(v7, v8);
  return specialized UIHostingController.rootView.setter((uint64_t)v17);
}

uint64_t DocumentBaseModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  BOOL v4 = v3 != 0;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v5 = Text.init<A>(_:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10 & 1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v5;
  *(void *)(v12 + 24) = v7;
  *(void *)(v12 + 32) = v11;
  *(void *)(v12 + 40) = v9;
  *(void *)(v12 + 48) = 1;
  *(unsigned char *)(v12 + 56) = 5;
  *(void *)(v12 + 64) = 0;
  *(unsigned char *)(v12 + 72) = 3;
  swift_bridgeObjectRelease();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 3;
  *(void *)a1 = partial apply for closure #1 in View.navigationTitlePreferenceTransform(adding:);
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = closure #2 in View.navigationTitlePreferenceTransform(adding:);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = partial apply for closure #1 in View.toolbarTitleDisplayMode(_:);
  *(void *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = closure #1 in variable initialization expression of DocumentToolbarTransformModifier.transform;
  *(void *)(a1 + 64) = 0;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DocumentSceneRootBoxModifier@<X0>(_OWORD *a1@<X8>)
{
  long long v4 = *(_OWORD *)(v1 + 104);
  outlined init with copy of RootModifier(v1, (uint64_t)(a1 + 1));
  *a1 = v4;

  return swift_unknownObjectRetain();
}

uint64_t closure #1 in variable initialization expression of DocumentToolbarTransformModifier.transform(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.Entry.Kind(0);
  swift_storeEnumTagMultiPayload();
  v6[*(int *)(v3 + 28)] = 2;
  uint64_t v7 = *(void **)(a1 + 40);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v7 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    uint64_t v7 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1, v7);
  }
  void v7[2] = v9 + 1;
  uint64_t result = outlined init with take of ToolbarStorage.Entry((uint64_t)v6, (uint64_t)v7+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v9);
  *(void *)(a1 + 40) = v7;
  return result;
}

double static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  a1(&v5);
  type metadata accessor for SceneList.Item?(0, &lazy cache variable for type metadata for _GraphValue<DocumentToolbarTransformModifier>, (uint64_t)&type metadata for DocumentToolbarTransformModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  uint64_t Value = (unsigned char *)AGGraphGetValue();
  if (*Value == 1)
  {
    MEMORY[0x1F4188790](Value);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(void *)a2 = v5;
  double result = v6;
  a2[1] = v6;
  return result;
}

uint64_t implicit closure #1 in static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)()
{
  type metadata accessor for SceneList.Item?(0, &lazy cache variable for type metadata for _GraphValue<DocumentToolbarTransformModifier>, (uint64_t)&type metadata for DocumentToolbarTransformModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  swift_getKeyPath();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for Focus<DocumentToolbarTransformModifier, (_:)>();
  lazy protocol witness table accessor for type Focus<DocumentToolbarTransformModifier, (_:)> and conformance Focus<A, B>(&lazy protocol witness table cache variable for type Focus<DocumentToolbarTransformModifier, (_:)> and conformance Focus<A, B>, (void (*)(uint64_t))type metadata accessor for Focus<DocumentToolbarTransformModifier, (_:)>);
  uint64_t v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

void protocol witness for ViewModifier.body(content:) in conformance DocumentToolbarTransformModifier()
{
}

uint64_t URLDocumentHostingController.presentationMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + direct field offset for URLDocumentHostingController.presentationMode + 8);
  char v3 = *(unsigned char *)(v1 + direct field offset for URLDocumentHostingController.presentationMode + 16);
  *(void *)a1 = *(void *)(v1 + direct field offset for URLDocumentHostingController.presentationMode);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  swift_retain();

  return swift_retain();
}

id @objc URLDocumentHostingController.undoManager.getter()
{
  uint64_t v0 = (void *)specialized URLDocumentHostingController.undoManager.getter();

  return v0;
}

uint64_t static URLDocumentHostingController.makeRootView(navigationItemDescription:_:)(uint64_t a1, void (*a2)(double))
{
  uint64_t v4 = outlined init with take of NavigationItemDescription?(a1, (uint64_t)v16);
  long long v12 = v16[1];
  long long v13 = v16[0];
  uint64_t v5 = *(void *)(v2 + 960);
  uint64_t v6 = v17;
  uint64_t v7 = *(void *)(v5 - 8);
  double v8 = MEMORY[0x1F4188790](v4);
  char v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v8);
  v14[0] = v13;
  v14[1] = v12;
  uint64_t v15 = v6;
  MEMORY[0x18C113660](v14, v5, &type metadata for DocumentBaseModifier, *(void *)(v2 + 968));
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v5);
}

void @objc URLDocumentHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized URLDocumentHostingController.init(coder:)();
}

id @objc URLDocumentHostingController.navigationItem.getter(void *a1)
{
  id v1 = a1;
  id v2 = URLDocumentHostingController.navigationItem.getter();

  return v2;
}

id URLDocumentHostingController.navigationItem.getter()
{
  id v1 = objc_msgSend(v0, sel_parentViewController);
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v1, sel_navigationItem);

    if (v3) {
      return v3;
    }
  }
  id v5 = objc_allocWithZone(MEMORY[0x1E4FB19F0]);

  return objc_msgSend(v5, sel_init);
}

uint64_t URLDocumentHostingController.update(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_release();
}

Swift::Void __swiftcall URLDocumentHostingController.scenesDidChange(phaseChanged:)(Swift::Bool phaseChanged)
{
  swift_getObjectType();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v10 - v5;
  MEMORY[0x18C113CA0](v4);
  uint64_t v7 = *(void *)(v1 + direct field offset for URLDocumentHostingController.navigationItemDescription + 32);
  long long v8 = *(_OWORD *)(v1 + direct field offset for URLDocumentHostingController.navigationItemDescription + 16);
  v10[0] = *(_OWORD *)(v1 + direct field offset for URLDocumentHostingController.navigationItemDescription);
  v10[1] = v8;
  uint64_t v11 = v7;
  uint64_t v9 = *(void (**)(double))(v1 + direct field offset for URLDocumentHostingController.content);
  outlined retain of NavigationItemDescription?(v10, (void (*)(void, void, void, void, void))outlined copy of NavigationListState?);
  swift_retain();
  static URLDocumentHostingController.makeRootView(navigationItemDescription:_:)((uint64_t)v10, v9);
  swift_release();
  outlined retain of NavigationItemDescription?(v10, (void (*)(void, void, void, void, void))outlined consume of NavigationListState?);
  specialized UIHostingController.rootView.setter((uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  static Update.end()();
}

void URLDocumentHostingController.__allocating_init(rootView:)()
{
}

void URLDocumentHostingController.__allocating_init(coder:rootView:)()
{
}

void URLDocumentHostingController.__allocating_init(hostingView:)()
{
}

void URLDocumentHostingController.__ivar_destroyer()
{
  outlined consume of NavigationListState?(*(void *)(v0 + direct field offset for URLDocumentHostingController.navigationItemDescription), *(void *)(v0 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8));
  swift_release();
  swift_release();
  swift_release();
  uint64_t v1 = *(void **)(v0 + direct field offset for URLDocumentHostingController._undoManager);
}

id URLDocumentHostingController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for URLDocumentHostingController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc URLDocumentHostingController.__ivar_destroyer(uint64_t a1)
{
  outlined consume of NavigationListState?(*(void *)(a1 + direct field offset for URLDocumentHostingController.navigationItemDescription), *(void *)(a1 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8));
  swift_release();
  swift_release();
  swift_release();
  objc_super v2 = *(void **)(a1 + direct field offset for URLDocumentHostingController._undoManager);
}

uint64_t type metadata accessor for URLDocumentHostingController()
{
  return __swift_instantiateGenericMetadata();
}

id protocol witness for UIHostingViewDelegate.hostingView<A>(_:didMoveTo:) in conformance URLDocumentHostingController<A>(id result, uint64_t a2)
{
  return specialized URLDocumentHostingController.hostingView<A>(_:didMoveTo:)(result, a2);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance URLDocumentHostingController<A>(uint64_t a1, uint64_t a2)
{
  return specialized URLDocumentHostingController.hostingView<A>(_:willUpdate:)(a2);
}

uint64_t protocol witness for AppGraphObserver.scenesDidChange(phaseChanged:) in conformance URLDocumentHostingController<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x458))();
}

Swift::Void __swiftcall DocumentHostingController.scenesDidChange(phaseChanged:)(Swift::Bool phaseChanged)
{
  MEMORY[0x18C113CA0]();
  if (!static AppGraph.shared) {
    goto LABEL_41;
  }
  Swift::Bool v35 = phaseChanged;
  if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  uint64_t v36 = v1;
  uint64_t v7 = v1 + direct field offset for DocumentHostingController.configuration;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v7 + 104);
  uint64_t v3 = *(void *)(v7 + 112);
  char v4 = *(unsigned char *)(v7 + 120);
  uint64_t v8 = *(void *)(v6 + 16);
  char v37 = v4;
  if (!v8) {
    goto LABEL_42;
  }
  uint64_t v9 = v6 + 32;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of SceneID(v2, v3, v4);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v9, (uint64_t)__src);
    uint64_t v11 = *(void *)&__src[136];
    uint64_t v12 = *(void *)&__src[144];
    if ((__src[152] & 1) == 0) {
      break;
    }
    char v13 = __src[144];
    if ((v4 & 1) == 0)
    {
      *(void *)&v39[0] = _typeName(_:qualified:)();
      *((void *)&v39[0] + 1) = v14;
      v15._countAndFlagsBits = 45;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v41[0] = v13;
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v12 = *((void *)&v39[0] + 1);
      swift_bridgeObjectRetain();
      uint64_t v17 = v3;
      if (*(void *)&v39[0] == v2) {
        goto LABEL_18;
      }
      goto LABEL_19;
    }
    if (*(void *)&__src[136] == v2 && __src[144] == v3) {
      goto LABEL_28;
    }
LABEL_11:
    outlined destroy of SceneList.Item((uint64_t)__src);
    v9 += 280;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
  }
  if ((v4 & 1) == 0)
  {
    BOOL v22 = *(void *)&__src[136] == v2 && *(void *)&__src[144] == v3;
    if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_28;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  *(void *)&v39[0] = _typeName(_:qualified:)();
  *((void *)&v39[0] + 1) = v18;
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v41[0] = v3;
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  char v4 = v37;
  swift_bridgeObjectRelease();
  uint64_t v17 = *((void *)&v39[0] + 1);
  if (v11 != *(void *)&v39[0]) {
    goto LABEL_19;
  }
LABEL_18:
  if (v12 != v17)
  {
LABEL_19:
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_28;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease_n();
LABEL_28:
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, sizeof(__dst));
  swift_bridgeObjectRelease();
  outlined consume of SceneID(v2, v3, v4);
  swift_bridgeObjectRelease();
  if (!*(void *)&__dst[264]) {
    goto LABEL_40;
  }
  memcpy(v45, __dst, 0x118uLL);
  outlined init with copy of SceneList.Item((uint64_t)v45, (uint64_t)__dst);
  uint64_t v2 = v36;
  if (!v35
    && *(void *)&__dst[160] == *(void *)(v36 + direct field offset for DocumentHostingController.lastVersion))
  {
    outlined destroy of SceneList.Item((uint64_t)__dst);
    outlined destroy of SceneList.Item((uint64_t)v45);
    swift_release();
    goto LABEL_37;
  }
  outlined destroy of SceneList.Item((uint64_t)__dst);
  outlined init with copy of SceneList.Item.Value((uint64_t)v45, (uint64_t)__src);
  if (__src[128] != 2)
  {
LABEL_41:
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_42:
      swift_retain();
      outlined copy of SceneID(v2, v3, v4);
      swift_bridgeObjectRetain();
LABEL_39:
      memset(__dst, 0, sizeof(__dst));
      swift_bridgeObjectRelease();
      outlined consume of SceneID(v2, v3, v37);
      swift_bridgeObjectRelease();
LABEL_40:
      swift_release();
      outlined destroy of SceneList.Item?((uint64_t)__dst);
    }
  }
  v39[4] = *(_OWORD *)&__src[64];
  v39[5] = *(_OWORD *)&__src[80];
  v40[0] = *(_OWORD *)&__src[96];
  *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)&__src[105];
  v39[0] = *(_OWORD *)__src;
  v39[1] = *(_OWORD *)&__src[16];
  v39[2] = *(_OWORD *)&__src[32];
  v39[3] = *(_OWORD *)&__src[48];
  outlined init with copy of DocumentGroupConfiguration((uint64_t)v39, (uint64_t)v41);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v39);
  uint64_t v23 = v42;
  swift_retain();
  outlined destroy of DocumentGroupConfiguration((uint64_t)v41);
  uint64_t v24 = v36 + direct field offset for DocumentHostingController.rootModifier;
  swift_beginAccess();
  outlined init with copy of RootModifier(v24, (uint64_t)v41);
  uint64_t v25 = *(void *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription);
  uint64_t v26 = *(void *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8);
  uint64_t v27 = *(void *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 16);
  uint64_t v28 = *(void *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 24);
  uint64_t v29 = *(void *)(v36 + direct field offset for URLDocumentHostingController.navigationItemDescription + 32);
  long long v38 = *(_OWORD *)(*(void *)(v36 + direct field offset for DocumentHostingController.document)
                  + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
  outlined init with copy of RootModifier((uint64_t)v41, (uint64_t)__src);
  *(_OWORD *)&__src[104] = v38;
  outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)__src, (uint64_t)v39 + 8);
  *(void *)&v39[0] = v23;
  swift_unknownObjectRetain_n();
  swift_retain();
  outlined copy of NavigationListState?(v25, v26);
  outlined destroy of DocumentSceneRootBoxModifier((uint64_t)__src);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)v39, (uint64_t)__src, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  *(void *)&__src[128] = v25;
  *(void *)&__src[136] = v26;
  *(void *)&__src[144] = v27;
  *(void *)&__src[152] = v28;
  *(void *)&__src[160] = v29;
  outlined copy of NavigationListState?(v25, v26);
  outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v39, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  swift_unknownObjectRelease();
  outlined consume of NavigationListState?(v25, v26);
  outlined destroy of RootModifier((uint64_t)v41);
  specialized UIHostingController.rootView.setter((uint64_t)__src);
  uint64_t v30 = *(void **)(v36 + direct field offset for UIHostingController.host);
  uint64_t v31 = v45[22];
  uint64_t v32 = *(void *)((char *)v30 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v30) + 0x68));
  uint64_t v33 = *(void *)(v32 + 136);
  *(void *)(v32 + 136) = v45[21];
  *(void *)(v32 + 144) = v31;
  swift_retain();
  uint64_t v34 = v30;
  swift_retain();
  outlined consume of EnvironmentValues?(v33);
  if (MEMORY[0x18C119DF0](v32 + 24))
  {
    swift_getObjectType();
    *(_WORD *)__src = 2;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_release();
    swift_release();
  }
  *(void *)(v36 + direct field offset for DocumentHostingController.lastVersion) = v45[20];
  outlined destroy of SceneList.Item((uint64_t)v45);
LABEL_37:
  static Update.end()();
}

char *DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  outlined init with take of NavigationItemDescription?((uint64_t)a4, (uint64_t)v51);
  long long v35 = v51[1];
  long long v36 = v51[0];
  uint64_t v34 = v52;
  uint64_t v32 = a5[1];
  uint64_t v33 = *a5;
  char v31 = *((unsigned char *)a5 + 16);
  *(void *)&v5[direct field offset for DocumentHostingController.lastVersion] = 0;
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)&v5[direct field offset for DocumentHostingController.configuration]);
  *(void *)&v5[direct field offset for DocumentHostingController.document] = a1;
  outlined init with copy of RootModifier(a3, (uint64_t)&v5[direct field offset for DocumentHostingController.rootModifier]);
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v49);
  uint64_t v37 = a3;
  outlined init with copy of RootModifier(a3, (uint64_t)v48);
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v49, (uint64_t)v46);
  outlined init with copy of RootModifier((uint64_t)v48, (uint64_t)v45);
  uint64_t v11 = swift_allocObject();
  long long v12 = v49[5];
  *(_OWORD *)(v11 + 80) = v49[4];
  *(_OWORD *)(v11 + 96) = v12;
  *(_OWORD *)(v11 + 112) = v50[0];
  *(_OWORD *)(v11 + 121) = *(_OWORD *)((char *)v50 + 9);
  long long v13 = v49[1];
  *(_OWORD *)(v11 + 16) = v49[0];
  *(_OWORD *)(v11 + 32) = v13;
  long long v14 = v49[3];
  *(_OWORD *)(v11 + 48) = v49[2];
  *(_OWORD *)(v11 + 64) = v14;
  outlined init with take of RootModifier((uint64_t)v48, v11 + 144);
  *(void *)(v11 + 248) = a1;
  uint64_t v29 = a1;
  id v30 = objc_msgSend(v29, sel_undoManager);
  uint64_t v15 = (uint64_t)&v5[direct field offset for URLDocumentHostingController.navigationItemDescription];
  *(_OWORD *)uint64_t v15 = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(void *)(v15 + 32) = 0;
  uint64_t v16 = direct field offset for URLDocumentHostingController._undoManager;
  *(void *)&v5[direct field offset for URLDocumentHostingController._undoManager] = 0;
  uint64_t v17 = &v5[direct field offset for URLDocumentHostingController.content];
  *(void *)uint64_t v17 = partial apply for closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:);
  *((void *)v17 + 1) = v11;
  uint64_t v18 = *(void *)v15;
  uint64_t v19 = *(void *)(v15 + 8);
  outlined init with take of NavigationItemDescription?((uint64_t)a4, v15);
  Swift::String v20 = v5;
  swift_retain();
  outlined retain of NavigationItemDescription?(a4, (void (*)(void, void, void, void, void))outlined copy of NavigationListState?);
  outlined consume of NavigationListState?(v18, v19);
  char v21 = &v20[direct field offset for URLDocumentHostingController.presentationMode];
  *(void *)char v21 = v33;
  *((void *)v21 + 1) = v32;
  v21[16] = v31;
  BOOL v22 = *(void **)&v5[v16];
  *(void *)&v5[v16] = v30;
  id v23 = v30;

  uint64_t v24 = v47;
  outlined init with copy of RootModifier((uint64_t)v45, (uint64_t)v40);
  long long v41 = *(_OWORD *)&v29[OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox];
  outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)v40, (uint64_t)&v39);
  uint64_t v38 = v24;
  swift_retain();
  swift_unknownObjectRetain();
  outlined destroy of DocumentSceneRootBoxModifier((uint64_t)v40);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)&v38, (uint64_t)v40, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  long long v42 = v36;
  long long v43 = v35;
  uint64_t v44 = v34;
  outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)&v38, &lazy cache variable for type metadata for ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, (uint64_t)&type metadata for DocumentSceneRootBoxModifier);
  uint64_t v25 = (char *)specialized UIHostingController.init(rootView:)((uint64_t)v40);
  *(void *)(*(void *)&v25[direct field offset for UIHostingController.host]
            + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)&v25[direct field offset for UIHostingController.host])
                        + 0x198)
            + 8) = &protocol witness table for URLDocumentHostingController<A>;
  swift_unknownObjectWeakAssign();
  uint64_t v26 = static AppGraph.shared;
  if (static AppGraph.shared)
  {
    uint64_t v27 = v25;
    swift_retain();
    specialized AppGraph.addObserver(_:)(v27, v26);
    swift_release();

    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v46);
    outlined destroy of RootModifier((uint64_t)v45);
    swift_release();
  }
  else
  {
    swift_release();

    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v46);
    outlined destroy of RootModifier((uint64_t)v45);
  }

  outlined destroy of RootModifier(v37);
  outlined destroy of IdentifiedDocumentGroupConfiguration(a2);
  return v25;
}

uint64_t closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 64);
  outlined init with copy of RootModifier(a2, (uint64_t)v8);
  long long v9 = *(_OWORD *)(a3 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
  outlined init with copy of DocumentSceneRootBoxModifier((uint64_t)v8, (uint64_t)(a4 + 1));
  *a4 = v6;
  swift_retain();
  swift_unknownObjectRetain();
  return outlined destroy of DocumentSceneRootBoxModifier((uint64_t)v8);
}

void @objc DocumentHostingController.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  *(void *)&a1[direct field offset for DocumentHostingController.lastVersion] = 0;
  id v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id @objc DocumentHostingController.navigationItem.getter(void *a1)
{
  id v1 = a1;
  id v2 = objc_msgSend(v1, sel_parentViewController);
  if (!v2
    || (uint64_t v3 = v2, v4 = objc_msgSend(v2, sel_navigationItem), v3, !v4))
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB19F0]), sel_init);
  }

  return v4;
}

uint64_t DocumentHostingController.__ivar_destroyer()
{
  outlined destroy of IdentifiedDocumentGroupConfiguration(v0 + direct field offset for DocumentHostingController.configuration);
  uint64_t v1 = v0 + direct field offset for DocumentHostingController.rootModifier;

  return outlined destroy of RootModifier(v1);
}

uint64_t @objc DocumentHostingController.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of IdentifiedDocumentGroupConfiguration(a1 + direct field offset for DocumentHostingController.configuration);
  uint64_t v2 = a1 + direct field offset for DocumentHostingController.rootModifier;

  return outlined destroy of RootModifier(v2);
}

uint64_t type metadata accessor for DocumentHostingController(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentHostingController);
}

uint64_t type metadata completion function for DocumentHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for DocumentHostingController()
{
  return type metadata accessor for DocumentHostingController(0);
}

void @objc DocumentGroupsIntroRootViewHostingController.init(coder:)()
{
}

id @objc DocumentGroupsIntroRootViewHostingController.navigationItem.getter(void *a1)
{
  id v1 = a1;
  DocumentGroupsIntroRootViewHostingController.navigationItem.getter();
  uint64_t v3 = v2;

  return v3;
}

void DocumentGroupsIntroRootViewHostingController.navigationItem.getter()
{
  id v1 = objc_msgSend(v0, sel_childViewControllers);
  type metadata accessor for UIViewController();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    id v7 = objc_allocWithZone(MEMORY[0x1E4FB19F0]);
    objc_msgSend(v7, sel_init);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_9;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    id v3 = (id)MEMORY[0x18C117680](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v3 = *(id *)(v2 + 32);
  }
  id v4 = v3;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v4, sel_navigationItem);

  if (!v5) {
    goto LABEL_10;
  }
}

void DocumentGroupsIntroRootViewHostingController.__allocating_init(coder:rootView:)()
{
}

void DocumentGroupsIntroRootViewHostingController.__allocating_init(hostingView:)()
{
}

id DocumentGroupsIntroRootViewHostingController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DocumentGroupsIntroRootViewHostingController(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DocumentGroupsIntroRootViewHostingController(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DocumentGroupsIntroRootViewHostingController);
}

uint64_t type metadata completion function for DocumentGroupsIntroRootViewHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for DocumentGroupsIntroRootViewHostingController()
{
  return type metadata accessor for DocumentGroupsIntroRootViewHostingController(0);
}

uint64_t destroy for DocumentSceneRootBoxModifier(uint64_t a1)
{
  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  int v2 = *(unsigned __int8 *)(a1 + 88);
  if (v2 != 255) {
    outlined consume of SceneID(*(void *)(a1 + 72), *(void *)(a1 + 80), v2 & 1);
  }

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  id v4 = (_OWORD *)(a1 + 24);
  id v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 40);
    *id v4 = *v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  int v9 = *(unsigned __int8 *)(a2 + 88);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  else
  {
    char v10 = v9 & 1;
    uint64_t v11 = *(void *)(a2 + 72);
    uint64_t v12 = *(void *)(a2 + 80);
    outlined copy of SceneID(v11, v12, v9 & 1);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = v12;
    *(unsigned char *)(a1 + 88) = v10;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  swift_weakCopyAssign();
  id v4 = (_OWORD *)(a1 + 24);
  id v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 24);
      uint64_t v7 = *(void *)(a2 + 56);
      long long v8 = *(_OWORD *)(a2 + 40);
      *id v4 = *v5;
      *(_OWORD *)(a1 + 40) = v8;
      *(void *)(a1 + 56) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *id v4 = v9;
    *(_OWORD *)(a1 + 40) = v10;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v11 = (long long *)(a1 + 72);
  uint64_t v12 = (long long *)(a2 + 72);
  int v13 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v13 == 255)
    {
      long long v15 = *v12;
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *uint64_t v11 = v15;
    }
    else
    {
      char v22 = v13 & 1;
      uint64_t v23 = *(void *)(a2 + 72);
      uint64_t v24 = *(void *)(a2 + 80);
      outlined copy of SceneID(v23, v24, v13 & 1);
      *(void *)(a1 + 72) = v23;
      *(void *)(a1 + 80) = v24;
      *(unsigned char *)(a1 + 88) = v22;
    }
  }
  else if (v13 == 255)
  {
    outlined destroy of SceneID(a1 + 72);
    char v14 = *(unsigned char *)(a2 + 88);
    *uint64_t v11 = *v12;
    *(unsigned char *)(a1 + 88) = v14;
  }
  else
  {
    char v16 = v13 & 1;
    uint64_t v17 = *(void *)(a2 + 72);
    uint64_t v18 = *(void *)(a2 + 80);
    outlined copy of SceneID(v17, v18, v13 & 1);
    uint64_t v19 = *(void *)(a1 + 72);
    uint64_t v20 = *(void *)(a1 + 80);
    char v21 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 72) = v17;
    *(void *)(a1 + 80) = v18;
    *(unsigned char *)(a1 + 88) = v16;
    outlined consume of SceneID(v19, v20, v21);
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v25 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 112) = v25;
  return a1;
}

uint64_t initializeWithTake for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(void *)(a1 + 48))
  {
    if (*(void *)(a2 + 48)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    }
    else {
      outlined destroy of AnyHashable(a1 + 24);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  id v5 = (_OWORD *)(a2 + 72);
  int v6 = *(unsigned __int8 *)(a1 + 88);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 88);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 72);
      uint64_t v9 = *(void *)(a1 + 80);
      *(_OWORD *)(a1 + 72) = *v5;
      *(unsigned char *)(a1 + 88) = v7 & 1;
      outlined consume of SceneID(v8, v9, v6 & 1);
      goto LABEL_10;
    }
    outlined destroy of SceneID(a1 + 72);
  }
  *(_OWORD *)(a1 + 72) = *v5;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
LABEL_10:
  uint64_t v10 = *(void *)(a2 + 96);
  uint64_t v11 = *(void *)(a2 + 104);
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = v11;
  swift_unknownObjectRelease();
  *(void *)(a1 + 112) = v12;
  return a1;
}

uint64_t storeEnumTagSinglePayload for DocumentSceneRootBoxModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 104) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentSceneRootBoxModifier()
{
  return &type metadata for DocumentSceneRootBoxModifier;
}

uint64_t destroy for DocumentBaseModifier(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for DocumentBaseModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  if (v3)
  {
    *a1 = *a2;
    a1[1] = v3;
    uint64_t v4 = a2[3];
    a1[2] = a2[2];
    a1[3] = v4;
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    a1[4] = a2[4];
  }
  return a1;
}

void *assignWithCopy for DocumentBaseModifier(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of NavigationItemDescription((uint64_t)a1);
      uint64_t v5 = a2[4];
      long long v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      a1[4] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    long long v8 = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    *(_OWORD *)a1 = v7;
    *((_OWORD *)a1 + 1) = v8;
  }
  return a1;
}

uint64_t outlined destroy of NavigationItemDescription(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for DocumentBaseModifier(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of NavigationItemDescription(a1);
LABEL_5:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DocumentBaseModifier()
{
  return &type metadata for DocumentBaseModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DocumentBaseModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DocumentSceneRootBoxModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized URLDocumentHostingController.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

id specialized URLDocumentHostingController.hostingView<A>(_:didMoveTo:)(id result, uint64_t a2)
{
  if (a2) {
    return objc_msgSend(result, sel_layoutIfNeeded);
  }
  return result;
}

uint64_t sub_18802923C()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 48) != 1) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1880292A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.toolbarTitleDisplayMode(_:)(uint64_t a1)
{
  return closure #1 in View.toolbarTitleDisplayMode(_:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t outlined init with take of ToolbarStorage.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SceneList.Item?(uint64_t a1)
{
  type metadata accessor for SceneList.Item?(0, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of DocumentSceneRootBoxModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of DocumentSceneRootBoxModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized URLDocumentHostingController.undoManager.getter()
{
  return *(void *)(v0 + direct field offset for URLDocumentHostingController._undoManager);
}

void specialized URLDocumentHostingController.init(coder:)()
{
  uint64_t v1 = &v0[direct field offset for URLDocumentHostingController.navigationItemDescription];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  *(void *)&v0[direct field offset for URLDocumentHostingController._undoManager] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *outlined retain of NavigationItemDescription?(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with take of NavigationItemDescription?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SceneList.Item?(0, &lazy cache variable for type metadata for NavigationItemDescription?, (uint64_t)&type metadata for NavigationItemDescription, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1880297F0()
{
  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(void *)(v0 + 120), *(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
  swift_weakDestroy();
  swift_weakDestroy();
  swift_weakDestroy();
  if (*(void *)(v0 + 192)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 168);
  }
  int v1 = *(unsigned __int8 *)(v0 + 232);
  if (v1 != 255) {
    outlined consume of SceneID(*(void *)(v0 + 216), *(void *)(v0 + 224), v1 & 1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)@<X0>(void *a1@<X8>)
{
  return closure #1 in DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)(v1 + 16, v1 + 144, *(void *)(v1 + 248), a1);
}

uint64_t outlined assign with copy of IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for DocumentToolbarTransformModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DocumentToolbarTransformModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DocumentToolbarTransformModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for DocumentToolbarTransformModifier()
{
  return &type metadata for DocumentToolbarTransformModifier;
}

uint64_t sub_1880299DC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type RootModifier and conformance RootModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>)
  {
    type metadata accessor for _ViewModifier_Content<DocumentSceneRootBoxModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentSceneRootBoxModifier>, (void (*)(void))lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentSceneRootBoxModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentSceneRootBoxModifier>, (void (*)(void))lazy protocol witness table accessor for type DocumentSceneRootBoxModifier and conformance DocumentSceneRootBoxModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<DocumentSceneRootBoxModifier>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>, DocumentToolbarTransformModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, _PreferenceTransformModifier<NavigationTitleKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>)
  {
    type metadata accessor for _ViewModifier_Content<DocumentSceneRootBoxModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentBaseModifier>, (void (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<DocumentSceneRootBoxModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentSceneRootBoxModifier>, ObservableDocumentBoxModifier>, RootModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, _PreferenceTransformModifier<ToolbarKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DocumentBaseModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<DocumentBaseModifier>, (void (*)(void))lazy protocol witness table accessor for type DocumentBaseModifier and conformance DocumentBaseModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DocumentBaseModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<NavigationTitleKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DocumentToolbarTransformModifier()
{
  return &protocol witness table for DocumentToolbarTransformModifier;
}

void type metadata accessor for SceneList.Item?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for implicit closure #1 in static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static DocumentToolbarTransformModifier._makeView(modifier:inputs:body:)();
}

uint64_t sub_18802A1BC@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))v5;

  return swift_retain();
}

void type metadata accessor for Focus<DocumentToolbarTransformModifier, (_:)>()
{
  if (!lazy cache variable for type metadata for Focus<DocumentToolbarTransformModifier, (_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<DocumentToolbarTransformModifier, (_:)>);
    }
  }
}

uint64_t sub_18802A288()
{
  swift_release();

  return swift_deallocObject();
}

unsigned char *assignWithCopy for ArchivableCircularPlaybackProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      long long v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v12 = v11[5];
  int v13 = &a1[v12];
  char v14 = &a2[v12];
  char v15 = v14[8];
  *(void *)int v13 = *(void *)v14;
  v13[8] = v15;
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *assignWithTake for ArchivableCircularPlaybackProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      long long v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v12 = v11[5];
  int v13 = &a1[v12];
  char v14 = &a2[v12];
  *(void *)int v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableCircularPlaybackProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18802A60C);
}

uint64_t sub_18802A60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ArchivableCircularPlaybackProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18802A6E0);
}

uint64_t sub_18802A6E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ArchivableCircularPlaybackProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableCircularPlaybackProgressView);
}

uint64_t type metadata completion function for ArchivableCircularPlaybackProgressView()
{
  return type metadata completion function for ArchivableCircularPlaybackProgressView();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ArchivableCircularProgressView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(a3 + 24);
    long long v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 16);
      v12(v8, v9, v11);
      type metadata accessor for ClosedRange<Date>();
      v12(&v8[*(int *)(v13 + 36)], &v9[*(int *)(v13 + 36)], v11);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      v8[*(int *)(v14 + 48)] = v9[*(int *)(v14 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    char v16 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
    uint64_t v17 = v16[5];
    uint64_t v18 = &v8[v17];
    uint64_t v19 = &v9[v17];
    *(void *)uint64_t v18 = *(void *)v19;
    v18[8] = v19[8];
    v8[v16[6]] = v9[v16[6]];
    v8[v16[7]] = v9[v16[7]];
    v8[v16[8]] = v9[v16[8]];
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return v4;
}

void *assignWithCopy for ArchivableCircularProgressView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  long long v8 = (char *)a2 + v6;
  if (a1 != a2)
  {
    _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)a1 + v6, type metadata accessor for ProgressViewValue);
    uint64_t v9 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16);
      v11(v7, v8, v10);
      type metadata accessor for ClosedRange<Date>();
      v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v15 = v14[5];
  char v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  char v18 = v17[8];
  *(void *)char v16 = *(void *)v17;
  v16[8] = v18;
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for ArchivableCircularProgressView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  long long v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(v7, v8, v10);
    type metadata accessor for ClosedRange<Date>();
    v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v15 = v14[5];
  char v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)char v16 = *(void *)v17;
  v16[8] = v17[8];
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

_OWORD *assignWithTake for ArchivableCircularProgressView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  long long v8 = (char *)a2 + v6;
  if (a1 != a2)
  {
    _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)a1 + v6, type metadata accessor for ProgressViewValue);
    uint64_t v9 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 32);
      v11(v7, v8, v10);
      type metadata accessor for ClosedRange<Date>();
      v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
    }
  }
  uint64_t v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v15 = v14[5];
  char v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)char v16 = *(void *)v17;
  v16[8] = v17[8];
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableCircularProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18802AE98);
}

uint64_t sub_18802AE98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ArchivableCircularProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18802AF7C);
}

uint64_t sub_18802AF7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = a2;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ArchivableLinearProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18802B050);
}

uint64_t sub_18802B050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ArchivableLinearProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18802B130);
}

uint64_t sub_18802B130(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for ArchivableLinearProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableLinearProgressView);
}

uint64_t type metadata completion function for ArchivableLinearProgressView()
{
  return type metadata completion function for ArchivableCircularPlaybackProgressView();
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableLinearProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized static View._viewListCount(inputs:)()
{
  type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>();
  _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, (void (*)(uint64_t))type metadata accessor for StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>);
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(0, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView();
    BOOL v2 = v0 != static ConditionallyArchivableView._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

{
  uint64_t v0;
  char v1;
  BOOL v2;
  unsigned __int8 v3;

  type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>(0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E4F3F700]);
  lazy protocol witness table accessor for type LinearCapsuleGauge and conformance LinearCapsuleGauge();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(0, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    lazy protocol witness table accessor for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>(&lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    BOOL v2 = v0 != static ConditionallyArchivableView._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

uint64_t ArchivableLinearProgressView.Base.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  uint64_t v8 = swift_getKeyPath();
  if (a1)
  {
    swift_retain();
    uint64_t result = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    uint64_t result = 0;
  }
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v14;
  *(void *)(a2 + 40) = v15;
  *(unsigned char *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = KeyPath;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = v6;
  *(unsigned char *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = v7;
  *(unsigned char *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = v8;
  *(void *)(a2 + 120) = result;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableLinearProgressView.Base()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ArchivableLinearProgressView.Base@<X0>(uint64_t a1@<X8>)
{
  return ArchivableLinearProgressView.Base.body.getter(*(void *)(v1 + 8), a1, *(double *)v1);
}

uint64_t ArchivableLinearProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(0, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  int v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - v6;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (double *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v14 - 8);
  char v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_2(v2, (uint64_t)v16, type metadata accessor for ProgressViewStyleConfiguration);
  outlined init with take of ArchivableCircularProgressView((uint64_t)v16, (uint64_t)v13, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    char v18 = *((unsigned char *)v13 + *(int *)(v17 + 48));
    outlined init with take of ArchivableCircularProgressView((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_2((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v19 = *(void *)(v2 + *(int *)(type metadata accessor for ArchivableLinearProgressView(0) + 20));
    v7[v5[9]] = 0;
    v7[v5[10]] = v18;
    *(void *)&v7[v5[11]] = v19;
    v7[v5[12]] = 0;
    outlined init with copy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v7, a1, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base);
    type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v7, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base);
    return _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    if (*((unsigned char *)v13 + 8)) {
      double v21 = 0.0;
    }
    else {
      double v21 = *v13;
    }
    uint64_t v22 = *(void *)(v2 + *(int *)(type metadata accessor for ArchivableLinearProgressView(0) + 20));
    *(double *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return swift_retain();
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableLinearProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ArchivableLinearProgressView(a1, a2, a3, (uint64_t (*)(void, void, void, void))specialized static View._viewListCount(inputs:));
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableCircularProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ArchivableCircularProgressView.gaugeRing.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(0, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v27 - v5;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (double *)((char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ArchivableCircularProgressView(0);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_2(v1 + *(int *)(v16 + 24), (uint64_t)v15, type metadata accessor for ProgressViewStyleConfiguration);
  outlined init with take of ArchivableCircularProgressView((uint64_t)v15, (uint64_t)v12, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    char v18 = *((unsigned char *)v12 + *(int *)(v17 + 48));
    outlined init with take of ArchivableCircularProgressView((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_2((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v19 = *(void *)(v1 + *(int *)(v16 + 28));
    v6[v4[9]] = 0;
    v6[v4[10]] = v18;
    *(void *)&v6[v4[11]] = v19;
    v6[v4[12]] = 1;
    outlined init with copy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v6, a1, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing);
    type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of TimelineProgressView<ArchivableLinearProgressView.Base>((uint64_t)v6, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing);
    return _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    if (*((unsigned char *)v12 + 8)) {
      double v21 = 0.0;
    }
    else {
      double v21 = *v12;
    }
    uint64_t v22 = *(void *)(v1 + *(int *)(v16 + 28));
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v24 = swift_getKeyPath();
    if (v22) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = static Color.primary.getter();
    }
    v27[1] = v25;
    swift_retain();
    uint64_t v26 = AnyShapeStyle.init<A>(_:)();
    *(double *)a1 = v21;
    *(void *)(a1 + 8) = v26;
    *(void *)(a1 + 16) = KeyPath;
    *(void *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = v24;
    *(unsigned char *)(a1 + 48) = 0;
    type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>.Storage, MEMORY[0x1E4F40568]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t closure #1 in ArchivableCircularProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v5;
  v9[2] = *(_OWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  *a3 = static Alignment.center.getter();
  a3[1] = v6;
  type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
  return closure #1 in closure #1 in ArchivableCircularProgressView.body.getter(a2, v9, (uint64_t)a3 + *(int *)(v7 + 44));
}

uint64_t closure #1 in closure #1 in ArchivableCircularProgressView.body.getter@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a3;
  type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, MEMORY[0x1E4F40578]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v52 = &v39[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v53 = &v39[-v8];
  ArchivableCircularProgressView.gaugeRing.getter((uint64_t)&v39[-v8]);
  uint64_t v49 = static HorizontalAlignment.center.getter();
  uint64_t v9 = a1 + *(int *)(type metadata accessor for ArchivableCircularProgressView(0) + 24);
  uint64_t v10 = type metadata accessor for ProgressViewStyleConfiguration(0);
  int v11 = *(unsigned __int8 *)(v9 + *(int *)(v10 + 32));
  uint64_t v48 = static VerticalAlignment.center.getter();
  int v12 = 1;
  int v45 = v11;
  if (v11 == 1)
  {
    if (*(unsigned char *)(v9 + *(int *)(v10 + 28))) {
      int v12 = 257;
    }
    else {
      int v12 = 1;
    }
  }
  int v47 = v12;
  long long v13 = a2[1];
  long long v65 = *a2;
  long long v66 = v13;
  long long v67 = a2[2];
  LODWORD(v68) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  static Font.Weight.semibold.getter();
  LOBYTE(v65) = 2;
  uint64_t v46 = static Font.system(size:weight:design:)();
  uint64_t KeyPath = swift_getKeyPath();
  long long v14 = a2[1];
  long long v65 = *a2;
  long long v66 = v14;
  long long v67 = a2[2];
  LODWORD(v68) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  long long v15 = a2[1];
  long long v65 = *a2;
  long long v66 = v15;
  long long v67 = a2[2];
  LODWORD(v68) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v16 = v78;
  unsigned __int8 v17 = v79;
  uint64_t v18 = v80;
  unsigned __int8 v19 = v81;
  uint64_t v43 = v83;
  uint64_t v44 = v82;
  uint64_t v20 = swift_getKeyPath();
  unsigned __int8 v57 = 1;
  unsigned __int8 v56 = v45;
  unsigned __int8 v55 = v17;
  unsigned __int8 v54 = v19;
  double v21 = v52;
  outlined init with copy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v53, (uint64_t)v52);
  unsigned __int8 v22 = v57;
  unsigned __int8 v23 = v56;
  int v40 = v56;
  int v41 = v57;
  unsigned __int8 v24 = v55;
  int v42 = v55;
  unsigned __int8 v25 = v54;
  int v45 = v54;
  uint64_t v26 = v50;
  outlined init with copy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v21, v50);
  type metadata accessor for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)();
  uint64_t v28 = (_OWORD *)(v26 + *(int *)(v27 + 48));
  uint64_t v29 = v49;
  v58[0] = v49;
  v58[1] = 0;
  LOBYTE(v59) = v22;
  uint64_t v30 = v48;
  *((void *)&v59 + 1) = v48;
  *(void *)&long long v60 = 0;
  LOWORD(v21) = v47;
  WORD4(v60) = v47;
  BYTE10(v60) = v23;
  uint64_t v31 = v46;
  *(void *)&long long v61 = KeyPath;
  *((void *)&v61 + 1) = v46;
  *(void *)&long long v62 = v16;
  BYTE8(v62) = v24;
  *(void *)&long long v63 = v18;
  BYTE8(v63) = v25;
  uint64_t v33 = v43;
  uint64_t v32 = v44;
  *(void *)&v64[0] = v44;
  *((void *)&v64[0] + 1) = v43;
  *(void *)&v64[1] = v20;
  BYTE8(v64[1]) = 1;
  long long v34 = v59;
  *uint64_t v28 = (unint64_t)v49;
  v28[1] = v34;
  long long v35 = v61;
  v28[2] = v60;
  long long v28[3] = v35;
  *(_OWORD *)((char *)v28 + 105) = *(_OWORD *)((char *)v64 + 9);
  long long v36 = v64[0];
  long long v37 = v62;
  _OWORD v28[5] = v63;
  v28[6] = v36;
  v28[4] = v37;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>((uint64_t)v58);
  outlined destroy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v53);
  long long v65 = (unint64_t)v29;
  LOBYTE(v66) = v41;
  *((void *)&v66 + 1) = v30;
  *(void *)&long long v67 = 0;
  WORD4(v67) = (_WORD)v21;
  BYTE10(v67) = v40;
  uint64_t v68 = KeyPath;
  uint64_t v69 = v31;
  uint64_t v70 = v16;
  char v71 = v42;
  uint64_t v72 = v18;
  char v73 = v45;
  uint64_t v74 = v32;
  uint64_t v75 = v33;
  uint64_t v76 = v20;
  char v77 = 1;
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>((uint64_t)&v65);
  return outlined destroy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>((uint64_t)v52);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableCircularProgressView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ArchivableCircularProgressView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1 - 8);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_2(v2, (uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ArchivableCircularProgressView);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  outlined init with take of ArchivableCircularProgressView((uint64_t)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for ArchivableCircularProgressView);
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = partial apply for closure #1 in ArchivableCircularProgressView.body.getter;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0x3FF0000000000000;
  *(_WORD *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = result;
  *(void *)(a2 + 40) = 0x3F847AE147AE147BLL;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableCircularPlaybackProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableCircularPlaybackProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ArchivableLinearProgressView(a1, a2, a3, specialized static View._viewListCount(inputs:));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ArchivableLinearProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void, void))
{
  return a4(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for View.body.getter in conformance ArchivableCircularPlaybackProgressView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_2(v2, a2, type metadata accessor for ProgressViewStyleConfiguration);
  uint64_t v5 = *(void *)(v2 + *(int *)(a1 + 20));
  *(void *)(a2 + *(int *)(type metadata accessor for ResolvedCircularPlaybackProgressView() + 20)) = v5;

  return swift_retain();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedCircularPlaybackProgressView.Base()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

unint64_t lazy protocol witness table accessor for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView;
  if (!lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView)
  {
    _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(255, &lazy cache variable for type metadata for TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView, (uint64_t (*)(void))lazy protocol witness table accessor for type ResolvedCircularPlaybackProgressView.Base and conformance ResolvedCircularPlaybackProgressView.Base, (uint64_t)&type metadata for ResolvedCircularPlaybackProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView.ConditionallyArchivableTimelineProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressView<ResolvedCircularPlaybackProgressView.Base>.ConditionallyArchivableTimelineProgressView and conformance TimelineProgressView<A>.ConditionallyArchivableTimelineProgressView);
  }
  return result;
}

uint64_t sub_18802C718()
{
  uint64_t v1 = type metadata accessor for ArchivableCircularProgressView(0);
  unint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))
     + *(int *)(v1 + 24);
  type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for Date();
    uint64_t v4 = *(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(v2, v3);
    type metadata accessor for ClosedRange<Date>();
    v4(v2 + *(int *)(v5 + 36), v3);
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArchivableCircularProgressView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ArchivableCircularProgressView(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in ArchivableCircularProgressView.body.getter(a1, v6, a2);
}

uint64_t key path getter for EnvironmentValues.minimumScaleFactor : EnvironmentValues, serialized@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18802C910@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.minimumScaleFactor : EnvironmentValues, serialized()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_18802C964()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

void type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>();
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>)
  {
    type metadata accessor for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>);
    }
  }
}

void type metadata accessor for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  if (!lazy cache variable for type metadata for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(255, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, MEMORY[0x1E4F40578]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
    type metadata accessor for ProgressViewStyleConfiguration.CurrentValueLabel?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>);
    _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>()
{
  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>)
  {
    type metadata accessor for _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>();
    lazy protocol witness table accessor for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>)
  {
    type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>();
    type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>();
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type HStack<ProgressViewStyleConfiguration.CurrentValueLabel?> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>);
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type HStack<ProgressViewStyleConfiguration.Label?> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for ProgressViewStyleConfiguration.CurrentValueLabel?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(0, &lazy cache variable for type metadata for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of ArchivableCircularProgressView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of TimelineProgressView<ArchivableLinearProgressView.Base>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for _ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(255, &lazy cache variable for type metadata for TimelineProgressView<CircularPercentageGaugeRing>, (uint64_t (*)(void))lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing, (uint64_t)&type metadata for CircularPercentageGaugeRing, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    unint64_t v7 = a3(a1, &type metadata for CircularPercentageGaugeRing, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined destroy of TimelineProgressView<ArchivableLinearProgressView.Base>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>)
  {
    type metadata accessor for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
    }
  }
}

void type metadata accessor for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>();
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>);
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
    _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>> and conformance GeometryReader<A>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ProgressViewStyleConfiguration.CurrentValueLabel?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LinearCapsuleGauge and conformance LinearCapsuleGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearCapsuleGauge and conformance LinearCapsuleGauge;
  if (!lazy protocol witness table cache variable for type LinearCapsuleGauge and conformance LinearCapsuleGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearCapsuleGauge and conformance LinearCapsuleGauge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E4F3F700]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ArchivableLinearProgressView.Base()
{
  return &type metadata for ArchivableLinearProgressView.Base;
}

ValueMetadata *type metadata accessor for ArchivableCircularProgressView.Metrics()
{
  return &type metadata for ArchivableCircularProgressView.Metrics;
}

uint64_t sub_18802D6D0()
{
  return _s10Foundation4DateVACSLAAWlTm_5(&lazy protocol witness table cache variable for type ResolvedCircularPlaybackProgressView and conformance ResolvedCircularPlaybackProgressView, (void (*)(uint64_t))type metadata accessor for ResolvedCircularPlaybackProgressView);
}

uint64_t sub_18802D718()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>(255, &lazy cache variable for type metadata for ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>);
    type metadata accessor for ProgressViewStyleConfiguration.CurrentValueLabel?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base();
    lazy protocol witness table accessor for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>(&lazy protocol witness table cache variable for type TimelineProgressView<ArchivableLinearProgressView.Base> and conformance TimelineProgressView<A>, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ArchivableLinearProgressView.Base, TimelineProgressView<ArchivableLinearProgressView.Base>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI13_TrimmedShapeVyAA6CircleV6_InsetVGMaTm_0(255, &lazy cache variable for type metadata for TimelineProgressView<ArchivableLinearProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base, (uint64_t)&type metadata for ArchivableLinearProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    unint64_t v7 = a3(a1, &type metadata for ArchivableLinearProgressView.Base, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for ArchivableLinearProgressView.Base(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type ArchivableLinearProgressView.Base and conformance ArchivableLinearProgressView.Base();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ArchivableLinearProgressView.Base()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18802DA60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18802DA8C()
{
  return EnvironmentValues.tint.setter();
}

uint64_t sub_18802DAB8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>, (void (*)(void))lazy protocol witness table accessor for type LinearCapsuleGauge and conformance LinearCapsuleGauge, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<AnyShapeStyle?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(_ConditionalContent<CircularPercentageGaugeRing, TimelineProgressView<CircularPercentageGaugeRing>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, HStack<ProgressViewStyleConfiguration.Label?>>>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<AnyShapeStyle?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<AnyShapeStyle?>, (unint64_t *)&lazy cache variable for type metadata for AnyShapeStyle?, MEMORY[0x1E4F3F700]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LinearCapsuleGauge, _EnvironmentKeyWritingModifier<AnyShapeStyle?>>);
    }
  }
}

uint64_t default argument 0 of ToolbarItemGroup.init(placement:content:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }

  return outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.automatic, a1);
}

uint64_t View.toolbar<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v10[2] = a3;
  _OWORD v10[3] = a4;
  _WORD v10[4] = a5;
  v10[5] = a6;
  void v10[6] = a1;
  v10[7] = a2;
  type metadata accessor for ToolbarItemGroup();
  uint64_t v8 = type metadata accessor for TupleToolbarContent();
  return View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.toolbar<A>(content:), (uint64_t)v10, a3, v8, a5);
}

uint64_t closure #1 in View.toolbar<A>(content:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ToolbarItemGroup();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  int v12 = &v15[-v11];
  default argument 0 of ToolbarItemGroup.init(placement:content:)((uint64_t)v15);
  ToolbarItemGroup.init(placement:content:)((uint64_t)v15, a1, a4, (uint64_t)v9);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  long long v13 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v12, v6, &protocol witness table for ToolbarItemGroup<A>);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v12, v6);
}

uint64_t partial apply for closure #1 in View.toolbar<A>(content:)()
{
  return closure #1 in View.toolbar<A>(content:)(*(void (**)(void))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t View.toolbar<A>(id:content:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = type metadata accessor for ToolbarModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v15 = (uint64_t *)((char *)&v20 - v14);
  unsigned __int8 v17 = (uint64_t *)((char *)&v20 + *(int *)(v16 + 48) - v14);
  *unsigned __int8 v17 = 0;
  v17[1] = 0;
  _OWORD v17[2] = 0;
  *long long v15 = a1;
  v15[1] = a2;
  uint64_t v18 = swift_bridgeObjectRetain();
  a3(v18);
  MEMORY[0x18C113660](v15, a5, v12, a7);
  return (*(uint64_t (**)(void *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_18802DFF4()
{
  return swift_getWitnessTable();
}

uint64_t sub_18802E090()
{
  return swift_getWitnessTable();
}

uint64_t sub_18802E10C()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) != 0
    && ((v7 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    uint64_t v12 = ((unint64_t)a1 + v6 + 16) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 16) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
    unint64_t v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v16 + 8) < 0xFFFFFFFFuLL)
    {
      long long v17 = *(_OWORD *)v16;
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = v17;
      return a1;
    }
    *(void *)unint64_t v15 = *(void *)v16;
    *(void *)(v15 + 8) = *(void *)(v16 + 8);
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    swift_retain();
  }
  swift_retain();
  return a1;
}

_OWORD *initializeWithTake for ToolbarModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(void *)(v10 + 16) = v12;
  return a1;
}

void *assignWithTake for ToolbarModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v13 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v14 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    long long v15 = *(_OWORD *)v14;
    *(void *)(v13 + 16) = *(void *)(v14 + 16);
    *(_OWORD *)unint64_t v13 = v15;
    return a1;
  }
  *(void *)unint64_t v13 = *(void *)v14;
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_release();
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  return a1;
}

void storeEnumTagSinglePayload for ToolbarModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 > 0x7FFFFFFE)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
              unsigned __int8 v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if (a2 > 0x7FFFFFFE)
            {
              *(void *)a1 = 0;
              *((void *)a1 + 1) = 0;
              *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
            }
            else
            {
              *((void *)a1 + 1) = a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18802E6CCLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t static ToolbarModifier.InvalidateBridge.willInvalidate(attribute:)()
{
  AGGraphGetAttributeInfo();
  swift_retain();
  PreferenceBridge.invalidate()();

  return swift_release();
}

void ToolbarModifier.InvalidateBridge.destroy()()
{
}

uint64_t protocol witness for static InvalidatableAttribute.willInvalidate(attribute:) in conformance ToolbarModifier<A, B>.InvalidateBridge()
{
  return static ToolbarModifier.InvalidateBridge.willInvalidate(attribute:)();
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance ToolbarModifier<A, B>.InvalidateBridge()
{
}

uint64_t (*ToolbarModifier.TransformProperties.value.getter())(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v11 - v5;
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of WeakBox<DocumentViewController>(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  outlined init with take of ToolbarStorage.SearchItem?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v9 = swift_allocObject();
  outlined init with take of ToolbarStorage.SearchItem?((uint64_t)v3, v9 + v8, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  return partial apply for closure #1 in ToolbarModifier.TransformProperties.value.getter;
}

uint64_t closure #1 in ToolbarModifier.TransformProperties.value.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of WeakBox<DocumentViewController>(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  uint64_t v7 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  int v8 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  outlined destroy of ToolbarStorage.SearchItem?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  if (v8 != 1) {
    return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV20NavigationPropertiesV_s5NeverOytTg503_s7c4UI23gh32KeyV6reduce5value9nextValueyAA14eF26V0cD0VSgz_AKyXEtFZyAJXEfU_AHSgTf1cn_n(a2, a1);
  }
  outlined destroy of ToolbarStorage.SearchItem?(a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  return outlined init with copy of WeakBox<DocumentViewController>(a2, a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformProperties@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch(a1, (uint64_t (*)(void, void, void, void))ToolbarModifier.TransformProperties.value.getter, (uint64_t)thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()partial apply, a2);
}

uint64_t partial apply for implicit closure #3 in static ToolbarModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static ToolbarModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t (*)(void))type metadata accessor for ToolbarModifier.TransformProperties, (uint64_t)&protocol conformance descriptor for ToolbarModifier<A, B>.TransformProperties, (uint64_t (*)(void))type metadata accessor for Attribute<(_:)>, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t type metadata accessor for ToolbarModifier.TransformProperties()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.TransformProperties()
{
  return swift_getWitnessTable();
}

uint64_t sub_18802EB74()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_18802EBDC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18802EC14()
{
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v3 - 1) + 48))(v2, 1, v3))
  {
    swift_release();
    swift_release();
    type metadata accessor for Attribute<PreferenceBridge>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v5 = *(int *)(v4 + 32);
    uint64_t v6 = v2 + v5 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v7 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    swift_bridgeObjectRelease();
    uint64_t v8 = v2 + v3[6];
    int v9 = *(unsigned __int8 *)(v8 + 8);
    if (v9 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v8, v9 & 1);
    }
    uint64_t v10 = v2 + v3[7];
    int v11 = *(unsigned __int8 *)(v10 + 8);
    if (v11 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v10, v11 & 1);
    }
    outlined consume of Text.Storage(*(void *)(v2 + v3[8]), *(void *)(v2 + v3[8] + 8), *(unsigned char *)(v2 + v3[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v12 = v2 + v3[10];
    if (*(void *)v12)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v13 = v2 + v3[11];
    if (*(void *)v13)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = v2 + v3[13];
    if (*(void *)v14)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }

  return swift_deallocObject();
}

uint64_t sub_18802EEA8()
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3))
  {
    swift_release();
    unsigned int v4 = *(unsigned __int8 *)(v2 + 16);
    if (v4 <= 0xFD) {
      outlined consume of PlatformItemCollection.Storage(*(void *)(v2 + 8), v4 & 1);
    }
    uint64_t v5 = v2 + *(int *)(v3 + 24);
    uint64_t v6 = type metadata accessor for PlatformItemList.Item();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {

      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v7 = *(void *)(v5 + 184);
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
      {
        int v9 = *(unsigned __int8 *)(v5 + 72);
        if (v9 != 255)
        {
          outlined consume of GraphicsImage.Contents(*(void **)(v5 + 64), v9);
          uint64_t v7 = *(void *)(v5 + 184);
          unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
        }
        if (v8 != 0x1FFFFFFFELL) {
          outlined consume of AccessibilityImageLabel(*(void *)(v5 + 168), *(void *)(v5 + 176), v7);
        }
        swift_unknownObjectRelease();
        swift_release();
      }
      if (*(void *)(v5 + 256))
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = *(void **)(v5 + 264);
        if ((unint64_t)v10 >= 2) {

        }
        swift_release();
        swift_release();
      }
      unint64_t v11 = *(void *)(v5 + 328);
      if (v11 >> 2 != 0xFFFFFFFF) {
        outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v5 + 296), *(void *)(v5 + 304), *(void *)(v5 + 312), *(void *)(v5 + 320), v11, *(void *)(v5 + 336), *(void *)(v5 + 344), *(void *)(v5 + 352), *(void *)(v5 + 360), *(void *)(v5 + 368), *(void *)(v5 + 376), *(void *)(v5 + 384), *(void *)(v5 + 392));
      }
      uint64_t v12 = *(void *)(v5 + 408);
      if (v12)
      {
        if (v12 == 1)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          if (*(void *)(v5 + 504)) {
            swift_release();
          }
          if (*(void *)(v5 + 528))
          {
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
          }
          if (*(void *)(v5 + 552) != 1)
          {
            swift_release();
            if (*(void *)(v5 + 560)) {
              swift_release();
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v13 = v5 + *(int *)(v6 + 112);
          uint64_t v14 = type metadata accessor for CommandOperation();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
          {
            uint64_t v15 = v13 + *(int *)(v14 + 20);
            outlined consume of Text.Storage(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));
            swift_bridgeObjectRelease();
            uint64_t v16 = v15 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v17 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
            if (*(void *)(v13 + *(int *)(v14 + 24))) {
              swift_release();
            }
          }
          swift_release();
          goto LABEL_35;
        }
        swift_release();
      }
      if (*(void *)(v5 + 424)) {
        swift_release();
      }
      if (*(void *)(v5 + 440)) {
        swift_release();
      }
      goto LABEL_24;
    }
  }
LABEL_35:

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformProperties.value.getter(uint64_t a1)
{
  return partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?, closure #1 in ToolbarModifier.TransformProperties.value.getter);
}

uint64_t ShareLink.namespace.getter()
{
  return Namespace.wrappedValue.getter();
}

uint64_t ShareLink.init(items:subject:message:preview:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14, long long a15, long long a16, long long a17, uint64_t a18)
{
  *a9 = 0;
  long long v57 = a14;
  long long v58 = a15;
  long long v59 = a16;
  long long v60 = a17;
  *(void *)&long long v61 = a18;
  unsigned __int8 v22 = (int *)type metadata accessor for ShareLink();
  unsigned __int8 v23 = a9;
  unsigned __int8 v24 = (char *)a9 + v22[24];
  *(_OWORD *)unsigned __int8 v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  unsigned __int8 v25 = (char *)v23 + v22[25];
  *(_OWORD *)unsigned __int8 v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  uint64_t v49 = (void *)((char *)v23 + v22[26]);
  *uint64_t v49 = 0;
  v49[1] = 0;
  uint64_t v26 = (void *)((char *)v23 + v22[28]);
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = (char *)v23 + v22[29];
  uint64_t v28 = v23;
  v56[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v56);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v56, (uint64_t)&v57, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  long long v29 = v62;
  *((_OWORD *)v27 + 4) = v61;
  *((_OWORD *)v27 + 5) = v29;
  long long v30 = v60;
  *((_OWORD *)v27 + 2) = v59;
  *((_OWORD *)v27 + 3) = v30;
  v27[144] = v66;
  long long v31 = v65;
  long long v32 = v63;
  *((_OWORD *)v27 + 7) = v64;
  *((_OWORD *)v27 + 8) = v31;
  *((_OWORD *)v27 + 6) = v32;
  long long v33 = v58;
  *(_OWORD *)uint64_t v27 = v57;
  *((_OWORD *)v27 + 1) = v33;
  int v47 = v28;
  uint64_t v34 = (uint64_t)v28 + v22[30];
  *(unsigned char *)uint64_t v34 = 0;
  *(void *)(v34 + 8) = 0;
  uint64_t v50 = *(void *)(a14 - 8);
  (*(void (**)(char *, uint64_t, void))(v50 + 16))((char *)v28 + v22[23], a1, a14);
  uint64_t v35 = *(void *)v24;
  uint64_t v36 = *((void *)v24 + 1);
  uint64_t v37 = *((void *)v24 + 2);
  uint64_t v46 = *((void *)v24 + 3);
  outlined copy of Text?(a2, a3, a4, a5);
  outlined consume of Text?(v35, v36, v37, v46);
  *(void *)unsigned __int8 v24 = a2;
  *((void *)v24 + 1) = a3;
  *((void *)v24 + 2) = a4;
  *((void *)v24 + 3) = a5;
  uint64_t v38 = *(void *)v25;
  uint64_t v39 = *((void *)v25 + 1);
  uint64_t v40 = *((void *)v25 + 2);
  uint64_t v41 = *((void *)v25 + 3);
  outlined copy of Text?(a6, a7, a8, a10);
  outlined consume of Text?(v38, v39, v40, v41);
  *(void *)unsigned __int8 v25 = a6;
  *((void *)v25 + 1) = a7;
  *((void *)v25 + 2) = a8;
  *((void *)v25 + 3) = a10;
  uint64_t v42 = *v49;
  uint64_t v43 = v49[1];
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a11, a12);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v42, v43);
  *uint64_t v49 = a11;
  v49[1] = a12;
  uint64_t v44 = *(void *)(*((void *)&a15 + 1) - 8);
  (*(void (**)(uint64_t, uint64_t, void))(v44 + 16))((uint64_t)v47 + v22[27], a13, *((void *)&a15 + 1));
  ShareLink.assertUnstyled()();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a11, a12);
  outlined consume of Text?(a6, a7, a8, a10);
  outlined consume of Text?(a2, a3, a4, a5);
  (*(void (**)(uint64_t, void))(v44 + 8))(a13, *((void *)&a15 + 1));
  return (*(uint64_t (**)(uint64_t, void))(v50 + 8))(a1, a14);
}

Swift::Void __swiftcall ShareLink.assertUnstyled()()
{
  uint64_t v2 = v0;
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v45 = *(_OWORD *)(v0 + 24);
  long long v46 = v3;
  uint64_t v4 = type metadata accessor for SharePreview();
  unint64_t v33 = *(void *)(v4 - 8);
  uint64_t v34 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (uint64_t *)((char *)&v31 - v5);
  uint64_t v7 = *(void *)(*(void *)(*(void *)(*(void *)(v2 + 48) + 8) + 8) + 8);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = v7;
  uint64_t v42 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v42 - 8);
  v19.n128_f64[0] = MEMORY[0x1F4188790](v42);
  uint64_t v40 = v1;
  uint64_t v41 = (char *)&v31 - v20;
  uint64_t v39 = v2;
  uint64_t v21 = v1 + *(int *)(v2 + 96);
  if (*(void *)(v21 + 24))
  {
    int v22 = *(_DWORD *)(v21 + 16);
    *(void *)&long long v45 = 0;
    char v44 = v22 & 1;
    Text.assertUnstyled(_:options:)();
  }
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))(v18, v40 + *(int *)(v39 + 92), v8, v19);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
  uint64_t v37 = v43 + 48;
  if (v36(v14, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    unsigned __int8 v23 = (void (**)(void *, uint64_t))(v33 + 8);
    v43 += 32;
    unsigned __int8 v24 = (void (**)(char *, uint64_t))(v43 - 24);
    unint64_t v33 = 0x800000018833EC60;
    v35(v11, v14, AssociatedTypeWitness);
    while (1)
    {
      unsigned __int8 v25 = *(void (**)(char *))(v40 + *(int *)(v39 + 104));
      if (v25)
      {
        v25(v11);
        uint64_t v26 = v6[4];
        uint64_t v27 = v6[5];
        uint64_t v29 = v6[6];
        uint64_t v28 = v6[7];
        outlined copy of Text?(v26, v27, v29, v28);
        (*v23)(v6, v34);
        if (v28)
        {
          char v30 = v29 & 1;
          *(void *)&long long v45 = 0;
          char v44 = v30;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v26, v27, v30);
          swift_bridgeObjectRelease();
        }
      }
      (*v24)(v11, AssociatedTypeWitness);
      dispatch thunk of IteratorProtocol.next()();
      if (v36(v14, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      v35(v11, v14, AssociatedTypeWitness);
    }
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v42);
}

uint64_t ShareLink.init(items:subject:message:preview:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, long long a20,uint64_t a21)
{
  uint64_t v45 = a7;
  uint64_t v46 = a8;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v39 = a9;
  uint64_t v40 = a2;
  uint64_t v37 = a11;
  uint64_t v38 = a10;
  uint64_t v35 = a17;
  uint64_t v36 = a16;
  long long v33 = a20;
  long long v34 = a19;
  MEMORY[0x1F4188790](a1);
  unsigned __int8 v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a15 - 8);
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v33 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v28, a1, a15, v26);
  uint64_t v29 = swift_retain();
  a13(v29);
  *((void *)&v32 + 1) = a18;
  *(void *)&long long v32 = v35;
  *(void *)&long long v31 = a15;
  *((void *)&v31 + 1) = v36;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v28, v40, v41, v42, v43, v44, v45, v46, v39, v38, v37, a12, (uint64_t)v23, v31, v32, v34, v33, a21);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(a1, a15);
}

uint64_t ShareLink.presentSharingPicker.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 116);
  long long v5 = *(_OWORD *)(v4 + 112);
  v11[6] = *(_OWORD *)(v4 + 96);
  _OWORD v11[7] = v5;
  v11[8] = *(_OWORD *)(v4 + 128);
  char v12 = *(unsigned char *)(v4 + 144);
  long long v6 = *(_OWORD *)(v4 + 48);
  _OWORD v11[2] = *(_OWORD *)(v4 + 32);
  v11[3] = v6;
  long long v7 = *(_OWORD *)(v4 + 80);
  v11[4] = *(_OWORD *)(v4 + 64);
  _OWORD v11[5] = v7;
  long long v8 = *(_OWORD *)(v4 + 16);
  v11[0] = *(_OWORD *)v4;
  v11[1] = v8;
  outlined retain of Environment<PresentSharingPickerAction?>((uint64_t)v11, outlined copy of Environment<PresentSharingPickerAction?>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v10);
  outlined retain of Environment<PresentSharingPickerAction?>((uint64_t)v11, outlined consume of Environment<PresentSharingPickerAction?>.Content);
  _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0((uint64_t)v10, (uint64_t)v13, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  return _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0((uint64_t)v13, a2, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t ShareLink.isPresented.getter()
{
  type metadata accessor for CollectionOfOne<String>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  return v1;
}

uint64_t ShareLink.isPresented.setter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + *(int *)(a2 + 120) + 8))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t ShareLink.$isPresented.getter()
{
  type metadata accessor for CollectionOfOne<String>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  return v1;
}

uint64_t ShareLink.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = a1[5];
  type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = a1[9];
  uint64_t v27 = type metadata accessor for Button();
  uint64_t v25 = type metadata accessor for ModifiedContent();
  type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F408C8]);
  type metadata accessor for ModifiedContent();
  v23[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AnyShareConfiguration.Key>, (uint64_t)&type metadata for AnyShareConfiguration.Key, (uint64_t)&protocol witness table for AnyShareConfiguration.Key, MEMORY[0x1E4F40F90]);
  uint64_t v24 = type metadata accessor for ModifiedContent();
  unint64_t v26 = lazy protocol witness table accessor for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation();
  long long v62 = &unk_1ED464060;
  uint64_t v63 = v4;
  v23[0] = v4;
  uint64_t v64 = v24;
  unint64_t v65 = v26;
  uint64_t v6 = type metadata accessor for StaticIf();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)v23 - v11;
  uint64_t v13 = a1[3];
  uint64_t v40 = a1[2];
  uint64_t v41 = v13;
  uint64_t v42 = a1[4];
  uint64_t v43 = v3;
  uint64_t v14 = a1[7];
  uint64_t v44 = a1[6];
  uint64_t v45 = v14;
  uint64_t v46 = a1[8];
  uint64_t v47 = v5;
  uint64_t v48 = a1[10];
  uint64_t v49 = v28;
  uint64_t v30 = v40;
  uint64_t v31 = v13;
  uint64_t v32 = v42;
  uint64_t v33 = v3;
  uint64_t v34 = v44;
  uint64_t v35 = v14;
  uint64_t v36 = v46;
  uint64_t v37 = v5;
  uint64_t v38 = v48;
  uint64_t v39 = v28;
  uint64_t v60 = v5;
  long long v61 = &protocol witness table for PlatformItemListTransformModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v58 = swift_getWitnessTable();
  long long v59 = &protocol witness table for SharingActivityPickerModifier;
  uint64_t v16 = swift_getWitnessTable();
  unint64_t v17 = lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>();
  uint64_t v56 = v16;
  unint64_t v57 = v17;
  uint64_t v54 = swift_getWitnessTable();
  uint64_t v55 = MEMORY[0x1E4F40ED8];
  uint64_t v18 = swift_getWitnessTable();
  unint64_t v19 = lazy protocol witness table accessor for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>();
  uint64_t v52 = v18;
  unint64_t v53 = v19;
  uint64_t v22 = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  uint64_t v50 = WitnessTable;
  uint64_t v51 = v22;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, v6);
}

void type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation;
  if (!lazy protocol witness table cache variable for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequiresPlatformItemListRepresentation and conformance RequiresPlatformItemListRepresentation);
  }
  return result;
}

uint64_t closure #1 in ShareLink.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = a8;
  v25[1] = a6;
  v25[0] = a4;
  uint64_t v28 = a1;
  uint64_t v30 = a9;
  uint64_t v26 = a11;
  type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v25 - v21;
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = a3;
  *(void *)&long long v40 = a4;
  *((void *)&v40 + 1) = a5;
  uint64_t v41 = a6;
  *(void *)&long long v42 = a7;
  *((void *)&v42 + 1) = v27;
  *(void *)&long long v43 = a10;
  *((void *)&v43 + 1) = v26;
  uint64_t v25[2] = v28 + *(int *)(type metadata accessor for ShareLink() + 108);
  specialized AnyShareConfiguration.init<A, B, C, D>(_:optimizeForSharingPicker:)(v28, 1, a2, (uint64_t)&v39);
  v33[0] = v39;
  v33[1] = v40;
  unint64_t v34 = v41 | 0x8000000000000000;
  long long v35 = v42;
  long long v36 = v43;
  long long v37 = v44;
  long long v38 = v45;
  View.platformItemSystemType(_:)((uint64_t)v33, a5, a10);
  outlined release of AnyShareConfiguration((uint64_t)&v39);
  uint64_t v31 = a10;
  uint64_t v32 = &protocol witness table for PlatformItemListTransformModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  unsigned __int8 v23 = *(void (**)(char *, uint64_t))(v29 + 8);
  v23(v19, v17);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v22, v17);
}

uint64_t partial apply for closure #1 in ShareLink.body.getter()
{
  return partial apply for closure #1 in ShareLink.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))closure #1 in ShareLink.body.getter);
}

uint64_t closure #2 in ShareLink.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10)
{
  uint64_t v12 = a6;
  unint64_t v95 = a3;
  uint64_t v87 = a9;
  uint64_t v113 = a2;
  unint64_t v114 = a3;
  uint64_t v115 = a4;
  uint64_t v116 = a5;
  uint64_t v117 = a6;
  uint64_t v118 = a7;
  uint64_t v119 = a8;
  long long v120 = a10;
  uint64_t v92 = type metadata accessor for ShareLink();
  uint64_t v80 = *(void *)(v92 - 8);
  uint64_t v81 = *(void *)(v80 + 64);
  MEMORY[0x1F4188790](v92);
  uint64_t v78 = (char *)&v66 - v17;
  uint64_t v72 = type metadata accessor for Button();
  uint64_t v74 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  char v71 = (_WORD *)((char *)&v66 - v18);
  uint64_t v76 = type metadata accessor for ModifiedContent();
  uint64_t v85 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  long long v93 = (char *)&v66 - v19;
  type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F408C8]);
  uint64_t v82 = type metadata accessor for ModifiedContent();
  uint64_t v77 = type metadata accessor for ModifiedContent();
  uint64_t v86 = *(void *)(v77 - 8);
  MEMORY[0x1F4188790](v77);
  char v73 = (char *)&v66 - v20;
  type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AnyShareConfiguration.Key>, (uint64_t)&type metadata for AnyShareConfiguration.Key, (uint64_t)&protocol witness table for AnyShareConfiguration.Key, MEMORY[0x1E4F40F90]);
  uint64_t v83 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v83 - 8);
  MEMORY[0x1F4188790](v83);
  uint64_t v75 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  unsigned __int8 v79 = (char *)&v66 - v23;
  uint64_t v24 = a2;
  uint64_t v89 = a2;
  uint64_t v25 = a2;
  unint64_t v26 = v95;
  uint64_t v88 = a4;
  uint64_t v94 = v12;
  uint64_t v27 = implicit closure #1 in closure #2 in ShareLink.body.getter(a1, v25, v95, a4, a5, v12, a7, a8, a10, *((uint64_t *)&a10 + 1));
  uint64_t v96 = v24;
  unint64_t v97 = v26;
  uint64_t v98 = a4;
  uint64_t v99 = a5;
  uint64_t v100 = v12;
  uint64_t v101 = a7;
  uint64_t v66 = a7;
  uint64_t v102 = a8;
  long long v103 = a10;
  uint64_t v28 = a8;
  uint64_t v67 = a8;
  uint64_t v104 = a1;
  uint64_t v70 = *((void *)&a10 + 1);
  uint64_t v90 = a1;
  uint64_t v29 = v71;
  uint64_t v91 = a5;
  uint64_t v68 = a10;
  Button.init(action:label:)((uint64_t)v27, v30, (void (*)(uint64_t))partial apply for closure #1 in closure #2 in ShareLink.body.getter, v71);
  uint64_t v31 = ShareLink.$isPresented.getter();
  uint64_t v33 = v32;
  LOBYTE(v12) = v34;
  uint64_t v35 = v72;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v64 = a7;
  uint64_t v65 = v28;
  uint64_t v36 = v90;
  uint64_t v37 = v35;
  uint64_t v38 = v35;
  uint64_t v39 = v89;
  uint64_t v40 = v88;
  View.sharingPicker<A, B, C, D>(isPresented:link:)(v31, v33, v12 & 1, v90, v37, v89, v95, v88, a5, WitnessTable, v94, v64, v65, a10);
  swift_release();
  swift_release();
  (*(void (**)(_WORD *, uint64_t))(v74 + 8))(v29, v38);
  uint64_t v41 = v92;
  LOBYTE(v113) = ShareLink.isPresented.getter() & 1;
  uint64_t v42 = v80;
  long long v43 = v78;
  (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v78, v36, v41);
  uint64_t v44 = v42;
  unint64_t v45 = (*(unsigned __int8 *)(v42 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v46 = (char *)swift_allocObject();
  unint64_t v47 = v95;
  *((void *)v46 + 2) = v39;
  *((void *)v46 + 3) = v47;
  uint64_t v48 = v91;
  *((void *)v46 + 4) = v40;
  *((void *)v46 + 5) = v48;
  uint64_t v49 = v66;
  *((void *)v46 + 6) = v94;
  *((void *)v46 + 7) = v49;
  uint64_t v50 = v68;
  *((void *)v46 + 8) = v67;
  *((void *)v46 + 9) = v50;
  *((void *)v46 + 10) = v70;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v46[v45], v43, v41);
  uint64_t v111 = WitnessTable;
  uint64_t v112 = &protocol witness table for SharingActivityPickerModifier;
  uint64_t v51 = v76;
  uint64_t v52 = swift_getWitnessTable();
  unint64_t v53 = v73;
  uint64_t v54 = v93;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v54, v51);
  unint64_t v55 = lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>();
  uint64_t v109 = v52;
  unint64_t v110 = v55;
  uint64_t v107 = swift_getWitnessTable();
  uint64_t v108 = MEMORY[0x1E4F40ED8];
  uint64_t v56 = v77;
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v58 = v75;
  View.shareConfiguration<A, B, C, D>(_:)(v90, v56, v89);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v53, v56);
  unint64_t v59 = lazy protocol witness table accessor for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>();
  uint64_t v105 = v57;
  unint64_t v106 = v59;
  uint64_t v60 = v83;
  swift_getWitnessTable();
  long long v61 = v79;
  static ViewBuilder.buildExpression<A>(_:)(v58);
  long long v62 = *(void (**)(char *, uint64_t))(v84 + 8);
  v62(v58, v60);
  static ViewBuilder.buildExpression<A>(_:)(v61);
  return ((uint64_t (*)(char *, uint64_t))v62)(v61, v60);
}

uint64_t partial apply for closure #2 in ShareLink.body.getter()
{
  return partial apply for closure #1 in ShareLink.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))closure #2 in ShareLink.body.getter);
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AnyShareConfiguration.Key>, (uint64_t)&type metadata for AnyShareConfiguration.Key, (uint64_t)&protocol witness table for AnyShareConfiguration.Key, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<AnyShareConfiguration.Key> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

void *(*implicit closure #1 in closure #2 in ShareLink.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10))()
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a10;
  uint64_t v26 = a6;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v36 = a9;
  uint64_t v37 = a10;
  uint64_t v15 = type metadata accessor for ShareLink();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v24 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v24 - v18, a1, v15, v17);
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = a2;
  *((void *)v21 + 3) = a3;
  *((void *)v21 + 4) = a4;
  *((void *)v21 + 5) = a5;
  uint64_t v22 = v27;
  *((void *)v21 + 6) = v26;
  *((void *)v21 + 7) = v22;
  *((void *)v21 + 8) = v28;
  *((void *)v21 + 9) = a9;
  *((void *)v21 + 10) = v25;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v21[v20], v19, v15);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ShareLink.body.getter;
}

void *ShareLink.show()(uint64_t a1)
{
  ShareLink.presentSharingPicker.getter(a1, (uint64_t)v20);
  _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0((uint64_t)v20, (uint64_t)&v29, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  uint64_t Enum = getEnumTag for NavigationPath.Error((uint64_t)&v29);
  if (Enum == 1) {
    return (void *)ShareLink.isPresented.setter(Enum, a1);
  }
  specialized AnyIdentifiableShareConfiguration.init<A, B, C, D>(_:)(v1, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), (uint64_t)&v21, *(_OWORD *)(a1 + 72));
  uint64_t v5 = (uint64_t *)(v1 + *(int *)(a1 + 112));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  v12[0] = v21;
  v12[1] = v22;
  *(void *)&long long v13 = v23;
  *((void *)&v13 + 1) = v24;
  long long v14 = v25;
  long long v15 = v26;
  long long v16 = v27;
  long long v17 = v28;
  *(void *)&long long v18 = v6;
  *((void *)&v18 + 1) = v7;
  v19[0] = v21;
  v19[1] = v22;
  v19[4] = v26;
  v19[5] = v27;
  void v19[2] = v13;
  _OWORD v19[3] = v25;
  v19[6] = v28;
  v19[7] = v18;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v19, v8, v9, v10);
  _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0((uint64_t)v19, (uint64_t)v11, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v6, v7);
  outlined retain of AnyIdentifiableShareConfiguration((uint64_t)&v21, (void (*)(void, void, void, void, void))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  outlined retain of PresentSharingPickerAction?(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PresentSharingPickerAction?);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  outlined release of SharingPickerHostModifier.Model((uint64_t *)v12);
  outlined retain of PresentSharingPickerAction?(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PresentSharingPickerAction?);
  outlined retain of AnyIdentifiableShareConfiguration((uint64_t)&v21, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  return outlined retain of PresentSharingPickerAction?(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PresentSharingPickerAction?);
}

uint64_t closure #1 in closure #2 in ShareLink.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  long long v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = v14;
  void v24[2] = v15;
  void v24[3] = v16;
  v24[4] = v17;
  v24[5] = v18;
  v24[6] = v19;
  v24[7] = v20;
  v24[8] = a9;
  v24[9] = v21;
  uint64_t v22 = type metadata accessor for ShareLink();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v22 + 108));
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, a5);
}

uint64_t ShareLink.init<A>(item:subject:message:preview:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v80 = a7;
  uint64_t v81 = a8;
  uint64_t v78 = a5;
  uint64_t v79 = a6;
  uint64_t v76 = a3;
  uint64_t v77 = a4;
  uint64_t v75 = a2;
  uint64_t v65 = a1;
  uint64_t v74 = a9;
  char v71 = a12;
  uint64_t v72 = a13;
  uint64_t v69 = a20;
  uint64_t v70 = a21;
  uint64_t v73 = a10;
  uint64_t v61 = a11;
  uint64_t v66 = a19;
  uint64_t v62 = a18;
  uint64_t v82 = a16;
  uint64_t v63 = a15;
  uint64_t v64 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v68 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = v23;
  uint64_t v84 = v24;
  uint64_t v85 = v26;
  uint64_t v86 = v25;
  uint64_t v27 = type metadata accessor for SharePreview();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v56 - v29;
  uint64_t v56 = (char *)&v56 - v29;
  uint64_t v67 = *(void *)(a17 - 8);
  uint64_t v31 = v67;
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)&v56 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for CollectionOfOne();
  double v35 = MEMORY[0x1F4188790](v59);
  uint64_t v60 = (uint64_t)&v56 - v36;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v31 + 16))(v34, a1, a17, v35);
  uint64_t v58 = a17;
  CollectionOfOne.init(_:)();
  uint64_t v37 = v28;
  uint64_t v38 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, a11, v27);
  unint64_t v39 = (*(unsigned __int8 *)(v28 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v40 = (char *)swift_allocObject();
  uint64_t v41 = v64;
  uint64_t v42 = v63;
  *((void *)v40 + 2) = v64;
  *((void *)v40 + 3) = v42;
  *((void *)v40 + 4) = v82;
  *((void *)v40 + 5) = a17;
  uint64_t v43 = v62;
  uint64_t v44 = v66;
  *((void *)v40 + 6) = v62;
  *((void *)v40 + 7) = v44;
  uint64_t v46 = v69;
  uint64_t v45 = v70;
  *((void *)v40 + 8) = v69;
  *((void *)v40 + 9) = v45;
  unint64_t v47 = *(uint64_t (**)(char *, char *, uint64_t))(v37 + 32);
  uint64_t v57 = v38;
  uint64_t v48 = v47(&v40[v39], v56, v38);
  uint64_t v49 = (uint64_t)v68;
  v71(v48);
  uint64_t v50 = v59;
  *((void *)&v55 + 1) = v46;
  *((void *)&v54 + 1) = v43;
  *(void *)&long long v55 = v44;
  *(void *)&long long v54 = swift_getWitnessTable();
  *(void *)&long long v53 = v42;
  *((void *)&v53 + 1) = v82;
  *(void *)&long long v52 = v50;
  *((void *)&v52 + 1) = v41;
  ShareLink.init(items:subject:message:preview:label:)(v60, v75, v76, v77, v78, v79, v80, v81, v74, v73, (uint64_t)partial apply for closure #1 in ShareLink.init<A>(item:subject:message:preview:label:), (uint64_t)v40, v49, v52, v53, v54, v55, v45);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v61, v57);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v65, v58);
}

uint64_t ShareLink.init(items:subject:message:preview:onPresentationChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(uint64_t), uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v58 = a7;
  uint64_t v59 = a8;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v53 = a2;
  uint64_t v60 = a9;
  long long v52 = a10;
  uint64_t v61 = a12;
  uint64_t v51 = a11;
  uint64_t v62 = a13;
  uint64_t v50 = a14;
  uint64_t v44 = a23;
  uint64_t v45 = a22;
  uint64_t v46 = a21;
  uint64_t v47 = a20;
  uint64_t v48 = a19;
  uint64_t v49 = a15;
  uint64_t v25 = *(void *)(a16 - 8);
  MEMORY[0x1F4188790](a20);
  uint64_t v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a16;
  uint64_t v64 = a17;
  uint64_t v65 = a18;
  uint64_t v66 = v28;
  uint64_t v67 = v29;
  uint64_t v68 = v30;
  uint64_t v69 = v32;
  uint64_t v70 = v31;
  uint64_t v71 = a24;
  uint64_t v33 = type metadata accessor for ShareLink();
  uint64_t v34 = *(void *)(v33 - 8);
  double v35 = MEMORY[0x1F4188790](v33);
  uint64_t v37 = (uint64_t *)((char *)&v44 - v36);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, a1, a16, v35);
  *((void *)&v43 + 1) = v44;
  *(void *)&long long v43 = v45;
  *((void *)&v42 + 1) = v46;
  *(void *)&long long v42 = v47;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v27, v53, v54, v55, v56, v57, v58, v59, v37, v52, *((uint64_t *)&v52 + 1), v51, v50, v49, a16, a17, a18, v48, v42,
    v43,
    a24);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a1, a16);
  uint64_t v38 = v60;
  (*(void (**)(uint64_t, void *, uint64_t))(v34 + 32))(v60, v37, v33);
  unint64_t v39 = (void *)(v38 + *(int *)(v33 + 112));
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v39, v39[1]);
  uint64_t v41 = v62;
  *unint64_t v39 = v61;
  v39[1] = v41;
  return result;
}

uint64_t type metadata accessor for ShareLink()
{
  return swift_getGenericMetadata();
}

uint64_t ShareLink.init<A>(item:subject:message:preview:onPresentationChanged:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, long long a12, void (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v66 = a5;
  uint64_t v67 = a6;
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v63 = a2;
  uint64_t v51 = a1;
  uint64_t v62 = a9;
  long long v60 = a12;
  uint64_t v58 = a14;
  uint64_t v59 = a13;
  uint64_t v56 = a21;
  uint64_t v57 = a22;
  uint64_t v61 = a10;
  uint64_t v71 = a11;
  uint64_t v55 = a17;
  uint64_t v53 = a20;
  uint64_t v54 = a19;
  uint64_t v70 = a15;
  uint64_t v72 = a15;
  uint64_t v73 = a16;
  uint64_t v48 = a16;
  uint64_t v74 = a19;
  uint64_t v75 = a20;
  uint64_t v23 = type metadata accessor for SharePreview();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v46 - v25;
  uint64_t v47 = (char *)&v46 - v25;
  uint64_t v52 = *(void *)(a18 - 8);
  uint64_t v27 = v52;
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v46 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for CollectionOfOne();
  double v31 = MEMORY[0x1F4188790](v50);
  uint64_t v33 = (char *)&v46 - v32;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))(v30, a1, a18, v31);
  uint64_t v49 = a18;
  CollectionOfOne.init(_:)();
  uint64_t v34 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v71, v23);
  unint64_t v35 = (*(unsigned __int8 *)(v24 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v36 = (char *)swift_allocObject();
  *((void *)v36 + 2) = v70;
  *((void *)v36 + 3) = a16;
  uint64_t v37 = v55;
  *((void *)v36 + 4) = v55;
  *((void *)v36 + 5) = a18;
  uint64_t v38 = v54;
  uint64_t v39 = v53;
  *((void *)v36 + 6) = v54;
  *((void *)v36 + 7) = v39;
  uint64_t v40 = v56;
  uint64_t v41 = v57;
  *((void *)v36 + 8) = v56;
  *((void *)v36 + 9) = v41;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v36[v35], v47, v34);
  uint64_t v42 = v50;
  uint64_t WitnessTable = swift_getWitnessTable();
  *((void *)&v45 + 1) = partial apply for closure #1 in ShareLink.init<A>(item:subject:message:preview:label:);
  *(void *)&long long v45 = v61;
  ShareLink.init(items:subject:message:preview:onPresentationChanged:label:)((uint64_t)v33, v63, v64, v65, v66, v67, v68, v69, v62, v45, (uint64_t)v36, v60, *((uint64_t *)&v60 + 1), v59, v58, v42, v70, v48, v37,
    WitnessTable,
    v38,
    v39,
    v40,
    v41);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v71, v34);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v51, v49);
}

uint64_t partial apply for closure #1 in ShareLink.init<A>(item:subject:message:preview:label:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharePreview() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = type metadata accessor for SharePreview();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t ShareLink<>.init(items:subject:message:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v33 = a9;
  uint64_t v34 = a2;
  uint64_t v32 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a13 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v23, a1, a13, v21);
  a11(v24);
  uint64_t v25 = _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  *((void *)&v30 + 1) = a16;
  *(void *)&long long v30 = MEMORY[0x1E4F24970];
  *(void *)&long long v29 = a15;
  *((void *)&v29 + 1) = MEMORY[0x1E4F24970];
  *(void *)&long long v28 = MEMORY[0x1E4FBC248];
  *((void *)&v28 + 1) = a14;
  *(void *)&long long v27 = a13;
  *((void *)&v27 + 1) = MEMORY[0x1E4FBC248];
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v23, v34, v35, v36, v37, v38, v39, v40, v33, v32, 0, 0, (uint64_t)v18, v27, v28, v29, v30, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a13);
}

{
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v33 = a9;
  uint64_t v34 = a2;
  uint64_t v32 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a13 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v23, a1, a13, v21);
  a11(v24);
  uint64_t v25 = lazy protocol witness table accessor for type String and conformance String();
  *((void *)&v30 + 1) = a16;
  *(void *)&long long v30 = MEMORY[0x1E4F24970];
  *(void *)&long long v29 = a15;
  *((void *)&v29 + 1) = MEMORY[0x1E4F24970];
  *(void *)&long long v28 = MEMORY[0x1E4FBC248];
  *((void *)&v28 + 1) = a14;
  *(void *)&long long v27 = a13;
  *((void *)&v27 + 1) = MEMORY[0x1E4FBC248];
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v23, v34, v35, v36, v37, v38, v39, v40, v33, v32, 0, 0, (uint64_t)v18, v27, v28, v29, v30, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a13);
}

uint64_t specialized ShareLink<>.init<>(item:subject:message:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  void (**v87)(void *__return_ptr, char *);
  void (**v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void, void, void);
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  int *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  void (*v127)(void, void, void);
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  void v132[4];
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  void v137[19];
  _OWORD v138[9];
  char v139;

  uint64_t v115 = a7;
  uint64_t v116 = a8;
  unint64_t v114 = a6;
  uint64_t v118 = a5;
  unint64_t v127 = a4;
  unint64_t v128 = a3;
  uint64_t v104 = a9;
  uint64_t v113 = a10;
  long long v120 = (void *)a11;
  LODWORD(v126) = a13;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  long long v103 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v19 - 8);
  unint64_t v121 = (uint64_t)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  double v125 = (char *)&v100 - v22;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  MEMORY[0x1F4188790](v23 - 8);
  int v124 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  unint64_t v129 = (uint64_t)&v100 - v26;
  type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  long long v28 = (int *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  long long v30 = (uint64_t *)((char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  MEMORY[0x1F4188790](v31 - 8);
  int v123 = (uint64_t *)((char *)&v100 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v34 = MEMORY[0x1F4188790](v33);
  uint64_t v36 = (char *)&v100 - v35;
  uint64_t v117 = v17;
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16);
  uint64_t v105 = a1;
  char v122 = v16;
  v37((char *)&v100 - v35, a1, v16, v34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v106 = a14;
  uint64_t v107 = a12;
  uint64_t v38 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v109 = v39;
  unint64_t v110 = v38;
  uint64_t v108 = v40;
  uint64_t v111 = v41;
  *long long v30 = 0;
  uint64_t v42 = v28;
  long long v43 = (char *)v30 + v28[26];
  *(_OWORD *)long long v43 = 0u;
  *((_OWORD *)v43 + 1) = 0u;
  uint64_t v44 = (char *)v30 + v28[27];
  *(_OWORD *)uint64_t v44 = 0u;
  *((_OWORD *)v44 + 1) = 0u;
  long long v45 = (void *)((char *)v30 + v28[28]);
  *long long v45 = 0;
  v45[1] = 0;
  uint64_t v46 = (void *)((char *)v30 + v42[30]);
  *uint64_t v46 = 0;
  v46[1] = 0;
  uint64_t v47 = v42;
  uint64_t v48 = (char *)v30 + v42[31];
  v137[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v137);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v137, (uint64_t)v138, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  long long v49 = v138[7];
  *((_OWORD *)v48 + 6) = v138[6];
  *((_OWORD *)v48 + 7) = v49;
  *((_OWORD *)v48 + 8) = v138[8];
  v48[144] = v139;
  long long v50 = v138[3];
  *((_OWORD *)v48 + 2) = v138[2];
  *((_OWORD *)v48 + 3) = v50;
  long long v51 = v138[5];
  *((_OWORD *)v48 + 4) = v138[4];
  *((_OWORD *)v48 + 5) = v51;
  long long v52 = v138[1];
  *(_OWORD *)uint64_t v48 = v138[0];
  *((_OWORD *)v48 + 1) = v52;
  uint64_t v101 = v47;
  uint64_t v102 = v36;
  uint64_t v53 = v47[32];
  uint64_t v112 = v30;
  uint64_t v54 = (char *)v30 + v53;
  *uint64_t v54 = 0;
  *((void *)v54 + 1) = 0;
  uint64_t v119 = (uint64_t)v30 + v47[25];
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v36, v119);
  uint64_t v55 = *((void *)v43 + 1);
  double v126 = *(void *)v43;
  uint64_t v56 = *((void *)v43 + 2);
  long long v120 = (void *)*((void *)v43 + 3);
  uint64_t v57 = a2;
  uint64_t v58 = a2;
  uint64_t v59 = v127;
  uint64_t v60 = v128;
  uint64_t v61 = v118;
  outlined copy of Text?(v58, v128, (char)v127, v118);
  outlined consume of Text?(v126, v55, v56, (uint64_t)v120);
  double v126 = v57;
  *(void *)long long v43 = v57;
  *((void *)v43 + 1) = v60;
  *((void *)v43 + 2) = v59;
  *((void *)v43 + 3) = v61;
  uint64_t v62 = *((void *)v44 + 1);
  long long v120 = *(void **)v44;
  uint64_t v63 = *((void *)v44 + 2);
  uint64_t v64 = *((void *)v44 + 3);
  uint64_t v66 = v114;
  uint64_t v65 = v115;
  uint64_t v67 = v116;
  uint64_t v68 = v113;
  outlined copy of Text?(v114, v115, v116, v113);
  outlined consume of Text?((uint64_t)v120, v62, v63, v64);
  *(void *)uint64_t v44 = v66;
  *((void *)v44 + 1) = v65;
  *((void *)v44 + 2) = v67;
  *((void *)v44 + 3) = v68;
  uint64_t v69 = v111;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v45, v45[1]);
  uint64_t v71 = v109;
  uint64_t v70 = v110;
  *long long v45 = 0;
  v45[1] = 0;
  long long v120 = v45;
  uint64_t v72 = (char *)v112 + v101[29];
  *(void *)uint64_t v72 = v70;
  *((void *)v72 + 1) = v71;
  char v73 = v108 & 1;
  v72[16] = v108 & 1;
  *((void *)v72 + 3) = v69;
  if (v118)
  {
    v132[0] = 0;
    outlined copy of Text.Storage(v70, v71, v73);
    swift_bridgeObjectRetain();
    uint64_t v74 = v126;
    uint64_t v75 = v127;
    LOBYTE(v131) = v127 & 1;
    uint64_t v76 = v128;
    Text.assertUnstyled(_:options:)();
  }
  else
  {
    outlined copy of Text.Storage(v70, v71, v73);
    swift_bridgeObjectRetain();
    uint64_t v75 = v127;
    uint64_t v76 = v128;
    uint64_t v74 = v126;
  }
  uint64_t v77 = (uint64_t (*)(void, void, void))v123;
  outlined init with copy of CollectionOfOne<URL>(v119, (uint64_t)v123);
  uint64_t v78 = v117;
  uint64_t v79 = (uint64_t)v125;
  uint64_t v80 = v122;
  unint64_t v127 = *(void (**)(void, void, void))(v117 + 32);
  unint64_t v128 = v117 + 32;
  v127(v125, v77, v122);
  uint64_t v81 = *(char **)(v78 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v81)(v79, 0, 1, v80);
  uint64_t v82 = (uint64_t)v124;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v81)(v124, 1, 1, v80);
  outlined assign with take of URL?(v79, v82);
  uint64_t v83 = v129;
  outlined init with take of CollectionOfOne<URL>.Iterator(v82, v129, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  uint64_t v84 = v121;
  outlined init with take of CollectionOfOne<URL>.Iterator(v83, v121, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  double v125 = v81;
  double v126 = v78 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v81)(v83, 1, 1, v80);
  int v123 = *(void **)(v78 + 48);
  int v124 = (char *)(v78 + 48);
  int v85 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v123)(v84, 1, v80);
  uint64_t v86 = v103;
  uint64_t v87 = (void (**)(void *__return_ptr, char *))v120;
  if (v85 != 1)
  {
    uint64_t v89 = (void (**)(char *, uint64_t))(v117 + 8);
    uint64_t v119 = 0x800000018833EC60;
    do
    {
      v127(v86, v84, v80);
      if (*v87)
      {
        uint64_t v91 = v74;
        uint64_t v92 = v76;
        long long v93 = v75;
        (*v87)(v132, v86);
        uint64_t v94 = v86;
        uint64_t v96 = v133;
        unint64_t v95 = v134;
        uint64_t v98 = v135;
        unint64_t v97 = v136;
        outlined copy of Text?(v133, v134, v135, v136);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v132);
        if (v97)
        {
          uint64_t v99 = v98 & 1;
          uint64_t v131 = 0;
          unint64_t v130 = v99;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v96, v95, v99);
          swift_bridgeObjectRelease();
        }
        uint64_t v80 = v122;
        (*v89)(v94, v122);
        uint64_t v75 = v93;
        uint64_t v76 = v92;
        uint64_t v74 = v91;
        uint64_t v86 = v94;
        uint64_t v87 = (void (**)(void *__return_ptr, char *))v120;
        uint64_t v84 = v121;
      }
      else
      {
        (*v89)(v86, v80);
      }
      uint64_t v90 = v129;
      outlined init with take of CollectionOfOne<URL>.Iterator(v129, v84, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v125)(v90, 1, 1, v80);
    }
    while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v123)(v84, 1, v80) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v129, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  outlined consume of Text?(v114, v115, v116, v113);
  outlined consume of Text?(v74, v76, (char)v75, v118);
  outlined consume of Text.Storage(v110, v109, v108 & 1);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v102, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v112, v104, (uint64_t (*)(void))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v105, v80);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShareLink<>.init<>(item:subject:message:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(void, void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14)
{
  uint64_t v110 = a7;
  uint64_t v111 = a8;
  uint64_t v109 = a6;
  uint64_t v116 = a5;
  uint64_t v124 = a4;
  double v125 = a2;
  uint64_t v126 = a3;
  uint64_t v106 = a9;
  uint64_t v117 = a14;
  int v112 = a13;
  uint64_t v114 = a12;
  uint64_t v113 = a11;
  uint64_t v108 = a10;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v105 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v119 = (uint64_t)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  int v123 = (char *)&v99 - v21;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  MEMORY[0x1F4188790](v22 - 8);
  char v122 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v128 = (uint64_t)&v99 - v25;
  type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  uint64_t v27 = (int *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (uint64_t *)((char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  MEMORY[0x1F4188790](v30 - 8);
  unint64_t v121 = (uint64_t *)((char *)&v99 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v33 = MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v99 - v34;
  uint64_t v115 = v16;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16);
  uint64_t v107 = a1;
  uint64_t v120 = v15;
  v36((char *)&v99 - v34, a1, v15, v33);
  *uint64_t v29 = 0;
  uint64_t v37 = (char *)v29 + v27[26];
  *(_OWORD *)uint64_t v37 = 0u;
  *((_OWORD *)v37 + 1) = 0u;
  uint64_t v38 = (char *)v29 + v27[27];
  *(_OWORD *)uint64_t v38 = 0u;
  *((_OWORD *)v38 + 1) = 0u;
  uint64_t v39 = (void *)((char *)v29 + v27[28]);
  unint64_t v127 = v39;
  *uint64_t v39 = 0;
  v39[1] = 0;
  int v40 = (void *)((char *)v29 + v27[30]);
  *int v40 = 0;
  v40[1] = 0;
  uint64_t v41 = (char *)v29 + v27[31];
  v136[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v136);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v136, (uint64_t)v137, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  long long v42 = v137[7];
  *((_OWORD *)v41 + 6) = v137[6];
  *((_OWORD *)v41 + 7) = v42;
  *((_OWORD *)v41 + 8) = v137[8];
  v41[144] = v138;
  long long v43 = v137[3];
  *((_OWORD *)v41 + 2) = v137[2];
  *((_OWORD *)v41 + 3) = v43;
  long long v44 = v137[5];
  *((_OWORD *)v41 + 4) = v137[4];
  *((_OWORD *)v41 + 5) = v44;
  long long v45 = v137[1];
  *(_OWORD *)uint64_t v41 = v137[0];
  *((_OWORD *)v41 + 1) = v45;
  uint64_t v46 = (char *)v29 + v27[32];
  *uint64_t v46 = 0;
  *((void *)v46 + 1) = 0;
  uint64_t v47 = (uint64_t)v29 + v27[25];
  long long v103 = v35;
  uint64_t v118 = v47;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v35, v47);
  uint64_t v48 = *((void *)v37 + 1);
  uint64_t v104 = *(void **)v37;
  uint64_t v49 = *((void *)v37 + 2);
  uint64_t v100 = *((void *)v37 + 3);
  uint64_t v101 = v49;
  swift_bridgeObjectRetain();
  int v102 = v112 & 1;
  outlined copy of Text.Storage(a11, a12, v102);
  long long v51 = v125;
  uint64_t v50 = v126;
  uint64_t v52 = v124;
  uint64_t v53 = v116;
  outlined copy of Text?((uint64_t)v125, v126, v124, v116);
  outlined consume of Text?((uint64_t)v104, v48, v101, v100);
  *(void *)uint64_t v37 = v51;
  *((void *)v37 + 1) = v50;
  *((void *)v37 + 2) = v52;
  *((void *)v37 + 3) = v53;
  uint64_t v54 = *((void *)v38 + 1);
  uint64_t v104 = *(void **)v38;
  uint64_t v55 = *((void *)v38 + 3);
  uint64_t v101 = *((void *)v38 + 2);
  uint64_t v56 = v109;
  uint64_t v57 = v110;
  uint64_t v58 = v111;
  uint64_t v59 = v108;
  outlined copy of Text?(v109, v110, v111, v108);
  uint64_t v60 = v54;
  uint64_t v61 = v117;
  outlined consume of Text?((uint64_t)v104, v60, v101, v55);
  *(void *)uint64_t v38 = v56;
  *((void *)v38 + 1) = v57;
  *((void *)v38 + 2) = v58;
  *((void *)v38 + 3) = v59;
  uint64_t v62 = v116;
  uint64_t v63 = v127;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v127, v127[1]);
  char v64 = v102;
  uint64_t v65 = v113;
  uint64_t v66 = v114;
  *uint64_t v63 = 0;
  v63[1] = 0;
  uint64_t v67 = v27[29];
  uint64_t v104 = v29;
  uint64_t v68 = (char *)v29 + v67;
  *(void *)uint64_t v68 = v65;
  *((void *)v68 + 1) = v66;
  v68[16] = v64;
  *((void *)v68 + 3) = v61;
  if (v62)
  {
    v131[0] = 0;
    outlined copy of Text.Storage(v65, v66, v64);
    swift_bridgeObjectRetain();
    uint64_t v69 = v124;
    uint64_t v70 = v125;
    LOBYTE(v130) = v124 & 1;
    uint64_t v71 = v126;
    Text.assertUnstyled(_:options:)();
    uint64_t v72 = v71;
    char v73 = v70;
  }
  else
  {
    outlined copy of Text.Storage(v65, v66, v64);
    swift_bridgeObjectRetain();
    uint64_t v69 = v124;
    char v73 = v125;
    uint64_t v72 = v126;
  }
  uint64_t v74 = (uint64_t (*)(void, void, void))v121;
  outlined init with copy of CollectionOfOne<URL>(v118, (uint64_t)v121);
  uint64_t v75 = v115;
  uint64_t v76 = (uint64_t)v123;
  uint64_t v77 = v74;
  uint64_t v78 = v120;
  double v125 = *(void (**)(void, void, void))(v115 + 32);
  uint64_t v126 = v115 + 32;
  v125(v123, v77, v120);
  uint64_t v79 = *(char **)(v75 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v79)(v76, 0, 1, v78);
  uint64_t v80 = (uint64_t)v122;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v79)(v122, 1, 1, v78);
  outlined assign with take of URL?(v76, v80);
  uint64_t v81 = v128;
  outlined init with take of CollectionOfOne<URL>.Iterator(v80, v128, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  uint64_t v82 = v119;
  outlined init with take of CollectionOfOne<URL>.Iterator(v81, v119, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  int v123 = v79;
  uint64_t v124 = v75 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v79)(v81, 1, 1, v78);
  unint64_t v121 = *(void **)(v75 + 48);
  char v122 = (char *)(v75 + 48);
  int v83 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v121)(v82, 1, v78);
  uint64_t v84 = v105;
  if (v83 != 1)
  {
    uint64_t v89 = (void (**)(char *, uint64_t))(v115 + 8);
    uint64_t v118 = 0x800000018833EC60;
    do
    {
      v125(v84, v82, v78);
      if (*v127)
      {
        uint64_t v91 = v73;
        uint64_t v92 = v72;
        uint64_t v93 = v69;
        ((void (*)(void *__return_ptr, char *))*v127)(v131, v84);
        uint64_t v95 = v132;
        uint64_t v94 = v133;
        char v97 = v134;
        uint64_t v96 = v135;
        outlined copy of Text?(v132, v133, v134, v135);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v131);
        if (v96)
        {
          char v98 = v97 & 1;
          uint64_t v130 = 0;
          char v129 = v98;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v95, v94, v98);
          swift_bridgeObjectRelease();
        }
        uint64_t v78 = v120;
        (*v89)(v84, v120);
        uint64_t v69 = v93;
        uint64_t v72 = v92;
        char v73 = v91;
        uint64_t v82 = v119;
      }
      else
      {
        (*v89)(v84, v78);
      }
      uint64_t v90 = v128;
      outlined init with take of CollectionOfOne<URL>.Iterator(v128, v82, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v123)(v90, 1, 1, v78);
    }
    while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v121)(v82, 1, v78) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v128, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  outlined consume of Text?(v109, v110, v111, v108);
  outlined consume of Text?((uint64_t)v73, v72, v69, v116);
  char v85 = v112 & 1;
  uint64_t v87 = v113;
  uint64_t v86 = v114;
  outlined consume of Text.Storage(v113, v114, v112 & 1);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v103, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v104, v106, (uint64_t (*)(void))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v107, v78);
  outlined consume of Text.Storage(v87, v86, v85);
  return swift_bridgeObjectRelease();
}

uint64_t specialized ShareLink<>.init<>(item:subject:message:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void (*a11)(void *__return_ptr, uint64_t))
{
  void (**v76)(void *__return_ptr, char *);
  void (**v78)(char *, uint64_t);
  uint64_t v79;
  uint64_t v80;
  void (*v81)(void, void, void);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  void (*v114)(void, void, void);
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  void v119[4];
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  void v124[2];
  unsigned __int8 v125;
  uint64_t v126;
  void v127[19];
  _OWORD v128[9];
  char v129;

  int v102 = a7;
  long long v103 = a8;
  uint64_t v101 = a6;
  uint64_t v105 = a5;
  uint64_t v114 = a3;
  uint64_t v115 = a4;
  uint64_t v113 = a2;
  uint64_t v94 = a9;
  uint64_t v100 = a10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v93 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v108 = (uint64_t)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int v112 = (char *)&v89 - v18;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v111 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v116 = (uint64_t)&v89 - v22;
  type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  uint64_t v24 = (int *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (uint64_t *)((char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v110 = (uint64_t *)((char *)&v89 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v89 - v31;
  uint64_t v104 = v13;
  double v33 = *(uint64_t (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  uint64_t v95 = a1;
  uint64_t v109 = v12;
  uint64_t v34 = v33((char *)&v89 - v31, a1, v12, v30);
  a11(v124, v34);
  char v97 = v124[1];
  uint64_t v96 = v125;
  char v98 = v126;
  uint64_t v99 = v124[0];
  *uint64_t v26 = 0;
  uint64_t v35 = (char *)v26 + v24[26];
  *(_OWORD *)uint64_t v35 = 0u;
  *((_OWORD *)v35 + 1) = 0u;
  uint64_t v36 = (char *)v26 + v24[27];
  *(_OWORD *)uint64_t v36 = 0u;
  *((_OWORD *)v36 + 1) = 0u;
  uint64_t v37 = (void *)((char *)v26 + v24[28]);
  *uint64_t v37 = 0;
  v37[1] = 0;
  uint64_t v38 = (void *)((char *)v26 + v24[30]);
  *uint64_t v38 = 0;
  v38[1] = 0;
  uint64_t v39 = (char *)v26 + v24[31];
  v127[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v127);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v127, (uint64_t)v128, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  long long v40 = v128[7];
  *((_OWORD *)v39 + 6) = v128[6];
  *((_OWORD *)v39 + 7) = v40;
  *((_OWORD *)v39 + 8) = v128[8];
  v39[144] = v129;
  long long v41 = v128[3];
  *((_OWORD *)v39 + 2) = v128[2];
  *((_OWORD *)v39 + 3) = v41;
  long long v42 = v128[5];
  *((_OWORD *)v39 + 4) = v128[4];
  *((_OWORD *)v39 + 5) = v42;
  long long v43 = v128[1];
  *(_OWORD *)uint64_t v39 = v128[0];
  *((_OWORD *)v39 + 1) = v43;
  long long v44 = (char *)v26 + v24[32];
  *long long v44 = 0;
  *((void *)v44 + 1) = 0;
  uint64_t v45 = (uint64_t)v26 + v24[25];
  uint64_t v91 = v32;
  uint64_t v106 = v45;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v32, v45);
  uint64_t v107 = *(void **)v35;
  uint64_t v92 = (void *)*((void *)v35 + 1);
  uint64_t v46 = *((void *)v35 + 2);
  uint64_t v89 = *((void *)v35 + 3);
  uint64_t v90 = v46;
  uint64_t v48 = v113;
  uint64_t v47 = v114;
  uint64_t v49 = v115;
  uint64_t v50 = v105;
  outlined copy of Text?(v113, (uint64_t)v114, v115, v105);
  outlined consume of Text?((uint64_t)v107, (uint64_t)v92, v90, v89);
  *(void *)uint64_t v35 = v48;
  *((void *)v35 + 1) = v47;
  *((void *)v35 + 2) = v49;
  *((void *)v35 + 3) = v50;
  uint64_t v107 = *(void **)v36;
  uint64_t v92 = (void *)*((void *)v36 + 1);
  uint64_t v51 = *((void *)v36 + 3);
  uint64_t v90 = *((void *)v36 + 2);
  uint64_t v52 = v101;
  uint64_t v53 = v102;
  uint64_t v54 = v103;
  uint64_t v55 = v100;
  outlined copy of Text?(v101, v102, v103, v100);
  outlined consume of Text?((uint64_t)v107, (uint64_t)v92, v90, v51);
  *(void *)uint64_t v36 = v52;
  *((void *)v36 + 1) = v53;
  *((void *)v36 + 2) = v54;
  *((void *)v36 + 3) = v55;
  uint64_t v56 = v98;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v37, v37[1]);
  uint64_t v57 = v99;
  char v58 = v96;
  uint64_t v59 = v97;
  *uint64_t v37 = 0;
  v37[1] = 0;
  uint64_t v107 = v37;
  uint64_t v60 = v24[29];
  uint64_t v92 = v26;
  uint64_t v61 = (char *)v26 + v60;
  uint64_t v62 = v105;
  *(void *)uint64_t v61 = v57;
  *((void *)v61 + 1) = v59;
  v61[16] = v58;
  *((void *)v61 + 3) = v56;
  if (v62)
  {
    v119[0] = 0;
    outlined copy of Text.Storage(v57, v59, v58);
    swift_bridgeObjectRetain();
    uint64_t v63 = v114;
    uint64_t v64 = v115;
    LOBYTE(v118) = v115 & 1;
    uint64_t v65 = v113;
    Text.assertUnstyled(_:options:)();
  }
  else
  {
    outlined copy of Text.Storage(v57, v59, v58);
    swift_bridgeObjectRetain();
    uint64_t v63 = v114;
    uint64_t v64 = v115;
    uint64_t v65 = v113;
  }
  uint64_t v66 = (uint64_t (*)(void, void, void))v110;
  outlined init with copy of CollectionOfOne<URL>(v106, (uint64_t)v110);
  uint64_t v67 = v104;
  uint64_t v68 = (uint64_t)v112;
  uint64_t v69 = v109;
  uint64_t v114 = *(void (**)(void, void, void))(v104 + 32);
  uint64_t v115 = v104 + 32;
  v114(v112, v66, v109);
  uint64_t v70 = *(char **)(v67 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v70)(v68, 0, 1, v69);
  uint64_t v71 = (uint64_t)v111;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v70)(v111, 1, 1, v69);
  outlined assign with take of URL?(v68, v71);
  uint64_t v72 = v116;
  outlined init with take of CollectionOfOne<URL>.Iterator(v71, v116, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  uint64_t v73 = v108;
  outlined init with take of CollectionOfOne<URL>.Iterator(v72, v108, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  int v112 = v70;
  uint64_t v113 = v67 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v70)(v72, 1, 1, v69);
  uint64_t v110 = *(uint64_t **)(v67 + 48);
  uint64_t v111 = (char *)(v67 + 48);
  int v74 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v110)(v73, 1, v69);
  uint64_t v75 = v93;
  uint64_t v76 = (void (**)(void *__return_ptr, char *))v107;
  if (v74 != 1)
  {
    uint64_t v78 = (void (**)(char *, uint64_t))(v104 + 8);
    uint64_t v106 = 0x800000018833EC60;
    do
    {
      v114(v75, v73, v69);
      if (*v76)
      {
        uint64_t v80 = v65;
        uint64_t v81 = v63;
        uint64_t v82 = v64;
        (*v76)(v119, v75);
        int v83 = v75;
        char v85 = v120;
        uint64_t v84 = v121;
        uint64_t v87 = v122;
        uint64_t v86 = v123;
        outlined copy of Text?(v120, v121, v122, v123);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v119);
        if (v86)
        {
          uint64_t v88 = v87 & 1;
          uint64_t v118 = 0;
          uint64_t v117 = v88;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v85, v84, v88);
          swift_bridgeObjectRelease();
        }
        uint64_t v69 = v109;
        (*v78)(v83, v109);
        uint64_t v64 = v82;
        uint64_t v63 = v81;
        uint64_t v65 = v80;
        uint64_t v75 = v83;
        uint64_t v76 = (void (**)(void *__return_ptr, char *))v107;
        uint64_t v73 = v108;
      }
      else
      {
        (*v78)(v75, v69);
      }
      uint64_t v79 = v116;
      outlined init with take of CollectionOfOne<URL>.Iterator(v116, v73, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v112)(v79, 1, 1, v69);
    }
    while (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v110)(v73, 1, v69) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v116, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  outlined consume of Text?(v101, v102, v103, v100);
  outlined consume of Text?(v65, (uint64_t)v63, v64, v105);
  outlined consume of Text.Storage(v99, v97, v96);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v91, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v92, v94, (uint64_t (*)(void))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v95, v69);
}

uint64_t ShareLink<>.init<>(item:subject:message:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v39 = a7;
  uint64_t v40 = a8;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  double v33 = a9;
  uint64_t v34 = a2;
  uint64_t v32 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  uint64_t v18 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a1, v21);
  a11(v23);
  unint64_t v24 = lazy protocol witness table accessor for type CollectionOfOne<URL> and conformance CollectionOfOne<A>();
  uint64_t v25 = _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  *((void *)&v30 + 1) = a14;
  *(void *)&long long v30 = MEMORY[0x1E4F24970];
  *(void *)&long long v29 = v24;
  *((void *)&v29 + 1) = MEMORY[0x1E4F24970];
  *(void *)&long long v28 = MEMORY[0x1E4FBC248];
  *((void *)&v28 + 1) = a13;
  *(void *)&long long v27 = v18;
  *((void *)&v27 + 1) = MEMORY[0x1E4FBC248];
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v20, v34, v35, v36, v37, v38, v39, v40, v33, v32, 0, 0, (uint64_t)v16, v27, v28, v29, v30, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(a1, v21);
}

unint64_t lazy protocol witness table accessor for type CollectionOfOne<URL> and conformance CollectionOfOne<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionOfOne<URL> and conformance CollectionOfOne<A>;
  if (!lazy protocol witness table cache variable for type CollectionOfOne<URL> and conformance CollectionOfOne<A>)
  {
    type metadata accessor for CollectionOfOne<URL>(255, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<URL> and conformance CollectionOfOne<A>);
  }
  return result;
}

uint64_t ShareLink<>.init<>(item:subject:message:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  double v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36[0] = v20;
  v36[1] = v21;
  v22(v17);
  type metadata accessor for CollectionOfOne<String>(0, &lazy cache variable for type metadata for CollectionOfOne<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBB08]);
  uint64_t v24 = v23;
  unint64_t v25 = lazy protocol witness table accessor for type CollectionOfOne<String> and conformance CollectionOfOne<A>();
  unint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
  *((void *)&v31 + 1) = a14;
  *(void *)&long long v31 = MEMORY[0x1E4F24970];
  *(void *)&long long v30 = v25;
  *((void *)&v30 + 1) = MEMORY[0x1E4F24970];
  *(void *)&long long v29 = MEMORY[0x1E4FBC248];
  *((void *)&v29 + 1) = a13;
  *(void *)&long long v28 = v24;
  *((void *)&v28 + 1) = MEMORY[0x1E4FBC248];
  return ShareLink.init(items:subject:message:preview:label:)((uint64_t)v36, a2, a3, v32, v33, v34, v35, a9, a8, a10, 0, 0, (uint64_t)v19, v28, v29, v30, v31, v26);
}

unint64_t lazy protocol witness table accessor for type CollectionOfOne<String> and conformance CollectionOfOne<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionOfOne<String> and conformance CollectionOfOne<A>;
  if (!lazy protocol witness table cache variable for type CollectionOfOne<String> and conformance CollectionOfOne<A>)
  {
    type metadata accessor for CollectionOfOne<String>(255, &lazy cache variable for type metadata for CollectionOfOne<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBB08]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionOfOne<String> and conformance CollectionOfOne<A>);
  }
  return result;
}

uint64_t DefaultShareLinkLabel.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0xD000000000000013;
  *(void *)(v7 + 24) = 0x800000018833EC40;
  *(_DWORD *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 36) = 1;
  *(_OWORD *)(v7 + 40) = xmmword_18834C6B0;
  *(void *)(v7 + 56) = 0xD000000000000013;
  *(void *)(v7 + 64) = 0x800000018833EC40;
  *(_OWORD *)(v7 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v7 + 88) = 0;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  outlined copy of Text.Storage(v3, v4, v5);

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultShareLinkLabel()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance DefaultShareLinkLabel@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0xD000000000000013;
  *(void *)(v7 + 24) = 0x800000018833EC40;
  *(_DWORD *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 36) = 1;
  *(_OWORD *)(v7 + 40) = xmmword_18834C6B0;
  *(void *)(v7 + 56) = 0xD000000000000013;
  *(void *)(v7 + 64) = 0x800000018833EC40;
  *(_OWORD *)(v7 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v7 + 88) = 0;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  outlined copy of Text.Storage(v3, v4, v5);

  return swift_bridgeObjectRetain();
}

uint64_t ShareLink<>.init(items:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16, uint64_t a17)
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v27 = a2;
  long long v25 = a15;
  long long v26 = a10;
  uint64_t v19 = *(void *)(a12 - 8);
  double v20 = MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v22, a1, a12, v20);
  *((void *)&v24 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *(void *)&long long v24 = a16;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v22, v27, v28, v29, v30, v31, v32, v33, a9, v26, *((uint64_t *)&v26 + 1), a11, (void (*)(uint64_t))closure #1 in ShareLink<>.init(items:subject:message:preview:), 0, a12, a13, a14, (uint64_t)&type metadata for DefaultShareLinkLabel, v25,
    v24,
    a17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a12);
}

unint64_t lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel;
  if (!lazy protocol witness table cache variable for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel);
  }
  return result;
}

uint64_t ShareLink<>.init(items:subject:message:preview:onPresentationChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v42 = a2;
  uint64_t v39 = a1;
  uint64_t v49 = a9;
  long long v41 = a10;
  uint64_t v51 = a12;
  uint64_t v40 = a11;
  uint64_t v36 = a19;
  uint64_t v37 = a18;
  uint64_t v38 = a17;
  uint64_t v50 = a13;
  uint64_t v20 = *(void *)(a14 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  uint64_t v52 = a14;
  uint64_t v53 = a15;
  uint64_t v54 = a16;
  uint64_t v55 = &type metadata for DefaultShareLinkLabel;
  uint64_t v56 = a17;
  uint64_t v57 = a18;
  uint64_t v58 = a19;
  unint64_t v59 = v23;
  uint64_t v60 = a20;
  uint64_t v24 = type metadata accessor for ShareLink();
  uint64_t v25 = *(void *)(v24 - 8);
  double v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (uint64_t *)((char *)&v35 - v27);
  uint64_t v29 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v22, v39, a14, v26);
  *((void *)&v34 + 1) = v37;
  *(void *)&long long v34 = v38;
  ShareLink<>.init(items:subject:message:preview:)((uint64_t)v22, v42, v43, v44, v45, v46, v47, v48, v28, v41, v40, a14, a15, a16, v34, v36, a20);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v29, a14);
  uint64_t v30 = v49;
  (*(void (**)(uint64_t, void *, uint64_t))(v25 + 32))(v49, v28, v24);
  uint64_t v31 = (void *)(v30 + *(int *)(v24 + 112));
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v31, v31[1]);
  uint64_t v33 = v50;
  *uint64_t v31 = v51;
  v31[1] = v33;
  return result;
}

uint64_t ShareLink<>.init(_:items:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19, uint64_t a20,uint64_t a21)
{
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v38 = a9;
  uint64_t v42 = a10;
  uint64_t v43 = a6;
  uint64_t v40 = a12;
  uint64_t v41 = a11;
  uint64_t v39 = a13;
  long long v37 = a14;
  uint64_t v34 = a18;
  uint64_t v35 = a17;
  long long v33 = a19;
  uint64_t v36 = a15;
  uint64_t v26 = *(void *)(a16 - 8);
  double v27 = MEMORY[0x1F4188790](a1);
  uint64_t v29 = (char *)&v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))(v29, v30, a16, v27);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  char v49 = a3;
  uint64_t v50 = a4;
  *((void *)&v32 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *(void *)&long long v32 = a20;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v29, v43, v44, v45, v42, v41, v40, v39, v38, v37, *((uint64_t *)&v37 + 1), v36, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v46, a16, v35, v34, (uint64_t)&type metadata for DefaultShareLinkLabel, v33,
    v32,
    a21);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a5, a16);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  long long v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned char v46[16];
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v38 = a9;
  uint64_t v42 = a10;
  uint64_t v43 = a6;
  uint64_t v40 = a12;
  uint64_t v41 = a11;
  uint64_t v39 = a13;
  long long v37 = a14;
  uint64_t v34 = a18;
  uint64_t v35 = a17;
  long long v33 = a19;
  uint64_t v36 = a15;
  uint64_t v26 = *(void *)(a16 - 8);
  double v27 = MEMORY[0x1F4188790](a1);
  uint64_t v29 = (char *)&v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))(v29, v30, a16, v27);
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  a3 &= 1u;
  char v49 = a3;
  uint64_t v50 = a4;
  *((void *)&v32 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *(void *)&long long v32 = a20;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v29, v43, v44, v45, v42, v41, v40, v39, v38, v37, *((uint64_t *)&v37 + 1), v36, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v46, a16, v35, v34, (uint64_t)&type metadata for DefaultShareLinkLabel, v33,
    v32,
    a21);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a5, a16);
  outlined consume of Text.Storage(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t ShareLink<>.init<A>(_:items:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  uint64_t v40 = a4;
  uint64_t v38 = a3;
  uint64_t v34 = a2;
  long long v37 = a9;
  uint64_t v39 = a10;
  long long v36 = a11;
  uint64_t v32 = a20;
  uint64_t v31 = a17;
  uint64_t v33 = a16;
  uint64_t v35 = a12;
  uint64_t v22 = *(void *)(a13 - 8);
  double v23 = MEMORY[0x1F4188790](a1);
  uint64_t v25 = (char *)&v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v22 + 16))(v25, v23);
  uint64_t v46 = a13;
  uint64_t v47 = a14;
  uint64_t v48 = a15;
  uint64_t v49 = a16;
  uint64_t v26 = v31;
  uint64_t v50 = v31;
  uint64_t v51 = a18;
  uint64_t v52 = a19;
  uint64_t v53 = v32;
  uint64_t v54 = a21;
  uint64_t v55 = a1;
  *((void *)&v29 + 1) = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  *((void *)&v28 + 1) = a18;
  *(void *)&long long v29 = a19;
  *(void *)&long long v28 = v26;
  ShareLink.init(items:subject:message:preview:label:)((uint64_t)v25, v38, v40, v41, v42, v43, v44, v39, v37, v36, *((uint64_t *)&v36 + 1), v35, (void (*)(uint64_t))partial apply for closure #1 in ShareLink<>.init<A>(_:items:subject:message:preview:), (uint64_t)v45, a13, a14, a15, (uint64_t)&type metadata for DefaultShareLinkLabel, v28,
    v29,
    a21);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v34, a13);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v33 - 8) + 8))(a1);
}

uint64_t closure #1 in ShareLink<>.init<A>(_:items:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in ShareLink<>.init<A>(_:items:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ShareLink<>.init<A>(_:items:subject:message:preview:)(*(void *)(v1 + 88), a1);
}

uint64_t ShareLink<>.init<A>(item:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v35 = a9;
  uint64_t v36 = a2;
  uint64_t v30 = a1;
  uint64_t v31 = a11;
  uint64_t v32 = a17;
  uint64_t v33 = a12;
  uint64_t v34 = a10;
  uint64_t v43 = a12;
  uint64_t v44 = a13;
  uint64_t v45 = a15;
  uint64_t v46 = a16;
  uint64_t v18 = type metadata accessor for SharePreview();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v30 - v20;
  uint64_t v22 = *(void *)(a14 - 8);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v26, a1, a14, v24);
  uint64_t v27 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, v31, v18);
  unint64_t v28 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v26, v36, v37, v38, v39, v40, v41, v42, v35, v34, (uint64_t)v21, (void (*)(uint64_t))closure #1 in ShareLink<>.init(items:subject:message:preview:), 0, v33, a13, (uint64_t)&type metadata for DefaultShareLinkLabel, a14, a15, a16,
    v28,
    v32);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v27, v18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v30, a14);
}

uint64_t ShareLink<>.init<A>(item:subject:message:preview:onPresentationChanged:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ValueMetadata *a18, uint64_t a19)
{
  uint64_t v62 = a7;
  uint64_t v63 = a8;
  uint64_t v60 = a5;
  uint64_t v61 = a6;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v57 = a2;
  uint64_t v54 = a1;
  uint64_t v64 = a9;
  uint64_t v65 = a12;
  uint64_t v66 = a13;
  uint64_t v55 = a11;
  uint64_t v56 = a10;
  uint64_t v44 = a19;
  uint64_t v49 = (uint64_t)a18;
  uint64_t v67 = a14;
  uint64_t v68 = a15;
  uint64_t v48 = a14;
  uint64_t v47 = a15;
  uint64_t v69 = a17;
  uint64_t v70 = a18;
  uint64_t v46 = a17;
  uint64_t v53 = type metadata accessor for SharePreview();
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v51 = (char *)&v43 - v19;
  uint64_t v45 = *(void *)(a16 - 8);
  uint64_t v20 = v45;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for CollectionOfOne();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v26 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  uint64_t v67 = v24;
  uint64_t v68 = a14;
  uint64_t v69 = a15;
  uint64_t v70 = &type metadata for DefaultShareLinkLabel;
  uint64_t v71 = WitnessTable;
  uint64_t v72 = a17;
  uint64_t v27 = v49;
  uint64_t v73 = v49;
  unint64_t v74 = v26;
  uint64_t v75 = a19;
  uint64_t v50 = type metadata accessor for ShareLink();
  uint64_t v28 = *(void *)(v50 - 8);
  double v29 = MEMORY[0x1F4188790](v50);
  uint64_t v31 = (uint64_t *)((char *)&v43 - v30);
  uint64_t v32 = (uint64_t)v23;
  uint64_t v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v54, a16, v29);
  uint64_t v34 = v52;
  uint64_t v35 = (uint64_t)v51;
  uint64_t v36 = v55;
  uint64_t v37 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v55, v53);
  ShareLink<>.init<A>(item:subject:message:preview:)(v32, v57, v58, v59, v60, v61, v62, v63, v31, v56, v35, v48, v47, a16, v46, v27, v44);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v37);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v33, a16);
  uint64_t v38 = v64;
  uint64_t v39 = v50;
  (*(void (**)(uint64_t, void *, uint64_t))(v28 + 32))(v64, v31, v50);
  uint64_t v40 = (void *)(v38 + *(int *)(v39 + 112));
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v40, v40[1]);
  uint64_t v42 = v66;
  *uint64_t v40 = v65;
  v40[1] = v42;
  return result;
}

uint64_t ShareLink<>.init<A>(_:item:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v48 = a6;
  uint64_t v34 = a5;
  uint64_t v41 = a4;
  int v39 = a3;
  uint64_t v37 = a2;
  uint64_t v35 = a1;
  uint64_t v43 = a9;
  uint64_t v46 = a11;
  uint64_t v47 = a10;
  uint64_t v44 = a13;
  uint64_t v45 = a12;
  uint64_t v42 = a14;
  uint64_t v33 = a15;
  uint64_t v38 = a21;
  uint64_t v36 = a17;
  uint64_t v40 = a16;
  uint64_t v56 = a16;
  uint64_t v57 = a17;
  uint64_t v58 = a19;
  uint64_t v59 = a20;
  uint64_t v22 = type metadata accessor for SharePreview();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v33 - v24;
  uint64_t v26 = *(void *)(a18 - 8);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))(v30, a5, a18, v28);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, a15, v22);
  uint64_t v52 = v35;
  uint64_t v53 = v37;
  char v54 = v39;
  uint64_t v55 = v41;
  unint64_t v31 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v30, v48, v49, v50, v47, v46, v45, v44, v43, v42, (uint64_t)v25, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v51, v40, v36, (uint64_t)&type metadata for DefaultShareLinkLabel, a18, a19, a20,
    v31,
    v38);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v33, v22);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v34, a18);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56[16];
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  char v54 = a7;
  uint64_t v55 = a8;
  uint64_t v53 = a6;
  int v39 = a5;
  uint64_t v46 = a4;
  uint64_t v44 = a3;
  uint64_t v38 = a2;
  uint64_t v23 = a1;
  uint64_t v37 = a1;
  uint64_t v48 = a9;
  uint64_t v51 = a11;
  uint64_t v52 = a10;
  uint64_t v49 = a13;
  uint64_t v50 = a12;
  uint64_t v47 = a14;
  uint64_t v40 = a15;
  uint64_t v43 = a21;
  uint64_t v41 = a19;
  uint64_t v42 = a17;
  uint64_t v45 = a16;
  uint64_t v61 = a16;
  uint64_t v62 = a17;
  uint64_t v63 = a19;
  uint64_t v64 = a20;
  uint64_t v24 = type metadata accessor for SharePreview();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v36 - v26;
  double v28 = *(void *)(a18 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16))(v32, a5, a18, v30);
  uint64_t v33 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v40, v24);
  uint64_t v57 = v23;
  uint64_t v58 = a2;
  LOBYTE(v23) = v44 & 1;
  uint64_t v59 = v44 & 1;
  uint64_t v60 = v46;
  uint64_t v34 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v32, v53, v54, v55, v52, v51, v50, v49, v48, v47, (uint64_t)v27, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v56, v45, v42, (uint64_t)&type metadata for DefaultShareLinkLabel, a18, v41, a20,
    v34,
    v43);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v33, v24);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v39, a18);
  outlined consume of Text.Storage(v37, v38, v23);
  return swift_bridgeObjectRelease();
}

uint64_t ShareLink<>.init<A, B>(_:item:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v46 = a6;
  uint64_t v45 = a5;
  uint64_t v44 = a4;
  uint64_t v42 = a3;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v41 = a9;
  uint64_t v43 = a10;
  uint64_t v40 = a11;
  uint64_t v39 = a20;
  uint64_t v38 = a19;
  uint64_t v36 = a18;
  uint64_t v37 = a17;
  uint64_t v49 = a15;
  uint64_t v35 = a12;
  uint64_t v62 = a13;
  uint64_t v63 = a14;
  uint64_t v64 = a17;
  uint64_t v65 = a18;
  uint64_t v20 = type metadata accessor for SharePreview();
  uint64_t v34 = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v24 = *(void *)(a16 - 8);
  double v26 = MEMORY[0x1F4188790](v25);
  double v28 = (char *)&v34 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v28, v51, a16, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, a12, v20);
  uint64_t v53 = a13;
  uint64_t v54 = a14;
  uint64_t v55 = v49;
  uint64_t v56 = a16;
  uint64_t v29 = v37;
  uint64_t v30 = v36;
  uint64_t v57 = v37;
  uint64_t v58 = v36;
  uint64_t v31 = v39;
  uint64_t v59 = v38;
  uint64_t v60 = v39;
  uint64_t v61 = v50;
  unint64_t v32 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  ShareLink.init<A>(item:subject:message:preview:label:)((uint64_t)v28, v42, v44, v45, v46, v47, v48, v43, v41, v40, (uint64_t)v23, (void (*)(uint64_t))partial apply for closure #1 in ShareLink<>.init<A, B>(_:item:subject:message:preview:), (uint64_t)v52, a13, a14, (uint64_t)&type metadata for DefaultShareLinkLabel, a16, v29, v30,
    v32,
    v31);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v35, v34);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v51, a16);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v49 - 8) + 8))(v50);
}

uint64_t closure #1 in ShareLink<>.init<A, B>(_:item:subject:message:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in ShareLink<>.init<A, B>(_:item:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ShareLink<>.init<A, B>(_:item:subject:message:preview:)(*(void *)(v1 + 80), a1);
}

uint64_t ShareLink<>.init(items:subject:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return ShareLink<>.init(items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)closure #1 in ShareLink<>.init(items:subject:message:preview:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)closure #1 in ShareLink<>.init(items:subject:message:preview:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

uint64_t ShareLink<>.init(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (uint64_t)partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

uint64_t ShareLink<>.init<A>(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return ShareLink<>.init<A>(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)partial apply for closure #1 in ShareLink<>.init<A>(_:items:subject:message:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

{
  return ShareLink<>.init<A>(_:items:subject:message:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, (uint64_t)partial apply for closure #1 in ShareLink<>.init<A>(_:items:subject:message:), (void (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))ShareLink<>.init(items:subject:message:label:));
}

uint64_t ShareLink<>.init(items:subject:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v22 = a13;
  uint64_t v23 = a4;
  uint64_t v16 = *(void *)(a10 - 8);
  double v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, a10, v17);
  unint64_t v20 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v22(v19, a2, a3, v23, v24, v25, v26, v27, a9, a12, 0, a10, &type metadata for DefaultShareLinkLabel, a11, v20);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a10);
}

uint64_t closure #1 in ShareLink<>.init(items:subject:message:preview:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static Text.System.shareEllipses.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  return result;
}

uint64_t ShareLink<>.init(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void (*a18)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  v30[1] = a9;
  uint64_t v35 = a10;
  uint64_t v36 = a6;
  uint64_t v33 = a12;
  uint64_t v34 = a11;
  uint64_t v31 = a18;
  uint64_t v32 = a13;
  v30[0] = a14;
  uint64_t v23 = *(void *)(a15 - 8);
  double v24 = MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, v27, a15, v24);
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  char v42 = a3;
  uint64_t v43 = a4;
  unint64_t v28 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v31(v26, v36, v37, v38, v35, v34, v33, v32, v30[0], a17, v39, a15, &type metadata for DefaultShareLinkLabel, a16, v28);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a5, a15);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  void v30[2];
  void (*v31)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned char v39[16];
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  uint64_t v37 = a7;
  uint64_t v38 = a8;
  v30[1] = a9;
  uint64_t v35 = a10;
  uint64_t v36 = a6;
  uint64_t v33 = a12;
  uint64_t v34 = a11;
  uint64_t v31 = a18;
  uint64_t v32 = a13;
  v30[0] = a14;
  uint64_t v23 = *(void *)(a15 - 8);
  double v24 = MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, v27, a15, v24);
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  a3 &= 1u;
  char v42 = a3;
  uint64_t v43 = a4;
  unint64_t v28 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v31(v26, v36, v37, v38, v35, v34, v33, v32, v30[0], a17, v39, a15, &type metadata for DefaultShareLinkLabel, a16, v28);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a5, a15);
  outlined consume of Text.Storage(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

uint64_t ShareLink<>.init<A>(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void (*a17)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  v25[1] = a9;
  uint64_t v26 = a3;
  uint64_t v28 = a10;
  uint64_t v29 = a4;
  uint64_t v27 = a17;
  uint64_t v19 = *(void *)(a12 - 8);
  double v20 = MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v19 + 16))(v22, v20);
  uint64_t v35 = a12;
  uint64_t v36 = a13;
  uint64_t v37 = a14;
  uint64_t v38 = a15;
  uint64_t v39 = a1;
  unint64_t v23 = lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
  v27(v22, v26, v29, v30, v31, v32, v33, v28, a11, a16, v34, a12, &type metadata for DefaultShareLinkLabel, a14, v23);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a2, a12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a13 - 8) + 8))(a1, a13);
}

uint64_t closure #1 in ShareLink<>.init<A>(_:items:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in ShareLink<>.init<A>(_:items:subject:message:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ShareLink<>.init<A>(_:items:subject:message:)(*(void *)(v1 + 48), a1);
}

uint64_t ShareLink<>.init<>(item:subject:message:)@<X0>(uint64_t a1@<X0>, void (*a2)(void, void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  void (**v85)(void *__return_ptr, char *);
  void (*v86)(char *, uint64_t);
  void (**v88)(char *, uint64_t);
  uint64_t v89;
  void (*v90)(void, void, void);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v122;
  void (*v123)(void, void, void);
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  void v128[4];
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  void v133[19];
  _OWORD v134[9];
  char v135;

  uint64_t v111 = a7;
  int v112 = a8;
  uint64_t v110 = a6;
  uint64_t v114 = a4;
  uint64_t v115 = a5;
  uint64_t v124 = a3;
  int v102 = a9;
  uint64_t v109 = a10;
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v118 = (uint64_t)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v122 = (char *)&v98 - v15;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  MEMORY[0x1F4188790](v16 - 8);
  unint64_t v121 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  double v125 = (uint64_t)&v98 - v19;
  type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  uint64_t v21 = (int *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v23 = (uint64_t *)((char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v120 = (uint64_t)&v98 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v98 - v27;
  uint64_t v29 = type metadata accessor for URL();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v99 = (char *)&v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v33 = MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v98 - v34;
  uint64_t v113 = v30;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, double))(v30 + 16);
  long long v103 = a1;
  v36((char *)&v98 - v34, a1, v29, v33);
  uint64_t v100 = v35;
  ((void (*)(char *, char *, uint64_t))v36)(v28, v35, v29);
  uint64_t v37 = static Text.System.shareEllipses.getter();
  uint64_t v105 = v38;
  uint64_t v106 = v37;
  uint64_t v104 = v39;
  uint64_t v107 = v40;
  *unint64_t v23 = 0;
  uint64_t v41 = v21;
  char v42 = (char *)v23 + v21[26];
  *(_OWORD *)char v42 = 0u;
  *((_OWORD *)v42 + 1) = 0u;
  uint64_t v43 = (char *)v23 + v21[27];
  *(_OWORD *)uint64_t v43 = 0u;
  *((_OWORD *)v43 + 1) = 0u;
  uint64_t v44 = (void *)((char *)v23 + v21[28]);
  *uint64_t v44 = 0;
  v44[1] = 0;
  uint64_t v45 = (void *)((char *)v23 + v41[30]);
  *uint64_t v45 = 0;
  v45[1] = 0;
  unint64_t v46 = (unint64_t)v41;
  uint64_t v47 = (char *)v23 + v41[31];
  v133[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v133);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v133, (uint64_t)v134, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  long long v48 = v134[7];
  *((_OWORD *)v47 + 6) = v134[6];
  *((_OWORD *)v47 + 7) = v48;
  *((_OWORD *)v47 + 8) = v134[8];
  v47[144] = v135;
  long long v49 = v134[3];
  *((_OWORD *)v47 + 2) = v134[2];
  *((_OWORD *)v47 + 3) = v49;
  long long v50 = v134[5];
  *((_OWORD *)v47 + 4) = v134[4];
  *((_OWORD *)v47 + 5) = v50;
  long long v51 = v134[1];
  *(_OWORD *)uint64_t v47 = v134[0];
  *((_OWORD *)v47 + 1) = v51;
  uint64_t v116 = v46;
  uint64_t v52 = *(int *)(v46 + 128);
  uint64_t v108 = v23;
  uint64_t v53 = (char *)v23 + v52;
  char *v53 = 0;
  *((void *)v53 + 1) = 0;
  uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v23 + *(int *)(v46 + 100));
  uint64_t v101 = v28;
  uint64_t v119 = v54;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v28, (uint64_t)v54);
  uint64_t v55 = *(void *)v42;
  int v123 = (void (*)(void, void, void))*((void *)v42 + 1);
  uint64_t v117 = (void *)*((void *)v42 + 2);
  char v98 = *((void *)v42 + 3);
  uint64_t v56 = a2;
  uint64_t v57 = (uint64_t)a2;
  uint64_t v58 = v124;
  uint64_t v59 = v114;
  uint64_t v60 = v115;
  outlined copy of Text?(v57, v124, v114, v115);
  outlined consume of Text?(v55, (uint64_t)v123, (char)v117, v98);
  int v123 = v56;
  *(void *)char v42 = v56;
  *((void *)v42 + 1) = v58;
  *((void *)v42 + 2) = v59;
  *((void *)v42 + 3) = v60;
  uint64_t v61 = *((void *)v43 + 1);
  uint64_t v117 = *(void **)v43;
  uint64_t v62 = *((void *)v43 + 3);
  char v98 = *((void *)v43 + 2);
  uint64_t v63 = v110;
  uint64_t v64 = v111;
  uint64_t v65 = v112;
  uint64_t v66 = v109;
  outlined copy of Text?(v110, v111, v112, v109);
  uint64_t v67 = v61;
  uint64_t v68 = v115;
  outlined consume of Text?((uint64_t)v117, v67, v98, v62);
  *(void *)uint64_t v43 = v63;
  *((void *)v43 + 1) = v64;
  *((void *)v43 + 2) = v65;
  *((void *)v43 + 3) = v66;
  uint64_t v69 = v107;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v44, v44[1]);
  uint64_t v71 = v105;
  uint64_t v70 = v106;
  *uint64_t v44 = 0;
  v44[1] = 0;
  uint64_t v117 = v44;
  uint64_t v72 = (char *)v108 + *(int *)(v116 + 116);
  *(void *)uint64_t v72 = v70;
  *((void *)v72 + 1) = v71;
  char v73 = v104 & 1;
  v72[16] = v104 & 1;
  *((void *)v72 + 3) = v69;
  if (v68)
  {
    v128[0] = 0;
    outlined copy of Text.Storage(v70, v71, v73);
    swift_bridgeObjectRetain();
    LOBYTE(v127) = v114 & 1;
    unint64_t v74 = v123;
    uint64_t v75 = v124;
    Text.assertUnstyled(_:options:)();
  }
  else
  {
    outlined copy of Text.Storage(v70, v71, v73);
    swift_bridgeObjectRetain();
    unint64_t v74 = v123;
    uint64_t v75 = v124;
  }
  uint64_t v76 = v120;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v119, v120);
  uint64_t v77 = v113;
  uint64_t v78 = (uint64_t)v122;
  int v123 = *(void (**)(void, void, void))(v113 + 32);
  uint64_t v124 = v113 + 32;
  v123(v122, v76, v29);
  uint64_t v79 = *(char **)(v77 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v79)(v78, 0, 1, v29);
  uint64_t v80 = (uint64_t)v121;
  ((void (*)(void, uint64_t, uint64_t, uint64_t))v79)(v121, 1, 1, v29);
  outlined assign with take of URL?(v78, v80);
  uint64_t v81 = v125;
  outlined init with take of CollectionOfOne<URL>.Iterator(v80, v125, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  uint64_t v82 = v118;
  outlined init with take of CollectionOfOne<URL>.Iterator(v81, v118, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  unint64_t v121 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v79;
  char v122 = (char *)(v77 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v79)(v81, 1, 1, v29);
  uint64_t v119 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  uint64_t v120 = v77 + 48;
  int v83 = v119(v82, 1, v29);
  uint64_t v84 = v99;
  char v85 = (void (**)(void *__return_ptr, char *))v117;
  if (v83 != 1)
  {
    uint64_t v88 = (void (**)(char *, uint64_t))(v113 + 8);
    uint64_t v116 = 0x800000018833EC60;
    do
    {
      v123(v84, v82, v29);
      if (*v85)
      {
        uint64_t v90 = v74;
        uint64_t v91 = v75;
        (*v85)(v128, v84);
        uint64_t v92 = v84;
        uint64_t v93 = v129;
        uint64_t v94 = v130;
        uint64_t v96 = v131;
        uint64_t v95 = v132;
        outlined copy of Text?(v129, v130, v131, v132);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v128);
        if (v95)
        {
          char v97 = v96 & 1;
          unint64_t v127 = 0;
          uint64_t v126 = v97;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v93, v94, v97);
          swift_bridgeObjectRelease();
        }
        (*v88)(v92, v29);
        uint64_t v75 = v91;
        unint64_t v74 = v90;
        uint64_t v84 = v92;
        char v85 = (void (**)(void *__return_ptr, char *))v117;
        uint64_t v82 = v118;
      }
      else
      {
        (*v88)(v84, v29);
      }
      uint64_t v89 = v125;
      outlined init with take of CollectionOfOne<URL>.Iterator(v125, v82, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
      v121(v89, 1, 1, v29);
    }
    while (v119(v82, 1, v29) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v125, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  outlined consume of Text?(v110, v111, v112, v109);
  outlined consume of Text?((uint64_t)v74, v75, v114, v115);
  outlined consume of Text.Storage(v106, v105, v104 & 1);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v101, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v108, v102, (uint64_t (*)(void))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  uint64_t v86 = *(void (**)(char *, uint64_t))(v113 + 8);
  v86(v100, v29);
  return ((uint64_t (*)(uint64_t, uint64_t))v86)(v103, v29);
}

void type metadata accessor for CollectionOfOne<URL>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for URL();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>()
{
  if (!lazy cache variable for type metadata for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>)
  {
    type metadata accessor for CollectionOfOne<URL>(255, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
    lazy protocol witness table accessor for type CollectionOfOne<URL> and conformance CollectionOfOne<A>();
    lazy protocol witness table accessor for type DefaultShareLinkLabel and conformance DefaultShareLinkLabel();
    _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_0(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    unint64_t v0 = type metadata accessor for ShareLink();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
    }
  }
}

uint64_t sub_188037628@<X0>(uint64_t a1@<X8>)
{
  EnvironmentValues.presentSharingPicker.getter((uint64_t)v3);
  return _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0((uint64_t)v3, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_(uint64_t result)
{
  *(unsigned char *)(result + 144) = 0;
  return result;
}

void type metadata accessor for Environment<PresentSharingPickerAction?>.Content()
{
  if (!lazy cache variable for type metadata for Environment<PresentSharingPickerAction?>.Content)
  {
    type metadata accessor for CollectionOfOne<String>(255, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Environment<PresentSharingPickerAction?>.Content);
    }
  }
}

uint64_t outlined init with copy of CollectionOfOne<URL>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CollectionOfOne<URL>.Iterator(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for CollectionOfOne<URL>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of CollectionOfOne<URL>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  type metadata accessor for CollectionOfOne<URL>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with take of Environment<PresentSharingPickerAction?>.Content(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of SharePreview<Never, Never>(uint64_t a1)
{
  type metadata accessor for SharePreview<Never, Never>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ShareLink<>.init<>(item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v19 = static Text.System.shareEllipses.getter();
  uint64_t v27 = v20;
  uint64_t v28 = v19;
  char v26 = v21;
  uint64_t v29 = v22;
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a3, a4, a5, a6);
  outlined consume of Text?(0, 0, 0, 0);
  outlined copy of Text?(a7, a8, a10, a11);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a6)
  {
    v30[0] = 0;
    outlined copy of Text.Storage(v28, v27, v26 & 1);
    swift_bridgeObjectRetain();
    char v31 = a5 & 1;
    Text.assertUnstyled(_:options:)();
    outlined consume of Text?(a7, a8, a10, a11);
    outlined consume of Text?(a3, a4, a5, a6);
    outlined consume of Text.Storage(v28, v27, v26 & 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Text?(a7, a8, a10, a11);
  }
  swift_bridgeObjectRelease();
  v30[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v30);
  uint64_t result = outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v30, a9 + 152, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = a1;
  *(void *)(a9 + 16) = a2;
  *(void *)(a9 + 24) = a3;
  *(void *)(a9 + 32) = a4;
  *(void *)(a9 + 40) = a5;
  *(void *)(a9 + 48) = a6;
  *(void *)(a9 + 56) = a7;
  *(void *)(a9 + 64) = a8;
  *(void *)(a9 + 72) = a10;
  *(void *)(a9 + 80) = a11;
  *(void *)(a9 + 88) = 0;
  *(void *)(a9 + 96) = 0;
  *(void *)(a9 + 104) = v28;
  *(void *)(a9 + 112) = v27;
  *(unsigned char *)(a9 + 120) = v26 & 1;
  *(void *)(a9 + 136) = 0;
  *(void *)(a9 + 144) = 0;
  *(void *)(a9 + 128) = v29;
  *(unsigned char *)(a9 + 304) = 0;
  *(void *)(a9 + 312) = 0;
  return result;
}

uint64_t ShareLink<>.init<>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(void, void, void)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v32 = a7;
  double v33 = a8;
  uint64_t v30 = a10;
  uint64_t v31 = a6;
  uint64_t v28 = a12;
  uint64_t v29 = a11;
  uint64_t v27 = a13;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  double v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v24, a5, v20, v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ShareLink<>.init<>(item:subject:message:label:)((uint64_t)v24, v31, v32, v33, v30, v29, v28, v27, a9, a14, a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a5, v20);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

double ShareLink<>.init<>(_:item:subject:message:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v15;
  char v30 = v16;
  uint64_t v29 = v17;
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a3, a4, a6, a7);
  outlined consume of Text?(0, 0, 0, 0);
  outlined copy of Text?(a8, a9, a10, a11);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a7)
  {
    *(void *)&v35[0] = 0;
    char v18 = v30;
    uint64_t v19 = v31;
    outlined copy of Text.Storage(v14, v31, v30 & 1);
    uint64_t v20 = v29;
    swift_bridgeObjectRetain();
    LOBYTE(v34[0]) = a6 & 1;
    Text.assertUnstyled(_:options:)();
    outlined consume of Text?(a8, a9, a10, a11);
    outlined consume of Text?(a3, a4, a6, a7);
    outlined consume of Text.Storage(v14, v31, v30 & 1);
    swift_bridgeObjectRelease();
    uint64_t v21 = v14;
  }
  else
  {
    outlined consume of Text?(a8, a9, a10, a11);
    uint64_t v20 = v29;
    uint64_t v21 = v14;
    uint64_t v19 = v31;
    char v18 = v30;
  }
  swift_bridgeObjectRelease();
  v34[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v34);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v34, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v22 = v35[6];
  long long v23 = v35[8];
  *(_OWORD *)(a5 + 264) = v35[7];
  *(_OWORD *)(a5 + 280) = v23;
  *(_OWORD *)(a5 + 248) = v22;
  long long v24 = v35[3];
  *(_OWORD *)(a5 + 184) = v35[2];
  *(_OWORD *)(a5 + 200) = v24;
  long long v25 = v35[5];
  *(_OWORD *)(a5 + 216) = v35[4];
  *(_OWORD *)(a5 + 232) = v25;
  double result = *(double *)v35;
  long long v27 = v35[1];
  *(_OWORD *)(a5 + 152) = v35[0];
  char v37 = v18 & 1;
  *(unsigned char *)(a5 + 296) = v36;
  *(_OWORD *)(a5 + 168) = v27;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = a1;
  *(void *)(a5 + 16) = a2;
  *(void *)(a5 + 24) = a3;
  *(void *)(a5 + 32) = a4;
  *(void *)(a5 + 40) = a6;
  *(void *)(a5 + 48) = a7;
  *(void *)(a5 + 56) = a8;
  *(void *)(a5 + 64) = a9;
  *(void *)(a5 + 72) = a10;
  *(void *)(a5 + 80) = a11;
  *(void *)(a5 + 88) = 0;
  *(void *)(a5 + 96) = 0;
  *(void *)(a5 + 104) = v21;
  *(void *)(a5 + 112) = v19;
  *(unsigned char *)(a5 + 120) = v37;
  *(void *)(a5 + 136) = 0;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 128) = v20;
  *(unsigned char *)(a5 + 304) = 0;
  *(void *)(a5 + 312) = 0;
  return result;
}

uint64_t ShareLink<>.init<A>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v23 = a10;
  long long v24 = a4;
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a2, v17, v19);
  uint64_t v29 = a12;
  uint64_t v30 = a13;
  uint64_t v31 = a1;
  specialized ShareLink<>.init<>(item:subject:message:label:)((uint64_t)v21, a3, v24, v25, v26, v27, v28, v23, a9, a11, (void (*)(void *__return_ptr, uint64_t))partial apply for closure #1 in ShareLink<>.init<A>(_:item:subject:message:));
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a2, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a12 - 8) + 8))(a1, a12);
}

uint64_t partial apply for closure #1 in ShareLink<>.init<A>(_:item:subject:message:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ShareLink<>.init<A>(_:item:subject:message:)(*(void *)(v1 + 32), a1);
}

uint64_t ShareLink<>.init<A>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  closure #1 in ShareLink<>.init<A>(_:item:subject:message:)(a1, (uint64_t)v44);
  uint64_t v37 = v44[1];
  uint64_t v38 = v44[0];
  char v36 = v45;
  uint64_t v33 = v46;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v20 = a6;
  uint64_t v21 = a5;
  uint64_t v22 = a4;
  uint64_t v23 = a7;
  swift_bridgeObjectRetain();
  outlined copy of Text?(v22, v21, v20, a7);
  outlined consume of Text?(0, 0, 0, 0);
  uint64_t v39 = a8;
  outlined copy of Text?(a8, a10, a11, a12);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a7)
  {
    *(void *)&v41[0] = 0;
    outlined copy of Text.Storage(v38, v37, v36);
    uint64_t v24 = v33;
    swift_bridgeObjectRetain();
    LOBYTE(v40[0]) = v20 & 1;
    Text.assertUnstyled(_:options:)();
    outlined consume of Text?(a8, a10, a11, a12);
    outlined consume of Text?(v22, v21, v20, v23);
    outlined consume of Text.Storage(v38, v37, v36);
    uint64_t v25 = a3;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of Text?(a8, a10, a11, a12);
    uint64_t v25 = a3;
    swift_bridgeObjectRelease();
    uint64_t v24 = v33;
  }
  v40[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v40);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v40, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  long long v26 = v41[7];
  *(_OWORD *)(a9 + 248) = v41[6];
  long long v27 = v41[8];
  *(_OWORD *)(a9 + 264) = v26;
  *(_OWORD *)(a9 + 280) = v27;
  long long v28 = v41[3];
  *(_OWORD *)(a9 + 184) = v41[2];
  *(_OWORD *)(a9 + 200) = v28;
  long long v29 = v41[5];
  *(_OWORD *)(a9 + 216) = v41[4];
  *(_OWORD *)(a9 + 232) = v29;
  long long v30 = v41[1];
  *(_OWORD *)(a9 + 152) = v41[0];
  char v43 = v36;
  *(unsigned char *)(a9 + 296) = v42;
  *(_OWORD *)(a9 + 168) = v30;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a13 - 8) + 8))(a1);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = v25;
  *(void *)(a9 + 24) = v22;
  *(void *)(a9 + 32) = v21;
  *(void *)(a9 + 40) = v20;
  *(void *)(a9 + 48) = v23;
  *(void *)(a9 + 56) = v39;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a11;
  *(void *)(a9 + 80) = a12;
  *(void *)(a9 + 88) = 0;
  *(void *)(a9 + 96) = 0;
  *(void *)(a9 + 104) = v38;
  *(void *)(a9 + 112) = v37;
  *(unsigned char *)(a9 + 120) = v43;
  *(void *)(a9 + 136) = 0;
  *(void *)(a9 + 144) = 0;
  *(void *)(a9 + 128) = v24;
  *(unsigned char *)(a9 + 304) = 0;
  *(void *)(a9 + 312) = 0;
  return result;
}

uint64_t closure #1 in ShareLink<>.init<A>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t ShareLink<>.init<>(_:item:subject:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void, void, void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v29 = a10;
  long long v30 = a6;
  uint64_t v27 = a12;
  uint64_t v28 = a11;
  uint64_t v26 = a13;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v21 = *(void *)(v20 - 8);
  double v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v24, a5, v20, v22);
  a3 &= 1u;
  outlined copy of Text.Storage(a1, a2, a3);
  swift_bridgeObjectRetain();
  specialized ShareLink<>.init<>(item:subject:message:label:)((uint64_t)v24, v30, v31, v32, v29, v28, v27, v26, a9, a14, a1, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a5, v20);
  outlined consume of Text.Storage(a1, a2, a3);
  return swift_bridgeObjectRelease();
}

double ShareLink<>.init<>(_:item:subject:message:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t KeyPath = swift_getKeyPath();
  swift_bridgeObjectRetain();
  uint64_t v38 = a6;
  swift_bridgeObjectRetain();
  char v36 = a3;
  char v22 = a3 & 1;
  uint64_t v35 = a1;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  outlined copy of Text?(a7, a8, a10, a11);
  outlined consume of Text?(0, 0, 0, 0);
  outlined copy of Text?(a12, a13, a14, a15);
  outlined consume of Text?(0, 0, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(0, 0);
  if (a11)
  {
    *(void *)&v40[0] = 0;
    uint64_t v23 = a1;
    outlined copy of Text.Storage(a1, a2, a3 & 1);
    uint64_t v24 = a4;
    swift_bridgeObjectRetain();
    LOBYTE(v39[0]) = a10 & 1;
    uint64_t v25 = a10;
    Text.assertUnstyled(_:options:)();
    uint64_t v26 = a14;
    outlined consume of Text?(a12, a13, a14, a15);
    outlined consume of Text?(a7, a8, a10, a11);
    outlined consume of Text.Storage(v35, a2, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = a14;
    outlined consume of Text?(a12, a13, a14, a15);
    uint64_t v24 = a4;
    uint64_t v23 = v35;
    uint64_t v25 = a10;
  }
  swift_bridgeObjectRelease();
  v39[0] = KeyPath;
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v39);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v39, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  outlined consume of Text.Storage(v23, a2, v36 & 1);
  swift_bridgeObjectRelease();
  long long v27 = v40[6];
  long long v28 = v40[8];
  *(_OWORD *)(a9 + 264) = v40[7];
  *(_OWORD *)(a9 + 280) = v28;
  *(_OWORD *)(a9 + 248) = v27;
  long long v29 = v40[3];
  *(_OWORD *)(a9 + 184) = v40[2];
  *(_OWORD *)(a9 + 200) = v29;
  long long v30 = v40[5];
  *(_OWORD *)(a9 + 216) = v40[4];
  *(_OWORD *)(a9 + 232) = v30;
  double result = *(double *)v40;
  long long v32 = v40[1];
  *(_OWORD *)(a9 + 152) = v40[0];
  char v42 = v36 & 1;
  *(unsigned char *)(a9 + 296) = v41;
  *(_OWORD *)(a9 + 168) = v32;
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = a5;
  *(void *)(a9 + 16) = v38;
  *(void *)(a9 + 24) = a7;
  *(void *)(a9 + 32) = a8;
  *(void *)(a9 + 40) = v25;
  *(void *)(a9 + 48) = a11;
  *(void *)(a9 + 56) = a12;
  *(void *)(a9 + 64) = a13;
  *(void *)(a9 + 72) = v26;
  *(void *)(a9 + 80) = a15;
  *(void *)(a9 + 88) = 0;
  *(void *)(a9 + 96) = 0;
  *(void *)(a9 + 104) = v23;
  *(void *)(a9 + 112) = a2;
  *(unsigned char *)(a9 + 120) = v42;
  *(void *)(a9 + 136) = 0;
  *(void *)(a9 + 144) = 0;
  *(void *)(a9 + 128) = v24;
  *(unsigned char *)(a9 + 304) = 0;
  *(void *)(a9 + 312) = 0;
  return result;
}

uint64_t ShareLink<>.init<>(item:subject:message:onPresentationChanged:)@<X0>(char *a1@<X0>, void (*a2)(void, void, void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void (**v89)(void *__return_ptr, char *);
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  void *v93;
  uint64_t result;
  uint64_t v95;
  void (**v96)(char *, uint64_t);
  uint64_t v97;
  void (*v98)(void, void, void);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  void *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t (*v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v134;
  void (*v135)(void, void, void);
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  void v140[4];
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  void v145[19];
  _OWORD v146[9];
  char v147;

  int v123 = a7;
  uint64_t v124 = a8;
  char v122 = a6;
  double v125 = a5;
  unint64_t v127 = a4;
  uint64_t v135 = a2;
  uint64_t v136 = a3;
  uint64_t v115 = a9;
  unint64_t v121 = a10;
  type metadata accessor for CollectionOfOne<URL>(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v130 = (uint64_t)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v134 = (char *)&v106 - v16;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v133 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v19);
  uint64_t v137 = (uint64_t)&v106 - v20;
  type metadata accessor for CollectionOfOne<URL>(0, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v132 = (uint64_t)&v106 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v106 - v24;
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v108 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v106 - v30;
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)&v106 - v33;
  type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>();
  char v36 = v35;
  MEMORY[0x1F4188790](v35);
  uint64_t v38 = (uint64_t *)((char *)&v106 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v40 = MEMORY[0x1F4188790](v39);
  uint64_t v110 = (uint64_t)&v106 - v41;
  uint64_t v126 = v27;
  char v42 = *(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16);
  uint64_t v114 = a1;
  v42(v34, (uint64_t)a1, v26, v40);
  uint64_t v111 = v34;
  ((void (*)(char *, char *, uint64_t))v42)(v31, v34, v26);
  int v112 = v31;
  ((void (*)(char *, char *, uint64_t))v42)(v25, v31, v26);
  uint64_t v43 = static Text.System.shareEllipses.getter();
  uint64_t v117 = v44;
  uint64_t v118 = v43;
  uint64_t v116 = v45;
  uint64_t v119 = v46;
  *uint64_t v38 = 0;
  uint64_t v47 = v36;
  long long v48 = (char *)v38 + v36[24];
  *(_OWORD *)long long v48 = 0u;
  *((_OWORD *)v48 + 1) = 0u;
  long long v49 = (char *)v38 + v36[25];
  *(_OWORD *)long long v49 = 0u;
  *((_OWORD *)v49 + 1) = 0u;
  long long v50 = (void *)((char *)v38 + v36[26]);
  *long long v50 = 0;
  v50[1] = 0;
  long long v51 = (void *)((char *)v38 + v47[28]);
  *long long v51 = 0;
  v51[1] = 0;
  uint64_t v52 = v47;
  uint64_t v53 = (char *)v38 + v47[29];
  v145[0] = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOi_((uint64_t)v145);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v145, (uint64_t)v146, (uint64_t (*)(void))type metadata accessor for Environment<PresentSharingPickerAction?>.Content);
  long long v54 = v146[7];
  *((_OWORD *)v53 + 6) = v146[6];
  *((_OWORD *)v53 + 7) = v54;
  *((_OWORD *)v53 + 8) = v146[8];
  v53[144] = v147;
  long long v55 = v146[3];
  *((_OWORD *)v53 + 2) = v146[2];
  *((_OWORD *)v53 + 3) = v55;
  long long v56 = v146[5];
  *((_OWORD *)v53 + 4) = v146[4];
  *((_OWORD *)v53 + 5) = v56;
  long long v57 = v146[1];
  *(_OWORD *)uint64_t v53 = v146[0];
  *((_OWORD *)v53 + 1) = v57;
  uint64_t v120 = v52;
  uint64_t v58 = (char *)v38 + v52[30];
  *uint64_t v58 = 0;
  *((void *)v58 + 1) = 0;
  uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v38 + v52[23]);
  uint64_t v113 = v25;
  uint64_t v131 = v59;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v25, (uint64_t)v59);
  uint64_t v60 = *(void *)v48;
  uint64_t v128 = *((void *)v48 + 1);
  char v129 = (void *)v60;
  uint64_t v109 = (void *)*((void *)v48 + 2);
  uint64_t v107 = *((void *)v48 + 3);
  uint64_t v62 = v135;
  uint64_t v61 = v136;
  uint64_t v63 = v127;
  uint64_t v64 = v125;
  outlined copy of Text?((uint64_t)v135, v136, v127, v125);
  outlined consume of Text?((uint64_t)v129, v128, (char)v109, v107);
  *(void *)long long v48 = v62;
  *((void *)v48 + 1) = v61;
  *((void *)v48 + 2) = v63;
  *((void *)v48 + 3) = v64;
  uint64_t v65 = v64;
  uint64_t v66 = *(void *)v49;
  uint64_t v128 = *((void *)v49 + 1);
  char v129 = (void *)v66;
  uint64_t v109 = (void *)*((void *)v49 + 2);
  uint64_t v107 = *((void *)v49 + 3);
  uint64_t v68 = v122;
  uint64_t v67 = v123;
  uint64_t v69 = v124;
  uint64_t v70 = v121;
  outlined copy of Text?(v122, v123, v124, v121);
  outlined consume of Text?((uint64_t)v129, v128, (char)v109, v107);
  *(void *)long long v49 = v68;
  *((void *)v49 + 1) = v67;
  *((void *)v49 + 2) = v69;
  *((void *)v49 + 3) = v70;
  uint64_t v71 = v119;
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v50, v50[1]);
  uint64_t v73 = v117;
  uint64_t v72 = v118;
  *long long v50 = 0;
  v50[1] = 0;
  char v129 = v50;
  uint64_t v74 = v120[27];
  uint64_t v109 = v38;
  uint64_t v75 = (char *)v38 + v74;
  *(void *)uint64_t v75 = v72;
  *((void *)v75 + 1) = v73;
  char v76 = v116 & 1;
  v75[16] = v116 & 1;
  *((void *)v75 + 3) = v71;
  if (v65)
  {
    v140[0] = 0;
    outlined copy of Text.Storage(v72, v73, v76);
    swift_bridgeObjectRetain();
    LOBYTE(v139) = v127 & 1;
    uint64_t v78 = v135;
    uint64_t v77 = v136;
    Text.assertUnstyled(_:options:)();
  }
  else
  {
    outlined copy of Text.Storage(v72, v73, v76);
    swift_bridgeObjectRetain();
    uint64_t v78 = v135;
    uint64_t v77 = v136;
  }
  uint64_t v107 = a12;
  uint64_t v106 = a11;
  uint64_t v79 = v132;
  outlined init with copy of CollectionOfOne<URL>((uint64_t)v131, v132);
  uint64_t v80 = v126;
  uint64_t v81 = (uint64_t)v134;
  uint64_t v135 = *(void (**)(void, void, void))(v126 + 32);
  uint64_t v136 = v126 + 32;
  v135(v134, v79, v26);
  uint64_t v82 = *(char **)(v80 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v82)(v81, 0, 1, v26);
  uint64_t v83 = (uint64_t)v133;
  ((void (*)(void, uint64_t, uint64_t, uint64_t))v82)(v133, 1, 1, v26);
  outlined assign with take of URL?(v81, v83);
  uint64_t v84 = v83;
  uint64_t v85 = v137;
  outlined init with take of CollectionOfOne<URL>.Iterator(v84, v137, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  uint64_t v86 = v130;
  outlined init with take of CollectionOfOne<URL>.Iterator(v85, v130, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
  uint64_t v133 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v82;
  char v134 = (char *)(v80 + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v82)(v85, 1, 1, v26);
  uint64_t v131 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  uint64_t v132 = v80 + 48;
  int v87 = v131(v86, 1, v26);
  uint64_t v88 = v108;
  uint64_t v89 = (void (**)(void *__return_ptr, char *))v129;
  if (v87 != 1)
  {
    uint64_t v96 = (void (**)(char *, uint64_t))(v126 + 8);
    uint64_t v128 = 0x800000018833EC60;
    do
    {
      v135(v88, v86, v26);
      if (*v89)
      {
        char v98 = v78;
        uint64_t v99 = v77;
        (*v89)(v140, v88);
        uint64_t v101 = v141;
        uint64_t v100 = v142;
        int v102 = v88;
        uint64_t v104 = v143;
        long long v103 = v144;
        outlined copy of Text?(v141, v142, v143, v144);
        outlined destroy of SharePreview<Never, Never>((uint64_t)v140);
        if (v103)
        {
          uint64_t v105 = v104 & 1;
          unint64_t v139 = 0;
          char v138 = v105;
          Text.assertUnstyled(_:options:)();
          outlined consume of Text.Storage(v101, v100, v105);
          swift_bridgeObjectRelease();
        }
        (*v96)(v102, v26);
        uint64_t v77 = v99;
        uint64_t v78 = v98;
        uint64_t v88 = v102;
        uint64_t v89 = (void (**)(void *__return_ptr, char *))v129;
        uint64_t v86 = v130;
      }
      else
      {
        (*v96)(v88, v26);
      }
      char v97 = v137;
      outlined init with take of CollectionOfOne<URL>.Iterator(v137, v86, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4FBB718]);
      v133(v97, 1, 1, v26);
    }
    while (v131(v86, 1, v26) != 1);
  }
  outlined destroy of CollectionOfOne<URL>.Iterator(v137, &lazy cache variable for type metadata for CollectionOfOne<URL>.Iterator, MEMORY[0x1E4FBBAF8]);
  outlined consume of Text?(v122, v123, v124, v121);
  outlined consume of Text?((uint64_t)v78, v77, v127, v125);
  outlined consume of Text.Storage(v118, v117, v116 & 1);
  swift_bridgeObjectRelease();
  outlined destroy of CollectionOfOne<URL>.Iterator((uint64_t)v113, &lazy cache variable for type metadata for CollectionOfOne<URL>, MEMORY[0x1E4FBBB08]);
  uint64_t v90 = v110;
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v109, v110, (uint64_t (*)(void))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  uint64_t v91 = *(void (**)(char *, uint64_t))(v126 + 8);
  v91(v112, v26);
  v91(v111, v26);
  v91(v114, v26);
  uint64_t v92 = v115;
  outlined init with take of Environment<PresentSharingPickerAction?>.Content(v90, v115, (uint64_t (*)(void))type metadata accessor for ShareLink<CollectionOfOne<URL>, Never, Never, DefaultShareLinkLabel>);
  uint64_t v93 = (void *)(v92 + v120[28]);
  double result = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*v93, v93[1]);
  uint64_t v95 = v107;
  *uint64_t v93 = v106;
  v93[1] = v95;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ShareLink<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in DefaultShareLinkLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata instantiation function for ShareLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 112);
}

uint64_t type metadata completion function for ShareLink()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ShareLink(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  BOOL v10 = (v8 | v5) <= 7 && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0;
  if (v10
    && (uint64_t v11 = v6 + 7,
        uint64_t v12 = v8 + 16,
        uint64_t v13 = v9 + 7,
        ((((v9
          + 7
          + ((v8
            + 16
            + ((((((v6 + 7 + ((v5 + 8) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8)
        + 175) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    uint64_t v63 = *(void *)(a3 + 40);
    *a1 = *a2;
    uint64_t v14 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v15 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v14, v15);
    unint64_t v16 = (v11 + v14) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v11 + v15) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v17 + 24) < 0xFFFFFFFFuLL)
    {
      long long v23 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v23;
    }
    else
    {
      uint64_t v18 = *(void *)v17;
      uint64_t v19 = *(void *)(v17 + 8);
      char v20 = *(unsigned char *)(v17 + 16);
      outlined copy of Text.Storage(*(void *)v17, v19, v20);
      *(void *)unint64_t v16 = v18;
      *(void *)(v16 + 8) = v19;
      *(unsigned char *)(v16 + 16) = v20;
      *(void *)(v16 + 24) = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
    }
    unint64_t v24 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v25 + 24) < 0xFFFFFFFFuLL)
    {
      long long v29 = *(_OWORD *)(v25 + 16);
      *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
      *(_OWORD *)(v24 + 16) = v29;
    }
    else
    {
      uint64_t v26 = *(void *)v25;
      uint64_t v27 = *(void *)(v25 + 8);
      char v28 = *(unsigned char *)(v25 + 16);
      outlined copy of Text.Storage(*(void *)v25, v27, v28);
      *(void *)unint64_t v24 = v26;
      *(void *)(v24 + 8) = v27;
      *(unsigned char *)(v24 + 16) = v28;
      *(void *)(v24 + 24) = *(void *)(v25 + 24);
      swift_bridgeObjectRetain();
    }
    uint64_t v30 = ~v8;
    unint64_t v31 = (v24 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v32 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
    }
    else
    {
      uint64_t v33 = *(void *)(v32 + 8);
      *(void *)unint64_t v31 = *(void *)v32;
      *(void *)(v31 + 8) = v33;
      swift_retain();
    }
    unint64_t v34 = (v12 + v32) & v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))((v12 + v31) & v30, v34, v63);
    unint64_t v35 = (v13 + ((v12 + v31) & v30)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v36 = (v13 + v34) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v36 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v35 = *(_OWORD *)v36;
    }
    else
    {
      uint64_t v37 = *(void *)(v36 + 8);
      *(void *)unint64_t v35 = *(void *)v36;
      *(void *)(v35 + 8) = v37;
      swift_retain();
    }
    unint64_t v38 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v62 = v35;
    unint64_t v64 = (v13 + v34) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v39 = *(void *)v38;
    uint64_t v40 = *(void *)(v38 + 8);
    unint64_t v41 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = *(void *)(v38 + 16);
    uint64_t v43 = *(void *)(v38 + 24);
    uint64_t v44 = *(void *)(v38 + 32);
    uint64_t v45 = *(void *)(v38 + 40);
    uint64_t v46 = *(void *)(v38 + 48);
    uint64_t v47 = *(void *)(v38 + 56);
    uint64_t v48 = *(void *)(v38 + 64);
    uint64_t v52 = *(void *)(v38 + 72);
    uint64_t v53 = *(void *)(v38 + 80);
    uint64_t v54 = *(void *)(v38 + 88);
    uint64_t v55 = *(void *)(v38 + 96);
    uint64_t v56 = *(void *)(v38 + 104);
    uint64_t v57 = *(void *)(v38 + 112);
    uint64_t v58 = *(void *)(v38 + 120);
    uint64_t v59 = *(void *)(v38 + 128);
    uint64_t v60 = *(void *)(v38 + 136);
    char v61 = *(unsigned char *)(v38 + 144);
    outlined copy of Environment<PresentSharingPickerAction?>.Content(*(void *)v38, v40, v42, v43, v44, v45, v46, v47, v48, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61);
    *(void *)unint64_t v41 = v39;
    *(void *)(v41 + 8) = v40;
    *(void *)(v41 + 16) = v42;
    *(void *)(v41 + 24) = v43;
    *(void *)(v41 + 32) = v44;
    *(void *)(v41 + 40) = v45;
    *(void *)(v41 + 48) = v46;
    *(void *)(v41 + 56) = v47;
    *(void *)(v41 + 64) = v48;
    *(void *)(v41 + 72) = v52;
    *(void *)(v41 + 80) = v53;
    *(void *)(v41 + 88) = v54;
    *(void *)(v41 + 96) = v55;
    *(void *)(v41 + 104) = v56;
    *(void *)(v41 + 112) = v57;
    *(void *)(v41 + 120) = v58;
    *(void *)(v41 + 128) = v59;
    *(void *)(v41 + 136) = v60;
    *(unsigned char *)(v41 + 144) = v61;
    unint64_t v49 = (v62 + 175) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v50 = (v64 + 175) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v49 = *(unsigned char *)v50;
    *(void *)(v49 + 8) = *(void *)(v50 + 8);
    uint64_t v22 = a1;
  }
  else
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    uint64_t v22 = (void *)(v21 + (((v8 | v5) & 0xF8 ^ 0x1F8) & ((v8 | v5) + 16)));
  }
  swift_retain();
  return v22;
}

uint64_t destroy for ShareLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v5);
  unint64_t v6 = (*(void *)(v4 + 56) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  unint64_t v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (void *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  if (*v8 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  uint64_t v9 = *(void *)(*(void *)(a2 + 40) - 8);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = ((unint64_t)v8 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t))(v9 + 8))(v11);
  uint64_t v12 = (void *)((*(void *)(v10 + 56) + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v12 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  unint64_t v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<PresentSharingPickerAction?>.Content(*(void *)v13, *(void *)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24), *(void *)(v13 + 32), *(void *)(v13 + 40), *(void *)(v13 + 48), *(void *)(v13 + 56), *(void *)(v13 + 64), *(void *)(v13 + 72), *(void *)(v13 + 80), *(void *)(v13 + 88), *(void *)(v13 + 96), *(void *)(v13 + 104), *(void *)(v13 + 112), *(void *)(v13 + 120), *(void *)(v13 + 128), *(void *)(v13 + 136), *(unsigned char *)(v13 + 144));

  return swift_release();
}

void *initializeWithCopy for ShareLink(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v11 + 24) < 0xFFFFFFFFuLL)
  {
    long long v15 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v15;
  }
  else
  {
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    char v14 = *(unsigned char *)(v11 + 16);
    outlined copy of Text.Storage(*(void *)v11, v13, v14);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(unsigned char *)(v10 + 16) = v14;
    *(void *)(v10 + 24) = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
  }
  unint64_t v16 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v17 + 24) < 0xFFFFFFFFuLL)
  {
    long long v21 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v21;
  }
  else
  {
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    outlined copy of Text.Storage(*(void *)v17, v19, v20);
    *(void *)unint64_t v16 = v18;
    *(void *)(v16 + 8) = v19;
    *(unsigned char *)(v16 + 16) = v20;
    *(void *)(v16 + 24) = *(void *)(v17 + 24);
    swift_bridgeObjectRetain();
  }
  unint64_t v22 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v23 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  }
  else
  {
    uint64_t v24 = *(void *)(v23 + 8);
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = v24;
    swift_retain();
  }
  uint64_t v25 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v26 = v25 + 16;
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = (v22 + v27 + 16) & ~v27;
  uint64_t v29 = (v23 + v27 + 16) & ~v27;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  uint64_t v30 = *(void *)(v26 + 48) + 7;
  unint64_t v31 = (v30 + v28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v30 + v29) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v32 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
  }
  else
  {
    uint64_t v33 = *(void *)(v32 + 8);
    *(void *)unint64_t v31 = *(void *)v32;
    *(void *)(v31 + 8) = v33;
    swift_retain();
  }
  unint64_t v34 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = v31;
  unint64_t v59 = v32;
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *(void *)(v34 + 8);
  unint64_t v37 = (v31 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = *(void *)(v34 + 16);
  uint64_t v39 = *(void *)(v34 + 24);
  uint64_t v40 = *(void *)(v34 + 32);
  uint64_t v41 = *(void *)(v34 + 40);
  uint64_t v42 = *(void *)(v34 + 48);
  uint64_t v43 = *(void *)(v34 + 56);
  uint64_t v44 = *(void *)(v34 + 64);
  uint64_t v48 = *(void *)(v34 + 72);
  uint64_t v49 = *(void *)(v34 + 80);
  uint64_t v50 = *(void *)(v34 + 88);
  uint64_t v51 = *(void *)(v34 + 96);
  uint64_t v52 = *(void *)(v34 + 104);
  uint64_t v53 = *(void *)(v34 + 112);
  uint64_t v54 = *(void *)(v34 + 120);
  uint64_t v55 = *(void *)(v34 + 128);
  uint64_t v56 = *(void *)(v34 + 136);
  char v57 = *(unsigned char *)(v34 + 144);
  outlined copy of Environment<PresentSharingPickerAction?>.Content(*(void *)v34, v36, v38, v39, v40, v41, v42, v43, v44, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57);
  *(void *)unint64_t v37 = v35;
  *(void *)(v37 + 8) = v36;
  *(void *)(v37 + 16) = v38;
  *(void *)(v37 + 24) = v39;
  *(void *)(v37 + 32) = v40;
  *(void *)(v37 + 40) = v41;
  *(void *)(v37 + 48) = v42;
  *(void *)(v37 + 56) = v43;
  *(void *)(v37 + 64) = v44;
  *(void *)(v37 + 72) = v48;
  *(void *)(v37 + 80) = v49;
  *(void *)(v37 + 88) = v50;
  *(void *)(v37 + 96) = v51;
  *(void *)(v37 + 104) = v52;
  *(void *)(v37 + 112) = v53;
  *(void *)(v37 + 120) = v54;
  *(void *)(v37 + 128) = v55;
  *(void *)(v37 + 136) = v56;
  *(unsigned char *)(v37 + 144) = v57;
  unint64_t v45 = (v58 + 175) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (v59 + 175) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v45 = *(unsigned char *)v46;
  *(void *)(v45 + 8) = *(void *)(v46 + 8);
  swift_retain();
  return a1;
}

void *assignWithCopy for ShareLink(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = *(void *)(v11 + 24);
  if (*(void *)(v10 + 24) < 0xFFFFFFFFuLL)
  {
    if (v12 >= 0xFFFFFFFF)
    {
      uint64_t v19 = *(void *)v11;
      uint64_t v20 = *(void *)(v11 + 8);
      char v21 = *(unsigned char *)(v11 + 16);
      outlined copy of Text.Storage(*(void *)v11, v20, v21);
      *(void *)unint64_t v10 = v19;
      *(void *)(v10 + 8) = v20;
      *(unsigned char *)(v10 + 16) = v21;
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v12 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)v11;
      uint64_t v14 = *(void *)(v11 + 8);
      char v15 = *(unsigned char *)(v11 + 16);
      outlined copy of Text.Storage(*(void *)v11, v14, v15);
      uint64_t v16 = *(void *)v10;
      uint64_t v17 = *(void *)(v10 + 8);
      char v18 = *(unsigned char *)(v10 + 16);
      *(void *)unint64_t v10 = v13;
      *(void *)(v10 + 8) = v14;
      *(unsigned char *)(v10 + 16) = v15;
      outlined consume of Text.Storage(v16, v17, v18);
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  long long v22 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v22;
LABEL_8:
  unint64_t v23 = (v10 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = *(void *)(v24 + 24);
  if (*(void *)(v23 + 24) < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      uint64_t v32 = *(void *)v24;
      uint64_t v33 = *(void *)(v24 + 8);
      char v34 = *(unsigned char *)(v24 + 16);
      outlined copy of Text.Storage(*(void *)v24, v33, v34);
      *(void *)unint64_t v23 = v32;
      *(void *)(v23 + 8) = v33;
      *(unsigned char *)(v23 + 16) = v34;
      *(void *)(v23 + 24) = *(void *)(v24 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v25 >= 0xFFFFFFFF)
    {
      uint64_t v26 = *(void *)v24;
      uint64_t v27 = *(void *)(v24 + 8);
      char v28 = *(unsigned char *)(v24 + 16);
      outlined copy of Text.Storage(*(void *)v24, v27, v28);
      uint64_t v29 = *(void *)v23;
      uint64_t v30 = *(void *)(v23 + 8);
      char v31 = *(unsigned char *)(v23 + 16);
      *(void *)unint64_t v23 = v26;
      *(void *)(v23 + 8) = v27;
      *(unsigned char *)(v23 + 16) = v28;
      outlined consume of Text.Storage(v29, v30, v31);
      *(void *)(v23 + 24) = *(void *)(v24 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined consume of Text.Storage(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
    swift_bridgeObjectRelease();
  }
  long long v35 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v35;
LABEL_15:
  uint64_t v36 = (void *)((v23 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = (unint64_t *)((v24 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v38 = *v37;
  if (*v36 < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      unint64_t v40 = v37[1];
      *uint64_t v36 = v38;
      v36[1] = v40;
      swift_retain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v38 >= 0xFFFFFFFF)
    {
      unint64_t v39 = v37[1];
      *uint64_t v36 = v38;
      v36[1] = v39;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
LABEL_22:
  uint64_t v41 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v42 = v41 + 24;
  uint64_t v43 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v44 = ((unint64_t)v36 + v43 + 16) & ~v43;
  uint64_t v45 = ((unint64_t)v37 + v43 + 16) & ~v43;
  (*(void (**)(uint64_t, uint64_t))(v41 + 24))(v44, v45);
  uint64_t v46 = *(void *)(v42 + 40) + 7;
  uint64_t v47 = (void *)((v46 + v44) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v48 = (unint64_t *)((v46 + v45) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v49 = *v48;
  if (*v47 < 0xFFFFFFFFuLL)
  {
    if (v49 >= 0xFFFFFFFF)
    {
      unint64_t v51 = v48[1];
      *uint64_t v47 = v49;
      v47[1] = v51;
      swift_retain();
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
    goto LABEL_29;
  }
  if (v49 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  unint64_t v50 = v48[1];
  *uint64_t v47 = v49;
  v47[1] = v50;
  swift_retain();
  swift_release();
LABEL_29:
  unint64_t v52 = ((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v91 = v47;
  uint64_t v92 = v48;
  uint64_t v53 = *(void *)v52;
  uint64_t v54 = *(void *)(v52 + 8);
  unint64_t v55 = ((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v56 = *(void *)(v52 + 16);
  uint64_t v57 = *(void *)(v52 + 24);
  uint64_t v58 = *(void *)(v52 + 32);
  uint64_t v59 = *(void *)(v52 + 40);
  uint64_t v60 = *(void *)(v52 + 48);
  uint64_t v61 = *(void *)(v52 + 56);
  uint64_t v62 = *(void *)(v52 + 64);
  uint64_t v81 = *(void *)(v52 + 72);
  uint64_t v82 = *(void *)(v52 + 80);
  uint64_t v83 = *(void *)(v52 + 88);
  uint64_t v84 = *(void *)(v52 + 96);
  uint64_t v85 = *(void *)(v52 + 104);
  uint64_t v86 = *(void *)(v52 + 112);
  uint64_t v87 = *(void *)(v52 + 120);
  uint64_t v88 = *(void *)(v52 + 128);
  uint64_t v89 = *(void *)(v52 + 136);
  char v90 = *(unsigned char *)(v52 + 144);
  outlined copy of Environment<PresentSharingPickerAction?>.Content(*(void *)v52, v54, v56, v57, v58, v59, v60, v61, v62, v81, v82, v83, v84, v85, v86, v87, v88, v89, v90);
  uint64_t v63 = *(void *)v55;
  uint64_t v64 = *(void *)(v55 + 8);
  uint64_t v65 = *(void *)(v55 + 16);
  uint64_t v66 = *(void *)(v55 + 24);
  uint64_t v67 = *(void *)(v55 + 32);
  uint64_t v68 = *(void *)(v55 + 40);
  uint64_t v69 = *(void *)(v55 + 48);
  uint64_t v70 = *(void *)(v55 + 56);
  long long v71 = *(_OWORD *)(v55 + 64);
  long long v72 = *(_OWORD *)(v55 + 80);
  long long v73 = *(_OWORD *)(v55 + 96);
  long long v74 = *(_OWORD *)(v55 + 112);
  uint64_t v75 = *(void *)(v55 + 128);
  uint64_t v76 = *(void *)(v55 + 136);
  char v77 = *(unsigned char *)(v55 + 144);
  *(void *)unint64_t v55 = v53;
  *(void *)(v55 + 8) = v54;
  *(void *)(v55 + 16) = v56;
  *(void *)(v55 + 24) = v57;
  *(void *)(v55 + 32) = v58;
  *(void *)(v55 + 40) = v59;
  *(void *)(v55 + 48) = v60;
  *(void *)(v55 + 56) = v61;
  *(void *)(v55 + 64) = v62;
  *(void *)(v55 + 72) = v81;
  *(void *)(v55 + 80) = v82;
  *(void *)(v55 + 88) = v83;
  *(void *)(v55 + 96) = v84;
  *(void *)(v55 + 104) = v85;
  *(void *)(v55 + 112) = v86;
  *(void *)(v55 + 120) = v87;
  *(void *)(v55 + 128) = v88;
  *(void *)(v55 + 136) = v89;
  *(unsigned char *)(v55 + 144) = v90;
  outlined consume of Environment<PresentSharingPickerAction?>.Content(v63, v64, v65, v66, v67, v68, v69, v70, v71, *((uint64_t *)&v71 + 1), v72, *((uint64_t *)&v72 + 1), v73, *((uint64_t *)&v73 + 1), v74, *((uint64_t *)&v74 + 1), v75, v76, v77);
  unint64_t v78 = ((unint64_t)v91 + 175) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v79 = ((unint64_t)v92 + 175) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v78 = *(unsigned char *)v79;
  *(void *)(v78 + 8) = *(void *)(v79 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ShareLink(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32) + 7;
  unint64_t v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v12[1];
  *unint64_t v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = (_OWORD *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  char v15 = (_OWORD *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  unint64_t v17 = ((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v18 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
  }
  else
  {
    uint64_t v19 = *(void *)(v18 + 8);
    *(void *)unint64_t v17 = *(void *)v18;
    *(void *)(v17 + 8) = v19;
  }
  uint64_t v20 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v21 = v20 + 32;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v17 + v22 + 16) & ~v22;
  uint64_t v24 = (v18 + v22 + 16) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v20 + 32))(v23, v24);
  uint64_t v25 = *(void *)(v21 + 32) + 7;
  unint64_t v26 = (v25 + v23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v25 + v24) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v27 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  }
  else
  {
    uint64_t v28 = *(void *)(v27 + 8);
    *(void *)unint64_t v26 = *(void *)v27;
    *(void *)(v26 + 8) = v28;
  }
  unint64_t v29 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v31 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
  *(_OWORD *)(v29 + 16) = v31;
  long long v32 = *(_OWORD *)(v30 + 32);
  long long v33 = *(_OWORD *)(v30 + 48);
  long long v34 = *(_OWORD *)(v30 + 80);
  *(_OWORD *)(v29 + 64) = *(_OWORD *)(v30 + 64);
  *(_OWORD *)(v29 + 80) = v34;
  *(_OWORD *)(v29 + 32) = v32;
  *(_OWORD *)(v29 + 48) = v33;
  long long v35 = *(_OWORD *)(v30 + 96);
  long long v36 = *(_OWORD *)(v30 + 112);
  long long v37 = *(_OWORD *)(v30 + 128);
  *(unsigned char *)(v29 + 144) = *(unsigned char *)(v30 + 144);
  *(_OWORD *)(v29 + 112) = v36;
  *(_OWORD *)(v29 + 128) = v37;
  *(_OWORD *)(v29 + 96) = v35;
  *(_OWORD *)((v26 + 175) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v27 + 175) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ShareLink(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 24) + 7;
  unint64_t v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v11 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v12 + 24) >= 0xFFFFFFFFuLL)
    {
      char v13 = *(unsigned char *)(v12 + 16);
      uint64_t v14 = *(void *)v11;
      uint64_t v15 = *(void *)(v11 + 8);
      char v16 = *(unsigned char *)(v11 + 16);
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
      *(unsigned char *)(v11 + 16) = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *(void *)(v11 + 24) = *(void *)(v12 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  long long v17 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v17;
LABEL_6:
  unint64_t v18 = (v11 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v12 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v18 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v19 + 24) >= 0xFFFFFFFFuLL)
    {
      char v20 = *(unsigned char *)(v19 + 16);
      uint64_t v21 = *(void *)v18;
      uint64_t v22 = *(void *)(v18 + 8);
      char v23 = *(unsigned char *)(v18 + 16);
      *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
      *(unsigned char *)(v18 + 16) = v20;
      outlined consume of Text.Storage(v21, v22, v23);
      *(void *)(v18 + 24) = *(void *)(v19 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    outlined consume of Text.Storage(*(void *)v18, *(void *)(v18 + 8), *(unsigned char *)(v18 + 16));
    swift_bridgeObjectRelease();
  }
  long long v24 = *(_OWORD *)(v19 + 16);
  *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  *(_OWORD *)(v18 + 16) = v24;
LABEL_11:
  uint64_t v25 = (void *)((v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (unint64_t *)((v19 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = *v26;
  if (*v25 < 0xFFFFFFFFuLL)
  {
    if (v27 >= 0xFFFFFFFF)
    {
      unint64_t v29 = v26[1];
      *uint64_t v25 = v27;
      v25[1] = v29;
      goto LABEL_18;
    }
  }
  else
  {
    if (v27 >= 0xFFFFFFFF)
    {
      unint64_t v28 = v26[1];
      *uint64_t v25 = v27;
      v25[1] = v28;
      swift_release();
      goto LABEL_18;
    }
    swift_release();
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
LABEL_18:
  uint64_t v30 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v31 = v30 + 40;
  uint64_t v32 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v33 = ((unint64_t)v25 + v32 + 16) & ~v32;
  uint64_t v34 = ((unint64_t)v26 + v32 + 16) & ~v32;
  (*(void (**)(uint64_t, uint64_t))(v30 + 40))(v33, v34);
  uint64_t v35 = *(void *)(v31 + 24) + 7;
  long long v36 = (void *)((v35 + v33) & 0xFFFFFFFFFFFFFFF8);
  long long v37 = (unint64_t *)((v35 + v34) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v38 = *v37;
  if (*v36 < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      unint64_t v40 = v37[1];
      *long long v36 = v38;
      v36[1] = v40;
      goto LABEL_25;
    }
LABEL_24:
    *(_OWORD *)long long v36 = *(_OWORD *)v37;
    goto LABEL_25;
  }
  if (v38 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_24;
  }
  unint64_t v39 = v37[1];
  *long long v36 = v38;
  v36[1] = v39;
  swift_release();
LABEL_25:
  unint64_t v41 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v42 = *(unsigned char *)(v41 + 144);
  unint64_t v43 = ((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = *(void *)v43;
  uint64_t v45 = *(void *)(v43 + 8);
  uint64_t v46 = *(void *)(v43 + 16);
  uint64_t v47 = *(void *)(v43 + 24);
  uint64_t v48 = *(void *)(v43 + 32);
  uint64_t v49 = *(void *)(v43 + 40);
  uint64_t v50 = *(void *)(v43 + 48);
  uint64_t v51 = *(void *)(v43 + 56);
  long long v52 = *(_OWORD *)(v43 + 64);
  long long v53 = *(_OWORD *)(v43 + 80);
  long long v54 = *(_OWORD *)(v43 + 96);
  long long v55 = *(_OWORD *)(v43 + 112);
  uint64_t v56 = *(void *)(v43 + 128);
  uint64_t v57 = *(void *)(v43 + 136);
  char v58 = *(unsigned char *)(v43 + 144);
  long long v59 = *(_OWORD *)(v41 + 16);
  long long v60 = *(_OWORD *)(v41 + 32);
  long long v61 = *(_OWORD *)(v41 + 48);
  long long v62 = *(_OWORD *)(v41 + 64);
  long long v63 = *(_OWORD *)(v41 + 80);
  long long v64 = *(_OWORD *)(v41 + 96);
  long long v65 = *(_OWORD *)(v41 + 112);
  long long v66 = *(_OWORD *)(v41 + 128);
  *(_OWORD *)unint64_t v43 = *(_OWORD *)v41;
  *(_OWORD *)(v43 + 16) = v59;
  *(_OWORD *)(v43 + 32) = v60;
  *(_OWORD *)(v43 + 48) = v61;
  *(_OWORD *)(v43 + 64) = v62;
  *(_OWORD *)(v43 + 80) = v63;
  *(_OWORD *)(v43 + 96) = v64;
  *(_OWORD *)(v43 + 112) = v65;
  *(_OWORD *)(v43 + 128) = v66;
  *(unsigned char *)(v43 + 144) = v42;
  outlined consume of Environment<PresentSharingPickerAction?>.Content(v44, v45, v46, v47, v48, v49, v50, v51, v52, *((uint64_t *)&v52 + 1), v53, *((uint64_t *)&v53 + 1), v54, *((uint64_t *)&v54 + 1), v55, *((uint64_t *)&v55 + 1), v56, v57, v58);
  unint64_t v67 = ((unint64_t)v36 + 175) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v68 = ((unint64_t)v37 + 175) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v67 = *(unsigned char *)v68;
  *(void *)(v67 + 8) = *(void *)(v68 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShareLink(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(unsigned int *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (v4 <= *(_DWORD *)(v5 + 84)) {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v3 + 84);
  }
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  uint64_t v11 = v7 + 16;
  if (v9 < a2)
  {
    unint64_t v12 = ((((*(void *)(*(void *)(*(void *)(a3 + 40) - 8) + 64)
            + ((v11
              + ((((((v10 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v7)
            + 7) & 0xFFFFFFFFFFFFFFF8)
          + 175) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a2 - v9 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v12);
        if (!*((unsigned char *)a1 + v12)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v12);
        if (*(_WORD *)((char *)a1 + v12)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18803AA90);
      case 4:
        int v16 = *(_DWORD *)((char *)a1 + v12);
        if (!v16) {
          break;
        }
LABEL_25:
        int v18 = v16 - 1;
        if ((v12 & 0xFFFFFFF8) != 0)
        {
          int v18 = 0;
          int v19 = *a1;
        }
        else
        {
          int v19 = 0;
        }
        return v9 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = ((unint64_t)a1 + v6 + 8) & ~v6;
  if (v4 == v9) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 48))(v20, v4, *(void *)(a3 + 16));
  }
  unint64_t v21 = (v10 + v20) & 0xFFFFFFFFFFFFFFF8;
  if (v8 > 0x7FFFFFFE) {
    return (*(uint64_t (**)(unint64_t))(v5 + 48))((v11
  }
                                                                  + ((((v21 + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v7);
  unint64_t v22 = *(void *)(v21 + 24);
  if (v22 >= 0xFFFFFFFF) {
    LODWORD(v22) = -1;
  }
  if ((v22 + 1) >= 2) {
    return v22;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for ShareLink(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a4 + 40) - 8);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= *(_DWORD *)(v7 + 84)) {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = v9 + 7;
  unint64_t v14 = (((((v9 + 7 + ((v8 + 8) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = v10 + 16;
  size_t v16 = ((((*(void *)(*(void *)(*(void *)(a4 + 40) - 8) + 64) + ((v10 + 16 + v14) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 175) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v12 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_20:
      uint64_t v21 = ~v10;
      switch(v19)
      {
        case 1:
          a1[v16] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v16] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v16] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            unint64_t v25 = (unint64_t)&a1[v8 + 8] & ~v8;
            if (v6 == v12)
            {
              unint64_t v26 = *(void (**)(unint64_t))(v5 + 56);
              v26(v25);
            }
            else
            {
              unint64_t v27 = (v13 + v25) & 0xFFFFFFFFFFFFFFF8;
              if (v11 > 0x7FFFFFFE)
              {
                unint64_t v28 = *(void (**)(unint64_t))(v7 + 56);
                v28((v15 + ((((v27 + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8)) & v21);
              }
              else if (a2 > 0x7FFFFFFE)
              {
                double result = 0.0;
                *(_OWORD *)unint64_t v27 = 0u;
                *(_OWORD *)(v27 + 16) = 0u;
                *(_DWORD *)unint64_t v27 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *(void *)(v27 + 24) = a2;
              }
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 40) - 8) + 64)
           + ((v10 + 16 + v14) & ~v10)
           + 7) & 0xFFFFFFF8)
         + 175) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v17 = a3 - v12 + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_20;
    }
  }
  if (v16) {
    int v22 = 1;
  }
  else {
    int v22 = v20;
  }
  if (v16)
  {
    unsigned int v23 = ~v12 + a2;
    bzero(a1, v16);
    *(_DWORD *)a1 = v23;
  }
  switch(v19)
  {
    case 1:
      a1[v16] = v22;
      break;
    case 2:
      *(_WORD *)&a1[v16] = v22;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x18803AD9CLL);
    case 4:
      *(_DWORD *)&a1[v16] = v22;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultShareLinkLabel()
{
  return &type metadata for DefaultShareLinkLabel;
}

uint64_t sub_18803ADD4()
{
  return swift_getWitnessTable();
}

uint64_t sub_18803B03C()
{
  return _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
}

void *type metadata accessor for RequiresPlatformItemListRepresentation()
{
  return &unk_1ED464060;
}

uint64_t partial apply for closure #1 in closure #2 in ShareLink.body.getter()
{
  return partial apply for closure #1 in ShareLink.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))closure #1 in closure #2 in ShareLink.body.getter);
}

uint64_t partial apply for closure #1 in ShareLink.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void))
{
  return a1(v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10]);
}

uint64_t partial apply for closure #2 in closure #2 in ShareLink.body.getter(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareLink() - 8);
  unsigned int v6 = *a2;
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t result = type metadata accessor for ShareLink();
  uint64_t v5 = (uint64_t (**)(void))(v2 + *(int *)(result + 112) + v8);
  if (*v5) {
    return (*v5)(v6);
  }
  return result;
}

uint64_t objectdestroy_8Tm_0()
{
  long long v7 = *(_OWORD *)(v0 + 16);
  long long v8 = *(_OWORD *)(v0 + 40);
  unint64_t v1 = (int *)type metadata accessor for ShareLink();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  (*(void (**)(uint64_t))(*(void *)(v7 - 8) + 8))(v2 + v1[23]);
  uint64_t v3 = v2 + v1[24];
  if (*(void *)(v3 + 24))
  {
    outlined consume of Text.Storage(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = v2 + v1[25];
  if (*(void *)(v4 + 24))
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v2 + v1[26])) {
    swift_release();
  }
  (*(void (**)(uint64_t))(*(void *)(v8 - 8) + 8))(v2 + v1[27]);
  if (*(void *)(v2 + v1[28])) {
    swift_release();
  }
  uint64_t v5 = v2 + v1[29];
  outlined consume of Environment<PresentSharingPickerAction?>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(void *)(v5 + 72), *(void *)(v5 + 80), *(void *)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112), *(void *)(v5 + 120), *(void *)(v5 + 128), *(void *)(v5 + 136), *(unsigned char *)(v5 + 144));
  swift_release();
  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ShareLink.body.getter()
{
  type metadata accessor for ShareLink();
  uint64_t v0 = type metadata accessor for ShareLink();
  return ShareLink.show()(v0);
}

uint64_t *outlined release of SharingPickerHostModifier.Model(uint64_t *a1)
{
  uint64_t v2 = a1[14];
  uint64_t v3 = a1[15];
  outlined copy of AnyIdentifiableShareConfiguration?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v2, v3);
  return a1;
}

uint64_t outlined retain of AnyIdentifiableShareConfiguration(uint64_t a1, void (*a2)(void, void, void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 104);
  a2(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  a3(v5, v6, v7, v8);
  a3(v9, v10, v11, v12);
  return a1;
}

uint64_t outlined release of AnyShareConfiguration(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  outlined consume of AnyShareConfiguration.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  outlined consume of Text?(v2, v3, v4, v5);
  outlined consume of Text?(v6, v7, v8, v9);
  return a1;
}

uint64_t Scene.windowToolbarStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for WindowToolbarStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  Scene.modifier<A>(_:)(v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for WindowToolbarStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v14) = *v10;
  type metadata accessor for WindowToolbarStyleModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (v8) {
    closure #1 in static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(1, a3);
  }
  AGGraphCreateOffsetAttribute2();
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, Value, a3);
  uint64_t v14 = AnyWindowToolbarStyle.init<A>(_:)((uint64_t)v9, a3);
  lazy protocol witness table accessor for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput();
  PropertyList.subscript.setter();
  _GraphValue.init(_:)();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(a4 + 24))(&v14, a2, a3, a4);
}

uint64_t closure #1 in static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for WindowToolbarStyleModifier();
  uint64_t v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WindowToolbarStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static WindowToolbarStyleModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.WindowToolbarConfigurationKey(uint64_t a1, __int16 *a2)
{
  char v2 = *(unsigned char *)(a1 + 24);
  __int16 v3 = *a2;
  char v4 = *((unsigned char *)a2 + 24);
  *(_WORD *)uint64_t v9 = *(_WORD *)a1;
  long long v10 = *(_OWORD *)(a1 + 8);
  char v11 = v2;
  *(_WORD *)uint64_t v6 = v3;
  long long v7 = *(_OWORD *)(a2 + 4);
  char v8 = v4;
  return specialized static WindowToolbarConfiguration.== infix(_:_:)(v9, v6);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance WindowToolbarStyleInput@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>();
  uint64_t result = swift_allocObject();
  *a1 = result;
  return result;
}

void View.presentedWindowToolbarStyle<A>(_:)()
{
}

uint64_t dispatch thunk of static WindowToolbarStyle._makeInputs(style:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of WindowToolbarStyle.configureWindowToolbar(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_18803BB90()
{
  return swift_getWitnessTable();
}

uint64_t sub_18803BC00(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t getEnumTagSinglePayload for WindowToolbarStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for WindowToolbarStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18803BF7CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        size_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput;
  if (!lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput;
  if (!lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.WindowToolbarConfigurationKey()
{
  return &type metadata for EnvironmentValues.WindowToolbarConfigurationKey;
}

ValueMetadata *type metadata accessor for WindowToolbarStyleInput()
{
  return &type metadata for WindowToolbarStyleInput;
}

unint64_t instantiation function for generic protocol witness table for WindowToolbarStyleInput(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type WindowToolbarStyleInput and conformance WindowToolbarStyleInput();
  *(void *)(a1 + 8) = result;
  return result;
}

void type metadata accessor for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>()
{
  if (!lazy cache variable for type metadata for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>)
  {
    unint64_t v0 = type metadata accessor for AnyWindowToolbarStyleStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyWindowToolbarStyleStorage<DefaultWindowToolbarStyle>);
    }
  }
}

BOOL specialized static WindowToolbarConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = a1[1];
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  unsigned int v6 = a1[24];
  int v7 = *a2;
  int v8 = a2[1];
  uint64_t v10 = *((void *)a2 + 1);
  uint64_t v9 = *((void *)a2 + 2);
  unsigned int v11 = a2[24];
  if (v2 == 5)
  {
    if (v7 != 5) {
      return 0;
    }
  }
  else if (v7 == 5 || v2 != v7)
  {
    return 0;
  }
  if (v3 == 3)
  {
    if (v8 != 3) {
      return 0;
    }
  }
  else if (v8 == 3 || v3 != v8)
  {
    return 0;
  }
  if ((~v4 & 0xF000000000000007) != 0 || v6 <= 0xFB)
  {
    uint64_t v18 = *((void *)a1 + 1);
    uint64_t v19 = v4;
    char v20 = v6;
    if ((~v9 & 0xF000000000000007) != 0 || v11 <= 0xFB)
    {
      v16[0] = v10;
      v16[1] = v9;
      char v17 = v11;
      outlined copy of ToolbarLabelStyle.Data?(v5, v4, v6);
      outlined copy of ToolbarLabelStyle.Data(v5, v4, v6);
      BOOL v14 = specialized static ToolbarLabelStyle.Data.== infix(_:_:)((uint64_t)&v18, (uint64_t)v16);
      outlined consume of ToolbarLabelStyle.Data(v18, v19, v20);
      outlined consume of ToolbarLabelStyle.Data?(v5, v4, v6);
      return v14;
    }
    outlined copy of ToolbarLabelStyle.Data(v5, v4, v6);
    outlined copy of ToolbarLabelStyle.Data(v5, v4, v6);
    outlined consume of ToolbarLabelStyle.Data(v5, v4, v6);
    goto LABEL_25;
  }
  if ((~v9 & 0xF000000000000007) != 0 || v11 <= 0xFB)
  {
LABEL_25:
    outlined copy of ToolbarLabelStyle.Data?(v10, v9, v11);
    outlined consume of ToolbarLabelStyle.Data?(v5, v4, v6);
    outlined consume of ToolbarLabelStyle.Data?(v10, v9, v11);
    return 0;
  }
  return 1;
}

uint64_t outlined copy of ToolbarLabelStyle.Data?(uint64_t a1, uint64_t a2, char a3)
{
  if ((~a2 & 0xF000000000000007) != 0 || a3 <= 0xFBu) {
    return outlined copy of ToolbarLabelStyle.Data(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined copy of ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 < 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 < 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t destroy for WindowToolbarConfiguration(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unsigned int v2 = *(unsigned __int8 *)(result + 24);
  if ((~v1 & 0xF000000000000007) != 0 || v2 <= 0xFB) {
    return outlined consume of ToolbarLabelStyle.Data(*(void *)(result + 8), v1, v2);
  }
  return result;
}

uint64_t initializeWithCopy for WindowToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = (uint64_t *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 24);
  if ((~v4 & 0xF000000000000007) != 0 || v5 <= 0xFB)
  {
    uint64_t v6 = *v3;
    outlined copy of ToolbarLabelStyle.Data(*v3, *(void *)(a2 + 16), v5);
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v4;
    *(unsigned char *)(a1 + 24) = v5;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v3;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  return a1;
}

uint64_t assignWithCopy for WindowToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = (uint64_t *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned int v6 = *(unsigned __int8 *)(a2 + 24);
  BOOL v8 = (~v5 & 0xF000000000000007) == 0 && v6 > 0xFB;
  if ((~*(void *)(a1 + 16) & 0xF000000000000007) != 0 || *(unsigned __int8 *)(a1 + 24) <= 0xFBu)
  {
    if (v8)
    {
      outlined destroy of ToolbarLabelStyle.Data(a1 + 8);
      char v10 = *((unsigned char *)v4 + 16);
      *(_OWORD *)uint64_t v3 = *(_OWORD *)v4;
      *(unsigned char *)(v3 + 16) = v10;
    }
    else
    {
      uint64_t v11 = *v4;
      outlined copy of ToolbarLabelStyle.Data(*v4, *(void *)(a2 + 16), v6);
      uint64_t v12 = *(void *)(a1 + 8);
      uint64_t v13 = *(void *)(a1 + 16);
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = v5;
      char v14 = *(unsigned char *)(a1 + 24);
      *(unsigned char *)(a1 + 24) = v6;
      outlined consume of ToolbarLabelStyle.Data(v12, v13, v14);
    }
  }
  else if (v8)
  {
    long long v9 = *(_OWORD *)v4;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(_OWORD *)uint64_t v3 = v9;
  }
  else
  {
    uint64_t v15 = *v4;
    outlined copy of ToolbarLabelStyle.Data(*v4, *(void *)(a2 + 16), v6);
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = v6;
  }
  return a1;
}

uint64_t outlined destroy of ToolbarLabelStyle.Data(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for WindowToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  uint64_t v6 = *(void *)(a1 + 16);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned int v9 = *(unsigned __int8 *)(a2 + 24);
  if ((~v6 & 0xF000000000000007) != 0 || v7 <= 0xFB)
  {
    if ((~v8 & 0xF000000000000007) != 0 || v9 <= 0xFB)
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = *(void *)v5;
      *(void *)(a1 + 16) = v8;
      *(unsigned char *)(a1 + 24) = v9;
      outlined consume of ToolbarLabelStyle.Data(v10, v6, v7);
      return a1;
    }
    outlined destroy of ToolbarLabelStyle.Data(a1 + 8);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowToolbarConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >> 1 >= 0xFFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 8190);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  int v4 = (*(void *)(a1 + 16) >> 57) & 0x78 | *(void *)(a1 + 16) & 7 | (((v3 >> 2) & 0x1F) << 7);
  int v5 = 8190 - ((v3 >> 7) | (2 * v4));
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowToolbarConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >> 1 > 0xFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 8190;
    if (a3 >> 1 >= 0xFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >> 1 >= 0xFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2)
    {
      uint64_t v3 = ((a2 ^ 0x1FFF) << 12) | ((a2 ^ 0x1FFF) >> 1);
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(unsigned char *)(result + 24) = (v3 >> 5) & 0xFC;
    }
  }
  return result;
}

uint64_t one-time initialization function for tableHeaderFont()
{
  static Font.Weight.semibold.getter();
  uint64_t result = static Font.system(_:design:weight:)();
  static ListMetrics.tableHeaderFont = result;
  return result;
}

uint64_t one-time initialization function for tableColumnContentPadding()
{
  uint64_t result = static EdgeInsets.zero.getter();
  static ListMetrics.tableColumnContentPadding = v1;
  qword_1E90FC740 = v2;
  qword_1E90FC748 = v3;
  qword_1E90FC750 = v4;
  return result;
}

void one-time initialization function for tableHeaderMinHeight()
{
  static ListMetrics.tableHeaderMinHeight = 0x4044000000000000;
}

void _ConditionalContent<>.CommandsProvider.detachOutputs()()
{
}

uint64_t _ConditionalContent<>.CommandsProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.CommandsProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(_DWORD *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v18 = *(void *)(v1 + 48);
  int v6 = *(_DWORD *)(v1 + 56);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v18;
  *(_DWORD *)(a1 + 56) = v6;
  swift_beginAccess();
  int v7 = *(_DWORD *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  long long v16 = *(_OWORD *)(v4 + 48);
  long long v17 = *(_OWORD *)(v4 + 32);
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(void *)(v4 + 72);
  char v11 = *(unsigned char *)(v4 + 80);
  char v12 = *(unsigned char *)(v4 + 81);
  uint64_t v13 = *(void *)(v4 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = v7;
  *(void *)(v14 + 24) = v8;
  *(_OWORD *)(v14 + 32) = v17;
  *(_OWORD *)(v14 + 48) = v16;
  *(void *)(v14 + 64) = v9;
  *(void *)(v14 + 72) = v10;
  *(unsigned char *)(v14 + 80) = v11;
  *(unsigned char *)(v14 + 81) = v12;
  *(void *)(v14 + 88) = v13;
  swift_retain();
  *(void *)(a1 + 16) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent<>.CommandsProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 14);
  uint64_t v9 = *(void *)(a3 + 16);
  _GraphValue.init(_:)();
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = *(_OWORD *)(a2 + 5);
  int v16 = v8;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(a3 + 32) + 32))(v17, &v11, v9);
}

uint64_t _ConditionalContent<>.CommandsProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 14);
  uint64_t v9 = *(void *)(a3 + 24);
  _GraphValue.init(_:)();
  uint64_t v11 = v5;
  int v12 = v6;
  uint64_t v13 = v7;
  long long v14 = *(_OWORD *)(a2 + 3);
  long long v15 = *(_OWORD *)(a2 + 5);
  int v16 = v8;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(a3 + 40) + 32))(v17, &v11, v9);
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.CommandsProvider@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  int v6 = *(_DWORD *)(v1 + 56);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.CommandsProvider@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 72);
  *(void *)a1 = *(void *)(v1 + 64);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t static _ConditionalContent<>._makeCommands(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  uint64_t v26 = *(void *)(a2 + 40);
  int v19 = *(_DWORD *)(a2 + 56);
  uint64_t v31 = *(void *)(a2 + 48);
  LODWORD(v32) = v19;
  PreferencesInputs.makeIndirectOutputs()();
  uint64_t v10 = v41;
  int v24 = v42;
  LODWORD(v41) = v9;
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = *(void *)(a2 + 32);
  _GraphValue.value.getter();
  uint64_t v35 = v11;
  uint64_t v36 = v26;
  uint64_t v37 = v31;
  int v38 = v19;
  uint64_t v23 = v10;
  uint64_t v39 = v10;
  int v40 = v42;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v12 = a4;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v13 = type metadata accessor for _ConditionalContent<>.CommandsProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  _ConditionalContent.Container.init(content:provider:)();
  uint64_t v28 = type metadata accessor for _ConditionalContent.Info();
  uint64_t v31 = a3;
  uint64_t v32 = v12;
  uint64_t v33 = v13;
  uint64_t v34 = WitnessTable;
  uint64_t v29 = type metadata accessor for _ConditionalContent.Container();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v16 = v45;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v41, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v27, v29, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v41 = v23;
  LODWORD(v42) = v24;
  LOBYTE(v31) = 0;
  PreferencesOutputs.setIndirectDependency(_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a7 = v23;
  *(_DWORD *)(a7 + 8) = v24;
  return result;
}

uint64_t type metadata accessor for _ConditionalContent<>.CommandsProvider()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ConditionalContent<>._makeCommands(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v10 - 8);
  uint64_t v21 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v14);
  id v16 = (char *)&v19 - v15;
  Optional<A>.ChildTableColumn.content.getter((uint64_t)v8);
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.Child.value.getter, (uint64_t)v23, MEMORY[0x1E4FBC248], v9, v17, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v9) == 1)
  {
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v9);
  }
  return _ConditionalContent.init(__storage:)((uint64_t)v16, v22);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - v6;
  int v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Optional<A>.ChildTableColumn.content.getter((uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    id v16 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v16(v15, v11, a1);
    v16(v7, v15, a1);
  }
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v19, v7, v4);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance A?<A>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ConditionalContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v2 = type metadata accessor for _ConditionalContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.Child.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

{
  return Optional<A>.Child.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance A?<A>.Child(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

{
  uint64_t WitnessTable;
  uint64_t vars8;

  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t static Optional<A>._makeCommands(content:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 14);
  LODWORD(v17) = *a1;
  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.value.getter();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Optional<A>.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v17 = v9;
  int v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  long long v22 = v16;
  int v23 = v12;
  return static _ConditionalContent<>._makeCommands(content:inputs:)(&v24, (uint64_t)&v17, a3, (uint64_t)&type metadata for EmptyCommands, a4, (uint64_t)&protocol witness table for EmptyCommands, a5);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance <A> A?@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Optional<A>._makeCommands(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t type metadata accessor for Optional<A>.Child()
{
  return __swift_instantiateGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for _ConditionalContent<>.CommandsProvider()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ConditionalContent<>.CommandsProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent<>.CommandsProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for _ConditionalContent<>.CommandsProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in A?<A>.Child()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in Optional<A>.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(v2 + 16) - 8) + 16))(a2, a1, *(void *)(v2 + 16));
  type metadata accessor for _ConditionalContent.Storage();
  return swift_storeEnumTagMultiPayload();
}

uint64_t ControlWidgetConfiguration.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v17 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a2, AssociatedTypeWitness, v12);
  _PreferenceWritingModifier.init(key:value:)();
  ControlWidgetConfiguration.modifier<A>(_:)((uint64_t)v14, v17, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t ControlWidgetConfiguration.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_retain();
  v8[0] = _PreferenceTransformModifier.init(key:transform:)();
  v8[1] = v5;
  uint64_t v6 = type metadata accessor for _PreferenceTransformModifier();
  ControlWidgetConfiguration.modifier<A>(_:)((uint64_t)v8, a4, v6);
  return swift_release();
}

uint64_t static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  int v7 = *((_DWORD *)a1 + 14);
  uint64_t v22 = *a1;
  int v23 = v3;
  long long v25 = *(_OWORD *)(a1 + 3);
  uint64_t v24 = v4;
  uint64_t v26 = v6;
  uint64_t v27 = v5;
  int v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v13 = v22;
  int v14 = v23;
  uint64_t v15 = v4;
  long long v16 = v25;
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  int v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v13 = v5;
  int v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v10 = v21;
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t protocol witness for static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(&v5);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t result = swift_bridgeObjectRelease();
  int v4 = v6;
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v16 = a1;
  type metadata accessor for _PreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  int v5 = _GraphValue.value.getter();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v8)
  {
    int v16 = v5;
    uint64_t v17 = KeyPath;
    MEMORY[0x1F4188790](v7);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    void v13[2] = swift_getFunctionTypeMetadata();
    uint64_t v14 = type metadata accessor for Focus();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
    swift_release();
    swift_release();
    return AssociatedTypeWitness;
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_release();
  }
  return OffsetAttribute2;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for static ControlWidgetConfigurationModifier._makeWidgetControlConfiguration(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  return static _PreferenceTransformModifier._makeWidgetControlConfiguration(modifier:inputs:body:)(a1, a2);
}

uint64_t sub_18803DF1C(uint64_t a1)
{
  return get_witness_table_7SwiftUI26ControlWidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, MEMORY[0x1E4F40F90]);
}

uint64_t sub_18803DF3C(uint64_t a1)
{
  return get_witness_table_7SwiftUI26ControlWidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, MEMORY[0x1E4F41108]);
}

uint64_t get_witness_table_7SwiftUI26ControlWidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t sub_18803DFD8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_18803DFE8()
{
  return 16;
}

__n128 sub_18803DFF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t EnvironmentValues.isUserAuthenticationEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<InterfaceProtectionKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<InterfaceProtectionKey>);
    }
  }
}

uint64_t EnvironmentValues.isUserAuthenticationEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t (*EnvironmentValues.isUserAuthenticationEnabled.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.isUserAuthenticationEnabled.modify;
}

uint64_t EnvironmentValues.isUserAuthenticationEnabled.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_18803E3D8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isUserAuthenticationEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18803E418()
{
  return EnvironmentValues.isUserAuthenticationEnabled.setter();
}

ValueMetadata *type metadata accessor for InterfaceProtectionKey()
{
  return &type metadata for InterfaceProtectionKey;
}

double DragReorderableVStack.dragState.getter@<D0>(_OWORD *a1@<X8>)
{
  DragReorderableVStack.$state.getter((uint64_t)&v4);
  long long v2 = v5[0];
  *a1 = v4;
  a1[1] = v2;
  double result = *(double *)((char *)v5 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v5 + 9);
  return result;
}

uint64_t DragReorderableVStack.init(alignment:spacing:padding:contentTypes:insertionPlaceholder:delegate:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(void)@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13)
{
  uint64_t v44 = a8;
  uint64_t v48 = a7;
  uint64_t v52 = a6;
  uint64_t v50 = a5;
  uint64_t v42 = a2;
  uint64_t v49 = a1;
  uint64_t v43 = a10;
  int v15 = a3 & 1;
  uint64_t v16 = outlined init with take of EdgeInsets?(a4, (uint64_t)v59);
  double v17 = *(double *)v59;
  double v18 = *(double *)&v59[1];
  double v19 = *(double *)&v59[2];
  double v20 = *(double *)&v59[3];
  MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)long long v55 = MEMORY[0x1E4F3F8E8];
  *(_OWORD *)&v55[8] = a11;
  uint64_t v56 = MEMORY[0x1E4F3F8C8];
  uint64_t v57 = a12;
  uint64_t v58 = a13;
  uint64_t v45 = type metadata accessor for DragReorderableLayoutAdaptor();
  uint64_t v23 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  long long v25 = (char *)&v41 - v24;
  *(_OWORD *)long long v55 = a11;
  uint64_t v46 = a12;
  *(void *)&v55[16] = a12;
  uint64_t v56 = a13;
  uint64_t v47 = a13;
  uint64_t v26 = type metadata accessor for DragReorderableVStack();
  uint64_t v27 = *(int *)(v26 + 56);
  uint64_t v51 = a9;
  uint64_t v28 = a9 + v27;
  uint64_t v29 = v42;
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 1;
  *(void *)(v28 + 16) = 0;
  *(unsigned char *)(v28 + 24) = 1;
  *(void *)(v28 + 32) = 0;
  v53[0] = v49;
  v53[1] = v29;
  LODWORD(v49) = v15;
  char v54 = v15;
  v44();
  outlined init with take of EdgeInsets?(a4, (uint64_t)v60);
  if (v60[32] == 1)
  {
    static EdgeInsets.zero.getter();
    double v17 = v30;
    double v18 = v31;
    double v19 = v32;
    double v20 = v33;
  }
  uint64_t v34 = v48;
  outlined init with copy of TableColumnList(v48, (uint64_t)v55);
  uint64_t v35 = AGMakeUniqueID();
  uint64_t v36 = AGMakeUniqueID();
  __swift_destroy_boxed_opaque_existential_1(v34);
  DragReorderableLayoutAdaptor.init(root:content:padding:contentTypes:spacing:delegate:containerID:placeholderID:)((uint64_t)v53, (uint64_t)v22, v50, v29, v49, (long long *)v55, v35, v36, (uint64_t)v25, v17, v18, v19, v20, MEMORY[0x1E4F3F8E8], a11);
  uint64_t v37 = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v51, v25, v45);
  uint64_t v38 = v37 + *(int *)(v26 + 52);
  type metadata accessor for Optional();
  uint64_t v39 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(v38, v52, v39);
}

uint64_t type metadata accessor for DragReorderableVStack()
{
  return swift_getGenericMetadata();
}

uint64_t DragReorderableVStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DragReorderableVStack.body.getter(a1, a2);
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  int v5 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  DragReorderableVStack.$state.getter((uint64_t)&v9);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v9);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  swift_getWitnessTable();
  return OptionalFormatInputToString.init(format:)((uint64_t)v7, a1, a2);
}

uint64_t DragReorderableVStack.adaptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DragReorderableLayoutAdaptor();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t DragReorderableVStack.insertionPlaceholder.getter()
{
  type metadata accessor for Optional();
  uint64_t v0 = type metadata accessor for Binding();
  return MEMORY[0x18C113DA0](v0);
}

double DragReorderableVStack.$state.getter@<D0>(uint64_t a1@<X8>)
{
  _s7SwiftUI5ColorVSgMaTm_0(0, &lazy cache variable for type metadata for State<_DragReorderableView_DragState>, (uint64_t)&type metadata for _DragReorderableView_DragState, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  return result;
}

uint64_t DragReorderableLazyVStack.init(alignment:spacing:padding:contentTypes:insertionPlaceholder:delegate:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(void)@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, _UNKNOWN **a13)
{
  uint64_t v44 = a8;
  uint64_t v48 = a7;
  uint64_t v52 = a6;
  uint64_t v50 = a5;
  uint64_t v42 = a2;
  uint64_t v49 = a1;
  uint64_t v43 = a10;
  int v15 = a3 & 1;
  uint64_t v16 = outlined init with take of EdgeInsets?(a4, (uint64_t)v60);
  double v17 = *(double *)v60;
  double v18 = *(double *)&v60[1];
  double v19 = *(double *)&v60[2];
  double v20 = *(double *)&v60[3];
  MEMORY[0x1F4188790](v16);
  uint64_t v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v56 = &type metadata for LazyVStackLayout;
  *(_OWORD *)&v56[8] = a11;
  uint64_t v57 = &protocol witness table for LazyVStackLayout;
  uint64_t v58 = a12;
  long long v59 = a13;
  uint64_t v45 = type metadata accessor for DragReorderableLayoutAdaptor();
  uint64_t v23 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  long long v25 = (char *)&v41 - v24;
  *(_OWORD *)uint64_t v56 = a11;
  uint64_t v46 = a12;
  *(void *)&unsigned char v56[16] = a12;
  uint64_t v57 = a13;
  uint64_t v47 = a13;
  uint64_t v26 = type metadata accessor for DragReorderableLazyVStack();
  uint64_t v27 = *(int *)(v26 + 56);
  uint64_t v51 = a9;
  uint64_t v28 = a9 + v27;
  uint64_t v29 = v42;
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + 8) = 1;
  *(void *)(v28 + 16) = 0;
  *(unsigned char *)(v28 + 24) = 1;
  *(void *)(v28 + 32) = 0;
  v53[0] = v49;
  v53[1] = v29;
  LODWORD(v49) = v15;
  char v54 = v15;
  int v55 = 0;
  v44();
  outlined init with take of EdgeInsets?(a4, (uint64_t)v61);
  if (v61[32] == 1)
  {
    static EdgeInsets.zero.getter();
    double v17 = v30;
    double v18 = v31;
    double v19 = v32;
    double v20 = v33;
  }
  uint64_t v34 = v48;
  outlined init with copy of TableColumnList(v48, (uint64_t)v56);
  uint64_t v35 = AGMakeUniqueID();
  uint64_t v36 = AGMakeUniqueID();
  __swift_destroy_boxed_opaque_existential_1(v34);
  DragReorderableLayoutAdaptor.init(root:content:padding:contentTypes:spacing:delegate:containerID:placeholderID:)((uint64_t)v53, (uint64_t)v22, v50, v29, v49, (long long *)v56, v35, v36, (uint64_t)v25, v17, v18, v19, v20, (uint64_t)&type metadata for LazyVStackLayout, a11);
  uint64_t v37 = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v51, v25, v45);
  uint64_t v38 = v37 + *(int *)(v26 + 52);
  type metadata accessor for Optional();
  uint64_t v39 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 32))(v38, v52, v39);
}

uint64_t type metadata accessor for DragReorderableLazyVStack()
{
  return swift_getGenericMetadata();
}

uint64_t DragReorderableLazyVStack.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DragReorderableVStack.body.getter(a1, a2);
}

void View.dragSourceProxy()()
{
}

uint64_t associated type witness table accessor for View.Body : View in DragReorderableVStack<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DragReorderableLazyVStack<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

_UNKNOWN **associated type witness table accessor for DragReorderableView.Root : _VariadicView_UnaryViewRoot in DragReorderableLazyVStack<A, B>()
{
  return &protocol witness table for LazyVStackLayout;
}

uint64_t protocol witness for DragReorderableView.adaptor.getter in conformance DragReorderableLazyVStack<A, B>@<X0>(uint64_t a1@<X8>)
{
  return DragReorderableVStack.adaptor.getter(a1);
}

uint64_t protocol witness for DragReorderableView.insertionPlaceholder.getter in conformance DragReorderableLazyVStack<A, B>()
{
  return DragReorderableVStack.insertionPlaceholder.getter();
}

uint64_t instantiation function for generic protocol witness table for DragReorderableLazyVStack<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DragReorderableView.Root : _VariadicView_UnaryViewRoot in DragReorderableVStack<A, B>()
{
  return MEMORY[0x1E4F3F8C8];
}

uint64_t protocol witness for DragReorderableView.adaptor.getter in conformance DragReorderableVStack<A, B>@<X0>(uint64_t a1@<X8>)
{
  return DragReorderableVStack.adaptor.getter(a1);
}

double protocol witness for DragReorderableView.dragState.getter in conformance DragReorderableVStack<A, B>@<D0>(_OWORD *a1@<X8>)
{
  DragReorderableVStack.dragState.getter(&v4);
  long long v2 = v5[0];
  *a1 = v4;
  a1[1] = v2;
  double result = *(double *)((char *)v5 + 9);
  *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v5 + 9);
  return result;
}

uint64_t instantiation function for generic protocol witness table for DragReorderableVStack<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for DragReorderableVStack()
{
  return type metadata completion function for DragReorderableVStack();
}

{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  uint64_t result = type metadata accessor for DragReorderableLayoutAdaptor();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for Binding();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DragReorderableVStack(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v12 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 64) + 1;
  }
  BOOL v13 = (v10 | v6) <= 7 && ((v10 | *(_DWORD *)(v5 + 80)) & 0x100000) == 0;
  if (v13
    && (uint64_t v14 = v7 + 7,
        unint64_t v15 = ((((((((((v7 + 7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                + 47) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + (v10 | 7)
            + 8,
        ((((v10 + 16) & ~(unint64_t)v10)
        + v12
        + 7
        + (v15 & ~(v10 | 7))) & 0xFFFFFFFFFFFFFFF8)
      + 40 <= 0x18))
  {
    size_t __n = v12;
    uint64_t v45 = ~(v10 | 7);
    unint64_t v46 = ((v10 + 16) & ~(unint64_t)v10) + v12 + 7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v16 = (a1 + v6 + 17) & ~v6;
    uint64_t v47 = v8;
    uint64_t v17 = ((unint64_t)a2 + v6 + 17) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v16, v17);
    double v18 = (_OWORD *)((v14 + v16) & 0xFFFFFFFFFFFFFFF8);
    double v19 = (_OWORD *)((v14 + v17) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = v19[1];
    *double v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (void *)(((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v19 + 39) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = *(void *)v24;
    *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
    *(void *)unint64_t v23 = v25;
    unint64_t v26 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = *(void *)(v27 + 24);
    *(void *)(v26 + 24) = v28;
    *(void *)(v26 + 32) = *(void *)(v27 + 32);
    uint64_t v29 = **(void (***)(unint64_t, unint64_t, uint64_t))(v28 - 8);
    swift_bridgeObjectRetain();
    v29(v26, v27, v28);
    double v30 = (void *)((v26 + 47) & 0xFFFFFFFFFFFFFFF8);
    double v31 = (void *)((v27 + 47) & 0xFFFFFFFFFFFFFFF8);
    *double v30 = *v31;
    *(void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    double v32 = (void *)((v15 + a1) & v45);
    double v33 = (void *)(((unint64_t)a2 + v15) & v45);
    *double v32 = *v33;
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v34 = *v35;
    uint64_t v36 = (void *)(((unint64_t)v34 + v11 + 8) & ~v11);
    uint64_t v37 = (const void *)(((unint64_t)v35 + v11 + 8) & ~v11);
    uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_retain();
    swift_retain();
    if (v38(v37, 1, v47))
    {
      memcpy(v36, v37, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v36, v37, v47);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v36, 0, 1, v47);
    }
    unint64_t v40 = ((unint64_t)v32 + v46) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = ((unint64_t)v33 + v46) & 0xFFFFFFFFFFFFFFF8;
    long long v42 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 9) = *(_OWORD *)(v41 + 9);
    *(_OWORD *)unint64_t v40 = v42;
    *(void *)(v40 + 32) = *(void *)(v41 + 32);
  }
  else
  {
    uint64_t v39 = *a2;
    *(void *)a1 = *a2;
    a1 = v39 + (((v10 | v6) & 0xF8 ^ 0x1F8) & ((v10 | v6) + 16));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for DragReorderableVStack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 17 + a1) & ~v6;
  (*(void (**)(uint64_t))(v4 + 8))(v7);
  uint64_t v8 = *(void *)(v5 + 56) + 7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((((((v8 + v7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = (((((((((v8 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (a1 + (v12 | 7) + v9 + 8) & ~(v12 | 7);
  swift_release();
  swift_release();
  unint64_t v14 = (v12 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10)) {
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v14, v10);
  }

  return swift_release();
}

uint64_t initializeWithCopy for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 17 + a1) & ~v7;
  uint64_t v9 = (v7 + 17 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 48) + 7;
  uint64_t v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  unint64_t v14 = (void *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (void *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v14 = *v15;
  unint64_t v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = ((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)(v20 + 24);
  *(void *)(v19 + 24) = v21;
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  uint64_t v22 = **(void (***)(unint64_t, unint64_t, uint64_t))(v21 - 8);
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  unint64_t v23 = (void *)((v19 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v23 = *v24;
  *(void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (((((((((v10 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)(a3 + 24);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v25 + (v28 | 7) + 8;
  uint64_t v30 = (v29 + a1) & ~(v28 | 7);
  uint64_t v31 = (v29 + a2) & ~(v28 | 7);
  *(void *)uint64_t v30 = *(void *)v31;
  double v32 = (void *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  double v33 = (void *)((v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *double v32 = *v33;
  uint64_t v48 = a1;
  uint64_t v34 = (void *)(((unint64_t)v32 + v28 + 8) & ~v28);
  uint64_t v35 = (const void *)(((unint64_t)v33 + v28 + 8) & ~v28);
  uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  swift_retain();
  swift_retain();
  if (v36(v35, 1, v26))
  {
    int v37 = *(_DWORD *)(v27 + 84);
    uint64_t v38 = *(void *)(v27 + 64);
    if (v37) {
      size_t v39 = *(void *)(v27 + 64);
    }
    else {
      size_t v39 = v38 + 1;
    }
    memcpy(v34, v35, v39);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v34, v35, v26);
    unint64_t v41 = *(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56);
    uint64_t v40 = v27 + 56;
    v41(v34, 0, 1, v26);
    int v37 = *(_DWORD *)(v40 + 28);
    uint64_t v38 = *(void *)(v40 + 8);
  }
  uint64_t v42 = v38 + ((v28 + 16) & ~v28);
  if (!v37) {
    ++v42;
  }
  unint64_t v43 = ((v30 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = ((v31 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  long long v45 = *(_OWORD *)v44;
  *(_OWORD *)(v43 + 9) = *(_OWORD *)(v44 + 9);
  *(_OWORD *)unint64_t v43 = v45;
  *(void *)(v43 + 32) = *(void *)(v44 + 32);
  swift_retain();
  return v48;
}

uint64_t assignWithCopy for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v12 = *v13;
  *(void *)(v12 + 8) = v13[1];
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v13[3];
  v12 += 39;
  unint64_t v14 = (void *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v12 & 0xFFFFFFFFFFFFFFF8) = *v14;
  unint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = v19;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v20 = (void *)(((v16 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v20 = *v21;
  *(void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (((((((((v11 + ((v8 + 17) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = v22 + (v25 | 7) + 8;
  uint64_t v45 = a1;
  uint64_t v27 = (v26 + a1) & ~(v25 | 7);
  uint64_t v28 = (v26 + a2) & ~(v25 | 7);
  *(void *)uint64_t v27 = *(void *)v28;
  swift_retain();
  swift_release();
  uint64_t v29 = (void *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v29 = *v30;
  swift_retain();
  swift_release();
  uint64_t v31 = (void *)(((unint64_t)v29 + v25 + 8) & ~v25);
  double v32 = (void *)(((unint64_t)v30 + v25 + 8) & ~v25);
  double v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v8) = v33(v31, 1, v23);
  int v34 = v33(v32, 1, v23);
  if (v8)
  {
    if (v34)
    {
      int v35 = *(_DWORD *)(v24 + 84);
      size_t v36 = *(void *)(v24 + 64);
LABEL_6:
      if (v35) {
        size_t v37 = v36;
      }
      else {
        size_t v37 = v36 + 1;
      }
      memcpy(v31, v32, v37);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v31, v32, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v31, 0, 1, v23);
  }
  else
  {
    if (v34)
    {
      (*(void (**)(void *, uint64_t))(v24 + 8))(v31, v23);
      int v35 = *(_DWORD *)(v24 + 84);
      size_t v36 = *(void *)(v24 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v31, v32, v23);
  }
LABEL_12:
  uint64_t v38 = *(void *)(v24 + 64) + ((v25 + 16) & ~v25);
  if (!*(_DWORD *)(v24 + 84)) {
    ++v38;
  }
  unint64_t v39 = ((v27 | 7) + v38) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((v28 | 7) + v38) & 0xFFFFFFFFFFFFFFF8;
  char v41 = *(unsigned char *)(v40 + 8);
  *(void *)unint64_t v39 = *(void *)v40;
  *(unsigned char *)(v39 + 8) = v41;
  char v42 = *(unsigned char *)(v40 + 24);
  *(void *)(v39 + 16) = *(void *)(v40 + 16);
  *(unsigned char *)(v39 + 24) = v42;
  *(void *)(v39 + 32) = *(void *)(v40 + 32);
  swift_retain();
  swift_release();
  return v45;
}