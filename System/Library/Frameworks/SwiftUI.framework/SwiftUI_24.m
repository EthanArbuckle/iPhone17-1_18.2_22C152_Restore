uint64_t initializeWithTake for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  long long v14;
  void *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  long long v22;
  long long v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  const void *v35;
  int v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  void (*v40)(void *, void, uint64_t, uint64_t);
  size_t v41;
  size_t v42;
  unint64_t v43;
  long long v44;
  long long v45;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  v6 = *(void *)(*(void *)(a3 + 16) - 8);
  v7 = v6 + 32;
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 17 + a1) & ~v8;
  v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  v11 = *(void *)(v7 + 32) + 7;
  v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = (void *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  v16 = (void *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(unsigned char *)(v18 + 8);
  *(void *)v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  v20 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  v21 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  v23 = *(_OWORD *)v21;
  v22 = *(_OWORD *)(v21 + 16);
  *(void *)(v20 + 32) = *(void *)(v21 + 32);
  *(_OWORD *)v20 = v23;
  *(_OWORD *)(v20 + 16) = v22;
  v24 = (void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8);
  v25 = (void *)((v21 + 47) & 0xFFFFFFFFFFFFFFF8);
  *v24 = *v25;
  *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = *(void *)(a3 + 24);
  v27 = *(void *)(v26 - 8);
  v28 = *(unsigned __int8 *)(v27 + 80);
  v29 = ((((((((((v11 + ((v8 + 17) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v28 | 7)
      + 8;
  v30 = (v29 + a1) & ~(v28 | 7);
  v31 = (v29 + a2) & ~(v28 | 7);
  *(void *)v30 = *(void *)v31;
  v32 = (void *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  v33 = (void *)((v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v32 = *v33;
  v34 = (void *)(((unint64_t)v32 + v28 + 8) & ~v28);
  v35 = (const void *)(((unint64_t)v33 + v28 + 8) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v35, 1, v26))
  {
    v36 = *(_DWORD *)(v27 + 84);
    v37 = *(void *)(v27 + 64);
    if (v36) {
      v38 = v37;
    }
    else {
      v38 = v37 + 1;
    }
    memcpy(v34, v35, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v34, v35, v26);
    v40 = *(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56);
    v39 = v27 + 56;
    v40(v34, 0, 1, v26);
    v36 = *(_DWORD *)(v39 + 28);
    v37 = *(void *)(v39 + 8);
  }
  v41 = v37 + ((v28 + 16) & ~v28);
  if (!v36) {
    ++v41;
  }
  v42 = (v30 | 7) + v41;
  v43 = ((v31 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_OWORD *)v43;
  v45 = *(_OWORD *)(v43 + 16);
  v42 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v42 + 32) = *(void *)(v43 + 32);
  *(_OWORD *)v42 = v44;
  *(_OWORD *)(v42 + 16) = v45;
  return a1;
}

uint64_t assignWithTake for DragReorderableVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 17 + a1) & ~v9;
  uint64_t v11 = (v9 + 17 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v13 = *v14;
  *(void *)(v13 + 8) = v14[1];
  *(void *)(v13 + 16) = v14[2];
  *(void *)(v13 + 24) = v14[3];
  v13 += 39;
  v15 = (void *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15;
  unint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v13 & 0xFFFFFFFFFFFFFFF8) = *v15;
  unint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = v21;
  unint64_t v22 = v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v18 & 0xFFFFFFFFFFFFFFF8);
  long long v24 = *(_OWORD *)v23;
  long long v25 = *(_OWORD *)(v23 + 16);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  *(_OWORD *)unint64_t v22 = v24;
  *(_OWORD *)(v22 + 16) = v25;
  v26 = (void *)(((v18 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  v27 = (void *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v26 = *v27;
  *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = *(void *)(a3 + 24);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  unint64_t v31 = ((((((((((v12 + ((v9 + 17) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v30 | 7)
      + 8;
  uint64_t v32 = (v31 + a1) & ~(v30 | 7);
  uint64_t v48 = (v31 + a2) & ~(v30 | 7);
  *(void *)uint64_t v32 = *(void *)v48;
  swift_release();
  v33 = (void *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  v34 = (void *)((v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  swift_release();
  v35 = (void *)(((unint64_t)v33 + v30 + 8) & ~v30);
  v36 = (void *)(((unint64_t)v34 + v30 + 8) & ~v30);
  v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  LODWORD(v34) = v37(v35, 1, v28);
  int v38 = v37(v36, 1, v28);
  if (v34)
  {
    if (v38)
    {
      int v39 = *(_DWORD *)(v29 + 84);
      size_t v40 = *(void *)(v29 + 64);
LABEL_6:
      if (v39) {
        size_t v41 = v40;
      }
      else {
        size_t v41 = v40 + 1;
      }
      memcpy(v35, v36, v41);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v35, v36, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v35, 0, 1, v28);
  }
  else
  {
    if (v38)
    {
      (*(void (**)(void *, uint64_t))(v29 + 8))(v35, v28);
      int v39 = *(_DWORD *)(v29 + 84);
      size_t v40 = *(void *)(v29 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v35, v36, v28);
  }
LABEL_12:
  uint64_t v42 = *(void *)(v29 + 64) + ((v30 + 16) & ~v30);
  if (!*(_DWORD *)(v29 + 84)) {
    ++v42;
  }
  unint64_t v43 = ((v32 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = ((v48 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  char v45 = *(unsigned char *)(v44 + 8);
  *(void *)unint64_t v43 = *(void *)v44;
  *(unsigned char *)(v43 + 8) = v45;
  char v46 = *(unsigned char *)(v44 + 24);
  *(void *)(v43 + 16) = *(void *)(v44 + 16);
  *(unsigned char *)(v43 + 24) = v46;
  *(void *)(v43 + 32) = *(void *)(v44 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableVStack(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11 <= v6) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  if (v9) {
    uint64_t v16 = 7;
  }
  else {
    uint64_t v16 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v14 + 7;
  unint64_t v18 = (((((((((v14 + 7 + ((v13 + 17) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = v15 | 7;
  uint64_t v20 = v18 + (v15 | 7) + 8;
  if (v12 < a2)
  {
    unint64_t v21 = ((v16 + *(void *)(*(void *)(v7 - 8) + 64) + ((v15 + 16) & ~v15) + (v20 & ~v19)) & 0xFFFFFFFFFFFFFFF8)
        + 40;
    if ((v21 & 0xFFFFFFF8) != 0) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a2 - v12 + 1;
    }
    if (v22 >= 0x10000) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v22 < 0x100) {
      unsigned int v23 = 1;
    }
    if (v22 >= 2) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    switch(v24)
    {
      case 1:
        int v25 = *((unsigned __int8 *)a1 + v21);
        if (!*((unsigned char *)a1 + v21)) {
          break;
        }
        goto LABEL_34;
      case 2:
        int v25 = *(unsigned __int16 *)((char *)a1 + v21);
        if (*(_WORD *)((char *)a1 + v21)) {
          goto LABEL_34;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880405B8);
      case 4:
        int v25 = *(_DWORD *)((char *)a1 + v21);
        if (!v25) {
          break;
        }
LABEL_34:
        int v27 = v25 - 1;
        if ((v21 & 0xFFFFFFF8) != 0)
        {
          int v27 = 0;
          int v28 = *a1;
        }
        else
        {
          int v28 = 0;
        }
        return v12 + (v28 | v27) + 1;
      default:
        break;
    }
  }
  if (v6 < v11)
  {
    uint64_t v29 = (unint64_t *)(((((unint64_t)a1 + v20) & ~v19) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0x80000000) != 0)
    {
      unsigned int v33 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)v29 + v15 + 8) & ~v15, v9, v7);
      if (v33 >= 2) {
        return v33 - 1;
      }
      else {
        return 0;
      }
    }
    unint64_t v30 = *v29;
    goto LABEL_45;
  }
  uint64_t v31 = ((unint64_t)a1 + v13 + 17) & ~v13;
  if (v5 < 0x7FFFFFFF)
  {
    unint64_t v30 = *(void *)((((v17 + v31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
LABEL_45:
    if (v30 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    return (v30 + 1);
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t))(v4 + 48);

  return v32(v31);
}

void storeEnumTagSinglePayload for DragReorderableVStack(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12) {
    unsigned int v16 = v12 - 1;
  }
  else {
    unsigned int v16 = 0;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v17 <= v9) {
    unsigned int v18 = v9;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = v14 + 7;
  size_t v20 = ((((((((((v14 + 7 + ((v13 + 17) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  size_t v21 = v20 + (v15 | 7);
  uint64_t v22 = (v15 + 16) & ~v15;
  if (v12) {
    size_t v23 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  else {
    size_t v23 = *(void *)(*(void *)(v10 - 8) + 64) + 1;
  }
  size_t v24 = v22 + v23;
  size_t v25 = ((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  if (v18 < a3)
  {
    unsigned int v26 = a3 - v18;
    if (((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v27 = v26 + 1;
    }
    else {
      unsigned int v27 = 2;
    }
    if (v27 >= 0x10000) {
      int v6 = 4;
    }
    else {
      int v6 = 2;
    }
    if (v27 < 0x100) {
      int v6 = 1;
    }
    if (v27 < 2) {
      int v6 = 0;
    }
  }
  if (a2 > v18)
  {
    if (((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      int v28 = a2 - v18;
    }
    else {
      int v28 = 1;
    }
    if (((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      int v29 = ~v18 + a2;
      bzero(a1, v25);
      *(_DWORD *)a1 = v29;
    }
    switch(v6)
    {
      case 1:
        a1[v25] = v28;
        return;
      case 2:
        *(_WORD *)&a1[v25] = v28;
        return;
      case 3:
        goto LABEL_87;
      case 4:
        *(_DWORD *)&a1[v25] = v28;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 2:
      *(_WORD *)&a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 3:
LABEL_87:
      __break(1u);
      JUMPOUT(0x188040A3CLL);
    case 4:
      *(_DWORD *)&a1[v25] = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (a2)
      {
LABEL_42:
        if (v9 >= v17)
        {
          if (v9 >= a2)
          {
            unint64_t v36 = (unint64_t)&a1[v13 + 17] & ~v13;
            if (v8 < 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v38 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v38 = a2 - 1;
              }
              *(void *)((((v19 + v36) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) = v38;
            }
            else
            {
              v37 = *(void (**)(unint64_t))(v7 + 56);
              v37(v36);
            }
          }
          else if (v20)
          {
            int v32 = ~v9 + a2;
            bzero(a1, v20);
LABEL_56:
            *(_DWORD *)a1 = v32;
          }
        }
        else
        {
          a1 = (char *)((unint64_t)&a1[v21] & ~(v15 | 7));
          if (v17 >= a2)
          {
            v34 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v16 & 0x80000000) != 0)
            {
              uint64_t v30 = ~v15;
              a1 = (char *)(((unint64_t)v34 + v15 + 8) & ~v15);
              if (v16 >= a2)
              {
                uint64_t v41 = a2 + 1;
                uint64_t v42 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
                v42(((unint64_t)v34 + v15 + 8) & v30, v41, v12, v10);
              }
              else
              {
                if (v23 <= 3) {
                  int v39 = ~(-1 << (8 * v23));
                }
                else {
                  int v39 = -1;
                }
                if (v23)
                {
                  int v32 = v39 & (~v16 + a2);
                  if (v23 <= 3) {
                    int v40 = v23;
                  }
                  else {
                    int v40 = 4;
                  }
                  bzero((void *)(((unint64_t)v34 + v15 + 8) & v30), v23);
                  switch(v40)
                  {
                    case 2:
LABEL_78:
                      *(_WORD *)a1 = v32;
                      break;
                    case 3:
LABEL_85:
                      *(_WORD *)a1 = v32;
                      a1[2] = BYTE2(v32);
                      break;
                    case 4:
                      goto LABEL_56;
                    default:
LABEL_52:
                      *a1 = v32;
                      break;
                  }
                }
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v35 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v35 = a2 - 1;
              }
              void *v34 = v35;
            }
          }
          else
          {
            if (v24 <= 3) {
              int v31 = ~(-1 << (8 * v24));
            }
            else {
              int v31 = -1;
            }
            if (v24)
            {
              int v32 = v31 & (~v17 + a2);
              if (v24 <= 3) {
                int v33 = v22 + v23;
              }
              else {
                int v33 = 4;
              }
              bzero(a1, v24);
              switch(v33)
              {
                case 2:
                  goto LABEL_78;
                case 3:
                  goto LABEL_85;
                case 4:
                  goto LABEL_56;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata completion function for DragReorderableLazyVStack()
{
  return type metadata completion function for DragReorderableVStack();
}

uint64_t initializeBufferWithCopyOfBuffer for DragReorderableLazyVStack(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v9 + 84)) {
    uint64_t v12 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v9 + 64) + 1;
  }
  BOOL v13 = (v10 | v6) <= 7 && ((v10 | *(_DWORD *)(v5 + 80)) & 0x100000) == 0;
  if (v13
    && (uint64_t v14 = v7 + 7,
        unint64_t v15 = ((((((((((v7 + 7 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
                + 47) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + (v10 | 7)
            + 8,
        ((((v10 + 16) & ~(unint64_t)v10)
        + v12
        + 7
        + (v15 & ~(v10 | 7))) & 0xFFFFFFFFFFFFFFF8)
      + 40 <= 0x18))
  {
    size_t __n = v12;
    uint64_t v45 = ~(v10 | 7);
    unint64_t v46 = ((v10 + 16) & ~(unint64_t)v10) + v12 + 7;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    uint64_t v16 = (a1 + v6 + 24) & ~v6;
    uint64_t v47 = v8;
    uint64_t v17 = ((unint64_t)a2 + v6 + 24) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v16, v17);
    unsigned int v18 = (_OWORD *)((v14 + v16) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (_OWORD *)((v14 + v17) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = v19[1];
    *unsigned int v18 = *v19;
    v18[1] = v20;
    size_t v21 = (void *)(((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v19 + 39) & 0xFFFFFFFFFFFFFFF8);
    *size_t v21 = *v22;
    unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = *(void *)v24;
    *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
    *(void *)unint64_t v23 = v25;
    unint64_t v26 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = *(void *)(v27 + 24);
    *(void *)(v26 + 24) = v28;
    *(void *)(v26 + 32) = *(void *)(v27 + 32);
    int v29 = **(void (***)(unint64_t, unint64_t, uint64_t))(v28 - 8);
    swift_bridgeObjectRetain();
    v29(v26, v27, v28);
    uint64_t v30 = (void *)((v26 + 47) & 0xFFFFFFFFFFFFFFF8);
    int v31 = (void *)((v27 + 47) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    *(void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v32 = (void *)((v15 + a1) & v45);
    int v33 = (void *)(((unint64_t)a2 + v15) & v45);
    *int v32 = *v33;
    v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v34 = *v35;
    unint64_t v36 = (void *)(((unint64_t)v34 + v11 + 8) & ~v11);
    v37 = (const void *)(((unint64_t)v35 + v11 + 8) & ~v11);
    uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_retain();
    swift_retain();
    if (v38(v37, 1, v47))
    {
      memcpy(v36, v37, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v36, v37, v47);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v36, 0, 1, v47);
    }
    unint64_t v40 = ((unint64_t)v32 + v46) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = ((unint64_t)v33 + v46) & 0xFFFFFFFFFFFFFFF8;
    long long v42 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 9) = *(_OWORD *)(v41 + 9);
    *(_OWORD *)unint64_t v40 = v42;
    *(void *)(v40 + 32) = *(void *)(v41 + 32);
  }
  else
  {
    uint64_t v39 = *a2;
    *(void *)a1 = *a2;
    a1 = v39 + (((v10 | v6) & 0xF8 ^ 0x1F8) & ((v10 | v6) + 16));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for DragReorderableLazyVStack(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 24 + a1) & ~v6;
  (*(void (**)(uint64_t))(v4 + 8))(v7);
  uint64_t v8 = *(void *)(v5 + 56) + 7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((((((v8 + v7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = (((((((((v8 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (a1 + (v12 | 7) + v9 + 8) & ~(v12 | 7);
  swift_release();
  swift_release();
  unint64_t v14 = (v12 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10)) {
    (*(void (**)(unint64_t, uint64_t))(v11 + 8))(v14, v10);
  }

  return swift_release();
}

uint64_t initializeWithCopy for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 24 + a1) & ~v7;
  uint64_t v9 = (v7 + 24 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 48) + 7;
  uint64_t v11 = (_OWORD *)((v10 + v8) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)((v10 + v9) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  unint64_t v14 = (void *)(((unint64_t)v11 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (void *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  unint64_t v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = ((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)(v20 + 24);
  *(void *)(v19 + 24) = v21;
  *(void *)(v19 + 32) = *(void *)(v20 + 32);
  uint64_t v22 = **(void (***)(unint64_t, unint64_t, uint64_t))(v21 - 8);
  swift_bridgeObjectRetain();
  v22(v19, v20, v21);
  unint64_t v23 = (void *)((v19 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v23 = *v24;
  *(void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (((((((((v10 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)(a3 + 24);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = v25 + (v28 | 7) + 8;
  uint64_t v30 = (v29 + a1) & ~(v28 | 7);
  uint64_t v31 = (v29 + a2) & ~(v28 | 7);
  *(void *)uint64_t v30 = *(void *)v31;
  int v32 = (void *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v33 = (void *)((v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v32 = *v33;
  uint64_t v48 = a1;
  v34 = (void *)(((unint64_t)v32 + v28 + 8) & ~v28);
  uint64_t v35 = (const void *)(((unint64_t)v33 + v28 + 8) & ~v28);
  unint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
  swift_retain();
  swift_retain();
  if (v36(v35, 1, v26))
  {
    int v37 = *(_DWORD *)(v27 + 84);
    uint64_t v38 = *(void *)(v27 + 64);
    if (v37) {
      size_t v39 = *(void *)(v27 + 64);
    }
    else {
      size_t v39 = v38 + 1;
    }
    memcpy(v34, v35, v39);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v34, v35, v26);
    unint64_t v41 = *(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56);
    uint64_t v40 = v27 + 56;
    v41(v34, 0, 1, v26);
    int v37 = *(_DWORD *)(v40 + 28);
    uint64_t v38 = *(void *)(v40 + 8);
  }
  uint64_t v42 = v38 + ((v28 + 16) & ~v28);
  if (!v37) {
    ++v42;
  }
  unint64_t v43 = ((v30 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = ((v31 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  long long v45 = *(_OWORD *)v44;
  *(_OWORD *)(v43 + 9) = *(_OWORD *)(v44 + 9);
  *(_OWORD *)unint64_t v43 = v45;
  *(void *)(v43 + 32) = *(void *)(v44 + 32);
  swift_retain();
  return v48;
}

uint64_t assignWithCopy for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 24 + a1) & ~v8;
  uint64_t v10 = (v8 + 24 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v12 = *v13;
  *(void *)(v12 + 8) = v13[1];
  *(void *)(v12 + 16) = v13[2];
  *(void *)(v12 + 24) = v13[3];
  v12 += 39;
  unint64_t v14 = (void *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v12 & 0xFFFFFFFFFFFFFFF8) = *v14;
  unint64_t v16 = (v12 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = v19;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8), (uint64_t *)(((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v20 = (void *)(((v16 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v20 = *v21;
  *(void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  unint64_t v25 = ((((((((((v11 + ((v8 + 24) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v24 | 7)
      + 8;
  uint64_t v26 = (v25 + a1) & ~(v24 | 7);
  uint64_t v43 = (v25 + a2) & ~(v24 | 7);
  *(void *)uint64_t v26 = *(void *)v43;
  swift_retain();
  swift_release();
  uint64_t v27 = (void *)((v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (void *)((v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v27 = *v28;
  swift_retain();
  swift_release();
  uint64_t v29 = (void *)(((unint64_t)v27 + v24 + 8) & ~v24);
  uint64_t v30 = (void *)(((unint64_t)v28 + v24 + 8) & ~v24);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v27) = v31(v29, 1, v22);
  int v32 = v31(v30, 1, v22);
  if (v27)
  {
    if (v32)
    {
      int v33 = *(_DWORD *)(v23 + 84);
      size_t v34 = *(void *)(v23 + 64);
LABEL_6:
      if (v33) {
        size_t v35 = v34;
      }
      else {
        size_t v35 = v34 + 1;
      }
      memcpy(v29, v30, v35);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v29, v30, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
  }
  else
  {
    if (v32)
    {
      (*(void (**)(void *, uint64_t))(v23 + 8))(v29, v22);
      int v33 = *(_DWORD *)(v23 + 84);
      size_t v34 = *(void *)(v23 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v29, v30, v22);
  }
LABEL_12:
  uint64_t v36 = *(void *)(v23 + 64) + ((v24 + 16) & ~v24);
  if (!*(_DWORD *)(v23 + 84)) {
    ++v36;
  }
  unint64_t v37 = ((v26 | 7) + v36) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((v43 | 7) + v36) & 0xFFFFFFFFFFFFFFF8;
  char v39 = *(unsigned char *)(v38 + 8);
  *(void *)unint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = v39;
  char v40 = *(unsigned char *)(v38 + 24);
  *(void *)(v37 + 16) = *(void *)(v38 + 16);
  *(unsigned char *)(v37 + 24) = v40;
  *(void *)(v37 + 32) = *(void *)(v38 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 24 + a1) & ~v8;
  uint64_t v10 = (v8 + 24 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32) + 7;
  unint64_t v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = (_OWORD *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  long long v14 = v13[1];
  *unint64_t v12 = *v13;
  v12[1] = v14;
  unint64_t v15 = (void *)(((unint64_t)v12 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)v13 + 39) & 0xFFFFFFFFFFFFFFF8);
  void *v15 = *v16;
  unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  unint64_t v20 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = *(_OWORD *)v21;
  long long v22 = *(_OWORD *)(v21 + 16);
  *(void *)(v20 + 32) = *(void *)(v21 + 32);
  *(_OWORD *)unint64_t v20 = v23;
  *(_OWORD *)(v20 + 16) = v22;
  uint64_t v24 = (void *)((v20 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (void *)((v21 + 47) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  *(void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = *(void *)(a3 + 24);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  unint64_t v29 = ((((((((((v11 + ((v8 + 24) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v28 | 7)
      + 8;
  uint64_t v30 = (v29 + a1) & ~(v28 | 7);
  uint64_t v31 = (v29 + a2) & ~(v28 | 7);
  *(void *)uint64_t v30 = *(void *)v31;
  int v32 = (void *)((v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v33 = (void *)((v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v32 = *v33;
  size_t v34 = (void *)(((unint64_t)v32 + v28 + 8) & ~v28);
  size_t v35 = (const void *)(((unint64_t)v33 + v28 + 8) & ~v28);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48))(v35, 1, v26))
  {
    int v36 = *(_DWORD *)(v27 + 84);
    size_t v37 = *(void *)(v27 + 64);
    if (v36) {
      size_t v38 = v37;
    }
    else {
      size_t v38 = v37 + 1;
    }
    memcpy(v34, v35, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v27 + 32))(v34, v35, v26);
    char v40 = *(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56);
    uint64_t v39 = v27 + 56;
    v40(v34, 0, 1, v26);
    int v36 = *(_DWORD *)(v39 + 28);
    size_t v37 = *(void *)(v39 + 8);
  }
  size_t v41 = v37 + ((v28 + 16) & ~v28);
  if (!v36) {
    ++v41;
  }
  size_t v42 = (v30 | 7) + v41;
  unint64_t v43 = ((v31 | 7) + v41) & 0xFFFFFFFFFFFFFFF8;
  long long v44 = *(_OWORD *)v43;
  long long v45 = *(_OWORD *)(v43 + 16);
  v42 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v42 + 32) = *(void *)(v43 + 32);
  *(_OWORD *)size_t v42 = v44;
  *(_OWORD *)(v42 + 16) = v45;
  return a1;
}

uint64_t assignWithTake for DragReorderableLazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 24 + a1) & ~v9;
  uint64_t v11 = (v9 + 24 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  long long v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v13 = *v14;
  *(void *)(v13 + 8) = v14[1];
  *(void *)(v13 + 16) = v14[2];
  *(void *)(v13 + 24) = v14[3];
  v13 += 39;
  unint64_t v15 = (void *)(((unint64_t)v14 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = v15;
  unint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v13 & 0xFFFFFFFFFFFFFFF8) = *v15;
  unint64_t v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 31;
  swift_bridgeObjectRelease();
  unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = v21;
  unint64_t v22 = v18 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v18 & 0xFFFFFFFFFFFFFFF8);
  long long v24 = *(_OWORD *)v23;
  long long v25 = *(_OWORD *)(v23 + 16);
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  *(_OWORD *)unint64_t v22 = v24;
  *(_OWORD *)(v22 + 16) = v25;
  uint64_t v26 = (void *)(((v18 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v26 = *v27;
  *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = *(void *)(a3 + 24);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  unint64_t v31 = ((((((((((v12 + ((v9 + 24) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + (v30 | 7)
      + 8;
  uint64_t v32 = (v31 + a1) & ~(v30 | 7);
  uint64_t v48 = (v31 + a2) & ~(v30 | 7);
  *(void *)uint64_t v32 = *(void *)v48;
  swift_release();
  int v33 = (void *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v34 = (void *)((v48 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  swift_release();
  size_t v35 = (void *)(((unint64_t)v33 + v30 + 8) & ~v30);
  int v36 = (void *)(((unint64_t)v34 + v30 + 8) & ~v30);
  size_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  LODWORD(v34) = v37(v35, 1, v28);
  int v38 = v37(v36, 1, v28);
  if (v34)
  {
    if (v38)
    {
      int v39 = *(_DWORD *)(v29 + 84);
      size_t v40 = *(void *)(v29 + 64);
LABEL_6:
      if (v39) {
        size_t v41 = v40;
      }
      else {
        size_t v41 = v40 + 1;
      }
      memcpy(v35, v36, v41);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v29 + 32))(v35, v36, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v35, 0, 1, v28);
  }
  else
  {
    if (v38)
    {
      (*(void (**)(void *, uint64_t))(v29 + 8))(v35, v28);
      int v39 = *(_DWORD *)(v29 + 84);
      size_t v40 = *(void *)(v29 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v29 + 40))(v35, v36, v28);
  }
LABEL_12:
  uint64_t v42 = *(void *)(v29 + 64) + ((v30 + 16) & ~v30);
  if (!*(_DWORD *)(v29 + 84)) {
    ++v42;
  }
  unint64_t v43 = ((v32 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = ((v48 | 7) + v42) & 0xFFFFFFFFFFFFFFF8;
  char v45 = *(unsigned char *)(v44 + 8);
  *(void *)unint64_t v43 = *(void *)v44;
  *(unsigned char *)(v43 + 8) = v45;
  char v46 = *(unsigned char *)(v44 + 24);
  *(void *)(v43 + 16) = *(void *)(v44 + 16);
  *(unsigned char *)(v43 + 24) = v46;
  *(void *)(v43 + 32) = *(void *)(v44 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DragReorderableLazyVStack(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9) {
    unsigned int v10 = v9 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  if (v11 <= v6) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  if (v9) {
    uint64_t v16 = 7;
  }
  else {
    uint64_t v16 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v14 + 7;
  unint64_t v18 = (((((((((v14 + 7 + ((v13 + 24) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 47) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = v15 | 7;
  uint64_t v20 = v18 + (v15 | 7) + 8;
  if (v12 < a2)
  {
    unint64_t v21 = ((v16 + *(void *)(*(void *)(v7 - 8) + 64) + ((v15 + 16) & ~v15) + (v20 & ~v19)) & 0xFFFFFFFFFFFFFFF8)
        + 40;
    if ((v21 & 0xFFFFFFF8) != 0) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a2 - v12 + 1;
    }
    if (v22 >= 0x10000) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v22 < 0x100) {
      unsigned int v23 = 1;
    }
    if (v22 >= 2) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    switch(v24)
    {
      case 1:
        int v25 = *((unsigned __int8 *)a1 + v21);
        if (!*((unsigned char *)a1 + v21)) {
          break;
        }
        goto LABEL_34;
      case 2:
        int v25 = *(unsigned __int16 *)((char *)a1 + v21);
        if (*(_WORD *)((char *)a1 + v21)) {
          goto LABEL_34;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188042148);
      case 4:
        int v25 = *(_DWORD *)((char *)a1 + v21);
        if (!v25) {
          break;
        }
LABEL_34:
        int v27 = v25 - 1;
        if ((v21 & 0xFFFFFFF8) != 0)
        {
          int v27 = 0;
          int v28 = *a1;
        }
        else
        {
          int v28 = 0;
        }
        return v12 + (v28 | v27) + 1;
      default:
        break;
    }
  }
  if (v6 < v11)
  {
    uint64_t v29 = (unint64_t *)(((((unint64_t)a1 + v20) & ~v19) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0x80000000) != 0)
    {
      unsigned int v33 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)v29 + v15 + 8) & ~v15, v9, v7);
      if (v33 >= 2) {
        return v33 - 1;
      }
      else {
        return 0;
      }
    }
    unint64_t v30 = *v29;
    goto LABEL_45;
  }
  uint64_t v31 = ((unint64_t)a1 + v13 + 24) & ~v13;
  if (v5 < 0x7FFFFFFF)
  {
    unint64_t v30 = *(void *)((((v17 + v31) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8);
LABEL_45:
    if (v30 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    return (v30 + 1);
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t))(v4 + 48);

  return v32(v31);
}

void storeEnumTagSinglePayload for DragReorderableLazyVStack(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12) {
    unsigned int v16 = v12 - 1;
  }
  else {
    unsigned int v16 = 0;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v17 <= v9) {
    unsigned int v18 = v9;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = v14 + 7;
  size_t v20 = ((((((((((v14 + 7 + ((v13 + 24) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 47) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  size_t v21 = v20 + (v15 | 7);
  uint64_t v22 = (v15 + 16) & ~v15;
  if (v12) {
    size_t v23 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  else {
    size_t v23 = *(void *)(*(void *)(v10 - 8) + 64) + 1;
  }
  size_t v24 = v22 + v23;
  size_t v25 = ((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 40;
  if (v18 < a3)
  {
    unsigned int v26 = a3 - v18;
    if (((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      unsigned int v27 = v26 + 1;
    }
    else {
      unsigned int v27 = 2;
    }
    if (v27 >= 0x10000) {
      int v6 = 4;
    }
    else {
      int v6 = 2;
    }
    if (v27 < 0x100) {
      int v6 = 1;
    }
    if (v27 < 2) {
      int v6 = 0;
    }
  }
  if (a2 > v18)
  {
    if (((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFD8) {
      int v28 = a2 - v18;
    }
    else {
      int v28 = 1;
    }
    if (((v22 + v23 + (v21 & ~(v15 | 7)) + 7) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      int v29 = ~v18 + a2;
      bzero(a1, v25);
      *(_DWORD *)a1 = v29;
    }
    switch(v6)
    {
      case 1:
        a1[v25] = v28;
        return;
      case 2:
        *(_WORD *)&a1[v25] = v28;
        return;
      case 3:
        goto LABEL_87;
      case 4:
        *(_DWORD *)&a1[v25] = v28;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 2:
      *(_WORD *)&a1[v25] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 3:
LABEL_87:
      __break(1u);
      JUMPOUT(0x1880425CCLL);
    case 4:
      *(_DWORD *)&a1[v25] = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (a2)
      {
LABEL_42:
        if (v9 >= v17)
        {
          if (v9 >= a2)
          {
            unint64_t v36 = (unint64_t)&a1[v13 + 24] & ~v13;
            if (v8 < 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v38 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v38 = a2 - 1;
              }
              *(void *)((((v19 + v36) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) = v38;
            }
            else
            {
              size_t v37 = *(void (**)(unint64_t))(v7 + 56);
              v37(v36);
            }
          }
          else if (v20)
          {
            int v32 = ~v9 + a2;
            bzero(a1, v20);
LABEL_56:
            *(_DWORD *)a1 = v32;
          }
        }
        else
        {
          a1 = (char *)((unint64_t)&a1[v21] & ~(v15 | 7));
          if (v17 >= a2)
          {
            size_t v34 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v16 & 0x80000000) != 0)
            {
              uint64_t v30 = ~v15;
              a1 = (char *)(((unint64_t)v34 + v15 + 8) & ~v15);
              if (v16 >= a2)
              {
                uint64_t v41 = a2 + 1;
                uint64_t v42 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
                v42(((unint64_t)v34 + v15 + 8) & v30, v41, v12, v10);
              }
              else
              {
                if (v23 <= 3) {
                  int v39 = ~(-1 << (8 * v23));
                }
                else {
                  int v39 = -1;
                }
                if (v23)
                {
                  int v32 = v39 & (~v16 + a2);
                  if (v23 <= 3) {
                    int v40 = v23;
                  }
                  else {
                    int v40 = 4;
                  }
                  bzero((void *)(((unint64_t)v34 + v15 + 8) & v30), v23);
                  switch(v40)
                  {
                    case 2:
LABEL_78:
                      *(_WORD *)a1 = v32;
                      break;
                    case 3:
LABEL_85:
                      *(_WORD *)a1 = v32;
                      a1[2] = BYTE2(v32);
                      break;
                    case 4:
                      goto LABEL_56;
                    default:
LABEL_52:
                      *a1 = v32;
                      break;
                  }
                }
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v35 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v35 = a2 - 1;
              }
              void *v34 = v35;
            }
          }
          else
          {
            if (v24 <= 3) {
              int v31 = ~(-1 << (8 * v24));
            }
            else {
              int v31 = -1;
            }
            if (v24)
            {
              int v32 = v31 & (~v17 + a2);
              if (v24 <= 3) {
                int v33 = v22 + v23;
              }
              else {
                int v33 = 4;
              }
              bzero(a1, v24);
              switch(v33)
              {
                case 2:
                  goto LABEL_78;
                case 3:
                  goto LABEL_85;
                case 4:
                  goto LABEL_56;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
      }
      return;
  }
}

_UNKNOWN **sub_188042614()
{
  return &protocol witness table for DragReorderableLayoutView<A>;
}

_UNKNOWN **sub_188042620()
{
  return &protocol witness table for DragReorderableLayoutView<A>;
}

uint64_t sub_18804262C()
{
  return swift_getWitnessTable();
}

void View.navigationTitle<A>(_:)()
{
}

uint64_t View.navigationTitle<A>(_:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v26 = a8;
  uint64_t v24 = a9;
  uint64_t v25 = a6;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v27 = 0;
  char v19 = v18 & 1;
  Text.assertUnstyled(_:options:)();
  uint64_t v20 = a3 & 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a5, a7);
  uint64_t v21 = AnyView.init<A>(_:)();
  *(void *)&long long v27 = a1;
  *((void *)&v27 + 1) = a2;
  uint64_t v28 = v20;
  uint64_t v29 = a4;
  uint64_t v30 = 1;
  char v31 = 5;
  uint64_t v32 = v21;
  char v33 = 3;
  outlined copy of Text.Storage(a1, a2, v19);
  swift_bridgeObjectRetain();
  View.navigationTitlePreferenceTransform(adding:)(&v27, v25, v26, v24);
  outlined consume of Text?(a1, a2, v20, a4);
  outlined consume of Transaction?(1);
  return swift_release();
}

uint64_t View.navigationTitle<A>(_:icon:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  char v14 = v13 & 1;
  View.navigationTitle<A>(_:icon:)(v10, v11, v13 & 1, v15, a1, a2, a3, a4, a5);
  outlined consume of Text.Storage(v10, v12, v14);

  return swift_bridgeObjectRelease();
}

uint64_t View.navigationTitle<A, B>(_:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v13 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  uint64_t v14 = Text.init<A>(_:)();
  uint64_t v16 = v15;
  char v18 = v17 & 1;
  View.navigationTitle<A>(_:icon:)(v14, v15, v17 & 1, v19, a2, a3, a4, a5, a6);
  outlined consume of Text.Storage(v14, v16, v18);
  return swift_bridgeObjectRelease();
}

uint64_t View.navigationTitle(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v37 = a6;
  uint64_t v35 = a7;
  uint64_t v36 = a5;
  uint64_t v32 = a3;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgMaTm_1(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = &v30[-v12];
  type metadata accessor for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14);
  char v17 = &v30[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = (uint64_t)v17 + *(int *)(v18 + 60);
  uint64_t v20 = LocalizedStringKey.init(stringLiteral:)();
  uint64_t v33 = v21;
  uint64_t v34 = v20;
  int v31 = v22;
  uint64_t v24 = v23;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  *(void *)&long long v41 = a3;
  *((void *)&v41 + 1) = a4;
  type metadata accessor for Binding<String>();
  uint64_t v26 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  MEMORY[0x18C113DA0](v38, v26);
  uint64_t v39 = v38[0];
  uint64_t v40 = v38[1];
  long long v41 = 0u;
  long long v42 = 0u;
  unint64_t v43 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v44 = 0;
  char v45 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v46 = 0;
  char v47 = 0;
  int v48 = 0;
  char v49 = 1;
  __int16 v50 = 2;
  char v51 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v13, 1, 1, v27);
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v39, a1, a2, v32, a4, 0, 0, 0, v19, 0, 0, 0, (uint64_t)v13, v34, v33, v31 & 1, v24);
  type metadata accessor for TextField<Text>(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v19, 0, 1, v28);
  *char v17 = 0;
  MEMORY[0x18C113660](v17, v36, v15, v37);
  return outlined destroy of NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>((uint64_t)v17);
}

void View.navigationSubtitle(_:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.navigationSubtitle<A>(_:)()
{
}

void View.navigationStackHistoryUTType(_:)()
{
}

void type metadata accessor for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>()
{
  if (!lazy cache variable for type metadata for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>)
  {
    type metadata accessor for TextField<Text>(255, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    lazy protocol witness table accessor for type TextField<Text> and conformance TextField<A>();
    unint64_t v0 = type metadata accessor for NavigationPropertiesModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TextField<Text> and conformance TextField<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TextField<Text> and conformance TextField<A>;
  if (!lazy protocol witness table cache variable for type TextField<Text> and conformance TextField<A>)
  {
    type metadata accessor for TextField<Text>(255, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextField<Text> and conformance TextField<A>);
  }
  return result;
}

uint64_t outlined destroy of NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>(uint64_t a1)
{
  type metadata accessor for NavigationPropertiesModifier<Never, EmptyView, TextField<Text>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_188042F98()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880430A8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1880430B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880431C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_188043230(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t assignWithCopy for NavigationTitleStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  uint64_t v16 = (uint64_t *)(a1 + 32);
  uint64_t v17 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1)
  {
    if (v17 != 1)
    {
      uint64_t *v16 = v17;
      swift_retain();
      goto LABEL_16;
    }
    uint64_t v18 = 1;
  }
  else
  {
    if (v17 != 1)
    {
      uint64_t *v16 = v17;
      swift_retain();
      swift_release();
      goto LABEL_16;
    }
    outlined destroy of Transaction(a1 + 32);
    uint64_t v18 = *(void *)(a2 + 32);
  }
  uint64_t *v16 = v18;
LABEL_16:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for NavigationTitleStorage(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    if (v4)
    {
      char v5 = *(unsigned char *)(a2 + 16);
      uint64_t v6 = *(void *)a1;
      uint64_t v7 = *(void *)(a1 + 8);
      char v8 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v5;
      outlined consume of Text.Storage(v6, v7, v8);
      *(void *)(a1 + 24) = v4;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1);
  }
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
LABEL_6:
  char v10 = (uint64_t *)(a1 + 32);
  uint64_t v11 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) != 1)
  {
    if (v11 != 1)
    {
      *char v10 = v11;
      swift_release();
      goto LABEL_11;
    }
    outlined destroy of Transaction(a1 + 32);
    uint64_t v11 = 1;
  }
  *char v10 = v11;
LABEL_11:
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t *specialized static NavigationTitleKey.reduce(value:nextValue:)(uint64_t *result, void *(*a2)(long long *__return_ptr))
{
  uint64_t v2 = result;
  uint64_t v3 = result[3];
  if (v3 == 1)
  {
    unint64_t result = a2(&v26);
    uint64_t v4 = v29;
    char v5 = v30;
    long long v6 = v27;
    *(_OWORD *)uint64_t v2 = v26;
    *((_OWORD *)v2 + 1) = v6;
    *((_OWORD *)v2 + 2) = v28;
    v2[6] = v4;
    *((unsigned char *)v2 + 56) = v5;
  }
  else
  {
    uint64_t v7 = *result;
    uint64_t v8 = result[1];
    uint64_t v9 = result[2];
    if (!v3 || *((unsigned char *)result + 40) == 5 || !result[6])
    {
      unint64_t result = a2(&v26);
      uint64_t v10 = *((void *)&v27 + 1);
      if (*((void *)&v27 + 1) != 1)
      {
        uint64_t v12 = *((void *)&v26 + 1);
        uint64_t v11 = v26;
        char v13 = v27;
        uint64_t v14 = v28;
        uint64_t v15 = v29;
        char v16 = v30;
        char v17 = BYTE8(v28);
        if (!v3)
        {
          uint64_t v8 = *((void *)&v26 + 1);
          uint64_t v7 = v26;
          uint64_t v9 = v27;
          uint64_t v18 = v28;
          outlined copy of Text?(v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1));
          uint64_t v14 = v18;
          char v13 = v9;
          uint64_t v12 = v8;
          uint64_t v11 = v7;
          uint64_t v3 = v10;
        }
        *uint64_t v2 = v7;
        v2[1] = v8;
        v2[2] = v9;
        v2[3] = v3;
        int v19 = *((unsigned __int8 *)v2 + 40);
        if (v19 == 5) {
          LOBYTE(v19) = v17;
        }
        *((unsigned char *)v2 + 40) = v19;
        uint64_t v20 = v2[6];
        if (!v20)
        {
          uint64_t v21 = v11;
          uint64_t v22 = v12;
          char v23 = v13;
          uint64_t v24 = v14;
          swift_retain();
          uint64_t v14 = v24;
          char v13 = v23;
          uint64_t v12 = v22;
          uint64_t v11 = v21;
          uint64_t v20 = v15;
        }
        unint64_t result = (uint64_t *)outlined consume of NavigationTitleStorage?(v11, v12, v13, v10, v14);
        v2[6] = v20;
        int v25 = *((unsigned __int8 *)v2 + 56);
        if (v25 == 3) {
          LOBYTE(v25) = v16;
        }
        *((unsigned char *)v2 + 56) = v25;
      }
    }
  }
  return result;
}

uint64_t sub_1880435F8()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 48) != 1) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

void ImmersiveSpace.init(id:for:content:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.init(id:for:content:defaultValue:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.init(for:content:defaultValue:)()
{
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void ImmersiveSpace.body.getter()
{
}

void ImmersiveSpace.init<A>(content:)()
{
}

{
  ImmersiveSpace.init<A>(content:)();
}

void ImmersiveSpace.init<A>(id:content:)()
{
}

{
  ImmersiveSpace.init<A>(id:content:)();
}

void ImmersiveSpace.init<A>(id:for:content:)()
{
}

void ImmersiveSpace.init<A>(for:content:)()
{
}

void ImmersiveSpace.init<A>(id:for:content:defaultValue:)()
{
}

void ImmersiveSpace.init<A>(for:content:defaultValue:)()
{
}

void NoImmersiveSpaceData.init(from:)()
{
}

void NoImmersiveSpaceData.encode(to:)()
{
}

void NoImmersiveSpaceData.hash(into:)()
{
}

void static NoImmersiveSpaceData.== infix(_:_:)()
{
}

void NoImmersiveSpaceData.hashValue.getter()
{
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ImmersiveSpace<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData()
{
  unint64_t result = lazy protocol witness table cache variable for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData;
  if (!lazy protocol witness table cache variable for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NoImmersiveSpaceData and conformance NoImmersiveSpaceData);
  }
  return result;
}

uint64_t type metadata accessor for ImmersiveSpace()
{
  return swift_getGenericMetadata();
}

ValueMetadata *type metadata accessor for NoImmersiveSpaceData()
{
  return &type metadata for NoImmersiveSpaceData;
}

_UNKNOWN **sub_188043960()
{
  return &protocol witness table for _EmptyScene;
}

void ImmersiveSpace.init<>(id:content:)()
{
}

{
  ImmersiveSpace.init<A>(id:content:)();
}

void ImmersiveSpace.init<>(content:)()
{
}

{
  ImmersiveSpace.init<A>(content:)();
}

void ImmersiveSpace.init(for:content:)()
{
}

unsigned char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ScreenEdgesSystemGestureKey(unsigned char *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  if (result[1] == 1)
  {
    unint64_t result = a2(&v5);
    char v3 = 0;
    char v4 = v5;
    if (BYTE1(v5)) {
      char v4 = 0;
    }
  }
  else
  {
    char v4 = *result;
    char v3 = *result;
  }
  *uint64_t v2 = (v3 | v4);
  return result;
}

uint64_t View.defersSystemGestures(on:)(char a1)
{
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t sub_188043B00()
{
  return swift_deallocObject();
}

char *partial apply for closure #1 in View.defersSystemGestures(on:)(char *result)
{
  char v2 = *(unsigned char *)(v1 + 16);
  if (result[1])
  {
    char v3 = 0;
    result[1] = 0;
  }
  else
  {
    char v3 = *result;
  }
  *unint64_t result = v3 | v2;
  return result;
}

uint64_t sub_188043B38()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<ScreenEdgesSystemGestureKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ScreenEdgesSystemGestureKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScreenEdgesSystemGestureKey()
{
  return &type metadata for ScreenEdgesSystemGestureKey;
}

uint64_t DefaultDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v18 - v13;
  outlined init with copy of DatePickerStyleConfiguration(a1, (uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  _s10Foundation4DateVSgWOcTm_0((uint64_t)v7, (uint64_t)v11, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation4DateVSgWOcTm_0((uint64_t)&v7[v5[8]], (uint64_t)&v11[v9[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  _s10Foundation4DateVSgWOcTm_0((uint64_t)&v7[v5[9]], (uint64_t)&v11[v9[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v15);
  *(void *)&v11[v9[13]] = *(void *)&v7[v5[10]];
  outlined destroy of DatePickerStyleConfiguration((uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined init with copy of DatePickerStyleConfiguration((uint64_t)v14, a2, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined destroy of DatePickerStyleConfiguration((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>();
  return closure #2 in DefaultDatePickerStyle.makeBody(configuration:)(a1, a2 + *(int *)(v16 + 52));
}

uint64_t closure #1 in DefaultDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v17 - v13;
  outlined init with copy of DatePickerStyleConfiguration(a1, (uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  _s10Foundation4DateVSgWOcTm_0((uint64_t)v7, (uint64_t)v11, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation4DateVSgWOcTm_0((uint64_t)&v7[v5[8]], (uint64_t)&v11[v9[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  _s10Foundation4DateVSgWOcTm_0((uint64_t)&v7[v5[9]], (uint64_t)&v11[v9[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v15);
  *(void *)&v11[v9[13]] = *(void *)&v7[v5[10]];
  outlined destroy of DatePickerStyleConfiguration((uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>((uint64_t)v11, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined init with copy of DatePickerStyleConfiguration((uint64_t)v14, a2, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  return outlined destroy of DatePickerStyleConfiguration((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
}

uint64_t closure #2 in DefaultDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a2;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v76 = (uint64_t)v64 - v4;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v75 = (uint64_t)v64 - v6;
  type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  MEMORY[0x1F4188790](v10 - 8);
  v71 = (uint64_t (*)())((char *)v64 - v11);
  uint64_t v12 = type metadata accessor for CollapsibleWheelDatePickerStyle();
  uint64_t v13 = (int *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v64 - v17;
  uint64_t v19 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v20 = (int *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
  uint64_t v24 = (int *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  long long v26 = (char *)v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v67 = (uint64_t)v64 - v28;
  type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>();
  uint64_t v70 = v29 - 8;
  MEMORY[0x1F4188790](v29 - 8);
  uint64_t v69 = (uint64_t)v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>();
  uint64_t v72 = v31 - 8;
  MEMORY[0x1F4188790](v31 - 8);
  uint64_t v81 = (uint64_t)v64 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>();
  uint64_t v74 = v33 - 8;
  MEMORY[0x1F4188790](v33 - 8);
  uint64_t v73 = (uint64_t)v64 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DatePickerStyleConfiguration(a1, (uint64_t)v22, type metadata accessor for DatePickerStyleConfiguration);
  _s10Foundation4DateVSgWOcTm_0((uint64_t)v22, (uint64_t)v26, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation4DateVSgWOcTm_0((uint64_t)&v22[v20[8]], (uint64_t)&v26[v24[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  _s10Foundation4DateVSgWOcTm_0((uint64_t)&v22[v20[9]], (uint64_t)&v26[v24[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v35);
  *(void *)&v26[v24[13]] = *(void *)&v22[v20[10]];
  outlined destroy of DatePickerStyleConfiguration((uint64_t)v22, type metadata accessor for DatePickerStyleConfiguration);
  uint64_t v36 = v67;
  outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>((uint64_t)v26, v67, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  uint64_t *v15 = swift_getKeyPath();
  uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  uint64_t v78 = v38;
  swift_storeEnumTagMultiPayload();
  uint64_t v39 = (uint64_t *)((char *)v15 + v13[7]);
  *uint64_t v39 = swift_getKeyPath();
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], v37);
  uint64_t v68 = v40;
  swift_storeEnumTagMultiPayload();
  long long v41 = (uint64_t *)((char *)v15 + v13[8]);
  *long long v41 = swift_getKeyPath();
  type metadata accessor for Binding<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], v37);
  v64[1] = v42;
  swift_storeEnumTagMultiPayload();
  unint64_t v43 = (char *)v15 + v13[9];
  *unint64_t v43 = 0;
  *((void *)v43 + 1) = 0;
  v66 = type metadata accessor for CollapsibleWheelDatePickerStyle;
  outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>((uint64_t)v15, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CollapsibleWheelDatePickerStyle);
  v65 = type metadata accessor for CollapsibleWheelDatePickerStyle;
  v64[0] = (uint64_t)v9;
  outlined init with copy of DatePickerStyleConfiguration((uint64_t)v18, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CollapsibleWheelDatePickerStyle);
  v80 = type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>;
  uint64_t v44 = v71;
  outlined init with copy of DatePickerStyleConfiguration((uint64_t)v9, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  v79 = type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>;
  outlined destroy of DatePickerStyleConfiguration((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
  uint64_t v45 = v69;
  outlined init with copy of DatePickerStyleConfiguration(v36, v69, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>((uint64_t)v44, v45 + *(int *)(v70 + 44), &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  v71 = type metadata accessor for CollapsibleWheelDatePickerStyle;
  outlined destroy of DatePickerStyleConfiguration((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CollapsibleWheelDatePickerStyle);
  outlined destroy of DatePickerStyleConfiguration(v36, (uint64_t (*)(void))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
  uint64_t *v15 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  uint64_t v46 = (uint64_t *)((char *)v15 + v13[7]);
  *uint64_t v46 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  char v47 = (uint64_t *)((char *)v15 + v13[8]);
  *char v47 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  int v48 = (char *)v15 + v13[9];
  *int v48 = 0;
  *((void *)v48 + 1) = 0;
  uint64_t v49 = (uint64_t)v18;
  __int16 v50 = v66;
  outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>((uint64_t)v15, (uint64_t)v18, (uint64_t (*)(void))v66);
  uint64_t v51 = (uint64_t)v18;
  uint64_t v52 = v64[0];
  v53 = v65;
  outlined init with copy of DatePickerStyleConfiguration(v51, v64[0], (uint64_t (*)(void))v65);
  uint64_t v54 = v75;
  outlined init with copy of DatePickerStyleConfiguration(v52, v75, (uint64_t (*)(void))v80);
  outlined destroy of DatePickerStyleConfiguration(v52, (uint64_t (*)(void))v79);
  uint64_t v55 = v81;
  outlined init with copy of DatePickerStyleConfiguration(v45, v81, (uint64_t (*)(void))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(v54, v55 + *(int *)(v72 + 44), &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  v56 = v71;
  outlined destroy of DatePickerStyleConfiguration(v49, (uint64_t (*)(void))v71);
  outlined destroy of DatePickerStyleConfiguration(v45, (uint64_t (*)(void))type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  uint64_t *v15 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v57 = (uint64_t *)((char *)v15 + v13[7]);
  uint64_t *v57 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v58 = (uint64_t *)((char *)v15 + v13[8]);
  uint64_t *v58 = swift_getKeyPath();
  swift_storeEnumTagMultiPayload();
  v59 = (char *)v15 + v13[9];
  char *v59 = 0;
  *((void *)v59 + 1) = 0;
  outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>((uint64_t)v15, v49, (uint64_t (*)(void))v50);
  outlined init with copy of DatePickerStyleConfiguration(v49, v52, (uint64_t (*)(void))v53);
  uint64_t v60 = v76;
  outlined init with copy of DatePickerStyleConfiguration(v52, v76, (uint64_t (*)(void))v80);
  outlined destroy of DatePickerStyleConfiguration(v52, (uint64_t (*)(void))v79);
  uint64_t v61 = v81;
  uint64_t v62 = v73;
  outlined init with copy of DatePickerStyleConfiguration(v81, v73, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(v60, v62 + *(int *)(v74 + 44), &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  outlined destroy of DatePickerStyleConfiguration(v49, (uint64_t (*)(void))v56);
  outlined destroy of DatePickerStyleConfiguration(v61, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  outlined init with copy of DatePickerStyleConfiguration(v62, v77, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
  return outlined destroy of DatePickerStyleConfiguration(v62, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance DefaultDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in DefaultDatePickerStyle.makeBody(configuration:)(a1, a2);
  type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>();
  return closure #2 in DefaultDatePickerStyle.makeBody(configuration:)(a1, a2 + *(int *)(v4 + 52));
}

uint64_t _s10Foundation4DateVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  type metadata accessor for Binding<Date>(0, a3, MEMORY[0x1E4F27928], a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>)
  {
    type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
    type metadata accessor for DatePickerStyleModifier<CompactDatePickerStyle>(255, &lazy cache variable for type metadata for DatePickerStyleModifier<CompactDatePickerStyle>, (void (*)(void))lazy protocol witness table accessor for type CompactDatePickerStyle and conformance CompactDatePickerStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CompactDatePickerStyle and conformance CompactDatePickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type CompactDatePickerStyle and conformance CompactDatePickerStyle;
  if (!lazy protocol witness table cache variable for type CompactDatePickerStyle and conformance CompactDatePickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompactDatePickerStyle and conformance CompactDatePickerStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>();
    type metadata accessor for DatePickerStyleModifier<CompactDatePickerStyle>(255, &lazy cache variable for type metadata for DatePickerStyleModifier<WheelDatePickerStyle>, (void (*)(void))lazy protocol witness table accessor for type WheelDatePickerStyle and conformance WheelDatePickerStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>)
  {
    type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>()
{
  if (!lazy cache variable for type metadata for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>)
  {
    type metadata accessor for CollapsibleWheelDatePickerStyle();
    lazy protocol witness table accessor for type CollapsibleWheelDatePickerStyle and conformance CollapsibleWheelDatePickerStyle(&lazy protocol witness table cache variable for type CollapsibleWheelDatePickerStyle and conformance CollapsibleWheelDatePickerStyle, (void (*)(uint64_t))type metadata accessor for CollapsibleWheelDatePickerStyle);
    unint64_t v0 = type metadata accessor for DatePickerStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a3);
    type metadata accessor for DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3);
    unint64_t v8 = type metadata accessor for StaticIf();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for DatePickerStyleModifier<CompactDatePickerStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for DatePickerStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in DefaultDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultDatePickerStyle()
{
  return &type metadata for DefaultDatePickerStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>>();
    lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>>();
    lazy protocol witness table accessor for type CollapsibleWheelDatePickerStyle and conformance CollapsibleWheelDatePickerStyle(&lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>, (void (*)(uint64_t))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, DatePickerStyleModifier<CompactDatePickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CollapsibleWheelDatePickerStyle and conformance CollapsibleWheelDatePickerStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, DatePickerStyleModifier<WheelDatePickerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type CollapsibleWheelDatePickerStyle and conformance CollapsibleWheelDatePickerStyle(&lazy protocol witness table cache variable for type DatePicker<DatePickerStyleConfiguration.Label> and conformance DatePicker<A>, (void (*)(uint64_t))type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<DatePicker<DatePickerStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>, (uint64_t)&type metadata for GroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, (uint64_t)&type metadata for InsetGroupedListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetGroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t outlined init with take of DatePicker<DatePickerStyleConfiguration.Label>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, unint64_t *a6)
{
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, DatePickerStyleModifier<CollapsibleWheelDatePickerStyle>, EmptyModifier>(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with copy of DatePickerStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of DatePickerStyleConfiguration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

SwiftUI::StepperFieldDatePickerStyle __swiftcall StepperFieldDatePickerStyle.init()()
{
  result.presentsCalendarOverlay = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::FieldDatePickerStyle __swiftcall FieldDatePickerStyle.init()()
{
  result.presentsCalendarOverlay = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void FieldDatePickerStyle.makeBody(configuration:)()
{
}

uint64_t GraphicalDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  uint64_t v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(void *)(a2 + v3[5]) = 3;
  unint64_t v4 = (uint64_t *)(a2 + v3[6]);
  *unint64_t v4 = swift_getKeyPath();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (uint64_t *)(a2 + v3[7]);
  *uint64_t v6 = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], v5);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (uint64_t *)(a2 + v3[8]);
  *uint64_t v7 = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], v5);

  return swift_storeEnumTagMultiPayload();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in StepperFieldDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in FieldDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in GraphicalDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance GraphicalDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  uint64_t v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(void *)(a2 + v3[5]) = 3;
  unint64_t v4 = (uint64_t *)(a2 + v3[6]);
  *unint64_t v4 = swift_getKeyPath();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (uint64_t *)(a2 + v3[7]);
  *uint64_t v6 = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], v5);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = (uint64_t *)(a2 + v3[8]);
  *uint64_t v7 = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], v5);

  return swift_storeEnumTagMultiPayload();
}

ValueMetadata *type metadata accessor for StepperFieldDatePickerStyle()
{
  return &type metadata for StepperFieldDatePickerStyle;
}

unsigned char *storeEnumTagSinglePayload for StepperFieldDatePickerStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *SwiftUI::FieldDatePickerStyle result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188045BE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *SwiftUI::FieldDatePickerStyle result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FieldDatePickerStyle()
{
  return &type metadata for FieldDatePickerStyle;
}

ValueMetadata *type metadata accessor for GraphicalDatePickerStyle()
{
  return &type metadata for GraphicalDatePickerStyle;
}

uint64_t sub_188045C28()
{
  return lazy protocol witness table accessor for type _SystemDatePicker and conformance _SystemDatePicker(&lazy protocol witness table cache variable for type _SystemDatePicker and conformance _SystemDatePicker, (void (*)(uint64_t))type metadata accessor for _SystemDatePicker);
}

uint64_t type metadata accessor for _SystemDatePicker()
{
  uint64_t result = type metadata singleton initialization cache for _SystemDatePicker;
  if (!type metadata singleton initialization cache for _SystemDatePicker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_188045CBC()
{
  return lazy protocol witness table accessor for type _SystemDatePicker and conformance _SystemDatePicker((unint64_t *)&lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker, (void (*)(uint64_t))type metadata accessor for UIKitDatePicker);
}

uint64_t lazy protocol witness table accessor for type _SystemDatePicker and conformance _SystemDatePicker(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _SystemDatePicker(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v9 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = a3[5];
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for Calendar();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
    }
    else
    {
      *uint64_t v11 = *v12;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v14 = a3[6];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for TimeZone();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
    }
    else
    {
      void *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    long long v41 = a1;
    uint64_t v18 = a3[7];
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v42 = a2;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void *)((char *)a2 + v18 + 8);
    *uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[1] = v21;
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
    uint64_t v23 = *(int *)(v22 + 32);
    uint64_t v24 = (char *)v19 + v23;
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for Date();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    swift_retain();
    swift_retain();
    v28(v24, v25, v26);
    unint64_t v43 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
    uint64_t v29 = v43[6];
    uint64_t v30 = (char *)v19 + v29;
    uint64_t v31 = &v20[v29];
    uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    uint64_t v40 = v28;
    if (v32(&v20[v29], 1, v26))
    {
      _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      v28(v30, v31, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v30, 0, 1, v26);
    }
    uint64_t v34 = v43[7];
    uint64_t v35 = (char *)v19 + v34;
    uint64_t v36 = &v20[v34];
    uint64_t v9 = v41;
    if (v32(&v20[v34], 1, v26))
    {
      _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      v40(v35, v36, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v35, 0, 1, v26);
    }
    *(void *)((char *)v19 + v43[8]) = *(void *)&v20[v43[8]];
    uint64_t v38 = a3[9];
    *((unsigned char *)v41 + a3[8]) = *((unsigned char *)v42 + a3[8]);
    *((unsigned char *)v41 + v38) = *((unsigned char *)v42 + v38);
  }
  return v9;
}

uint64_t destroy for _SystemDatePicker(uint64_t a1, int *a2)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  uint64_t v7 = a1 + a2[6];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  else
  {
    swift_release();
  }
  uint64_t v9 = a1 + a2[7];
  swift_release();
  swift_release();
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v11 = v9 + *(int *)(v10 + 32);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v19(v11, v12);
  uint64_t v14 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v15 = v9 + *(int *)(v14 + 24);
  uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v16(v15, 1, v12)) {
    v19(v15, v12);
  }
  uint64_t v17 = v9 + *(int *)(v14 + 28);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v16)(v17, 1, v12);
  if (!result)
  {
    return ((uint64_t (*)(uint64_t, uint64_t))v19)(v17, v12);
  }
  return result;
}

void *initializeWithCopy for _SystemDatePicker(void *a1, void *a2, int *a3)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Locale();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Calendar();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for TimeZone();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  else
  {
    *uint64_t v12 = *v13;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = a3;
  uint64_t v39 = a2;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a2 + v15 + 8);
  void *v16 = *(void *)((char *)a2 + v15);
  v16[1] = v18;
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v20 = *(int *)(v19 + 32);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = &v17[v20];
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  swift_retain();
  swift_retain();
  v25(v21, v22, v23);
  uint64_t v37 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v26 = v37[6];
  uint64_t v27 = (char *)v16 + v26;
  uint64_t v28 = &v17[v26];
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v29(&v17[v26], 1, v23))
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    v25(v27, v28, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v27, 0, 1, v23);
  }
  uint64_t v31 = v37[7];
  uint64_t v32 = (char *)v16 + v31;
  uint64_t v33 = &v17[v31];
  if (v29(&v17[v31], 1, v23))
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v25(v32, v33, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v32, 0, 1, v23);
  }
  uint64_t result = a1;
  *(void *)((char *)v16 + v37[8]) = *(void *)&v17[v37[8]];
  uint64_t v36 = v38[9];
  *((unsigned char *)a1 + v38[8]) = *((unsigned char *)v39 + v38[8]);
  *((unsigned char *)a1 + v36) = *((unsigned char *)v39 + v36);
  return result;
}

void *assignWithCopy for _SystemDatePicker(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_0((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Locale();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_0((uint64_t)a1 + v8, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v11, MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = type metadata accessor for Calendar();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v9, v10, v12);
    }
    else
    {
      *uint64_t v9 = *v10;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    uint64_t v14 = (void *)((char *)a1 + v13);
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_0((uint64_t)a1 + v13, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v16, MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v17 = type metadata accessor for TimeZone();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 16))(v14, v15, v17);
    }
    else
    {
      void *v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v42 = a2;
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_retain();
  swift_release();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_retain();
  swift_release();
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v22 = *(int *)(v21 + 32);
  uint64_t v23 = &v19[v22];
  uint64_t v24 = &v20[v22];
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  long long v41 = *(void (**)(char *, char *, uint64_t))(v26 + 24);
  v41(v23, v24, v25);
  unint64_t v43 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v27 = v43[6];
  uint64_t v28 = &v19[v27];
  uint64_t v29 = &v20[v27];
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v31 = v30(&v19[v27], 1, v25);
  int v32 = v30(v29, 1, v25);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v28, v29, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v25);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
LABEL_17:
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_18;
  }
  v41(v28, v29, v25);
LABEL_18:
  uint64_t v34 = v43[7];
  uint64_t v35 = &v19[v34];
  uint64_t v36 = &v20[v34];
  int v37 = v30(&v19[v34], 1, v25);
  int v38 = v30(v36, 1, v25);
  if (!v37)
  {
    if (!v38)
    {
      v41(v35, v36, v25);
      goto LABEL_24;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v35, v25);
    goto LABEL_23;
  }
  if (v38)
  {
LABEL_23:
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v35, v36, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v35, 0, 1, v25);
LABEL_24:
  uint64_t result = a1;
  *(void *)&v19[v43[8]] = *(void *)&v20[v43[8]];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)v42 + a3[8]);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)v42 + a3[9]);
  return result;
}

uint64_t _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, a2, a3, MEMORY[0x1E4F3F4D8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

char *initializeWithTake for _SystemDatePicker(char *a1, char *a2, int *a3)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  uint64_t v7 = v6;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  uint64_t v13 = v12;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v10, v11, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  uint64_t v15 = a3[6];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  uint64_t v19 = v18;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, v17, v20);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
  }
  uint64_t v44 = a2;
  uint64_t v21 = a3[7];
  uint64_t v45 = a1;
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = *(void *)&a2[v21 + 8];
  *(void *)uint64_t v22 = *(void *)&a2[v21];
  *((void *)v22 + 1) = v24;
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v26 = *(int *)(v25 + 32);
  uint64_t v27 = &v22[v26];
  uint64_t v28 = &v23[v26];
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v29 - 8);
  int v31 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v31(v27, v28, v29);
  unint64_t v43 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v32 = v43[6];
  uint64_t v33 = &v22[v32];
  uint64_t v34 = &v23[v32];
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v35(&v23[v32], 1, v29))
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v33, v34, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v31(v33, v34, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v33, 0, 1, v29);
  }
  uint64_t v37 = v43[7];
  int v38 = &v22[v37];
  uint64_t v39 = &v23[v37];
  if (v35(&v23[v37], 1, v29))
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    v31(v38, v39, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v38, 0, 1, v29);
  }
  *(void *)&v22[v43[8]] = *(void *)&v23[v43[8]];
  uint64_t v41 = a3[9];
  uint64_t result = v45;
  v45[a3[8]] = v44[a3[8]];
  v45[v41] = v44[v41];
  return result;
}

char *assignWithTake for _SystemDatePicker(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_0((uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v6, MEMORY[0x1E4F3F4D8]);
    uint64_t v8 = v7;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_0((uint64_t)&a1[v10], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v13, MEMORY[0x1E4F3F4D8]);
    uint64_t v15 = v14;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v11, v12, v16);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    uint64_t v17 = a3[6];
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_0((uint64_t)&a1[v17], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68]);
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v20, MEMORY[0x1E4F3F4D8]);
    uint64_t v22 = v21;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v23 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v18, v19, v23);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
  }
  uint64_t v49 = a2;
  uint64_t v24 = a3[7];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  *(void *)&a1[v24] = *(void *)&a2[v24];
  swift_release();
  *((void *)v25 + 1) = *((void *)v26 + 1);
  swift_release();
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v28 = *(int *)(v27 + 32);
  uint64_t v29 = &v25[v28];
  uint64_t v30 = &v26[v28];
  uint64_t v31 = type metadata accessor for Date();
  uint64_t v32 = *(void *)(v31 - 8);
  int v48 = *(void (**)(char *, char *, uint64_t))(v32 + 40);
  v48(v29, v30, v31);
  __int16 v50 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v33 = v50[6];
  uint64_t v34 = &v25[v33];
  uint64_t v35 = &v26[v33];
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v37 = v36(&v25[v33], 1, v31);
  int v38 = v36(v35, 1, v31);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v34, v35, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v31);
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
LABEL_16:
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_17;
  }
  v48(v34, v35, v31);
LABEL_17:
  uint64_t v40 = v50[7];
  uint64_t v41 = &v25[v40];
  uint64_t v42 = &v26[v40];
  int v43 = v36(&v25[v40], 1, v31);
  int v44 = v36(v42, 1, v31);
  if (!v43)
  {
    if (!v44)
    {
      v48(v41, v42, v31);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v41, v31);
    goto LABEL_22;
  }
  if (v44)
  {
LABEL_22:
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_23;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v41, v42, v31);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v41, 0, 1, v31);
LABEL_23:
  uint64_t result = a1;
  *(void *)&v25[v50[8]] = *(void *)&v26[v50[8]];
  uint64_t v47 = a3[9];
  a1[a3[8]] = v49[a3[8]];
  a1[v47] = v49[v47];
  return result;
}

uint64_t getEnumTagSinglePayload for _SystemDatePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188047D90);
}

uint64_t sub_188047D90(uint64_t a1, uint64_t a2, int *a3)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
    if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
    {
      uint64_t v8 = v11;
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = a3[5];
    }
    else
    {
      _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
      if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
      {
        uint64_t v8 = v14;
        uint64_t v12 = *(void *)(v14 - 8);
        uint64_t v13 = a3[6];
      }
      else
      {
        uint64_t v15 = type metadata accessor for DatePickerStyleConfiguration(0);
        if (*(_DWORD *)(*(void *)(v15 - 8) + 84) != a2)
        {
          unsigned int v17 = *(unsigned __int8 *)(a1 + a3[9]);
          if (v17 >= 2) {
            return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
          }
          else {
            return 0;
          }
        }
        uint64_t v8 = v15;
        uint64_t v12 = *(void *)(v15 - 8);
        uint64_t v13 = a3[7];
      }
    }
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

void _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t storeEnumTagSinglePayload for _SystemDatePicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188048054);
}

uint64_t sub_188048054(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = type metadata accessor for DatePickerStyleConfiguration(0);
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(unsigned char *)(a1 + a4[9]) = a2 + 1;
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[7];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void type metadata completion function for _SystemDatePicker()
{
  _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (v0 <= 0x3F)
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    if (v1 <= 0x3F)
    {
      _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for DatePickerStyleConfiguration(319);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in _SystemDatePicker()
{
  return swift_getOpaqueTypeConformance2();
}

unsigned char *storeEnumTagSinglePayload for _SystemDatePicker.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188048558);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for _SystemDatePicker.Style()
{
  return &unk_1ED426838;
}

uint64_t sub_188048590()
{
  return MEMORY[0x1E4F417F0];
}

unint64_t lazy protocol witness table accessor for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style;
  if (!lazy protocol witness table cache variable for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SystemDatePicker.Style and conformance _SystemDatePicker.Style);
  }
  return result;
}

void StepperFieldDatePickerStyle.makeBody(configuration:)()
{
}

uint64_t AutomaticTableStyle.makeBody(configuration:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[14];
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v12, a2, (uint64_t (*)(void))type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>);
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v4, v5);
  outlined copy of Binding<AnyTableColumnCustomization>?(v7, v8);
  return outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>((uint64_t)v12);
}

uint64_t associated type witness table accessor for TableStyle.Body : View in AutomaticTableStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AutomaticTableStyle()
{
  return &type metadata for AutomaticTableStyle;
}

uint64_t specialized ProgressView.init<A>(value:total:label:currentValueLabel:)@<X0>(double a1@<X0>, char a2@<W1>, char a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  double v8 = a1;
  if (a2)
  {
    char v14 = 1;
  }
  else
  {
    if (a1 < 0.0 || a1 > a6)
    {
      static os_log_type_t.fault.getter();
      uint64_t v13 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
    double v8 = 0.0;
    char v14 = 1;
    if (a1 >= 0.0 && a6 >= 0.0)
    {
      if (a1 == 0.0 && a6 == 0.0)
      {
        double v8 = 0.0;
      }
      else
      {
        char v14 = 0;
        double v15 = a1 / a6;
        if (a1 / a6 < 0.0) {
          double v15 = 0.0;
        }
        if (v15 > 1.0) {
          double v15 = 1.0;
        }
        double v8 = v15;
      }
    }
  }
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for CustomProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, void *))type metadata accessor for CustomProgressView);
  uint64_t v17 = *(int *)(v16 + 52);
  uint64_t v18 = (unsigned char *)(a5 + *(int *)(v16 + 56));
  *(double *)a5 = v8;
  *(unsigned char *)(a5 + 8) = v14;
  *(unsigned char *)(a5 + 9) = 0;
  type metadata accessor for ProgressViewValue(0);
  swift_storeEnumTagMultiPayload();
  *(unsigned char *)(a5 + v17) = a3 & 1;
  *uint64_t v18 = a4;
  v18[1] = HIBYTE(a4) & 1;
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>.Base, (uint64_t (*)(uint64_t, void *))type metadata accessor for ProgressView.Base);

  return swift_storeEnumTagMultiPayload();
}

uint64_t closure #1 in closure #1 in ProgressViewGauge.body.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ProgressView);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v22[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v22[-v8];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v22[-v11];
  *(void *)uint64_t v26 = *(void *)a1;
  *(_DWORD *)&v26[7] = *(_DWORD *)(a1 + 7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v26[9], (uint64_t)&v27, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  uint64_t v13 = *(void *)(a1 + 16);
  char v14 = *(unsigned char *)(a1 + 24);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v13, v14);
  specialized Environment.wrappedValue.getter(v13, v14, &v25);
  outlined consume of Environment<Bool>.Content(v13, v14);
  if ((v25 & 2) == 0)
  {
    outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
LABEL_5:
    double v18 = *(double *)v26;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(a1 + 32);
  char v16 = *(unsigned char *)(a1 + 40);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v15, v16);
  char v17 = specialized Environment.wrappedValue.getter(v15, v16);
  outlined consume of Environment<Bool>.Content(v15, v16);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  if ((v17 & 1) == 0) {
    goto LABEL_5;
  }
  double v18 = 0.0;
LABEL_6:
  specialized ProgressView.init<A>(value:total:label:currentValueLabel:)(v18, 0, 0, v26[8], (uint64_t)v9, 1.0);
  outlined init with take of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v9, (uint64_t)v12);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v26[10], (uint64_t)&v25, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v27, (uint64_t)v24, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  outlined init with copy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v12, (uint64_t)v6);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v25, (uint64_t)&v23, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  *a2 = v24[0];
  type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)();
  uint64_t v20 = v19;
  outlined init with copy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v6, (uint64_t)&a2[*(int *)(v19 + 48)]);
  a2[*(int *)(v20 + 64)] = v23;
  outlined destroy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v12);
  return outlined destroy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>((uint64_t)v6);
}

uint64_t protocol witness for View.body.getter in conformance ProgressViewGauge@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v8 = *v1;
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)v1 + 25);
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>, type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>);
  uint64_t v5 = a1 + *(int *)(v4 + 44);
  *(void *)uint64_t v5 = static VerticalAlignment.center.getter();
  *(void *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>, (void (*)(uint64_t))type metadata accessor for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>);
  return closure #1 in closure #1 in ProgressViewGauge.body.getter((uint64_t)&v8, (unsigned char *)(v5 + *(int *)(v6 + 44)));
}

uint64_t AccessoryLinearCapacityGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  char v6 = *((unsigned char *)a1 + 10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5;
  *(unsigned char *)(a2 + 10) = v6;
  *(void *)(a2 + 16) = KeyPath;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in AccessoryLinearCapacityGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearPercentageGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for AccessoryLinearCapacityGaugeStyle()
{
  return &type metadata for AccessoryLinearCapacityGaugeStyle;
}

ValueMetadata *type metadata accessor for LinearPercentageGaugeStyle()
{
  return &type metadata for LinearPercentageGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type ProgressViewGauge and conformance ProgressViewGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewGauge and conformance ProgressViewGauge;
  if (!lazy protocol witness table cache variable for type ProgressViewGauge and conformance ProgressViewGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewGauge and conformance ProgressViewGauge);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProgressViewGauge()
{
  return &type metadata for ProgressViewGauge;
}

uint64_t associated type witness table accessor for View.Body : View in ProgressViewGauge()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>()
{
  if (!lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>)
  {
    type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>);
    }
  }
}

void type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)()
{
  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?))
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
    type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(255, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ProgressView);
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?));
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>()
{
  return lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>);
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _VariadicView.Tree();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with take of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1)
{
  type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(0, &lazy cache variable for type metadata for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
    v9[0] = &type metadata for GaugeStyleConfiguration.Label;
    v9[1] = v6;
    _OWORD v9[2] = &protocol witness table for GaugeStyleConfiguration.Label;
    v9[3] = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>)
  {
    type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>(255, &lazy cache variable for type metadata for VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>>, (uint64_t (*)(uint64_t))type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>, lazy protocol witness table accessor for type HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>> and conformance HStack<A>, MEMORY[0x1E4F415E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>> and conformance VStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>> and conformance HStack<A>()
{
  return lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)>>);
}

uint64_t lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, ProgressView<GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?>, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CarPlay.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t CarPlay.body.getter@<X0>(uint64_t a1@<X8>)
{
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(0x79616C50726143, 0xE700000000000000, 0, 0, 0, (uint64_t)&v15);
  v19[0] = v16;
  v19[1] = v17;
  long long v18 = v15;
  uint64_t v22 = *((void *)&v17 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((uint64_t)v19 + 8, (uint64_t)v21);
  outlined init with take of SceneID((uint64_t)&v18, (uint64_t)v20);
  long long v8 = v15;
  long long v9 = v16;
  long long v10 = v17;
  uint64_t v2 = type metadata accessor for ResolvedUISceneAdaptor();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)((uint64_t)&v8, v2, (uint64_t)&v11);
  outlined release of SceneID((uint64_t)v20);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)v21);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v22);
  long long v3 = v11;
  char v4 = v12;
  uint64_t v5 = v13;
  unint64_t v6 = v14;
  long long v8 = v11;
  LOBYTE(v9) = v12;
  *((void *)&v9 + 1) = v13;
  long long v10 = v14;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v8, v2, a1);
  outlined consume of SceneID(v3, *((uint64_t *)&v3 + 1), v4);
  outlined consume of UISceneAdaptorConfiguration.Kind(v5, v6);
  return swift_release();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in CarPlay<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for CarPlay(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CarPlay(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188049984);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for CarPlay()
{
  return __swift_instantiateGenericMetadata();
}

void PrintItem.init(content:)()
{
}

void PrintItem.content.getter()
{
}

void PrintItem.content.setter()
{
}

void PrintItem.content.modify()
{
}

void static PrintItem._makePrintContent(content:inputs:)()
{
}

uint64_t getEnumTagSinglePayload for PrintItem(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PrintItem(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188049DA4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for PrintItem()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TableSections.init(list:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of TableRowList((uint64_t)a1, a2);
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  if (v6)
  {
    uint64_t v24 = a2;
    type metadata accessor for _ContiguousArrayStorage<Text>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableSections.Item>, (uint64_t)&type metadata for TableSections.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
    uint64_t v8 = a1[3];
    uint64_t v9 = a1[4];
    uint64_t v22 = (uint64_t)a1;
    __swift_project_boxed_opaque_existential_1(a1, v8);
    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
    v27[0] = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    unsigned int v10 = *(uint64_t (**)(void))(*(void *)v6 + 88);
    uint64_t v11 = swift_retain();
    uint64_t v12 = ((uint64_t (*)(uint64_t))v10)(v11);
    int v13 = *(uint64_t (**)(void))(*(void *)v6 + 96);
    uint64_t v14 = v13();
    uint64_t v15 = v10();
    uint64_t result = v13();
    if (v12 < v15 || result < v12)
    {
      __break(1u);
    }
    else
    {
      uint64_t v18 = ((uint64_t (*)(uint64_t))v10)(result);
      uint64_t result = v13();
      if (v14 >= v18 && result >= v14)
      {
        if (!__OFSUB__(v14, v12))
        {
          *(void *)(v7 + 32) = 0;
          *(unsigned char *)(v7 + 40) = 0;
          *(void *)(v7 + 48) = v23;
          outlined init with take of TableRowList?((uint64_t)&v25, v7 + 56);
          *(void *)(v7 + 96) = v6;
          *(unsigned char *)(v7 + 104) = 0;
          *(void *)(v7 + 112) = 0;
          *(void *)(v7 + 120) = v14 - v12;
          swift_release();
          uint64_t result = outlined destroy of TableRowList(v22);
          *(void *)(v24 + 40) = v7;
          return result;
        }
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  uint64_t v20 = outlined init with copy of TableRowList((uint64_t)a1, (uint64_t)v27);
  long long v25 = MEMORY[0x1E4FBC860];
  long long v26 = 0uLL;
  MEMORY[0x1F4188790](v20);
  static Update.ensure<A>(_:)();
  TableSections.Accumulator.finalize()();
  outlined destroy of TableRowList((uint64_t)a1);
  uint64_t v21 = v25;
  swift_bridgeObjectRetain();
  uint64_t result = outlined destroy of TableSections.Accumulator((uint64_t)&v25);
  *(void *)(a2 + 40) = v21;
  return result;
}

uint64_t TableSections.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v27 = a3;
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v38 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v6;
  MatchingID = (int *)type metadata accessor for TableSections.FindMatchingID();
  MEMORY[0x1F4188790](MatchingID);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = *(void *)(v3 + 40);
  unint64_t v11 = *(void *)(v10 + 16);
  uint64_t v28 = v3;
  uint64_t v29 = (char *)&v45 + 8;
  uint64_t v30 = v10 + 32;
  uint64_t v31 = v49;
  uint64_t v36 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  int v37 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v34 = (void (**)(char *, int *))(v12 + 8);
  uint64_t v35 = (uint64_t)&v46 + 8;
  uint64_t v32 = v10;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v14 = 0;
  uint64_t v15 = v38;
  uint64_t v16 = v40;
  if (v11) {
    goto LABEL_3;
  }
LABEL_2:
  long long v46 = 0u;
  long long v47 = 0u;
  long long v45 = 0u;
  *(void *)&long long v48 = 0;
  *((void *)&v48 + 1) = 1;
  long long v17 = v31;
  *uint64_t v31 = 0u;
  v17[1] = 0u;
  unint64_t v14 = v11;
  *((void *)v17 + 4) = 0;
  while (1)
  {
    outlined init with take of (offset: Int, element: TableSections.Item)?((uint64_t)&v45, (uint64_t)&v50);
    if ((void)v54 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v27, 1, 1, v23);
    }
    uint64_t v33 = v50;
    long long v47 = v53;
    long long v48 = v54;
    v49[0] = v55;
    v49[1] = v56;
    long long v45 = v51;
    long long v46 = v52;
    (*v37)(v15, v39, v16);
    uint64_t v22 = v46;
    (*v36)(v9, v15, v16);
    *(void *)&v9[MatchingID[9]] = v22;
    v9[MatchingID[10]] = 0;
    *(void *)&v9[MatchingID[11]] = 0;
    outlined init with copy of TableRowList?(v35, (uint64_t)&v41);
    if (*((void *)&v42 + 1))
    {
      v44[0] = v41;
      v44[1] = v42;
      *(void *)&v44[2] = v43;
      TableRowList.visitRows<A>(applying:from:)();
      outlined destroy of TableRowList((uint64_t)v44);
    }
    else
    {
      outlined destroy of TableRowList?((uint64_t)&v41);
      TableRowList.visitRows<A>(applying:from:)();
    }
    if (v9[MatchingID[10]] == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = v27;
      MEMORY[0x18C10A8A0](*(void *)&v9[MatchingID[11]], v33);
      (*v34)(v9, MatchingID);
      outlined destroy of TableSections.Item((uint64_t)&v45);
      uint64_t v25 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 0, 1, v25);
    }
    (*v34)(v9, MatchingID);
    uint64_t result = outlined destroy of TableSections.Item((uint64_t)&v45);
    if (v14 == v11) {
      goto LABEL_2;
    }
LABEL_3:
    if (v14 >= *(void *)(v32 + 16)) {
      break;
    }
    outlined init with copy of TableSections.Item(v30 + 96 * v14, (uint64_t)v44 + 8);
    *(void *)&long long v45 = v14;
    long long v18 = *(_OWORD *)((char *)&v44[3] + 8);
    uint64_t v19 = v29;
    *((_OWORD *)v29 + 2) = *(_OWORD *)((char *)&v44[2] + 8);
    v19[3] = v18;
    long long v20 = *(_OWORD *)((char *)&v44[5] + 8);
    v19[4] = *(_OWORD *)((char *)&v44[4] + 8);
    v19[5] = v20;
    long long v21 = *(_OWORD *)((char *)&v44[1] + 8);
    ++v14;
    *uint64_t v19 = *(_OWORD *)((char *)v44 + 8);
    v19[1] = v21;
  }
  __break(1u);
  return result;
}

uint64_t TableSections.firstIndexPath(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  char v28 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v13 = v3 + 32;
  unint64_t v4 = *(void *)(v3 + 16);
  uint64_t v14 = v3;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t i = 0;
  if (v4) {
    goto LABEL_3;
  }
LABEL_2:
  memset(v19, 0, 56);
  *(void *)&v19[56] = 1;
  memset(&v19[64], 0, 40);
  for (unint64_t i = v4; ; ++i)
  {
    outlined init with take of (offset: Int, element: TableSections.Item)?((uint64_t)v19, (uint64_t)&v20);
    if ((void)v24 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a2, 1, 1, v10);
    }
    uint64_t v7 = v20;
    *(_OWORD *)&v19[32] = v23;
    *(_OWORD *)&v19[48] = v24;
    *(_OWORD *)&v19[64] = v25;
    *(_OWORD *)&v19[80] = v26;
    *(_OWORD *)uint64_t v19 = v21;
    *(_OWORD *)&v19[16] = v22;
    uint64_t v29 = v22;
    uint64_t v30 = 0;
    uint64_t v8 = outlined init with copy of TableRowList?((uint64_t)&v19[24], (uint64_t)&v15);
    if (*((void *)&v16 + 1))
    {
      v18[0] = v15;
      v18[1] = v16;
      *(void *)&v18[2] = v17;
      MEMORY[0x1F4188790](v8);
      static Update.ensure<A>(_:)();
      outlined destroy of TableRowList((uint64_t)v18);
    }
    else
    {
      uint64_t v9 = outlined destroy of TableRowList?((uint64_t)&v15);
      MEMORY[0x1F4188790](v9);
      static Update.ensure<A>(_:)();
    }
    if (v28 == 1)
    {
      swift_bridgeObjectRelease();
      MEMORY[0x18C10A8A0](v30, v7);
      outlined destroy of TableSections.Item((uint64_t)v19);
      uint64_t v11 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a2, 0, 1, v11);
    }
    uint64_t result = outlined destroy of TableSections.Item((uint64_t)v19);
    if (i == v4) {
      goto LABEL_2;
    }
LABEL_3:
    if (i >= *(void *)(v14 + 16)) {
      break;
    }
    outlined init with copy of TableSections.Item(v13 + 96 * i, (uint64_t)v18 + 8);
    *(void *)uint64_t v19 = i;
    *(_OWORD *)&v19[40] = *(_OWORD *)((char *)&v18[2] + 8);
    *(_OWORD *)&v19[56] = *(_OWORD *)((char *)&v18[3] + 8);
    *(_OWORD *)&v19[72] = *(_OWORD *)((char *)&v18[4] + 8);
    *(_OWORD *)&v19[88] = *(_OWORD *)((char *)&v18[5] + 8);
    *(_OWORD *)&v19[8] = *(_OWORD *)((char *)v18 + 8);
    *(_OWORD *)&v19[24] = *(_OWORD *)((char *)&v18[1] + 8);
  }
  __break(1u);
  return result;
}

void TableSections.Accumulator.finalize()()
{
  uint64_t v1 = *v0;
  if (*((void *)*v0 + 2))
  {
    uint64_t v3 = (uint64_t)v0[2];
    uint64_t v2 = v0[3];
    uint64_t v4 = v3 - (void)v2;
    if (v3 <= (uint64_t)v2) {
      return;
    }
    outlined init with copy of TableRowList((uint64_t)(v0 + 4), (uint64_t)v26);
    uint64_t v5 = (uint64_t)v0[1];
    uint64_t v6 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(v26, v5, v3);
    char v8 = v7;
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    char v25 = v7 & 1;
    outlined copy of ResolvedTableRowIDs.Storage(v6, v7 & 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v1 + 2) + 1, 1, v1);
    }
    unint64_t v14 = *((void *)v1 + 2);
    unint64_t v13 = *((void *)v1 + 3);
    if (v14 >= v13 >> 1) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v1);
    }
    *((void *)v1 + 2) = v14 + 1;
    long long v15 = &v1[96 * v14];
    *((void *)v15 + 4) = v5;
    v15[40] = 0;
    int v16 = v26[0];
    *((_DWORD *)v15 + 11) = *(_DWORD *)((char *)v26 + 3);
    *(_DWORD *)(v15 + 41) = v16;
    *((void *)v15 + 6) = v4;
  }
  else
  {
    outlined init with copy of TableRowList((uint64_t)(v0 + 4), (uint64_t)v26);
    uint64_t v17 = (uint64_t)v0[2];
    uint64_t v6 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(v26, 0, v17);
    char v8 = v18;
    uint64_t v10 = v19;
    uint64_t v12 = v20;
    char v25 = v18 & 1;
    outlined copy of ResolvedTableRowIDs.Storage(v6, v18 & 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v1 + 2) + 1, 1, v1);
    }
    unint64_t v22 = *((void *)v1 + 2);
    unint64_t v21 = *((void *)v1 + 3);
    if (v22 >= v21 >> 1) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v1);
    }
    *((void *)v1 + 2) = v22 + 1;
    long long v15 = &v1[96 * v22];
    *((void *)v15 + 4) = 0;
    v15[40] = 0;
    int v23 = v26[0];
    *((_DWORD *)v15 + 11) = *(_DWORD *)((char *)v26 + 3);
    *(_DWORD *)(v15 + 41) = v23;
    *((void *)v15 + 6) = v17;
  }
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *((void *)v15 + 11) = 0;
  *((void *)v15 + 12) = v6;
  v15[104] = v25;
  *(_DWORD *)(v15 + 105) = *(_DWORD *)v24;
  *((_DWORD *)v15 + 27) = *(_DWORD *)&v24[3];
  *((void *)v15 + 14) = v10;
  *((void *)v15 + 15) = v12;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v6, v8 & 1);
  *unint64_t v0 = v1;
}

uint64_t closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, unsigned char *a5@<X8>)
{
  long long v42 = a5;
  uint64_t v37 = a4;
  long long v41 = a2;
  uint64_t v45 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v36 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v39 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v35 - v8;
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v40 = v46;
  MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v35 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  dispatch thunk of Identifiable.id.getter();
  uint64_t v19 = v14;
  int v20 = swift_dynamicCast();
  uint64_t v21 = v45;
  unint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56);
  v22(v17, v20 ^ 1u, 1, a3);
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v14, v41, a3);
  v22(v14, 0, 1, a3);
  uint64_t v23 = v39;
  long long v24 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
  char v25 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  long long v41 = v17;
  long long v26 = v17;
  uint64_t v27 = v9;
  v25(v9, v26, v39);
  v25(v24, v19, v23);
  char v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v28(v27, 1, a3) != 1)
  {
    v25(v43, v27, v23);
    if (v28(v24, 1, a3) != 1)
    {
      uint64_t v31 = v45;
      uint64_t v32 = v36;
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v36, v24, a3);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v31 + 8);
      v33(v32, a3);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v40 + 8);
      v29(v19, v23);
      v33(v43, a3);
      v29(v27, v23);
      goto LABEL_8;
    }
    uint64_t v29 = *(void (**)(char *, uint64_t))(v40 + 8);
    v29(v19, v23);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v43, a3);
    goto LABEL_6;
  }
  uint64_t v29 = *(void (**)(char *, uint64_t))(v40 + 8);
  v29(v19, v23);
  if (v28(v24, 1, a3) != 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v27, TupleTypeMetadata2);
    char v30 = 0;
    goto LABEL_8;
  }
  v29(v27, v23);
  char v30 = 1;
LABEL_8:
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v41, v23);
  *long long v42 = v30 & 1;
  return result;
}

BOOL protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance TableSections.FindMatchingID<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return specialized TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)(a1, a3, a4, a9, a5, a6, a7, a8);
}

BOOL protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance TableSections.FindMatchingRow()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (*(void *)v0 == v1)
  {
    BOOL result = 0;
    *(unsigned char *)(v0 + 8) = 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = *(void *)(v0 + 24) + 1;
    *(void *)(v0 + 24) = v4;
    *(void *)(v0 + 32) = v1 + 1;
    return v4 != v3;
  }
  return result;
}

uint64_t TableSections.Accumulator.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v57 - v15;
  outlined init with copy of TableRowList?(a3, (uint64_t)&v58);
  if (*((void *)&v59 + 1))
  {
    v65[0] = v58;
    v65[1] = v59;
    uint64_t v17 = v60;
    uint64_t v66 = v60;
    uint64_t v18 = *((void *)&v59 + 1);
    __swift_project_boxed_opaque_existential_1(v65, *((uint64_t *)&v59 + 1));
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v18, v17);
    outlined init with copy of TableRowList((uint64_t)v65, (uint64_t)&v58);
    uint64_t v20 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(&v58, 0, 0x7FFFFFFFFFFFFFFFLL);
    char v22 = v21;
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    char v27 = v21 & 1;
    uint64_t v28 = *(void *)(v7 + 8);
    BOOL v29 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 48))(a2, 1, a6) != 1;
    outlined init with copy of TableRowList((uint64_t)v65, (uint64_t)&v59 + 8);
    *(void *)&long long v58 = v28;
    BYTE8(v58) = v29;
    *(void *)&long long v59 = v19;
    *(void *)&long long v62 = v20;
    BYTE8(v62) = v27;
    *(void *)&long long v63 = v24;
    *((void *)&v63 + 1) = v26;
    char v30 = *(char **)v7;
    outlined copy of ResolvedTableRowIDs.Storage(v20, v27);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v30 + 2) + 1, 1, v30);
    }
    unint64_t v32 = *((void *)v30 + 2);
    unint64_t v31 = *((void *)v30 + 3);
    if (v32 >= v31 >> 1) {
      char v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v30);
    }
    *((void *)v30 + 2) = v32 + 1;
    uint64_t v33 = &v30[96 * v32];
    long long v34 = v59;
    *((_OWORD *)v33 + 2) = v58;
    *((_OWORD *)v33 + 3) = v34;
    long long v35 = v60;
    long long v36 = v61;
    long long v37 = v63;
    *((_OWORD *)v33 + 6) = v62;
    *((_OWORD *)v33 + 7) = v37;
    *((_OWORD *)v33 + 4) = v35;
    *((_OWORD *)v33 + 5) = v36;
    outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v20, v22 & 1);
    *(void *)uint64_t v7 = v30;
    *(void *)(v7 + 16) += v19;
    outlined destroy of TableRowList((uint64_t)v65);
LABEL_7:
    *(void *)(v7 + 24) = *(void *)(v7 + 16);
    goto LABEL_16;
  }
  outlined destroy of TableRowList?((uint64_t)&v58);
  ++*(void *)(v7 + 16);
  int v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 48))(a1, 1, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  if (v38 != 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    goto LABEL_16;
  }
  int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 48))(v16, 1, a6);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (v39 != 1)
  {
    outlined init with copy of TableRowList(v7 + 32, (uint64_t)&v58);
    uint64_t v40 = *(void *)(v7 + 8);
    uint64_t v41 = specialized ResolvedTableRowIDs.init(rowList:start:limit:)(&v58, v40, 1);
    char v43 = v42;
    uint64_t v45 = v44;
    uint64_t v47 = v46;
    char v64 = v42 & 1;
    long long v48 = *(char **)v7;
    outlined copy of ResolvedTableRowIDs.Storage(v41, v42 & 1);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v48 + 2) + 1, 1, v48);
    }
    unint64_t v50 = *((void *)v48 + 2);
    unint64_t v49 = *((void *)v48 + 3);
    unint64_t v51 = v50 + 1;
    if (v50 >= v49 >> 1)
    {
      unint64_t v57 = v50 + 1;
      long long v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v49 > 1), v50 + 1, 1, v48);
      unint64_t v51 = v57;
      long long v48 = v56;
    }
    *((void *)v48 + 2) = v51;
    long long v52 = &v48[96 * v50];
    *((void *)v52 + 4) = v40;
    v52[40] = 0;
    int v53 = v58;
    *((_DWORD *)v52 + 11) = *(_DWORD *)((char *)&v58 + 3);
    *(_DWORD *)(v52 + 41) = v53;
    *((void *)v52 + 6) = 1;
    *(_OWORD *)(v52 + 56) = 0u;
    *(_OWORD *)(v52 + 72) = 0u;
    *((void *)v52 + 11) = 0;
    *((void *)v52 + 12) = v41;
    v52[104] = v64;
    int v54 = *(_DWORD *)((char *)v65 + 3);
    *(_DWORD *)(v52 + 105) = v65[0];
    *((_DWORD *)v52 + 27) = v54;
    *((void *)v52 + 14) = v45;
    *((void *)v52 + 15) = v47;
    outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v41, v43 & 1);
    *(void *)uint64_t v7 = v48;
    goto LABEL_7;
  }
LABEL_16:
  ++*(void *)(v7 + 8);
  return 1;
}

uint64_t outlined destroy of TableSections.Accumulator(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v2);
  return a1;
}

uint64_t outlined init with take of TableRowList?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<Text>(0, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of TableRowList?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<Text>(0, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for TableSections.FindMatchingRow(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TableSections.FindMatchingRow(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)BOOL result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableSections.FindMatchingRow()
{
  return &type metadata for TableSections.FindMatchingRow;
}

uint64_t destroy for TableSections.Accumulator(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for TableSections.Accumulator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v3 = a2 + 32;
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 32, v3, v5);
  return a1;
}

void *assignWithCopy for TableSections.Accumulator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  return a1;
}

uint64_t assignWithTake for TableSections.Accumulator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for TableSections.Accumulator()
{
  return &type metadata for TableSections.Accumulator;
}

uint64_t destroy for TableSections.Item(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 72);

  return outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v2, v3);
}

uint64_t initializeWithCopy for TableSections.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a2 + 24;
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(void *)(v4 + 32) = *(void *)(v5 + 32);
  }
  uint64_t v9 = *(void *)(a2 + 64);
  char v10 = *(unsigned char *)(a2 + 72);
  outlined copy of ResolvedTableRowIDs.Storage(v9, v10);
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = v10;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for TableSections.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
    }
    else
    {
      outlined destroy of TableRowList(a1 + 24);
      uint64_t v7 = *((void *)v5 + 4);
      long long v8 = v5[1];
      *(_OWORD *)uint64_t v4 = *v5;
      *(_OWORD *)(v4 + 16) = v8;
      *(void *)(v4 + 32) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)uint64_t v4 = v9;
    *(_OWORD *)(a1 + 40) = v10;
  }
  uint64_t v11 = *(void *)(a2 + 64);
  char v12 = *(unsigned char *)(a2 + 72);
  outlined copy of ResolvedTableRowIDs.Storage(v11, v12);
  uint64_t v13 = *(void *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v12;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v13, v14);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t assignWithTake for TableSections.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 48))
  {
    if (*(void *)(a2 + 48)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    }
    else {
      outlined destroy of TableRowList(a1 + 24);
    }
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(v4 + 32) = *(void *)(a2 + 56);
  char v7 = *(unsigned char *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = v7;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v8, v9);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableSections.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TableSections.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)BOOL result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableSections.Item()
{
  return &type metadata for TableSections.Item;
}

uint64_t type metadata accessor for TableSections.FindMatchingID()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TableSections.FindMatchingID()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableSections.FindMatchingID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *int v4 = *a2;
    int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
    *(void *)(((unint64_t)v4 + v6 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 23) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TableSections.FindMatchingID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)((v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableSections.FindMatchingID(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18804C14CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_21:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 2) {
    return ((v17 + 2147483646) & 0x7FFFFFFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TableSections.FindMatchingID(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x18804C330);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0xFE)
        {
          *(unsigned char *)(((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 8) = a2 + 1;
        }
        else
        {
          unsigned int v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t destroy for TableSections(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableSections(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for TableSections(uint64_t *a1, uint64_t *a2)
{
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TableSections(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TableSections()
{
  return &type metadata for TableSections;
}

BOOL specialized TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a4 + 24);
  v15[2] = *(void *)(a4 + 16);
  v15[3] = a5;
  v15[4] = a6;
  v15[5] = v10;
  v15[6] = a7;
  v15[7] = a8;
  uint64_t v16 = v8;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:), (uint64_t)v15, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], v11, (uint64_t)&v17);
  if (v17 != 2 && (v17 & 1) != 0)
  {
    BOOL result = 0;
    *(unsigned char *)(v8 + *(int *)(a4 + 40)) = 1;
  }
  else
  {
    uint64_t v12 = *(int *)(a4 + 44);
    uint64_t v13 = *(void *)(v8 + v12) + 1;
    *(void *)(v8 + v12) = v13;
    return v13 != *(void *)(v8 + *(int *)(a4 + 36));
  }
  return result;
}

uint64_t partial apply for closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in TableSections.FindMatchingID.visit<A, B>(rowValue:view:children:traits:)(a1, *(char **)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 40), a2);
}

uint64_t key path getter for EnvironmentValues.sizeCategory : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sizeCategory.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_18804C614@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sizeCategory.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.sizeCategory : EnvironmentValues()
{
  return EnvironmentValues.sizeCategory.setter();
}

uint64_t sub_18804C690()
{
  return EnvironmentValues.sizeCategory.setter();
}

void sub_18804C6C8(uint64_t a1@<X8>)
{
  *(double *)a1 = EnvironmentValues.listRowInsets.getter();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

uint64_t sub_18804C708()
{
  return EnvironmentValues.listRowInsets.setter();
}

uint64_t sub_18804C734()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedContent<A(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedCon, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
}

uint64_t sub_18804C790()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedContent<A(&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<SwitchToggleStyle>>, (void (*)(void))lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>);
}

void View.digitalCrownAccessory<A>(content:)()
{
}

void View.digitalCrownAccessory(visibility:)()
{
}

uint64_t sub_18804C800(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA29DigitalCrownAccessoryModifierVyqd__GGAaBHPxAaBHD1__AgA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for DigitalCrownAccessoryModifier);
}

uint64_t type metadata accessor for DigitalCrownAccessoryModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18804C844()
{
  return swift_getWitnessTable();
}

uint64_t sub_18804C8B0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA29DigitalCrownAccessoryModifierVyqd__GGAaBHPxAaBHD1__AgA0cI0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for DigitalCrownIndicatorModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA29DigitalCrownAccessoryModifierVyqd__GGAaBHPxAaBHD1__AgA0cI0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for DigitalCrownIndicatorModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2)
{
  return destroy for DigitalCrownIndicatorModifier(a1, a2, (void (*)(void, void))outlined consume of Environment<Bool?>.Content);
}

uint64_t initializeWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of Environment<MenuActionDismissBehavior>.Content);
}

uint64_t assignWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool?>.Content);
}

uint64_t assignWithTake for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool?>.Content);
}

uint64_t destroy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  swift_release();
  a3(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));

  return swift_release();
}

uint64_t initializeWithCopy for DigitalCrownAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
}

uint64_t initializeWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 24);
  swift_retain();
  a4(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DigitalCrownAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return assignWithCopy for DigitalCrownIndicatorModifier(a1, a2, a3, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool?>.Content);
}

uint64_t assignWithCopy for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v9;
  swift_retain();
  swift_release();
  uint64_t v10 = *(void *)(a2 + 16);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 24);
  a4(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 24) = v11;
  a5(v12, v13);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for DigitalCrownIndicatorModifier(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  char v7 = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v7;
  a4(v8, v9);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalCrownIndicatorModifier(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalCrownIndicatorModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DigitalCrownIndicatorModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t DigitalCrownAccessoryModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  long long v38 = v2[2];
  char v39 = *((unsigned char *)v2 + 48);
  uint64_t v5 = *((void *)&v38 + 1);
  char v6 = v38;
  if (*((void *)&v38 + 1))
  {
    type metadata accessor for GraphHost();
    swift_retain_n();
    if (static GraphHost.isUpdating.getter())
    {
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v38);
      char v7 = v6 & 1;
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v38);
      char v7 = v30;
    }
    uint64_t v9 = 0;
  }
  else
  {
    LOBYTE(v24) = v38 & 1;
    static os_log_type_t.fault.getter();
    uint64_t v8 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
    uint64_t v9 = v30;
    uint64_t v5 = v31;
    char v7 = v32;
  }
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.focused(_:)(v9, v5, v7, v10, WitnessTable, (uint64_t)&v30);
  swift_release();
  swift_release();
  uint64_t v16 = v30;
  uint64_t v17 = v31;
  char v18 = v32;
  char v19 = v33;
  uint64_t v12 = swift_allocObject();
  long long v13 = *v3;
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v12 + 32) = v13;
  long long v14 = v3[2];
  *(_OWORD *)(v12 + 48) = v3[1];
  *(_OWORD *)(v12 + 64) = v14;
  *(unsigned char *)(v12 + 80) = *((unsigned char *)v3 + 48);
  uint64_t v36 = *((void *)v3 + 2);
  char v37 = *((unsigned char *)v3 + 24);
  outlined retain of State<Bool>((uint64_t)&v38);
  swift_retain();
  outlined retain of Environment<PaletteSelectionEffect>((uint64_t)&v36);
  _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
  type metadata accessor for ModifiedContent();
  uint64_t v22 = WitnessTable;
  uint64_t v23 = &protocol witness table for FocusStateBindingModifier<A>;
  swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v16 = v24;
  uint64_t v17 = v25;
  char v18 = v26;
  char v19 = v27;
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<DigitalCrownViewKey>, (uint64_t)&type metadata for DigitalCrownViewKey, (uint64_t)&protocol witness table for DigitalCrownViewKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v16);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v24 = v30;
  uint64_t v25 = v31;
  char v26 = v32;
  char v27 = v33;
  uint64_t v28 = v34;
  uint64_t v29 = v35;
  static ViewBuilder.buildExpression<A>(_:)(&v24);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in DigitalCrownAccessoryModifier.body(content:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  long long v15 = *(_OWORD *)(a2 + 32);
  char v16 = *(unsigned char *)(a2 + 48);
  char v8 = v15;
  if (!*((void *)&v15 + 1))
  {
LABEL_4:
    if ((v8 & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if (static GraphHost.isUpdating.getter())
  {
    dispatch thunk of AnyLocation.wasRead.setter();
    uint64_t result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v15);
    goto LABEL_4;
  }
  dispatch thunk of AnyLocation.get()();
  uint64_t result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v15);
  if (v14)
  {
LABEL_5:
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)a2, *(void *)(a2 + 8), a3, a4);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(unsigned __int8 *)(a2 + 24);
    swift_retain();
    outlined copy of Environment<Bool>.Content(v9, v10);
    specialized Environment.wrappedValue.getter(v9, v10);
    outlined consume of Environment<Bool?>.Content(v9, v10);
    type metadata accessor for LazyView();
    swift_getWitnessTable();
    View.opacity(_:)();
    swift_release();
    type metadata accessor for ModifiedContent();
    swift_getWitnessTable();
    uint64_t v11 = AnyView.init<A>(_:)();
    uint64_t v12 = *(void *)(v7 + 8);
    outlined copy of Environment<Bool>.Content(v9, v10);
    swift_retain();
    char v13 = specialized Environment.wrappedValue.getter(v9, v10);
    outlined consume of Environment<Bool?>.Content(v9, v10);
    LOBYTE(v10) = *(unsigned char *)(v7 + 17);
    swift_release();
    uint64_t result = swift_release();
    *(void *)uint64_t v7 = v11;
    *(void *)(v7 + 8) = v12;
    *(unsigned char *)(v7 + 16) = v13;
    *(unsigned char *)(v7 + 17) = v10;
    *(_WORD *)(v7 + 18) = 257;
  }
  return result;
}

uint64_t DigitalCrownIndicatorModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  long long v4 = v2[1];
  long long v36 = *v2;
  long long v37 = v4;
  long long v38 = v2[2];
  char v39 = *((unsigned char *)v2 + 48);
  long long v40 = v38;
  char v41 = v39;
  uint64_t v5 = *((void *)&v38 + 1);
  if (*((void *)&v38 + 1))
  {
    type metadata accessor for GraphHost();
    swift_retain_n();
    if (static GraphHost.isUpdating.getter())
    {
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v40);
      char v6 = v38 & 1;
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      outlined release of AnyDynamicChild<A, B>((uint64_t)&v40);
      char v6 = v30;
    }
    uint64_t v8 = 0;
  }
  else
  {
    LOBYTE(v24) = v38 & 1;
    static os_log_type_t.fault.getter();
    uint64_t v7 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
    uint64_t v8 = v30;
    uint64_t v5 = v31;
    char v6 = v32;
  }
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.focused(_:)(v8, v5, v6, v9, WitnessTable, (uint64_t)&v30);
  swift_release();
  swift_release();
  uint64_t v16 = v30;
  uint64_t v17 = v31;
  char v18 = v32;
  char v19 = v33;
  uint64_t v11 = swift_allocObject();
  long long v12 = v36;
  long long v13 = v37;
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 32) = v12;
  long long v14 = v38;
  *(_OWORD *)(v11 + 48) = v13;
  *(_OWORD *)(v11 + 64) = v14;
  *(unsigned char *)(v11 + 80) = v39;
  outlined retain of DigitalCrownIndicatorModifier<A>((uint64_t)&v36);
  _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
  type metadata accessor for ModifiedContent();
  uint64_t v22 = WitnessTable;
  uint64_t v23 = &protocol witness table for FocusStateBindingModifier<A>;
  swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v16 = v24;
  uint64_t v17 = v25;
  char v18 = v26;
  char v19 = v27;
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<DigitalCrownViewKey>, (uint64_t)&type metadata for DigitalCrownViewKey, (uint64_t)&protocol witness table for DigitalCrownViewKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v16);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v24 = v30;
  uint64_t v25 = v31;
  char v26 = v32;
  char v27 = v33;
  uint64_t v28 = v34;
  uint64_t v29 = v35;
  static ViewBuilder.buildExpression<A>(_:)(&v24);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in DigitalCrownIndicatorModifier.body(content:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = result;
  long long v16 = *(_OWORD *)(a2 + 32);
  char v17 = *(unsigned char *)(a2 + 48);
  char v8 = v16;
  if (!*((void *)&v16 + 1))
  {
LABEL_4:
    if ((v8 & 1) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if (static GraphHost.isUpdating.getter())
  {
    dispatch thunk of AnyLocation.wasRead.setter();
    uint64_t result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v16);
    goto LABEL_4;
  }
  dispatch thunk of AnyLocation.get()();
  uint64_t result = outlined release of AnyDynamicChild<A, B>((uint64_t)&v16);
  if (v15)
  {
LABEL_5:
    uint64_t v9 = *(void *)v7;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)a2, *(void *)(a2 + 8), a3, a4);
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = *(unsigned __int8 *)(a2 + 24);
    swift_retain();
    swift_retain();
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11, &v15);
    outlined consume of Environment<Bool?>.Content(v10, v11);
    type metadata accessor for LazyView();
    swift_getWitnessTable();
    View.opacity(_:)();
    swift_release();
    type metadata accessor for ModifiedContent();
    swift_getWitnessTable();
    uint64_t v12 = AnyView.init<A>(_:)();
    char v13 = *(unsigned char *)(v7 + 16);
    swift_release();
    swift_release();
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11, &v15);
    uint64_t result = outlined consume of Environment<Bool?>.Content(v10, v11);
    char v14 = v15;
    *(void *)uint64_t v7 = v9;
    *(void *)(v7 + 8) = v12;
    *(unsigned char *)(v7 + 16) = v13;
    *(unsigned char *)(v7 + 17) = v14;
    *(_WORD *)(v7 + 18) = 257;
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DigitalCrownAccessoryModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18804D9B4()
{
  return objectdestroyTm_29((void (*)(void, void))outlined consume of Environment<Bool?>.Content);
}

uint64_t partial apply for closure #1 in DigitalCrownAccessoryModifier.body(content:)(uint64_t a1)
{
  return closure #1 in DigitalCrownAccessoryModifier.body(content:)(a1, v1 + 32, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>)
  {
    _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<DigitalCrownViewKey>, (uint64_t)&type metadata for DigitalCrownViewKey, (uint64_t)&protocol witness table for DigitalCrownViewKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<DigitalCrownViewKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t sub_18804DA5C()
{
  return objectdestroyTm_29((void (*)(void, void))outlined consume of Environment<Bool?>.Content);
}

uint64_t partial apply for closure #1 in DigitalCrownIndicatorModifier.body(content:)(uint64_t a1)
{
  return closure #1 in DigitalCrownIndicatorModifier.body(content:)(a1, v1 + 32, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined retain of DigitalCrownIndicatorModifier<A>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for DigitalCrownViewKey()
{
  return &type metadata for DigitalCrownViewKey;
}

uint64_t sub_18804DAE4(void *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyAA01_c9Modifier_E0VyAA021DigitalCrownAccessoryF0VyxGGAA017FocusStateBindingF033_274D264A38B51DC68ACC48A91353B7D0LLVySbGGAA020_PreferenceTransformF0VyAA0ghC3KeyVGGAaBHPAoaBHPAjaBHPyHC_AnA0cF0HPyHCHC_AtaVHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for DigitalCrownAccessoryModifier);
}

uint64_t sub_18804DB10(void *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyAA01_c9Modifier_E0VyAA021DigitalCrownAccessoryF0VyxGGAA017FocusStateBindingF033_274D264A38B51DC68ACC48A91353B7D0LLVySbGGAA020_PreferenceTransformF0VyAA0ghC3KeyVGGAaBHPAoaBHPAjaBHPyHC_AnA0cF0HPyHCHC_AtaVHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for DigitalCrownIndicatorModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyAA01_c9Modifier_E0VyAA021DigitalCrownAccessoryF0VyxGGAA017FocusStateBindingF033_274D264A38B51DC68ACC48A91353B7D0LLVySbGGAA020_PreferenceTransformF0VyAA0ghC3KeyVGGAaBHPAoaBHPAjaBHPyHC_AnA0cF0HPyHCHC_AtaVHPyHCHCTm(void *a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance DigitalCrownViewKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E90FC768;
  __int16 v3 = dword_1E90FC770;
  char v4 = BYTE2(dword_1E90FC770);
  char v5 = HIBYTE(dword_1E90FC770);
  *(void *)a1 = static DigitalCrownViewKey.defaultValue;
  *(void *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 18) = v4;
  *(unsigned char *)(a1 + 19) = v5;
  swift_retain();

  return swift_retain();
}

uint64_t specialized static DigitalCrownViewKey.reduce(value:nextValue:)(uint64_t result, void (*a2)(void *__return_ptr))
{
  if ((*(unsigned char *)(result + 19) & 1) == 0)
  {
    uint64_t v2 = result;
    a2(v10);
    uint64_t v3 = v10[1];
    char v4 = v11;
    char v5 = v12;
    char v6 = v13;
    uint64_t v7 = *(void *)v2;
    uint64_t v8 = v10[0];
    if (!v10[0])
    {
      swift_retain();
      uint64_t v8 = v7;
    }
    swift_retain();
    swift_release();
    *(void *)uint64_t v2 = v8;
    uint64_t v9 = *(void *)(v2 + 8);
    if (!v3)
    {
      swift_retain();
      uint64_t v3 = v9;
    }
    swift_release();
    unint64_t result = swift_release();
    *(void *)(v2 + 8) = v3;
    *(unsigned char *)(v2 + 16) = v4;
    *(unsigned char *)(v2 + 17) = v5;
    *(unsigned char *)(v2 + 18) = (*(unsigned char *)(v2 + 18) | v6) & 1;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DigitalCrownViewStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DigitalCrownViewStorage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

uint64_t assignWithTake for DigitalCrownViewStorage(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  *(unsigned char *)(a1 + 19) = *(unsigned char *)(a2 + 19);
  return a1;
}

uint64_t getEnumTagSinglePayload for DigitalCrownViewStorage(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 20)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DigitalCrownViewStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalCrownViewStorage()
{
  return &type metadata for DigitalCrownViewStorage;
}

void View.digitalCrownAccessory(_:)()
{
}

void View.digitalCrownIndicator<A>(content:)()
{
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance UpdateFidelityKey(void *a1@<X8>)
{
  *a1 = 3;
}

uint64_t EnvironmentValues.updateFidelity.setter()
{
  type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>();
  _s10Foundation4DateVACSLAAWlTm_6(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UpdateFidelityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t DateSequenceTimeline.requestedFidelityForStartEntry(in:withPreviousEntry:)(void *a1, void *a2)
{
  uint64_t v74 = a1;
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v62 - v7;
  type metadata accessor for (lower: Date, upper: Date)();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v73 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v62 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v76 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v62 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v62 - v22;
  MEMORY[0x1F4188790](v24);
  char v26 = (char *)&v62 - v25;
  type metadata accessor for Range<Date>();
  MEMORY[0x1F4188790](v27);
  double v32 = MEMORY[0x1F4188790](v28);
  if (!a2)
  {
    uint64_t v69 = v29;
    uint64_t v70 = v31;
    uint64_t v71 = (uint64_t)&v62 - v30;
    uint64_t v72 = v8;
    long long v63 = v17;
    char v64 = v20;
    v65 = v5;
    outlined init with copy of TableColumnList((uint64_t)v75 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule, (uint64_t)v78);
    uint64_t v34 = v79;
    uint64_t v68 = v80;
    uint64_t v35 = __swift_project_boxed_opaque_existential_1(v78, v79);
    DateInterval.start.getter();
    static Date.distantFuture.getter();
    _s10Foundation4DateVACSLAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
    uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
    if ((result & 1) == 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v66 = v10;
    uint64_t v67 = v34;
    uint64_t v36 = v10;
    uint64_t v37 = *(int *)(v10 + 48);
    uint64_t v74 = v35;
    long long v38 = v14;
    char v39 = &v14[v37];
    uint64_t v40 = v76;
    char v41 = v73;
    uint64_t v42 = v76 + 32;
    char v43 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
    v43(v38, v26, v15);
    v43(v39, v23, v15);
    uint64_t v44 = &v41[*(int *)(v36 + 48)];
    uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v45(v41, v38, v15);
    v45(v44, v39, v15);
    uint64_t v46 = v70;
    v43((char *)v70, v41, v15);
    uint64_t v47 = *(void (**)(char *, uint64_t))(v40 + 8);
    v47(v44, v15);
    long long v48 = &v41[*(int *)(v66 + 48)];
    unint64_t v49 = v38;
    unint64_t v50 = (void (*)(char *, uint64_t, uint64_t))v43;
    v43(v41, v49, v15);
    v43(v48, v39, v15);
    uint64_t v51 = v46 + *(int *)(v69 + 36);
    uint64_t v69 = v42;
    v43((char *)v51, v48, v15);
    uint64_t v73 = (char *)v47;
    uint64_t v66 = v40 + 8;
    v47(v41, v15);
    uint64_t v52 = v71;
    outlined init with take of Range<Date>(v46, v71);
    char v77 = 1;
    TimelineSchedule.lazyEntries(within:mode:limit:)();
    _sypSgWOhTm_10(v52, (uint64_t (*)(void))type metadata accessor for Range<Date>);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
    uint64_t v53 = (uint64_t)v72;
    dispatch thunk of _AnyIteratorBoxBase.next()();
    int v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
    if (v54(v53, 1, v15) != 1)
    {
      long long v55 = v64;
      v50(v64, v53, v15);
      uint64_t v53 = (uint64_t)v65;
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (v54(v53, 1, v15) != 1)
      {
        unint64_t v57 = v50;
        long long v58 = (void (*)(char *, uint64_t))v73;
        long long v59 = v63;
        v57(v63, v53, v15);
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        Class v61 = Date._bridgeToObjectiveC()().super.isa;
        id v56 = objc_msgSend(v75, sel_estimatedFidelityForPresentationTime_nextPresentationTime_, isa, v61);

        swift_release();
        v58(v59, v15);
        v58(v55, v15);
        return (uint64_t)v56;
      }
      ((void (*)(char *, uint64_t))v73)(v55, v15);
    }
    swift_release();
    _sypSgWOhTm_10(v53, (uint64_t (*)(void))type metadata accessor for Date?);
    return 0;
  }

  return (uint64_t)objc_msgSend(a2, sel_requestedFidelity, v32);
}

uint64_t areEqual #1 <A>(_:_:) in static DateSequenceTimeline.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v17[-v7];
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(a2, (uint64_t)v17);
  int v13 = swift_dynamicCast();
  char v14 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  if (v13)
  {
    v14(v8, 0, 1, a3);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v12, v8, a3);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, a3);
  }
  else
  {
    v14(v8, 1, 1, a3);
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
    char v15 = 0;
  }
  return v15 & 1;
}

Swift::Void __swiftcall TimelineView.Context.invalidateTimelineContent()()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(unint64_t, unint64_t))(*(void *)Strong + 80))(0xD00000000000001ELL, 0x800000018833ECC0);
    swift_release();
  }
}

uint64_t (*TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v20 - v12;
  char v14 = (objc_class *)type metadata accessor for DateSequenceTimeline();
  uint64_t Value = AGGraphGetValue();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v16(v13, Value, a3);
  v16(v10, (uint64_t)v13, a3);
  id v17 = a1;
  id v18 = specialized DateSequenceTimeline.__allocating_init(identifier:schedule:)((uint64_t)v17, (uint64_t)v10, v14, a3, a5);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, a3);
  *(void *)(swift_allocObject() + 16) = v18;
  return partial apply for closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter;
}

uint64_t closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(void *a1, void *a2)
{
  id v3 = a2;
  MEMORY[0x18C115B40]();
  if (*(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

BOOL TimelineIdentifier.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast())
    {
      uint64_t v3 = *(void *)&v5[OBJC_IVAR____TtC7SwiftUI18TimelineIdentifier_identifier];

      return v3 == *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI18TimelineIdentifier_identifier);
    }
  }
  else
  {
    _sypSgWOhTm_10((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Any?);
  }
  return 0;
}

void type metadata accessor for (lower: Date, upper: Date)()
{
  if (!lazy cache variable for type metadata for (lower: Date, upper: Date))
  {
    type metadata accessor for Date();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (lower: Date, upper: Date));
    }
  }
}

void type metadata accessor for Range<Date>()
{
  if (!lazy cache variable for type metadata for Range<Date>)
  {
    type metadata accessor for Date();
    _s10Foundation4DateVACSLAAWlTm_6((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>);
    }
  }
}

uint64_t outlined init with take of Range<Date>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Range<Date>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized DateSequenceTimeline.unconfiguredEntries(for:previousEntry:)()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = DateInterval.duration.getter();
  double v7 = fmin(v6 * 4.0, 1.84467441e19);
  if ((~*(void *)&v7 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v7 <= -1.0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v7 >= 1.84467441e19)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  outlined init with copy of TableColumnList(v0 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule, (uint64_t)v23);
  __swift_project_boxed_opaque_existential_1(v23, v23[3]);
  LOBYTE(v22) = 1;
  uint64_t v8 = TimelineSchedule.entries(within:mode:limit:)();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v10 = self;
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v11 = v2 + 16;
    uint64_t v20 = v12;
    id v21 = v10;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    v19[1] = v8;
    uint64_t v14 = v8 + ((v13 + 32) & ~v13);
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v20(v4, v14, v1);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v17 = objc_msgSend(v21, sel_entryForPresentationTime_withRequestedFidelity_, isa, -1);

      (*(void (**)(char *, uint64_t))(v11 - 8))(v4, v1);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v14 += v15;
      --v9;
    }
    while (v9);
    uint64_t v18 = v22;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v18;
}

unint64_t type metadata accessor for BLSAlwaysOnTimelineUnconfiguredEntry()
{
  unint64_t result = lazy cache variable for type metadata for BLSAlwaysOnTimelineUnconfiguredEntry;
  if (!lazy cache variable for type metadata for BLSAlwaysOnTimelineUnconfiguredEntry)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BLSAlwaysOnTimelineUnconfiguredEntry);
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateFidelityKey()
{
  return &type metadata for UpdateFidelityKey;
}

uint64_t sub_18804F4C8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_18804F500()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(void *a1)
{
  return closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(a1, *(void **)(v1 + 16));
}

uint64_t NavigationStateHost.seedHost.getter()
{
  return swift_retain();
}

uint64_t NavigationStateHost.__deallocating_deinit()
{
  outlined init with take of NavigationState?(v0 + 16, (uint64_t)v2);
  outlined release of NavigationState?(v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t static Animation.uiViewAnimation(curve:duration:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
    case 6:
      uint64_t result = static Animation.easeInOut(duration:)();
      break;
    case 1:
      uint64_t result = static Animation.easeIn(duration:)();
      break;
    case 2:
      uint64_t result = static Animation.easeOut(duration:)();
      break;
    case 3:
      uint64_t result = static Animation.linear(duration:)();
      break;
    case 4:
      uint64_t result = static Animation.timingCurve(_:_:_:_:duration:)();
      break;
    case 5:
      uint64_t result = static Animation.coreAnimationDefault(duration:)();
      break;
    case 7:
      uint64_t result = static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)();
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

id UIBezierPath.init(_:)(uint64_t a1)
{
  Path.roundedRect()();
  if (v30 == 2 || (FixedRoundedRect.isUniform.getter() & 1) == 0)
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    uint64_t v14 = (void *)Path.cgPath.getter();
    id v15 = objc_msgSend(ObjCClassFromMetadata, sel_bezierPathWithCGPath_, v14);
    outlined release of Path(a1);

    return v15;
  }
  else
  {
    char v2 = FixedRoundedRect.needsContinuousCorners.getter();
    uint64_t v3 = (objc_class *)swift_getObjCClassFromMetadata();
    uint64_t v4 = v3;
    if (v2)
    {
      FixedRoundedRect.rect.getter();
      double v26 = v6;
      double v28 = v5;
      double v8 = v7;
      double v10 = v9;
      FixedRoundedRect.cornerSize.getter();
      id v12 = -[objc_class bezierPathWithRoundedRect:cornerRadius:](v4, sel_bezierPathWithRoundedRect_cornerRadius_, v28, v26, v8, v10, v11);
    }
    else
    {
      id v17 = objc_allocWithZone(v3);
      FixedRoundedRect.rect.getter();
      double v27 = v19;
      double v29 = v18;
      double v21 = v20;
      double v23 = v22;
      FixedRoundedRect.cornerSize.getter();
      id v12 = objc_msgSend(v17, sel_initWithArcRoundedRectForSwiftUI_cornerRadius_, v29, v27, v21, v23, v24);
    }
    id v25 = v12;
    outlined release of Path(a1);
    return v25;
  }
}

uint64_t UIUserInterfaceStyle.init(_:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  uint64_t v2 = 1;
  if (v1) {
    uint64_t v2 = 2;
  }
  if (v1 == 2) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t LayoutDirection.init(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result == 1)
  {
    *a2 = 1;
  }
  else if (result)
  {
    *a2 = 2;
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

id UIColor.staticColor.getter()
{
  if (_UIColorDependsOnTraitCollection(v0)) {
    return 0;
  }
  else {
    return objc_msgSend(v0, sel_CGColor);
  }
}

uint64_t protocol witness for ColorProvider.colorDescription.getter in conformance UIColor()
{
  return MEMORY[0x1F40FDDD8]();
}

uint64_t ColorScheme.init(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result == 2)
  {
    *a2 = 1;
  }
  else if (result == 1)
  {
    *a2 = 0;
  }
  else
  {
    *a2 = 2;
  }
  return result;
}

uint64_t ColorSchemeContrast.init(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 2 * (result != 0);
  if (result == 1) {
    char v2 = 1;
  }
  *a2 = v2;
  return result;
}

uint64_t UIAccessibilityContrast.init(_:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 2) {
    return -1;
  }
  else {
    return v1 & 1;
  }
}

void ContentSizeCategory.init(_:)(void *a1@<X0>, unsigned char *a2@<X8>)
{
  DynamicTypeSize.init(uiSizeCategory:)(a1, &v3);
  *a2 = v3;
}

id UIContentSizeCategory.init(_:)(char *a1)
{
  return **((id **)&unk_1E53B9580 + *a1);
}

{
  return **((id **)&unk_1E53B9580 + *a1);
}

uint64_t UITraitEnvironmentLayoutDirection.init(_:)(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t UILegibilityWeight.init(_:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 2) {
    return -1;
  }
  else {
    return v1 & 1;
  }
}

uint64_t UIUserInterfaceSizeClass.init(_:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  uint64_t v2 = 1;
  if (v1) {
    uint64_t v2 = 2;
  }
  if (v1 == 2) {
    return 0;
  }
  else {
    return v2;
  }
}

id UIBlurEffect.init(materialID:)(uint64_t a1)
{
  int v1 = *(void **)a1;
  switch(*(unsigned char *)(a1 + 8))
  {
    case 1:
      uint64_t v12 = *(void *)a1;
      unsigned __int8 v13 = 1;
      goto LABEL_7;
    case 2:
      uint64_t v12 = *(void *)a1;
      unsigned __int8 v13 = 2;
LABEL_7:
      outlined consume of Material.ID(v12, v13);
      id v11 = 0;
      break;
    case 3:
      uint64_t v14 = 6;
      id v11 = 0;
      switch((unint64_t)v1)
      {
        case 1uLL:
          uint64_t v14 = 7;
          goto LABEL_13;
        case 2uLL:
          uint64_t v14 = 4;
          goto LABEL_13;
        case 3uLL:
        case 4uLL:
          uint64_t v14 = 9;
          goto LABEL_13;
        case 5uLL:
          uint64_t v14 = 10;
          goto LABEL_13;
        case 6uLL:
        case 7uLL:
          return v11;
        default:
LABEL_13:
          id v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_effectWithStyle_, v14);
          break;
      }
      break;
    default:
      uint64_t v2 = v1[2];
      uint64_t v3 = v1[3];
      uint64_t v4 = v1[4];
      uint64_t v5 = v1[5];
      double v6 = (void *)v1[6];
      ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
      id v8 = v6;
      double v9 = (void *)MEMORY[0x18C115780](v2, v3);
      double v10 = (void *)MEMORY[0x18C115780](v4, v5);
      id v11 = objc_msgSend(ObjCClassFromMetadata, sel__effectForLightMaterial_darkMaterial_bundle_, v9, v10, v8);

      if (v11) {
      outlined consume of Material.ID((uint64_t)v1, 0);
      }
      break;
  }
  return v11;
}

uint64_t specialized UITableViewScrollPosition.init(_:)(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return 0;
  }
  static UnitPoint.bottom.getter();
  if (static UnitPoint.== infix(_:_:)()) {
    return 3;
  }
  static UnitPoint.bottomLeading.getter();
  if (static UnitPoint.== infix(_:_:)()) {
    return 3;
  }
  static UnitPoint.bottomTrailing.getter();
  if (static UnitPoint.== infix(_:_:)()) {
    return 3;
  }
  static UnitPoint.top.getter();
  if (static UnitPoint.== infix(_:_:)()) {
    return 1;
  }
  static UnitPoint.topLeading.getter();
  if (static UnitPoint.== infix(_:_:)()) {
    return 1;
  }
  static UnitPoint.topTrailing.getter();
  if (static UnitPoint.== infix(_:_:)()) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_18804FCE8()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in static Transaction.currentUIViewTransaction(canDisableAnimations:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_invalidate);
}

void __swiftcall CarouselListStyle.init()()
{
}

void static CarouselListStyle._makeView<A>(value:inputs:)()
{
}

void static CarouselListStyle._makeViewList<A>(value:inputs:)()
{
}

ValueMetadata *type metadata accessor for CarouselListStyle()
{
  return &type metadata for CarouselListStyle;
}

uint64_t Preview.init(_:traits:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v7 = type metadata accessor for PreviewSourceContentCategory();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v8 = type metadata accessor for PreviewSourceContentDomain();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
  double v13 = MEMORY[0x1F4188790](v12);
  (*(void (**)(char *, void, uint64_t, double))(v9 + 104))(v11, *MEMORY[0x1E4F252E8], v8, v13);
  PreviewSourceContentCategory.init(stringLiteral:)();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  swift_retain();
  DefaultPreviewSource.init(contentDomain:contentCategory:supportsOnDevicePreviews:supportsInteractivePreviews:body:)();
  type metadata accessor for Preview.ViewTraits();
  lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>();
  Preview.init<A, B>(displayName:source:traits:)();
  return swift_release();
}

void type metadata accessor for DefaultPreviewSource<ViewPreviewBody>()
{
  if (!lazy cache variable for type metadata for DefaultPreviewSource<ViewPreviewBody>)
  {
    unint64_t v0 = type metadata accessor for DefaultPreviewSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DefaultPreviewSource<ViewPreviewBody>);
    }
  }
}

uint64_t Preview.init<A>(_:traits:arguments:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v17[2] = a2;
  v17[3] = a3;
  v17[1] = a1;
  type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = type metadata accessor for PreviewArguments();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v15 = (char *)v17 - v14;
  buildArguments #1 <A>() in Preview.init<A>(_:traits:arguments:body:)(a4);
  swift_bridgeObjectRelease();
  static PreviewSource<>.viewGroupSource<A>(arguments:body:)((uint64_t)v15, a5, a6, a7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  type metadata accessor for Preview.ViewTraits();
  lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>();
  Preview.init<A, B>(displayName:source:traits:)();
  return swift_release();
}

uint64_t buildArguments #1 <A>() in Preview.init<A>(_:traits:arguments:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PreviewArgumentsBuilder.Component();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10[1] = a1;
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v6 = static PreviewArgumentsBuilder.buildExpression<A>(_:)();
  MEMORY[0x1F4188790](v6);
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(v7, (char *)v10 - v5, v2);
  _finalizeUninitializedArray<A>(_:)();
  MEMORY[0x18C10AE10]();
  swift_bridgeObjectRelease();
  static PreviewArgumentsBuilder.buildFinalResult(_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v3 + 8);
  v8((char *)v10 - v5, v2);
  return ((uint64_t (*)(char *, uint64_t))v8)((char *)v10 - v5, v2);
}

uint64_t static PreviewSource<>.viewGroupSource<A>(arguments:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PreviewSourceContentCategory();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v9 = type metadata accessor for PreviewSourceContentDomain();
  double v10 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, void, double))(v12 + 104))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F252E8], v10);
  PreviewSourceContentCategory.init(stringLiteral:)();
  uint64_t v13 = type metadata accessor for PreviewArguments();
  double v14 = MEMORY[0x1F4188790](v13);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)&v19 - v15, a1, v14);
  id v17 = (void *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a2;
  void v17[4] = a3;
  swift_retain();
  return DefaultPreviewSource.init<A>(contentDomain:contentCategory:supportsOnDevicePreviews:supportsInteractivePreviews:arguments:body:)();
}

uint64_t Preview.init<A>(_:traits:body:arguments:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(double)@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  void v19[2] = a2;
  v19[3] = a3;
  v19[0] = a8;
  v19[1] = a1;
  type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = type metadata accessor for PreviewArguments();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  id v17 = (char *)v19 - v16;
  a6(v15);
  static PreviewSource<>.viewGroupSource<A>(arguments:body:)((uint64_t)v17, a4, a5, a7);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  type metadata accessor for Preview.ViewTraits();
  lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>();
  Preview.init<A, B>(displayName:source:traits:)();
  return swift_release();
}

uint64_t ViewPreviewSource.makeView.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t ViewPreviewSource.makeView.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ViewPreviewSource.makeView.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ViewPreviewSource.contentCategory.getter()
{
  return PreviewSourceContentCategory.init(stringLiteral:)();
}

uint64_t static PreviewSourceContentCategory.swiftUIView.getter()
{
  return PreviewSourceContentCategory.init(stringLiteral:)();
}

uint64_t ViewPreviewSource.contentDomain.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F252E8];
  uint64_t v3 = type metadata accessor for PreviewSourceContentDomain();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t protocol witness for PreviewSource.contentDomain.getter in conformance ViewPreviewSource@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F252E8];
  uint64_t v3 = type metadata accessor for PreviewSourceContentDomain();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t protocol witness for PreviewSource.contentCategory.getter in conformance ViewPreviewSource()
{
  return PreviewSourceContentCategory.init(stringLiteral:)();
}

uint64_t protocol witness for PreviewSource.supportsOnDevicePreviews.getter in conformance ViewPreviewSource()
{
  return MEMORY[0x1F40E0608]();
}

uint64_t protocol witness for PreviewSource.supportsInteractivePreviews.getter in conformance ViewPreviewSource()
{
  return MEMORY[0x1F40E0610]();
}

uint64_t closure #1 in static PreviewSource<>.viewSource(body:)@<X0>(void (*a1)(void *__return_ptr)@<X0>, uint64_t a2@<X8>)
{
  a1(v12);
  long long v11 = v13;
  uint64_t v3 = v13;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v12, v13);
  uint64_t v5 = *(void *)(v3 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  *(_OWORD *)(a2 + 24) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v8, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t sub_188050A74()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PreviewSource<>.viewSource(body:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static PreviewSource<>.viewSource(body:)(*(void (**)(void *__return_ptr))(v1 + 16), a1);
}

unint64_t lazy protocol witness table accessor for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>;
  if (!lazy protocol witness table cache variable for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>)
  {
    type metadata accessor for DefaultPreviewSource<ViewPreviewBody>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultPreviewSource<ViewPreviewBody> and conformance DefaultPreviewSource<A>);
  }
  return result;
}

uint64_t ViewPreviewBody.init<A>(body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  a4[3] = a2;
  a4[4] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(boxed_opaque_existential_1, a1, a2);
}

uint64_t closure #1 in static PreviewSource<>.viewGroupSource<A>(arguments:body:)@<X0>(void (*a1)(void *__return_ptr)@<X1>, uint64_t a2@<X8>)
{
  a1(v12);
  long long v11 = v13;
  uint64_t v3 = v13;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v12, v13);
  uint64_t v5 = *(void *)(v3 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v6);
  *(_OWORD *)(a2 + 24) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a2);
  (*(void (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v8, v3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

uint64_t ViewPreviewBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TableColumnList(v1, a1);
}

void __swiftcall _Previewable.init()()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.runtimeIssuesLog.getter();
  Logger.init(_:)();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v4, v5))
  {
    double v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v6 = 0;
    _os_log_impl(&dword_1872C6000, v4, v5, "'@Previewable' can only be used in a #Preview body closure", v6, 2u);
    MEMORY[0x18C119C60](v6, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t sub_188050DD0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_188050DDC(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for ViewPreviewSource()
{
  return &type metadata for ViewPreviewSource;
}

ValueMetadata *type metadata accessor for ViewPreviewBody()
{
  return &type metadata for ViewPreviewBody;
}

ValueMetadata *type metadata accessor for _Previewable()
{
  return &type metadata for _Previewable;
}

uint64_t sub_188050E50()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PreviewSource<>.viewGroupSource<A>(arguments:body:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static PreviewSource<>.viewGroupSource<A>(arguments:body:)(*(void (**)(void *__return_ptr))(v1 + 24), a1);
}

ValueMetadata *type metadata accessor for RichTextAttributeResolver()
{
  return &type metadata for RichTextAttributeResolver;
}

uint64_t key path getter for AttributeScopes.swiftUI : AttributeScopes@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.swiftUI.getter();
  uint64_t result = type metadata accessor for AttributeScopes.SwiftUIAttributes();
  *a1 = result;
  return result;
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.BackgroundColorAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.ForegroundColorAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.FontAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.KerningAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.TrackingAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute()
{
}

uint64_t key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>)(uint64_t a1, uint64_t a2)
{
  return key path index hash operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>);
}

void key path getter for AttributeDynamicLookup.subscript<A>(dynamicMember:) : AttributeDynamicLookupAttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute()
{
}

uint64_t RichTextAttributeResolver.nsAttributes(for:)()
{
  type metadata accessor for AttributedString.Runs.Run?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x1E4F24330], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8);
  v108 = (char *)&v106 - v2;
  uint64_t v3 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v109 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  v106 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *v0;
  uint64_t v6 = v0[1];
  uint64_t v7 = v0[2];
  uint64_t v115 = v7;
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute();
  swift_bridgeObjectRetain();
  AttributeContainer.subscript.getter();
  swift_release();
  char v8 = v113;
  char v9 = BYTE8(v113);
  RichTextAttributeResolver.markdownFontModifiers(for:)(v113, SBYTE8(v113));
  double v10 = (void *)*MEMORY[0x1E4FB0768];
  if ((v9 & 1) != 0 || (v8 & 0x20) == 0)
  {
    id v16 = v10;
    goto LABEL_6;
  }
  id v11 = objc_allocWithZone(NSNumber);
  id v12 = v10;
  id v13 = objc_msgSend(v11, sel_initWithInteger_, 1);
  if (!v13)
  {
LABEL_6:
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v10, &v113);

    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v113, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_7;
  }
  id v14 = v13;
  uint64_t v114 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  *(void *)&long long v113 = v14;
  outlined init with take of Any(&v113, v112);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v111 = v7;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v12, isUniquelyReferenced_nonNull_native);
  uint64_t v115 = v111;

  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v17 = swift_getKeyPath();
  MEMORY[0x1F4188790](v17);
  *(&v106 - 2) = v18;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if (*(void *)&v112[0]
    || (*(void *)&long long v113 = v5, *((void *)&v113 + 1) = v6, EnvironmentValues.font.getter())
    || (*(void *)&long long v113 = v5, *((void *)&v113 + 1) = v6, EnvironmentValues.defaultFont.getter()))
  {
    uint64_t v19 = (void *)*MEMORY[0x1E4FB06F8];
    *(void *)&long long v113 = v5;
    *((void *)&v113 + 1) = v6;
    swift_retain();
    id v20 = v19;
    swift_retain();
    uint64_t v21 = Font.platformFont(in:modifiers:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for CTFontRef(0);
    uint64_t v114 = v22;
    *(void *)&long long v113 = v21;
    outlined init with take of Any(&v113, v112);
    uint64_t v23 = v115;
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v23;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v20, v24);
    uint64_t v115 = v111;
    swift_release();
  }
  else
  {
    if (v9) {
      goto LABEL_12;
    }
    v101 = (void *)*MEMORY[0x1E4FB06F8];
    *(void *)&long long v113 = v5;
    *((void *)&v113 + 1) = v6;
    id v20 = v101;
    EnvironmentValues.effectiveFont.getter();
    *(void *)&long long v113 = v5;
    *((void *)&v113 + 1) = v6;
    swift_retain();
    swift_retain();
    uint64_t v102 = Font.platformFont(in:modifiers:)();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    type metadata accessor for CTFontRef(0);
    uint64_t v114 = v103;
    *(void *)&long long v113 = v102;
    outlined init with take of Any(&v113, v112);
    uint64_t v104 = v115;
    char v105 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v104;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v20, v105);
    uint64_t v115 = v111;
  }

LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v25 = swift_getKeyPath();
  MEMORY[0x1F4188790](v25);
  *(&v106 - 2) = v26;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if (*(void *)&v112[0]
    || (*(void *)&long long v113 = v5, *((void *)&v113 + 1) = v6, EnvironmentValues.foregroundColor.getter()))
  {
    double v27 = (void *)*MEMORY[0x1E4FB0700];
    *(void *)&long long v113 = v5;
    *((void *)&v113 + 1) = v6;
    swift_retain();
    id v28 = v27;
    swift_retain();
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    Color.Resolved.kitColor.getter();
    self;
    uint64_t v29 = swift_dynamicCastObjCClassUnconditional();
    uint64_t v114 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    *(void *)&long long v113 = v29;
    outlined init with take of Any(&v113, v112);
    uint64_t v30 = v115;
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v30;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v28, v31);
    uint64_t v115 = v111;
    swift_release();

    swift_bridgeObjectRelease();
  }
  uint64_t v32 = swift_getKeyPath();
  MEMORY[0x1F4188790](v32);
  *(&v106 - 2) = v33;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((void)v113)
  {
    uint64_t v34 = (void *)*MEMORY[0x1E4FB06C0];
    *(void *)&long long v113 = v5;
    *((void *)&v113 + 1) = v6;
    swift_retain();
    id v35 = v34;
    swift_retain();
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    Color.Resolved.kitColor.getter();
    self;
    uint64_t v36 = swift_dynamicCastObjCClassUnconditional();
    uint64_t v114 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    *(void *)&long long v113 = v36;
    outlined init with take of Any(&v113, v112);
    uint64_t v37 = v115;
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v37;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v35, v38);
    uint64_t v115 = v111;
    swift_release();

    swift_bridgeObjectRelease();
  }
  uint64_t v39 = swift_getKeyPath();
  MEMORY[0x1F4188790](v39);
  *(&v106 - 2) = v40;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v41 = *((void *)&v113 + 1);
  uint64_t v107 = v3;
  if (*((void *)&v113 + 1) != 1)
  {
    uint64_t v42 = v113;
    id v43 = objc_allocWithZone(NSNumber);
    id v44 = v10;
    id v45 = objc_msgSend(v43, sel_initWithInteger_, v42);
    uint64_t v114 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)&long long v113 = v45;
    outlined init with take of Any(&v113, v112);
    uint64_t v46 = v115;
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v46;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v44, v47);
    uint64_t v48 = v111;
    uint64_t v115 = v111;

    swift_bridgeObjectRelease();
    if (v41)
    {
      unint64_t v49 = (void *)*MEMORY[0x1E4FB0760];
      *(void *)&long long v113 = v5;
      *((void *)&v113 + 1) = v6;
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v42, v41);
      id v50 = v49;
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
      swift_release();
      Color.Resolved.kitColor.getter();
      self;
      uint64_t v51 = swift_dynamicCastObjCClassUnconditional();
      uint64_t v114 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(void *)&long long v113 = v51;
      outlined init with take of Any(&v113, v112);
      char v52 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v111 = v48;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v50, v52);
      uint64_t v115 = v111;

      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v42, v41);
      uint64_t v53 = v42;
      uint64_t v54 = v41;
    }
    else
    {
      uint64_t v53 = v42;
      uint64_t v54 = 0;
    }
    outlined consume of Text.LineStyle?(v53, v54);
    uint64_t v3 = v107;
  }
  uint64_t v55 = swift_getKeyPath();
  MEMORY[0x1F4188790](v55);
  *(&v106 - 2) = v56;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  uint64_t v57 = *((void *)&v113 + 1);
  if (*((void *)&v113 + 1) != 1)
  {
    uint64_t v58 = v113;
    long long v59 = (void *)*MEMORY[0x1E4FB0808];
    id v60 = objc_allocWithZone(NSNumber);
    id v61 = v59;
    id v62 = objc_msgSend(v60, sel_initWithInteger_, v58);
    uint64_t v114 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    *(void *)&long long v113 = v62;
    outlined init with take of Any(&v113, v112);
    uint64_t v63 = v115;
    char v64 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v63;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v61, v64);
    uint64_t v65 = v111;
    uint64_t v115 = v111;

    swift_bridgeObjectRelease();
    if (v57)
    {
      uint64_t v66 = (void *)*MEMORY[0x1E4FB0800];
      *(void *)&long long v113 = v5;
      *((void *)&v113 + 1) = v6;
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v58, v57);
      id v67 = v66;
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
      swift_release();
      Color.Resolved.kitColor.getter();
      self;
      uint64_t v68 = swift_dynamicCastObjCClassUnconditional();
      uint64_t v114 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      *(void *)&long long v113 = v68;
      outlined init with take of Any(&v113, v112);
      char v69 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v111 = v65;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v67, v69);
      uint64_t v115 = v111;

      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v58, v57);
      uint64_t v70 = v58;
      uint64_t v71 = v57;
    }
    else
    {
      uint64_t v70 = v58;
      uint64_t v71 = 0;
    }
    outlined consume of Text.LineStyle?(v70, v71);
    uint64_t v3 = v107;
  }
  uint64_t v72 = swift_getKeyPath();
  MEMORY[0x1F4188790](v72);
  *(&v106 - 2) = v73;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if (BYTE8(v113))
  {
    uint64_t v75 = (uint64_t)v108;
    uint64_t v74 = v109;
  }
  else
  {
    uint64_t v75 = (uint64_t)v108;
    uint64_t v74 = v109;
    if (*(double *)&v113 != 0.0)
    {
      uint64_t v76 = (void *)*MEMORY[0x1E4FB0710];
      uint64_t v114 = MEMORY[0x1E4FBC958];
      outlined init with take of Any(&v113, v112);
      id v77 = v76;
      uint64_t v78 = v115;
      char v79 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v111 = v78;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v77, v79);
      uint64_t v115 = v111;

      swift_bridgeObjectRelease();
    }
  }
  uint64_t v80 = swift_getKeyPath();
  MEMORY[0x1F4188790](v80);
  *(&v106 - 2) = v81;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((BYTE8(v113) & 1) == 0 && *(double *)&v113 != 0.0)
  {
    v82 = (void *)*MEMORY[0x1E4FB07F8];
    uint64_t v114 = MEMORY[0x1E4FBC958];
    outlined init with take of Any(&v113, v112);
    id v83 = v82;
    uint64_t v84 = v115;
    char v85 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v84;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v83, v85);
    uint64_t v115 = v111;

    swift_bridgeObjectRelease();
  }
  uint64_t v86 = swift_getKeyPath();
  MEMORY[0x1F4188790](v86);
  *(&v106 - 2) = v87;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((BYTE8(v113) & 1) == 0 && *(double *)&v113 != 0.0)
  {
    v88 = (void *)*MEMORY[0x1E4FB06C8];
    uint64_t v114 = MEMORY[0x1E4FBC958];
    outlined init with take of Any(&v113, v112);
    id v89 = v88;
    uint64_t v90 = v115;
    char v91 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v90;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v89, v91);
    uint64_t v115 = v111;

    swift_bridgeObjectRelease();
  }
  uint64_t v92 = swift_getKeyPath();
  MEMORY[0x1F4188790](v92);
  *(&v106 - 2) = v93;
  swift_getKeyPath();
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
  AttributeContainer.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v75, 1, v3) == 1)
  {
    outlined destroy of AttributedString?(v75, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x1E4F24330]);
  }
  else
  {
    v94 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v106, v75, v3);
    v95 = (void *)*MEMORY[0x1E4FB06B0];
    uint64_t v114 = v3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v113);
    (*(void (**)(uint64_t *, char *, uint64_t))(v74 + 16))(boxed_opaque_existential_1, v94, v3);
    outlined init with take of Any(&v113, v112);
    id v97 = v95;
    uint64_t v98 = v115;
    char v99 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v98;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v112, v97, v99);
    uint64_t v115 = v111;

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v94, v3);
  }
  return v115;
}

uint64_t RichTextAttributeResolver.nsValueFromSwiftValue(nsKey:value:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v103 = a3;
  type metadata accessor for AttributedString.Runs.Run?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x1E4F24330], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v96 - v10;
  uint64_t v12 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
  uint64_t v96 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v14 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AttributeContainer();
  uint64_t v101 = *(void *)(v15 - 8);
  uint64_t v102 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = *v3;
  uint64_t v18 = v3[2];
  uint64_t v98 = v3[1];
  uint64_t v99 = v18;
  AttributeContainer.init()();
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  id v100 = a1;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v25)
  {
LABEL_10:
    outlined init with copy of Any(a2, (uint64_t)&v106);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = v104;
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v96 - 2) = v32;
    swift_getKeyPath();
    uint64_t v106 = v30;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
    goto LABEL_12;
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v43)
  {
LABEL_21:
    outlined init with copy of Any(a2, (uint64_t)&v106);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      uint64_t v44 = v104;
      uint64_t v45 = swift_getKeyPath();
      MEMORY[0x1F4188790](v45);
      *(&v96 - 2) = v46;
      swift_getKeyPath();
      uint64_t v106 = v44;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
LABEL_12:
      swift_retain();
      AttributeContainer.subscript.setter();
      uint64_t v106 = v97;
      uint64_t v107 = v98;
      uint64_t v108 = v99;
      unint64_t v19 = RichTextAttributeResolver.nsAttributes(for:)();
      swift_release();
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;
  if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v51)
  {
LABEL_27:
    outlined init with copy of Any(a2, (uint64_t)&v106);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      uint64_t v52 = v104;
      uint64_t v53 = swift_getKeyPath();
      MEMORY[0x1F4188790](v53);
      *(&v96 - 2) = v54;
      swift_getKeyPath();
      uint64_t v106 = v52;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v56;
  if (v55 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v57 == v58) {
    goto LABEL_31;
  }
  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v59) {
    goto LABEL_33;
  }
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v66 = v65;
  if (v64 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v66 == v67)
  {
LABEL_31:
    swift_bridgeObjectRelease_n();
    goto LABEL_33;
  }
  char v68 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v68)
  {
LABEL_33:
    outlined init with copy of Any(a2, (uint64_t)&v106);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      uint64_t v61 = v104;
      uint64_t v60 = v105;
      uint64_t v62 = swift_getKeyPath();
      MEMORY[0x1F4188790](v62);
      *(&v96 - 2) = v63;
      swift_getKeyPath();
      uint64_t v106 = v61;
      uint64_t v107 = v60;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v71 = v70;
  if (v69 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v71 == v72) {
    goto LABEL_40;
  }
  char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v73) {
    goto LABEL_42;
  }
  uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v80 = v79;
  if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v80 == v81)
  {
LABEL_40:
    swift_bridgeObjectRelease_n();
    goto LABEL_42;
  }
  char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v82)
  {
LABEL_42:
    outlined init with copy of Any(a2, (uint64_t)&v106);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      uint64_t v75 = v104;
      uint64_t v74 = v105;
      uint64_t v76 = swift_getKeyPath();
      MEMORY[0x1F4188790](v76);
      *(&v96 - 2) = v77;
      swift_getKeyPath();
      uint64_t v106 = v75;
      uint64_t v107 = v74;
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v85 = v84;
  if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v85 == v86)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v87 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for AttributedString.Runs.Run?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (NSAttributedStringKey, Any), MEMORY[0x1E4FBBE00]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18834BB80;
      id v94 = v100;
      *(void *)(inited + 32) = v100;
      outlined init with copy of Any(a2, inited + 40);
      id v95 = v94;
      unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(inited);
      goto LABEL_13;
    }
  }
  outlined init with copy of Any(a2, (uint64_t)&v106);
  char v88 = swift_dynamicCast();
  id v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56);
  if (v88)
  {
    v89(v11, 0, 1, v12);
    swift_bridgeObjectRelease();
    uint64_t v90 = v96;
    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v14, v11, v12);
    uint64_t v91 = swift_getKeyPath();
    MEMORY[0x1F4188790](v91);
    *(&v96 - 2) = v92;
    swift_getKeyPath();
    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v8, v14, v12);
    v89(v8, 0, 1, v12);
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
    AttributeContainer.subscript.setter();
    uint64_t v106 = v97;
    uint64_t v107 = v98;
    uint64_t v108 = v99;
    unint64_t v19 = RichTextAttributeResolver.nsAttributes(for:)();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v14, v12);
  }
  else
  {
    v89(v11, 1, 1, v12);
    outlined destroy of AttributedString?((uint64_t)v11, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x1E4F24330]);
  }
LABEL_13:
  uint64_t v34 = v102;
  char v33 = v103;
  uint64_t v35 = v101;
  type metadata accessor for Any?();
  v33[3] = v36;
  uint64_t v37 = swift_allocObject();
  char v38 = (_OWORD *)(v37 + 16);
  uint64_t *v33 = v37;
  if (*(void *)(v19 + 16))
  {
    id v39 = v100;
    unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v39);
    if (v41)
    {
      outlined init with copy of Any(*(void *)(v19 + 56) + 32 * v40, (uint64_t)v38);
    }
    else
    {
      *char v38 = 0u;
      v38[1] = 0u;
    }
  }
  else
  {
    *char v38 = 0u;
    *(_OWORD *)(v37 + 32) = 0u;
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v34);
}

uint64_t RichTextAttributeResolver.swiftUIAttributedString(for:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v32 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v32 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v32 - v14;
  type metadata accessor for AttributedString.Runs.Run?(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v32 - v20;
  type metadata accessor for NSSwiftMutableAttributedString(0);
  uint64_t v22 = swift_dynamicCastClass();
  if (v22)
  {
    uint64_t v23 = v22;
    type metadata accessor for NSSwiftAttributedString(0);
    uint64_t v24 = swift_dynamicCastClass();
    if (v24)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v15, v24 + OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage, v3);
    }
    else
    {
      uint64_t v26 = v23 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v15, v26, v3);
    }
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v27(v21, v15, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v21, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v21, 1, v3) == 1)
    {
      id v28 = a1;
      AttributedString.init(_:)();
      return outlined destroy of AttributedString?((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8]);
    }
    else
    {
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v33, v21, v3);
    }
  }
  else
  {
    type metadata accessor for AttributeScopes.UIKitAttributes();
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1(&lazy protocol witness table cache variable for type AttributeScopes.UIKitAttributes and conformance AttributeScopes.UIKitAttributes, MEMORY[0x1E4FB0D88]);
    id v25 = a1;
    AttributedString.init<A>(_:including:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v18, 0, 1, v3);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v18, 1, v3) == 1)
    {
      outlined destroy of AttributedString?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8]);
      id v30 = v25;
      return AttributedString.init(_:)();
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v18, v3);
      AttributedString.transformingUIKitAttributedForSwiftUI()((uint64_t)v9);
      (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
      swift_getKeyPath();
      type metadata accessor for AttributeScopes.SwiftUIAttributes();
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1(&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes and conformance AttributeScopes.SwiftUIAttributes, MEMORY[0x1E4F3F288]);
      _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
      AttributedString.init<A, B>(_:including:)();
      char v31 = *(void (**)(char *, uint64_t))(v4 + 8);
      v31(v9, v3);
      return ((uint64_t (*)(char *, uint64_t))v31)(v12, v3);
    }
  }
}

uint64_t RichTextAttributeResolver.swiftUIAttributes(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for AttributedString.Runs.Run?(0, &lazy cache variable for type metadata for AttributedString.AdaptiveImageGlyph?, MEMORY[0x1E4F24330], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  char v87 = (char *)&v85 - v5;
  uint64_t v6 = type metadata accessor for AttributeContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  AttributeContainer.init()();
  if (!*(void *)(a1 + 16)) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v9, v6);
  }
  id v10 = (id)*MEMORY[0x1E4FB06C0];
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if (v12)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1))
  {
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    if (*(void *)(a1 + 16)) {
      goto LABEL_9;
    }
LABEL_12:
    long long v89 = 0u;
    long long v90 = 0u;
    goto LABEL_20;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if (swift_dynamicCast())
  {
    id v13 = v88;
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v85 - 2) = v15;
    swift_getKeyPath();
    *(void *)&long long v89 = v13;
    lazy protocol witness table accessor for type UIColor and conformance UIColor();
    id v16 = v13;
    *(void *)&long long v89 = Color.init<A>(provider:)();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_12;
  }
LABEL_9:
  id v17 = (id)*MEMORY[0x1E4FB0700];
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17);
  if (v19)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v18, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1))
  {
LABEL_20:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    if (*(void *)(a1 + 16)) {
      goto LABEL_18;
    }
LABEL_21:
    long long v89 = 0u;
    long long v90 = 0u;
    goto LABEL_29;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if (swift_dynamicCast())
  {
    uint64_t v86 = v7;
    id v20 = v88;
    uint64_t v21 = swift_getKeyPath();
    MEMORY[0x1F4188790](v21);
    *(&v85 - 2) = v22;
    swift_getKeyPath();
    *(void *)&long long v89 = v20;
    lazy protocol witness table accessor for type UIColor and conformance UIColor();
    id v23 = v20;
    *(void *)&long long v89 = Color.init<A>(provider:)();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute and conformance AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute();
    AttributeContainer.subscript.setter();

    uint64_t v7 = v86;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_21;
  }
LABEL_18:
  id v24 = (id)*MEMORY[0x1E4FB06F8];
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24);
  if (v26)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v25, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1))
  {
LABEL_29:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    if (*(void *)(a1 + 16)) {
      goto LABEL_27;
    }
LABEL_30:
    long long v89 = 0u;
    long long v90 = 0u;
    goto LABEL_38;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFont);
  if (swift_dynamicCast())
  {
    id v27 = v88;
    uint64_t v28 = swift_getKeyPath();
    MEMORY[0x1F4188790](v28);
    *(&v85 - 2) = v29;
    swift_getKeyPath();
    id v30 = v27;
    *(void *)&long long v89 = Font.init(_:)();
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.FontAttribute and conformance AttributeScopes.SwiftUIAttributes.FontAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_30;
  }
LABEL_27:
  id v31 = (id)*MEMORY[0x1E4FB0710];
  unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v31);
  if (v33)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v32, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1))
  {
LABEL_38:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    if (*(void *)(a1 + 16)) {
      goto LABEL_36;
    }
LABEL_39:
    long long v89 = 0u;
    long long v90 = 0u;
    goto LABEL_47;
  }
  if (swift_dynamicCast())
  {
    id v34 = v88;
    uint64_t v35 = swift_getKeyPath();
    MEMORY[0x1F4188790](v35);
    *(&v85 - 2) = v36;
    swift_getKeyPath();
    *(void *)&long long v89 = v34;
    BYTE8(v89) = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.KerningAttribute and conformance AttributeScopes.SwiftUIAttributes.KerningAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_39;
  }
LABEL_36:
  id v37 = (id)*MEMORY[0x1E4FB07F8];
  unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37);
  if (v39)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v38, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1))
  {
LABEL_47:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    if (*(void *)(a1 + 16)) {
      goto LABEL_45;
    }
LABEL_48:
    long long v89 = 0u;
    long long v90 = 0u;
    goto LABEL_56;
  }
  if (swift_dynamicCast())
  {
    id v40 = v88;
    uint64_t v41 = swift_getKeyPath();
    MEMORY[0x1F4188790](v41);
    *(&v85 - 2) = v42;
    swift_getKeyPath();
    *(void *)&long long v89 = v40;
    BYTE8(v89) = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.TrackingAttribute and conformance AttributeScopes.SwiftUIAttributes.TrackingAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_48;
  }
LABEL_45:
  id v43 = (id)*MEMORY[0x1E4FB06C8];
  unint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v43);
  if (v45)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v44, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1))
  {
LABEL_56:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    if (*(void *)(a1 + 16)) {
      goto LABEL_54;
    }
LABEL_57:
    long long v89 = 0u;
    long long v90 = 0u;
LABEL_64:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_65;
  }
  if (swift_dynamicCast())
  {
    id v46 = v88;
    uint64_t v47 = swift_getKeyPath();
    MEMORY[0x1F4188790](v47);
    *(&v85 - 2) = v48;
    swift_getKeyPath();
    *(void *)&long long v89 = v46;
    BYTE8(v89) = 0;
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute and conformance AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute();
    AttributeContainer.subscript.setter();
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_57;
  }
LABEL_54:
  id v49 = (id)*MEMORY[0x1E4FB0768];
  unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49);
  if (v51)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v50, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1)) {
    goto LABEL_64;
  }
  type metadata accessor for NSUnderlineStyle(0);
  if (swift_dynamicCast())
  {
    uint64_t v86 = a2;
    Text.LineStyle.init(_nsUnderlineStyle:)();
    uint64_t v53 = *((void *)&v89 + 1);
    uint64_t v52 = v89;
    if (*(void *)(a1 + 16))
    {
      id v54 = (id)*MEMORY[0x1E4FB0760];
      unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v54);
      if (v56)
      {
        outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v55, (uint64_t)&v89);
      }
      else
      {
        long long v89 = 0u;
        long long v90 = 0u;
      }

      if (*((void *)&v90 + 1))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        if (swift_dynamicCast())
        {
          id v65 = v88;
          if (v53 == 1)
          {
          }
          else
          {
            *(void *)&long long v89 = v88;
            unint64_t v85 = lazy protocol witness table accessor for type UIColor and conformance UIColor();
            id v81 = v65;
            uint64_t v82 = Color.init<A>(provider:)();

            swift_release();
            uint64_t v53 = v82;
          }
        }
LABEL_82:
        uint64_t v66 = swift_getKeyPath();
        MEMORY[0x1F4188790](v66);
        *(&v85 - 2) = v67;
        swift_getKeyPath();
        *(void *)&long long v89 = v52;
        *((void *)&v89 + 1) = v53;
        lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute();
        AttributeContainer.subscript.setter();
        a2 = v86;
        if (!*(void *)(a1 + 16)) {
          goto LABEL_83;
        }
        goto LABEL_66;
      }
    }
    else
    {
      long long v89 = 0u;
      long long v90 = 0u;
    }
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_82;
  }
LABEL_65:
  if (!*(void *)(a1 + 16))
  {
LABEL_83:
    long long v89 = 0u;
    long long v90 = 0u;
LABEL_84:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
LABEL_85:
    if (*(void *)(a1 + 16)) {
      goto LABEL_86;
    }
LABEL_99:
    long long v89 = 0u;
    long long v90 = 0u;
LABEL_100:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v9, v6);
  }
LABEL_66:
  id v57 = (id)*MEMORY[0x1E4FB0808];
  unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v57);
  if (v59)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v58, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1)) {
    goto LABEL_84;
  }
  type metadata accessor for NSUnderlineStyle(0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v86 = a2;
  Text.LineStyle.init(_nsUnderlineStyle:)();
  uint64_t v61 = *((void *)&v89 + 1);
  uint64_t v60 = v89;
  if (!*(void *)(a1 + 16))
  {
    long long v89 = 0u;
    long long v90 = 0u;
LABEL_97:
    _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for Any?);
    goto LABEL_98;
  }
  id v62 = (id)*MEMORY[0x1E4FB0800];
  unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v62);
  if (v64)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v63, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1)) {
    goto LABEL_97;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  if (swift_dynamicCast())
  {
    id v77 = v88;
    if (v61 == 1)
    {
    }
    else
    {
      *(void *)&long long v89 = v88;
      unint64_t v85 = lazy protocol witness table accessor for type UIColor and conformance UIColor();
      id v83 = v77;
      uint64_t v84 = Color.init<A>(provider:)();

      swift_release();
      uint64_t v61 = v84;
    }
  }
LABEL_98:
  uint64_t v78 = swift_getKeyPath();
  MEMORY[0x1F4188790](v78);
  *(&v85 - 2) = v79;
  swift_getKeyPath();
  *(void *)&long long v89 = v60;
  *((void *)&v89 + 1) = v61;
  lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute and conformance AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute();
  AttributeContainer.subscript.setter();
  a2 = v86;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_99;
  }
LABEL_86:
  id v68 = (id)*MEMORY[0x1E4FB06B0];
  unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v68);
  if (v70)
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v69, (uint64_t)&v89);
  }
  else
  {
    long long v89 = 0u;
    long long v90 = 0u;
  }

  if (!*((void *)&v90 + 1)) {
    goto LABEL_100;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSAdaptiveImageGlyph);
  if (swift_dynamicCast())
  {
    id v71 = v88;
    uint64_t v72 = swift_getKeyPath();
    MEMORY[0x1F4188790](v72);
    *(&v85 - 2) = v73;
    swift_getKeyPath();
    id v74 = v71;
    uint64_t v75 = v87;
    AttributedString.AdaptiveImageGlyph.init(_:)();
    uint64_t v76 = type metadata accessor for AttributedString.AdaptiveImageGlyph();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v75, 0, 1, v76);
    lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute and conformance AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute();
    AttributeContainer.subscript.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

id RichTextAttributeResolver.nsAttributedString(for:)(uint64_t a1)
{
  type metadata accessor for Range<AttributedString.Index>(0);
  uint64_t v64 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v63 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for AttributeContainer();
  char v51 = *(void (***)(char *, uint64_t))(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v61 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for AttributedString.Runs.Run();
  unint64_t v50 = *(void (***)(char *, uint64_t))(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v60 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AttributedString.Runs.Run?(0, &lazy cache variable for type metadata for AttributedString.Runs.Run?, MEMORY[0x1E4F27350], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v79 = (char *)v49 - v8;
  uint64_t v80 = type metadata accessor for AttributedString.Runs.Index();
  uint64_t v9 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  id v77 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  id v81 = (char *)v49 - v12;
  uint64_t v13 = type metadata accessor for AttributedString.Runs();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  id v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexingIterator<AttributedString.Runs>(0);
  uint64_t v18 = v17 - 8;
  MEMORY[0x1F4188790](v17);
  uint64_t v78 = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v49[0] = (char *)v49 - v21;
  uint64_t v22 = type metadata accessor for AttributedString();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  unint64_t v25 = (char *)v49 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = *v1;
  uint64_t v55 = v1[1];
  uint64_t v54 = v1[2];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableAttributedString);
  char v26 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v59 = v22;
  uint64_t v58 = v23 + 16;
  uint64_t v53 = v26;
  v26(v25, a1, v22);
  id v57 = v25;
  id v73 = (id)NSAttributedString.init(_:)();
  uint64_t v65 = a1;
  AttributedString.runs.getter();
  uint64_t v27 = (uint64_t)v78;
  unint64_t v69 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v70 = v14 + 16;
  v69(v78, v16, v13);
  _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1(&lazy protocol witness table cache variable for type AttributedString.Runs and conformance AttributedString.Runs, MEMORY[0x1E4F27368]);
  uint64_t v28 = v81;
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
  id v71 = v16;
  uint64_t v72 = v14 + 8;
  id v68 = v29;
  v29(v16, v13);
  uint64_t v30 = v49[0];
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v27 + *(int *)(v18 + 44), v28, v80);
  outlined init with take of IndexingIterator<AttributedString.Runs>(v27, v30);
  uint64_t v31 = v30 + *(int *)(v18 + 44);
  unint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v78 = (char *)(v9 + 16);
  id v74 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v75 = v32;
  uint64_t v76 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 7);
  uint64_t v66 = (unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 6);
  unint64_t v67 = (void (**)(char *))(v50 + 2);
  uint64_t v52 = (void (**)(char *, char *, uint64_t))(v50 + 4);
  ++v51;
  ++v50;
  v49[1] = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    uint64_t v33 = v80;
    id v34 = v81;
    v75(v81, v31, v80);
    uint64_t v35 = v77;
    dispatch thunk of Collection.endIndex.getter();
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1(&lazy protocol witness table cache variable for type AttributedString.Runs.Index and conformance AttributedString.Runs.Index, MEMORY[0x1E4F27358]);
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v37 = v30;
    unint64_t v38 = *v74;
    (*v74)(v35, v33);
    v38(v34, v33);
    if (v36) {
      break;
    }
    char v39 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    id v40 = v79;
    uint64_t v41 = v82;
    (*v67)(v79);
    v39(v83, 0);
    unint64_t v42 = v71;
    v69(v71, (char *)v37, v13);
    dispatch thunk of Collection.formIndex(after:)();
    v68(v42, v13);
    (*v76)(v40, 0, 1, v41);
    if ((*v66)(v40, 1, v41) == 1) {
      goto LABEL_6;
    }
    id v43 = v60;
    (*v52)(v60, v40, v41);
    v83[0] = v56;
    v83[1] = v55;
    v83[2] = v54;
    unint64_t v44 = v61;
    AttributedString.Runs.Run.attributes.getter();
    RichTextAttributeResolver.nsAttributes(for:)();
    (*v51)(v44, v62);
    type metadata accessor for NSAttributedStringKey(0);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    AttributedString.Runs.Run.range.getter();
    v53(v57, v65, v59);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1(&lazy protocol witness table cache variable for type Range<AttributedString.Index> and conformance Range<A>, type metadata accessor for Range<AttributedString.Index>);
    _s10Foundation16AttributedStringV5IndexVAESLAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
    uint64_t v46 = _NSRange.init<A, B>(_:in:)();
    objc_msgSend(v73, sel_setAttributes_range_, isa, v46, v47);

    uint64_t v30 = v37;
    (*v50)(v43, v82);
  }
  (*v76)(v79, 1, 1, v82);
LABEL_6:
  _ss16IndexingIteratorVy10Foundation16AttributedStringV4RunsVGWOhTm_0(v37, (uint64_t (*)(void))type metadata accessor for IndexingIterator<AttributedString.Runs>);
  return v73;
}

uint64_t RichTextAttributeResolver.init(environment:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v6 = (void *)*MEMORY[0x1E4FB06F8];
  swift_retain();
  id v7 = v6;
  swift_retain();
  EnvironmentValues.effectiveFont.getter();
  *((void *)&v16 + 1) = v4;
  uint64_t v8 = Font.platformFont(in:)();
  swift_release();
  type metadata accessor for CTFontRef(0);
  uint64_t v17 = v9;
  *(void *)&long long v16 = v8;
  outlined init with take of Any(&v16, v15);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v7, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  id v11 = (id)*MEMORY[0x1E4FB0700];
  static Color.primary.getter();
  *(void *)&long long v16 = v3;
  *((void *)&v16 + 1) = v4;
  dispatch thunk of AnyColorBox.resolve(in:)();
  swift_release();
  swift_release();
  swift_release();
  Color.Resolved.kitColor.getter();
  self;
  uint64_t v12 = swift_dynamicCastObjCClassUnconditional();
  uint64_t v17 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  *(void *)&long long v16 = v12;
  outlined init with take of Any(&v16, v15);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, v11, v13);

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t RichTextAttributeResolver.markdownFontModifiers(for:)(char a1, char a2)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if ((a2 & 1) == 0)
  {
    if ((a1 & 2) != 0)
    {
      type metadata accessor for AnyFontModifier();
      static AnyFontModifier.static<A>(_:)();
      MEMORY[0x18C115B40]();
      if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if ((a1 & 1) == 0)
      {
LABEL_4:
        if ((a1 & 4) == 0) {
          return v4;
        }
LABEL_12:
        type metadata accessor for AnyFontModifier();
        static AnyFontModifier.static<A>(_:)();
        MEMORY[0x18C115B40]();
        if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        return v4;
      }
    }
    else if ((a1 & 1) == 0)
    {
      goto LABEL_4;
    }
    type metadata accessor for AnyFontModifier();
    static AnyFontModifier.static<A>(_:)();
    MEMORY[0x18C115B40]();
    if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if ((a1 & 4) == 0) {
      return v4;
    }
    goto LABEL_12;
  }
  return result;
}

void sub_188054FF4()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute and conformance AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute);
  }
  return result;
}

void sub_188055068()
{
}

uint64_t sub_188055090()
{
  return 8;
}

uint64_t sub_18805509C()
{
  return swift_release();
}

uint64_t sub_1880550A4(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1880550B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, MEMORY[0x1E4F27208]) & 1;
}

uint64_t sub_1880550F0(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.FoundationAttributes, AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute>, MEMORY[0x1E4F27208]);
}

void *sub_188055118(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_18805512C()
{
}

uint64_t sub_188055154()
{
  return 8;
}

uint64_t sub_188055160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_1880551A0(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.FontAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return dispatch thunk of Hashable.hashValue.getter();
}

void sub_188055220()
{
}

uint64_t sub_188055248()
{
  return 8;
}

uint64_t sub_188055254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_188055294(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.ForegroundColorAttribute>, MEMORY[0x1E4F3F288]);
}

void sub_1880552C4()
{
}

uint64_t sub_1880552EC()
{
  return 8;
}

uint64_t sub_1880552F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_188055338(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>, MEMORY[0x1E4F3F288]);
}

void sub_188055368()
{
}

uint64_t sub_188055390()
{
  return 8;
}

uint64_t sub_18805539C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_1880553DC(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.StrikethroughStyleAttribute>, MEMORY[0x1E4F3F288]);
}

void sub_188055408()
{
}

uint64_t sub_188055430()
{
  return 8;
}

uint64_t sub_18805543C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_18805547C(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.UnderlineStyleAttribute>, MEMORY[0x1E4F3F288]);
}

void sub_1880554AC()
{
}

uint64_t sub_1880554D4()
{
  return 8;
}

uint64_t sub_1880554E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_188055520(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.KerningAttribute>, MEMORY[0x1E4F3F288]);
}

void sub_188055550()
{
}

uint64_t sub_188055578()
{
  return 8;
}

uint64_t sub_188055584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_1880555C4(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.TrackingAttribute>, MEMORY[0x1E4F3F288]);
}

void sub_1880555F4()
{
}

uint64_t sub_18805561C()
{
  return 8;
}

uint64_t sub_188055628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_188055668(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BaselineOffsetAttribute>, MEMORY[0x1E4F3F288]);
}

void sub_188055698()
{
}

uint64_t sub_1880556C0()
{
  return 8;
}

uint64_t sub_1880556CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path index equality operator for (KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.BackgroundColorAttribute>)(a1, a2, a3, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, MEMORY[0x1E4F3F288]) & 1;
}

uint64_t sub_18805570C(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &lazy cache variable for type metadata for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>, MEMORY[0x1E4F3F288]);
}

uint64_t outlined destroy of AttributedString?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for AttributedString.Runs.Run?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for KeyPath<AttributeScopes.SwiftUIAttributes, AttributeScopes.SwiftUIAttributes.AdaptiveImageGlyphAttribute>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for KeyPath();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_188055808@<X0>(uint64_t *a1@<X8>)
{
  AttributeScopes.swiftUI.getter();
  uint64_t result = type metadata accessor for AttributeScopes.SwiftUIAttributes();
  *a1 = result;
  return result;
}

void type metadata accessor for AttributedString.Runs.Run?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_18805589C()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t type metadata accessor for IdentifiedArray()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t IdentifiedArray.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t IdentifiedArray.init()()
{
  uint64_t v0 = static Array._allocateUninitialized(_:)();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  swift_getAssociatedConformanceWitness();
  Dictionary.init(dictionaryLiteral:)();
  return v0;
}

void (*MutableCollection<>.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  uint64_t v9 = malloc(0x50uLL);
  *a1 = v9;
  v9[1] = a4;
  _OWORD v9[2] = v4;
  *uint64_t v9 = a3;
  uint64_t v10 = type metadata accessor for Slice();
  v9[3] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  void v9[4] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[5] = malloc(v12);
  char v13 = malloc(v12);
  v9[6] = v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = type metadata accessor for Range();
  v9[7] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  v9[8] = v15;
  v9[9] = malloc(*(void *)(v15 + 64));
  (*(void (**)(void))(v16 + 16))();
  MutableCollection<>.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return MutableCollection<>.subscript.modify;
}

void MutableCollection<>.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 32);
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 64);
  uint64_t v5 = *(void **)(*(void *)a1 + 72);
  uint64_t v7 = *(void **)(*(void *)a1 + 48);
  uint64_t v10 = *(void *)(*(void *)a1 + 56);
  uint64_t v8 = *(void *)(*(void *)a1 + 24);
  if (a2)
  {
    (*(void (**)(void *, void *, void))(v4 + 16))(v3, v7, v2[3]);
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v4 + 8);
    v9(v3, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    v9(v7, v8);
  }
  else
  {
    swift_getWitnessTable();
    _writeBackMutableSlice<A, B>(_:bounds:slice:)();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v10);
    (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v8);
  }
  free(v5);
  free(v7);
  free(v3);

  free(v2);
}

uint64_t MutableCollection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v55 = a1;
  uint64_t v52 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v47 = (char *)&v44 - v11;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v44 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v49 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v46 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v44 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = v4;
  uint64_t v50 = v6;
  uint64_t v51 = a2;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if (result)
  {
    uint64_t v25 = v12;
    char v26 = v15;
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = v47;
    unint64_t v29 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    char v45 = v23;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v30(v47, v18, AssociatedTypeWitness);
    uint64_t v31 = v29;
    v30(v29, v26, AssociatedTypeWitness);
    unint64_t v32 = &v9[*(int *)(v27 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v33(v9, v28, AssociatedTypeWitness);
    v33(v32, v31, AssociatedTypeWitness);
    id v34 = v46;
    v30(v46, v9, AssociatedTypeWitness);
    unint64_t v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v32, AssociatedTypeWitness);
    uint64_t v35 = &v9[*(int *)(TupleTypeMetadata2 + 48)];
    v30(v9, v28, AssociatedTypeWitness);
    v30(v35, v31, AssociatedTypeWitness);
    char v36 = (void (*)(uint64_t, char *, uint64_t))v30;
    uint64_t v37 = v49;
    v30(&v34[*(int *)(v49 + 36)], v35, AssociatedTypeWitness);
    v44(v9, AssociatedTypeWitness);
    uint64_t v38 = v48;
    char v39 = v45;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v34, v37);
    uint64_t v40 = v53;
    uint64_t v41 = v51;
    dispatch thunk of Collection._failEarlyRangeCheck(_:bounds:)();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v37);
    uint64_t v42 = type metadata accessor for Slice();
    uint64_t v43 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 16))(v52 + *(int *)(v42 + 40), v40, v41);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v55, v37);
    v36(v43, v39, AssociatedTypeWitness);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v36)(v43 + *(int *)(v42 + 36), &v39[*(int *)(v37 + 36)], AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void IdentifiedArray.endIndex.getter()
{
}

uint64_t IdentifiedArray.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v59 = a3;
  uint64_t v55 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v56 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v69 = (void *)((char *)v50 - v14);
  type metadata accessor for PartialRangeFrom<Int>(255, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>, MEMORY[0x1E4FBBC28]);
  uint64_t v16 = v15;
  unint64_t v17 = lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>();
  uint64_t v58 = a6;
  uint64_t v18 = *(void *)(a6 + 8);
  id v73 = v16;
  uint64_t v74 = a5;
  unint64_t v75 = v17;
  uint64_t v76 = v18;
  uint64_t v51 = type metadata accessor for Zip2Sequence();
  MEMORY[0x1F4188790](v51);
  v50[2] = (char *)v50 - v19;
  uint64_t v62 = v16;
  id v73 = v16;
  uint64_t v74 = a5;
  uint64_t v60 = a5;
  unint64_t v53 = v17;
  unint64_t v75 = v17;
  uint64_t v76 = v18;
  uint64_t v52 = v18;
  uint64_t v66 = type metadata accessor for Zip2Sequence.Iterator();
  uint64_t v54 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v65 = (char *)v50 - v20;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v67 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a1;
  if (a1 != a2)
  {
    uint64_t result = v61;
    if (a2 < v61)
    {
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
    if (v61 >= a2)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    unint64_t v63 = (void (*)(char *, char *, uint64_t))(v68 + 1);
    char v26 = (void (**)(char *, uint64_t))(v67 + 8);
    do
    {
      uint64_t v27 = a2;
      uint64_t v28 = result + 1;
      Array.subscript.getter();
      dispatch thunk of Identifiable.id.getter();
      (*v26)(v24, v12);
      id v73 = 0;
      LOBYTE(v74) = 1;
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      uint64_t result = v28;
      BOOL v29 = v27 == v28;
      a2 = v27;
    }
    while (!v29);
  }
  unint64_t v63 = (void (*)(char *, char *, uint64_t))dispatch thunk of Collection.count.getter();
  uint64_t v30 = v61;
  id v73 = (char *)v61;
  uint64_t v74 = a2;
  type metadata accessor for PartialRangeFrom<Int>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB6A0]);
  uint64_t v32 = v31;
  unint64_t v33 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v71 = MEMORY[0x1E4FBB590];
  unint64_t v72 = v33;
  swift_getWitnessTable();
  uint64_t result = Collection.count.getter();
  BOOL v34 = __OFSUB__(v63, result);
  unint64_t v63 = (void (*)(char *, char *, uint64_t))((char *)v63 - result);
  if (v34) {
    goto LABEL_19;
  }
  id v73 = (char *)v30;
  uint64_t v74 = a2;
  v50[1] = v32;
  Range<>.endIndex.getter();
  uint64_t v35 = v70;
  uint64_t result = MEMORY[0x18C115CB0](*v68, v12);
  if (result < v35)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v36 = result;
  v50[0] = v33;
  uint64_t v57 = a2;
  if (v35 != result)
  {
    if (v35 >= result)
    {
LABEL_23:
      __break(1u);
      return result;
    }
    uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v67 + 8);
    while (1)
    {
      Array.subscript.getter();
      dispatch thunk of Identifiable.id.getter();
      uint64_t result = (*v37)(v24, v12);
      uint64_t v38 = (char *)v63 + v35;
      if (__OFADD__(v35, v63)) {
        break;
      }
      ++v35;
      id v73 = v38;
      LOBYTE(v74) = 0;
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      if (v36 == v35) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
LABEL_14:
  id v73 = (char *)v61;
  uint64_t v74 = v57;
  Range<>.startIndex.getter();
  zip<A, B>(_:_:)();
  Zip2Sequence.makeIterator()();
  char v39 = v69;
  Zip2Sequence.Iterator.next()();
  uint64_t v40 = TupleTypeMetadata2;
  uint64_t v41 = *(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48);
  unsigned int v42 = v41(v39, 1, TupleTypeMetadata2);
  uint64_t v43 = v67;
  if (v42 != 1)
  {
    unint64_t v44 = *(char **)(v67 + 32);
    uint64_t v62 = (char *)(v68 + 1);
    unint64_t v63 = (void (*)(char *, char *, uint64_t))v44;
    v67 += 32;
    char v45 = (void (**)(char *, uint64_t))(v43 + 8);
    do
    {
      uint64_t v46 = v41;
      uint64_t v47 = (char *)*v69;
      v63(v24, (char *)v69 + *(int *)(v40 + 48), v12);
      dispatch thunk of Identifiable.id.getter();
      id v73 = v47;
      uint64_t v48 = v69;
      LOBYTE(v74) = 0;
      swift_getAssociatedConformanceWitness();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      (*v45)(v24, v12);
      Zip2Sequence.Iterator.next()();
      uint64_t v40 = TupleTypeMetadata2;
      uint64_t v49 = v48;
      uint64_t v41 = v46;
    }
    while (v46(v49, 1, TupleTypeMetadata2) != 1);
  }
  (*(void (**)(char *, uint64_t))(v54 + 8))(v65, v66);
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v56, v59, v60);
  type metadata accessor for Array();
  return Array.replaceSubrange<A>(_:with:)();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance IdentifiedArray<A>(uint64_t a1, Swift::Int *a2, uint64_t a3)
{
  specialized IdentifiedArray.subscript.setter(a1, *a2, a3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 8);

  return v5(a1);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>(void *a1, uint64_t *a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = v3;
  v7[1] = a3;
  uint64_t v8 = *(void *)(a3 + 16);
  v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *a2;
  v7[5] = v11;
  v7[6] = v12;
  IdentifiedArray.subscript.getter();
  return protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>;
}

void protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  Swift::Int v4 = *(void *)(*(void *)a1 + 48);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  uint64_t v8 = *(void *)(*(void *)a1 + 8);
  uint64_t v7 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v3, v7);
    specialized IdentifiedArray.subscript.setter((uint64_t)v5, v4, v8);
    uint64_t v9 = *(void (**)(void *, uint64_t))(v6 + 8);
    v9(v5, v7);
    v9(v3, v7);
  }
  else
  {
    specialized IdentifiedArray.subscript.setter(*(void *)(*(void *)a1 + 40), v4, v8);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v3, v7);
  }
  free(v3);
  free(v5);

  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance IdentifiedArray<A>()
{
  return swift_bridgeObjectRelease();
}

void (*protocol witness for MutableCollection.subscript.modify in conformance IdentifiedArray<A>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(void *a1)
{
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = MutableCollection<>.subscript.modify(v8, a2, a3, a4);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

uint64_t protocol witness for MutableCollection.partition(by:) in conformance IdentifiedArray<A>()
{
  return MutableCollection<>.partition(by:)();
}

uint64_t protocol witness for RangeReplaceableCollection.init() in conformance IdentifiedArray<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = IdentifiedArray.init()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance IdentifiedArray<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  IdentifiedArray.replaceSubrange<A>(_:with:)(*a1, a1[1], a2, a5, a3, a4);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v7(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.init(repeating:count:) in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F4184540]();
}

uint64_t protocol witness for RangeReplaceableCollection.append(_:) in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F4184508]();
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F4184518]();
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F4184520]();
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F41844B0]();
}

uint64_t protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F41844D0]();
}

uint64_t protocol witness for RangeReplaceableCollection.removeFirst() in conformance IdentifiedArray<A>()
{
  return MEMORY[0x1F41844A0]();
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance IdentifiedArray<A>()
{
  return RangeReplaceableCollection<>.removeAll(where:)();
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance IdentifiedArray<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

void protocol witness for Collection.endIndex.getter in conformance IdentifiedArray<A>()
{
}

uint64_t sub_188057154(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance IdentifiedArray<A>(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = IdentifiedArray.subscript.read(v7, *a2, *v3, v3[1], *(void *)(a3 + 16));
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*IdentifiedArray.subscript.read(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(void *a1)
{
  uint64_t v5 = *(void *)(a5 - 8);
  *a1 = a5;
  a1[1] = v5;
  a1[2] = malloc(*(void *)(v5 + 64));
  Array.subscript.getter();
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance IdentifiedArray<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MutableCollection<>.subscript.getter(a1, a2, WitnessTable, a3);
}

uint64_t protocol witness for Collection.indices.getter in conformance IdentifiedArray<A>()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

__n128 protocol witness for Sequence.makeIterator() in conformance IdentifiedArray<A>@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IdentifiedArray<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IdentifiedArray<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t base witness table accessor for Sequence in IdentifiedArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in IdentifiedArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in IdentifiedArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RangeReplaceableCollection in IdentifiedArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in IdentifiedArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in IdentifiedArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in IdentifiedArray<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized IdentifiedArray.subscript.setter(uint64_t a1, Swift::Int a2, uint64_t a3)
{
  Swift::Int v4 = v3;
  uint64_t v31 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v28 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v28 - v17;
  Array.subscript.getter();
  dispatch thunk of Identifiable.id.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    BOOL v29 = v4;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    v28(v12, v18, AssociatedTypeWitness);
    Swift::Int v32 = 0;
    char v33 = 1;
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v28(v12, v15, AssociatedTypeWitness);
    Swift::Int v4 = v29;
    Swift::Int v32 = a2;
    char v33 = 0;
    Dictionary.subscript.setter();
  }
  uint64_t v19 = type metadata accessor for Array();
  Array._makeMutableAndUnique()();
  uint64_t v20 = *v4;
  Array._checkSubscript_mutating(_:)(a2);
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v22 = v20 & 0xFFFFFFFFFFFFFF8;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v22 = v20;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 24))(v22+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * a2, v31, v6);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v19, v23, v24, v25);
  char v26 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26(v15, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))v26)(v18, AssociatedTypeWitness);
}

uint64_t specialized MutableCollection<>.subscript.setter()
{
  type metadata accessor for Slice();
  swift_getWitnessTable();

  return _writeBackMutableSlice<A, B>(_:bounds:slice:)();
}

unint64_t lazy protocol witness table accessor for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>;
  if (!lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>)
  {
    type metadata accessor for PartialRangeFrom<Int>(255, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>, MEMORY[0x1E4FBBC28]);
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PartialRangeFrom<Int> and conformance <> PartialRangeFrom<A>);
  }
  return result;
}

void type metadata accessor for PartialRangeFrom<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v4 = a4 >> 1;
  if (a4 >> 1 == a3)
  {
    return MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = a3;
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<PriorityKey>);
    uint64_t result = swift_unknownObjectRetain();
    uint64_t v5 = MEMORY[0x1E4FBC860];
    while (v6 < v4)
    {
      LayoutSubviews.subscript.getter();
      lazy protocol witness table accessor for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>();
      uint64_t result = LayoutProxy.subscript.getter();
      if ((v11 & 1) == 0)
      {
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
          uint64_t v5 = result;
        }
        unint64_t v9 = *(void *)(v5 + 16);
        unint64_t v8 = *(void *)(v5 + 24);
        if (v9 >= v8 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v5);
          uint64_t v5 = result;
        }
        *(void *)(v5 + 16) = v9 + 1;
        *(void *)(v5 + 8 * v9 + 32) = v10;
      }
      if (v4 == ++v6)
      {
        swift_unknownObjectRelease();
        return v5;
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1, uint64_t a2)
{
  int64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
  }
  uint64_t v5 = *((void *)v4 + 2);
  v7[0] = (uint64_t)(v4 + 32);
  v7[1] = v5;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  *a1 = v4;
  return result;
}

double JindoTripleVStack.Configuration.notchSize.getter()
{
  return *(double *)v0;
}

void JindoTripleVStack.Configuration.notchSize.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*JindoTripleVStack.Configuration.notchSize.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void JindoTripleVStack.Configuration.mode.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t (*JindoTripleVStack.Configuration.mode.modify(unsigned char *a1))(void, void, void, void)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double JindoTripleVStack.Configuration.defaultInsets.getter()
{
  return 0.0;
}

uint64_t (*JindoTripleVStack.Configuration.defaultInsets.modify(_OWORD *a1))(void, void, void, void)
{
  *a1 = 0u;
  a1[1] = 0u;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t JindoTripleVStack.Configuration.centerAlignment.getter()
{
  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t JindoTripleVStack.Configuration.centerAlignment.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 57) = result;
  return result;
}

uint64_t (*JindoTripleVStack.Configuration.centerAlignment.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t JindoTripleVStack.Configuration.bottomAlignment.getter()
{
  return *(unsigned __int8 *)(v0 + 58);
}

uint64_t JindoTripleVStack.Configuration.bottomAlignment.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 58) = result;
  return result;
}

uint64_t (*JindoTripleVStack.Configuration.bottomAlignment.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t JindoTripleVStack.Configuration.uniformSpacing.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t JindoTripleVStack.Configuration.uniformSpacing.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 64) = result;
  *(unsigned char *)(v2 + 72) = a2 & 1;
  return result;
}

uint64_t (*JindoTripleVStack.Configuration.uniformSpacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void JindoTripleVStack.Configuration.init(notchSize:mode:defaultInsets:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>, double a7@<D5>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 16) = 1;
  *(double *)(a1 + 24) = a4;
  *(double *)(a1 + 32) = a5;
  *(double *)(a1 + 40) = a6;
  *(double *)(a1 + 48) = a7;
  *(_WORD *)(a1 + 56) = 256;
  *(unsigned char *)(a1 + 58) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
}

char *JindoTripleVStack.Configuration.init(notchSize:horizontalSizing:layoutMargins:)@<X0>(char *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  char v8 = *result;
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(unsigned char *)(a2 + 16) = v8;
  *(double *)(a2 + 24) = a5;
  *(double *)(a2 + 32) = a6;
  *(double *)(a2 + 40) = a7;
  *(double *)(a2 + 48) = a8;
  *(_WORD *)(a2 + 56) = 257;
  *(unsigned char *)(a2 + 58) = 0;
  *(void *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 1;
  return result;
}

__n128 JindoTripleVStack.init(configuration:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 56);
  __int16 v4 = *(_WORD *)(a1 + 57);
  uint64_t v5 = *(void *)(a1 + 64);
  char v6 = *(unsigned char *)(a1 + 72);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(unsigned char *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  *(unsigned char *)(a2 + 56) = v3;
  *(_WORD *)(a2 + 57) = v4;
  *(void *)(a2 + 64) = v5;
  *(unsigned char *)(a2 + 72) = v6;
  return result;
}

BOOL static JindoTripleVStack.HorizontalMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void JindoTripleVStack.HorizontalMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int JindoTripleVStack.HorizontalMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void static JindoTripleVStack.HorizontalSizing.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static JindoTripleVStack.HorizontalSizing.leading.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static JindoTripleVStack.HorizontalSizing.trailing.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static JindoTripleVStack.HorizontalSizing.split.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

BOOL static JindoTripleVStack.HorizontalSizing.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t JindoTripleVStack.Implementation.init(configuration:proxies:)@<X0>(double *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *a1;
  double v5 = a1[1];
  char v6 = *((unsigned char *)a1 + 16);
  double v7 = a1[3];
  uint64_t v8 = *((void *)a1 + 4);
  uint64_t v9 = *((void *)a1 + 5);
  uint64_t v10 = *((void *)a1 + 6);
  char v11 = *((unsigned char *)a1 + 56);
  char v45 = *((unsigned char *)a1 + 58);
  char v46 = *((unsigned char *)a1 + 57);
  uint64_t v12 = *((void *)a1 + 8);
  char v13 = *((unsigned char *)a1 + 72);
  int v14 = *a2;
  uint64_t v15 = *((void *)a2 + 1);
  unsigned int v16 = *((unsigned __int8 *)a2 + 16);
  int v17 = *((unsigned __int8 *)a2 + 17);
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v19 = result;
  char v42 = v11;
  char v43 = v6;
  char v44 = v13;
  swift_bridgeObjectRetain();
  if (v17) {
    int v20 = 256;
  }
  else {
    int v20 = 0;
  }
  uint64_t v41 = specialized Sequence.filter(_:)(0, v19, v14, v15, v20 | v16, 0);
  swift_bridgeObjectRelease();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0) {
    goto LABEL_15;
  }
  uint64_t v21 = result;
  swift_bridgeObjectRetain();
  uint64_t v22 = specialized Sequence.filter(_:)(0, v21, v14, v15, v20 | v16, 1u);
  swift_bridgeObjectRelease();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v23 = result;
  uint64_t v39 = v22;
  uint64_t v40 = v12;
  swift_bridgeObjectRetain();
  uint64_t v24 = specialized Sequence.filter(_:)(0, v23, v14, v15, v20 | v16, 2u);
  swift_bridgeObjectRelease();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v25 = result;
  swift_bridgeObjectRetain();
  uint64_t v26 = specialized Sequence.filter(_:)(0, v25, v14, v15, v20 | v16, 3u);
  swift_bridgeObjectRelease();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v27 = result;
  swift_bridgeObjectRetain();
  uint64_t v28 = v20 | v16;
  specialized Sequence.filter(_:)(0, v27, v14, v15, v28, 4u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v29 = result;
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized Sequence.filter(_:)(0, v29, v14, v15, v28, 4u);
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31) {
    uint64_t v38 = *(void *)(v30 + 32);
  }
  else {
    uint64_t v38 = 0;
  }
  BOOL v36 = v31 == 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v26);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v26);
  uint64_t v37 = v24;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v26);
  uint64_t v32 = *(void *)(v41 + 16);
  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(v39 + 16);
  swift_bridgeObjectRelease();
  *(double *)a3 = v4;
  *(double *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = v43;
  *(double *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = v10;
  *(unsigned char *)(a3 + 56) = v42;
  *(unsigned char *)(a3 + 57) = v46;
  *(unsigned char *)(a3 + 58) = v45;
  *(void *)(a3 + 64) = v40;
  *(unsigned char *)(a3 + 72) = v44;
  *(void *)(a3 + 80) = v38;
  *(unsigned char *)(a3 + 88) = v36;
  *(_DWORD *)(a3 + 96) = v14;
  *(void *)(a3 + 104) = v15;
  *(unsigned char *)(a3 + 112) = v16;
  *(unsigned char *)(a3 + 113) = v17;
  *(void *)(a3 + 120) = 0xFFF0000000000000;
  *(void *)(a3 + 128) = 0xFFF0000000000000;
  *(unsigned char *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = v41;
  *(void *)(a3 + 168) = v32;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = v40;
  *(unsigned char *)(a3 + 200) = v44;
  uint64_t v35 = MEMORY[0x1E4FBC860];
  *(void *)(a3 + 208) = MEMORY[0x1E4FBC860];
  *(void *)(a3 + 216) = 0;
  *(void *)(a3 + 224) = v37;
  *(void *)(a3 + 232) = v33;
  *(double *)(a3 + 240) = v5 - v7;
  *(void *)(a3 + 248) = 0;
  *(void *)(a3 + 256) = v40;
  *(unsigned char *)(a3 + 264) = v44;
  *(void *)(a3 + 272) = v35;
  *(void *)(a3 + 280) = 0;
  *(void *)(a3 + 288) = v39;
  *(void *)(a3 + 296) = v34;
  *(void *)(a3 + 304) = 0;
  *(void *)(a3 + 312) = 0;
  *(void *)(a3 + 320) = v40;
  *(unsigned char *)(a3 + 328) = v44;
  *(void *)(a3 + 336) = v35;
  *(void *)(a3 + 344) = 0;
  *(_WORD *)(a3 + 352) = 3;
  *(void *)(a3 + 360) = v35;
  *(void *)(a3 + 368) = v35;
  JindoTripleVStack.Implementation.determineHorizontalMode()();
  return JindoTripleVStack.Implementation.makeChildren()();
}

void JindoTripleVStack.Implementation.determineHorizontalMode()()
{
  char v1 = *(unsigned char *)(v0 + 16);
  if (v1) {
    goto LABEL_16;
  }
  unint64_t v2 = *(void *)(v0 + 168);
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)(v0 + 160);
  if (*(void *)(v3 + 16) < v2)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  unint64_t v4 = (2 * v2) | 1;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v5, v3 + 32, 0, v4);
  swift_bridgeObjectRelease();
  double v7 = COERCE_DOUBLE(specialized Sequence<>.max()(v6));
  char v9 = v8;
  swift_bridgeObjectRelease();
  if (v9) {
    double v10 = 0.0;
  }
  else {
    double v10 = v7;
  }
  unint64_t v11 = *(void *)(v0 + 296);
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_32;
  }
  uint64_t v12 = *(void *)(v0 + 288);
  if (*(void *)(v12 + 16) >= v11)
  {
    unint64_t v13 = (2 * v11) | 1;
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = specialized Sequence.compactMap<A>(_:)(v14, v12 + 32, 0, v13);
    swift_bridgeObjectRelease();
    double v16 = COERCE_DOUBLE(specialized Sequence<>.max()(v15));
    char v18 = v17;
    swift_bridgeObjectRelease();
    if (v18)
    {
      BOOL v19 = v10 < 0.0;
      if (v10 > 0.0) {
        goto LABEL_11;
      }
    }
    else
    {
      BOOL v19 = v10 < v16;
      if (v10 > v16)
      {
LABEL_11:
        char v1 = 1;
        goto LABEL_16;
      }
    }
    if (v19) {
      char v1 = 2;
    }
    else {
      char v1 = 3;
    }
LABEL_16:
    unint64_t v20 = *(void *)(v0 + 296);
    if ((v20 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(*(void *)(v0 + 288) + 16) >= v20)
    {
      if (!v20)
      {
        char v1 = 1;
        BOOL v22 = 1;
LABEL_25:
        *(unsigned char *)(v0 + 352) = v1;
        *(unsigned char *)(v0 + 353) = v22;
        return;
      }
      unint64_t v21 = *(void *)(v0 + 168);
      if ((v21 & 0x8000000000000000) == 0)
      {
        if (*(void *)(*(void *)(v0 + 160) + 16) >= v21)
        {
          BOOL v22 = v21 == 0;
          if (v22) {
            char v1 = 2;
          }
          goto LABEL_25;
        }
        goto LABEL_29;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_33:
  __break(1u);
}

uint64_t JindoTripleVStack.Implementation.makeChildren()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  char v3 = *(unsigned char *)(v0 + 113);
  char v79 = *(unsigned char *)(v0 + 112);
  int v80 = *(_DWORD *)(v0 + 96);
  LODWORD(v87) = v80;
  *((void *)&v87 + 1) = v2;
  LOBYTE(v88) = v79;
  char v78 = v3;
  BYTE1(v88) = v3;
  swift_bridgeObjectRetain();
  uint64_t v4 = LayoutSubviews.endIndex.getter();
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  uint64_t v6 = LayoutSubviews.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 < 0 || v6 < v4) {
    goto LABEL_35;
  }
  double v7 = *(char **)(v1 + 360);
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (unint64_t)v4 > *((void *)v7 + 3) >> 1)
  {
    if (*((void *)v7 + 2) <= v4) {
      int64_t v9 = v4;
    }
    else {
      int64_t v9 = *((void *)v7 + 2);
    }
    double v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 0, v7);
  }
  *(void *)(v1 + 360) = v7;
  double v10 = *(char **)(v1 + 368);
  unint64_t v11 = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!v11 || (unint64_t)v4 > *((void *)v10 + 3) >> 1)
  {
    if (*((void *)v10 + 2) <= v4) {
      int64_t v12 = v4;
    }
    else {
      int64_t v12 = *((void *)v10 + 2);
    }
    double v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v11, v12, 0, v10);
  }
  *(void *)(v1 + 368) = v10;
  LODWORD(v87) = v80;
  *((void *)&v87 + 1) = v2;
  LOBYTE(v88) = v79;
  BYTE1(v88) = v78;
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0) {
    goto LABEL_36;
  }
  uint64_t v76 = (uint64_t *)(v1 + 360);
  uint64_t v77 = v2;
  if (result)
  {
    uint64_t v13 = 0;
    uint64_t v14 = result - 1;
    while (1)
    {
      LOBYTE(v88) = v79;
      BYTE1(v88) = v78;
      LayoutSubviews.subscript.getter();
      *(void *)&long long v87 = v81;
      *((void *)&v87 + 1) = __PAIR64__(HIDWORD(v2), v82);
      LayoutProxy.layoutPriority.getter();
      uint64_t v16 = v15;
      static ViewGeometry.invalidValue.getter();
      long long v17 = v87;
      long long v18 = v88;
      long long v19 = v89;
      long long v20 = v90;
      unint64_t v22 = *((void *)v7 + 2);
      unint64_t v21 = *((void *)v7 + 3);
      if (v22 >= v21 >> 1)
      {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v7);
        long long v20 = v90;
        long long v19 = v89;
        long long v17 = v87;
        double v7 = v34;
      }
      char v114 = 1;
      char v113 = 1;
      char v112 = 1;
      char v111 = 1;
      char v109 = 1;
      char v107 = 1;
      char v105 = 1;
      char v103 = 1;
      char v101 = 1;
      *((void *)v7 + 2) = v22 + 1;
      uint64_t v23 = &v7[256 * v22];
      *((void *)v23 + 4) = v16;
      v23 += 32;
      *((void *)v23 + 1) = 0;
      v23[16] = v114;
      int v24 = *(_DWORD *)((char *)&v87 + 3);
      *(_DWORD *)(v23 + 17) = v87;
      *((_DWORD *)v23 + 5) = v24;
      *((void *)v23 + 3) = 0;
      v23[32] = v113;
      *((_DWORD *)v23 + 9) = *(_DWORD *)((char *)&v81 + 3);
      *(_DWORD *)(v23 + 33) = v81;
      *((void *)v23 + 5) = 0;
      v23[48] = v112;
      int v25 = v83[0];
      *((_DWORD *)v23 + 13) = *(int *)((char *)v83 + 3);
      *(_DWORD *)(v23 + 49) = v25;
      *((void *)v23 + 7) = 0;
      v23[64] = v111;
      int v26 = v110[0];
      *((_DWORD *)v23 + 17) = *(_DWORD *)((char *)v110 + 3);
      *(_DWORD *)(v23 + 65) = v26;
      *((void *)v23 + 9) = 0;
      v23[80] = v109;
      int v27 = v108[0];
      *((_DWORD *)v23 + 21) = *(_DWORD *)((char *)v108 + 3);
      *(_DWORD *)(v23 + 81) = v27;
      *((void *)v23 + 11) = 0;
      v23[96] = v107;
      int v28 = v106[0];
      *((_DWORD *)v23 + 25) = *(_DWORD *)((char *)v106 + 3);
      *(_DWORD *)(v23 + 97) = v28;
      *((void *)v23 + 13) = 0;
      v23[112] = v105;
      int v29 = v104[0];
      *((_DWORD *)v23 + 29) = *(_DWORD *)((char *)v104 + 3);
      *(_DWORD *)(v23 + 113) = v29;
      *((void *)v23 + 15) = 0;
      v23[128] = v103;
      int v30 = v102[0];
      *((_DWORD *)v23 + 33) = *(_DWORD *)((char *)v102 + 3);
      *(_DWORD *)(v23 + 129) = v30;
      *(_OWORD *)(v23 + 136) = v17;
      *(_OWORD *)(v23 + 152) = v18;
      *(_OWORD *)(v23 + 168) = v19;
      *(_OWORD *)(v23 + 184) = v20;
      *((void *)v23 + 25) = 0;
      v23[208] = v101;
      v23[209] = 0;
      int v31 = v99;
      *((_WORD *)v23 + 107) = v100;
      *(_DWORD *)(v23 + 210) = v31;
      v23[248] = 0;
      *(_OWORD *)(v23 + 232) = 0u;
      *(_OWORD *)(v23 + 216) = 0u;
      unint64_t v33 = *((void *)v10 + 2);
      unint64_t v32 = *((void *)v10 + 3);
      if (v33 >= v32 >> 1) {
        double v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v10);
      }
      HIDWORD(v2) = HIDWORD(v77);
      *((void *)v10 + 2) = v33 + 1;
      *(void *)&v10[8 * v33 + 32] = v13;
      if (v14 == v13) {
        break;
      }
      ++v13;
    }
    *(void *)(v1 + 360) = v7;
    *(void *)(v1 + 368) = v10;
  }
  long long v35 = *(_OWORD *)(v1 + 288);
  long long v36 = *(_OWORD *)(v1 + 320);
  long long v37 = *(_OWORD *)(v1 + 336);
  long long v96 = *(_OWORD *)(v1 + 304);
  long long v97 = v36;
  long long v98 = v37;
  long long v38 = *(_OWORD *)(v1 + 224);
  long long v39 = *(_OWORD *)(v1 + 256);
  long long v40 = *(_OWORD *)(v1 + 272);
  long long v92 = *(_OWORD *)(v1 + 240);
  long long v93 = v39;
  long long v94 = v40;
  long long v95 = v35;
  long long v41 = *(_OWORD *)(v1 + 176);
  long long v87 = *(_OWORD *)(v1 + 160);
  long long v88 = v41;
  long long v42 = *(_OWORD *)(v1 + 208);
  long long v89 = *(_OWORD *)(v1 + 192);
  long long v90 = v42;
  long long v91 = v38;
  long long v43 = v35;
  uint64_t v73 = *((void *)&v96 + 1);
  uint64_t v74 = v96;
  uint64_t v72 = v97;
  long long v44 = v98;
  long long v45 = v38;
  uint64_t v70 = *((void *)&v92 + 1);
  uint64_t v71 = v92;
  char v66 = BYTE8(v39);
  char v67 = BYTE8(v97);
  long long v46 = v40;
  long long v47 = v87;
  uint64_t v69 = v39;
  long long v48 = v88;
  uint64_t v68 = v89;
  long long v49 = v42;
  char v65 = BYTE8(v89);
  LOBYTE(v104[0]) = BYTE8(v89);
  v110[0] = *(_DWORD *)((char *)&v89 + 9);
  *(_DWORD *)((char *)v110 + 3) = HIDWORD(v89);
  LOBYTE(v102[0]) = BYTE8(v39);
  v108[0] = *((void *)&v39 + 1) >> 8;
  *(_DWORD *)((char *)v108 + 3) = HIDWORD(v39);
  LOBYTE(v99) = BYTE8(v97);
  *(_DWORD *)((char *)v106 + 3) = HIDWORD(v97);
  v106[0] = *(_DWORD *)((char *)&v97 + 9);
  double v50 = *(double *)(v1 + 24);
  double v51 = *(double *)(v1 + 32);
  double v52 = *(double *)(v1 + 40);
  double v53 = *(double *)(v1 + 48);
  char v75 = *(unsigned char *)(v1 + 353);
  outlined retain of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>((uint64_t)&v87);
  uint64_t v54 = 0;
  uint64_t v59 = v47;
  uint64_t v60 = v49;
  uint64_t v61 = v46;
  uint64_t v62 = v45;
  uint64_t v63 = v44;
  uint64_t v64 = v43;
  do
  {
    int v55 = outlined read-only object #0 of JindoTripleVStack.Implementation.makeChildren()[v54 + 32];
    v83[0] = v80;
    uint64_t v84 = v77;
    char v85 = v79;
    char v86 = v78;
    if (v55)
    {
      if (v55 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(1, v75, v83, v76, v50, v51, v52, v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v66 &= 1u;
        LOBYTE(v102[0]) = v66;
        uint64_t v61 = v46;
        uint64_t v62 = v45;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(2, v75, v83, v76, v50, v51, v52, v53);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v67 &= 1u;
        LOBYTE(v99) = v67;
        uint64_t v63 = v44;
        uint64_t v64 = v43;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(0, v75, v83, v76, v50, v51, v52, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v65 &= 1u;
      LOBYTE(v104[0]) = v65;
      uint64_t v59 = v47;
      uint64_t v60 = v49;
    }
    ++v54;
  }
  while (v54 != 3);
  uint64_t result = outlined release of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>((uint64_t)&v87);
  char v56 = v104[0];
  int v57 = v110[0];
  *(void *)(v1 + 160) = v59;
  *(_DWORD *)(v1 + 201) = v57;
  *(_DWORD *)(v1 + 204) = *(_DWORD *)((char *)v110 + 3);
  LOBYTE(v57) = v102[0];
  *(_DWORD *)(v1 + 265) = v108[0];
  *(_DWORD *)(v1 + 268) = *(_DWORD *)((char *)v108 + 3);
  char v58 = v99;
  *(_DWORD *)(v1 + 329) = v106[0];
  *(_DWORD *)(v1 + 332) = *(_DWORD *)((char *)v106 + 3);
  *(void *)(v1 + 168) = *((void *)&v47 + 1);
  *(_OWORD *)(v1 + 176) = v48;
  *(void *)(v1 + 192) = v68;
  *(unsigned char *)(v1 + 200) = v56;
  *(void *)(v1 + 208) = v60;
  *(void *)(v1 + 216) = *((void *)&v49 + 1);
  *(void *)(v1 + 224) = v62;
  *(void *)(v1 + 232) = *((void *)&v45 + 1);
  *(void *)(v1 + 240) = v71;
  *(void *)(v1 + 248) = v70;
  *(void *)(v1 + 256) = v69;
  *(unsigned char *)(v1 + 264) = v57;
  *(void *)(v1 + 272) = v61;
  *(void *)(v1 + 280) = *((void *)&v46 + 1);
  *(void *)(v1 + 288) = v64;
  *(void *)(v1 + 296) = *((void *)&v43 + 1);
  *(void *)(v1 + 304) = v74;
  *(void *)(v1 + 312) = v73;
  *(void *)(v1 + 320) = v72;
  *(unsigned char *)(v1 + 328) = v58;
  *(void *)(v1 + 336) = v63;
  *(void *)(v1 + 344) = *((void *)&v44 + 1);
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JindoTripleVStack.FixedProposal(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
  {
    char v2 = *(unsigned char *)(a2 + 16);
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(unsigned char *)(a2 + 16)) {
        return 1;
      }
    }
    else
    {
      if (*(double *)(a1 + 8) != *(double *)(a2 + 8)) {
        char v2 = 1;
      }
      if ((v2 & 1) == 0) {
        return 1;
      }
    }
  }
  return 0;
}

void protocol witness for static CaseIterable.allCases.getter in conformance JindoTripleVStack.Stack(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance JindoTripleVStack.Stack;
}

char *specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)(uint64_t a1, int64_t *a2)
{
  outlined init with take of Int?(a1, (uint64_t)v37);
  outlined init with take of Int?(a1 + 16, (uint64_t)v36);
  outlined init with take of Int?(a1 + 32, (uint64_t)v35);
  uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0, MEMORY[0x1E4FBC860]);
  outlined init with take of Int?((uint64_t)v37, (uint64_t)&v38);
  if (v39) {
    goto LABEL_9;
  }
  unint64_t v8 = v38;
  if ((v38 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  int64_t v5 = *a2;
  unint64_t v6 = *(void *)(*a2 + 16);
  if (v38 >= v6)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 + 32;
  if (*(unsigned char *)(v9 + 80 * v38 + 40)) {
    goto LABEL_9;
  }
  double v7 = *(double *)(v9 + 80 * v38 + 32) / (double)*(uint64_t *)(v9 + 80 * v38 + 24);
  if (v7 < 0.0) {
    double v7 = 0.0;
  }
  unint64_t v8 = *((void *)v4 + 2);
  unint64_t v6 = *((void *)v4 + 3);
  int64_t v5 = v8 + 1;
  if (v8 >= v6 >> 1) {
    goto LABEL_34;
  }
  while (1)
  {
    *((void *)v4 + 2) = v5;
    *(double *)&v4[8 * v8 + 32] = v7;
LABEL_9:
    outlined init with take of Int?((uint64_t)v36, (uint64_t)&v40);
    if ((v41 & 1) == 0)
    {
      unint64_t v8 = v40;
      if ((v40 & 0x8000000000000000) != 0)
      {
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      int64_t v5 = *a2;
      unint64_t v6 = *(void *)(*a2 + 16);
      if (v40 >= v6) {
        goto LABEL_31;
      }
      int64_t v10 = v5 + 32;
      if ((*(unsigned char *)(v10 + 80 * v40 + 40) & 1) == 0)
      {
        double v11 = *(double *)(v10 + 80 * v40 + 32) / (double)*(uint64_t *)(v10 + 80 * v40 + 24);
        if (v11 < 0.0) {
          double v11 = 0.0;
        }
        unint64_t v12 = *((void *)v4 + 2);
        unint64_t v13 = *((void *)v4 + 3);
        unint64_t v14 = v12 + 1;
        if (v12 >= v13 >> 1)
        {
          unint64_t v33 = v12 + 1;
          int v24 = v4;
          double v31 = v11;
          unint64_t v25 = *((void *)v4 + 2);
          int v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 1, 1, v24);
          unint64_t v12 = v25;
          double v11 = v31;
          unint64_t v14 = v33;
          uint64_t v4 = v26;
        }
        *((void *)v4 + 2) = v14;
        *(double *)&v4[8 * v12 + 32] = v11;
      }
    }
    outlined init with take of Int?((uint64_t)v35, (uint64_t)&v42);
    if (v43) {
      return v4;
    }
    unint64_t v8 = v42;
    if ((v42 & 0x8000000000000000) != 0) {
      goto LABEL_32;
    }
    int64_t v5 = *a2;
    unint64_t v6 = *(void *)(*a2 + 16);
    if (v42 < v6) {
      break;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    int64_t v32 = v5;
    unint64_t v21 = v4;
    double v30 = v7;
    unint64_t v22 = v8;
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v5, 1, v21);
    unint64_t v8 = v22;
    double v7 = v30;
    int64_t v5 = v32;
    uint64_t v4 = v23;
  }
  int64_t v15 = v5 + 32;
  if ((*(unsigned char *)(v15 + 80 * v42 + 40) & 1) == 0)
  {
    double v16 = *(double *)(v15 + 80 * v42 + 32) / (double)*(uint64_t *)(v15 + 80 * v42 + 24);
    if (v16 < 0.0) {
      double v16 = 0.0;
    }
    unint64_t v17 = *((void *)v4 + 2);
    unint64_t v18 = *((void *)v4 + 3);
    unint64_t v19 = v17 + 1;
    if (v17 >= v18 >> 1)
    {
      int v27 = v4;
      double v34 = v16;
      unint64_t v28 = *((void *)v4 + 2);
      int v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v17 + 1, 1, v27);
      unint64_t v17 = v28;
      double v16 = v34;
      uint64_t v4 = v29;
    }
    *((void *)v4 + 2) = v19;
    *(double *)&v4[8 * v17 + 32] = v16;
  }
  return v4;
}

char *specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  outlined init with take of Int?(a1, (uint64_t)v26);
  outlined init with take of Int?(a1 + 16, (uint64_t)v25);
  outlined init with take of Int?(a1 + 32, (uint64_t)v24);
  outlined init with take of Int?((uint64_t)v26, (uint64_t)v23);
  outlined init with take of Int?((uint64_t)v25, (uint64_t)v22);
  outlined init with take of Int?((uint64_t)v24, (uint64_t)v21);
  unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 3, 0, MEMORY[0x1E4FBC860]);
  closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)(0, v23, a2, a3, a4, (uint64_t)&v19);
  if ((v20 & 1) == 0)
  {
    uint64_t v9 = v19;
    unint64_t v11 = *((void *)v8 + 2);
    unint64_t v10 = *((void *)v8 + 3);
    if (v11 >= v10 >> 1) {
      unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v11 + 1;
    *(void *)&v8[8 * v11 + 32] = v9;
  }
  closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)(1, v22, a2, a3, a4, (uint64_t)&v19);
  if ((v20 & 1) == 0)
  {
    uint64_t v12 = v19;
    unint64_t v14 = *((void *)v8 + 2);
    unint64_t v13 = *((void *)v8 + 3);
    if (v14 >= v13 >> 1) {
      unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v14 + 1;
    *(void *)&v8[8 * v14 + 32] = v12;
  }
  closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)(2, v21, a2, a3, a4, (uint64_t)&v19);
  if ((v20 & 1) == 0)
  {
    uint64_t v15 = v19;
    unint64_t v17 = *((void *)v8 + 2);
    unint64_t v16 = *((void *)v8 + 3);
    if (v17 >= v16 >> 1) {
      unint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v17 + 1;
    *(void *)&v8[8 * v17 + 32] = v15;
  }
  return v8;
}

char *JindoTripleVStack.MajorAxisGroup.allGroups.getter(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  unint64_t v10 = *(void *)(a4 + 16);
  if (__OFADD__(v10, 2))
  {
    __break(1u);
  }
  else
  {
    double v8 = a2;
    double v9 = a1;
    a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 + 2, 0, MEMORY[0x1E4FBC860]);
    unint64_t v7 = *((void *)a6 + 2);
    unint64_t v10 = *((void *)a6 + 3);
    int64_t v6 = v7 + 1;
    if (v7 < v10 >> 1) {
      goto LABEL_3;
    }
  }
  a6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v6, 1, a6);
LABEL_3:
  *((void *)a6 + 2) = v6;
  unint64_t v11 = &a6[24 * v7];
  *((void *)v11 + 4) = 0;
  *((double *)v11 + 5) = v9;
  v11[48] = 0;
  unint64_t v18 = a6;
  uint64_t v12 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v12);
  unint64_t v13 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
  }
  unint64_t v15 = *((void *)v13 + 2);
  unint64_t v14 = *((void *)v13 + 3);
  if (v15 >= v14 >> 1) {
    unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v13);
  }
  *((void *)v13 + 2) = v15 + 1;
  unint64_t v16 = &v13[24 * v15];
  *((void *)v16 + 4) = 0;
  *((double *)v16 + 5) = v8;
  v16[48] = 0;
  return v13;
}

uint64_t JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(uint64_t result, double a2)
{
  double v11 = a2;
  if (!result)
  {
    double v13 = *(double *)(v2 + 8);
    if (v13 < v11) {
      double v13 = v11;
    }
    *(double *)(v2 + 8) = v13;
    uint64_t v12 = *(char **)(v2 + 24);
    if (*((void *)v12 + 2))
    {
      double v10 = *((double *)v12 + 5);
      uint64_t v3 = v12[48];
      if ((v3 & 1) == 0)
      {
        if (v10 - v11 < 0.0) {
          double v10 = 0.0;
        }
        else {
          double v10 = v10 - v11;
        }
      }
      unint64_t v4 = *((void *)v12 + 4);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        if (!*((void *)v12 + 2))
        {
LABEL_52:
          __break(1u);
          goto LABEL_53;
        }
LABEL_16:
        *((void *)v12 + 4) = v4;
        *((double *)v12 + 5) = v10;
        v12[48] = v3;
        goto LABEL_17;
      }
LABEL_51:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
      uint64_t v12 = (char *)result;
      if (!*(void *)(result + 16)) {
        goto LABEL_52;
      }
      goto LABEL_16;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  uint64_t v3 = result;
  if (*(void *)v2 == result)
  {
    uint64_t v12 = *(char **)(v2 + 24);
    if (*((void *)v12 + 2))
    {
      uint64_t v3 = *((void *)v12 + 4);
      double v10 = *(double *)(v2 + 8);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (result)
      {
        if (*((void *)v12 + 2))
        {
LABEL_6:
          *((void *)v12 + 4) = v3;
          *((double *)v12 + 5) = v11 - v10;
          v12[48] = 0;
LABEL_17:
          *(void *)(v2 + 24) = v12;
          return result;
        }
        goto LABEL_55;
      }
LABEL_54:
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
      uint64_t v12 = (char *)result;
      if (*(void *)(result + 16)) {
        goto LABEL_6;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v14 = *(void *)(v2 + 24);
  v2 += 24;
  uint64_t v12 = (char *)v14;
  unint64_t v15 = *(void *)(v14 + 16);
  if (!v15) {
    return result;
  }
  double v11 = a2 - *(double *)(v2 - 16);
  unint64_t v16 = v12 + 32;
  uint64_t v17 = *((void *)v12 + 4);
  if (v17 > result)
  {
    unint64_t v8 = 0;
    unint64_t v4 = 1;
LABEL_22:
    uint64_t v9 = 24 * v8;
    unint64_t v18 = &v16[24 * v8];
    uint64_t v5 = *(void *)v18 - v3;
    if (!__OFSUB__(*(void *)v18, v3))
    {
      double v7 = *((double *)v18 + 1);
      uint64_t v6 = v18[16];
      if ((v6 & 1) == 0)
      {
        double v19 = v7 - v11;
        if (v7 - v11 < 0.0) {
          double v19 = 0.0;
        }
        double v7 = v19;
      }
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_28;
      }
      goto LABEL_57;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
LABEL_28:
    if (v8 >= *((void *)v12 + 2))
    {
      __break(1u);
    }
    else
    {
      char v20 = &v12[v9];
      *((void *)v20 + 4) = v3;
      *((double *)v20 + 5) = v11;
      v20[48] = 0;
      *(void *)uint64_t v2 = v12;
      if (*((void *)v12 + 2) >= v4) {
        return (uint64_t)specialized Array.replaceSubrange<A>(_:with:)(v4, v4, v5, *(uint64_t *)&v7, v6);
      }
    }
    __break(1u);
    goto LABEL_60;
  }
  unint64_t v4 = 0;
  if (v17 != result)
  {
    unint64_t v21 = (uint64_t *)(v12 + 56);
    while (1)
    {
      uint64_t v22 = *(v21 - 3);
      BOOL v23 = __OFSUB__(v3, v22);
      v3 -= v22;
      if (v23) {
        break;
      }
      double v24 = *((double *)v21 - 2);
      if (*((unsigned char *)v21 - 8)) {
        double v24 = 0.0;
      }
      if (v15 - 1 == v4) {
        return result;
      }
      double v11 = v11 - v24;
      double v25 = *(double *)v21;
      if (v3 < *v21)
      {
        unint64_t v8 = v4 + 1;
        v4 += 2;
        goto LABEL_22;
      }
      ++v4;
      v21 += 3;
      if (v3 == *(void *)&v25) {
        goto LABEL_39;
      }
    }
    __break(1u);
    goto LABEL_50;
  }
LABEL_39:
  if (v4 < v15)
  {
    uint64_t v3 = 24 * v4;
    int v26 = &v16[24 * v4];
    uint64_t v6 = *(void *)v26;
    LOBYTE(v5) = v26[16];
    double v27 = *((double *)v26 + 1);
    if (v11 >= v27) {
      double v27 = v11;
    }
    if (v26[16]) {
      double v7 = *((double *)v26 + 1);
    }
    else {
      double v7 = v27;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result) {
      goto LABEL_46;
    }
    goto LABEL_61;
  }
LABEL_60:
  __break(1u);
LABEL_61:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
  uint64_t v12 = (char *)result;
LABEL_46:
  if (v4 >= *((void *)v12 + 2))
  {
    __break(1u);
  }
  else
  {
    unint64_t v28 = &v12[v3];
    *((void *)v28 + 4) = v6;
    *((double *)v28 + 5) = v7;
    v28[48] = v5;
    *(void *)uint64_t v2 = v12;
  }
  return result;
}

double JindoTripleVStack.sizeThatFits(proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, int *a5)
{
  int v10 = *a5;
  uint64_t v11 = *((void *)a5 + 1);
  char v12 = *((unsigned char *)a5 + 16);
  char v13 = *((unsigned char *)a5 + 17);
  char v14 = *((unsigned char *)v5 + 16);
  uint64_t v15 = *((void *)v5 + 3);
  uint64_t v16 = *((void *)v5 + 4);
  uint64_t v17 = *((void *)v5 + 5);
  uint64_t v18 = *((void *)v5 + 6);
  char v19 = *((unsigned char *)v5 + 56);
  __int16 v20 = *(_WORD *)((char *)v5 + 57);
  uint64_t v21 = *((void *)v5 + 8);
  char v22 = *((unsigned char *)v5 + 72);
  long long v35 = *v5;
  char v36 = v14;
  *(void *)&long long v37 = v15;
  *((void *)&v37 + 1) = v16;
  *(void *)&long long v38 = v17;
  *((void *)&v38 + 1) = v18;
  char v39 = v19;
  __int16 v40 = v20;
  uint64_t v41 = v21;
  char v42 = v22;
  LODWORD(v105) = v10;
  *((void *)&v105 + 1) = v11;
  LOBYTE(v106) = v12;
  BYTE1(v106) = v13;
  swift_bridgeObjectRetain();
  JindoTripleVStack.Implementation.init(configuration:proxies:)((double *)&v35, (int *)&v105, (uint64_t)&v70);
  if (v19)
  {
    int v23 = a4 & 1;
  }
  else
  {
    if ((a2 & 1) == 0)
    {
      EdgeInsets.horizontal.getter();
      *(double *)&a1 = *(double *)&a1 - v24;
    }
    if (a4)
    {
      int v23 = 1;
    }
    else
    {
      EdgeInsets.vertical.getter();
      int v23 = 0;
      *(double *)&a3 = *(double *)&a3 - v25;
    }
  }
  double v26 = *(double *)&a1;
  if (a2) {
    double v26 = 0.0;
  }
  double v27 = v84;
  if (v84 != v26) {
    goto LABEL_18;
  }
  double v28 = v85;
  if ((v86 & 1) == 0)
  {
    if (v85 == *(double *)&a3) {
      char v30 = v23;
    }
    else {
      char v30 = 1;
    }
    if ((v30 & 1) == 0)
    {
      char v29 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!v23)
  {
LABEL_18:
    double v84 = v26;
    double v85 = *(double *)&a3;
    char v86 = v23;
    long long v105 = 0u;
    long long v106 = 0u;
    char v107 = 1;
    JindoTripleVStack.Implementation.sizeAndPlaceChildren(in:bounds:)(a3, v23, (uint64_t)&v105, v26);
    double v87 = v31;
    uint64_t v88 = v32;
    double v27 = v84;
    double v28 = v85;
    char v29 = v86;
    goto LABEL_19;
  }
  char v29 = 1;
LABEL_19:
  double v33 = v87;
  long long v56 = v91;
  long long v57 = v92;
  long long v54 = v89;
  long long v55 = v90;
  long long v60 = v95;
  long long v61 = v96;
  long long v58 = v93;
  long long v59 = v94;
  long long v64 = v99;
  long long v65 = v100;
  long long v62 = v97;
  long long v63 = v98;
  long long v35 = v70;
  char v36 = v71;
  long long v37 = v72;
  long long v38 = v73;
  char v39 = v74;
  __int16 v40 = v75;
  uint64_t v41 = v76;
  char v42 = v77;
  uint64_t v43 = v78;
  char v44 = v79;
  int v45 = v80;
  uint64_t v46 = v81;
  char v47 = v82;
  char v48 = v83;
  double v49 = v27;
  double v50 = v28;
  char v51 = v29;
  double v52 = v87;
  uint64_t v53 = v88;
  char v66 = v101;
  char v67 = v102;
  uint64_t v68 = v103;
  uint64_t v69 = v104;
  outlined release of JindoTripleVStack.Implementation((uint64_t)&v35);
  return v33;
}

uint64_t JindoTripleVStack.placeSubviews(in:proposal:subviews:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, double *a5, double a6, double a7, double a8, double a9)
{
  int v18 = *(_DWORD *)a5;
  double v19 = a5[1];
  char v20 = *((unsigned char *)a5 + 16);
  char v21 = *((unsigned char *)a5 + 17);
  char v22 = *((unsigned char *)v9 + 16);
  uint64_t v23 = *((void *)v9 + 3);
  uint64_t v24 = *((void *)v9 + 4);
  uint64_t v25 = *((void *)v9 + 5);
  uint64_t v26 = *((void *)v9 + 6);
  char v27 = *((unsigned char *)v9 + 56);
  __int16 v28 = *(_WORD *)((char *)v9 + 57);
  uint64_t v29 = *((void *)v9 + 8);
  char v30 = *((unsigned char *)v9 + 72);
  long long v42 = *v9;
  char v43 = v22;
  *(void *)&long long v44 = v23;
  *((void *)&v44 + 1) = v24;
  *(void *)&long long v45 = v25;
  *((void *)&v45 + 1) = v26;
  char v46 = v27;
  __int16 v47 = v28;
  uint64_t v48 = v29;
  char v49 = v30;
  LODWORD(v110) = v18;
  double v111 = v19;
  LOBYTE(v112) = v20;
  BYTE1(v112) = v21;
  swift_bridgeObjectRetain();
  JindoTripleVStack.Implementation.init(configuration:proxies:)((double *)&v42, (int *)&v110, (uint64_t)&v77);
  if (v27)
  {
    char v31 = a4 & 1;
  }
  else
  {
    CGRect.inset(by:)();
    a6 = v32;
    a7 = v33;
    a8 = v34;
    a9 = v35;
    if ((a2 & 1) == 0)
    {
      EdgeInsets.horizontal.getter();
      *(double *)&a1 = *(double *)&a1 - v36;
    }
    if (a4)
    {
      char v31 = 1;
    }
    else
    {
      EdgeInsets.vertical.getter();
      char v31 = 0;
      *(double *)&a3 = *(double *)&a3 - v37;
    }
  }
  double v38 = *(double *)&a1;
  if (a2) {
    double v38 = 0.0;
  }
  double v91 = v38;
  uint64_t v92 = a3;
  char v93 = v31;
  double v110 = a6;
  double v111 = a7;
  double v112 = a8;
  double v113 = a9;
  char v114 = 0;
  JindoTripleVStack.Implementation.sizeAndPlaceChildren(in:bounds:)(a3, v31, (uint64_t)&v110, v38);
  long long v63 = v96;
  long long v64 = v97;
  long long v61 = v94;
  long long v62 = v95;
  long long v67 = v100;
  long long v68 = v101;
  long long v65 = v98;
  long long v66 = v99;
  long long v71 = v104;
  long long v72 = v105;
  long long v69 = v102;
  long long v70 = v103;
  long long v42 = v77;
  char v43 = v78;
  long long v44 = v79;
  long long v45 = v80;
  char v46 = v81;
  __int16 v47 = v82;
  uint64_t v48 = v83;
  char v49 = v84;
  uint64_t v50 = v85;
  char v51 = v86;
  int v52 = v87;
  uint64_t v53 = v88;
  char v54 = v89;
  char v55 = v90;
  double v56 = v91;
  uint64_t v57 = v92;
  char v58 = v93;
  uint64_t v59 = v39;
  uint64_t v60 = v40;
  char v73 = v106;
  char v74 = v107;
  uint64_t v75 = v108;
  uint64_t v76 = v109;
  return outlined release of JindoTripleVStack.Implementation((uint64_t)&v42);
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance JindoTripleVStack(uint64_t a1, char a2, uint64_t a3, char a4, int *a5)
{
  return JindoTripleVStack.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance JindoTripleVStack(uint64_t a1, char a2, uint64_t a3, char a4, double *a5, double a6, double a7, double a8, double a9)
{
  return JindoTripleVStack.placeSubviews(in:proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, a9);
}

void one-time initialization function for leading()
{
  static JindoTripleVStack.Position.leading = 0;
  qword_1E8FF8A00 = 0;
  byte_1E8FF8A08 = 1;
  qword_1E8FF8A10 = 0;
  byte_1E8FF8A18 = 1;
}

uint64_t static JindoTripleVStack.Position.leading.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for leading != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_1E8FF8A00;
  char v3 = byte_1E8FF8A08;
  uint64_t v4 = qword_1E8FF8A10;
  char v5 = byte_1E8FF8A18;
  *(unsigned char *)a1 = static JindoTripleVStack.Position.leading;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t static JindoTripleVStack.Position.leading(inset:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return static JindoTripleVStack.Position.leading(inset:)(a1, a2, 0, a3);
}

void one-time initialization function for trailing()
{
  static JindoTripleVStack.Position.trailing = 1;
  qword_1E8FF8A28 = 0;
  byte_1E8FF8A30 = 1;
  qword_1E8FF8A38 = 0;
  byte_1E8FF8A40 = 1;
}

uint64_t static JindoTripleVStack.Position.trailing.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for trailing != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_1E8FF8A28;
  char v3 = byte_1E8FF8A30;
  uint64_t v4 = qword_1E8FF8A38;
  char v5 = byte_1E8FF8A40;
  *(unsigned char *)a1 = static JindoTripleVStack.Position.trailing;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t static JindoTripleVStack.Position.trailing(inset:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return static JindoTripleVStack.Position.leading(inset:)(a1, a2, 1, a3);
}

uint64_t static JindoTripleVStack.Position.leading(inset:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = a3;
  *(void *)(a4 + 8) = result;
  *(unsigned char *)(a4 + 16) = a2 & 1;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 32) = 1;
  return result;
}

void one-time initialization function for center()
{
  static JindoTripleVStack.Position.center = 2;
  qword_1E9000A60 = 0;
  byte_1E9000A68 = 1;
  qword_1E9000A70 = 0;
  byte_1E9000A78 = 1;
}

uint64_t static JindoTripleVStack.Position.center.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for center != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_1E9000A60;
  char v3 = byte_1E9000A68;
  uint64_t v4 = qword_1E9000A70;
  char v5 = byte_1E9000A78;
  *(unsigned char *)a1 = static JindoTripleVStack.Position.center;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

void one-time initialization function for bottom()
{
  static JindoTripleVStack.Position.bottom = 3;
  qword_1E9000A30 = 0;
  byte_1E9000A38 = 1;
  qword_1E9000A40 = 0;
  byte_1E9000A48 = 1;
}

uint64_t static JindoTripleVStack.Position.bottom.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for bottom != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_1E9000A30;
  char v3 = byte_1E9000A38;
  uint64_t v4 = qword_1E9000A40;
  char v5 = byte_1E9000A48;
  *(unsigned char *)a1 = static JindoTripleVStack.Position.bottom;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t static JindoTripleVStack.Position.bottom(leadingInset:trailingInset:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(unsigned char *)a5 = 3;
  *(void *)(a5 + 8) = result;
  *(unsigned char *)(a5 + 16) = a2 & 1;
  *(void *)(a5 + 24) = a3;
  *(unsigned char *)(a5 + 32) = a4 & 1;
  return result;
}

void one-time initialization function for notch()
{
  static JindoTripleVStack.Position.notch = 4;
  qword_1E9034820 = 0;
  byte_1E9034828 = 1;
  qword_1E9034830 = 0;
  byte_1E9034838 = 1;
}

uint64_t static JindoTripleVStack.Position.notch.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for notch != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_1E9034820;
  char v3 = byte_1E9034828;
  uint64_t v4 = qword_1E9034830;
  char v5 = byte_1E9034838;
  *(unsigned char *)a1 = static JindoTripleVStack.Position.notch;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t JindoTripleVStack.StackHeader.computeSpacingAndPadding(stack:layoutMargins:horizontalFullWidth:proxies:children:)(char a1, char a2, int *a3, uint64_t *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v9 = v8;
  int v50 = *a3;
  uint64_t v16 = *((void *)a3 + 1);
  char v48 = *((unsigned char *)a3 + 17);
  char v49 = *((unsigned char *)a3 + 16);
  unint64_t v17 = *(void *)v9;
  unint64_t v18 = *(void *)(*(void *)v9 + 16);
  uint64_t v19 = *(void *)(v9 + 48);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v18 > *(void *)(v19 + 24) >> 1)
  {
    if (*(void *)(v19 + 16) <= v18) {
      int64_t v21 = v18;
    }
    else {
      int64_t v21 = *(void *)(v19 + 16);
    }
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v21, 0, (char *)v19);
    uint64_t v19 = result;
  }
  *(void *)(v9 + 48) = v19;
  uint64_t v22 = *(void *)(v17 + 16);
  if (a1)
  {
    if (a1 == 1)
    {
      if (!v22) {
        return result;
      }
      char v44 = 0;
      char v23 = 1;
      goto LABEL_20;
    }
    if ((a2 & 1) == 0)
    {
      if (!v22) {
        return result;
      }
      char v23 = 0;
      char v24 = 8;
      goto LABEL_19;
    }
    goto LABEL_15;
  }
  if (a2)
  {
LABEL_15:
    if (!v22) {
      return result;
    }
    char v23 = 0;
    char v24 = 10;
    goto LABEL_19;
  }
  if (!v22) {
    return result;
  }
  char v23 = 0;
  char v24 = 2;
LABEL_19:
  char v44 = v24;
LABEL_20:
  double v25 = *(double *)(v9 + 56);
  uint64_t v26 = *a4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  char v43 = a4;
  if ((result & 1) == 0)
  {
LABEL_56:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v26);
    uint64_t v26 = result;
  }
  uint64_t v27 = 0;
  unint64_t v28 = *(void *)(v17 + 32);
  unint64_t v46 = v17 + 40;
  uint64_t v47 = v26 + 32;
  uint64_t v52 = v22 - 1;
  double v29 = 0.0;
  uint64_t v45 = v26;
  while (1)
  {
    unint64_t v17 = *(void *)(v19 + 16);
    unint64_t v30 = *(void *)(v19 + 24);
    if (v17 >= v30 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v17 + 1, 1, (char *)v19);
      uint64_t v19 = result;
    }
    double v25 = v29 + v25;
    *(void *)(v19 + 16) = v17 + 1;
    *(double *)(v19 + 8 * v17 + 32) = v25;
    if ((v28 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if (v28 >= *(void *)(v26 + 16)) {
      goto LABEL_54;
    }
    uint64_t v22 = v47 + (v28 << 8);
    if (a1)
    {
      if (a1 == 1)
      {
        *(double *)(v22 + 56) = v29;
        *(unsigned char *)(v22 + 64) = 0;
        if (v23) {
          goto LABEL_48;
        }
      }
      else
      {
        *(double *)(v22 + 72) = v29;
        *(unsigned char *)(v22 + 80) = 0;
        if (v23) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      *(double *)(v22 + 40) = v29;
      *(unsigned char *)(v22 + 48) = 0;
      if (v23) {
        goto LABEL_48;
      }
    }
    LODWORD(v54) = v50;
    LOBYTE(v55) = v49;
    BYTE1(v55) = v48;
    LayoutSubviews.subscript.getter();
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<ContentMarginsKey>);
    unint64_t v17 = v31;
    lazy protocol witness table accessor for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>();
    uint64_t result = LayoutProxy.subscript.getter();
    if ((v61 & 1) == 0)
    {
      if (v28 >= *(void *)(v26 + 16)) {
        goto LABEL_55;
      }
      double v32 = v59;
      double v33 = v57;
      double v34 = v55;
      double v35 = v54;
      if (v60) {
        double v32 = a8;
      }
      double v36 = v32 - a8;
      if (v58) {
        double v33 = a7;
      }
      double v37 = v33 - a7;
      if (v56) {
        double v34 = a6;
      }
      double v38 = v34 - a6;
      if (v16) {
        double v35 = a5;
      }
      double v39 = v35 - a5;
      char v40 = v44 | (v27 == 0);
      if (v52 == v27) {
        v40 |= 4u;
      }
      *(double *)(v22 + 216) = v39;
      *(double *)(v22 + 224) = v38;
      *(double *)(v22 + 232) = v37;
      *(double *)(v22 + 240) = v36;
      *(unsigned char *)(v22 + 248) = v40;
    }
LABEL_48:
    if (v52 == v27) {
      break;
    }
    unint64_t v41 = *(void *)(v46 + 8 * v27);
    if (*(unsigned char *)(v9 + 40))
    {
      swift_bridgeObjectRetain();
      LayoutSubviews.subscript.getter();
      LayoutSubview.spacing.getter();
      uint64_t v26 = v45;
      LayoutSubviews.subscript.getter();
      swift_bridgeObjectRelease();
      LayoutSubview.spacing.getter();
      uint64_t v22 = v53;
      HIDWORD(v54) = HIDWORD(v53);
      ViewSpacing.distance(to:along:)();
      double v29 = v42;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      double v29 = *(double *)(v9 + 32);
    }
    ++v27;
    unint64_t v28 = v41;
  }
  *char v43 = v26;
  *(void *)(v9 + 48) = v19;
  *(double *)(v9 + 56) = v25;
  return result;
}

uint64_t JindoTripleVStack.Implementation.sizeAndPlaceChildren(in:bounds:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  uint64_t v5 = v4;
  double v7 = *(double *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  char v8 = *(unsigned char *)(v4 + 16);
  int v170 = a2 & 1;
  v195[0] = *(_DWORD *)(v4 + 17);
  *(_DWORD *)((char *)v195 + 3) = *(_DWORD *)(v4 + 20);
  uint64_t v9 = *(void *)(v4 + 24);
  uint64_t v10 = *(void *)(v4 + 32);
  uint64_t v12 = *(void *)(v4 + 40);
  uint64_t v11 = *(void *)(v4 + 48);
  char v13 = *(unsigned char *)(v4 + 56);
  char v14 = *(unsigned char *)(v4 + 57);
  char v15 = *(unsigned char *)(v4 + 58);
  int v16 = *(_DWORD *)(v4 + 59);
  char v194 = *(unsigned char *)(v4 + 63);
  int v193 = v16;
  uint64_t v155 = *(void *)(v4 + 64);
  char v17 = *(unsigned char *)(v4 + 72);
  char v149 = v17;
  char v150 = v13;
  long long v18 = *(_OWORD *)(v4 + 73);
  *(void *)((char *)v192 + 15) = *(void *)(v4 + 88);
  v192[0] = v18;
  unsigned int v167 = *(_DWORD *)(v4 + 96);
  unsigned int v156 = *(_DWORD *)(v4 + 100);
  uint64_t v19 = *(void *)(v4 + 104);
  char v191 = *(unsigned char *)(v4 + 112);
  char v130 = v191;
  char v190 = *(unsigned char *)(v4 + 113);
  char v133 = v190;
  long long v20 = *(_OWORD *)(v4 + 114);
  long long v21 = *(_OWORD *)(v4 + 130);
  *(_OWORD *)((char *)v189 + 14) = *(_OWORD *)(v4 + 144);
  v189[0] = v21;
  long long v188 = v20;
  unint64_t v22 = *(void *)(v4 + 160);
  uint64_t v23 = *(void *)(v4 + 168);
  uint64_t v143 = *(void *)(v4 + 184);
  uint64_t v144 = *(void *)(v4 + 176);
  uint64_t v142 = *(void *)(v4 + 192);
  char v24 = *(unsigned char *)(v4 + 200);
  int v25 = *(_DWORD *)(v4 + 201);
  *(_DWORD *)((char *)v187 + 3) = *(_DWORD *)(v4 + 204);
  v187[0] = v25;
  uint64_t v157 = *(void *)(v4 + 208);
  unint64_t v26 = *(void *)(v4 + 232);
  unint64_t v153 = v22;
  uint64_t v154 = *(void *)(v4 + 224);
  uint64_t v136 = *(void *)(v4 + 216);
  long long v137 = *(_OWORD *)(v4 + 240);
  uint64_t v147 = *(void *)(v4 + 256);
  char v145 = v24;
  char v146 = *(unsigned char *)(v4 + 264);
  int v27 = *(_DWORD *)(v4 + 265);
  *(_DWORD *)((char *)v186 + 3) = *(_DWORD *)(v4 + 268);
  v186[0] = v27;
  int v28 = *(_DWORD *)(v4 + 329);
  *(_DWORD *)((char *)v185 + 3) = *(_DWORD *)(v4 + 332);
  v185[0] = v28;
  __int16 v183 = *(_WORD *)(v4 + 358);
  int v182 = *(_DWORD *)(v4 + 354);
  *(_DWORD *)((char *)&__dst[1] + 1) = *(_DWORD *)(v4 + 17);
  DWORD1(__dst[1]) = *(_DWORD *)(v4 + 20);
  *(_DWORD *)((char *)&__dst[3] + 11) = *(_DWORD *)(v4 + 59);
  HIBYTE(__dst[3]) = *(unsigned char *)(v4 + 63);
  *((void *)&__dst[5] + 1) = *(void *)(v4 + 88);
  *(_DWORD *)((char *)&__dst[12] + 9) = *(_DWORD *)(v4 + 201);
  HIDWORD(__dst[12]) = *(_DWORD *)(v4 + 204);
  *(_DWORD *)((char *)&__dst[16] + 9) = *(_DWORD *)(v4 + 265);
  HIDWORD(__dst[16]) = *(_DWORD *)(v4 + 268);
  *(_DWORD *)((char *)&__dst[20] + 9) = *(_DWORD *)(v4 + 329);
  HIDWORD(__dst[20]) = *(_DWORD *)(v4 + 332);
  char v184 = *(unsigned char *)(v4 + 353);
  BYTE1(__dst[22]) = v184;
  *(_DWORD *)((char *)&__dst[22] + 2) = *(_DWORD *)(v4 + 354);
  WORD3(__dst[22]) = *(_WORD *)(v4 + 358);
  uint64_t v158 = *(void *)(v4 + 272);
  uint64_t v138 = *(void *)(v4 + 280);
  uint64_t v30 = *(void *)(v4 + 304);
  uint64_t v29 = *(void *)(v4 + 312);
  double v127 = *(double *)(v4 + 344);
  *(double *)__dst = v7;
  *((void *)&__dst[0] + 1) = v6;
  LOBYTE(__dst[1]) = v8;
  *((void *)&__dst[1] + 1) = v9;
  *(void *)&__dst[2] = v10;
  *((void *)&__dst[2] + 1) = v12;
  *(void *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v13;
  char v31 = v14;
  char v151 = v15;
  char v152 = v14;
  BYTE9(__dst[3]) = v14;
  char v32 = v15;
  BYTE10(__dst[3]) = v15;
  *(void *)&__dst[4] = v155;
  BYTE8(__dst[4]) = v17;
  *(_OWORD *)((char *)&__dst[4] + 9) = *(_OWORD *)(v4 + 73);
  *(void *)&__dst[6] = __PAIR64__(v156, v167);
  uint64_t v33 = v19;
  uint64_t v168 = v19;
  *((void *)&__dst[6] + 1) = v19;
  LOBYTE(__dst[7]) = v191;
  BYTE1(__dst[7]) = v190;
  __dst[9] = *(_OWORD *)(v4 + 144);
  *(_OWORD *)((char *)&__dst[7] + 2) = *(_OWORD *)(v4 + 114);
  *(_OWORD *)((char *)&__dst[8] + 2) = *(_OWORD *)(v4 + 130);
  *(void *)&__dst[10] = v22;
  *((void *)&__dst[10] + 1) = v23;
  *(void *)&__dst[11] = v144;
  *((void *)&__dst[11] + 1) = v143;
  *(void *)&__dst[12] = v142;
  BYTE8(__dst[12]) = v24;
  *(void *)&__dst[13] = v157;
  *((void *)&__dst[13] + 1) = v136;
  *(void *)&__dst[14] = v154;
  *((void *)&__dst[14] + 1) = v26;
  unint64_t v34 = v26;
  __dst[15] = v137;
  *(void *)&__dst[16] = v147;
  BYTE8(__dst[16]) = v146;
  *(void *)&__dst[17] = v158;
  *((void *)&__dst[17] + 1) = v138;
  unint64_t v162 = v26;
  unint64_t v166 = *(void *)(v4 + 296);
  *(void *)&__dst[18] = *(void *)(v4 + 288);
  uint64_t rect = *(void *)&__dst[18];
  *((void *)&__dst[18] + 1) = v166;
  *(void *)&__dst[19] = v30;
  *((void *)&__dst[19] + 1) = v29;
  uint64_t v139 = v30;
  *(void *)&__dst[20] = *(void *)(v4 + 320);
  uint64_t v160 = *(void *)&__dst[20];
  BYTE8(__dst[20]) = *(unsigned char *)(v4 + 328);
  char v159 = BYTE8(__dst[20]);
  *(void *)&__dst[21] = *(void *)(v4 + 336);
  uint64_t v161 = *(void *)&__dst[21];
  *((double *)&__dst[21] + 1) = v127;
  LOBYTE(__dst[22]) = *(unsigned char *)(v4 + 352);
  char v164 = __dst[22];
  uint64_t v148 = *(void *)(v4 + 368);
  *((void *)&__dst[22] + 1) = *(void *)(v4 + 360);
  uint64_t v165 = *((void *)&__dst[22] + 1);
  *(void *)&__dst[23] = v148;
  JindoTripleVStack.Implementation.computeMinWidth(of:in:)(0, a1, a2 & 1, a4);
  double v135 = v35;
  *(_DWORD *)((char *)&__dst[1] + 1) = v195[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v195 + 3);
  *(_DWORD *)((char *)&__dst[3] + 11) = v193;
  HIBYTE(__dst[3]) = v194;
  *(_OWORD *)((char *)&__dst[4] + 9) = v192[0];
  *((void *)&__dst[5] + 1) = *(void *)((char *)v192 + 15);
  LOBYTE(__dst[7]) = v130;
  *(double *)__dst = v7;
  *((void *)&__dst[0] + 1) = v6;
  uint64_t v140 = v10;
  LOBYTE(__dst[1]) = v8;
  *((void *)&__dst[1] + 1) = v9;
  *(void *)&__dst[2] = v10;
  *((void *)&__dst[2] + 1) = v12;
  *(void *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v150;
  BYTE9(__dst[3]) = v31;
  BYTE10(__dst[3]) = v32;
  *(void *)&__dst[4] = v155;
  BYTE8(__dst[4]) = v149;
  *(void *)&__dst[6] = __PAIR64__(v156, v167);
  *((void *)&__dst[6] + 1) = v33;
  BYTE1(__dst[7]) = v133;
  *(_OWORD *)((char *)&__dst[7] + 2) = v188;
  *(_OWORD *)((char *)&__dst[8] + 2) = v189[0];
  __dst[9] = *(_OWORD *)((char *)v189 + 14);
  *(void *)&__dst[10] = v153;
  *((void *)&__dst[10] + 1) = v23;
  *(void *)&__dst[11] = v144;
  *((void *)&__dst[11] + 1) = v143;
  *(void *)&__dst[12] = v142;
  BYTE8(__dst[12]) = v145;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v187 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v187[0];
  *(void *)&__dst[13] = v157;
  *((void *)&__dst[13] + 1) = v136;
  *(void *)&__dst[14] = v154;
  *((void *)&__dst[14] + 1) = v34;
  __dst[15] = v137;
  *(void *)&__dst[16] = v147;
  BYTE8(__dst[16]) = v146;
  *(_DWORD *)((char *)&__dst[16] + 9) = v186[0];
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v186 + 3);
  *(void *)&__dst[17] = v158;
  *((void *)&__dst[17] + 1) = v138;
  *(void *)&__dst[18] = rect;
  *((void *)&__dst[18] + 1) = v166;
  *(void *)&__dst[19] = v30;
  *((void *)&__dst[19] + 1) = v29;
  *(void *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v159;
  *(_DWORD *)((char *)&__dst[20] + 9) = v185[0];
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v185 + 3);
  *(void *)&__dst[21] = v161;
  double v36 = v127;
  *((double *)&__dst[21] + 1) = v127;
  LOBYTE(__dst[22]) = v164;
  *(_DWORD *)((char *)&__dst[22] + 2) = v182;
  WORD3(__dst[22]) = v183;
  char v131 = v184;
  BYTE1(__dst[22]) = v184;
  *((void *)&__dst[22] + 1) = v165;
  *(void *)&__dst[23] = v148;
  JindoTripleVStack.Implementation.computeMinWidth(of:in:)(2, a1, v170, a4);
  double v134 = v37;
  *(double *)__dst = v7;
  *((void *)&__dst[0] + 1) = v6;
  LOBYTE(__dst[1]) = v8;
  *(_DWORD *)((char *)&__dst[1] + 1) = v195[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v195 + 3);
  *((void *)&__dst[1] + 1) = v9;
  *(void *)&__dst[2] = v10;
  *((void *)&__dst[2] + 1) = v12;
  *(void *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v150;
  BYTE9(__dst[3]) = v152;
  BYTE10(__dst[3]) = v151;
  *(_DWORD *)((char *)&__dst[3] + 11) = v193;
  HIBYTE(__dst[3]) = v194;
  *(void *)&__dst[4] = v155;
  BYTE8(__dst[4]) = v149;
  *(_OWORD *)((char *)&__dst[4] + 9) = v192[0];
  *((void *)&__dst[5] + 1) = *(void *)((char *)v192 + 15);
  *(void *)&__dst[6] = __PAIR64__(v156, v167);
  *((void *)&__dst[6] + 1) = v168;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v187 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v187[0];
  *(_DWORD *)((char *)&__dst[16] + 9) = v186[0];
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v186 + 3);
  *(_DWORD *)((char *)&__dst[20] + 9) = v185[0];
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v185 + 3);
  char v128 = v191;
  LOBYTE(__dst[7]) = v191;
  BYTE1(__dst[22]) = v131;
  *(_DWORD *)((char *)&__dst[22] + 2) = v182;
  WORD3(__dst[22]) = v183;
  char v126 = v190;
  BYTE1(__dst[7]) = v190;
  *(_OWORD *)((char *)&__dst[7] + 2) = v188;
  *(_OWORD *)((char *)&__dst[8] + 2) = v189[0];
  __dst[9] = *(_OWORD *)((char *)v189 + 14);
  *(void *)&__dst[10] = v153;
  *((void *)&__dst[10] + 1) = v23;
  *(void *)&__dst[11] = v144;
  *((void *)&__dst[11] + 1) = v143;
  *(void *)&__dst[12] = v142;
  BYTE8(__dst[12]) = v145;
  *(void *)&__dst[13] = v157;
  *((void *)&__dst[13] + 1) = v136;
  *(void *)&__dst[14] = v154;
  *((void *)&__dst[14] + 1) = v162;
  __dst[15] = v137;
  *(void *)&__dst[16] = v147;
  BYTE8(__dst[16]) = v146;
  *(void *)&__dst[17] = v158;
  *((void *)&__dst[17] + 1) = v138;
  *(void *)&__dst[18] = rect;
  *((void *)&__dst[18] + 1) = v166;
  *(void *)&__dst[19] = v139;
  *((void *)&__dst[19] + 1) = v29;
  *(void *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v159;
  *(void *)&__dst[21] = v161;
  *((double *)&__dst[21] + 1) = v127;
  LOBYTE(__dst[22]) = v164;
  *((void *)&__dst[22] + 1) = v165;
  *(void *)&__dst[23] = v148;
  JindoTripleVStack.Implementation.spacing(_:axis:)(0, (uint64_t)v177);
  *(_DWORD *)((char *)&__dst[1] + 1) = v195[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v195 + 3);
  *(_DWORD *)((char *)&__dst[3] + 11) = v193;
  HIBYTE(__dst[3]) = v194;
  *((void *)&__dst[5] + 1) = *(void *)((char *)v192 + 15);
  uint64_t v132 = *(void *)&v177[0];
  LOBYTE(__dst[7]) = v128;
  char v129 = BYTE8(v177[0]);
  *(double *)__dst = v7;
  *((void *)&__dst[0] + 1) = v6;
  LOBYTE(__dst[1]) = v8;
  *((void *)&__dst[1] + 1) = v9;
  *(void *)&__dst[2] = v10;
  *((void *)&__dst[2] + 1) = v12;
  *(void *)&__dst[3] = v11;
  BYTE8(__dst[3]) = v150;
  BYTE9(__dst[3]) = v152;
  BYTE10(__dst[3]) = v151;
  *(void *)&__dst[4] = v155;
  BYTE8(__dst[4]) = v149;
  *(_OWORD *)((char *)&__dst[4] + 9) = v192[0];
  *(void *)&__dst[6] = __PAIR64__(v156, v167);
  *((void *)&__dst[6] + 1) = v168;
  BYTE1(__dst[7]) = v126;
  __dst[9] = *(_OWORD *)((char *)v189 + 14);
  *(_OWORD *)((char *)&__dst[8] + 2) = v189[0];
  *(_OWORD *)((char *)&__dst[7] + 2) = v188;
  *(void *)&__dst[10] = v153;
  *((void *)&__dst[10] + 1) = v23;
  *(void *)&__dst[11] = v144;
  *((void *)&__dst[11] + 1) = v143;
  *(void *)&__dst[12] = v142;
  BYTE8(__dst[12]) = v145;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v187 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v187[0];
  *(void *)&__dst[13] = v157;
  *((void *)&__dst[13] + 1) = v136;
  *(void *)&__dst[14] = v154;
  *((void *)&__dst[14] + 1) = v162;
  __dst[15] = v137;
  *(void *)&__dst[16] = v147;
  BYTE8(__dst[16]) = v146;
  *(_DWORD *)((char *)&__dst[16] + 9) = v186[0];
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v186 + 3);
  *(void *)&__dst[17] = v158;
  *((void *)&__dst[17] + 1) = v138;
  *(void *)&__dst[18] = rect;
  *((void *)&__dst[18] + 1) = v166;
  *(void *)&__dst[19] = v139;
  *((void *)&__dst[19] + 1) = v29;
  *(void *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v159;
  *(_DWORD *)((char *)&__dst[20] + 9) = v185[0];
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v185 + 3);
  *(void *)&__dst[21] = v161;
  *((double *)&__dst[21] + 1) = v127;
  LOBYTE(__dst[22]) = v164;
  *(_DWORD *)((char *)&__dst[22] + 2) = v182;
  WORD3(__dst[22]) = v183;
  char v38 = v184;
  BYTE1(__dst[22]) = v184;
  *((void *)&__dst[22] + 1) = v165;
  *(void *)&__dst[23] = v148;
  JindoTripleVStack.Implementation.spacing(_:axis:)(2, (uint64_t)v177);
  *(_DWORD *)((char *)&__dst[16] + 9) = v186[0];
  *(_DWORD *)((char *)&__dst[20] + 9) = v185[0];
  *(_DWORD *)((char *)&__dst[22] + 2) = v182;
  LOBYTE(__dst[1]) = v8;
  *(_DWORD *)((char *)&__dst[1] + 1) = v195[0];
  DWORD1(__dst[1]) = *(_DWORD *)((char *)v195 + 3);
  BYTE8(__dst[3]) = v150;
  BYTE9(__dst[3]) = v152;
  BYTE10(__dst[3]) = v151;
  *(_DWORD *)((char *)&__dst[3] + 11) = v193;
  HIBYTE(__dst[3]) = v194;
  *(void *)&__dst[4] = v155;
  BYTE8(__dst[4]) = v149;
  *((void *)&__dst[5] + 1) = *(void *)((char *)v192 + 15);
  LOBYTE(__dst[7]) = v191;
  BYTE1(__dst[7]) = v190;
  *(void *)&__dst[12] = v142;
  BYTE8(__dst[12]) = v145;
  HIDWORD(__dst[12]) = *(_DWORD *)((char *)v187 + 3);
  *(_DWORD *)((char *)&__dst[12] + 9) = v187[0];
  *(void *)&__dst[13] = v157;
  *(void *)&__dst[16] = v147;
  BYTE8(__dst[16]) = v146;
  HIDWORD(__dst[16]) = *(_DWORD *)((char *)v186 + 3);
  *(void *)&__dst[17] = v158;
  *(void *)&__dst[20] = v160;
  BYTE8(__dst[20]) = v159;
  HIDWORD(__dst[20]) = *(_DWORD *)((char *)v185 + 3);
  *(void *)&__dst[21] = v161;
  *(void *)&__dst[6] = __PAIR64__(v156, v167);
  double v39 = v7;
  *(double *)__dst = v7;
  *((void *)&__dst[0] + 1) = v6;
  *((void *)&__dst[1] + 1) = v9;
  *(void *)&__dst[2] = v140;
  BYTE1(__dst[22]) = v38;
  WORD3(__dst[22]) = v183;
  char v40 = *(char **)&v177[0];
  *((void *)&__dst[22] + 1) = v165;
  *(void *)&__dst[23] = v148;
  unint64_t v41 = BYTE8(v177[0]);
  *((void *)&__dst[2] + 1) = v12;
  *(void *)&__dst[3] = v11;
  *(_OWORD *)((char *)&__dst[4] + 9) = v192[0];
  *((void *)&__dst[6] + 1) = v168;
  __dst[9] = *(_OWORD *)((char *)v189 + 14);
  *(_OWORD *)((char *)&__dst[8] + 2) = v189[0];
  *(_OWORD *)((char *)&__dst[7] + 2) = v188;
  *(void *)&__dst[10] = v153;
  *((void *)&__dst[10] + 1) = v23;
  *(void *)&__dst[11] = v144;
  *((void *)&__dst[11] + 1) = v143;
  *((void *)&__dst[13] + 1) = v136;
  *(void *)&__dst[14] = v154;
  *((void *)&__dst[14] + 1) = v162;
  __dst[15] = v137;
  *((void *)&__dst[17] + 1) = v138;
  *(void *)&__dst[18] = rect;
  *((void *)&__dst[18] + 1) = v166;
  *(void *)&__dst[19] = v139;
  *((void *)&__dst[19] + 1) = v29;
  *((double *)&__dst[21] + 1) = v127;
  LOBYTE(__dst[22]) = v164;
  JindoTripleVStack.Implementation.spacing(_:axis:)(1, (uint64_t)v177);
  uint64_t v42 = *(void *)&v177[0];
  char v43 = BYTE8(v177[0]);
  char v44 = v132;
  *(void *)&__dst[0] = v132;
  BYTE8(__dst[0]) = v129;
  ViewSpacing.distance(to:along:)();
  double v46 = v45;
  *(void *)&__dst[0] = v40;
  BYTE8(__dst[0]) = v41;
  *(void *)&v177[0] = v42;
  BYTE8(v177[0]) = v43;
  ViewSpacing.distance(to:along:)();
  double v48 = v47;
  uint64_t v49 = v162;
  swift_bridgeObjectRelease();
  *(void *)&__dst[0] = v132;
  BYTE8(__dst[0]) = v129;
  unint64_t v50 = (unint64_t)v172;
  *(void *)&v177[0] = v40;
  BYTE8(v177[0]) = v41;
  char v51 = __dst;
  ViewSpacing.distance(to:along:)();
  double v53 = v52;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v46 > v48) {
    double v54 = v46;
  }
  else {
    double v54 = v48;
  }
  double v55 = v54 + v54;
  double v56 = v135;
  if (v135 <= v134) {
    double v56 = v134;
  }
  double v57 = v39 - v55;
  double v58 = a4 - (v56 + v56) - v55;
  if (v57 > v58) {
    double v59 = v57;
  }
  else {
    double v59 = v58;
  }
  if ((v162 & 0x8000000000000000) != 0) {
    goto LABEL_106;
  }
  char v51 = (_OWORD *)v154;
  if (*(void *)(v154 + 16) < v162) {
    goto LABEL_107;
  }
  LOBYTE(v161) = v190;
  LOBYTE(v160) = v191;
  if (v162)
  {
    char v44 = v170;
    LODWORD(__dst[0]) = v167;
    *((void *)&__dst[0] + 1) = v168;
    LOBYTE(__dst[1]) = v191;
    BYTE1(__dst[1]) = v190;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v49 = v162;
    LayoutSubviews.subscript.getter();
    __dst[0] = v177[0];
    LOBYTE(__dst[1]) = v177[1];
    LOBYTE(v172[0]) = 0;
    LayoutSubview.sizeThatFits(_:)();
    double v59 = v60;
    unint64_t v61 = v162 - 1;
    unint64_t v41 = v166;
    if (v162 == 1)
    {
      swift_bridgeObjectRelease();
      unint64_t v50 = v153;
    }
    else
    {
      uint64_t v62 = 0;
      do
      {
        unint64_t v63 = v61;
        LODWORD(__dst[0]) = v167;
        *((void *)&__dst[0] + 1) = v168;
        LOBYTE(__dst[1]) = v160;
        BYTE1(__dst[1]) = v161;
        LayoutSubviews.subscript.getter();
        __dst[0] = v177[0];
        LOBYTE(__dst[1]) = v177[1];
        LOBYTE(v172[0]) = 0;
        LayoutSubview.sizeThatFits(_:)();
        unint64_t v61 = v63;
        if (v59 < v64) {
          double v59 = v64;
        }
        ++v62;
      }
      while (v63 != v62);
      swift_bridgeObjectRelease();
      char v44 = v170;
      unint64_t v50 = v153;
      uint64_t v49 = v162;
      unint64_t v41 = v166;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    double v59 = 0.0;
    char v44 = v170;
    unint64_t v50 = v153;
    unint64_t v41 = v166;
  }
  if (v59 > v57) {
    double v36 = v59;
  }
  else {
    double v36 = v57;
  }
  double v65 = (a4 - v36) * 0.5;
  if (v65 - v46 < 0.0) {
    double v66 = 0.0;
  }
  else {
    double v66 = v65 - v46;
  }
  double v67 = v65 - v48;
  if (v67 < 0.0) {
    double v48 = 0.0;
  }
  else {
    double v48 = v67;
  }
  double v68 = specialized closure #1 in JindoTripleVStack.ProposedMetrics.init(stacks:notchSize:centerWidth:horizontalSizing:fullWidth:leadingCenterSpacing:trailingCenterSpacing:leadingTrailingSpacing:proposal:)(v184, v164, a4, v53, v48, v66);
  v181[0] = v68;
  v181[1] = v69;
  if (a4 < 0.0) {
    double v53 = 0.0;
  }
  else {
    double v53 = a4;
  }
  v181[2] = v36;
  v181[3] = v53;
  v181[4] = v66;
  v181[5] = v48;
  char v40 = (char *)v165;
  if (v23 < 0) {
    goto LABEL_108;
  }
  if (*(void *)(v50 + 16) < (unint64_t)v23) {
    goto LABEL_109;
  }
  double v59 = v69;
  if (v23)
  {
    double v70 = v68;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v165);
    }
    uint64_t v71 = 0;
    do
    {
      unint64_t v72 = *(void *)(v50 + 8 * v71 + 32);
      if ((v72 & 0x8000000000000000) != 0)
      {
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
        goto LABEL_102;
      }
      if (v72 >= *((void *)v40 + 2)) {
        goto LABEL_101;
      }
      ++v71;
      uint64_t v73 = (uint64_t)&v40[256 * v72 + 32];
      *(double *)(v73 + 200) = v70;
      *(unsigned char *)(v73 + 208) = 0;
    }
    while (v23 != v71);
    swift_bridgeObjectRelease();
    *(void *)(v5 + 360) = v40;
  }
  if (*(void *)(v154 + 16) < v49) {
    goto LABEL_110;
  }
  if (!v49) {
    goto LABEL_51;
  }
  if (v49 == 0x8000000000000000) {
    goto LABEL_114;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_115;
  }
  while (1)
  {
    uint64_t v74 = 0;
    do
    {
      unint64_t v75 = *((void *)v51 + v74 + 4);
      if ((v75 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      if (v75 >= *((void *)v40 + 2)) {
        goto LABEL_99;
      }
      ++v74;
      uint64_t v76 = (uint64_t)&v40[256 * v75 + 32];
      *(double *)(v76 + 200) = v36;
      *(unsigned char *)(v76 + 208) = 0;
    }
    while (v49 != v74);
    swift_bridgeObjectRelease();
    *(void *)(v5 + 360) = v40;
LABEL_51:
    char v51 = (_OWORD *)rect;
    if ((v41 & 0x8000000000000000) != 0) {
      goto LABEL_111;
    }
    if (*(void *)(rect + 16) < v41) {
      goto LABEL_112;
    }
    if (v41)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
      }
      uint64_t v77 = 0;
      while (1)
      {
        unint64_t v78 = *(void *)(rect + 8 * v77 + 32);
        if ((v78 & 0x8000000000000000) != 0) {
          break;
        }
        if (v78 >= *((void *)v40 + 2)) {
          goto LABEL_103;
        }
        ++v77;
        uint64_t v79 = (uint64_t)&v40[256 * v78 + 32];
        *(double *)(v79 + 200) = v59;
        *(unsigned char *)(v79 + 208) = 0;
        if (v41 == v77)
        {
          swift_bridgeObjectRelease();
          *(void *)(v5 + 360) = v40;
          goto LABEL_61;
        }
      }
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
      goto LABEL_113;
    }
LABEL_61:
    char v51 = *(_OWORD **)(v50 + 16);
    if ((uint64_t)v51 >= v23) {
      break;
    }
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    char v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
  }
  if ((_OWORD *)v23 != v51)
  {
    if (v23 < (uint64_t)v51)
    {
      swift_bridgeObjectRetain();
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_66;
      }
    }
    else
    {
      __break(1u);
    }
    char v40 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v40);
LABEL_66:
    while (1)
    {
      unint64_t v80 = *(void *)(v50 + 8 * v23 + 32);
      if ((v80 & 0x8000000000000000) != 0) {
        goto LABEL_104;
      }
      if (v80 >= *((void *)v40 + 2)) {
        goto LABEL_105;
      }
      ++v23;
      uint64_t v81 = (uint64_t)&v40[256 * v80 + 32];
      *(double *)(v81 + 200) = v53;
      *(unsigned char *)(v81 + 208) = 0;
      if (v51 == (_OWORD *)v23)
      {
        swift_bridgeObjectRelease();
        *(void *)(v5 + 360) = v40;
        break;
      }
    }
  }
  uint64_t v82 = a1;
  JindoTripleVStack.Implementation.prioritizeAndSizeChildren(in:resetCache:)(a1, v44, 1, a4);
  JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:)(a1, v44, a4);
  if (*(void *)(v5 + 296) <= *(void *)(v5 + 168)) {
    uint64_t v83 = *(void *)(v5 + 168);
  }
  else {
    uint64_t v83 = *(void *)(v5 + 296);
  }
  if (v83 >= 1
    && (specialized JindoTripleVStack.Implementation.resizeChildrenAdjacentToNotch(in:metrics:)((uint64_t)v181) & 1) != 0)
  {
    uint64_t v84 = v83 + 1;
    do
    {
      JindoTripleVStack.Implementation.prioritizeAndSizeChildren(in:resetCache:)(v82, v170, 0, a4);
      double v85 = *(double *)(v5 + 176);
      double v86 = *(double *)(v5 + 184);
      uint64_t v87 = *(void *)(*(void *)(v5 + 160) + 16);
      type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, MEMORY[0x1E4FBBE00]);
      uint64_t v88 = swift_allocObject();
      unint64_t v50 = v88;
      BOOL v89 = v170 != 0;
      *(_OWORD *)(v88 + 16) = xmmword_18834BB80;
      double v90 = *(double *)&a1 - v85 - v86;
      if (v170) {
        double v90 = *(double *)&a1;
      }
      *(void *)(v88 + 32) = v87;
      *(double *)(v88 + 40) = v90;
      *(unsigned char *)(v88 + 48) = v89;
      double v91 = *(double *)(v5 + 304);
      double v48 = *(double *)(v5 + 312);
      uint64_t v92 = *(void *)(*(void *)(v5 + 288) + 16);
      if (v170) {
        double v93 = *(double *)&a1;
      }
      else {
        double v93 = *(double *)&a1 - v91 - v48;
      }
      uint64_t v94 = swift_allocObject();
      *(_OWORD *)(v94 + 16) = xmmword_18834BB80;
      *(void *)(v94 + 32) = v92;
      *(double *)(v94 + 40) = v93;
      *(unsigned char *)(v94 + 48) = v89;
      uint64_t v82 = a1;
      JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(a1, v170, v87, v50, v92, v94, a4, v85, v86, v91, v48);
      swift_setDeallocating();
      swift_deallocClassInstance();
      swift_setDeallocating();
      swift_deallocClassInstance();
      --v84;
    }
    while (v84 >= 2
         && (specialized JindoTripleVStack.Implementation.resizeChildrenAdjacentToNotch(in:metrics:)((uint64_t)v181) & 1) != 0);
  }
  JindoTripleVStack.Implementation.pushBelowNotchIfNeeded(in:metrics:)(v82, v170, (uint64_t)v181, a4);
  outlined init with take of CGRect?(a3, (uint64_t)v179);
  if (v180 == 1) {
    return swift_bridgeObjectRelease();
  }
  CGFloat v95 = v179[0];
  CGFloat v96 = v179[1];
  CGFloat v97 = v179[2];
  CGFloat v98 = v179[3];
  memcpy(__dst, (const void *)v5, 0x178uLL);
  long long v99 = __dst[10];
  unint64_t v100 = *((void *)&__dst[18] + 1);
  uint64_t v101 = *(void *)&__dst[18];
  uint64_t v102 = *(void *)&__dst[14];
  memcpy(v177, (const void *)v5, 0x178uLL);
  if ((*((void *)&__dst[10] + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_118;
  }
  if (*(void *)(*(void *)&__dst[10] + 16) < *((void *)&__dst[10] + 1))
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  unint64_t v171 = *((void *)&__dst[14] + 1);
  swift_bridgeObjectRetain();
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(0.0, v95, v96, v97, v98, v99, v99 + 32, 0, (2 * *((void *)&v99 + 1)) | 1);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  double v48 = *(double *)__dst;
  unint64_t v50 = BYTE10(__dst[3]);
  memcpy(v177, __dst, 0x178uLL);
  if ((v100 & 0x8000000000000000) != 0)
  {
LABEL_119:
    __break(1u);
    goto LABEL_120;
  }
  if (*(void *)(v101 + 16) < v100)
  {
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  uint64_t v165 = *((void *)&__dst[0] + 1);
  unint64_t v100 = (2 * v100) | 1;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  uint64_t v103 = swift_bridgeObjectRetain();
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(1.0, v95, v96, v97, v98, v103, v101 + 32, 0, v100);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  v196.origin.x = v95;
  v196.origin.y = v96;
  v196.size.width = v97;
  v196.size.height = v98;
  double Width = CGRectGetWidth(v196);
  v197.origin.x = v95;
  v197.origin.y = v96;
  v197.size.width = v97;
  v197.size.height = v98;
  double Height = CGRectGetHeight(v197);
  v198.origin.x = v95;
  v198.origin.y = v96;
  v198.size.width = v97;
  v198.size.height = v98;
  double v106 = CGRectGetHeight(v198);
  memcpy(v177, __dst, 0x178uLL);
  if ((v171 & 0x8000000000000000) != 0)
  {
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  if (*(void *)(v102 + 16) < v171)
  {
LABEL_122:
    __break(1u);
    goto LABEL_123;
  }
  unint64_t v100 = (2 * v171) | 1;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  swift_bridgeObjectRetain();
  TextAlignment.value.getter();
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(v107, v95 + Width * 0.5 - v48 * 0.5, v96 + Height * 0.5 - v106 * 0.5, v48, v106, v102, v102 + 32, 0, v100);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  unint64_t v50 = *(void *)&__dst[5];
  int v108 = BYTE8(__dst[5]);
  memcpy(v177, __dst, 0x178uLL);
  unint64_t v109 = *(void *)(v99 + 16);
  if (v109 < *((void *)&v99 + 1))
  {
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  unint64_t v110 = (2 * v109) | 1;
  swift_bridgeObjectRetain();
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  TextAlignment.value.getter();
  specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(v111, v95, v96, v97, v98, v99, v99 + 32, *((uint64_t *)&v99 + 1), v110);
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if (v108) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v102 = *((void *)&__dst[22] + 1);
  unint64_t v100 = (unint64_t)v172;
  LODWORD(v177[0]) = v167;
  *((void *)&v177[0] + 1) = v168;
  LOBYTE(v177[1]) = v160;
  BYTE1(v177[1]) = v161;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  LayoutSubviews.subscript.getter();
  long long v173 = v175;
  char v174 = v176;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v50 & 0x8000000000000000) == 0) {
      goto LABEL_95;
    }
LABEL_125:
    __break(1u);
    goto LABEL_126;
  }
LABEL_124:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v102);
  uint64_t v102 = result;
  if ((v50 & 0x8000000000000000) != 0) {
    goto LABEL_125;
  }
LABEL_95:
  if (v50 >= *(void *)(v102 + 16))
  {
LABEL_126:
    __break(1u);
  }
  else
  {
    LOBYTE(v177[0]) = 0;
    LOBYTE(v172[0]) = 0;
    JindoTripleVStack.Implementation.resize(_:proposal:proxy:)(v102 + (v50 << 8) + 32, *(uint64_t *)&v48, 0, v165, 0, &v173);
    uint64_t result = outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
    *(void *)(v5 + 360) = v102;
    if (v50 < *(void *)(v102 + 16))
    {
      long long v113 = *(_OWORD *)(v102 + (v50 << 8) + 32);
      long long v114 = *(_OWORD *)(v102 + (v50 << 8) + 48);
      long long v115 = *(_OWORD *)(v102 + (v50 << 8) + 80);
      v172[2] = *(_OWORD *)(v102 + (v50 << 8) + 64);
      v172[3] = v115;
      v172[0] = v113;
      v172[1] = v114;
      long long v116 = *(_OWORD *)(v102 + (v50 << 8) + 96);
      long long v117 = *(_OWORD *)(v102 + (v50 << 8) + 112);
      long long v118 = *(_OWORD *)(v102 + (v50 << 8) + 144);
      v172[6] = *(_OWORD *)(v102 + (v50 << 8) + 128);
      v172[7] = v118;
      v172[4] = v116;
      v172[5] = v117;
      long long v119 = *(_OWORD *)(v102 + (v50 << 8) + 160);
      long long v120 = *(_OWORD *)(v102 + (v50 << 8) + 176);
      long long v121 = *(_OWORD *)(v102 + (v50 << 8) + 208);
      v172[10] = *(_OWORD *)(v102 + (v50 << 8) + 192);
      v172[11] = v121;
      v172[8] = v119;
      v172[9] = v120;
      long long v122 = *(_OWORD *)(v102 + (v50 << 8) + 224);
      long long v123 = *(_OWORD *)(v102 + (v50 << 8) + 240);
      long long v124 = *(_OWORD *)(v102 + (v50 << 8) + 256);
      *(_OWORD *)(v100 + 233) = *(_OWORD *)(v102 + (v50 << 8) + 265);
      *(_OWORD *)(v100 + 208) = v123;
      *(_OWORD *)(v100 + 224) = v124;
      *(_OWORD *)(v100 + 192) = v122;
      outlined retain of JindoTripleVStack.Child((uint64_t)v172);
      v199.origin.x = v95;
      v199.origin.y = v96;
      v199.size.width = v97;
      v199.size.height = v98;
      CGRectGetMidX(v199);
      ViewDimensions.width.getter();
      ViewOrigin.x.setter();
      v200.origin.x = v95;
      v200.origin.y = v96;
      v200.size.width = v97;
      v200.size.height = v98;
      CGRectGetMinY(v200);
      ViewOrigin.y.setter();
      LayoutSubviews.subscript.getter();
      swift_retain();
      swift_bridgeObjectRelease();
      LayoutSubview.place(in:layoutDirection:)();
      return swift_release_n();
    }
  }
  __break(1u);
  return result;
}

__n128 JindoTripleVStack.Implementation.resize(_:proposal:proxy:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, long long *a6)
{
  long long v24 = *a6;
  char v9 = *((unsigned char *)a6 + 16);
  EdgeInsets.in(_:)();
  if ((a3 & 1) == 0) {
    EdgeInsets.horizontal.getter();
  }
  if ((a5 & 1) == 0) {
    EdgeInsets.vertical.getter();
  }
  long long v26 = v24;
  LOBYTE(v27) = v9;
  LOBYTE(v32) = a3 & 1;
  LayoutSubview.dimensions(in:)();
  EdgeInsets.horizontal.getter();
  double v11 = v10;
  uint64_t v12 = (void (*)(long long *, void))ViewSize.width.modify();
  *char v13 = v11 + *v13;
  v12(&v26, 0);
  EdgeInsets.vertical.getter();
  double v15 = v14;
  int v16 = (void (*)(long long *, void))ViewSize.height.modify();
  *char v17 = v15 + *v17;
  v16(&v26, 0);
  swift_retain();
  ViewGeometry.init(origin:dimensions:)();
  swift_release();
  long long v18 = v26;
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  __n128 v25 = v29;
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  swift_release();
  *(_OWORD *)(a1 + 136) = v18;
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) = v20;
  __n128 result = v25;
  *(__n128 *)(a1 + 168) = v25;
  *(void *)(a1 + 184) = v21;
  *(void *)(a1 + 192) = v22;
  return result;
}

uint64_t JindoTripleVStack.Implementation.prioritize(resetCache:)(uint64_t result)
{
  uint64_t v2 = *(char **)(v1 + 360);
  unint64_t v3 = *((void *)v2 + 2);
  if (!v3) {
    return result;
  }
  char v4 = result;
  uint64_t v5 = *(char **)(v1 + 368);
  uint64_t v71 = v5;
  swift_bridgeObjectRetain();
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = v64;
    goto LABEL_9;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_99;
  }
  while (1)
  {
    uint64_t v6 = v64;
    unint64_t v7 = 0;
    unint64_t v8 = *((void *)v2 + 2);
    char v9 = v2 + 64;
    do
    {
      if (v7 >= v8)
      {
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        goto LABEL_93;
      }
      ++v7;
      *((void *)v9 - 3) = 0;
      *(v9 - 16) = 1;
      *((void *)v9 - 1) = 0;
      *char v9 = 1;
      v9 += 256;
    }
    while (v3 != v7);
    *(void *)(v64 + 360) = v2;
    unint64_t v3 = *((void *)v2 + 2);
LABEL_9:
    if (v3 <= 0x20)
    {
      unint64_t v10 = *((void *)v5 + 2);
      if (v10 >= 2)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 1;
        while (v24 < v10)
        {
          uint64_t v25 = *(void *)&v5[8 * v24 + 32];
          if (v25 < 0) {
            goto LABEL_94;
          }
          uint64_t v26 = 0;
          uint64_t v27 = v25 << 8;
          unint64_t v62 = v24;
          uint64_t v63 = v23;
          uint64_t v60 = v25 << 8;
          uint64_t v61 = *(void *)&v5[8 * v24 + 32];
          while (1)
          {
            unint64_t v3 = v24 + v26;
            if (v24 + v26 - 1 >= *((void *)v5 + 2))
            {
              __break(1u);
LABEL_78:
              __break(1u);
LABEL_79:
              __break(1u);
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
              goto LABEL_87;
            }
            int64_t v28 = *((void *)v2 + 2);
            if (v25 >= v28) {
              goto LABEL_78;
            }
            unint64_t v29 = *(void *)&v5[8 * v26 + 32 + v23];
            if (v29 >= v28) {
              goto LABEL_79;
            }
            uint64_t v30 = &v2[v27 + 32];
            double v31 = *(double *)&v2[256 * v29 + 32];
            if (v31 >= *(double *)v30)
            {
              if (*(double *)v30 < v31) {
                break;
              }
              uint64_t v65 = v29 << 8;
              if (v30[16])
              {
                ProposedViewSize.init(_:in:by:)();
                uint64_t v32 = *(void *)(v6 + 104);
                char v33 = *(unsigned char *)(v6 + 112);
                char v34 = *(unsigned char *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((void *)&v66 + 1) = v32;
                char v67 = v33;
                char v68 = v34;
                LayoutSubviews.subscript.getter();
                long long v66 = v69;
                char v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                uint64_t v36 = v35;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                }
                uint64_t v27 = v60;
                uint64_t v25 = v61;
                uint64_t v23 = v63;
                uint64_t v6 = v64;
                unint64_t v24 = v62;
                if (v61 >= *((void *)v2 + 2)) {
                  goto LABEL_88;
                }
                double v37 = &v2[v60];
                *((void *)v37 + 5) = v36;
                v37[48] = 0;
                *(void *)(v64 + 360) = v2;
                int64_t v28 = *((void *)v2 + 2);
              }
              if (v25 >= v28) {
                goto LABEL_84;
              }
              if (v2[v27 + 64])
              {
                ProposedViewSize.init(_:in:by:)();
                uint64_t v38 = *(void *)(v6 + 104);
                char v39 = *(unsigned char *)(v6 + 112);
                char v40 = *(unsigned char *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((void *)&v66 + 1) = v38;
                char v67 = v39;
                char v68 = v40;
                LayoutSubviews.subscript.getter();
                long long v66 = v69;
                char v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                uint64_t v42 = v41;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                }
                uint64_t v25 = v61;
                unint64_t v24 = v62;
                uint64_t v23 = v63;
                uint64_t v6 = v64;
                uint64_t v27 = v60;
                if (v61 >= *((void *)v2 + 2)) {
                  goto LABEL_89;
                }
                char v43 = &v2[v60];
                *((void *)v43 + 7) = v42;
                v43[64] = 0;
                *(void *)(v64 + 360) = v2;
              }
              _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
              unint64_t v44 = *((void *)v2 + 2);
              if (v29 >= v44) {
                goto LABEL_85;
              }
              long long v45 = v66;
              uint64_t v46 = v29 << 8;
              if (v2[v65 + 48])
              {
                ProposedViewSize.init(_:in:by:)();
                uint64_t v47 = *(void *)(v6 + 104);
                char v48 = *(unsigned char *)(v6 + 112);
                char v49 = *(unsigned char *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((void *)&v66 + 1) = v47;
                char v67 = v48;
                char v68 = v49;
                LayoutSubviews.subscript.getter();
                long long v66 = v69;
                char v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                uint64_t v51 = v50;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                }
                uint64_t v23 = v63;
                uint64_t v6 = v64;
                uint64_t v25 = v61;
                unint64_t v24 = v62;
                uint64_t v27 = v60;
                uint64_t v46 = v29 << 8;
                if (v29 >= *((void *)v2 + 2)) {
                  goto LABEL_90;
                }
                double v52 = &v2[v65];
                *((void *)v52 + 5) = v51;
                v52[48] = 0;
                *(void *)(v64 + 360) = v2;
                unint64_t v44 = *((void *)v2 + 2);
              }
              if (v29 >= v44) {
                goto LABEL_86;
              }
              if (v2[v46 + 64])
              {
                ProposedViewSize.init(_:in:by:)();
                uint64_t v53 = *(void *)(v6 + 104);
                char v54 = *(unsigned char *)(v6 + 112);
                char v55 = *(unsigned char *)(v6 + 113);
                LODWORD(v66) = *(_DWORD *)(v6 + 96);
                *((void *)&v66 + 1) = v53;
                char v67 = v54;
                char v68 = v55;
                LayoutSubviews.subscript.getter();
                long long v66 = v69;
                char v67 = v70;
                LayoutSubview.lengthThatFits(_:in:)();
                uint64_t v57 = v56;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
                }
                uint64_t v23 = v63;
                uint64_t v6 = v64;
                uint64_t v25 = v61;
                unint64_t v24 = v62;
                uint64_t v27 = v60;
                if (v29 >= *((void *)v2 + 2)) {
                  goto LABEL_91;
                }
                double v58 = &v2[v65];
                *((void *)v58 + 7) = v57;
                v58[64] = 0;
                *(void *)(v64 + 360) = v2;
              }
              _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
              long long v59 = v66;
              long long v66 = v45;
              long long v69 = v59;
              if ((MEMORY[0x18C10DFC0](&v66, &v69) & 1) == 0)
              {
                long long v66 = v45;
                long long v69 = v59;
                if ((MEMORY[0x18C10DFC0](&v69, &v66) & 1) != 0 || v25 >= (uint64_t)v29) {
                  break;
                }
              }
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
            }
            if (v3 >= *((void *)v5 + 2)) {
              goto LABEL_80;
            }
            *(void *)&v5[8 * v26 + 40 + v23] = v29;
            uint64_t v71 = v5;
            --v26;
            if (!(v24 + v26))
            {
              unint64_t v3 = 0;
              goto LABEL_73;
            }
          }
          if (!v26) {
            goto LABEL_31;
          }
          unint64_t v3 = v24 + v26;
LABEL_73:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
          }
          if (v3 >= *((void *)v5 + 2)) {
            goto LABEL_95;
          }
          *(void *)&v5[8 * v3 + 32] = v25;
          uint64_t v71 = v5;
LABEL_31:
          ++v24;
          unint64_t v10 = *((void *)v5 + 2);
          v23 += 8;
          if (v24 == v10) {
            goto LABEL_12;
          }
        }
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
    }
    else
    {
      slowPath #1 (_:) in JindoTripleVStack.Implementation.prioritize(resetCache:)(&v71, v6);
    }
LABEL_12:
    uint64_t v2 = v71;
    unint64_t v3 = *((void *)v71 + 2);
    if (!v3) {
      goto LABEL_96;
    }
    unint64_t v11 = *((void *)v71 + 4);
    if ((v11 & 0x8000000000000000) != 0) {
      goto LABEL_97;
    }
    uint64_t v5 = *(char **)(v6 + 360);
    if (v11 < *((void *)v5 + 2)) {
      break;
    }
LABEL_98:
    __break(1u);
LABEL_99:
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  double v12 = *(double *)&v5[256 * v11 + 32];
  swift_bridgeObjectRetain();
  do
  {
    if ((int64_t)v3 > *((void *)v2 + 2)) {
      goto LABEL_81;
    }
    unint64_t v14 = *(void *)&v2[8 * v3 + 24];
    if ((v14 & 0x8000000000000000) != 0) {
      goto LABEL_82;
    }
    if (v14 >= *((void *)v5 + 2)) {
      goto LABEL_83;
    }
    double v15 = &v5[256 * v14];
    double v17 = *((double *)v15 + 4);
    int v16 = v15 + 32;
    if (v17 == v12) {
      break;
    }
    if (v16[16])
    {
      ProposedViewSize.init(_:in:by:)();
      uint64_t v18 = *(void *)(v6 + 104);
      char v19 = *(unsigned char *)(v6 + 112);
      char v20 = *(unsigned char *)(v6 + 113);
      LODWORD(v66) = *(_DWORD *)(v6 + 96);
      *((void *)&v66 + 1) = v18;
      char v67 = v19;
      char v68 = v20;
      LayoutSubviews.subscript.getter();
      long long v66 = v69;
      char v67 = v70;
      LayoutSubview.lengthThatFits(_:in:)();
      uint64_t v22 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
      }
      uint64_t v6 = v64;
      if (v14 >= *((void *)v5 + 2)) {
        goto LABEL_92;
      }
      char v13 = &v5[256 * v14];
      *((void *)v13 + 5) = v22;
      v13[48] = 0;
      *(void *)(v64 + 360) = v5;
    }
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  __n128 result = swift_bridgeObjectRelease();
  *(void *)(v6 + 368) = v2;
  return result;
}

Swift::Int slowPath #1 (_:) in JindoTripleVStack.Implementation.prioritize(resetCache:)(char **a1, uint64_t a2)
{
  return specialized MutableCollection<>.sort(by:)(a1, a2);
}

uint64_t JindoTripleVStack.Implementation.spacing(_:axis:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 160);
  unint64_t v4 = *(void *)(v2 + 168);
  uint64_t v5 = v3;
  unint64_t v6 = v4;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = *(void *)(v2 + 224);
    }
    else {
      uint64_t v5 = *(void *)(v2 + 288);
    }
    if (a1 == 1) {
      unint64_t v6 = *(void *)(v2 + 232);
    }
    else {
      unint64_t v6 = *(void *)(v2 + 296);
    }
  }
  uint64_t v22 = *(void *)(v2 + 224);
  unint64_t v23 = *(void *)(v2 + 232);
  uint64_t v19 = *(void *)(v2 + 288);
  unint64_t v20 = *(void *)(v2 + 296);
  char v8 = *(unsigned char *)(v2 + 113);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  unint64_t v9 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9 < v6)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (!v6)
  {
    uint64_t result = static Spacing.zero.getter();
    unint64_t v17 = v24;
    uint64_t v18 = a2;
LABEL_38:
    *(void *)uint64_t v18 = v17;
    *(unsigned char *)(v18 + 8) = v8;
    return result;
  }
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v11 = v3;
  unint64_t v12 = v4;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = v19;
    }
    if (a1 == 1) {
      unint64_t v12 = v23;
    }
    else {
      unint64_t v12 = v20;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_41;
  }
  if (*(void *)(v11 + 16) < v12)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v3;
  unint64_t v14 = v4;
  if (a1)
  {
    uint64_t v13 = v22;
    unint64_t v14 = v23;
    if (a1 != 1)
    {
      uint64_t v13 = v19;
      unint64_t v14 = v20;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v14 & 0x8000000000000000) != 0) {
    goto LABEL_43;
  }
  if (*(void *)(v13 + 16) < v14)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  if (v14)
  {
    swift_bridgeObjectRelease();
    if (a1)
    {
      uint64_t v3 = v22;
      unint64_t v4 = v23;
      if (a1 != 1)
      {
        uint64_t v3 = v19;
        unint64_t v4 = v20;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (*(void *)(v3 + 16) >= v4)
      {
        swift_bridgeObjectRelease();
        if (v4)
        {
          uint64_t v15 = 0;
          do
          {
            ++v15;
            AbsoluteEdge.Set.init(_:layoutDirection:)();
            LayoutSubviews.subscript.getter();
            LayoutSubview.spacing.getter();
            Spacing.incorporate(_:of:)();
            swift_bridgeObjectRelease();
          }
          while (v4 != v15);
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v17 = v10;
          uint64_t v18 = a2;
        }
        else
        {
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v18 = a2;
          unint64_t v17 = v10;
        }
        goto LABEL_38;
      }
      goto LABEL_46;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
LABEL_48:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t JindoTripleVStack.Implementation.computeMinWidth(of:in:)(char a1, uint64_t a2, char a3, double a4)
{
  memcpy(__dst, v4, sizeof(__dst));
  memcpy(v22, v4, 0x162uLL);
  long long v32 = *(_OWORD *)&v22[36];
  long long v33 = *(_OWORD *)&v22[38];
  long long v34 = *(_OWORD *)&v22[40];
  long long v35 = *(_OWORD *)&v22[42];
  long long v28 = *(_OWORD *)&v22[28];
  long long v29 = *(_OWORD *)&v22[30];
  long long v30 = *(_OWORD *)&v22[32];
  long long v31 = *(_OWORD *)&v22[34];
  long long v24 = *(_OWORD *)&v22[20];
  long long v25 = *(_OWORD *)&v22[22];
  long long v26 = *(_OWORD *)&v22[24];
  long long v27 = *(_OWORD *)&v22[26];
  if (a1)
  {
    if (a1 == 1)
    {
      long long v36 = v28;
      long long v37 = v29;
      long long v8 = v30;
      long long v9 = v31;
    }
    else
    {
      long long v36 = v32;
      long long v37 = v33;
      long long v8 = v34;
      long long v9 = v35;
    }
  }
  else
  {
    long long v36 = *(_OWORD *)&v22[20];
    long long v37 = *(_OWORD *)&v22[22];
    long long v8 = *(_OWORD *)&v22[24];
    long long v9 = *(_OWORD *)&v22[26];
  }
  long long v38 = v8;
  long long v39 = v9;
  long long v10 = v36;
  uint64_t result = outlined retain of JindoTripleVStack.StackHeader((uint64_t)&v36);
  if ((*((void *)&v10 + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (*(void *)(v10 + 16) < *((void *)&v10 + 1))
  {
LABEL_19:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_allocObject();
  memcpy((void *)(v12 + 16), __dst, 0x178uLL);
  uint64_t v13 = swift_allocObject();
  memcpy((void *)(v13 + 16), __dst, 0x178uLL);
  *(double *)(v13 + 392) = a4;
  *(void *)(v13 + 400) = a2;
  *(unsigned char *)(v13 + 408) = a3 & 1;
  if (*((void *)&v10 + 1))
  {
    *(_OWORD *)&v22[45] = *(_OWORD *)&v22[12];
    __int16 v23 = v22[14];
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_bridgeObjectRetain();
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_retain();
    swift_retain();
    LayoutSubviews.subscript.getter();
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
    LayoutProxy.subscript.getter();
    if (v20 != 1)
    {
      LayoutSubviews.subscript.getter();
      LayoutSubview.sizeThatFits(_:)();
      double v15 = v14;
      uint64_t v16 = *((void *)&v10 + 1) - 1;
      if (*((void *)&v10 + 1) != 1)
      {
        uint64_t v17 = v10 + 40;
        do
        {
          LayoutSubviews.subscript.getter();
          LayoutProxy.subscript.getter();
          LayoutSubviews.subscript.getter();
          LayoutSubview.sizeThatFits(_:)();
          if (v15 < v18) {
            double v15 = v18;
          }
          v17 += 8;
          --v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_bridgeObjectRetain();
    outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
    swift_retain();
    swift_retain();
  }
  swift_release();
  swift_release_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  swift_release();
  return outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
}

uint64_t JindoTripleVStack.Implementation.prioritizeAndSizeChildren(in:resetCache:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  JindoTripleVStack.Implementation.prioritize(resetCache:)(a3);
  double v8 = *(double *)(v4 + 176);
  double v9 = *(double *)(v4 + 184);
  uint64_t v10 = *(void *)(*(void *)(v4 + 160) + 16);
  type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  uint64_t v12 = inited;
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  double v13 = *(double *)&a1 - v8 - v9;
  if (a2) {
    double v13 = *(double *)&a1;
  }
  *(void *)(inited + 32) = v10;
  *(double *)(inited + 40) = v13;
  *(unsigned char *)(inited + 48) = a2 & 1;
  double v14 = *(double *)(v4 + 240);
  double v15 = *(double *)(v4 + 248);
  uint64_t v16 = *(void *)(*(void *)(v4 + 224) + 16);
  uint64_t v17 = swift_initStackObject();
  uint64_t v18 = v17;
  uint64_t v19 = a2 & 1;
  *(_OWORD *)(v17 + 16) = xmmword_18834BB80;
  double v20 = *(double *)&a1 - v14 - v15;
  if (v19) {
    double v20 = *(double *)&a1;
  }
  *(void *)(v17 + 32) = v16;
  *(double *)(v17 + 40) = v20;
  *(unsigned char *)(v17 + 48) = v19;
  double v21 = *(double *)(v4 + 304);
  double v22 = *(double *)(v4 + 312);
  uint64_t v23 = *(void *)(*(void *)(v4 + 288) + 16);
  if (v19) {
    double v24 = *(double *)&a1;
  }
  else {
    double v24 = *(double *)&a1 - v21 - v22;
  }
  uint64_t v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_18834BB80;
  *(void *)(v25 + 32) = v23;
  *(double *)(v25 + 40) = v24;
  *(unsigned char *)(v25 + 48) = v19;
  *(void *)&long long v27 = v10;
  *((double *)&v27 + 1) = v8;
  double v28 = v9;
  uint64_t v29 = v12;
  uint64_t v30 = v16;
  double v31 = v14;
  double v32 = v15;
  uint64_t v33 = v18;
  uint64_t v34 = v23;
  double v35 = v21;
  double v36 = v22;
  uint64_t v37 = v25;
  JindoTripleVStack.Implementation.resize(in:groups:)(a4, a1, v19, &v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:)(uint64_t a1, char a2, double a3)
{
  double v7 = *(double *)(v3 + 176);
  double v8 = *(double *)(v3 + 184);
  uint64_t v9 = *(void *)(*(void *)(v3 + 160) + 16);
  type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  uint64_t v11 = inited;
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  double v12 = *(double *)&a1 - v7 - v8;
  int v13 = a2 & 1;
  if (v13) {
    double v12 = *(double *)&a1;
  }
  *(void *)(inited + 32) = v9;
  *(double *)(inited + 40) = v12;
  *(unsigned char *)(inited + 48) = v13;
  double v14 = *(double *)(v3 + 304);
  double v15 = *(double *)(v3 + 312);
  uint64_t v16 = *(void *)(*(void *)(v3 + 288) + 16);
  if (v13) {
    double v17 = *(double *)&a1;
  }
  else {
    double v17 = *(double *)&a1 - v14 - v15;
  }
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_18834BB80;
  *(void *)(v18 + 32) = v16;
  *(double *)(v18 + 40) = v17;
  *(unsigned char *)(v18 + 48) = v13;
  JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(a1, v13, v9, v11, v16, v18, a3, v7, v8, v14, v15);
  swift_setDeallocating();
  return swift_setDeallocating();
}

uint64_t JindoTripleVStack.Implementation.pushBelowNotchIfNeeded(in:metrics:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  memcpy(__dst, v4, 0x178uLL);
  uint64_t v9 = __dst[20];
  unint64_t v10 = __dst[21];
  double v11 = *(double *)&__dst[22];
  double v12 = *(double *)&__dst[23];
  uint64_t v49 = __dst[28];
  double v13 = *(double *)&__dst[30];
  double v14 = *(double *)&__dst[31];
  uint64_t v15 = __dst[36];
  unint64_t v16 = __dst[37];
  double v17 = *(double *)&__dst[38];
  double v18 = *(double *)&__dst[39];
  memcpy(v53, v4, sizeof(v53));
  uint64_t result = JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(__dst[29], 1, 0);
  if ((v10 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*(void *)(v9 + 16) < v10)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  double v21 = v20;
  double v48 = v13;
  double v22 = *(double *)(a3 + 32);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  uint64_t v23 = specialized Sequence.first(where:)(0, v10, (uint64_t)__dst, 0, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #1 in closure #1 in JindoTripleVStack.Implementation.indexToPushBelowNotch(_:availableWidth:centerHeight:), v22, v21);
  char v25 = v24;
  uint64_t result = outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if ((v16 & 0x8000000000000000) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (*(void *)(v15 + 16) < v16)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  double v26 = *(double *)(a3 + 40);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  uint64_t v27 = specialized Sequence.first(where:)(0, v16, (uint64_t)__dst, 2, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #1 in closure #1 in JindoTripleVStack.Implementation.indexToPushBelowNotch(_:availableWidth:centerHeight:), v26, v21);
  char v29 = v28;
  uint64_t result = outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if ((v25 & 1) == 0 || (v29 & 1) == 0)
  {
    unint64_t v46 = v23;
    uint64_t v30 = *(void *)(v9 + 16);
    type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, MEMORY[0x1E4FBBE00]);
    uint64_t v31 = swift_allocObject();
    int v47 = a2 & 1;
    BOOL v32 = v47 != 0;
    *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
    double v33 = *(double *)&a1 - v11 - v12;
    if (a2) {
      double v33 = *(double *)&a1;
    }
    *(void *)(v31 + 32) = v30;
    *(double *)(v31 + 40) = v33;
    *(unsigned char *)(v31 + 48) = v32;
    uint64_t v50 = v30;
    double v51 = v11;
    uint64_t v52 = v31;
    uint64_t v34 = *(void *)(v15 + 16);
    if (a2) {
      double v35 = *(double *)&a1;
    }
    else {
      double v35 = *(double *)&a1 - v17 - v18;
    }
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_18834BB80;
    *(void *)(v36 + 32) = v34;
    *(double *)(v36 + 40) = v35;
    *(unsigned char *)(v36 + 48) = v32;
    if ((v25 & 1) == 0)
    {
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v46, 0);
      double v38 = v21 + v37;
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v46, 0);
      JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v46, v38 - v39);
    }
    if ((v29 & 1) == 0)
    {
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v27, 2);
      double v41 = v21 + v40;
      memcpy(v53, __dst, sizeof(v53));
      JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v27, 2);
      JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v27, v41 - v42);
    }
    uint64_t v43 = *(void *)(v49 + 16);
    uint64_t v44 = swift_allocObject();
    *(_OWORD *)(v44 + 16) = xmmword_18834BB80;
    double v45 = *(double *)&a1 - v48 - v14;
    if (a2) {
      double v45 = *(double *)&a1;
    }
    *(void *)(v44 + 32) = v43;
    *(double *)(v44 + 40) = v45;
    *(unsigned char *)(v44 + 48) = v47 != 0;
    *(void *)uint64_t v53 = v50;
    *(double *)&v53[8] = v51;
    *(double *)&v53[16] = v12;
    *(void *)&v53[24] = v52;
    *(void *)&v53[32] = v43;
    *(double *)&v53[40] = v48;
    *(double *)&v53[48] = v14;
    *(void *)&v53[56] = v44;
    *(void *)&v53[64] = v34;
    *(double *)&v53[72] = v17;
    *(double *)&v53[80] = v18;
    *(void *)&v53[88] = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    JindoTripleVStack.Implementation.resize(in:groups:)(a4, a1, a2 & 1, v53);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(a1, v47, v50, v52, v34, v36, a4, v51, v12, v17, v18);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t JindoTripleVStack.Implementation.equalizeHeightOfLeadingAndTrailing(in:leading:trailing:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11)
{
  double v12 = v11;
  uint64_t v75 = v11[1];
  uint64_t v76 = *v11;
  char v13 = *((unsigned char *)v11 + 16);
  char v67 = v13;
  uint64_t v73 = v11[4];
  uint64_t v74 = v11[3];
  double v14 = v11 + 33;
  double v71 = *((double *)v11 + 6);
  double v72 = *((double *)v11 + 5);
  char v15 = *((unsigned char *)v11 + 56);
  char v66 = v15;
  char v16 = *((unsigned char *)v11 + 57);
  char v65 = v16;
  char v17 = *((unsigned char *)v11 + 58);
  char v64 = v17;
  uint64_t v68 = v11[8];
  char v18 = *((unsigned char *)v11 + 72);
  char v70 = v18;
  uint64_t v63 = v11[10];
  char v19 = *((unsigned char *)v11 + 88);
  char v77 = v19;
  int v87 = *((_DWORD *)v11 + 24);
  char v20 = *((unsigned char *)v11 + 112);
  char v80 = v20;
  char v21 = *((unsigned char *)v11 + 113);
  char v78 = v21;
  uint64_t v69 = v11[15];
  uint64_t v84 = v11[16];
  uint64_t v85 = v11[13];
  char v22 = *((unsigned char *)v11 + 136);
  uint64_t v88 = v11[18];
  uint64_t v86 = v11[19];
  unint64_t v23 = v11[21];
  uint64_t v24 = v11[22];
  uint64_t v25 = v11[23];
  uint64_t v82 = v11[24];
  uint64_t v83 = v11[20];
  char v26 = *((unsigned char *)v11 + 200);
  uint64_t v27 = v11[27];
  uint64_t v93 = v11[28];
  uint64_t v89 = v11[29];
  uint64_t v90 = v11[26];
  double v28 = *((double *)v11 + 30);
  double v29 = *((double *)v11 + 31);
  char v30 = *((unsigned char *)v11 + 264);
  uint64_t v31 = v12[35];
  uint64_t v32 = v12[38];
  uint64_t v33 = v12[39];
  char v34 = *((unsigned char *)v14 + 64);
  uint64_t v91 = v12[43];
  char v151 = v26;
  char v81 = v26;
  char v150 = v30;
  char v149 = v34;
  char v92 = *((unsigned char *)v14 + 89);
  char v155 = v18;
  char v154 = v19;
  char v153 = v20;
  char v152 = v22;
  char v79 = v22;
  uint64_t v94 = v76;
  *(void *)&long long v95 = v75;
  BYTE8(v95) = v13;
  uint64_t v96 = v74;
  uint64_t v97 = v73;
  double v98 = v72;
  double v99 = v71;
  LOBYTE(v100) = v15;
  BYTE1(v100) = v16;
  BYTE2(v100) = v17;
  uint64_t v101 = v68;
  LOBYTE(v102) = v18;
  *((void *)&v102 + 1) = v63;
  LOBYTE(v103) = v19;
  int v104 = v87;
  uint64_t v105 = v85;
  char v106 = v20;
  char v107 = v21;
  uint64_t v110 = v69;
  uint64_t v111 = v84;
  char v112 = v22;
  uint64_t v114 = v88;
  uint64_t v115 = v86;
  uint64_t v116 = v83;
  unint64_t v117 = v23;
  uint64_t v118 = v24;
  uint64_t v119 = v25;
  uint64_t v120 = v82;
  char v121 = v26;
  uint64_t v123 = v90;
  uint64_t v124 = v27;
  uint64_t v125 = v93;
  uint64_t v126 = v89;
  double v127 = v28;
  double v128 = v29;
  uint64_t v129 = v12[32];
  char v130 = v30;
  uint64_t v132 = v12[34];
  uint64_t v133 = v31;
  unint64_t v35 = v12[37];
  uint64_t v134 = v12[36];
  unint64_t v135 = v35;
  uint64_t v136 = v32;
  uint64_t v137 = v33;
  uint64_t v138 = v12[40];
  char v139 = v34;
  uint64_t v141 = v12[42];
  uint64_t v142 = v91;
  char v143 = *((unsigned char *)v12 + 352);
  char v144 = v92;
  uint64_t v37 = v12[45];
  uint64_t v36 = v12[46];
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v23, 0, 1);
  double v61 = v38;
  *(_DWORD *)((char *)&v100 + 3) = v166;
  HIBYTE(v100) = v167;
  DWORD1(v102) = *(_DWORD *)&v165[3];
  *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v165;
  HIDWORD(v103) = *(_DWORD *)&v164[3];
  *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v164;
  __int16 v109 = v163;
  int v108 = v162;
  *(_DWORD *)&v113[3] = *(_DWORD *)&v161[3];
  *(_DWORD *)long long v113 = *(_DWORD *)v161;
  *(_DWORD *)&v122[3] = *(_DWORD *)&v160[3];
  *(_DWORD *)long long v122 = *(_DWORD *)v160;
  *(_DWORD *)char v131 = *(_DWORD *)v159;
  *(_DWORD *)&v131[3] = *(_DWORD *)&v159[3];
  *(_DWORD *)uint64_t v140 = *(_DWORD *)v158;
  *(_DWORD *)&v140[3] = *(_DWORD *)&v158[3];
  int v145 = v156;
  __int16 v146 = v157;
  uint64_t v94 = v76;
  *(void *)&long long v95 = v75;
  BYTE8(v95) = v67;
  uint64_t v96 = v74;
  uint64_t v97 = v73;
  double v98 = v72;
  double v99 = v71;
  LOBYTE(v100) = v66;
  BYTE1(v100) = v65;
  BYTE2(v100) = v64;
  uint64_t v101 = v68;
  LOBYTE(v102) = v70;
  *((void *)&v102 + 1) = v63;
  LOBYTE(v103) = v77;
  int v104 = v87;
  uint64_t v105 = v85;
  char v106 = v80;
  char v107 = v78;
  uint64_t v110 = v69;
  uint64_t v111 = v84;
  char v112 = v79;
  uint64_t v114 = v88;
  uint64_t v115 = v86;
  uint64_t v116 = v83;
  unint64_t v117 = v23;
  uint64_t v118 = v24;
  uint64_t v119 = v25;
  uint64_t v120 = v82;
  char v121 = v81;
  uint64_t v123 = v90;
  uint64_t v124 = v27;
  uint64_t v125 = v93;
  uint64_t v126 = v89;
  double v127 = v28;
  double v128 = v29;
  char v130 = v30;
  uint64_t v133 = v31;
  unint64_t v135 = v35;
  uint64_t v136 = v32;
  uint64_t v137 = v33;
  char v139 = v34;
  uint64_t v142 = v91;
  char v144 = v92;
  uint64_t v147 = v37;
  uint64_t v148 = v36;
  uint64_t result = JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v35, 2, 1);
  if (v61 != v40)
  {
    *(_DWORD *)((char *)&v95 + 9) = v168[0];
    HIDWORD(v95) = *(_DWORD *)((char *)v168 + 3);
    *(_DWORD *)((char *)&v100 + 3) = v166;
    HIBYTE(v100) = v167;
    *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v165;
    DWORD1(v102) = *(_DWORD *)&v165[3];
    *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v164;
    HIDWORD(v103) = *(_DWORD *)&v164[3];
    __int16 v109 = v163;
    int v108 = v162;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v161[3];
    *(_DWORD *)long long v113 = *(_DWORD *)v161;
    *(_DWORD *)&v122[3] = *(_DWORD *)&v160[3];
    *(_DWORD *)long long v122 = *(_DWORD *)v160;
    *(_DWORD *)char v131 = *(_DWORD *)v159;
    *(_DWORD *)&v131[3] = *(_DWORD *)&v159[3];
    *(_DWORD *)uint64_t v140 = *(_DWORD *)v158;
    *(_DWORD *)&v140[3] = *(_DWORD *)&v158[3];
    int v145 = v156;
    __int16 v146 = v157;
    if (v61 > v40) {
      double v40 = v61;
    }
    double v62 = v40;
    JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v23, 0);
    double v49 = v41;
    LOBYTE(v100) = v66;
    BYTE1(v100) = v65;
    BYTE2(v100) = v64;
    *(_DWORD *)((char *)&v100 + 3) = v166;
    HIBYTE(v100) = v167;
    uint64_t v97 = v73;
    double v98 = v72;
    double v99 = v71;
    uint64_t v101 = v68;
    LOBYTE(v102) = v70;
    *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v165;
    DWORD1(v102) = *(_DWORD *)&v165[3];
    *((void *)&v102 + 1) = v63;
    LOBYTE(v103) = v77;
    *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v164;
    HIDWORD(v103) = *(_DWORD *)&v164[3];
    int v104 = v87;
    uint64_t v105 = v85;
    char v106 = v80;
    char v107 = v78;
    __int16 v109 = v163;
    int v108 = v162;
    uint64_t v110 = v69;
    uint64_t v111 = v84;
    char v112 = v79;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v161[3];
    *(_DWORD *)long long v113 = *(_DWORD *)v161;
    uint64_t v114 = v88;
    uint64_t v115 = v86;
    uint64_t v116 = v83;
    unint64_t v117 = v23;
    uint64_t v118 = v24;
    uint64_t v119 = v25;
    uint64_t v120 = v82;
    char v121 = v81;
    *(_DWORD *)&v122[3] = *(_DWORD *)&v160[3];
    *(_DWORD *)long long v122 = *(_DWORD *)v160;
    uint64_t v123 = v90;
    uint64_t v124 = v27;
    uint64_t v125 = v93;
    uint64_t v126 = v89;
    double v127 = v28;
    double v128 = v29;
    char v130 = v30;
    *(_DWORD *)char v131 = *(_DWORD *)v159;
    *(_DWORD *)&v131[3] = *(_DWORD *)&v159[3];
    uint64_t v133 = v31;
    unint64_t v135 = v35;
    uint64_t v136 = v32;
    uint64_t v137 = v33;
    char v139 = v34;
    *(_DWORD *)uint64_t v140 = *(_DWORD *)v158;
    *(_DWORD *)&v140[3] = *(_DWORD *)&v158[3];
    uint64_t v142 = v91;
    char v144 = v92;
    int v145 = v156;
    __int16 v146 = v157;
    uint64_t v147 = v37;
    uint64_t v148 = v36;
    JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v35, 2);
    double v43 = v42;
    uint64_t v94 = a3;
    *(double *)&long long v95 = a8;
    *((double *)&v95 + 1) = a9;
    uint64_t v96 = a4;
    swift_bridgeObjectRetain();
    JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v23, v62 - v49);
    uint64_t v44 = *(void *)(v93 + 16);
    type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group, MEMORY[0x1E4FBBE00]);
    uint64_t v45 = swift_allocObject();
    uint64_t v46 = v45;
    *(_OWORD *)(v45 + 16) = xmmword_18834BB80;
    double v47 = *(double *)&a1 - v28 - v29;
    if (a2) {
      double v47 = *(double *)&a1;
    }
    *(void *)(v45 + 32) = v44;
    *(double *)(v45 + 40) = v47;
    *(unsigned char *)(v45 + 48) = a2 & 1;
    *(double *)&long long v95 = a10;
    *((double *)&v95 + 1) = a11;
    swift_bridgeObjectRetain();
    JindoTripleVStack.MajorAxisGroup.updateWithSplit(at:before:)(v35, v62 - v43);
    long long v48 = v95;
    uint64_t v94 = a3;
    *(double *)&long long v95 = a8;
    *((double *)&v95 + 1) = a9;
    uint64_t v96 = a4;
    uint64_t v97 = v44;
    double v98 = v28;
    double v99 = v29;
    uint64_t v100 = v46;
    uint64_t v101 = a5;
    long long v102 = v48;
    uint64_t v103 = a6;
    JindoTripleVStack.Implementation.resize(in:groups:)(a7, a1, a2 & 1, &v94);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(unint64_t a1, char a2, char a3)
{
  uint64_t v6 = v3[20];
  uint64_t v7 = v3[28];
  uint64_t v8 = v3[36];
  uint64_t v9 = v6;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v9 = v3[28];
    }
    else {
      uint64_t v9 = v3[36];
    }
  }
  uint64_t v20 = v3[45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = *(void *)(v9 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v10 || !a1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v11 = v6;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v8;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v13 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
    __break(1u);
    goto LABEL_40;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v13 >= *(void *)(v11 + 16))
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v14 = *(void *)(v11 + 8 * v13 + 32);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v14 >= *(void *)(v20 + 16))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  ViewOrigin.y.getter();
  uint64_t result = ViewDimensions.height.getter();
  if (a3)
  {
    uint64_t v15 = v6;
    if (a2)
    {
      if (a2 == 1) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = v8;
      }
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = *(void *)(v15 + 16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v16 > (uint64_t)a1)
    {
      if (a2)
      {
        if (a2 == 1) {
          uint64_t v6 = v7;
        }
        else {
          uint64_t v6 = v8;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRetain();
      if ((a1 & 0x8000000000000000) == 0)
      {
        if (*(void *)(v6 + 16) > a1)
        {
          unint64_t v17 = *(void *)(v6 + 8 * a1 + 32);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v17 & 0x8000000000000000) == 0)
          {
            if (v17 < *(void *)(v20 + 16))
            {
              uint64_t v18 = v20 + 32 + (v17 << 8);
              if (a2)
              {
                if (a2 == 1) {
                  char v19 = (unsigned char *)(v18 + 64);
                }
                else {
                  char v19 = (unsigned char *)(v18 + 80);
                }
              }
              else
              {
                char v19 = (unsigned char *)(v18 + 48);
              }
              if ((*v19 & 1) == 0) {
                return result;
              }
LABEL_48:
              __break(1u);
              return result;
            }
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
LABEL_46:
          __break(1u);
          goto LABEL_47;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
  }
  return result;
}

uint64_t JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(unint64_t a1, char a2)
{
  uint64_t v4 = v2[20];
  uint64_t v5 = v2[28];
  uint64_t v6 = v2[36];
  uint64_t v7 = v4;
  if (a2)
  {
    if (a2 == 1) {
      uint64_t v7 = v2[28];
    }
    else {
      uint64_t v7 = v2[36];
    }
  }
  uint64_t v14 = v2[45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v8 > (uint64_t)a1)
  {
    if (a2)
    {
      if (a2 == 1) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = v6;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if ((a1 & 0x8000000000000000) == 0)
    {
      if (*(void *)(v4 + 16) <= a1)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      unint64_t v10 = *(void *)(v4 + 8 * a1 + 32);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v10 & 0x8000000000000000) != 0)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      if (v10 >= *(void *)(v14 + 16))
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v11 = v14 + (v10 << 8);
      if (a2)
      {
        uint64_t v12 = v11 + 32;
        if (a2 == 1) {
          unint64_t v13 = (unsigned char *)(v12 + 64);
        }
        else {
          unint64_t v13 = (unsigned char *)(v12 + 80);
        }
        if ((*v13 & 1) == 0) {
          return result;
        }
      }
      else if ((*(unsigned char *)(v11 + 80) & 1) == 0)
      {
        return result;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
  return result;
}

void JindoTripleVStack.Implementation.resize(in:groups:)(double a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v5 = v4;
  *(void *)&__dst[0] = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 9, 0, MEMORY[0x1E4FBC860]);
  long long v8 = a4[3];
  __src[2] = a4[2];
  __src[3] = v8;
  long long v9 = a4[5];
  __src[4] = a4[4];
  __src[5] = v9;
  long long v10 = a4[1];
  __src[0] = *a4;
  __src[1] = v10;
  closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(0, (uint64_t)__src, v4, (char *)__dst);
  closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(1, (uint64_t)&__src[2], v4, (char *)__dst);
  closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(2, (uint64_t)&__src[4], v4, (char *)__dst);
  uint64_t v11 = *(char **)&__dst[0];
  v387 = *(char **)&__dst[0];
  uint64_t v12 = *(void *)(v4 + 368);
  uint64_t v322 = v4;
  uint64_t v354 = v12;
  if (!*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    goto LABEL_201;
  }
  v350 = (void *)(v12 + 32);
  v320 = (long long *)(v4 + 114);
  uint64_t v326 = *(void *)(v12 + 16);
  swift_bridgeObjectRetain();
  uint64_t v13 = v326;
  uint64_t v14 = 0;
  while (1)
  {
    if (v14 >= v13) {
      goto LABEL_417;
    }
    uint64_t v323 = v14;
    unint64_t v15 = v350[v14];
    if ((v15 & 0x8000000000000000) != 0)
    {
LABEL_418:
      __break(1u);
LABEL_419:
      __break(1u);
LABEL_420:
      __break(1u);
LABEL_421:
      __break(1u);
LABEL_422:
      __break(1u);
LABEL_423:
      __break(1u);
LABEL_424:
      __break(1u);
LABEL_425:
      __break(1u);
LABEL_426:
      __break(1u);
LABEL_427:
      __break(1u);
LABEL_428:
      __break(1u);
LABEL_429:
      __break(1u);
LABEL_430:
      __break(1u);
LABEL_431:
      __break(1u);
LABEL_432:
      __break(1u);
LABEL_433:
      __break(1u);
      goto LABEL_434;
    }
    uint64_t v16 = *(void *)(v5 + 360);
    unint64_t v17 = *(void *)(v16 + 16);
    if (v15 >= v17) {
      goto LABEL_419;
    }
    uint64_t v18 = v16 + 32;
    uint64_t v19 = v323;
    do
    {
      unint64_t v20 = *(void *)(v354 + 8 * v19 + 32);
      if (v20 >= v17)
      {
LABEL_356:
        __break(1u);
LABEL_357:
        __break(1u);
LABEL_358:
        __break(1u);
LABEL_359:
        __break(1u);
LABEL_360:
        __break(1u);
LABEL_361:
        __break(1u);
LABEL_362:
        __break(1u);
LABEL_363:
        __break(1u);
LABEL_364:
        __break(1u);
LABEL_365:
        __break(1u);
LABEL_366:
        __break(1u);
LABEL_367:
        __break(1u);
LABEL_368:
        __break(1u);
        goto LABEL_369;
      }
      if (*(double *)(v18 + (v20 << 8)) != *(double *)(v16 + 32 + (v15 << 8))) {
        goto LABEL_12;
      }
      uint64_t v21 = v19 + 1;
      if (__OFADD__(v19, 1)) {
        goto LABEL_357;
      }
      ++v19;
    }
    while (v21 != v13);
    uint64_t v19 = v13;
LABEL_12:
    if (v19 < v323) {
      goto LABEL_420;
    }
    if (v13 < v19) {
      goto LABEL_421;
    }
    if (v19 < 0) {
      goto LABEL_422;
    }
    uint64_t v355 = *(void *)(v5 + 360);
    uint64_t v347 = v16 + 32;
    if (!*(void *)(v354 + 16) || v15 != *v350)
    {
      swift_unknownObjectRetain();
      if (v323 == v19) {
        goto LABEL_96;
      }
      swift_unknownObjectRetain();
      uint64_t v40 = v323;
      while (v40 < v19)
      {
        unint64_t v43 = v350[v40];
        if ((v43 & 0x8000000000000000) != 0) {
          goto LABEL_370;
        }
        if (v43 >= *(void *)(v16 + 16)) {
          goto LABEL_371;
        }
        uint64_t v44 = v18 + (v43 << 8);
        unint64_t v45 = *(void *)(v44 + 104);
        char v46 = *(unsigned char *)(v44 + 112);
        unint64_t v47 = *(void *)(v44 + 120);
        char v48 = *(unsigned char *)(v44 + 128);
        if ((*(unsigned char *)(v44 + 96) & 1) == 0)
        {
          if (*(unsigned char *)(v44 + 16)) {
            goto LABEL_445;
          }
          unint64_t v49 = *(void *)(v44 + 88);
          double v50 = *(double *)(v44 + 8);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v49 & 0x8000000000000000) != 0) {
              goto LABEL_390;
            }
          }
          else
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v49 & 0x8000000000000000) != 0) {
              goto LABEL_390;
            }
          }
          if (v49 >= *((void *)v11 + 2)) {
            goto LABEL_391;
          }
          double v51 = &v11[80 * v49];
          double v52 = *((double *)v51 + 8);
          if (!v51[72]) {
            double v52 = v50 + *((double *)v51 + 8);
          }
          *((double *)v51 + 8) = v52;
          v387 = v11;
        }
        if ((v46 & 1) == 0)
        {
          if (v43 >= *(void *)(v355 + 16)) {
            goto LABEL_392;
          }
          if (*(unsigned char *)(v44 + 16)) {
            goto LABEL_446;
          }
          double v53 = *(double *)(v44 + 8);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v45 & 0x8000000000000000) != 0) {
              goto LABEL_393;
            }
          }
          else
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v45 & 0x8000000000000000) != 0) {
              goto LABEL_393;
            }
          }
          if (v45 >= *((void *)v11 + 2)) {
            goto LABEL_395;
          }
          char v54 = &v11[80 * v45];
          double v55 = *((double *)v54 + 8);
          if (!v54[72]) {
            double v55 = v53 + *((double *)v54 + 8);
          }
          *((double *)v54 + 8) = v55;
          v387 = v11;
        }
        uint64_t v16 = v355;
        uint64_t v18 = v347;
        if ((v48 & 1) == 0)
        {
          if (v43 >= *(void *)(v355 + 16)) {
            goto LABEL_394;
          }
          if (*(unsigned char *)(v44 + 16)) {
            goto LABEL_447;
          }
          double v56 = *(double *)(v44 + 8);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v47 & 0x8000000000000000) != 0) {
              goto LABEL_396;
            }
          }
          else
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v47 & 0x8000000000000000) != 0) {
              goto LABEL_396;
            }
          }
          if (v47 >= *((void *)v11 + 2)) {
            goto LABEL_397;
          }
          double v41 = &v11[80 * v47];
          double v42 = *((double *)v41 + 8);
          if (!v41[72]) {
            double v42 = v56 + *((double *)v41 + 8);
          }
          *((double *)v41 + 8) = v42;
          v387 = v11;
        }
        if (v19 == ++v40) {
          goto LABEL_95;
        }
      }
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
LABEL_382:
      __break(1u);
LABEL_383:
      __break(1u);
LABEL_384:
      __break(1u);
LABEL_385:
      __break(1u);
LABEL_386:
      __break(1u);
LABEL_387:
      __break(1u);
LABEL_388:
      __break(1u);
LABEL_389:
      __break(1u);
LABEL_390:
      __break(1u);
LABEL_391:
      __break(1u);
LABEL_392:
      __break(1u);
LABEL_393:
      __break(1u);
LABEL_394:
      __break(1u);
LABEL_395:
      __break(1u);
LABEL_396:
      __break(1u);
LABEL_397:
      __break(1u);
LABEL_398:
      __break(1u);
LABEL_399:
      __break(1u);
LABEL_400:
      __break(1u);
LABEL_401:
      __break(1u);
LABEL_402:
      __break(1u);
LABEL_403:
      __break(1u);
LABEL_404:
      __break(1u);
LABEL_405:
      __break(1u);
LABEL_406:
      __break(1u);
LABEL_407:
      __break(1u);
LABEL_408:
      __break(1u);
LABEL_409:
      __break(1u);
LABEL_410:
      __break(1u);
LABEL_411:
      __break(1u);
LABEL_412:
      __break(1u);
LABEL_413:
      __break(1u);
LABEL_414:
      __break(1u);
LABEL_415:
      __break(1u);
      goto LABEL_416;
    }
    swift_unknownObjectRetain();
    if (v19 != v326)
    {
      swift_unknownObjectRetain_n();
      uint64_t v22 = v326;
      uint64_t v23 = v19;
      do
      {
        if (v23 >= v22) {
          goto LABEL_398;
        }
        unint64_t v24 = *(void *)(v354 + 8 * v23 + 32);
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_399;
        }
        if (v24 >= *(void *)(v16 + 16)) {
          goto LABEL_400;
        }
        uint64_t v25 = v18 + (v24 << 8);
        unint64_t v26 = *(void *)(v25 + 104);
        char v27 = *(unsigned char *)(v25 + 112);
        unint64_t v28 = *(void *)(v25 + 120);
        char v29 = *(unsigned char *)(v25 + 128);
        if ((*(unsigned char *)(v25 + 96) & 1) == 0)
        {
          if (*(unsigned char *)(v25 + 16)) {
            goto LABEL_448;
          }
          unint64_t v30 = *(void *)(v25 + 88);
          double v31 = *(double *)(v25 + 8);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v30 & 0x8000000000000000) != 0) {
              goto LABEL_401;
            }
          }
          else
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v30 & 0x8000000000000000) != 0) {
              goto LABEL_401;
            }
          }
          if (v30 >= *((void *)v11 + 2)) {
            goto LABEL_402;
          }
          uint64_t v32 = &v11[80 * v30];
          double v33 = *((double *)v32 + 8);
          if (!v32[72]) {
            double v33 = *((double *)v32 + 8) - v31;
          }
          *((double *)v32 + 8) = v33;
          v387 = v11;
          uint64_t v22 = v326;
        }
        if ((v27 & 1) == 0)
        {
          if (v24 >= *(void *)(v355 + 16)) {
            goto LABEL_403;
          }
          if (*(unsigned char *)(v25 + 16)) {
            goto LABEL_449;
          }
          double v34 = *(double *)(v25 + 8);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_404;
            }
          }
          else
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v26 & 0x8000000000000000) != 0) {
              goto LABEL_404;
            }
          }
          if (v26 >= *((void *)v11 + 2)) {
            goto LABEL_406;
          }
          unint64_t v35 = &v11[80 * v26];
          double v36 = *((double *)v35 + 8);
          if (!v35[72]) {
            double v36 = *((double *)v35 + 8) - v34;
          }
          *((double *)v35 + 8) = v36;
          v387 = v11;
          uint64_t v22 = v326;
        }
        uint64_t v16 = v355;
        uint64_t v18 = v347;
        if ((v29 & 1) == 0)
        {
          if (v24 >= *(void *)(v355 + 16)) {
            goto LABEL_405;
          }
          if (*(unsigned char *)(v25 + 16)) {
            goto LABEL_450;
          }
          double v37 = *(double *)(v25 + 8);
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v28 & 0x8000000000000000) != 0) {
              goto LABEL_407;
            }
          }
          else
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v28 & 0x8000000000000000) != 0) {
              goto LABEL_407;
            }
          }
          if (v28 >= *((void *)v11 + 2)) {
            goto LABEL_408;
          }
          double v38 = &v11[80 * v28];
          double v39 = *((double *)v38 + 8);
          if (!v38[72]) {
            double v39 = *((double *)v38 + 8) - v37;
          }
          *((double *)v38 + 8) = v39;
          v387 = v11;
          uint64_t v22 = v326;
        }
        ++v23;
      }
      while (v22 != v23);
      swift_unknownObjectRelease();
LABEL_95:
      swift_unknownObjectRelease();
    }
LABEL_96:
    unint64_t v57 = *((void *)v11 + 2);
    if (v57)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        if (v57 < 2) {
          goto LABEL_99;
        }
LABEL_101:
        uint64_t v58 = v57 & 0x7FFFFFFFFFFFFFFELL;
        long long v59 = v11 + 136;
        uint64_t v60 = v57 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          *(v59 - 10) = 0;
          void *v59 = 0;
          v59 += 20;
          v60 -= 2;
        }
        while (v60);
        if (v57 != v58) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
        if (v57 >= 2) {
          goto LABEL_101;
        }
LABEL_99:
        uint64_t v58 = 0;
LABEL_104:
        double v61 = &v11[80 * v58 + 56];
        unint64_t v62 = v57 - v58;
        do
        {
          *(void *)double v61 = 0;
          v61 += 80;
          --v62;
        }
        while (v62);
      }
      v387 = v11;
    }
    uint64_t v5 = v322;
    uint64_t v63 = v323;
    if (v323 != v19) {
      break;
    }
    swift_unknownObjectRelease();
LABEL_196:
    uint64_t v13 = v326;
    if (v326 < v63) {
      goto LABEL_425;
    }
    if (v63 < v323) {
      goto LABEL_426;
    }
    uint64_t v14 = v63;
    if (v63 == v326)
    {
LABEL_201:
      uint64_t v147 = (char *)(v5 + 264);
      uint64_t v334 = v5 + 264;
      uint64_t v336 = *((void *)v11 + 2);
      if (v336)
      {
        v357 = v11;
        double v287 = a1;
        uint64_t v148 = v5;
        unint64_t v149 = 0;
        uint64_t v151 = *(void *)(v148 + 160);
        unint64_t v150 = *(void *)(v148 + 168);
        uint64_t v152 = *(void *)(v148 + 192);
        char v153 = *(unsigned char *)(v148 + 200);
        uint64_t v154 = *(void *)(v148 + 208);
        uint64_t v155 = *(void *)(v148 + 216);
        uint64_t v156 = *(void *)(v148 + 224);
        unint64_t v157 = *(void *)(v148 + 232);
        uint64_t v158 = *(void *)(v148 + 256);
        char v159 = *v147;
        uint64_t v160 = *(void *)(v148 + 272);
        uint64_t v161 = *(void *)(v148 + 280);
        char v162 = *(unsigned char *)(v148 + 16);
        LOBYTE(v381) = *(unsigned char *)(v148 + 88);
        LOBYTE(v362) = *(unsigned char *)(v148 + 112);
        LOBYTE(v360) = *(unsigned char *)(v148 + 136);
        char v163 = *(unsigned char *)(v148 + 56);
        LOBYTE(__src[1]) = v162;
        __int16 v164 = *(_WORD *)(v148 + 57);
        BYTE8(__src[3]) = v163;
        uint64_t v165 = *(void *)(v148 + 64);
        *(_WORD *)((char *)&__src[3] + 9) = v164;
        LOBYTE(v164) = *(unsigned char *)(v148 + 72);
        *(void *)&__src[4] = v165;
        uint64_t v166 = *(void *)(v148 + 80);
        LOBYTE(v366) = v164;
        BYTE8(__src[4]) = v164;
        int v167 = *(_DWORD *)(v148 + 96);
        *(void *)&__src[5] = v166;
        BYTE8(__src[5]) = v381;
        uint64_t v168 = *(void *)(v148 + 104);
        LODWORD(__src[6]) = v167;
        LOBYTE(v167) = *(unsigned char *)(v148 + 113);
        *((void *)&__src[6] + 1) = v168;
        LOBYTE(__src[7]) = v362;
        uint64_t v169 = *(void *)(v148 + 128);
        BYTE1(__src[7]) = v167;
        *(void *)&__src[8] = v169;
        BYTE8(__src[8]) = v360;
        uint64_t v170 = *(void *)(v148 + 288);
        unint64_t v171 = *(void *)(v148 + 296);
        *(void *)&__src[12] = v152;
        uint64_t v172 = *(void *)(v148 + 320);
        BYTE8(__src[12]) = v153;
        char v173 = v147[64];
        *(void *)&__src[16] = v158;
        uint64_t v174 = *(void *)(v148 + 336);
        uint64_t v175 = *(void *)(v148 + 344);
        uint64_t v176 = *(void *)(v148 + 120);
        BYTE8(__src[16]) = v159;
        char v177 = *(unsigned char *)(v148 + 352);
        *(void *)&__src[20] = v172;
        LOBYTE(v172) = v147[89];
        BYTE8(__src[20]) = v173;
        uint64_t v178 = *(void *)(v148 + 360);
        __src[0] = *(_OWORD *)v148;
        *(_OWORD *)((char *)&__src[1] + 8) = *(_OWORD *)(v148 + 24);
        *(_OWORD *)((char *)&__src[2] + 8) = *(_OWORD *)(v148 + 40);
        *((void *)&__src[7] + 1) = v176;
        __src[9] = *(_OWORD *)(v148 + 144);
        uint64_t v351 = v151;
        *(void *)&__src[10] = v151;
        unint64_t v339 = v150;
        *((void *)&__src[10] + 1) = v150;
        __src[11] = *(_OWORD *)(v148 + 176);
        *(void *)&__src[13] = v154;
        *((void *)&__src[13] + 1) = v155;
        uint64_t v344 = v156;
        *(void *)&__src[14] = v156;
        uint64_t v328 = v170;
        unint64_t v331 = v157;
        *((void *)&__src[14] + 1) = v157;
        __src[15] = *(_OWORD *)(v148 + 240);
        *(void *)&__src[17] = v160;
        *((void *)&__src[17] + 1) = v161;
        *(void *)&__src[18] = v170;
        unint64_t v324 = v171;
        *((void *)&__src[18] + 1) = v171;
        __src[19] = *(_OWORD *)(v148 + 304);
        *(void *)&__src[21] = v174;
        LOBYTE(__src[22]) = v177;
        BYTE1(__src[22]) = v172;
        *((void *)&__src[21] + 1) = v175;
        double v179 = 0.0;
        double v180 = 0.0;
        double v181 = 0.0;
        double v182 = 0.0;
        *((void *)&__src[22] + 1) = v178;
        *(void *)&__src[23] = v354;
        while (v149 < *((void *)v357 + 2))
        {
          __int16 v183 = &v357[80 * v149];
          int v184 = v183[32];
          double v185 = v182;
          if (v183[32])
          {
            double v185 = v181;
            if (v184 != 1) {
              double v185 = v180;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v357 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v357);
          }
          if (v149 >= *((void *)v357 + 2)) {
            goto LABEL_410;
          }
          v186 = v357 + 32;
          uint64_t v187 = (uint64_t)&v357[80 * v149 + 32];
          uint64_t v190 = *(void *)(v187 + 8);
          v189 = (double *)(v187 + 8);
          uint64_t v188 = v190;
          v189[8] = v185;
          unint64_t v191 = v339;
          if (v184)
          {
            unint64_t v191 = v331;
            if (v184 != 1) {
              unint64_t v191 = v324;
            }
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v188 == v191)
          {
            if (v184)
            {
              if (v184 == 1)
              {
                double v192 = v181;
                unint64_t v193 = v331;
              }
              else
              {
                double v192 = v180;
                unint64_t v193 = v324;
              }
            }
            else
            {
              double v192 = v182;
              unint64_t v193 = v339;
            }
            memcpy(__dst, __src, 0x178uLL);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            JindoTripleVStack.Implementation.distanceToPrevious(_:stack:)(v193, v184);
            double v195 = v194;
            outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
            if (v179 <= v192 + v195) {
              double v179 = v192 + v195;
            }
          }
          if (v149 >= *((void *)v357 + 2)) {
            goto LABEL_411;
          }
          uint64_t v196 = v351;
          if (v184)
          {
            uint64_t v196 = v344;
            if (v184 != 1) {
              uint64_t v196 = v328;
            }
          }
          double v197 = *v189;
          uint64_t v198 = *(void *)&v186[80 * v149 + 16];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if ((*(void *)&v197 & 0x8000000000000000) != 0) {
            goto LABEL_412;
          }
          unint64_t v199 = *(void *)(v196 + 16);
          if (v199 < *(void *)&v197 || (uint64_t)v199 < v198) {
            goto LABEL_413;
          }
          if (v198 < 0) {
            goto LABEL_414;
          }
          outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
          swift_bridgeObjectRelease();
          double v200 = 0.0;
          if (*(void *)&v197 != v198)
          {
            swift_bridgeObjectRetain();
            while (*(uint64_t *)&v197 < v198)
            {
              unint64_t v201 = *(void *)(v196 + 8 * *(void *)&v197 + 32);
              if ((v201 & 0x8000000000000000) != 0) {
                goto LABEL_354;
              }
              if (v201 >= *(void *)(v178 + 16)) {
                goto LABEL_355;
              }
              uint64_t v202 = v178 + 32 + (v201 << 8);
              if (v184)
              {
                v203 = (unsigned char *)(v202 + 64);
                v204 = (double *)(v202 + 56);
                if (v184 != 1)
                {
                  v204 = (double *)(v202 + 72);
                  v203 = (unsigned char *)(v202 + 80);
                }
                if (*v203) {
                  goto LABEL_444;
                }
              }
              else
              {
                v204 = (double *)(v202 + 40);
                if (*(unsigned char *)(v202 + 48)) {
                  goto LABEL_444;
                }
              }
              ++*(void *)&v197;
              double v205 = v200 + *v204;
              __dst[0] = *(_OWORD *)(v202 + 168);
              __dst[1] = *(_OWORD *)(v202 + 184);
              ViewSize.subscript.getter();
              double v200 = v205 + v206;
              if (v198 == *(void *)&v197)
              {
                swift_bridgeObjectRelease();
                goto LABEL_242;
              }
            }
LABEL_353:
            __break(1u);
LABEL_354:
            __break(1u);
LABEL_355:
            __break(1u);
            goto LABEL_356;
          }
LABEL_242:
          swift_bridgeObjectRelease();
          outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
          if (v149 >= *((void *)v357 + 2)) {
            goto LABEL_415;
          }
          unint64_t v207 = v149 + 1;
          v208 = &v186[80 * v149];
          *((double *)v208 + 8) = v200;
          double v209 = *((double *)v208 + 6);
          if (v208[56]) {
            double v209 = 0.0;
          }
          if (v209 <= v200) {
            double v209 = v200;
          }
          double v210 = v182 + v209;
          double v211 = v181 + v209;
          double v212 = v180 + v209;
          if (v184 == 1) {
            double v212 = v180;
          }
          else {
            double v211 = v181;
          }
          if (v184)
          {
            double v180 = v212;
            double v181 = v211;
          }
          else
          {
            double v182 = v210;
          }
          ++v149;
          if (v207 == v336)
          {
            uint64_t v11 = v357;
            v387 = v357;
            uint64_t v213 = *((void *)v357 + 2);
            if (!v213)
            {
LABEL_306:
              uint64_t v5 = v322;
              a1 = v287;
              goto LABEL_307;
            }
            uint64_t v214 = 0;
            unint64_t v215 = 0;
            uint64_t v216 = *(void *)(v322 + 160);
            uint64_t v217 = *(void *)(v322 + 168);
            uint64_t v302 = *(void *)(v322 + 184);
            uint64_t v303 = *(void *)(v322 + 176);
            uint64_t v301 = *(void *)(v322 + 192);
            char v300 = *(unsigned char *)(v322 + 200);
            uint64_t v352 = *(void *)(v322 + 208);
            uint64_t v349 = *(void *)(v322 + 224);
            uint64_t v298 = *(void *)(v322 + 240);
            uint64_t v299 = *(void *)(v322 + 216);
            uint64_t v297 = *(void *)(v322 + 248);
            uint64_t v296 = *(void *)(v322 + 256);
            char v295 = *(unsigned char *)v334;
            uint64_t v342 = *(void *)(v322 + 232);
            uint64_t v345 = *(void *)(v322 + 272);
            uint64_t v332 = *(void *)(v322 + 296);
            uint64_t v293 = *(void *)(v322 + 304);
            uint64_t v294 = *(void *)(v322 + 280);
            uint64_t v292 = *(void *)(v322 + 312);
            uint64_t v291 = *(void *)(v322 + 320);
            char v290 = *(unsigned char *)(v334 + 64);
            double v218 = 0.0;
            uint64_t v337 = *(void *)(v322 + 336);
            uint64_t v340 = *(void *)(v322 + 288);
            double v219 = 0.0;
            double v220 = 0.0;
            uint64_t v289 = *(void *)(v322 + 344);
            double v306 = v179;
            uint64_t v288 = *((void *)v357 + 2);
            uint64_t v304 = v217;
            uint64_t v305 = v216;
            while (v215 < *((void *)v11 + 2))
            {
              v358 = v11;
              v221 = &v11[v214];
              int v222 = v11[v214 + 32];
              uint64_t v223 = v217;
              if (v222)
              {
                uint64_t v223 = v342;
                if (v222 != 1) {
                  uint64_t v223 = v332;
                }
              }
              uint64_t v224 = *((void *)v221 + 5);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v224 == v223)
              {
                double v307 = v220;
                uint64_t v327 = *(void *)(v322 + 360);
                unint64_t v329 = v215;
                uint64_t v225 = v216;
                uint64_t v226 = v217;
                if (v222)
                {
                  uint64_t v225 = v349;
                  uint64_t v226 = v342;
                  if (v222 != 1)
                  {
                    uint64_t v225 = v340;
                    uint64_t v226 = v332;
                  }
                }
                uint64_t v325 = *(void *)v322;
                char v227 = *(unsigned char *)(v322 + 16);
                uint64_t v228 = *(void *)(v322 + 32);
                uint64_t v319 = *(void *)(v322 + 24);
                uint64_t v321 = *(void *)(v322 + 8);
                uint64_t v229 = *(void *)(v322 + 40);
                uint64_t v230 = *(void *)(v322 + 48);
                char v311 = *(unsigned char *)(v322 + 57);
                char v312 = *(unsigned char *)(v322 + 56);
                char v310 = *(unsigned char *)(v322 + 58);
                char v231 = *(unsigned char *)(v322 + 72);
                uint64_t v308 = *(void *)(v322 + 80);
                uint64_t v309 = *(void *)(v322 + 64);
                char v232 = *(unsigned char *)(v322 + 88);
                int v314 = *(_DWORD *)(v322 + 96);
                uint64_t v313 = *(void *)(v322 + 104);
                char v233 = *(unsigned char *)(v322 + 112);
                uint64_t v234 = *(void *)(v322 + 120);
                uint64_t v315 = *(void *)(v322 + 128);
                char v235 = *(unsigned char *)(v322 + 136);
                uint64_t v236 = *(void *)(v322 + 144);
                uint64_t v237 = *(void *)(v322 + 152);
                char v316 = *(unsigned char *)(v322 + 113);
                char v317 = *(unsigned char *)(v322 + 352);
                char v318 = *(unsigned char *)(v334 + 89);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                LOBYTE(v366) = v232;
                LOBYTE(v381) = v233;
                LOBYTE(v362) = v235;
                unint64_t v238 = v226;
                LOBYTE(__src[1]) = v227;
                BYTE8(__src[3]) = v312;
                BYTE9(__src[3]) = v311;
                BYTE10(__src[3]) = v310;
                *(void *)&__src[4] = v309;
                LOBYTE(__dst[0]) = v231;
                BYTE8(__src[4]) = v231;
                *(void *)&__src[5] = v308;
                BYTE8(__src[5]) = v232;
                LODWORD(__src[6]) = v314;
                *((void *)&__src[6] + 1) = v313;
                LOBYTE(__src[7]) = v233;
                BYTE1(__src[7]) = v316;
                *(void *)&__src[8] = v315;
                BYTE8(__src[8]) = v362;
                BYTE8(__src[16]) = v295;
                BYTE8(__src[20]) = v290;
                LOBYTE(__src[22]) = v317;
                LOBYTE(v360) = v300;
                *(void *)&__src[0] = v325;
                *((void *)&__src[0] + 1) = v321;
                *((void *)&__src[1] + 1) = v319;
                *(void *)&__src[2] = v228;
                *((void *)&__src[2] + 1) = v229;
                *(void *)&__src[3] = v230;
                *((void *)&__src[7] + 1) = v234;
                *(void *)&__src[9] = v236;
                *((void *)&__src[9] + 1) = v237;
                uint64_t v217 = v304;
                uint64_t v216 = v305;
                *(void *)&__src[10] = v305;
                *((void *)&__src[10] + 1) = v304;
                *(void *)&__src[11] = v303;
                *((void *)&__src[11] + 1) = v302;
                *(void *)&__src[12] = v301;
                BYTE8(__src[12]) = v300;
                *(void *)&__src[13] = v352;
                *((void *)&__src[13] + 1) = v299;
                *(void *)&__src[14] = v349;
                *((void *)&__src[14] + 1) = v342;
                *(void *)&__src[15] = v298;
                *((void *)&__src[15] + 1) = v297;
                *(void *)&__src[16] = v296;
                *(void *)&__src[17] = v345;
                *((void *)&__src[17] + 1) = v294;
                *(void *)&__src[18] = v340;
                *((void *)&__src[18] + 1) = v332;
                *(void *)&__src[19] = v293;
                *((void *)&__src[19] + 1) = v292;
                *(void *)&__src[20] = v291;
                *(void *)&__src[21] = v337;
                *((void *)&__src[21] + 1) = v289;
                BYTE1(__src[22]) = v318;
                *((void *)&__src[22] + 1) = v327;
                *(void *)&__src[23] = v354;
                uint64_t v239 = *(void *)(v225 + 16);
                outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                double v240 = 0.0;
                BOOL v241 = v226 < v239;
                unint64_t v215 = v329;
                if (v241)
                {
                  uint64_t v242 = v305;
                  if (v222)
                  {
                    uint64_t v242 = v349;
                    if (v222 != 1) {
                      uint64_t v242 = v340;
                    }
                  }
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if ((v238 & 0x8000000000000000) != 0) {
                    goto LABEL_440;
                  }
                  if (v238 >= *(void *)(v242 + 16)) {
                    goto LABEL_441;
                  }
                  unint64_t v243 = *(void *)(v242 + 8 * v238 + 32);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v243 & 0x8000000000000000) != 0) {
                    goto LABEL_442;
                  }
                  if (v243 >= *(void *)(v327 + 16)) {
                    goto LABEL_443;
                  }
                  uint64_t v244 = v327 + (v243 << 8);
                  if (v222)
                  {
                    uint64_t v245 = v244 + 32;
                    if (v222 == 1)
                    {
                      v246 = (unsigned char *)(v244 + 96);
                      v247 = (double *)(v245 + 56);
                    }
                    else
                    {
                      v246 = (unsigned char *)(v244 + 112);
                      v247 = (double *)(v245 + 72);
                    }
                  }
                  else
                  {
                    v247 = (double *)(v244 + 72);
                    v246 = (unsigned char *)(v244 + 80);
                  }
                  if (*v246) {
                    goto LABEL_451;
                  }
                  double v240 = *v247;
                }
                outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  v358 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v358);
                }
                uint64_t v213 = v288;
                double v220 = v307;
                if (v329 >= *((void *)v358 + 2)) {
                  goto LABEL_433;
                }
                *(double *)&v358[v214 + 104] = v306 - v240;
                unint64_t v249 = *((void *)v358 + 2);
              }
              else
              {
                double v248 = v220;
                if (v222)
                {
                  double v248 = v219;
                  if (v222 != 1) {
                    double v248 = v218;
                  }
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  v358 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v358);
                }
                unint64_t v249 = *((void *)v358 + 2);
                if (v215 >= v249) {
                  goto LABEL_432;
                }
                *(double *)&v358[v214 + 104] = v248;
              }
              if (v215 >= v249) {
                goto LABEL_424;
              }
              ++v215;
              v250 = &v358[v214];
              double v251 = *(double *)&v358[v214 + 80];
              if (v358[v214 + 88]) {
                double v251 = 0.0;
              }
              if (v251 <= *((double *)v250 + 12)) {
                double v251 = *((double *)v250 + 12);
              }
              double v252 = v220 + v251;
              double v253 = v219 + v251;
              double v254 = v218 + v251;
              if (v222 == 1) {
                double v254 = v218;
              }
              else {
                double v253 = v219;
              }
              if (v222)
              {
                double v218 = v254;
                double v219 = v253;
              }
              else
              {
                double v220 = v252;
              }
              v214 += 80;
              uint64_t v11 = v358;
              if (v213 == v215)
              {
                v387 = v358;
                goto LABEL_306;
              }
            }
            goto LABEL_423;
          }
        }
        goto LABEL_409;
      }
LABEL_307:
      long long v255 = *(_OWORD *)(v5 + 48);
      __src[2] = *(_OWORD *)(v5 + 32);
      __src[3] = v255;
      __src[4] = *(_OWORD *)(v5 + 64);
      long long v256 = *(_OWORD *)(v5 + 16);
      __src[0] = *(_OWORD *)v5;
      __src[1] = v256;
      uint64_t v257 = *(void *)(v5 + 80);
      uint64_t v258 = *(unsigned __int8 *)(v5 + 88);
      memcpy((char *)&__src[5] + 9, (const void *)(v5 + 89), 0x10FuLL);
      uint64_t v359 = v257;
      *(void *)&__src[5] = v257;
      BYTE8(__src[5]) = v258;
      long long v346 = *(_OWORD *)(v334 + 96);
      *(_OWORD *)((char *)&__src[22] + 8) = v346;
      JindoTripleVStack.Implementation.placementOrder.getter(__dst);
      uint64_t v259 = *(void *)&__dst[1];
      uint64_t v260 = *((void *)&__dst[1] + 1) >> 1;
      double v261 = 0.0;
      if (*(void *)&__dst[1] == *((void *)&__dst[1] + 1) >> 1)
      {
LABEL_308:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        *(double *)(v322 + 144) = a1;
        *(double *)(v322 + 152) = v261;
        return;
      }
      uint64_t v262 = *((void *)&__dst[0] + 1);
      v263 = (char *)v346;
      uint64_t v353 = *((void *)&__dst[1] + 1) >> 1;
      while (v259 < v260)
      {
        int64_t v264 = *(void *)(v262 + 8 * v259);
        if ((v258 & 1) != 0 || v264 != v359)
        {
          if (v264 < 0) {
            goto LABEL_427;
          }
          if ((unint64_t)v264 >= *((void *)v263 + 2)) {
            goto LABEL_428;
          }
          int64_t v265 = v264 << 8;
          v266 = &v263[256 * v264];
          long long v267 = *(_OWORD *)(v266 + 120);
          long long v268 = *(_OWORD *)(v266 + 136);
          *(_OWORD *)((char *)&__src[1] + 9) = *(_OWORD *)(v266 + 145);
          __src[0] = v267;
          __src[1] = v268;
          v269 = specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)((uint64_t)__src, v322, v264, (uint64_t)&v387);
          uint64_t v270 = *((void *)v269 + 2);
          if (v270)
          {
            double v271 = *((double *)v269 + 4);
            uint64_t v272 = v270 - 1;
            if (v272)
            {
              v273 = (double *)(v269 + 40);
              do
              {
                double v274 = *v273++;
                double v275 = v274;
                if (v271 < v274) {
                  double v271 = v275;
                }
                --v272;
              }
              while (v272);
            }
          }
          else
          {
            double v271 = 0.0;
          }
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v263 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v263);
          }
          if (v264 >= *((void *)v263 + 2)) {
            goto LABEL_429;
          }
          ViewOrigin.subscript.setter();
          *(void *)(v334 + 96) = v263;
          if (v264 >= *((void *)v263 + 2)) {
            goto LABEL_430;
          }
          uint64_t v276 = (uint64_t)&v263[v265 + 32];
          long long v277 = *(_OWORD *)&v263[v265 + 216];
          __dst[0] = *(_OWORD *)&v263[v265 + 200];
          __dst[1] = v277;
          ViewSize.subscript.getter();
          if (v264 >= *((void *)v263 + 2)) {
            goto LABEL_431;
          }
          uint64_t v279 = v258;
          uint64_t v280 = v262;
          double v281 = v271 + v278;
          unint64_t v282 = *(void *)&v263[v265 + 136];
          char v283 = v263[v265 + 144];
          unint64_t v284 = *(void *)&v263[v265 + 152];
          char v285 = *(unsigned char *)(v276 + 128);
          if ((*(unsigned char *)(v276 + 96) & 1) == 0)
          {
            unint64_t v286 = *(void *)(v276 + 88);
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if ((v286 & 0x8000000000000000) != 0) {
                goto LABEL_435;
              }
            }
            else
            {
              uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
              if ((v286 & 0x8000000000000000) != 0) {
                goto LABEL_435;
              }
            }
            if (v286 >= *((void *)v11 + 2)) {
              goto LABEL_436;
            }
            *(double *)&v11[80 * v286 + 104] = v281;
            v387 = v11;
          }
          if ((v283 & 1) == 0)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              if ((v282 & 0x8000000000000000) != 0) {
                goto LABEL_437;
              }
            }
            else
            {
              uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
              if ((v282 & 0x8000000000000000) != 0) {
                goto LABEL_437;
              }
            }
            if (v282 >= *((void *)v11 + 2)) {
              goto LABEL_438;
            }
            *(double *)&v11[80 * v282 + 104] = v281;
            v387 = v11;
          }
          uint64_t v262 = v280;
          if (v285)
          {
            uint64_t v258 = v279;
            uint64_t v260 = v353;
          }
          else
          {
            uint64_t v258 = v279;
            if (swift_isUniquelyReferenced_nonNull_native())
            {
              uint64_t v260 = v353;
              if ((v284 & 0x8000000000000000) != 0) {
                goto LABEL_352;
              }
            }
            else
            {
              uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
              uint64_t v260 = v353;
              if ((v284 & 0x8000000000000000) != 0)
              {
LABEL_352:
                __break(1u);
                goto LABEL_353;
              }
            }
            if (v284 >= *((void *)v11 + 2)) {
              goto LABEL_439;
            }
            *(double *)&v11[80 * v284 + 104] = v281;
            v387 = v11;
          }
          if (v261 <= v281) {
            double v261 = v281;
          }
        }
        if (++v259 == v260) {
          goto LABEL_308;
        }
      }
LABEL_416:
      __break(1u);
LABEL_417:
      __break(1u);
      goto LABEL_418;
    }
  }
  if (v323 < v19)
  {
    swift_unknownObjectRetain();
    uint64_t v64 = v323;
    do
    {
      unint64_t v65 = *(void *)(v354 + 8 * v64 + 32);
      if ((v65 & 0x8000000000000000) != 0) {
        goto LABEL_358;
      }
      if (v65 >= *(void *)(v16 + 16)) {
        goto LABEL_359;
      }
      uint64_t v66 = v18 + (v65 << 8);
      unint64_t v67 = *(void *)(v66 + 104);
      char v68 = *(unsigned char *)(v66 + 112);
      unint64_t v69 = *(void *)(v66 + 120);
      char v70 = *(unsigned char *)(v66 + 128);
      if ((*(unsigned char *)(v66 + 96) & 1) == 0)
      {
        unint64_t v71 = *(void *)(v66 + 88);
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v71 & 0x8000000000000000) != 0) {
            goto LABEL_372;
          }
        }
        else
        {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v71 & 0x8000000000000000) != 0) {
            goto LABEL_372;
          }
        }
        if (v71 >= *((void *)v11 + 2)) {
          goto LABEL_373;
        }
        double v72 = &v11[80 * v71];
        uint64_t v74 = *((void *)v72 + 7);
        uint64_t v73 = v72 + 56;
        uint64_t v75 = v74 + 1;
        if (__OFADD__(v74, 1)) {
          goto LABEL_375;
        }
        *uint64_t v73 = v75;
        v387 = v11;
      }
      if ((v68 & 1) == 0)
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v67 & 0x8000000000000000) != 0) {
            goto LABEL_374;
          }
        }
        else
        {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v67 & 0x8000000000000000) != 0) {
            goto LABEL_374;
          }
        }
        if (v67 >= *((void *)v11 + 2)) {
          goto LABEL_376;
        }
        uint64_t v76 = &v11[80 * v67];
        uint64_t v78 = *((void *)v76 + 7);
        char v77 = v76 + 56;
        uint64_t v79 = v78 + 1;
        if (__OFADD__(v78, 1)) {
          goto LABEL_378;
        }
        *char v77 = v79;
        v387 = v11;
      }
      if ((v70 & 1) == 0)
      {
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v69 & 0x8000000000000000) != 0) {
            goto LABEL_377;
          }
        }
        else
        {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v69 & 0x8000000000000000) != 0) {
            goto LABEL_377;
          }
        }
        if (v69 >= *((void *)v11 + 2)) {
          goto LABEL_379;
        }
        char v80 = &v11[80 * v69];
        uint64_t v82 = *((void *)v80 + 7);
        char v81 = v80 + 56;
        uint64_t v83 = v82 + 1;
        if (__OFADD__(v82, 1)) {
          goto LABEL_380;
        }
        *char v81 = v83;
        v387 = v11;
      }
      ++v64;
    }
    while (v19 != v64);
    swift_unknownObjectRelease();
    long long v84 = *(_OWORD *)(v322 + 32);
    long long v85 = *(_OWORD *)(v322 + 64);
    long long v86 = *(_OWORD *)(v322 + 80);
    long long v384 = *(_OWORD *)(v322 + 48);
    long long v385 = v85;
    long long v386 = v86;
    long long v87 = *(_OWORD *)v322;
    long long v382 = *(_OWORD *)(v322 + 16);
    long long v383 = v84;
    uint64_t v88 = *(void *)(v322 + 96);
    uint64_t v343 = *(void *)(v322 + 104);
    char v341 = *(unsigned char *)(v322 + 112);
    char v89 = *(unsigned char *)(v322 + 113);
    long long v90 = v320[1];
    long long v366 = *v320;
    long long v367 = v90;
    long long v91 = v320[2];
    long long v92 = v320[3];
    long long v93 = v320[5];
    long long v370 = v320[4];
    long long v371 = v93;
    long long v368 = v91;
    long long v369 = v92;
    long long v94 = v320[6];
    long long v95 = v320[7];
    long long v96 = v320[9];
    long long v374 = v320[8];
    long long v375 = v96;
    long long v372 = v94;
    long long v373 = v95;
    long long v97 = v320[10];
    long long v98 = v320[11];
    long long v380 = v320[14];
    long long v381 = v87;
    long long v99 = v320[13];
    long long v378 = v320[12];
    long long v379 = v99;
    char v338 = v89;
    char v335 = v89 & 1;
    uint64_t v348 = v88;
    int v333 = v88;
    uint64_t v100 = v19;
    uint64_t v101 = v323;
    long long v376 = v97;
    long long v377 = v98;
    uint64_t v330 = v19 & 0x7FFFFFFFFFFFFFFFLL;
    while (2)
    {
      if (v100 <= v101) {
        goto LABEL_360;
      }
      if (v19 < v100) {
        goto LABEL_361;
      }
      int64_t v102 = v350[v101];
      if (v102 < 0) {
        goto LABEL_362;
      }
      if ((unint64_t)v102 >= *(void *)(v16 + 16)) {
        goto LABEL_363;
      }
      uint64_t v103 = v16 + (v102 << 8);
      long long v104 = *(_OWORD *)(v103 + 120);
      long long v105 = *(_OWORD *)(v103 + 136);
      *(_OWORD *)((char *)v389 + 9) = *(_OWORD *)(v103 + 145);
      long long v388 = v104;
      v389[0] = v105;
      char v106 = specialized JindoTripleVStack.StackIndexedStorage.compactMap<A>(_:)((uint64_t)&v388, (int64_t *)&v387);
      uint64_t v107 = *((void *)v106 + 2);
      if (v107)
      {
        double v108 = *((double *)v106 + 4);
        uint64_t v109 = v107 - 1;
        if (v107 != 1)
        {
          uint64_t v110 = (double *)(v106 + 40);
          do
          {
            double v111 = *v110++;
            double v112 = v111;
            if (v111 < v108) {
              double v108 = v112;
            }
            --v109;
          }
          while (v109);
        }
      }
      swift_bridgeObjectRelease();
      if (v102 >= *(void *)(v16 + 16)) {
        goto LABEL_364;
      }
      uint64_t v356 = (uint64_t)v11;
      uint64_t v113 = ProposedViewSize.init(_:in:by:)();
      char v115 = v114;
      uint64_t v117 = v116;
      char v119 = v118;
      __src[2] = v383;
      __src[3] = v384;
      __src[4] = v385;
      __src[5] = v386;
      __src[0] = v381;
      __src[1] = v382;
      *(void *)&__src[6] = v348;
      *((void *)&__src[6] + 1) = v343;
      LOBYTE(__src[7]) = v341;
      BYTE1(__src[7]) = v338;
      *(_OWORD *)((char *)&__src[19] + 2) = v378;
      *(_OWORD *)((char *)&__src[20] + 2) = v379;
      *(_OWORD *)((char *)&__src[21] + 2) = v380;
      *(_OWORD *)((char *)&__src[15] + 2) = v374;
      *(_OWORD *)((char *)&__src[16] + 2) = v375;
      *(_OWORD *)((char *)&__src[17] + 2) = v376;
      *(_OWORD *)((char *)&__src[18] + 2) = v377;
      *(_OWORD *)((char *)&__src[11] + 2) = v370;
      *(_OWORD *)((char *)&__src[12] + 2) = v371;
      *(_OWORD *)((char *)&__src[13] + 2) = v372;
      *(_OWORD *)((char *)&__src[14] + 2) = v373;
      *(_OWORD *)((char *)&__src[7] + 2) = v366;
      *(_OWORD *)((char *)&__src[8] + 2) = v367;
      *(_OWORD *)((char *)&__src[9] + 2) = v368;
      *(_OWORD *)((char *)&__src[10] + 2) = v369;
      *((void *)&__src[22] + 1) = v16;
      *(void *)&__src[23] = v354;
      LODWORD(__dst[0]) = v333;
      *((void *)&__dst[0] + 1) = v343;
      LOBYTE(__dst[1]) = v341 & 1;
      BYTE1(__dst[1]) = v335;
      outlined retain of JindoTripleVStack.Implementation((uint64_t)__src);
      LayoutSubviews.subscript.getter();
      long long v360 = v362;
      char v361 = v363;
      uint64_t v120 = (char *)v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v120 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
      }
      if (v102 >= *((void *)v120 + 2)) {
        goto LABEL_365;
      }
      uint64_t v16 = (uint64_t)v120;
      uint64_t v121 = (uint64_t)&v120[256 * v102 + 32];
      LOBYTE(__dst[0]) = v115 & 1;
      JindoTripleVStack.Implementation.resize(_:proposal:proxy:)(v121, v113, v115 & 1, v117, v119 & 1, &v360);
      outlined release of JindoTripleVStack.Implementation((uint64_t)__src);
      if (v102 >= *((void *)v120 + 2)) {
        goto LABEL_366;
      }
      long long v122 = *(_OWORD *)&v120[256 * v102 + 216];
      __dst[0] = *(_OWORD *)&v120[256 * v102 + 200];
      __dst[1] = v122;
      ViewSize.subscript.getter();
      if ((*(void *)&v123 & 0xFFFFFFFFFFFFFLL) != 0) {
        double v124 = 0.0;
      }
      else {
        double v124 = v123;
      }
      if ((~*(void *)&v123 & 0x7FF0000000000000) != 0) {
        double v125 = v123;
      }
      else {
        double v125 = v124;
      }
      if (v102 >= *((void *)v120 + 2)) {
        goto LABEL_367;
      }
      unint64_t v126 = *(void *)&v120[256 * v102 + 136];
      char v127 = v120[256 * v102 + 144];
      unint64_t v128 = *(void *)&v120[256 * v102 + 152];
      char v129 = *(unsigned char *)(v121 + 128);
      if (*(unsigned char *)(v121 + 96))
      {
        uint64_t v11 = (char *)v356;
        if (*(unsigned char *)(v121 + 112)) {
          goto LABEL_163;
        }
LABEL_172:
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v126 & 0x8000000000000000) != 0) {
            goto LABEL_383;
          }
        }
        else
        {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
          if ((v126 & 0x8000000000000000) != 0) {
            goto LABEL_383;
          }
        }
        if (v126 >= *((void *)v11 + 2)) {
          goto LABEL_385;
        }
        uint64_t v137 = &v11[80 * v126];
        uint64_t v139 = *((void *)v137 + 7);
        double v140 = *((double *)v137 + 8);
        uint64_t v138 = v137 + 56;
        if (!v138[16]) {
          double v140 = v140 - v125;
        }
        *((double *)v138 + 1) = v140;
        BOOL v135 = __OFSUB__(v139, 1);
        uint64_t v141 = v139 - 1;
        if (v135) {
          goto LABEL_387;
        }
        *(void *)uint64_t v138 = v141;
        v387 = v11;
        if ((v129 & 1) == 0) {
          goto LABEL_179;
        }
      }
      else
      {
        unint64_t v130 = *(void *)(v121 + 88);
        uint64_t v11 = (char *)v356;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          if ((v130 & 0x8000000000000000) != 0) {
            goto LABEL_381;
          }
        }
        else
        {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v356);
          if ((v130 & 0x8000000000000000) != 0) {
            goto LABEL_381;
          }
        }
        if (v130 >= *((void *)v11 + 2)) {
          goto LABEL_382;
        }
        char v131 = &v11[80 * v130];
        uint64_t v133 = *((void *)v131 + 7);
        double v134 = *((double *)v131 + 8);
        uint64_t v132 = v131 + 56;
        if (!v132[16]) {
          double v134 = v134 - v125;
        }
        *((double *)v132 + 1) = v134;
        BOOL v135 = __OFSUB__(v133, 1);
        uint64_t v136 = v133 - 1;
        if (v135) {
          goto LABEL_384;
        }
        *(void *)uint64_t v132 = v136;
        v387 = v11;
        if ((v127 & 1) == 0) {
          goto LABEL_172;
        }
LABEL_163:
        if ((v129 & 1) == 0)
        {
LABEL_179:
          if (swift_isUniquelyReferenced_nonNull_native())
          {
            if ((v128 & 0x8000000000000000) != 0) {
              goto LABEL_386;
            }
          }
          else
          {
            uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v11);
            if ((v128 & 0x8000000000000000) != 0) {
              goto LABEL_386;
            }
          }
          if (v128 >= *((void *)v11 + 2)) {
            goto LABEL_388;
          }
          uint64_t v142 = &v11[80 * v128];
          uint64_t v144 = *((void *)v142 + 7);
          double v145 = *((double *)v142 + 8);
          char v143 = v142 + 56;
          if (!v143[16]) {
            double v145 = v145 - v125;
          }
          *((double *)v143 + 1) = v145;
          BOOL v135 = __OFSUB__(v144, 1);
          uint64_t v146 = v144 - 1;
          if (v135) {
            goto LABEL_389;
          }
          *(void *)char v143 = v146;
          v387 = v11;
        }
      }
      ++v101;
      uint64_t v63 = v330;
      if (v101 == v330)
      {
        swift_unknownObjectRelease();
        uint64_t v5 = v322;
        *(void *)(v322 + 360) = v16;
        goto LABEL_196;
      }
      uint64_t v19 = v100 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v100 = v330;
      if (v101 >= v19) {
        goto LABEL_368;
      }
      continue;
    }
  }
LABEL_434:
  __break(1u);
LABEL_435:
  __break(1u);
LABEL_436:
  __break(1u);
LABEL_437:
  __break(1u);
LABEL_438:
  __break(1u);
LABEL_439:
  __break(1u);
LABEL_440:
  __break(1u);
LABEL_441:
  __break(1u);
LABEL_442:
  __break(1u);
LABEL_443:
  __break(1u);
LABEL_444:
  __break(1u);
LABEL_445:
  __break(1u);
LABEL_446:
  __break(1u);
LABEL_447:
  __break(1u);
LABEL_448:
  __break(1u);
LABEL_449:
  __break(1u);
LABEL_450:
  __break(1u);
LABEL_451:
  __break(1u);
}

uint64_t JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(uint64_t result, char a2)
{
  unint64_t v3 = v2[29];
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v4 = v2[28];
  if (*(void *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v3)
  {
    unint64_t v5 = result;
    if (a2)
    {
      if (a2 != 1) {
        uint64_t v4 = v2[36];
      }
    }
    else
    {
      uint64_t v4 = v2[20];
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if ((v5 & 0x8000000000000000) == 0)
    {
      if (*(void *)(v4 + 16) > v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        LayoutSubviews.subscript.getter();
        LayoutSubview.spacing.getter();
        LayoutSubviews.subscript.getter();
        LayoutSubview.spacing.getter();
        ViewSpacing.distance(to:along:)();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in closure #1 in JindoTripleVStack.Implementation.indexToPushBelowNotch(_:availableWidth:centerHeight:)(unint64_t *a1, void *a2, char a3, double a4, double a5)
{
  unint64_t v9 = *a1;
  memcpy(__dst, a2, 0x162uLL);
  long long v32 = *(_OWORD *)&__dst[36];
  long long v33 = *(_OWORD *)&__dst[38];
  long long v34 = *(_OWORD *)&__dst[40];
  long long v35 = *(_OWORD *)&__dst[42];
  long long v28 = *(_OWORD *)&__dst[28];
  long long v29 = *(_OWORD *)&__dst[30];
  long long v30 = *(_OWORD *)&__dst[32];
  long long v31 = *(_OWORD *)&__dst[34];
  *(_OWORD *)&__dst[45] = *(_OWORD *)&__dst[20];
  *(_OWORD *)&__dst[47] = *(_OWORD *)&__dst[22];
  *(_OWORD *)&__dst[49] = *(_OWORD *)&__dst[24];
  *(_OWORD *)&__dst[51] = *(_OWORD *)&__dst[26];
  if (a3)
  {
    if (a3 == 1)
    {
      long long v36 = v28;
      long long v37 = v29;
      long long v10 = v30;
      long long v11 = v31;
    }
    else
    {
      long long v36 = v32;
      long long v37 = v33;
      long long v10 = v34;
      long long v11 = v35;
    }
  }
  else
  {
    long long v36 = *(_OWORD *)&__dst[20];
    long long v37 = *(_OWORD *)&__dst[22];
    long long v10 = *(_OWORD *)&__dst[24];
    long long v11 = *(_OWORD *)&__dst[26];
  }
  long long v38 = v10;
  long long v39 = v11;
  uint64_t v12 = v36;
  uint64_t result = outlined retain of JindoTripleVStack.StackHeader((uint64_t)&v36);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v9 >= *(void *)(v12 + 16))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v14 = *(void *)(v12 + 8 * v9 + 32);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v15 = a2[45];
  if (v14 >= *(void *)(v15 + 16))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  uint64_t v16 = v15 + (v14 << 8);
  uint64_t v17 = *(void *)(v16 + 192);
  *(void *)uint64_t v23 = *(void *)(v16 + 184);
  *(void *)&v23[8] = v17;
  long long v18 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)&v23[16] = *(_OWORD *)(v16 + 200);
  *(_OWORD *)&v23[32] = v18;
  ViewDimensions.width.getter();
  if (v19 <= a4) {
    return 0;
  }
  *(_DWORD *)&v23[12] = HIDWORD(__dst[13]);
  *(_WORD *)&v23[16] = __dst[14];
  LayoutSubviews.subscript.getter();
  type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
  *(void *)uint64_t v23 = v25;
  *(_DWORD *)&v23[8] = v26;
  lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
  LayoutProxy.subscript.getter();
  if (v24 != 1) {
    return 0;
  }
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v9, a3, 1);
  double v21 = v20;
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v9, a3);
  return v21 < v22 + a5;
}

uint64_t closure #2 in closure #1 in JindoTripleVStack.Implementation.indexToResizeInNotch(_:availableWidth:centerHeight:)(unint64_t *a1, void *a2, char a3, double a4, double a5)
{
  unint64_t v9 = *a1;
  memcpy(__dst, a2, 0x162uLL);
  long long v32 = *(_OWORD *)&__dst[36];
  long long v33 = *(_OWORD *)&__dst[38];
  long long v34 = *(_OWORD *)&__dst[40];
  long long v35 = *(_OWORD *)&__dst[42];
  long long v28 = *(_OWORD *)&__dst[28];
  long long v29 = *(_OWORD *)&__dst[30];
  long long v30 = *(_OWORD *)&__dst[32];
  long long v31 = *(_OWORD *)&__dst[34];
  *(_OWORD *)&__dst[45] = *(_OWORD *)&__dst[20];
  *(_OWORD *)&__dst[47] = *(_OWORD *)&__dst[22];
  *(_OWORD *)&__dst[49] = *(_OWORD *)&__dst[24];
  *(_OWORD *)&__dst[51] = *(_OWORD *)&__dst[26];
  if (a3)
  {
    if (a3 == 1)
    {
      long long v36 = v28;
      long long v37 = v29;
      long long v10 = v30;
      long long v11 = v31;
    }
    else
    {
      long long v36 = v32;
      long long v37 = v33;
      long long v10 = v34;
      long long v11 = v35;
    }
  }
  else
  {
    long long v36 = *(_OWORD *)&__dst[20];
    long long v37 = *(_OWORD *)&__dst[22];
    long long v10 = *(_OWORD *)&__dst[24];
    long long v11 = *(_OWORD *)&__dst[26];
  }
  long long v38 = v10;
  long long v39 = v11;
  uint64_t v12 = v36;
  uint64_t result = outlined retain of JindoTripleVStack.StackHeader((uint64_t)&v36);
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v9 >= *(void *)(v12 + 16))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v14 = *(void *)(v12 + 8 * v9 + 32);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v14 & 0x8000000000000000) != 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v15 = a2[45];
  if (v14 >= *(void *)(v15 + 16))
  {
LABEL_18:
    __break(1u);
    return result;
  }
  uint64_t v16 = v15 + (v14 << 8);
  uint64_t v17 = *(void *)(v16 + 192);
  *(void *)uint64_t v23 = *(void *)(v16 + 184);
  *(void *)&v23[8] = v17;
  long long v18 = *(_OWORD *)(v16 + 216);
  *(_OWORD *)&v23[16] = *(_OWORD *)(v16 + 200);
  *(_OWORD *)&v23[32] = v18;
  ViewDimensions.width.getter();
  if (v19 <= a4) {
    return 0;
  }
  if (*(unsigned char *)(v16 + 241)) {
    return 0;
  }
  *(_DWORD *)&v23[12] = HIDWORD(__dst[13]);
  *(_WORD *)&v23[16] = __dst[14];
  LayoutSubviews.subscript.getter();
  type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
  *(void *)uint64_t v23 = v25;
  *(_DWORD *)&v23[8] = v26;
  lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
  LayoutProxy.subscript.getter();
  if (v24 == 1) {
    return 0;
  }
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(v9, a3, 1);
  double v21 = v20;
  memcpy(v23, a2, sizeof(v23));
  JindoTripleVStack.Implementation.distanceToCenterBottom(from:stack:)(v9, a3);
  return v21 < v22 + a5;
}

void JindoTripleVStack.Implementation.placementOrder.getter(_OWORD *a1@<X8>)
{
  unint64_t v2 = v1[21];
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = v1[20];
  if (*(void *)(v4 + 16) < v2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v5 = v1[29];
  if ((v5 & 0x8000000000000000) != 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v6 = v1[28];
  if (*(void *)(v6 + 16) < v5)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = v1[36];
  unint64_t v8 = v1[37];
  *(void *)&long long v15 = v1[20];
  unint64_t v9 = (2 * v5) | 1;
  *(void *)&long long v16 = 0;
  swift_bridgeObjectRetain();
  long long v10 = (void *)swift_bridgeObjectRetain();
  specialized ArraySlice.append<A>(contentsOf:)(v10, v6 + 32, 0, v9);
  swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) != 0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (*(void *)(v7 + 16) < v8)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  long long v11 = (void *)swift_bridgeObjectRetain();
  specialized ArraySlice.append<A>(contentsOf:)(v11, v7 + 32, 0, (2 * v8) | 1);
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void *)(v4 + 16);
  if (v12 >= v2)
  {
    unint64_t v13 = (2 * v12) | 1;
    unint64_t v14 = (void *)swift_bridgeObjectRetain();
    specialized ArraySlice.append<A>(contentsOf:)(v14, v4 + 32, v2, v13);
    swift_bridgeObjectRelease();
    *((void *)&v15 + 1) = v4 + 32;
    *a1 = v15;
    *((void *)&v16 + 1) = (2 * v2) | 1;
    a1[1] = v16;
    return;
  }
LABEL_15:
  __break(1u);
}

uint64_t closure #7 in JindoTripleVStack.Implementation.resize(in:groups:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v6 = *((unsigned char *)a2 + 8);
  double v7 = 0.0;
  if (v6) {
    goto LABEL_12;
  }
  if ((a4 & 0x8000000000000000) != 0) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(a3 + 360);
  if (*(void *)(v8 + 16) <= a4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v9 = v8 + (a4 << 8);
  if (!(_BYTE)result)
  {
    unint64_t v12 = (double *)(v9 + 72);
    if ((*(unsigned char *)(v9 + 80) & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  uint64_t v10 = v9 + 32;
  long long v11 = (unsigned char *)(v10 + 64);
  unint64_t v12 = (double *)(v10 + 56);
  unint64_t v13 = (unsigned char *)(v10 + 80);
  unint64_t v14 = (double *)(v10 + 72);
  if (result == 1)
  {
    long long v15 = v11;
  }
  else
  {
    unint64_t v12 = v14;
    long long v15 = v13;
  }
  if (*v15)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
LABEL_9:
  unint64_t v16 = *a2;
  if (*a2 < 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v16 < *(void *)(*(void *)a5 + 16))
  {
    double v7 = *v12 + *(double *)(*(void *)a5 + 80 * v16 + 104);
LABEL_12:
    *(double *)a6 = v7;
    *(unsigned char *)(a6 + 8) = v6;
    return result;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t closure #1 in JindoTripleVStack.Implementation.prepareChildren(with:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v6 = a1;
  uint64_t result = (uint64_t)JindoTripleVStack.MajorAxisGroup.allGroups.getter(*(double *)(a2 + 8), *(double *)(a2 + 16), a1, *(void *)(a2 + 24), a3, a4);
  uint64_t v35 = *(void *)(result + 16);
  if (v35)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v33 = result;
    uint64_t v34 = result + 32;
    while (v8 < *(void *)(result + 16))
    {
      uint64_t v10 = v34 + 24 * v8;
      if ((*(void *)v10 & 0x8000000000000000) != 0) {
        goto LABEL_51;
      }
      unint64_t v36 = v8;
      double v11 = *(double *)(v10 + 8);
      char v37 = *(unsigned char *)(v10 + 16);
      uint64_t v38 = *(void *)v10;
      if (*(void *)v10)
      {
        uint64_t v12 = *(void *)v10;
        unint64_t v13 = v9;
        while (1)
        {
          long long v15 = (uint64_t *)(a3 + 160);
          if (v6)
          {
            long long v15 = (uint64_t *)(a3 + 224);
            if (v6 != 1) {
              long long v15 = (uint64_t *)(a3 + 288);
            }
          }
          uint64_t v16 = *v15;
          swift_bridgeObjectRetain();
          uint64_t result = swift_bridgeObjectRetain();
          if (v9 < 0) {
            break;
          }
          if (v13 >= *(void *)(v16 + 16)) {
            goto LABEL_47;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v13 + 32);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v18 = *(void *)(*(void *)a4 + 16);
          uint64_t v19 = *(void *)(a3 + 360);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a3 + 360) = v19;
          if (result)
          {
            if ((v17 & 0x8000000000000000) != 0) {
              goto LABEL_49;
            }
          }
          else
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v19);
            uint64_t v19 = result;
            if ((v17 & 0x8000000000000000) != 0) {
              goto LABEL_49;
            }
          }
          if (v17 >= *(void *)(v19 + 16)) {
            goto LABEL_48;
          }
          if (v6)
          {
            if (v6 == 1)
            {
              *(void *)(v19 + (v17 << 8) + 136) = v18;
              unint64_t v14 = (unsigned char *)(v19 + (v17 << 8) + 144);
            }
            else
            {
              *(void *)(v19 + (v17 << 8) + 152) = v18;
              unint64_t v14 = (unsigned char *)(v19 + (v17 << 8) + 160);
            }
          }
          else
          {
            *(void *)(v19 + (v17 << 8) + 120) = v18;
            unint64_t v14 = (unsigned char *)(v19 + (v17 << 8) + 128);
          }
          unsigned char *v14 = 0;
          *(void *)(a3 + 360) = v19;
          ++v13;
          if (!--v12) {
            goto LABEL_23;
          }
        }
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        break;
      }
LABEL_23:
      uint64_t v20 = v9 + v38;
      if (__OFADD__(v9, v38)) {
        goto LABEL_52;
      }
      if (v20 < v9) {
        goto LABEL_53;
      }
      double v21 = v11;
      if ((v37 & 1) == 0)
      {
        double v22 = (uint64_t *)(a3 + 208);
        if (v6)
        {
          double v22 = (uint64_t *)(a3 + 272);
          if (v6 != 1) {
            double v22 = (uint64_t *)(a3 + 336);
          }
        }
        uint64_t v23 = *v22;
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        if (v9 == v20)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          double v21 = v11 - 0.0;
        }
        else
        {
          unint64_t v24 = v20 - 1;
          if (v20 - 1 < 0) {
            goto LABEL_54;
          }
          unint64_t v25 = *(void *)(v23 + 16);
          if (v24 >= v25) {
            goto LABEL_55;
          }
          double v26 = *(double *)(v23 + 32 + 8 * v24);
          if (v9 <= 0)
          {
            double v27 = 0.0;
          }
          else
          {
            if (v9 - 1 >= v25) {
              goto LABEL_56;
            }
            double v27 = *(double *)(v23 + 32 + 8 * (v9 - 1));
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          double v21 = v11 - (v26 - v27);
        }
      }
      long long v28 = *(char **)a4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)a4 = v28;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        long long v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v28 + 2) + 1, 1, v28);
        *(void *)a4 = v28;
      }
      unint64_t v31 = *((void *)v28 + 2);
      unint64_t v30 = *((void *)v28 + 3);
      if (v31 >= v30 >> 1) {
        long long v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v28);
      }
      *((void *)v28 + 2) = v31 + 1;
      long long v32 = &v28[80 * v31];
      v32[32] = v6;
      unint64_t v8 = v36 + 1;
      *((void *)v32 + 5) = v9;
      *((void *)v32 + 6) = v20;
      *((void *)v32 + 7) = 0;
      *((double *)v32 + 8) = v21;
      v32[72] = v37;
      *((double *)v32 + 10) = v11;
      v32[88] = v37;
      *((void *)v32 + 12) = 0;
      *((void *)v32 + 13) = 0;
      *(void *)a4 = v28;
      v9 += v38;
      uint64_t result = v33;
      if (v36 + 1 == v35) {
        goto LABEL_43;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  else
  {
LABEL_43:
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for static LayoutValueKey.defaultValue.getter in conformance PositionKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v2 = qword_1E9000850;
  char v3 = byte_1E9000858;
  uint64_t v4 = qword_1E9000860;
  char v5 = byte_1E9000868;
  *(unsigned char *)a1 = static PositionKey.defaultValue;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

double protocol witness for static LayoutValueKey.defaultValue.getter in conformance ContentMarginsKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 57) = 1;
  return result;
}

uint64_t JindoTripleVStack.ContentMargins.init(top:leading:bottom:trailing:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(unsigned char *)(a9 + 8) = a2 & 1;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = a4 & 1;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 40) = a6 & 1;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  return result;
}

uint64_t View.jindoPosition(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

uint64_t View.jindoVerticalPlacement(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

uint64_t View.jindoPriority(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

uint64_t View.jindoContentMargins(_:)()
{
  return View.layoutValue<A>(key:value:)();
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t a2)
{
  Swift::Int v5 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v5);
  if (result < v5)
  {
    if (v5 >= 0) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v5 + 1;
    }
    if (v5 < -1)
    {
LABEL_279:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    Swift::Int v246 = v5;
    Swift::Int v241 = result;
    uint64_t v239 = a1;
    if (v5 >= 2)
    {
      uint64_t v8 = v7 >> 1;
      uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v9 + 16) = v8;
      uint64_t v240 = v9;
      __dst = (char *)(v9 + 32);
LABEL_12:
      Swift::Int v11 = 0;
      uint64_t v12 = *a1;
      uint64_t v238 = *a1 - 8;
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v253 = a2;
      Swift::Int v13 = v246;
      uint64_t v248 = *a1;
      while (1)
      {
        uint64_t v245 = v11;
        Swift::Int v14 = v11 + 1;
        if (v11 + 1 >= v13) {
          goto LABEL_109;
        }
        uint64_t v242 = v10;
        unint64_t v15 = *(void *)(v12 + 8 * v14);
        if ((v15 & 0x8000000000000000) != 0) {
          goto LABEL_256;
        }
        uint64_t v16 = *(char **)(a2 + 360);
        unint64_t v17 = *((void *)v16 + 2);
        if (v15 >= v17) {
          goto LABEL_257;
        }
        unint64_t v18 = *(void *)(v12 + 8 * v11);
        if (v18 >= v17) {
          goto LABEL_258;
        }
        uint64_t v19 = v15 << 8;
        uint64_t v20 = (uint64_t)&v16[256 * v15 + 32];
        uint64_t v21 = v18 << 8;
        double v22 = *(double *)&v16[256 * v18 + 32];
        if (v22 < *(double *)v20)
        {
          Swift::Int v23 = v245 + 2;
          if (v245 + 2 >= v246) {
            goto LABEL_49;
          }
          Swift::Int v24 = v14;
          BOOL v25 = 1;
          goto LABEL_54;
        }
        if (*(double *)v20 < v22) {
          break;
        }
        if (*(unsigned char *)(v20 + 16))
        {
          ProposedViewSize.init(_:in:by:)();
          char v27 = v26;
          uint64_t v28 = *(void *)(a2 + 104);
          char v29 = *(unsigned char *)(a2 + 112);
          char v30 = *(unsigned char *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((void *)&v254 + 1) = v28;
          char v255 = v29;
          char v256 = v30;
          LayoutSubviews.subscript.getter();
          long long v254 = v257;
          char v255 = v258;
          char v259 = v27 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v32 = v31;
          uint64_t v16 = *(char **)(a2 + 360);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a2 + 360) = v16;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v16);
          }
          if (v15 >= *((void *)v16 + 2)) {
            goto LABEL_271;
          }
          uint64_t v34 = &v16[v19];
          *((void *)v34 + 5) = v32;
          v34[48] = 0;
          *(void *)(a2 + 360) = v16;
          unint64_t v17 = *((void *)v16 + 2);
        }
        if (v15 >= v17) {
          goto LABEL_268;
        }
        if (v16[v19 + 64])
        {
          ProposedViewSize.init(_:in:by:)();
          char v36 = v35;
          uint64_t v37 = *(void *)(a2 + 104);
          char v38 = *(unsigned char *)(a2 + 112);
          char v39 = *(unsigned char *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((void *)&v254 + 1) = v37;
          char v255 = v38;
          char v256 = v39;
          LayoutSubviews.subscript.getter();
          long long v254 = v257;
          char v255 = v258;
          char v259 = v36 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v41 = v40;
          double v42 = *(char **)(a2 + 360);
          char v43 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a2 + 360) = v42;
          if ((v43 & 1) == 0) {
            double v42 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v42);
          }
          if (v15 >= *((void *)v42 + 2)) {
            goto LABEL_272;
          }
          uint64_t v44 = &v42[v19];
          *((void *)v44 + 7) = v41;
          v44[64] = 0;
          *(void *)(a2 + 360) = v42;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        unint64_t v45 = *(char **)(a2 + 360);
        unint64_t v46 = *((void *)v45 + 2);
        if (v18 >= v46) {
          goto LABEL_269;
        }
        long long v47 = v254;
        if (v45[v21 + 48])
        {
          ProposedViewSize.init(_:in:by:)();
          char v49 = v48;
          uint64_t v50 = *(void *)(a2 + 104);
          char v51 = *(unsigned char *)(a2 + 112);
          char v52 = *(unsigned char *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((void *)&v254 + 1) = v50;
          char v255 = v51;
          char v256 = v52;
          LayoutSubviews.subscript.getter();
          long long v254 = v257;
          char v255 = v258;
          char v259 = v49 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v54 = v53;
          unint64_t v45 = *(char **)(a2 + 360);
          char v55 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a2 + 360) = v45;
          if ((v55 & 1) == 0) {
            unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v45);
          }
          if (v18 >= *((void *)v45 + 2)) {
            goto LABEL_273;
          }
          double v56 = &v45[v21];
          *((void *)v56 + 5) = v54;
          v56[48] = 0;
          *(void *)(a2 + 360) = v45;
          unint64_t v46 = *((void *)v45 + 2);
        }
        if (v18 >= v46) {
          goto LABEL_270;
        }
        if (v45[v21 + 64])
        {
          ProposedViewSize.init(_:in:by:)();
          char v58 = v57;
          uint64_t v59 = *(void *)(a2 + 104);
          char v60 = *(unsigned char *)(a2 + 112);
          char v61 = *(unsigned char *)(a2 + 113);
          LODWORD(v254) = *(_DWORD *)(a2 + 96);
          *((void *)&v254 + 1) = v59;
          char v255 = v60;
          char v256 = v61;
          LayoutSubviews.subscript.getter();
          long long v254 = v257;
          char v255 = v258;
          char v259 = v58 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v63 = v62;
          uint64_t v64 = *(char **)(a2 + 360);
          char v65 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a2 + 360) = v64;
          if ((v65 & 1) == 0) {
            uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v64);
          }
          if (v18 >= *((void *)v64 + 2)) {
            goto LABEL_274;
          }
          uint64_t v66 = &v64[v21];
          *((void *)v66 + 7) = v63;
          v66[64] = 0;
          *(void *)(a2 + 360) = v64;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        long long v67 = v254;
        long long v254 = v47;
        long long v257 = v67;
        Swift::Int v24 = v14;
        if (MEMORY[0x18C10DFC0](&v254, &v257))
        {
          Swift::Int v23 = v245 + 2;
          uint64_t v12 = v248;
          if (v245 + 2 >= v246)
          {
LABEL_49:
            uint64_t v10 = v242;
            Swift::Int v68 = v245;
            goto LABEL_101;
          }
          BOOL v25 = 1;
          goto LABEL_54;
        }
        long long v254 = v47;
        long long v257 = v67;
        if (MEMORY[0x18C10DFC0](&v257, &v254))
        {
          Swift::Int v23 = v245 + 2;
          uint64_t v12 = v248;
          if (v245 + 2 >= v246)
          {
LABEL_95:
            Swift::Int v14 = v23;
            uint64_t v10 = v242;
            goto LABEL_109;
          }
          BOOL v25 = 0;
          goto LABEL_54;
        }
        BOOL v25 = v15 < v18;
        Swift::Int v23 = v245 + 2;
        uint64_t v12 = v248;
        if (v245 + 2 < v246) {
          goto LABEL_54;
        }
LABEL_97:
        uint64_t v10 = v242;
        Swift::Int v14 = v23;
        if (!v25) {
          goto LABEL_109;
        }
LABEL_100:
        Swift::Int v68 = v245;
        if (v23 < v245) {
          goto LABEL_265;
        }
LABEL_101:
        if (v68 < v23)
        {
          uint64_t v123 = v23 - 1;
          do
          {
            if (v68 != v123)
            {
              if (!v12) {
                goto LABEL_277;
              }
              uint64_t v124 = *(void *)(v12 + 8 * v68);
              *(void *)(v12 + 8 * v68) = *(void *)(v12 + 8 * v123);
              *(void *)(v12 + 8 * v123) = v124;
            }
            BOOL v214 = ++v68 < v123--;
          }
          while (v214);
        }
        Swift::Int v14 = v23;
LABEL_109:
        if (v14 >= v246) {
          goto LABEL_156;
        }
        if (__OFSUB__(v14, v245)) {
          goto LABEL_259;
        }
        if (v14 - v245 >= v241) {
          goto LABEL_156;
        }
        if (__OFADD__(v245, v241)) {
          goto LABEL_266;
        }
        Swift::Int v125 = v246;
        if (v245 + v241 < v246) {
          Swift::Int v125 = v245 + v241;
        }
        if (v125 < v245) {
          goto LABEL_267;
        }
        if (v14 == v125) {
          goto LABEL_156;
        }
        Swift::Int v243 = v125;
        unint64_t v126 = (unint64_t *)(v238 + 8 * v14);
        while (2)
        {
          Swift::Int v249 = v14;
          unint64_t v127 = *(void *)(v12 + 8 * v14);
          uint64_t v128 = v245;
          uint64_t v244 = v126;
          while (1)
          {
            if ((v127 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
LABEL_228:
              __break(1u);
LABEL_229:
              __break(1u);
LABEL_230:
              __break(1u);
LABEL_231:
              __break(1u);
LABEL_232:
              __break(1u);
LABEL_233:
              __break(1u);
LABEL_234:
              __break(1u);
LABEL_235:
              __break(1u);
LABEL_236:
              __break(1u);
LABEL_237:
              __break(1u);
LABEL_238:
              __break(1u);
LABEL_239:
              __break(1u);
LABEL_240:
              __break(1u);
LABEL_241:
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              __break(1u);
LABEL_244:
              __break(1u);
LABEL_245:
              __break(1u);
LABEL_246:
              __break(1u);
LABEL_247:
              __break(1u);
              goto LABEL_248;
            }
            char v129 = *(char **)(a2 + 360);
            unint64_t v130 = *((void *)v129 + 2);
            if (v127 >= v130) {
              goto LABEL_221;
            }
            unint64_t v131 = *v126;
            if (*v126 >= v130) {
              goto LABEL_222;
            }
            uint64_t v132 = v127 << 8;
            uint64_t v133 = (uint64_t)&v129[256 * v127 + 32];
            uint64_t v134 = v131 << 8;
            double v135 = *(double *)&v129[256 * v131 + 32];
            if (v135 < *(double *)v133) {
              goto LABEL_152;
            }
            if (*(double *)v133 < v135) {
              goto LABEL_119;
            }
            uint64_t v252 = v131 << 8;
            if (*(unsigned char *)(v133 + 16))
            {
              ProposedViewSize.init(_:in:by:)();
              char v137 = v136;
              uint64_t v138 = *(void *)(v253 + 104);
              char v139 = *(unsigned char *)(v253 + 112);
              char v140 = *(unsigned char *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((void *)&v254 + 1) = v138;
              char v255 = v139;
              char v256 = v140;
              LayoutSubviews.subscript.getter();
              long long v254 = v257;
              char v255 = v258;
              char v141 = v137 & 1;
              a2 = v253;
              char v259 = v141;
              LayoutSubview.lengthThatFits(_:in:)();
              uint64_t v143 = v142;
              char v129 = *(char **)(v253 + 360);
              char v144 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v253 + 360) = v129;
              if ((v144 & 1) == 0) {
                char v129 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v129);
              }
              uint64_t v134 = v131 << 8;
              if (v127 >= *((void *)v129 + 2)) {
                goto LABEL_227;
              }
              double v145 = &v129[v132];
              *((void *)v145 + 5) = v143;
              v145[48] = 0;
              *(void *)(v253 + 360) = v129;
              unint64_t v130 = *((void *)v129 + 2);
            }
            if (v127 >= v130) {
              goto LABEL_223;
            }
            if (v129[v132 + 64])
            {
              ProposedViewSize.init(_:in:by:)();
              char v147 = v146;
              uint64_t v148 = *(void *)(v253 + 104);
              char v149 = *(unsigned char *)(v253 + 112);
              char v150 = *(unsigned char *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((void *)&v254 + 1) = v148;
              char v255 = v149;
              char v256 = v150;
              LayoutSubviews.subscript.getter();
              long long v254 = v257;
              char v255 = v258;
              char v259 = v147 & 1;
              a2 = v253;
              LayoutSubview.lengthThatFits(_:in:)();
              uint64_t v152 = v151;
              char v153 = *(char **)(v253 + 360);
              char v154 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v253 + 360) = v153;
              if ((v154 & 1) == 0) {
                char v153 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v153);
              }
              uint64_t v134 = v131 << 8;
              if (v127 >= *((void *)v153 + 2)) {
                goto LABEL_228;
              }
              uint64_t v155 = &v153[v132];
              *((void *)v155 + 7) = v152;
              v155[64] = 0;
              *(void *)(v253 + 360) = v153;
            }
            _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
            uint64_t v156 = *(char **)(a2 + 360);
            unint64_t v157 = *((void *)v156 + 2);
            if (v131 >= v157) {
              goto LABEL_224;
            }
            long long v158 = v254;
            if (v156[v134 + 48])
            {
              ProposedViewSize.init(_:in:by:)();
              char v160 = v159;
              uint64_t v161 = *(void *)(v253 + 104);
              char v162 = *(unsigned char *)(v253 + 112);
              char v163 = *(unsigned char *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((void *)&v254 + 1) = v161;
              char v255 = v162;
              char v256 = v163;
              LayoutSubviews.subscript.getter();
              long long v254 = v257;
              char v255 = v258;
              char v259 = v160 & 1;
              a2 = v253;
              LayoutSubview.lengthThatFits(_:in:)();
              uint64_t v165 = v164;
              uint64_t v156 = *(char **)(v253 + 360);
              char v166 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v253 + 360) = v156;
              if ((v166 & 1) == 0) {
                uint64_t v156 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v156);
              }
              uint64_t v134 = v131 << 8;
              if (v131 >= *((void *)v156 + 2)) {
                goto LABEL_229;
              }
              int v167 = &v156[v252];
              *((void *)v167 + 5) = v165;
              v167[48] = 0;
              *(void *)(v253 + 360) = v156;
              unint64_t v157 = *((void *)v156 + 2);
            }
            if (v131 >= v157) {
              goto LABEL_225;
            }
            if (v156[v134 + 64])
            {
              ProposedViewSize.init(_:in:by:)();
              char v169 = v168;
              uint64_t v170 = *(void *)(v253 + 104);
              char v171 = *(unsigned char *)(v253 + 112);
              char v172 = *(unsigned char *)(v253 + 113);
              LODWORD(v254) = *(_DWORD *)(v253 + 96);
              *((void *)&v254 + 1) = v170;
              char v255 = v171;
              char v256 = v172;
              LayoutSubviews.subscript.getter();
              long long v254 = v257;
              char v255 = v258;
              char v259 = v169 & 1;
              a2 = v253;
              LayoutSubview.lengthThatFits(_:in:)();
              uint64_t v174 = v173;
              uint64_t v175 = *(char **)(v253 + 360);
              char v176 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v253 + 360) = v175;
              if ((v176 & 1) == 0) {
                uint64_t v175 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v175);
              }
              if (v131 >= *((void *)v175 + 2)) {
                goto LABEL_230;
              }
              char v177 = &v175[v252];
              *((void *)v177 + 7) = v174;
              v177[64] = 0;
              *(void *)(v253 + 360) = v175;
            }
            _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
            long long v178 = v254;
            long long v254 = v158;
            long long v257 = v178;
            char v179 = MEMORY[0x18C10DFC0](&v254, &v257);
            uint64_t v12 = v248;
            if (v179) {
              goto LABEL_152;
            }
            long long v254 = v158;
            long long v257 = v178;
            if (MEMORY[0x18C10DFC0](&v257, &v254)) {
              break;
            }
            uint64_t v12 = v248;
            if (v127 >= v131) {
              goto LABEL_119;
            }
LABEL_152:
            if (!v12) {
              goto LABEL_275;
            }
            unint64_t v180 = *v126;
            unint64_t v127 = v126[1];
            *unint64_t v126 = v127;
            v126[1] = v180;
            --v126;
            if (v249 == ++v128) {
              goto LABEL_119;
            }
          }
          uint64_t v12 = v248;
LABEL_119:
          Swift::Int v14 = v249 + 1;
          unint64_t v126 = v244 + 1;
          if (v249 + 1 != v243) {
            continue;
          }
          break;
        }
        Swift::Int v14 = v243;
LABEL_156:
        if (v14 < v245) {
          goto LABEL_255;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v182 = *((void *)v10 + 2);
        unint64_t v181 = *((void *)v10 + 3);
        unint64_t v183 = v182 + 1;
        uint64_t v12 = v248;
        Swift::Int v250 = v14;
        if (v182 >= v181 >> 1)
        {
          char v231 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v181 > 1), v182 + 1, 1, v10);
          uint64_t v12 = v248;
          uint64_t v10 = v231;
        }
        *((void *)v10 + 2) = v183;
        int v184 = v10 + 32;
        double v185 = &v10[16 * v182 + 32];
        *(void *)double v185 = v245;
        *((void *)v185 + 1) = v14;
        if (v182)
        {
          while (1)
          {
            unint64_t v186 = v183 - 1;
            if (v183 >= 4)
            {
              unint64_t v191 = &v184[16 * v183];
              uint64_t v192 = *((void *)v191 - 8);
              uint64_t v193 = *((void *)v191 - 7);
              BOOL v197 = __OFSUB__(v193, v192);
              uint64_t v194 = v193 - v192;
              if (v197) {
                goto LABEL_237;
              }
              uint64_t v196 = *((void *)v191 - 6);
              uint64_t v195 = *((void *)v191 - 5);
              BOOL v197 = __OFSUB__(v195, v196);
              uint64_t v189 = v195 - v196;
              char v190 = v197;
              if (v197) {
                goto LABEL_238;
              }
              unint64_t v198 = v183 - 2;
              unint64_t v199 = &v184[16 * v183 - 32];
              uint64_t v201 = *(void *)v199;
              uint64_t v200 = *((void *)v199 + 1);
              BOOL v197 = __OFSUB__(v200, v201);
              uint64_t v202 = v200 - v201;
              if (v197) {
                goto LABEL_240;
              }
              BOOL v197 = __OFADD__(v189, v202);
              uint64_t v203 = v189 + v202;
              if (v197) {
                goto LABEL_243;
              }
              if (v203 >= v194)
              {
                v221 = &v184[16 * v186];
                uint64_t v223 = *(void *)v221;
                uint64_t v222 = *((void *)v221 + 1);
                BOOL v197 = __OFSUB__(v222, v223);
                uint64_t v224 = v222 - v223;
                if (v197) {
                  goto LABEL_247;
                }
                BOOL v214 = v189 < v224;
                goto LABEL_193;
              }
            }
            else
            {
              if (v183 != 3)
              {
                uint64_t v215 = *((void *)v10 + 4);
                uint64_t v216 = *((void *)v10 + 5);
                BOOL v197 = __OFSUB__(v216, v215);
                uint64_t v208 = v216 - v215;
                char v209 = v197;
                goto LABEL_187;
              }
              uint64_t v188 = *((void *)v10 + 4);
              uint64_t v187 = *((void *)v10 + 5);
              BOOL v197 = __OFSUB__(v187, v188);
              uint64_t v189 = v187 - v188;
              char v190 = v197;
            }
            if (v190) {
              goto LABEL_239;
            }
            unint64_t v198 = v183 - 2;
            v204 = &v184[16 * v183 - 32];
            uint64_t v206 = *(void *)v204;
            uint64_t v205 = *((void *)v204 + 1);
            BOOL v207 = __OFSUB__(v205, v206);
            uint64_t v208 = v205 - v206;
            char v209 = v207;
            if (v207) {
              goto LABEL_242;
            }
            double v210 = &v184[16 * v186];
            uint64_t v212 = *(void *)v210;
            uint64_t v211 = *((void *)v210 + 1);
            BOOL v197 = __OFSUB__(v211, v212);
            uint64_t v213 = v211 - v212;
            if (v197) {
              goto LABEL_245;
            }
            if (__OFADD__(v208, v213)) {
              goto LABEL_246;
            }
            if (v208 + v213 >= v189)
            {
              BOOL v214 = v189 < v213;
LABEL_193:
              if (v214) {
                unint64_t v186 = v198;
              }
              goto LABEL_195;
            }
LABEL_187:
            if (v209) {
              goto LABEL_241;
            }
            uint64_t v217 = &v184[16 * v186];
            uint64_t v219 = *(void *)v217;
            uint64_t v218 = *((void *)v217 + 1);
            BOOL v197 = __OFSUB__(v218, v219);
            uint64_t v220 = v218 - v219;
            if (v197) {
              goto LABEL_244;
            }
            if (v220 < v208) {
              goto LABEL_204;
            }
LABEL_195:
            unint64_t v225 = v186 - 1;
            if (v186 - 1 >= v183) {
              goto LABEL_226;
            }
            if (!v12) {
              goto LABEL_276;
            }
            uint64_t v226 = &v184[16 * v225];
            uint64_t v227 = *(void *)v226;
            uint64_t v228 = &v184[16 * v186];
            uint64_t v229 = *((void *)v228 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v12 + 8 * *(void *)v226), (char *)(v12 + 8 * *(void *)v228), v12 + 8 * v229, __dst, a2);
            if (v2) {
              goto LABEL_219;
            }
            if (v229 < v227) {
              goto LABEL_231;
            }
            if (v186 > *((void *)v10 + 2)) {
              goto LABEL_232;
            }
            *(void *)uint64_t v226 = v227;
            *(void *)&v184[16 * v225 + 8] = v229;
            unint64_t v230 = *((void *)v10 + 2);
            if (v186 >= v230) {
              goto LABEL_233;
            }
            unint64_t v183 = v230 - 1;
            memmove(&v184[16 * v186], v228 + 16, 16 * (v230 - 1 - v186));
            *((void *)v10 + 2) = v230 - 1;
            uint64_t v12 = v248;
            if (v230 <= 2) {
              goto LABEL_204;
            }
          }
        }
        unint64_t v183 = 1;
LABEL_204:
        Swift::Int v13 = v246;
        Swift::Int v11 = v250;
        if (v250 >= v246) {
          goto LABEL_208;
        }
      }
      Swift::Int v23 = v245 + 2;
      if (v245 + 2 >= v246) {
        goto LABEL_95;
      }
      BOOL v25 = 0;
      Swift::Int v24 = v14;
LABEL_54:
      Swift::Int v69 = v23;
      BOOL v251 = v25;
      do
      {
        unint64_t v70 = *(void *)(v12 + 8 * v69);
        if ((v70 & 0x8000000000000000) != 0) {
          goto LABEL_234;
        }
        Swift::Int v23 = v69;
        unint64_t v71 = *(char **)(a2 + 360);
        unint64_t v72 = *((void *)v71 + 2);
        if (v70 >= v72) {
          goto LABEL_235;
        }
        unint64_t v73 = *(void *)(v12 + 8 * v24);
        if (v73 >= v72) {
          goto LABEL_236;
        }
        uint64_t v74 = v70 << 8;
        uint64_t v75 = (uint64_t)&v71[256 * v70 + 32];
        uint64_t v76 = v73 << 8;
        double v77 = *(double *)&v71[256 * v73 + 32];
        if (v77 < *(double *)v75)
        {
          if (!v25) {
            goto LABEL_95;
          }
        }
        else if (*(double *)v75 >= v77)
        {
          if (*(unsigned char *)(v75 + 16))
          {
            ProposedViewSize.init(_:in:by:)();
            char v79 = v78;
            uint64_t v80 = *(void *)(v253 + 104);
            char v81 = *(unsigned char *)(v253 + 112);
            char v82 = *(unsigned char *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((void *)&v254 + 1) = v80;
            char v255 = v81;
            char v256 = v82;
            LayoutSubviews.subscript.getter();
            long long v254 = v257;
            char v255 = v258;
            char v259 = v79 & 1;
            a2 = v253;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v84 = v83;
            unint64_t v71 = *(char **)(v253 + 360);
            char v85 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v253 + 360) = v71;
            if ((v85 & 1) == 0) {
              unint64_t v71 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v71);
            }
            if (v70 >= *((void *)v71 + 2)) {
              goto LABEL_260;
            }
            long long v86 = &v71[v74];
            *((void *)v86 + 5) = v84;
            v86[48] = 0;
            *(void *)(v253 + 360) = v71;
            unint64_t v72 = *((void *)v71 + 2);
          }
          if (v70 >= v72) {
            goto LABEL_252;
          }
          if (v71[v74 + 64])
          {
            ProposedViewSize.init(_:in:by:)();
            char v88 = v87;
            uint64_t v89 = *(void *)(v253 + 104);
            char v90 = *(unsigned char *)(v253 + 112);
            char v91 = *(unsigned char *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((void *)&v254 + 1) = v89;
            char v255 = v90;
            char v256 = v91;
            LayoutSubviews.subscript.getter();
            long long v254 = v257;
            char v255 = v258;
            char v92 = v88 & 1;
            a2 = v253;
            char v259 = v92;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v94 = v93;
            long long v95 = *(char **)(v253 + 360);
            char v96 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v253 + 360) = v95;
            if ((v96 & 1) == 0) {
              long long v95 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v95);
            }
            if (v70 >= *((void *)v95 + 2)) {
              goto LABEL_261;
            }
            long long v97 = &v95[v74];
            *((void *)v97 + 7) = v94;
            v97[64] = 0;
            *(void *)(v253 + 360) = v95;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          long long v98 = *(char **)(a2 + 360);
          unint64_t v99 = *((void *)v98 + 2);
          if (v73 >= v99) {
            goto LABEL_253;
          }
          long long v100 = v254;
          if (v98[v76 + 48])
          {
            ProposedViewSize.init(_:in:by:)();
            char v102 = v101;
            uint64_t v103 = *(void *)(v253 + 104);
            char v104 = *(unsigned char *)(v253 + 112);
            char v105 = *(unsigned char *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((void *)&v254 + 1) = v103;
            char v255 = v104;
            char v256 = v105;
            LayoutSubviews.subscript.getter();
            long long v254 = v257;
            char v255 = v258;
            char v106 = v102 & 1;
            a2 = v253;
            char v259 = v106;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v108 = v107;
            long long v98 = *(char **)(v253 + 360);
            char v109 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v253 + 360) = v98;
            if ((v109 & 1) == 0) {
              long long v98 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v98);
            }
            if (v73 >= *((void *)v98 + 2)) {
              goto LABEL_262;
            }
            uint64_t v110 = &v98[v76];
            *((void *)v110 + 5) = v108;
            v110[48] = 0;
            *(void *)(v253 + 360) = v98;
            unint64_t v99 = *((void *)v98 + 2);
          }
          if (v73 >= v99) {
            goto LABEL_254;
          }
          if (v98[v76 + 64])
          {
            ProposedViewSize.init(_:in:by:)();
            char v112 = v111;
            uint64_t v113 = *(void *)(v253 + 104);
            char v114 = *(unsigned char *)(v253 + 112);
            char v115 = *(unsigned char *)(v253 + 113);
            LODWORD(v254) = *(_DWORD *)(v253 + 96);
            *((void *)&v254 + 1) = v113;
            char v255 = v114;
            char v256 = v115;
            LayoutSubviews.subscript.getter();
            long long v254 = v257;
            char v255 = v258;
            char v116 = v112 & 1;
            a2 = v253;
            char v259 = v116;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v118 = v117;
            char v119 = *(char **)(v253 + 360);
            char v120 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v253 + 360) = v119;
            if ((v120 & 1) == 0) {
              char v119 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v119);
            }
            if (v73 >= *((void *)v119 + 2)) {
              goto LABEL_263;
            }
            uint64_t v121 = &v119[v76];
            *((void *)v121 + 7) = v118;
            v121[64] = 0;
            *(void *)(v253 + 360) = v119;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          long long v122 = v254;
          long long v254 = v100;
          long long v257 = v122;
          if (MEMORY[0x18C10DFC0](&v254, &v257))
          {
            uint64_t v12 = v248;
            BOOL v25 = v251;
            if (!v251) {
              goto LABEL_95;
            }
          }
          else
          {
            long long v254 = v100;
            long long v257 = v122;
            if (MEMORY[0x18C10DFC0](&v257, &v254))
            {
              uint64_t v12 = v248;
              BOOL v25 = v251;
              if (v251)
              {
LABEL_99:
                uint64_t v10 = v242;
                goto LABEL_100;
              }
            }
            else
            {
              BOOL v25 = v251;
              uint64_t v12 = v248;
              if (((v251 ^ (v70 >= v73)) & 1) == 0) {
                goto LABEL_97;
              }
            }
          }
        }
        else if (v25)
        {
          goto LABEL_99;
        }
        Swift::Int v69 = v23 + 1;
        Swift::Int v24 = v23;
      }
      while (v23 + 1 < v246);
      ++v23;
      goto LABEL_97;
    }
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v240 = MEMORY[0x1E4FBC860];
    if (v5 == 1) {
      goto LABEL_12;
    }
    unint64_t v183 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_208:
    if (v183 < 2)
    {
LABEL_219:
      swift_bridgeObjectRelease();
      *(void *)(v240 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v232 = *v239;
    while (1)
    {
      unint64_t v233 = v183 - 2;
      if (v183 < 2) {
        break;
      }
      if (!v232) {
        goto LABEL_278;
      }
      uint64_t v234 = *(void *)&v10[16 * v233 + 32];
      uint64_t v235 = *(void *)&v10[16 * v183 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v232 + 8 * v234), (char *)(v232 + 8 * *(void *)&v10[16 * v183 + 16]), v232 + 8 * v235, __dst, a2);
      if (v2) {
        goto LABEL_219;
      }
      if (v235 < v234) {
        goto LABEL_249;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
      }
      if (v233 >= *((void *)v10 + 2)) {
        goto LABEL_250;
      }
      uint64_t v236 = &v10[16 * v233 + 32];
      *(void *)uint64_t v236 = v234;
      *((void *)v236 + 1) = v235;
      unint64_t v237 = *((void *)v10 + 2);
      if (v183 > v237) {
        goto LABEL_251;
      }
      memmove(&v10[16 * v183 + 16], &v10[16 * v183 + 32], 16 * (v237 - v183));
      *((void *)v10 + 2) = v237 - 1;
      unint64_t v183 = v237 - 1;
      if (v237 <= 2) {
        goto LABEL_219;
      }
    }
LABEL_248:
    __break(1u);
LABEL_249:
    __break(1u);
LABEL_250:
    __break(1u);
LABEL_251:
    __break(1u);
LABEL_252:
    __break(1u);
LABEL_253:
    __break(1u);
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
LABEL_276:
    __break(1u);
LABEL_277:
    __break(1u);
LABEL_278:
    __break(1u);
    goto LABEL_279;
  }
  if (v5 < 0) {
    goto LABEL_264;
  }
  if (v5) {
    return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v5, 1, a1, a2);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *__src, unint64_t a3, char *__dst, uint64_t a5)
{
  unint64_t v5 = a3;
  char v6 = __src;
  uint64_t v7 = a1;
  uint64_t v8 = __src - a1;
  uint64_t v9 = __src - a1 + 7;
  if (__src - a1 >= 0) {
    uint64_t v9 = __src - a1;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)__src;
  uint64_t v12 = a3 - (void)__src + 7;
  if ((uint64_t)(a3 - (void)__src) >= 0) {
    uint64_t v12 = a3 - (void)__src;
  }
  uint64_t v13 = v12 >> 3;
  char v140 = a1;
  char v139 = __dst;
  uint64_t v132 = a5;
  uint64_t v128 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != __src || &__src[8 * v13] <= __dst)
      {
        memmove(__dst, __src, 8 * v13);
        __dst = v128;
        uint64_t v7 = a1;
        a5 = v132;
      }
      Swift::Int v68 = &__dst[8 * v13];
      uint64_t v138 = v68;
      char v140 = v6;
      if (v11 >= 8 && v7 < v6)
      {
        Swift::Int v69 = (char *)(v5 - 8);
        while (1)
        {
          unint64_t v70 = v68 - 8;
          unint64_t v71 = *((void *)v68 - 1);
          if ((v71 & 0x8000000000000000) != 0) {
            break;
          }
          uint64_t v72 = *(void *)(a5 + 360);
          unint64_t v73 = *(void *)(v72 + 16);
          if (v71 >= v73) {
            goto LABEL_113;
          }
          uint64_t v74 = v6 - 8;
          unint64_t v75 = *((void *)v6 - 1);
          if (v75 >= v73) {
            goto LABEL_114;
          }
          uint64_t v76 = v69 + 8;
          uint64_t v77 = v71 << 8;
          uint64_t v78 = v72 + 32 + (v71 << 8);
          uint64_t v79 = v75 << 8;
          double v80 = *(double *)(v72 + 32 + (v75 << 8));
          if (v80 < *(double *)v78) {
            goto LABEL_69;
          }
          if (*(double *)v78 < v80) {
            goto LABEL_74;
          }
          unint64_t v127 = v68;
          if (*(unsigned char *)(v78 + 16))
          {
            ProposedViewSize.init(_:in:by:)();
            uint64_t v81 = *(void *)(v132 + 104);
            char v82 = *(unsigned char *)(v132 + 112);
            char v83 = *(unsigned char *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((void *)&v133 + 1) = v81;
            char v134 = v82;
            char v135 = v83;
            LayoutSubviews.subscript.getter();
            long long v133 = v136;
            char v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v85 = v84;
            uint64_t v72 = *(void *)(v132 + 360);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            a5 = v132;
            *(void *)(v132 + 360) = v72;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew()(v72);
              a5 = v132;
              uint64_t v72 = (uint64_t)v121;
            }
            if (v71 >= *(void *)(v72 + 16)) {
              goto LABEL_124;
            }
            uint64_t v87 = v72 + v77;
            *(void *)(v87 + 40) = v85;
            *(unsigned char *)(v87 + 48) = 0;
            *(void *)(a5 + 360) = v72;
            unint64_t v73 = *(void *)(v72 + 16);
          }
          if (v71 >= v73) {
            goto LABEL_118;
          }
          if (*(unsigned char *)(v72 + v77 + 64))
          {
            ProposedViewSize.init(_:in:by:)();
            uint64_t v88 = *(void *)(v132 + 104);
            char v89 = *(unsigned char *)(v132 + 112);
            char v90 = *(unsigned char *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((void *)&v133 + 1) = v88;
            char v134 = v89;
            char v135 = v90;
            LayoutSubviews.subscript.getter();
            long long v133 = v136;
            char v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v92 = v91;
            uint64_t v93 = *(void *)(v132 + 360);
            char v94 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v95 = v132;
            *(void *)(v132 + 360) = v93;
            if ((v94 & 1) == 0)
            {
              long long v122 = specialized _ArrayBuffer._consumeAndCreateNew()(v93);
              uint64_t v95 = v132;
              uint64_t v93 = (uint64_t)v122;
            }
            if (v71 >= *(void *)(v93 + 16)) {
              goto LABEL_125;
            }
            uint64_t v96 = v93 + v77;
            *(void *)(v96 + 56) = v92;
            *(unsigned char *)(v96 + 64) = 0;
            *(void *)(v95 + 360) = v93;
            uint64_t v97 = v95;
          }
          else
          {
            uint64_t v97 = a5;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          uint64_t v98 = *(void *)(v97 + 360);
          unint64_t v99 = *(void *)(v98 + 16);
          if (v75 >= v99) {
            goto LABEL_119;
          }
          long long v100 = v133;
          if (*(unsigned char *)(v98 + v79 + 48))
          {
            ProposedViewSize.init(_:in:by:)();
            uint64_t v101 = *(void *)(v132 + 104);
            char v102 = *(unsigned char *)(v132 + 112);
            char v103 = *(unsigned char *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((void *)&v133 + 1) = v101;
            char v134 = v102;
            char v135 = v103;
            LayoutSubviews.subscript.getter();
            long long v133 = v136;
            char v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v105 = v104;
            uint64_t v98 = *(void *)(v132 + 360);
            char v106 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v107 = v132;
            *(void *)(v132 + 360) = v98;
            if ((v106 & 1) == 0)
            {
              uint64_t v123 = specialized _ArrayBuffer._consumeAndCreateNew()(v98);
              uint64_t v107 = v132;
              uint64_t v98 = (uint64_t)v123;
            }
            if (v75 >= *(void *)(v98 + 16)) {
              goto LABEL_126;
            }
            uint64_t v108 = v98 + v79;
            *(void *)(v108 + 40) = v105;
            *(unsigned char *)(v108 + 48) = 0;
            *(void *)(v107 + 360) = v98;
            unint64_t v99 = *(void *)(v98 + 16);
          }
          if (v75 >= v99) {
            goto LABEL_120;
          }
          if (*(unsigned char *)(v98 + v79 + 64))
          {
            ProposedViewSize.init(_:in:by:)();
            uint64_t v109 = *(void *)(v132 + 104);
            char v110 = *(unsigned char *)(v132 + 112);
            char v111 = *(unsigned char *)(v132 + 113);
            LODWORD(v133) = *(_DWORD *)(v132 + 96);
            *((void *)&v133 + 1) = v109;
            char v134 = v110;
            char v135 = v111;
            LayoutSubviews.subscript.getter();
            long long v133 = v136;
            char v134 = v137;
            LayoutSubview.lengthThatFits(_:in:)();
            uint64_t v113 = v112;
            uint64_t v114 = *(void *)(v132 + 360);
            char v115 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v132 + 360) = v114;
            if (v115)
            {
              uint64_t v116 = v132;
            }
            else
            {
              uint64_t v124 = specialized _ArrayBuffer._consumeAndCreateNew()(v114);
              uint64_t v116 = v132;
              uint64_t v114 = (uint64_t)v124;
            }
            if (v75 >= *(void *)(v114 + 16)) {
              goto LABEL_127;
            }
            uint64_t v117 = v114 + v79;
            *(void *)(v117 + 56) = v113;
            *(unsigned char *)(v117 + 64) = 0;
            *(void *)(v116 + 360) = v114;
          }
          _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
          long long v118 = v133;
          long long v133 = v100;
          long long v136 = v118;
          char v119 = MEMORY[0x18C10DFC0](&v133, &v136);
          uint64_t v7 = a1;
          a5 = v132;
          Swift::Int v68 = v127;
          __dst = v128;
          uint64_t v76 = v69 + 8;
          if (v119) {
            goto LABEL_69;
          }
          long long v133 = v100;
          long long v136 = v118;
          char v120 = MEMORY[0x18C10DFC0](&v136, &v133);
          uint64_t v76 = v69 + 8;
          Swift::Int v68 = v127;
          __dst = v128;
          uint64_t v7 = a1;
          a5 = v132;
          if (v120) {
            goto LABEL_74;
          }
          if (v71 < v75)
          {
LABEL_69:
            if (v76 != v6 || v69 >= v6) {
              *(void *)Swift::Int v69 = *(void *)v74;
            }
            char v140 = v6 - 8;
            if (v68 <= __dst) {
              goto LABEL_111;
            }
          }
          else
          {
LABEL_74:
            uint64_t v138 = v70;
            if (v76 < v68 || v69 >= v68 || v76 != v68) {
              *(void *)Swift::Int v69 = *(void *)v70;
            }
            uint64_t v74 = v6;
            Swift::Int v68 = v70;
            if (v70 <= __dst) {
              goto LABEL_111;
            }
          }
          v69 -= 8;
          char v6 = v74;
          if (v74 <= v7) {
            goto LABEL_111;
          }
        }
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      }
LABEL_111:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v140, (const void **)&v139, &v138);
      return 1;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != a1 || &a1[8 * v10] <= __dst)
    {
      memmove(__dst, a1, 8 * v10);
      __dst = v128;
      uint64_t v7 = a1;
      a5 = v132;
    }
    Swift::Int v14 = &__dst[8 * v10];
    uint64_t v138 = v14;
    if (v8 >= 8 && (unint64_t)v6 < v5)
    {
      unint64_t v126 = v5;
      while (1)
      {
        unint64_t v15 = *(void *)v6;
        if ((*(void *)v6 & 0x8000000000000000) != 0) {
          break;
        }
        uint64_t v16 = *(void *)(a5 + 360);
        unint64_t v17 = *(void *)(v16 + 16);
        if (v15 >= v17) {
          goto LABEL_116;
        }
        unint64_t v18 = *(void *)__dst;
        if (*(void *)__dst >= v17) {
          goto LABEL_117;
        }
        uint64_t v19 = v15 << 8;
        uint64_t v20 = v16 + 32 + (v15 << 8);
        uint64_t v21 = v18 << 8;
        double v22 = *(double *)(v16 + 32 + (v18 << 8));
        if (v22 < *(double *)v20) {
          goto LABEL_17;
        }
        if (*(double *)v20 < v22) {
          goto LABEL_22;
        }
        char v129 = __dst;
        __srcb = v7;
        if (*(unsigned char *)(v20 + 16))
        {
          ProposedViewSize.init(_:in:by:)();
          uint64_t v24 = *(void *)(v132 + 104);
          char v25 = *(unsigned char *)(v132 + 112);
          char v26 = *(unsigned char *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((void *)&v133 + 1) = v24;
          char v134 = v25;
          char v135 = v26;
          LayoutSubviews.subscript.getter();
          long long v133 = v136;
          char v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v28 = v27;
          uint64_t v16 = *(void *)(v132 + 360);
          char v29 = swift_isUniquelyReferenced_nonNull_native();
          a5 = v132;
          *(void *)(v132 + 360) = v16;
          if ((v29 & 1) == 0)
          {
            uint64_t v64 = specialized _ArrayBuffer._consumeAndCreateNew()(v16);
            a5 = v132;
            uint64_t v16 = (uint64_t)v64;
          }
          unint64_t v5 = v126;
          if (v15 >= *(void *)(v16 + 16)) {
            goto LABEL_128;
          }
          uint64_t v30 = v16 + v19;
          *(void *)(v30 + 40) = v28;
          *(unsigned char *)(v30 + 48) = 0;
          *(void *)(a5 + 360) = v16;
          unint64_t v17 = *(void *)(v16 + 16);
        }
        if (v15 >= v17) {
          goto LABEL_121;
        }
        if (*(unsigned char *)(v16 + v19 + 64))
        {
          ProposedViewSize.init(_:in:by:)();
          uint64_t v31 = *(void *)(v132 + 104);
          char v32 = *(unsigned char *)(v132 + 112);
          char v33 = *(unsigned char *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((void *)&v133 + 1) = v31;
          char v134 = v32;
          char v135 = v33;
          LayoutSubviews.subscript.getter();
          long long v133 = v136;
          char v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v35 = v34;
          uint64_t v36 = *(void *)(v132 + 360);
          char v37 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v38 = v132;
          *(void *)(v132 + 360) = v36;
          if ((v37 & 1) == 0)
          {
            char v65 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
            uint64_t v38 = v132;
            uint64_t v36 = (uint64_t)v65;
          }
          unint64_t v5 = v126;
          if (v15 >= *(void *)(v36 + 16)) {
            goto LABEL_129;
          }
          uint64_t v39 = v36 + v19;
          *(void *)(v39 + 56) = v35;
          *(unsigned char *)(v39 + 64) = 0;
          *(void *)(v38 + 360) = v36;
          uint64_t v40 = v38;
        }
        else
        {
          uint64_t v40 = a5;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        uint64_t v41 = *(void *)(v40 + 360);
        unint64_t v42 = *(void *)(v41 + 16);
        if (v18 >= v42) {
          goto LABEL_122;
        }
        long long v43 = v133;
        if (*(unsigned char *)(v41 + v21 + 48))
        {
          ProposedViewSize.init(_:in:by:)();
          uint64_t v44 = *(void *)(v132 + 104);
          char v45 = *(unsigned char *)(v132 + 112);
          char v46 = *(unsigned char *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((void *)&v133 + 1) = v44;
          char v134 = v45;
          char v135 = v46;
          LayoutSubviews.subscript.getter();
          long long v133 = v136;
          char v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v48 = v47;
          uint64_t v41 = *(void *)(v132 + 360);
          char v49 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v50 = v132;
          *(void *)(v132 + 360) = v41;
          if ((v49 & 1) == 0)
          {
            uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew()(v41);
            uint64_t v50 = v132;
            uint64_t v41 = (uint64_t)v66;
          }
          unint64_t v5 = v126;
          if (v18 >= *(void *)(v41 + 16)) {
            goto LABEL_130;
          }
          uint64_t v51 = v41 + v21;
          *(void *)(v51 + 40) = v48;
          *(unsigned char *)(v51 + 48) = 0;
          *(void *)(v50 + 360) = v41;
          unint64_t v42 = *(void *)(v41 + 16);
        }
        if (v18 >= v42) {
          goto LABEL_123;
        }
        if (*(unsigned char *)(v41 + v21 + 64))
        {
          ProposedViewSize.init(_:in:by:)();
          uint64_t v52 = *(void *)(v132 + 104);
          char v53 = *(unsigned char *)(v132 + 112);
          char v54 = *(unsigned char *)(v132 + 113);
          LODWORD(v133) = *(_DWORD *)(v132 + 96);
          *((void *)&v133 + 1) = v52;
          char v134 = v53;
          char v135 = v54;
          LayoutSubviews.subscript.getter();
          long long v133 = v136;
          char v134 = v137;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v56 = v55;
          uint64_t v57 = *(void *)(v132 + 360);
          char v58 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v132 + 360) = v57;
          if (v58)
          {
            uint64_t v59 = v132;
          }
          else
          {
            long long v67 = specialized _ArrayBuffer._consumeAndCreateNew()(v57);
            uint64_t v59 = v132;
            uint64_t v57 = (uint64_t)v67;
          }
          unint64_t v5 = v126;
          if (v18 >= *(void *)(v57 + 16)) {
            goto LABEL_131;
          }
          uint64_t v60 = v57 + v21;
          *(void *)(v60 + 56) = v56;
          *(unsigned char *)(v60 + 64) = 0;
          *(void *)(v59 + 360) = v57;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        long long v61 = v133;
        long long v133 = v43;
        long long v136 = v61;
        char v62 = MEMORY[0x18C10DFC0](&v133, &v136);
        uint64_t v7 = __srcb;
        a5 = v132;
        __dst = v129;
        if ((v62 & 1) != 0
          || (long long v133 = v43,
              long long v136 = v61,
              char v63 = MEMORY[0x18C10DFC0](&v136, &v133),
              __dst = v129,
              uint64_t v7 = __srcb,
              a5 = v132,
              (v63 & 1) == 0)
          && v15 < v18)
        {
LABEL_17:
          Swift::Int v23 = v6 + 8;
          if (v7 < v6 || v7 >= v23 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        else
        {
LABEL_22:
          if (v7 != __dst) {
            *(void *)uint64_t v7 = *(void *)__dst;
          }
          __dst += 8;
          char v139 = __dst;
          Swift::Int v23 = v6;
        }
        v7 += 8;
        if (__dst < v14)
        {
          char v6 = v23;
          if ((unint64_t)v23 < v5) {
            continue;
          }
        }
        char v140 = v7;
        goto LABEL_111;
      }
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    goto LABEL_111;
  }
LABEL_132:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ArraySlice.reserveCapacity(_:)(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(void *)uint64_t v1 = v4, (result & 1) == 0))
  {
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6)) {
    goto LABEL_33;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void **)(result + 16);
  if (v8 + 8 * v6 + 8 * v7 == result + 8 * (void)v9 + 32) {
    goto LABEL_25;
  }
  uint64_t result = swift_release();
  while (1)
  {
    if (v7 >= v2) {
      goto LABEL_22;
    }
    uint64_t v9 = *(void **)v1;
LABEL_9:
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7) {
      break;
    }
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    if (v5 >= v7) {
      goto LABEL_17;
    }
LABEL_24:
    __break(1u);
LABEL_25:
    unint64_t v16 = *(void *)(result + 24);
    uint64_t result = swift_release();
    unint64_t v17 = (v16 >> 1) - (void)v9;
    BOOL v18 = __OFADD__(v7, v17);
    v7 += v17;
    if (v18) {
      goto LABEL_34;
    }
  }
  type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size_2(v4);
  uint64_t v13 = result - 32;
  if (result < 32) {
    uint64_t v13 = result - 25;
  }
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 3);
  if (v5 < v7) {
    goto LABEL_24;
  }
LABEL_17:
  uint64_t result = (uint64_t)memcpy(v4 + 4, (const void *)(v11 + 8 * v7), 8 * v10);
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v14 = v4[2];
  uint64_t v15 = v7 + v14;
  if (__OFADD__(v7, v14))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v15 < v7)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t result = swift_unknownObjectRelease();
  if ((v15 & 0x8000000000000000) == 0)
  {
    *(void *)(v1 + 8) = &v4[-v7 + 4];
    *(void *)(v1 + 16) = v7;
    *(void *)(v1 + 24) = (2 * v15) | 1;
LABEL_22:
    *(void *)uint64_t v1 = v4;
    return result;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3] >> 1;
  uint64_t v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(*a1 + 16);
  BOOL v30 = __OFSUB__(v11, a2);
  uint64_t v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  uint64_t v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  BOOL v30 = __OFSUB__(v15, v14);
  uint64_t v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v38 = v16;
  __dst = (char *)(v10 + 32);
  uint64_t v18 = specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(v8);
  char v37 = (char *)(v10 + 32 + 8 * a2 + 8 * a3);
  if (v18)
  {
    uint64_t v36 = a4;
    if (a2 < 0) {
      goto LABEL_46;
    }
    uint64_t v19 = v18;
    uint64_t v20 = v4[2];
    uint64_t v21 = (char *)(v4[1] + 8 * v20);
    double v22 = &v21[8 * a2];
    if (__dst != v21 || __dst >= v22) {
      memmove(__dst, v21, 8 * a2);
    }
    v36(v10 + 32 + 8 * a2, a3);
    if (v14 < 0) {
      goto LABEL_46;
    }
    Swift::Int v23 = &v22[8 * v38];
    if (v37 != v23 || v37 >= &v23[8 * v14]) {
      memmove(v37, v23, 8 * v14);
    }
    *(void *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    uint64_t result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      uint64_t v34 = *(void *)(v10 + 16);
      BOOL v30 = __OFADD__(v20, v34);
      uint64_t v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *uint64_t v4 = v10;
            v4[1] = &__dst[-8 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  char v25 = (void (*)(char *, uint64_t))a4;
  uint64_t v20 = v4[2];
  uint64_t v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  uint64_t v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 8 * v20), 8 * a2);
  v25(&__dst[8 * a2], a3);
  uint64_t v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v29 = v4[3] >> 1;
  BOOL v30 = __OFSUB__(v29, v28);
  BOOL v31 = v29 < v28;
  uint64_t v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 8 * v28), 8 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _SliceBuffer.count.setter(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = *(void *)(result + 16);
  BOOL v5 = __OFADD__(v8, v7);
  uint64_t v9 = v8 + v7;
  if (v5) {
    goto LABEL_13;
  }
  *(void *)(result + 16) = v9;
  uint64_t result = swift_release();
  uint64_t v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7) {
      goto LABEL_21;
    }
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v7 = a2;
  uint64_t v6 = result;
  if ((a6 & 1) == 0) {
    goto LABEL_34;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v13 = a4 + 8 * a5 + 8 * v8;
  if (v13 == v11 + 8 * v12 + 32)
  {
    unint64_t v15 = *(void *)(v11 + 24);
    uint64_t result = swift_release();
    uint64_t v16 = (v15 >> 1) - v12;
    uint64_t v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    uint64_t v14 = v8;
  }
  swift_unknownObjectRetain();
  uint64_t v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      uint64_t v17 = MEMORY[0x1E4FBC860];
    }
    uint64_t v18 = *(void *)(v17 + 16);
    if (v13 == v17 + 8 * v18 + 32)
    {
      unint64_t v20 = *(void *)(v17 + 24);
      uint64_t result = swift_release();
      uint64_t v21 = (v20 >> 1) - v18;
      BOOL v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  uint64_t v19 = *(void *)(v17 + 16);
  if (v13 == v17 + 8 * v19 + 32)
  {
    unint64_t v23 = *(void *)(v17 + 24);
    uint64_t result = swift_release();
    uint64_t v24 = (v23 >> 1) - v19;
    BOOL v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22) {
      goto LABEL_21;
    }
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7) {
    uint64_t v25 = v7;
  }
  else {
    uint64_t v25 = v8;
  }
  if (v25 <= v6) {
    uint64_t v26 = v6;
  }
  else {
    uint64_t v26 = v25;
  }
  if (!v26) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t v27 = (void *)swift_allocObject();
  int64_t v28 = _swift_stdlib_malloc_size_2(v27);
  uint64_t v29 = v28 - 32;
  if (v28 < 32) {
    uint64_t v29 = v28 - 25;
  }
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 3);
  return (uint64_t)v27;
}

uint64_t (*specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t specialized _SliceBuffer.requestUniqueMutableBackingBuffer(minimumCapacity:)(uint64_t a1)
{
  int64_t isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!isUniquelyReferenced_nonNull) {
    return 0;
  }
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v8 = v1[1];
  if ((v5 & 1) == 0) {
    goto LABEL_8;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  uint64_t v10 = *(void *)(v9 + 16);
  if (v8 + 8 * v6 + 8 * v7 != v9 + 8 * v10 + 32)
  {
    swift_release();
LABEL_8:
    uint64_t v11 = v7;
    goto LABEL_10;
  }
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t result = swift_release();
  uint64_t v14 = (v12 >> 1) - v10;
  BOOL v15 = __OFADD__(v7, v14);
  uint64_t v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1) {
      return 0;
    }
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E4FBC860];
    }
    uint64_t v16 = v8 + 8 * v6 - a1;
    uint64_t v17 = v16 - 32;
    uint64_t v18 = v16 - 25;
    if (v17 >= 0) {
      uint64_t v18 = v17;
    }
    int64_t isUniquelyReferenced_nonNull = v7 + (v18 >> 3);
    if (!__OFADD__(v7, v18 >> 3))
    {
      uint64_t v4 = *(void *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4) {
        return a1;
      }
LABEL_21:
      specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

BOOL specialized static JindoTripleVStack.Position.== infix(_:_:)(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  char v2 = *((unsigned char *)a2 + 16);
  char v3 = *((unsigned char *)a2 + 32);
  if ((_BYTE)a1[2])
  {
    if (!*((unsigned char *)a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (a1[1] != a2[1]) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (((_BYTE)a1[4] & 1) == 0)
  {
    if (a1[3] != a2[3]) {
      char v3 = 1;
    }
    return (v3 & 1) == 0;
  }
  return ((_BYTE)a2[4] & 1) != 0;
}

uint64_t outlined release of JindoTripleVStack.Implementation(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode()
{
  unint64_t result = lazy protocol witness table cache variable for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.HorizontalMode and conformance JindoTripleVStack.HorizontalMode);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for JindoTripleVStack(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type JindoTripleVStack and conformance JindoTripleVStack();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack and conformance JindoTripleVStack()
{
  unint64_t result = lazy protocol witness table cache variable for type JindoTripleVStack and conformance JindoTripleVStack;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack and conformance JindoTripleVStack)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack and conformance JindoTripleVStack);
  }
  return result;
}

void sub_1880642C0(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

double sub_1880642D0@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack()
{
  return &type metadata for JindoTripleVStack;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Configuration()
{
  return &type metadata for JindoTripleVStack.Configuration;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.Position(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[33]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Position(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)double result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Position()
{
  return &type metadata for JindoTripleVStack.Position;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.VerticalPlacement()
{
  return &type metadata for JindoTripleVStack.VerticalPlacement;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.HorizontalMode()
{
  return &type metadata for JindoTripleVStack.HorizontalMode;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.HorizontalSizing()
{
  return &type metadata for JindoTripleVStack.HorizontalSizing;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.ContentMargins()
{
  return &type metadata for JindoTripleVStack.ContentMargins;
}

uint64_t sub_188064484(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<PositionKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<PositionKey>> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<PositionKey>>);
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<PositionKey>>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PositionKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PositionKey>);
    lazy protocol witness table accessor for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>();
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PositionKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PositionKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

uint64_t sub_1880645A4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t), unint64_t *a3, void (*a4)(uint64_t))
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<VerticalPlacementKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

uint64_t sub_18806474C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<PriorityKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<PriorityKey>> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<PriorityKey>>);
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<PriorityKey>>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PriorityKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PriorityKey>);
    lazy protocol witness table accessor for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>();
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<PriorityKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<PriorityKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<PriorityKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>> and conformance _TraitWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1880648C0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA07_LayoutF0VyAA11PositionKey33_92DCAEF653F89C7A009F5FFAA858DAF3LLVGGGAaBHPxAaBHD1__AmA0cH0HPyHCHCTm(a1, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>, &lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>);
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<ContentMarginsKey>);
    lazy protocol witness table accessor for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>();
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<ContentMarginsKey>>);
    }
  }
}

void type metadata accessor for _LayoutTrait<PositionKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _LayoutTrait();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for _LayoutTrait<PositionKey>(255, &lazy cache variable for type metadata for _LayoutTrait<ContentMarginsKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<ContentMarginsKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for JindoTripleVStack.Position.Region(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188064AF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for JindoTripleVStack.Position.Region()
{
  return &unk_1ED423680;
}

unsigned char *storeEnumTagSinglePayload for JindoTripleVStack.Configuration.Sizing(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188064BFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Configuration.Sizing()
{
  return &type metadata for JindoTripleVStack.Configuration.Sizing;
}

void *type metadata accessor for ContentMarginsKey()
{
  return &unk_1ED4211D0;
}

void *type metadata accessor for PriorityKey()
{
  return &unk_1ED40F3A0;
}

void *type metadata accessor for VerticalPlacementKey()
{
  return &unk_1ED433A78;
}

void *type metadata accessor for PositionKey()
{
  return &unk_1ED40F380;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing()
{
  unint64_t result = lazy protocol witness table cache variable for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.Configuration.Sizing and conformance JindoTripleVStack.Configuration.Sizing);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region()
{
  unint64_t result = lazy protocol witness table cache variable for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.Position.Region and conformance JindoTripleVStack.Position.Region);
  }
  return result;
}

uint64_t specialized Sequence.first(where:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *, uint64_t, uint64_t, double, double), double a6, double a7)
{
  if (result == a2)
  {
    return 0;
  }
  else
  {
    uint64_t v8 = result;
    if (a2 >= result)
    {
      while (v8 < a2)
      {
        uint64_t v15 = v8;
        unint64_t result = a5(&v15, a3, a4, a6, a7);
        if (v7 || (result & 1) != 0) {
          return v8;
        }
        if (a2 == ++v8) {
          return 0;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  int v16 = a6;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v8 = a1;
LABEL_2:
  if (v8 <= a2) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = v8;
  while (1)
  {
    if (a2 == result) {
      return v15;
    }
    if (a2 < a1) {
      break;
    }
    if (v8 < a1) {
      goto LABEL_18;
    }
    if (v9 == result) {
      goto LABEL_19;
    }
    uint64_t v11 = result + 1;
    LayoutSubviews.subscript.getter();
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<PositionKey>);
    lazy protocol witness table accessor for type _LayoutTrait<PositionKey> and conformance _LayoutTrait<A>();
    LayoutProxy.subscript.getter();
    uint64_t result = v11;
    if (a3 == v16)
    {
      uint64_t v12 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v12 = v15;
      }
      unint64_t v14 = *(void *)(v12 + 16);
      unint64_t v13 = *(void *)(v12 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v12 = v15;
      }
      *(void *)(v12 + 16) = v14 + 1;
      uint64_t v15 = v12;
      *(void *)(v12 + 8 * v14 + 32) = v11 - 1;
      uint64_t v8 = v11;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void specialized Collection.prefix(while:)(void *__src@<X4>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, unint64_t a5@<X3>, void *a6@<X8>)
{
  int64_t v10 = a5 >> 1;
  uint64_t v11 = a4;
  if (a5 >> 1 != a4)
  {
    uint64_t v12 = a2;
    memcpy(__dst, __src, 0x162uLL);
    *(_OWORD *)&__dst[45] = *(_OWORD *)&__dst[12];
    __int16 v15 = __dst[14];
    type metadata accessor for _LayoutTrait<PositionKey>(0, &lazy cache variable for type metadata for _LayoutTrait<VerticalPlacementKey>);
    uint64_t v11 = a4;
    while (v11 < v10)
    {
      LayoutSubviews.subscript.getter();
      lazy protocol witness table accessor for type _LayoutTrait<VerticalPlacementKey> and conformance _LayoutTrait<A>();
      LayoutProxy.subscript.getter();
      if (v13 == 1) {
        goto LABEL_7;
      }
      if (v10 == ++v11)
      {
        uint64_t v11 = v10;
LABEL_7:
        a2 = v12;
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
LABEL_8:
  if (v10 < a4 || v11 < a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v10 >= v11)
  {
    *a6 = a4;
    a6[1] = v11;
    a6[2] = a2;
    a6[3] = a3;
    a6[4] = a4;
    a6[5] = a5;
    return;
  }
LABEL_14:
  __break(1u);
}

double specialized closure #1 in JindoTripleVStack.ProposedMetrics.init(stacks:notchSize:centerWidth:horizontalSizing:fullWidth:leadingCenterSpacing:trailingCenterSpacing:leadingTrailingSpacing:proposal:)(char a1, char a2, double a3, double a4, double a5, double a6)
{
  if (a1) {
    a4 = 0.0;
  }
  double v6 = a3 - a4;
  if (v6 < 0.0) {
    double v6 = 0.0;
  }
  if (a1)
  {
    if (a2 == 1) {
      return v6;
    }
    if (a2 == 2) {
      return 0.0;
    }
    goto LABEL_14;
  }
  if (a2 == 2) {
    return a6;
  }
  if (a2 != 1)
  {
LABEL_14:
    double v8 = v6 * 0.5;
    if (v8 < 0.0) {
      return 0.0;
    }
    else {
      return v8;
    }
  }
  double v7 = v6 - a5;
  if (v7 < 0.0) {
    return 0.0;
  }
  else {
    return v7;
  }
}

unint64_t specialized _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(v7 + 16);
  BOOL v9 = __OFSUB__(v8, a2);
  uint64_t v10 = v8 - a2;
  if (v9) {
    goto LABEL_18;
  }
  if (v10 < 0)
  {
LABEL_21:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t result = v7 + 32 + 8 * result + 8 * a3;
  uint64_t v11 = (const void *)(v7 + 32 + 8 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 8 * v10) {
    uint64_t result = (unint64_t)memmove((void *)result, v11, 8 * v10);
  }
  uint64_t v13 = *(void *)(v7 + 16);
  BOOL v9 = __OFADD__(v13, v6);
  uint64_t v14 = v13 + v6;
  if (v9) {
    goto LABEL_19;
  }
  *(void *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

void *specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(void *result)
{
  uint64_t v2 = v1[2];
  unint64_t v3 = v1[3];
  uint64_t v4 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2)) {
    goto LABEL_48;
  }
  uint64_t v5 = result[4];
  uint64_t v35 = result[3] >> 1;
  if (v5 == v35) {
    return result;
  }
  uint64_t v6 = result[2];
  if (v5 < v6 || v5 >= v35) {
    goto LABEL_49;
  }
  uint64_t v8 = v5 + 1;
  uint64_t v9 = *(void *)(result[1] + 8 * v5);
  uint64_t v28 = result[1];
  uint64_t v29 = result[2];
  BOOL v30 = v1;
  while (!__OFADD__(v4, 1))
  {
    uint64_t v36 = specialized _ArrayBufferProtocol._forceCreateUniqueMutableBuffer(countForNewBuffer:minNewCapacity:)(v4, v4 + 1, *v1, v1[1], v2, v3);
    uint64_t v10 = (void (*)(uint64_t, uint64_t))specialized default argument 3 of _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)();
    specialized _ArrayBufferProtocol._arrayOutOfPlaceUpdate(_:_:_:_:)(&v36, v4, 0, v10);
    swift_release();
    uint64_t result = (void *)swift_release();
    uint64_t v2 = v1[2];
    unint64_t v3 = v1[3];
    uint64_t v11 = (v3 >> 1) - v2;
    if (__OFSUB__(v3 >> 1, v2)) {
      goto LABEL_43;
    }
    uint64_t v31 = v4 + 1;
    unint64_t v32 = v3 >> 1;
    uint64_t v12 = v1[1];
    if (v3)
    {
      uint64_t v33 = v4;
      uint64_t v13 = v1[2];
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      uint64_t v14 = swift_dynamicCastClass();
      if (!v14)
      {
        swift_unknownObjectRelease();
        uint64_t v14 = MEMORY[0x1E4FBC860];
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (v12 + 8 * v13 + 8 * v11 == v14 + 8 * v15 + 32)
      {
        unint64_t v17 = *(void *)(v14 + 24);
        uint64_t result = (void *)swift_release();
        uint64_t v18 = (v17 >> 1) - v15;
        BOOL v19 = __OFADD__(v11, v18);
        int64_t v16 = v11 + v18;
        if (v19) {
          goto LABEL_47;
        }
        uint64_t v6 = v29;
      }
      else
      {
        uint64_t result = (void *)swift_release();
        int64_t v16 = v11;
      }
      uint64_t v2 = v13;
      uint64_t v4 = v33;
      if (v33 >= v16)
      {
LABEL_32:
        BOOL v20 = 0;
        goto LABEL_33;
      }
    }
    else
    {
      int64_t v16 = (v3 >> 1) - v2;
      if (v4 >= v11) {
        goto LABEL_32;
      }
    }
    *(void *)(v12 + 8 * v2 + 8 * v4) = v9;
    if (v8 != v35)
    {
      uint64_t v21 = 0;
      uint64_t v22 = ~v4 + v16;
      while (v8 >= v6 && v8 + v21 < v35)
      {
        uint64_t v9 = *(void *)(v28 + 8 * v8 + 8 * v21);
        BOOL v20 = v22 != v21;
        if (v22 == v21)
        {
          v8 += v21 + 1;
          uint64_t v4 = v16;
          goto LABEL_33;
        }
        *(void *)(v12 + 8 * v4 + 8 * v2 + 8 + 8 * v21++) = v9;
        if (!(v8 - v35 + v21))
        {
          uint64_t v9 = 0;
          uint64_t v4 = v31 + v21;
          uint64_t v8 = v35;
          goto LABEL_33;
        }
      }
      goto LABEL_41;
    }
    uint64_t v9 = 0;
    BOOL v20 = 1;
    uint64_t v4 = v31;
    uint64_t v8 = v35;
LABEL_33:
    uint64_t v23 = v4 - v11;
    if (__OFSUB__(v4, v11)) {
      goto LABEL_44;
    }
    uint64_t v1 = v30;
    if (v23)
    {
      uint64_t v34 = v4;
      uint64_t v24 = v2;
      type metadata accessor for __ContiguousArrayStorageBase();
      swift_unknownObjectRetain();
      uint64_t result = (void *)swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        uint64_t result = (void *)MEMORY[0x1E4FBC860];
      }
      uint64_t v25 = result[2];
      BOOL v19 = __OFADD__(v25, v23);
      uint64_t v26 = v25 + v23;
      if (v19) {
        goto LABEL_45;
      }
      result[2] = v26;
      uint64_t result = (void *)swift_release();
      unint64_t v27 = v32 + v23;
      if (__OFADD__(v32, v23)) {
        goto LABEL_46;
      }
      if ((v27 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
        break;
      }
      unint64_t v3 = v3 & 1 | (2 * v27);
      v30[3] = v3;
      uint64_t v6 = v29;
      uint64_t v2 = v24;
      uint64_t v4 = v34;
    }
    if (v20) {
      return result;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
  return result;
}

void *specialized ArraySlice.append<A>(contentsOf:)(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v30 = result;
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = v4[2];
  unint64_t v7 = v4[3];
  uint64_t v9 = (v7 >> 1) - v8;
  if (__OFSUB__(v7 >> 1, v8))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((v7 & 1) == 0)
  {
LABEL_8:
    uint64_t v15 = v9;
    goto LABEL_10;
  }
  uint64_t v12 = v4[1];
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v13 = swift_dynamicCastClass();
  if (!v13)
  {
    swift_unknownObjectRelease();
    uint64_t v13 = MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (v12 + 8 * v8 + 8 * v9 != v13 + 8 * v14 + 32)
  {
    swift_release();
    goto LABEL_8;
  }
  unint64_t v16 = *(void *)(v13 + 24);
  uint64_t result = (void *)swift_release();
  uint64_t v17 = (v16 >> 1) - v14;
  BOOL v18 = __OFADD__(v9, v17);
  uint64_t v15 = v9 + v17;
  if (v18)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_10:
  uint64_t result = (void *)(v9 + v6);
  if (__OFADD__(v9, v6))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v15 < (uint64_t)result)
  {
    if (v15 + 0x4000000000000000 < 0)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v19 = 2 * v15;
    if (v19 > (uint64_t)result) {
      uint64_t result = (void *)v19;
    }
  }
  uint64_t result = (void *)specialized ArraySlice.reserveCapacity(_:)((uint64_t)result);
  uint64_t v21 = v4[2];
  unint64_t v20 = v4[3];
  uint64_t v22 = (v20 >> 1) - v21;
  if (__OFSUB__(v20 >> 1, v21)) {
    goto LABEL_37;
  }
  uint64_t v23 = (void *)(v4[1] + 8 * v21 + 8 * v22);
  if ((v20 & 1) == 0)
  {
LABEL_21:
    uint64_t v26 = v22;
    goto LABEL_23;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain();
  uint64_t v24 = swift_dynamicCastClass();
  if (!v24)
  {
    swift_unknownObjectRelease();
    uint64_t v24 = MEMORY[0x1E4FBC860];
  }
  uint64_t v25 = *(void *)(v24 + 16);
  if (v23 != (void *)(v24 + 8 * v25 + 32))
  {
    uint64_t result = (void *)swift_release();
    goto LABEL_21;
  }
  unint64_t v27 = *(void *)(v24 + 24);
  uint64_t result = (void *)swift_release();
  uint64_t v28 = (v27 >> 1) - v25;
  BOOL v18 = __OFADD__(v22, v28);
  uint64_t v26 = v22 + v28;
  if (v18)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
LABEL_23:
  uint64_t v29 = v26 - v22;
  if (__OFSUB__(v26, v22))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (v5 == a3)
  {
    if (v6 <= 0)
    {
      uint64_t v6 = 0;
      unint64_t v5 = a3;
      goto LABEL_31;
    }
    goto LABEL_39;
  }
  if (v29 < v6)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t result = memcpy(v23, (const void *)(a2 + 8 * a3), 8 * v6);
  if (v6 > 0)
  {
    uint64_t result = (void *)(v22 + v6);
    if (__OFADD__(v22, v6))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    uint64_t result = (void *)specialized _SliceBuffer.count.setter((uint64_t)result);
  }
LABEL_31:
  if (v6 == v29)
  {
    v32[0] = v30;
    v32[1] = a2;
    v32[2] = a3;
    v32[3] = a4;
    v32[4] = v5;
    return specialized _ArrayBufferProtocol._arrayAppendSequence<A>(_:)(v32);
  }
  return result;
}

uint64_t specialized JindoTripleVStack.Implementation.resizeChildrenAdjacentToNotch(in:metrics:)(uint64_t a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  uint64_t v4 = __dst[20];
  unint64_t v5 = __dst[21];
  unint64_t v6 = __dst[29];
  uint64_t v7 = __dst[36];
  uint64_t v8 = (char *)__dst[45];
  unint64_t v9 = __dst[37];
  uint64_t v23 = v1;
  memcpy(v28, v1, sizeof(v28));
  uint64_t v10 = v28;
  JindoTripleVStack.Implementation.bottomOf(previousChild:in:includeSpacing:)(__dst[29], 1, 0);
  double v12 = *(double *)(a1 + 32);
  uint64_t v31 = v4;
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (*(void *)(v4 + 16) < v5)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  double v13 = v11;
  outlined retain of [Text.Modifier]((uint64_t)&v31);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  unint64_t v14 = (2 * v5) | 1;
  unint64_t v5 = 0;
  specialized Collection.prefix(while:)(__dst, v4, v4 + 32, 0, v14, v29);
  *(_OWORD *)uint64_t v28 = v29[0];
  *(_OWORD *)&v28[16] = v29[1];
  *(_OWORD *)&v28[32] = v29[2];
  type metadata accessor for Slice<LazySequence<ArraySlice<Int>>>();
  unint64_t v6 = v15;
  Slice.indices.getter();
  outlined release of Slice<LazySequence<ArraySlice<Int>>>((uint64_t)v29);
  LOBYTE(v10) = v24;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  unint64_t v16 = specialized Sequence.first(where:)(v24, v25, (uint64_t)__dst, 0, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #2 in closure #1 in JindoTripleVStack.Implementation.indexToResizeInNotch(_:availableWidth:centerHeight:), v12, v13);
  char v18 = v17;
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  double v2 = *(double *)(a1 + 40);
  v32[0] = v7;
  if ((v9 & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (*(void *)(v7 + 16) < v9)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  a1 = v7 + 32;
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  outlined retain of [Text.Modifier]((uint64_t)v32);
  specialized Collection.prefix(while:)(__dst, v7, v7 + 32, 0, (2 * v9) | 1, v28);
  Slice.indices.getter();
  outlined release of Slice<LazySequence<ArraySlice<Int>>>((uint64_t)v28);
  outlined retain of JindoTripleVStack.Implementation((uint64_t)__dst);
  unint64_t v6 = specialized Sequence.first(where:)(v26, v27, (uint64_t)__dst, 2, (uint64_t (*)(uint64_t *, uint64_t, uint64_t, double, double))closure #2 in closure #1 in JindoTripleVStack.Implementation.indexToResizeInNotch(_:availableWidth:centerHeight:), v2, v13);
  LOBYTE(v10) = v19;
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  outlined release of JindoTripleVStack.Implementation((uint64_t)__dst);
  if (v18)
  {
    if (v10) {
      return 0;
    }
LABEL_14:
    if ((v6 & 0x8000000000000000) == 0)
    {
      if (v6 < *(void *)(v7 + 16))
      {
        unint64_t v6 = *(void *)(a1 + 8 * v6);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          if ((v6 & 0x8000000000000000) == 0) {
            goto LABEL_18;
          }
          goto LABEL_33;
        }
LABEL_32:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
        uint64_t v8 = (char *)result;
        if ((v6 & 0x8000000000000000) == 0)
        {
LABEL_18:
          if (v6 < *((void *)v8 + 2))
          {
            uint64_t v22 = &v8[256 * v6];
            *((double *)v22 + 29) = v2;
            *((_WORD *)v22 + 120) = 256;
            *((void *)v22 + 5) = 0;
            uint64_t result = 1;
            v22[48] = 1;
            *((void *)v22 + 7) = 0;
            v22[64] = 1;
            v22[280] = v22[280] & 0xF5 | 8;
            v23[45] = v8;
            return result;
          }
          goto LABEL_34;
        }
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return result;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((v16 & 0x8000000000000000) != 0) {
    goto LABEL_25;
  }
  if (v16 >= *(void *)(v4 + 16))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v5 = *(void *)(v4 + 32 + 8 * v16);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v5 & 0x8000000000000000) == 0) {
      goto LABEL_10;
    }
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_27:
  uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  if (v5 >= *((void *)v8 + 2))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v20 = &v8[256 * v5];
  *((double *)v20 + 29) = v12;
  *((_WORD *)v20 + 120) = 256;
  *((void *)v20 + 5) = 0;
  uint64_t result = 1;
  v20[48] = 1;
  *((void *)v20 + 7) = 0;
  v20[64] = 1;
  v20[280] = v20[280] & 0xF5 | 2;
  v23[45] = v8;
  if ((v10 & 1) == 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t specialized JindoTripleVStack.Implementation.place(indices:of:minorAxisAnchor:bounds:)(double a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10 = a9 >> 1;
  if (a9 >> 1 != a8)
  {
    if ((uint64_t)(a9 >> 1) <= a8)
    {
LABEL_12:
      __break(1u);
      return result;
    }
    int v54 = *(_DWORD *)(v9 + 96);
    uint64_t v53 = *(void *)(v9 + 104);
    char v52 = *(unsigned char *)(v9 + 112);
    char v16 = *(unsigned char *)(v9 + 113);
    uint64_t v56 = *(void *)(v9 + 360);
    uint64_t result = swift_unknownObjectRetain();
    unint64_t v18 = *(void *)(a7 + 8 * a8);
    if ((v18 & 0x8000000000000000) == 0)
    {
      unint64_t v19 = ~a8 + v10;
      unint64_t v20 = (unint64_t *)(a7 + 8 * a8 + 8);
      while (v18 < *(void *)(v56 + 16))
      {
        uint64_t v21 = v56 + 32 + (v18 << 8);
        EdgeInsets.in(_:)();
        double v23 = v22;
        long long v24 = *(_OWORD *)v21;
        long long v25 = *(_OWORD *)(v21 + 16);
        long long v26 = *(_OWORD *)(v21 + 48);
        v69[2] = *(_OWORD *)(v21 + 32);
        v69[3] = v26;
        v69[0] = v24;
        v69[1] = v25;
        long long v27 = *(_OWORD *)(v21 + 64);
        long long v28 = *(_OWORD *)(v21 + 80);
        long long v29 = *(_OWORD *)(v21 + 112);
        v69[6] = *(_OWORD *)(v21 + 96);
        v69[7] = v29;
        v69[4] = v27;
        v69[5] = v28;
        long long v30 = *(_OWORD *)(v21 + 128);
        long long v31 = *(_OWORD *)(v21 + 144);
        long long v32 = *(_OWORD *)(v21 + 176);
        *(_OWORD *)&v70[32] = *(_OWORD *)(v21 + 160);
        *(_OWORD *)&v70[48] = v32;
        *(_OWORD *)unint64_t v70 = v30;
        *(_OWORD *)&v70[16] = v31;
        long long v33 = *(_OWORD *)(v21 + 192);
        long long v34 = *(_OWORD *)(v21 + 208);
        long long v35 = *(_OWORD *)(v21 + 224);
        *(_OWORD *)((char *)v72 + 9) = *(_OWORD *)(v21 + 233);
        long long v71 = v34;
        v72[0] = v35;
        *(_OWORD *)&v70[64] = v33;
        long long v65 = *(_OWORD *)&v70[8];
        long long v66 = *(_OWORD *)&v70[24];
        long long v67 = *(_OWORD *)&v70[40];
        long long v68 = *(_OWORD *)&v70[56];
        outlined retain of JindoTripleVStack.Child((uint64_t)v69);
        EdgeInsets.horizontal.getter();
        double v37 = v36;
        uint64_t v38 = (void (*)(long long *, void))ViewSize.width.modify();
        *uint64_t v39 = *v39 - v37;
        v38(&v57, 0);
        EdgeInsets.vertical.getter();
        double v41 = v40;
        unint64_t v42 = (void (*)(long long *, void))ViewSize.height.modify();
        *long long v43 = *v43 - v41;
        v42(&v57, 0);
        v73.origin.x = a2;
        v73.origin.y = a3;
        v73.size.width = a4;
        v73.size.height = a5;
        double v44 = v23 + CGRectGetMinY(v73);
        char v45 = (void (*)(long long *, void))ViewOrigin.y.modify();
        *char v46 = v44 + *v46;
        v45(&v57, 0);
        v74.origin.x = a2;
        v74.origin.y = a3;
        v74.size.width = a4;
        v74.size.height = a5;
        CGRectGetWidth(v74);
        uint64_t v47 = *(void *)(v21 + 160);
        *(void *)&long long v57 = *(void *)(v21 + 152);
        *((void *)&v57 + 1) = v47;
        long long v58 = *(_OWORD *)(v21 + 168);
        long long v59 = *(_OWORD *)(v21 + 184);
        ViewDimensions.width.getter();
        ViewOrigin.x.setter();
        LOBYTE(v57) = v16;
        ViewGeometry.finalizeLayoutDirection(_:parentSize:)();
        v75.origin.x = a2;
        v75.origin.y = a3;
        v75.size.width = a4;
        v75.size.height = a5;
        double MinX = CGRectGetMinX(v75);
        char v49 = (void (*)(long long *, void))ViewOrigin.x.modify();
        *uint64_t v50 = MinX + *v50;
        v49(&v57, 0);
        LODWORD(v57) = v54;
        *((void *)&v57 + 1) = v53;
        LOBYTE(v58) = v52;
        BYTE1(v58) = v16;
        LayoutSubviews.subscript.getter();
        char v62 = v64;
        long long v57 = v65;
        long long v58 = v66;
        long long v59 = v67;
        long long v60 = v68;
        long long v61 = v63;
        LayoutSubview.place(in:layoutDirection:)();
        uint64_t result = swift_release();
        if (!v19) {
          return swift_unknownObjectRelease();
        }
        unint64_t v51 = *v20++;
        unint64_t v18 = v51;
        --v19;
        if ((v51 & 0x8000000000000000) != 0) {
          goto LABEL_8;
        }
      }
      __break(1u);
      goto LABEL_12;
    }
LABEL_8:
    __break(1u);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t outlined retain of JindoTripleVStack.Implementation(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of JindoTripleVStack.Child(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Int?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Slice<LazySequence<ArraySlice<Int>>>()
{
  if (!lazy cache variable for type metadata for Slice<LazySequence<ArraySlice<Int>>>)
  {
    type metadata accessor for LazySequence<ArraySlice<Int>>();
    lazy protocol witness table accessor for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>();
    unint64_t v0 = type metadata accessor for Slice();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<LazySequence<ArraySlice<Int>>>);
    }
  }
}

void type metadata accessor for LazySequence<ArraySlice<Int>>()
{
  if (!lazy cache variable for type metadata for LazySequence<ArraySlice<Int>>)
  {
    type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(255, &lazy cache variable for type metadata for ArraySlice<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB908]);
    lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>();
    unint64_t v0 = type metadata accessor for LazySequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazySequence<ArraySlice<Int>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>)
  {
    type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(255, &lazy cache variable for type metadata for ArraySlice<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB908]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>)
  {
    type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(255, &lazy cache variable for type metadata for ArraySlice<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB908]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Int> and conformance ArraySlice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>;
  if (!lazy protocol witness table cache variable for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>)
  {
    type metadata accessor for LazySequence<ArraySlice<Int>>();
    lazy protocol witness table accessor for type ArraySlice<Int> and conformance ArraySlice<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySequence<ArraySlice<Int>> and conformance <> LazySequence<A>);
  }
  return result;
}

uint64_t outlined release of Slice<LazySequence<ArraySlice<Int>>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of JindoTripleVStack.StackHeader(uint64_t a1)
{
  return a1;
}

uint64_t sub_188066354()
{
  return objectdestroyTm_30();
}

uint64_t sub_18806635C()
{
  return objectdestroyTm_30();
}

uint64_t outlined retain of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of JindoTripleVStack.StackIndexedStorage<JindoTripleVStack.StackHeader>(uint64_t a1)
{
  return a1;
}

uint64_t destroy for JindoTripleVStack.Child()
{
  return swift_release();
}

uint64_t initializeWithCopy for JindoTripleVStack.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v3 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v3;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  uint64_t v10 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v11;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_retain();
  swift_release();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v12 = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 200) = v12;
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.Child(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_release();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.Child(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 249)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 152);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 248) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 249) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 152) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 249) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.Child()
{
  return &type metadata for JindoTripleVStack.Child;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.MajorAxisGroupState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[80]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.MajorAxisGroupState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.MajorAxisGroupState()
{
  return &type metadata for JindoTripleVStack.MajorAxisGroupState;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.MajorAxisGroup.Group()
{
  return &type metadata for JindoTripleVStack.MajorAxisGroup.Group;
}

uint64_t destroy for JindoTripleVStack.Header()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JindoTripleVStack.Header(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  char v5 = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v6 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v6;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  uint64_t v7 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v7;
  uint64_t v8 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v8;
  uint64_t v9 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v9;
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v10 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v10;
  uint64_t v11 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v11;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  uint64_t v12 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v12;
  uint64_t v13 = *(void *)(a2 + 344);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = v13;
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(unsigned char *)(a1 + 353) = *(unsigned char *)(a2 + 353);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.Header(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v5;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  LOBYTE(v5) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  uint64_t v6 = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(void *)(a1 + 128) = v6;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v7 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v7;
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  uint64_t v8 = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 256) = v8;
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  uint64_t v9 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v9;
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(unsigned char *)(a1 + 353) = *(unsigned char *)(a2 + 353);
  return a1;
}

void *__swift_memcpy354_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x162uLL);
}

uint64_t assignWithTake for JindoTripleVStack.Header(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v4;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  char v5 = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(unsigned char *)(a1 + 353) = *(unsigned char *)(a2 + 353);
  return a1;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.Header(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 354)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 160);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JindoTripleVStack.Header(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 344) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_WORD *)(result + 352) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 354) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 160) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 354) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for JindoTripleVStack.Header()
{
  return &unk_1ED4235E8;
}

uint64_t type metadata completion function for JindoTripleVStack.StackIndexedStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for JindoTripleVStack.StackIndexedStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    unint64_t v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    unint64_t v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)((v10 + v16) & v9), v5);
  }
  return v4;
}

uint64_t destroy for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v9(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v9(v7, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v9)((v6 + v7) & ~v5, v3);
}

uint64_t initializeWithCopy for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t initializeWithTake for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.StackIndexedStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, (v9 + v10) & ~v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for JindoTripleVStack.StackIndexedStorage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v8 = ((v6
       + *(unsigned __int8 *)(v4 + 80)
       + ((v6 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
     + v6;
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for JindoTripleVStack.StackIndexedStorage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64)
       + *(unsigned __int8 *)(v6 + 80)
       + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1880678D4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for JindoTripleVStack.StackIndexedStorage()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for JindoTripleVStack.MajorAxisRangeCache()
{
  return &unk_1ED4233B8;
}

unsigned char *storeEnumTagSinglePayload for JindoTripleVStack.HorizontalMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880679F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for JindoTripleVStack.Stack()
{
  return &unk_1ED423530;
}

uint64_t destroy for JindoTripleVStack.MajorAxisGroup()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JindoTripleVStack.MajorAxisGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JindoTripleVStack.MajorAxisGroup(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.MajorAxisGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for JindoTripleVStack.MajorAxisGroup()
{
  return &type metadata for JindoTripleVStack.MajorAxisGroup;
}

unint64_t lazy protocol witness table accessor for type [JindoTripleVStack.Stack] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [JindoTripleVStack.Stack] and conformance [A];
  if (!lazy protocol witness table cache variable for type [JindoTripleVStack.Stack] and conformance [A])
  {
    type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(255, &lazy cache variable for type metadata for [JindoTripleVStack.Stack], (uint64_t)&unk_1ED423530, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [JindoTripleVStack.Stack] and conformance [A]);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack()
{
  unint64_t result = lazy protocol witness table cache variable for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack;
  if (!lazy protocol witness table cache variable for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type JindoTripleVStack.Stack and conformance JindoTripleVStack.Stack);
  }
  return result;
}

uint64_t destroy for JindoTripleVStack.StackHeader()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for JindoTripleVStack.StackHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for JindoTripleVStack.StackHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for JindoTripleVStack.StackHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

void *type metadata accessor for JindoTripleVStack.StackHeader()
{
  return &unk_1ED422E50;
}

void *type metadata accessor for JindoTripleVStack.FixedProposal()
{
  return &unk_1ED423008;
}

void CGDrawingView.options.didset(unsigned __int8 *a1)
{
  unint64_t v2 = &v1[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options];
  unsigned int v3 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options + 12];
  if (*a1 != v1[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options])
  {
LABEL_20:
    objc_msgSend(v1, sel_setOpaque_, (v3 >> 1) & 1);
    id v11 = objc_msgSend(v1, sel_layer);
    id v12 = (id)PlatformDrawableOptions.caLayerContentsFormat.getter();
    objc_msgSend(v11, sel_setContentsFormat_, v12);

    return;
  }
  int v4 = *((_DWORD *)a1 + 3);
  int v5 = a1[16];
  int v6 = v2[16];
  if (a1[8] == 1)
  {
    if (v4 == v3) {
      int v7 = v2[8];
    }
    else {
      int v7 = 0;
    }
    if (v7 != 1 || v5 != v6) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v2[8]) {
      goto LABEL_20;
    }
    BOOL v9 = *((_DWORD *)a1 + 1) == *((_DWORD *)v2 + 1) && v4 == v3;
    if (!v9 || v5 != v6) {
      goto LABEL_20;
    }
  }
}

void (*CGDrawingView.options.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options;
  *unsigned int v3 = v1;
  v3[1] = v4;
  int v5 = (char *)(v1 + v4);
  char v6 = *v5;
  int v7 = *((_DWORD *)v5 + 1);
  char v8 = v5[8];
  int v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((unsigned char *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((unsigned char *)v3 + 32) = (_BYTE)v5;
  *((unsigned char *)v3 + 16) = v6;
  return CGDrawingView.options.modify;
}

void CGDrawingView.options.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CGDrawingView.drawForTesting(in:)()
{
  uint64_t v1 = objc_msgSend(v0, sel_layer);
  unint64_t v2 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content];
  unsigned int v3 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 8];
  uint64_t v4 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 16];
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 24];
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 32];
  char v7 = v1[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 40];
  outlined copy of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);

  LOBYTE(v9) = v7;
  objc_msgSend(v0, sel_bounds, v2, v3, v4, v5, v6, v9);
  PlatformDrawableContent.draw(in:size:state:)();
  outlined consume of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);

  return swift_release();
}

uint64_t protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(char *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(a1, a2, a3, &OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options, (uint64_t (*)(unsigned char *))CGDrawingView.options.didset);
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance CGDrawingView(void *a1))()
{
  unint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = CGDrawingView.options.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void RBDrawingView.options.didset(unsigned __int8 *a1)
{
  unint64_t v2 = &v1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options];
  unsigned int v3 = *(_DWORD *)&v1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12];
  if (*a1 != v1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options])
  {
LABEL_20:
    objc_msgSend(v1, sel_setOpaque_, (v3 >> 1) & 1);
    id v11 = objc_msgSend(v1, sel_layer);
    PlatformDrawableOptions.update(rbLayer:)();

    v1[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = (v2[12] & 0x10) != 0;
    return;
  }
  int v4 = *((_DWORD *)a1 + 3);
  int v5 = a1[16];
  int v6 = v2[16];
  if (a1[8] == 1)
  {
    if (v4 == v3) {
      int v7 = v2[8];
    }
    else {
      int v7 = 0;
    }
    if (v7 != 1 || v5 != v6) {
      goto LABEL_20;
    }
  }
  else
  {
    if (v2[8]) {
      goto LABEL_20;
    }
    BOOL v9 = *((_DWORD *)a1 + 1) == *((_DWORD *)v2 + 1) && v4 == v3;
    if (!v9 || v5 != v6) {
      goto LABEL_20;
    }
  }
}

void (*RBDrawingView.options.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options;
  *unsigned int v3 = v1;
  v3[1] = v4;
  int v5 = (char *)(v1 + v4);
  char v6 = *v5;
  int v7 = *((_DWORD *)v5 + 1);
  char v8 = v5[8];
  int v9 = *((_DWORD *)v5 + 3);
  LOBYTE(v5) = v5[16];
  *((_DWORD *)v3 + 5) = v7;
  *((unsigned char *)v3 + 24) = v8;
  *((_DWORD *)v3 + 7) = v9;
  *((unsigned char *)v3 + 32) = (_BYTE)v5;
  *((unsigned char *)v3 + 16) = v6;
  return RBDrawingView.options.modify;
}

void RBDrawingView.options.modify(uint64_t a1, uint64_t a2)
{
}

void CGDrawingView.options.modify(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  unsigned int v3 = *(void **)a1;
  char v4 = *(unsigned char *)(*(void *)a1 + 16);
  int v5 = (char *)(**(void **)a1 + *(void *)(*(void *)a1 + 8));
  int v6 = *(_DWORD *)(*(void *)a1 + 20);
  char v7 = *(unsigned char *)(*(void *)a1 + 24);
  int v8 = *(_DWORD *)(*(void *)a1 + 28);
  char v9 = *(unsigned char *)(*(void *)a1 + 32);
  char v10 = *v5;
  int v11 = *((_DWORD *)v5 + 1);
  char v12 = v5[8];
  int v13 = *((_DWORD *)v5 + 3);
  char v14 = v5[16];
  *int v5 = v4;
  *((_DWORD *)v5 + 1) = v6;
  v5[8] = v7;
  *((_DWORD *)v5 + 3) = v8;
  v5[16] = v9;
  v15[0] = v10;
  int v16 = v11;
  char v17 = v12;
  int v18 = v13;
  char v19 = v14;
  a3(v15);

  free(v3);
}

uint64_t (*RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)(long long *a1, char a2, void *a3, double a4, double a5, double a6, double a7))()
{
  long long v15 = a1[1];
  long long v25 = *a1;
  v26[0] = v15;
  *(_OWORD *)((char *)v26 + 9) = *(long long *)((char *)a1 + 25);
  self;
  int v16 = (void *)swift_dynamicCastObjCClassUnconditional();
  if (a2)
  {
    id v17 = a3;
LABEL_5:
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v7;
    long long v22 = a1[1];
    *(_OWORD *)(v21 + 24) = *a1;
    *(_OWORD *)(v21 + 40) = v22;
    *(_OWORD *)(v21 + 49) = *(long long *)((char *)a1 + 25);
    *(void *)(v21 + 72) = v16;
    *(double *)(v21 + 80) = a4;
    *(double *)(v21 + 88) = a5;
    *(double *)(v21 + 96) = a6;
    *(double *)(v21 + 104) = a7;
    double v23 = v7;
    outlined retain of PlatformDrawableContent((uint64_t)&v25);
    return partial apply for closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:);
  }
  int v18 = *(_DWORD *)&v7[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12];
  id v19 = a3;
  if ((v18 & 4) == 0) {
    goto LABEL_5;
  }
  unint64_t v20 = v19;
  if (objc_msgSend(v16, sel_isDrawableAvailable, v25, v26[0], *(void *)&v26[1], *((void *)&v26[1] + 1)))goto LABEL_5; {

  }
  return 0;
}

uint64_t closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)(char *a1, uint64_t a2, void *a3, double a4, double a5, double a6, double a7)
{
  aBlock[6] = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state];
  outlined retain of PlatformDrawableContent(a2);
  swift_retain();
  type metadata accessor for AtomicBox<RBDrawingView.State>();
  char v14 = (void (*)(void *, void))AtomicBox.wrappedValue.modify();
  outlined assign with take of PlatformDrawableContent(a2, v15);
  v14(aBlock, 0);
  swift_release();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(double *)(v16 + 24) = a4;
  *(double *)(v16 + 32) = a5;
  *(double *)(v16 + 40) = a6;
  *(double *)(v16 + 48) = a7;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:);
  *(void *)(v17 + 24) = v16;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIMutableTraits) -> ();
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
  aBlock[3] = &block_descriptor_72;
  int v18 = _Block_copy(aBlock);
  id v19 = a1;
  swift_retain();
  swift_release();
  objc_msgSend(a3, sel_displayWithBounds_callback_, v18, a4, a5, a6, a7);
  _Block_release(v18);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (a3) {
    __break(1u);
  }
  return result;
}

uint64_t RBDrawingView.drawForTesting(in:)()
{
  type metadata accessor for AtomicBox<RBDrawingView.State>();
  AtomicBox.wrappedValue.getter();
  outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  swift_release();
  LOBYTE(v2) = v8;
  objc_msgSend(v0, sel_bounds, v3, v4, v5, v6, v7, v2);
  PlatformDrawableContent.draw(in:size:state:)();
  outlined consume of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
  return swift_release();
}

void @objc CGDrawingView.init(frame:)()
{
}

uint64_t RBDrawingView.__ivar_destroyer()
{
  return swift_release();
}

uint64_t assignWithCopy for RBDrawingView.State(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  char v10 = *(void **)a1;
  int v11 = *(void **)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  char v15 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v9;
  outlined consume of PlatformDrawableContent.Storage(v10, v11, v12, v13, v14, v15);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for RBDrawingView.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v4;
  char v12 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  outlined consume of PlatformDrawableContent.Storage(v6, v7, v8, v9, v10, v12);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RBDrawingView.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RBDrawingView.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

void *type metadata accessor for RBDrawingView.State()
{
  return &unk_1ED474A08;
}

uint64_t protocol witness for PlatformDrawable.options.setter in conformance RBDrawingView(char *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(a1, a2, a3, &OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options, (uint64_t (*)(unsigned char *))RBDrawingView.options.didset);
}

uint64_t protocol witness for PlatformDrawable.options.setter in conformance CGDrawingView(char *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(unsigned char *))
{
  char v6 = *a1;
  int v7 = *((_DWORD *)a1 + 1);
  char v8 = a1[8];
  int v9 = *((_DWORD *)a1 + 3);
  char v10 = a1[16];
  long long v11 = (char *)(v5 + *a4);
  char v12 = *v11;
  int v13 = *((_DWORD *)v11 + 1);
  char v14 = v11[8];
  int v15 = *((_DWORD *)v11 + 3);
  char v16 = v11[16];
  *long long v11 = v6;
  *((_DWORD *)v11 + 1) = v7;
  v11[8] = v8;
  *((_DWORD *)v11 + 3) = v9;
  v11[16] = v10;
  v18[0] = v12;
  int v19 = v13;
  char v20 = v14;
  int v21 = v15;
  char v22 = v16;
  return a5(v18);
}

uint64_t (*protocol witness for PlatformDrawable.options.modify in conformance RBDrawingView(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = RBDrawingView.options.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t sub_188068D90()
{
  outlined consume of PlatformDrawableContent.Storage(*(void **)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)()
{
  return closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)(*(char **)(v0 + 16), v0 + 24, *(void **)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96), *(double *)(v0 + 104));
}

uint64_t outlined retain of PlatformDrawableContent(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of PlatformDrawableContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_188068E90()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in RBDrawingView.makeAsyncUpdate(content:required:layer:bounds:)()
{
  return specialized RBDrawingView.draw(in:size:)();
}

uint64_t sub_188068EEC()
{
  return swift_deallocObject();
}

void specialized RBDrawingView.init(coder:)()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state;
  PlatformDrawableContent.init()();
  AtomicBox.init(wrappedValue:)();
  *(void *)&v0[v1] = v2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void View.onReselect(isEnabled:perform:)()
{
}

uint64_t sub_188068FB4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<ReselectionTraitState.Key>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<ReselectionTraitState.Key>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ReselectionTraitState.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<ReselectionTraitState.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ReselectionTraitState.Key> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t assignWithCopy for ReselectionTraitState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *unint64_t v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ReselectionTraitState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v7;
      return a1;
    }
LABEL_7:
    *unint64_t v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ReselectionTraitState()
{
  return &type metadata for ReselectionTraitState;
}

ValueMetadata *type metadata accessor for ReselectionTraitState.Key()
{
  return &type metadata for ReselectionTraitState.Key;
}

void TuplePrintContent.init(_:)()
{
}

void TuplePrintContent.body.getter()
{
}

void static TuplePrintContent._makePrintContent(content:inputs:)()
{
}

uint64_t getEnumTagSinglePayload for TuplePrintContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TuplePrintContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1880695B4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for TuplePrintContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(&v5);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t result = swift_bridgeObjectRelease();
  int v4 = v6;
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t static _PreferenceWritingModifier._makeWidgetConfiguration(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  int v7 = *((_DWORD *)a1 + 14);
  uint64_t v22 = *a1;
  int v23 = v3;
  long long v25 = *(_OWORD *)(a1 + 3);
  uint64_t v24 = v4;
  uint64_t v26 = v6;
  uint64_t v27 = v5;
  int v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v13 = v22;
  int v14 = v23;
  uint64_t v15 = v4;
  long long v16 = v25;
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  int v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v13 = v5;
  int v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v10 = v21;
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeWidgetConfiguration(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v16 = a1;
  type metadata accessor for _PreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  int v5 = _GraphValue.value.getter();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v8)
  {
    int v16 = v5;
    uint64_t v17 = KeyPath;
    MEMORY[0x1F4188790](v7);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v13[2] = swift_getFunctionTypeMetadata();
    uint64_t v14 = type metadata accessor for Focus();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
    swift_release();
    swift_release();
    return AssociatedTypeWitness;
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_release();
  }
  return OffsetAttribute2;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  return static _PreferenceTransformModifier._makeWidgetConfiguration(modifier:inputs:body:)(a1, a2);
}

uint64_t WidgetConfiguration.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v22 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v12 = (char *)&v21 - v11;
  uint64_t v13 = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a2, AssociatedTypeWitness, v15);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4, a6, v18, v19);
  _PreferenceWritingModifier.init(key:value:)();
  WidgetConfiguration.modifier<A>(_:)((uint64_t)v17, v22, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t WidgetConfiguration.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a5, a7, a3, a4);
  swift_retain();
  v11[0] = _PreferenceTransformModifier.init(key:transform:)();
  v11[1] = v8;
  uint64_t v9 = type metadata accessor for _PreferenceTransformModifier();
  WidgetConfiguration.modifier<A>(_:)((uint64_t)v11, a4, v9);
  return swift_release();
}

uint64_t sub_188069D78(uint64_t a1)
{
  return get_witness_table_7SwiftUI19WidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_E15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdJ0HpyHCHCTm(a1, MEMORY[0x1E4F40F90]);
}

uint64_t sub_188069D98(uint64_t a1)
{
  return get_witness_table_7SwiftUI19WidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_E15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdJ0HpyHCHCTm(a1, MEMORY[0x1E4F41108]);
}

uint64_t get_witness_table_7SwiftUI19WidgetConfigurationRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_E15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdJ0HpyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t sub_188069E3C()
{
  return 16;
}

__n128 sub_188069E48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for UniversalList()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UniversalList(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = (((1 << v9) + a2 - v7) >> v9) + 1;
  if (HIWORD(v12))
  {
    int v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      unsigned int v18 = v17 + 1;
    }
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
  if (v12 > 0xFF)
  {
    int v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v12 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = ((v6 + 16) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + v7;
}

void storeEnumTagSinglePayload for UniversalList(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v8 - 1 >= a3)
  {
    int v12 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v12 = 1;
  if (v11 > 3) {
    goto LABEL_13;
  }
  unsigned int v13 = (((1 << (8 * v11)) + a3 - v8) >> (8 * v11)) + 1;
  if (HIWORD(v13))
  {
    int v12 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 >= 0x100) {
      int v12 = 2;
    }
    else {
      int v12 = v13 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v12)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                uint64_t v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v23 = a2 + 1;
                  v22(((unint64_t)v20 + v10 + 8) & ~v10, v23);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v21 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v21 = a2;
                  }
                  *uint64_t v20 = v21;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v17 = ~(-1 << (8 * v11));
              }
              else {
                int v17 = -1;
              }
              if (v11)
              {
                int v18 = v17 & (a2 - v8);
                if (v11 <= 3) {
                  int v19 = v11;
                }
                else {
                  int v19 = 4;
                }
                bzero(a1, v11);
                switch(v19)
                {
                  case 2:
                    *(_WORD *)a1 = v18;
                    break;
                  case 3:
                    *(_WORD *)a1 = v18;
                    a1[2] = BYTE2(v18);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v18;
                    break;
                  default:
                    *a1 = v18;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v14 = a2 - v8;
  if (v11 < 4)
  {
    int v15 = (v14 >> (8 * v11)) + 1;
    if (v11)
    {
      int v16 = v14 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v12)
  {
    case 1:
      a1[v11] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v15;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x18806A3CCLL);
    case 4:
      *(_DWORD *)&a1[v11] = v15;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for UniversalList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for UniversalList<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in UniversalList<A>()
{
  return swift_getOpaqueTypeConformance2();
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI21_ScrollableLayoutItemVs5NeverOTg5(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = result;
  uint64_t v5 = a4 - a3;
  if (__OFSUB__(a4, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (!v5) {
    return (char *)v7;
  }
  uint64_t v24 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = v24;
    if (a4 <= a3) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a4;
    }
    uint64_t v11 = a3;
    while (a4 != v11)
    {
      uint64_t v21 = v11;
      uint64_t result = (char *)((char *(*)(_OWORD *__return_ptr, uint64_t *))v20)(v22, &v21);
      if (v6)
      {
        swift_release();
        return (char *)v7;
      }
      uint64_t v6 = 0;
      uint64_t v24 = v7;
      unint64_t v13 = *(void *)(v7 + 16);
      unint64_t v12 = *(void *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
        uint64_t v7 = v24;
      }
      *(void *)(v7 + 16) = v13 + 1;
      uint64_t v14 = v7 + 104 * v13;
      long long v15 = v22[0];
      long long v16 = v22[2];
      *(_OWORD *)(v14 + 48) = v22[1];
      *(_OWORD *)(v14 + 64) = v16;
      *(_OWORD *)(v14 + 32) = v15;
      long long v17 = v22[3];
      long long v18 = v22[4];
      long long v19 = v22[5];
      *(void *)(v14 + 128) = v23;
      *(_OWORD *)(v14 + 96) = v18;
      *(_OWORD *)(v14 + 112) = v19;
      *(_OWORD *)(v14 + 80) = v17;
      if (a4 < a3) {
        goto LABEL_19;
      }
      if (v10 == v11) {
        goto LABEL_20;
      }
      if (a4 == ++v11) {
        return (char *)v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t UniversalList.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t static UniversalList._viewListOptions.getter()
{
  uint64_t v0 = unk_1ED416168;
  if ((unk_1ED416168 & ~qword_1ED416160) == 0) {
    uint64_t v0 = 0;
  }
  return v0 | qword_1ED416160;
}

uint64_t UniversalList.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void v16[2] = a2;
  type metadata accessor for Binding();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v16 - v5;
  uint64_t v7 = type metadata accessor for UniversalList.BodyContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)v16 - v12;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v17);
  (*(void (**)(char *, void, uint64_t))(v4 + 16))(v6, v16[1], v3);
  UniversalList.BodyContent.init(children:selection:)((uint64_t)v17, (uint64_t)v6, (uint64_t)v10);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, v7);
}

uint64_t UniversalList.BodyContent.init(children:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = swift_getKeyPath();
  *(unsigned char *)(a3 + 8) = 0;
  uint64_t v6 = a3 + *(int *)(type metadata accessor for UniversalList.BodyContent() + 40);
  uint64_t v7 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(a3 + 64) = *(void *)(a1 + 48);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40);

  return v10(v6, a2, v9);
}

uint64_t UniversalList.BodyContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  type metadata accessor for Binding();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23[-1] - v6;
  uint64_t v8 = type metadata accessor for UniversalListContentProvider();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v23[-1] - v10;
  outlined init with copy of _VariadicView_Children(v2 + 16, (uint64_t)v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + *(int *)(a1 + 40), v4);
  uint64_t v12 = *(void *)v2;
  char v13 = *(unsigned char *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(v12, v13);
  double v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<Bool>.Content(v12, v13);
  UniversalListContentProvider.init(children:selection:rowHeight:)(v23, (uint64_t)v7, (uint64_t)v11, v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = swift_getWitnessTable();
  type metadata accessor for UniversalListContentProvider.Index();
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = MEMORY[0x1E4F41610];
  uint64_t v19 = v22;
  double v20 = _ScrollableLayout<>.subscript.getter(v8, WitnessTable, v16, MEMORY[0x1E4F41610], v17, v22);
  (*(void (**)(char *, uint64_t, double))(v9 + 8))(v11, v8, v20);
  v23[0] = v8;
  v23[1] = v8;
  uint64_t v23[2] = WitnessTable;
  v23[3] = v16;
  void v23[4] = v18;
  v23[5] = v17;
  type metadata accessor for _ScrollableLayoutView();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for _ScrollView();
  *(unsigned char *)(v19 + *(int *)(result + 36) + 80) = 1;
  return result;
}

uint64_t UniversalListContentProvider.init(children:selection:rowHeight:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  outlined init with copy of _VariadicView_Children((uint64_t)a1, a3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v8 = ViewList.allViewIDs.getter();
  outlined destroy of _VariadicView_Children((uint64_t)a1);
  *(void *)(a3 + 56) = v8;
  uint64_t v9 = type metadata accessor for UniversalListContentProvider();
  uint64_t v10 = a3 + *(int *)(v9 + 40);
  type metadata accessor for Binding();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  *(double *)(a3 + *(int *)(v9 + 44)) = a4;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance UniversalList<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata accessor for UniversalList.BodyContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for UniversalList.BodyContent()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for UniversalList.BodyContent(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  uint64_t v8 = v6;
  unint64_t v9 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  size_t v10 = ((v8 + 16) & ~v8) + *(void *)(v5 + 64);
  int v11 = v6 & 0x100000;
  if (v8 <= 7 && v11 == 0 && (v9 & (v8 + 72)) + v10 <= 0x18)
  {
    uint64_t v34 = *(void *)(a3 + 16);
    uint64_t v15 = *(void *)a2;
    char v16 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v16);
    *(void *)a1 = v15;
    *(unsigned char *)(a1 + 8) = v16;
    uint64_t v17 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v18 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    v17[5] = v19;
    v17[6] = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    (**(void (***)(unint64_t, unint64_t))(v19 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 16, (a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    double v20 = *(void **)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    v17[7] = v20;
    v17[8] = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
    uint64_t v21 = (void *)(v9 & ((a1 & 0xFFFFFFFFFFFFFFF8) + 79));
    uint64_t v22 = (void *)(v9 & (v18 + 79));
    uint64_t v23 = (uint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    id v24 = v20;
    swift_bridgeObjectRetain();
    if ((v7 & 0x80000000) != 0)
    {
      uint64_t v27 = v34;
      int v28 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v23 + v8 + 8) & ~v8, v7, v34);
      uint64_t v26 = ~v8;
      if (v28)
      {
LABEL_14:
        memcpy(v21, v22, v10);
        return a1;
      }
    }
    else
    {
      uint64_t v25 = *v23;
      if ((unint64_t)*v23 >= 0xFFFFFFFF) {
        LODWORD(v25) = -1;
      }
      uint64_t v26 = ~v8;
      uint64_t v27 = v34;
      if (v25 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v21 = *v22;
    long long v29 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *long long v29 = *v23;
    uint64_t v30 = ((unint64_t)v29 + v8 + 8) & v26;
    uint64_t v31 = ((unint64_t)v23 + v8 + 8) & v26;
    long long v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v32(v30, v31, v27);
    return a1;
  }
  uint64_t v14 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = v14 + (v9 & (v8 + 16));
  swift_retain();
  return a1;
}

uint64_t destroy for UniversalList.BodyContent(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 16);

  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v4 + (v8 | 7) + 72) & ~(v8 | 7);
  uint64_t v10 = ~v8;
  int v11 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    uint64_t v15 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v8 + 8) & v10);
    uint64_t v7 = v15;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v12 = *v11;
  if ((unint64_t)*v11 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  uint64_t result = (v12 + 1);
  if (v12 == -1)
  {
LABEL_7:
    uint64_t v16 = v7;
    swift_release();
    swift_release();
    uint64_t v14 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 8);
    return v14(((unint64_t)v11 + v8 + 8) & v10, v5);
  }
  return result;
}

uint64_t initializeWithCopy for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  v8[5] = v10;
  v8[6] = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  (**(void (***)(unint64_t, unint64_t))(v10 - 8))((a1 & 0xFFFFFFFFFFFFFFF8) + 16, (a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  int v11 = *(void **)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  v8[7] = v11;
  v8[8] = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  uint64_t v15 = *(_DWORD *)(v13 + 80);
  unint64_t v16 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (void *)((v15 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v16);
  unint64_t v18 = (void *)((v15 + 72 + v9) & v16);
  uint64_t v19 = ~v15;
  uint64_t v27 = *(void *)(v13 + 64);
  double v20 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v21 = v11;
  swift_bridgeObjectRetain();
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v22 = *v20;
    if ((unint64_t)*v20 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    if (v22 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v17 = *v18;
    uint64_t v23 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v20;
    uint64_t v24 = ((unint64_t)v23 + v15 + 8) & v19;
    uint64_t v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    swift_retain();
    swift_retain();
    v25(v24, ((unint64_t)v20 + v15 + 8) & v19, v12);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(((unint64_t)v20 + v15 + 8) & v19, v14, v12))goto LABEL_7; {
LABEL_5:
  }
  memcpy(v17, v18, ((v15 + 16) & ~v15) + v27);
  return a1;
}

uint64_t assignWithCopy for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16), (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16));
  uint64_t v12 = *(void **)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  uint64_t v13 = *(void **)((a1 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(void *)(v10 + 56) = v12;
  id v14 = v12;

  *(void *)(v10 + 64) = *(void *)(v11 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(_DWORD *)(v16 + 80);
  unint64_t v19 = *(_DWORD *)(v16 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  double v20 = (void *)((v18 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v19);
  id v21 = (void *)((v18 + 72 + v11) & v19);
  uint64_t v22 = ~v18;
  size_t v23 = ((v18 + 16) & ~v18) + *(void *)(v16 + 64);
  uint64_t v24 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 0x80000000) != 0)
  {
    uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48);
    uint64_t v40 = ((v18 + 16) & ~v18) + *(void *)(v16 + 64);
    int v32 = v31(((unint64_t)v24 + v18 + 8) & ~v18, v17, v15);
    long long v33 = v31;
    int v39 = v32;
    uint64_t v25 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = ~v18;
    int v27 = v33(((unint64_t)v25 + v18 + 8) & ~v18, v17, v15);
    size_t v23 = v40;
    if (!v39)
    {
LABEL_5:
      if (!v27)
      {
        *double v20 = *v21;
        swift_retain();
        swift_release();
        *uint64_t v24 = *v25;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 24))(((unint64_t)v24 + v18 + 8) & v22, ((unint64_t)v25 + v18 + 8) & v22, v15);
        return a1;
      }
      size_t v28 = v23;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v24 + v18 + 8) & v22, v15);
      long long v29 = v20;
      uint64_t v30 = v21;
      size_t v23 = v28;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v25 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = *v25;
    if (*v25 >= 0xFFFFFFFFuLL) {
      LODWORD(v26) = -1;
    }
    int v27 = v26 + 1;
    if (*v24 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v27)
  {
    *double v20 = *v21;
    *uint64_t v24 = *v25;
    uint64_t v34 = v22;
    uint64_t v35 = ((unint64_t)v24 + v18 + 8) & v22;
    uint64_t v36 = ((unint64_t)v25 + v18 + 8) & v34;
    double v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
    swift_retain();
    swift_retain();
    v37(v35, v36, v15);
    return a1;
  }
  long long v29 = v20;
  uint64_t v30 = v21;
LABEL_10:
  memcpy(v29, v30, v23);
  return a1;
}

uint64_t initializeWithTake for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(void *)(v4 + 64) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unint64_t v11 = *(_DWORD *)(v9 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (char *)((v10 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v11);
  uint64_t v13 = (void *)((v10 + 72 + (a2 & 0xFFFFFFFFFFFFFFF8)) & v11);
  uint64_t v14 = ~v10;
  uint64_t v15 = *(void *)(v9 + 64);
  uint64_t v16 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v9 + 84) & 0x80000000) == 0)
  {
    uint64_t v17 = *v16;
    if ((unint64_t)*v16 >= 0xFFFFFFFF) {
      LODWORD(v17) = -1;
    }
    if (v17 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v12 = *v13;
    unint64_t v18 = (unint64_t)(v12 + 15);
    *(void *)(v18 & 0xFFFFFFFFFFFFFFF8) = *v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((v10 + 8 + (v18 & 0xFFFFFFFFFFFFFFF8)) & v14, ((unint64_t)v16 + v10 + 8) & v14, v8);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v9 + 48))(((unint64_t)v16 + v10 + 8) & v14)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v12, v13, ((v10 + 16) & ~v10) + v15);
  return a1;
}

uint64_t assignWithTake for UniversalList.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  long long v12 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  long long v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(void *)(v10 + 48) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v10 + 16) = v12;
  *(_OWORD *)(v10 + 32) = v13;
  uint64_t v14 = *(void **)((a1 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(void *)(v10 + 56) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);

  *(void *)(v10 + 64) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(_DWORD *)(v16 + 80);
  unint64_t v19 = *(_DWORD *)(v16 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  double v20 = (void *)((v18 + 72 + (a1 & 0xFFFFFFFFFFFFFFF8)) & v19);
  id v21 = (void *)((v18 + 72 + v11) & v19);
  uint64_t v22 = ~v18;
  size_t v23 = ((v18 + 16) & ~v18) + *(void *)(v16 + 64);
  uint64_t v24 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 0x80000000) != 0)
  {
    uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48);
    uint64_t v36 = ((v18 + 16) & ~v18) + *(void *)(*(void *)(v15 - 8) + 64);
    int v32 = v31(((unint64_t)v24 + v18 + 8) & ~v18, v17, v15);
    long long v33 = v31;
    int v35 = v32;
    uint64_t v25 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = ~v18;
    int v27 = v33(((unint64_t)v25 + v18 + 8) & ~v18, v17, v15);
    size_t v23 = v36;
    if (!v35)
    {
LABEL_5:
      if (!v27)
      {
        *double v20 = *v21;
        swift_release();
        *uint64_t v24 = *v25;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 40))(((unint64_t)v24 + v18 + 8) & v22, ((unint64_t)v25 + v18 + 8) & v22, v15);
        return a1;
      }
      size_t v28 = v23;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v24 + v18 + 8) & v22, v15);
      long long v29 = v20;
      uint64_t v30 = v21;
      size_t v23 = v28;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v25 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = *v25;
    if (*v25 >= 0xFFFFFFFFuLL) {
      LODWORD(v26) = -1;
    }
    int v27 = v26 + 1;
    if (*v24 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v27)
  {
    *double v20 = *v21;
    *uint64_t v24 = *v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))(((unint64_t)v24 + v18 + 8) & v22, ((unint64_t)v25 + v18 + 8) & v22, v15);
    return a1;
  }
  long long v29 = v20;
  uint64_t v30 = v21;
LABEL_10:
  memcpy(v29, v30, v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalList.BodyContent(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v8 | 7;
  int v11 = a2 - v9;
  if (a2 <= v9) {
    goto LABEL_26;
  }
  uint64_t v12 = ((v8 + 16) & ~v8) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v8 + 72) & ~v10);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_26:
      unint64_t v18 = a1 & 0xFFFFFFFFFFFFFFF8;
      if ((v7 & 0x80000000) != 0)
      {
        double v20 = (unint64_t *)((((v18 + v10 + 72) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v22 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v20 + v8 + 8) & ~v8);
        }
        else
        {
          unint64_t v21 = *v20;
          if (v21 >= 0xFFFFFFFF) {
            LODWORD(v21) = -1;
          }
          unsigned int v22 = v21 + 1;
        }
        if (v22 >= 2) {
          return v22 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v19 = *(void *)(v18 + 40);
        if (v19 >= 0xFFFFFFFF) {
          LODWORD(v19) = -1;
        }
        return (v19 + 1);
      }
    }
  }
  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(unsigned char *)(a1 + v12)) {
    goto LABEL_26;
  }
LABEL_18:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v12) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v9 + (v12 | v17) + 1;
}

void storeEnumTagSinglePayload for UniversalList.BodyContent(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  if (v8 - 1 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8 - 1;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  size_t v13 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v14 = v13 + ((v11 + 72) & ~(v11 | 7));
  BOOL v15 = a3 >= v10;
  unsigned int v16 = a3 - v10;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v10 < a2)
  {
    unsigned int v18 = ~v10 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero((void *)a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          *(unsigned char *)(a1 + 2) = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *(unsigned char *)a1 = v21;
        }
      }
    }
    else
    {
      bzero((void *)a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        *(unsigned char *)(a1 + v14) = v19;
        return;
      case 2:
        *(_WORD *)(a1 + v14) = v19;
        return;
      case 3:
        goto LABEL_71;
      case 4:
        *(_DWORD *)(a1 + v14) = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      *(unsigned char *)(a1 + v14) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)(a1 + v14) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_71:
      __break(1u);
      JUMPOUT(0x18806C23CLL);
    case 4:
      *(_DWORD *)(a1 + v14) = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v22 = a1 & 0xFFFFFFFFFFFFFFF8;
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v12 = v11 | 7;
          uint64_t v23 = (v22 + v12 + 72) & ~v12;
          if (v9 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                long long v29 = (void *)((v23 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v30 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v31 = a2 + 1;
                  v30(((unint64_t)v29 + v11 + 8) & ~v11, v31);
                }
                else if (((a2 + 1) & 0x80000000) != 0)
                {
                  *long long v29 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *long long v29 = a2;
                }
              }
            }
            else
            {
              if (v13 <= 3) {
                int v27 = ~(-1 << (8 * v13));
              }
              else {
                int v27 = -1;
              }
              if (v13)
              {
                int v25 = v27 & (a2 - v8);
                if (v13 <= 3) {
                  int v28 = v13;
                }
                else {
                  int v28 = 4;
                }
                bzero((void *)((v22 + v12 + 72) & ~v12), v13);
                switch(v28)
                {
                  case 2:
LABEL_65:
                    *(_WORD *)uint64_t v23 = v25;
                    break;
                  case 3:
LABEL_64:
                    *(_WORD *)uint64_t v23 = v25;
                    *(unsigned char *)(v23 + 2) = BYTE2(v25);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)uint64_t v23 = v25;
                    break;
                  default:
LABEL_52:
                    *(unsigned char *)uint64_t v23 = v25;
                    break;
                }
              }
            }
          }
          else
          {
            if (v13 <= 3) {
              int v24 = ~(-1 << (8 * v13));
            }
            else {
              int v24 = -1;
            }
            if (v13)
            {
              int v25 = v24 & (a2 - v8);
              if (v13 <= 3) {
                int v26 = v13;
              }
              else {
                int v26 = 4;
              }
              bzero((void *)((v22 + v12 + 72) & ~v12), v13);
              switch(v26)
              {
                case 2:
                  goto LABEL_65;
                case 3:
                  goto LABEL_64;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(v22 + 56) = 0u;
          *(_OWORD *)(v22 + 40) = 0u;
          *(_OWORD *)(v22 + 24) = 0u;
          *(void *)(v22 + 16) = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)(v22 + 40) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_18806C284()
{
  type metadata accessor for UniversalList.BodyContent();

  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in UniversalList<A>.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UniversalListContentProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UniversalListContentProvider.Index()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for UniversalListContentProvider.Index(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UniversalListContentProvider.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_retain();
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for UniversalListContentProvider.Index(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) != 1)
  {
    if (v4 != 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of _ViewList_ID.Canonical(a1);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
LABEL_8:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

void *assignWithTake for UniversalListContentProvider.Index(void *a1, void *a2)
{
  if (a1[1] != 1)
  {
    uint64_t v4 = a2[1];
    if (v4 != 1)
    {
      *a1 = *a2;
      a1[1] = v4;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of _ViewList_ID.Canonical((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalListContentProvider.Index(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for UniversalListContentProvider.Index(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t type metadata completion function for UniversalListContentProvider()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for UniversalListContentProvider(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = (void *)a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  uint64_t v8 = v6;
  unint64_t v9 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  size_t v10 = ((v8 + 16) & ~v8) + *(void *)(v5 + 64);
  int v11 = v6 & 0x100000;
  if (v8 <= 7 && v11 == 0 && ((v10 + 7 + (v9 & (v8 + 64))) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    uint64_t v35 = *(void *)(a3 + 16);
    long long v15 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v15;
    (**(void (***)(uint64_t, uint64_t *))(v15 - 8))(a1, a2);
    unsigned int v16 = (void *)a2[5];
    uint64_t v17 = a2[6];
    v4[5] = v16;
    v4[6] = v17;
    unsigned int v18 = (void *)(((unint64_t)v4 + 63) & 0xFFFFFFFFFFFFFFF8);
    int v19 = (void *)(((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v18 = *v19;
    __dst = (void *)(v9 & ((unint64_t)v18 + 15));
    unsigned int v20 = (void *)(v9 & ((unint64_t)v19 + 15));
    int v21 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    id v22 = v16;
    swift_bridgeObjectRetain();
    swift_retain();
    if ((v7 & 0x80000000) != 0)
    {
      uint64_t v24 = v35;
      int v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v21 + v8 + 8) & ~v8, v7, v35);
      uint64_t v25 = ~v8;
      if (v27)
      {
LABEL_14:
        int v26 = __dst;
        memcpy(__dst, v20, v10);
LABEL_17:
        *(void *)(((unint64_t)v26 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20
                                                                                           + v10
                                                                                           + 7) & 0xFFFFFFFFFFFFFFF8);
        return v4;
      }
    }
    else
    {
      uint64_t v23 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF) {
        LODWORD(v23) = -1;
      }
      uint64_t v24 = v35;
      uint64_t v25 = ~v8;
      if (v23 != -1) {
        goto LABEL_14;
      }
    }
    int v26 = __dst;
    void *__dst = *v20;
    int v28 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v28 = *v21;
    uint64_t v29 = v8 + 8;
    uint64_t v30 = ((unint64_t)v28 + v8 + 8) & v25;
    unint64_t v31 = ((unint64_t)v21 + v29) & v25;
    int v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v32(v30, v31, v24);
    goto LABEL_17;
  }
  uint64_t v14 = *a2;
  *int v4 = *a2;
  int v4 = (void *)(v14 + (v9 & (v8 + 16)));
  swift_retain();
  return v4;
}

uint64_t destroy for UniversalListContentProvider(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  unint64_t v4 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v4 + (v8 | 7) + 8) & ~(v8 | 7);
  uint64_t v10 = ~v8;
  int v11 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    uint64_t v15 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v8 + 8) & v10);
    uint64_t v7 = v15;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v12 = *v11;
  if ((unint64_t)*v11 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  uint64_t result = (v12 + 1);
  if (v12 == -1)
  {
LABEL_7:
    uint64_t v16 = v7;
    swift_release();
    swift_release();
    uint64_t v14 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 8);
    return v14(((unint64_t)v11 + v8 + 8) & v10, v5);
  }
  return result;
}

uint64_t initializeWithCopy for UniversalListContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(void **)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = (void *)((a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = v14 + 8;
  unint64_t v16 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (void *)(((unint64_t)v9 + v14 + 8) & v16);
  uint64_t v17 = (void *)(((unint64_t)v10 + v14 + 8) & v16);
  uint64_t v18 = ~v14;
  uint64_t v28 = (v14 + 16) & ~v14;
  uint64_t v27 = *(void *)(v12 + 64);
  int v19 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v20 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  if ((v13 & 0x80000000) != 0)
  {
    int v22 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))(((unint64_t)v19 + v15) & v18, v13, v11);
  }
  else
  {
    uint64_t v21 = *v19;
    if ((unint64_t)*v19 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    int v22 = v21 + 1;
  }
  if (v22)
  {
    memcpy(__dst, v17, v28 + v27);
  }
  else
  {
    void *__dst = *v17;
    uint64_t v23 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v19;
    unint64_t v24 = ((unint64_t)v23 + v15) & v18;
    uint64_t v25 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v25(v24, ((unint64_t)v19 + v15) & v18, v11);
  }
  *(void *)(((unint64_t)__dst + v28 + v27 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v17
                                                                                             + v28
                                                                                             + v27
                                                                                             + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *assignWithCopy for UniversalListContentProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  long long v6 = (void *)a2[5];
  uint64_t v7 = (void *)a1[5];
  a1[5] = (uint64_t)v6;
  id v8 = v6;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = v14 + 8;
  unint64_t v16 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (void *)(((unint64_t)v9 + v14 + 8) & v16);
  uint64_t v18 = (void *)(((unint64_t)v10 + v14 + 8) & v16);
  uint64_t v19 = *(void *)(v12 + 64);
  size_t v20 = ((v14 + 16) & ~v14) + v19;
  uint64_t v21 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = ~v14;
  uint64_t v37 = v11;
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v34 = v17;
    uint64_t v35 = ((unint64_t)v10 + v14 + 8) & v16;
    uint64_t v25 = v11;
    size_t v33 = ((v14 + 16) & ~v14) + v19;
    int v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    uint64_t v27 = ~v14;
    int v32 = v26(((unint64_t)v21 + v15) & ~v14, v13, v11);
    int v22 = (void *)((v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v28 = ((unint64_t)v22 + v15) & v27;
    uint64_t v29 = v25;
    uint64_t v17 = v34;
    uint64_t v18 = (void *)v35;
    int v24 = v26(v28, v13, v29);
    size_t v20 = v33;
    if (!v32)
    {
LABEL_5:
      if (!v24)
      {
        *uint64_t v17 = *v18;
        swift_retain();
        swift_release();
        *uint64_t v21 = *v22;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 24))(((unint64_t)v21 + v15) & v36, ((unint64_t)v22 + v15) & v36, v37);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(((unint64_t)v21 + v15) & v36, v37);
      goto LABEL_9;
    }
  }
  else
  {
    int v22 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = *v22;
    if (*v22 >= 0xFFFFFFFFuLL) {
      LODWORD(v23) = -1;
    }
    int v24 = v23 + 1;
    if (*v21 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v24)
  {
    *uint64_t v17 = *v18;
    *uint64_t v21 = *v22;
    uint64_t v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v30(((unint64_t)v21 + v15) & v36, ((unint64_t)v22 + v15) & v36, v37);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v17, v18, v20);
LABEL_12:
  *(void *)(((unint64_t)v17 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for UniversalListContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = (void *)((a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = (void *)((a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 + 8;
  unint64_t v11 = *(_DWORD *)(v8 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = (void *)(((unint64_t)v5 + v9 + 8) & v11);
  uint64_t v13 = (void *)(((unint64_t)v6 + v9 + 8) & v11);
  uint64_t v14 = ~v9;
  uint64_t v15 = (v9 + 16) & ~v9;
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    size_t v19 = v15 + v16;
    if (v18 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v12 = *v13;
    size_t v20 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    *size_t v20 = *v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v20 + v10) & v14, ((unint64_t)v17 + v10) & v14, v7);
    goto LABEL_8;
  }
  size_t v19 = v15 + v16;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v17 + v10) & v14)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v12, v13, v19);
LABEL_8:
  *(void *)(((unint64_t)v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for UniversalListContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)((a1 + 63) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((a2 + 63) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_release();
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = v14 + 8;
  unint64_t v16 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (void *)(((unint64_t)v9 + v14 + 8) & v16);
  uint64_t v18 = (void *)(((unint64_t)v10 + v14 + 8) & v16);
  uint64_t v19 = ~v14;
  uint64_t v20 = *(void *)(v12 + 64);
  size_t v21 = ((v14 + 16) & ~v14) + v20;
  int v22 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v38 = ~v14;
  if ((v13 & 0x80000000) != 0)
  {
    size_t v36 = ((v14 + 16) & ~v14) + v20;
    uint64_t v37 = v17;
    uint64_t v27 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    unint64_t v28 = v18;
    uint64_t v29 = v11;
    int v30 = v27(((unint64_t)v22 + v15) & v19, v13, v11);
    unint64_t v31 = v27;
    int v35 = v30;
    int v24 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = v13;
    uint64_t v23 = v29;
    uint64_t v33 = v29;
    uint64_t v18 = v28;
    uint64_t v17 = v37;
    int v26 = v31(((unint64_t)v24 + v15) & v19, v32, v33);
    size_t v21 = v36;
    if (!v35)
    {
LABEL_5:
      if (!v26)
      {
        *uint64_t v17 = *v18;
        swift_release();
        *int v22 = *v24;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 40))(((unint64_t)v22 + v15) & v38, ((unint64_t)v24 + v15) & v38, v23);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(((unint64_t)v22 + v15) & v38, v23);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v23 = v11;
    int v24 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = *v24;
    if (*v24 >= 0xFFFFFFFFuLL) {
      LODWORD(v25) = -1;
    }
    int v26 = v25 + 1;
    if (*v22 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v26)
  {
    *uint64_t v17 = *v18;
    *int v22 = *v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))(((unint64_t)v22 + v15) & v38, ((unint64_t)v24 + v15) & v38, v23);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v17, v18, v21);
LABEL_12:
  *(void *)(((unint64_t)v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniversalListContentProvider(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v9 | 7;
  if (v10 < a2)
  {
    unint64_t v12 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + ((v9 + 64) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    unsigned int v13 = a2 - v10;
    uint64_t v14 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = v13 + 1;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *(unsigned __int8 *)(a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v17 = *(unsigned __int16 *)(a1 + v12);
        if (v17) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18806D550);
      case 4:
        int v17 = *(_DWORD *)(a1 + v12);
        if (!v17) {
          break;
        }
LABEL_25:
        int v19 = v17 - 1;
        if (v14)
        {
          int v19 = 0;
          LODWORD(v14) = *(_DWORD *)a1;
        }
        return v10 + (v14 | v19) + 1;
      default:
        break;
    }
  }
  if ((v8 & 0x80000000) != 0)
  {
    size_t v21 = (unint64_t *)((((((a1 + 63) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v23 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v21 + v9 + 8) & ~v9);
    }
    else
    {
      unint64_t v22 = *v21;
      if (v22 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
      unsigned int v23 = v22 + 1;
    }
    if (v23 >= 2) {
      return v23 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v20 = *(void *)(a1 + 24);
    if (v20 >= 0xFFFFFFFF) {
      LODWORD(v20) = -1;
    }
    return (v20 + 1);
  }
}

void storeEnumTagSinglePayload for UniversalListContentProvider(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  if (v8 - 1 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8 - 1;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v13 = ((v12 + ((v11 + 64) & ~(v11 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v10 >= a3)
  {
    int v17 = 0;
    int v18 = a2 - v10;
    if (a2 <= v10)
    {
LABEL_20:
      switch(v17)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_72;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if ((v9 & 0x80000000) != 0)
            {
              size_t v21 = (unsigned char *)((((unint64_t)(a1 + 63) & 0xFFFFFFFFFFFFFFF8) + (v11 | 7) + 8) & ~(v11 | 7));
              if (v9 >= a2)
              {
                if (a2 + 1 <= v8)
                {
                  if (a2 != -1)
                  {
                    uint64_t v27 = (void *)((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF8);
                    if ((v7 & 0x80000000) != 0)
                    {
                      unint64_t v28 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                      uint64_t v29 = a2 + 1;
                      v28(((unint64_t)v27 + v11 + 8) & ~v11, v29);
                    }
                    else if (((a2 + 1) & 0x80000000) != 0)
                    {
                      void *v27 = a2 - 0x7FFFFFFF;
                    }
                    else
                    {
                      void *v27 = a2;
                    }
                  }
                }
                else
                {
                  if (v12 <= 3) {
                    int v25 = ~(-1 << (8 * v12));
                  }
                  else {
                    int v25 = -1;
                  }
                  if (v12)
                  {
                    int v23 = v25 & (a2 - v8);
                    if (v12 <= 3) {
                      int v26 = v12;
                    }
                    else {
                      int v26 = 4;
                    }
                    bzero(v21, v12);
                    switch(v26)
                    {
                      case 2:
LABEL_66:
                        *(_WORD *)size_t v21 = v23;
                        break;
                      case 3:
LABEL_65:
                        *(_WORD *)size_t v21 = v23;
                        uint64_t v21[2] = BYTE2(v23);
                        break;
                      case 4:
LABEL_67:
                        *(_DWORD *)size_t v21 = v23;
                        break;
                      default:
LABEL_60:
                        *size_t v21 = v23;
                        break;
                    }
                  }
                }
              }
              else
              {
                if (v12 <= 3) {
                  int v22 = ~(-1 << (8 * v12));
                }
                else {
                  int v22 = -1;
                }
                if (v12)
                {
                  int v23 = v22 & (a2 - v8);
                  if (v12 <= 3) {
                    int v24 = v12;
                  }
                  else {
                    int v24 = 4;
                  }
                  bzero(v21, v12);
                  switch(v24)
                  {
                    case 2:
                      goto LABEL_66;
                    case 3:
                      goto LABEL_65;
                    case 4:
                      goto LABEL_67;
                    default:
                      goto LABEL_60;
                  }
                }
              }
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(_OWORD *)(a1 + 40) = 0u;
              *(_OWORD *)(a1 + 24) = 0u;
              *(_OWORD *)(a1 + 8) = 0u;
              *(void *)a1 = a2 ^ 0x80000000;
            }
            else
            {
              *((void *)a1 + 3) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + ((v11 + 64) & ~(v11 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v17 = v16;
    }
    else {
      int v17 = 0;
    }
    int v18 = a2 - v10;
    if (a2 <= v10) {
      goto LABEL_20;
    }
  }
  if (((v12 + ((v11 + 64) & ~(v11 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v19 = v18;
  }
  else {
    int v19 = 1;
  }
  if (((v12 + ((v11 + 64) & ~(v11 | 7)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v20 = ~v10 + a2;
    bzero(a1, v13);
    *(_DWORD *)a1 = v20;
  }
  switch(v17)
  {
    case 1:
      a1[v13] = v19;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v19;
      break;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x18806D8C4);
    case 4:
      *(_DWORD *)&a1[v13] = v19;
      break;
    default:
      return;
  }
}

uint64_t sub_18806D90C()
{
  return swift_getWitnessTable();
}

void UniversalListContentProvider.Index.hash(into:)()
{
  if (*(void *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    _ViewList_ID.Canonical.hash(into:)();
  }
}

BOOL static UniversalListContentProvider.Index.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

BOOL static UniversalListContentProvider.Index.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  if (v2 == 1)
  {
    if (v5 == 1) {
      return v4 == v7;
    }
    goto LABEL_6;
  }
  v11[0] = *a1;
  v11[1] = v2;
  if (v5 == 1)
  {
    outlined copy of Text.LineStyle?(v3, v2);
LABEL_6:
    outlined copy of Text.LineStyle?(v6, v5);
    outlined consume of Text.LineStyle?(v3, v2);
    outlined consume of Text.LineStyle?(v6, v5);
    return 0;
  }
  v10[0] = v6;
  v10[1] = v5;
  outlined copy of Text.LineStyle?(v3, v2);
  swift_retain();
  char v8 = MEMORY[0x18C10D6E0](v11, v10);
  swift_release();
  outlined consume of Text.LineStyle?(v3, v2);
  if (v8) {
    return v4 == v7;
  }
  return 0;
}

Swift::Int UniversalListContentProvider.Index.hashValue.getter()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance UniversalListContentProvider<A>.Index(uint64_t a1, uint64_t a2)
{
  return static UniversalListContentProvider.Index.< infix(_:_:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UniversalListContentProvider<A>.Index()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UniversalListContentProvider<A>.Index(uint64_t *a1, uint64_t *a2)
{
  return static UniversalListContentProvider.Index.== infix(_:_:)(a1, a2);
}

uint64_t UniversalListContentProvider._index(atOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  swift_retain();
  uint64_t v4 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  uint64_t result = swift_release();
  if (v4)
  {
    dispatch thunk of _ViewList_ID_Views.subscript.getter();
    _ViewList_ID.canonicalID.getter();
    uint64_t result = swift_bridgeObjectRelease();
    long long v6 = v7;
  }
  else
  {
    long long v6 = xmmword_18834BB90;
  }
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = a1;
  return result;
}

uint64_t UniversalListContentProvider.startIndex.getter@<X0>(uint64_t a1@<X8>)
{
  return UniversalListContentProvider._index(atOffset:)(0, a1);
}

double UniversalListContentProvider.endIndex.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_18834BB90;
  *(void *)(a1 + 16) = v2;
  return result;
}

uint64_t UniversalListContentProvider.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = v2 + 1;
  if (!__OFADD__(v2, 1)) {
    return UniversalListContentProvider._index(atOffset:)(result, a2);
  }
  __break(1u);
  return result;
}

uint64_t UniversalListContentProvider.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = v2 - 1;
  if (!__OFSUB__(v2, 1)) {
    return UniversalListContentProvider._index(atOffset:)(result, a2);
  }
  __break(1u);
  return result;
}

uint64_t UniversalListContentProvider.index(_:offsetBy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = v3 + a2;
  if (!__OFADD__(v3, a2)) {
    return UniversalListContentProvider._index(atOffset:)(result, a3);
  }
  __break(1u);
  return result;
}

uint64_t UniversalListContentProvider.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v5 - 8);
  int v30 = (char *)&v27 - v6;
  uint64_t IsSelected = type metadata accessor for IsSelected();
  uint64_t v28 = *(void *)(IsSelected - 8);
  uint64_t v29 = IsSelected;
  MEMORY[0x1F4188790](IsSelected);
  uint64_t v27 = (char *)&v27 - v8;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  size_t v13 = (char *)&v27 - v12;
  _VariadicView_Children.subscript.getter();
  outlined init with copy of _VariadicView_Children.Element((uint64_t)v55, (uint64_t)v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v2 + *(int *)(a2 + 40), v10);
  uint64_t v14 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    LOBYTE(v38) = 0;
    static Binding.constant(_:)();
    uint64_t v16 = *((void *)&v36 + 1);
    uint64_t v15 = v36;
    char v17 = v37;
LABEL_5:
    uint64_t KeyPath = swift_getKeyPath();
    char v35 = 0;
    uint64_t v24 = swift_getKeyPath();
    char v34 = 0;
    uint64_t v25 = swift_getKeyPath();
    char v33 = 0;
    long long v40 = v32[2];
    long long v41 = v32[3];
    long long v42 = v32[4];
    long long v43 = v32[5];
    long long v38 = v32[0];
    long long v39 = v32[1];
    uint64_t v44 = v15;
    uint64_t v45 = v16;
    char v46 = v17;
    char v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = KeyPath;
    char v50 = v35;
    uint64_t v51 = v24;
    char v52 = v34;
    uint64_t v53 = v25;
    char v54 = 0;
    outlined init with copy of SystemListCell<_VariadicView_Children.Element>((uint64_t)&v38, (uint64_t)v32);
    type metadata accessor for SystemListCell<_VariadicView_Children.Element>();
    lazy protocol witness table accessor for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>();
    uint64_t v26 = AnyView.init<A>(_:)();
    outlined destroy of SystemListCell<_VariadicView_Children.Element>((uint64_t)&v38);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v55);
    return v26;
  }
  swift_getAssociatedConformanceWitness();
  int v18 = v30;
  _VariadicView_Children.Element.id<A>(as:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v18, 1, AssociatedTypeWitness);
  if (result != 1)
  {
    uint64_t v20 = swift_getAssociatedTypeWitness();
    size_t v21 = v27;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v27, v18, v20);
    uint64_t v22 = v29;
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v13, v9);
    uint64_t v16 = *((void *)&v38 + 1);
    uint64_t v15 = v38;
    char v17 = v39;
    long long v36 = v38;
    char v37 = v39;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void UniversalListContentProvider.update(state:proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(double *)(v3 + *(int *)(a3 + 44));
  double v5 = *(double *)(a2 + 40);
  double v6 = floor(v5 / v4);
  if ((~*(void *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  CGFloat v9 = *(double *)(a2 + 32);
  CGFloat v10 = *(double *)(a2 + 48);
  v21.size.height = *(CGFloat *)(a2 + 56);
  v21.origin.x = v9;
  v21.origin.y = *(CGFloat *)(a2 + 40);
  v21.size.width = v10;
  double v11 = ceil((v5 + CGRectGetHeight(v21)) / v4);
  if ((~*(void *)&v11 & 0x7FF0000000000000) == 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v12 = (uint64_t)v11;
  uint64_t v13 = (uint64_t)v6 & ~((uint64_t)v6 >> 63);
  swift_getWitnessTable();
  uint64_t v14 = Collection.count.getter();
  if (v14 < v13) {
    uint64_t v13 = v14;
  }
  if (v13 > v12) {
    uint64_t v12 = v13;
  }
  uint64_t v15 = Collection.count.getter();
  if (v15 < v12) {
    uint64_t v12 = v15;
  }
  *(CGFloat *)(a2 + 128) = v9;
  *(double *)(a2 + 136) = v4 * (double)v13;
  *(CGFloat *)(a2 + 144) = v10;
  if (__OFSUB__(v12, v13)) {
    goto LABEL_22;
  }
  *(double *)(a2 + 152) = v4 * (double)(v12 - v13);
  uint64_t v16 = Collection.count.getter();
  *(void *)(a2 + 112) = *(void *)(a2 + 16);
  *(double *)(a2 + 120) = v4 * (double)v16;
  if (v12 >= v13)
  {
    MEMORY[0x1F4188790](v16);
    v18[1] = *(_OWORD *)(a3 + 16);
    uint64_t v19 = v3;
    uint64_t v20 = a2;
    char v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_7SwiftUI21_ScrollableLayoutItemVs5NeverOTg5((char *)partial apply for closure #1 in UniversalListContentProvider.update(state:proxy:), (uint64_t)v18, v13, v12);
    swift_bridgeObjectRelease();
    *(void *)(a2 + 104) = v17;
    return;
  }
LABEL_23:
  __break(1u);
}

double closure #1 in UniversalListContentProvider.update(state:proxy:)@<D0>(uint64_t *a1@<X0>, int *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  type metadata accessor for UniversalListContentProvider();
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 8);
  uint64_t v8 = (void (*)(void))*((void *)a2 + 9);
  int v19 = *a2;
  uint64_t v20 = v6;
  long long v9 = *((_OWORD *)a2 + 2);
  long long v21 = *((_OWORD *)a2 + 1);
  long long v22 = v9;
  long long v23 = *((_OWORD *)a2 + 3);
  uint64_t v24 = v7;
  uint64_t v25 = v8;
  long long v10 = *((_OWORD *)a2 + 6);
  long long v26 = *((_OWORD *)a2 + 5);
  long long v27 = v10;
  long long v11 = *((_OWORD *)a2 + 8);
  long long v28 = *((_OWORD *)a2 + 7);
  long long v29 = v11;
  long long v30 = *((_OWORD *)a2 + 9);
  outlined retain of _ScrollableLayoutProxy((uint64_t)&v19);
  v8(v5);
  outlined release of _ScrollableLayoutProxy((uint64_t)&v19);
  static UnitPoint.topLeading.getter();
  _Placement.init(proposedSize:anchoring:at:)();
  *(void *)(a3 + 40) = v13;
  *(unsigned char *)(a3 + 48) = v14;
  *(void *)(a3 + 56) = v15;
  *(unsigned char *)(a3 + 64) = v16;
  double result = *(double *)&v17;
  *(_OWORD *)(a3 + 72) = v17;
  *(_OWORD *)(a3 + 88) = v18;
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(a1, a2, a3, (void (*)(long long *__return_ptr))UniversalListContentProvider.index(before:));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance UniversalListContentProvider<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance UniversalListContentProvider<A>(uint64_t a1, uint64_t a2)
{
  return specialized UniversalListContentProvider.distance(from:to:)(a1, a2);
}

void (*protocol witness for Collection.subscript.read in conformance UniversalListContentProvider<A>(uint64_t **a1, long long *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (uint64_t *)malloc(0x30uLL);
  *a1 = v6;
  uint64_t v7 = UniversalListContentProvider.subscript.read(v6, a2, a3);
  v6[4] = v8;
  v6[5] = (uint64_t)v7;
  return protocol witness for Collection.subscript.read in conformance UniversalListContentProvider<A>;
}

void protocol witness for Collection.subscript.read in conformance UniversalListContentProvider<A>(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 40))(*a1);

  free(v1);
}

uint64_t (*UniversalListContentProvider.subscript.read(uint64_t *a1, long long *a2, uint64_t a3))()
{
  uint64_t v3 = *((void *)a2 + 2);
  long long v5 = *a2;
  uint64_t v6 = v3;
  *a1 = UniversalListContentProvider.subscript.getter((uint64_t)&v5, a3);
  return destroy for NavigationDestinationModifier.SeededResolver;
}

double protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance UniversalListContentProvider<A>@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1883C0770;
  *(void *)(a1 + 16) = 0;
  return result;
}

double protocol witness for Collection.formIndex(after:) in conformance UniversalListContentProvider<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(a1, a2, a3, (void (*)(long long *__return_ptr))UniversalListContentProvider.index(after:));
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance UniversalListContentProvider<A>(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(long long *__return_ptr))
{
  a4(&v7);
  outlined consume of Text.LineStyle?(*a1, a1[1]);
  uint64_t v5 = v8;
  double result = *(double *)&v7;
  *(_OWORD *)a1 = v7;
  a1[2] = v5;
  return result;
}

double protocol witness for Sequence.makeIterator() in conformance UniversalListContentProvider<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, v2, a1);
  UniversalListContentProvider.startIndex.getter((uint64_t)&v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t v6 = a2 + *(int *)(type metadata accessor for IndexingIterator() + 36);
  uint64_t v7 = v10;
  double result = *(double *)&v9;
  *(_OWORD *)uint64_t v6 = v9;
  *(void *)(v6 + 16) = v7;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t base witness table accessor for Sequence in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Collection in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in UniversalListContentProvider<A>.Index()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for UniversalListContentProvider<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in UniversalListContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t IsSelected.get(base:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 56))(v2, *(void *)(a2 + 16)) & 1;
}

uint64_t IsSelected.set(base:newValue:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 16);
  if (a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v3, v7);
  }
  else {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v3, v7);
  }
}

uint64_t IsSelected.hash(into:)()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static IsSelected.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int IsSelected.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance IsSelected<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IsSelected.get(base:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance IsSelected<A>(uint64_t a1, char *a2, uint64_t a3)
{
  return IsSelected.set(base:newValue:)(a1, *a2, a3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IsSelected<A>()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IsSelected<A>()
{
  return static IsSelected.== infix(_:_:)();
}

double key path getter for EnvironmentValues.rowInset : EnvironmentValues@<D0>(double *a1@<X8>)
{
  swift_retain();
  swift_retain();
  EnvironmentValues.defaultPadding.getter();
  EdgeInsets.horizontal.getter();
  double v3 = v2;
  swift_release();
  swift_release();
  double result = v3 * 0.5;
  *a1 = v3 * 0.5;
  return result;
}

uint64_t specialized UniversalListContentProvider.distance(from:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = v3 - v2;
  if (__OFSUB__(v3, v2)) {
    __break(1u);
  }
  return result;
}

double partial apply for closure #1 in UniversalListContentProvider.update(state:proxy:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in UniversalListContentProvider.update(state:proxy:)(a1, *(int **)(v2 + 40), a2);
}

uint64_t type metadata accessor for IsSelected()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of SystemListCell<_VariadicView_Children.Element>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SystemListCell<_VariadicView_Children.Element>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for SystemListCell<_VariadicView_Children.Element>()
{
  if (!lazy cache variable for type metadata for SystemListCell<_VariadicView_Children.Element>)
  {
    unint64_t v0 = type metadata accessor for SystemListCell();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SystemListCell<_VariadicView_Children.Element>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>;
  if (!lazy protocol witness table cache variable for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>)
  {
    type metadata accessor for SystemListCell<_VariadicView_Children.Element>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemListCell<_VariadicView_Children.Element> and conformance SystemListCell<A>);
  }
  return result;
}

uint64_t outlined destroy of SystemListCell<_VariadicView_Children.Element>(uint64_t a1)
{
  type metadata accessor for SystemListCell<_VariadicView_Children.Element>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata completion function for IsSelected()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IsSelected(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for IsSelected(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for IsSelected(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        long long v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for IsSelected(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18806F8B4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t base witness table accessor for Equatable in IsSelected<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in IsSelected<A>()
{
  return swift_getWitnessTable();
}

uint64_t closure #1 in AccessibilityFocus.filtered(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = MEMORY[0x18C119DF0](a2);
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_getObjectType();
    char v4 = ViewRendererHost.containsAccessibilityElement(_:)(v3);

    return v4 & 1;
  }
  return result;
}

id AccessibilityFocus.Target.ancestorAccessibilityNode.getter()
{
  uint64_t v1 = MEMORY[0x18C119DF0](v0);
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    type metadata accessor for AccessibilityNode();
    uint64_t v3 = swift_dynamicCastClass();
    if (v3)
    {
      id v4 = (id)v3;
      outlined init with copy of AccessibilityFocus.Target(v0, (uint64_t)&v11);
      outlined destroy of AccessibilityFocus.Target((uint64_t)&v11);
      return v4;
    }
  }
  outlined init with copy of AccessibilityFocus.Target(v0, (uint64_t)&v11);
  unsigned int v5 = (void *)MEMORY[0x18C119DF0](&v11);
  if (v5)
  {
    uint64_t v6 = v5;
    id v4 = objc_msgSend(v5, sel_accessibilityNodeForPlatformElement);

    outlined destroy of AccessibilityFocus.Target((uint64_t)&v11);
    if (v4) {
      return v4;
    }
  }
  else
  {
    outlined destroy of AccessibilityFocus.Target((uint64_t)&v11);
  }
  uint64_t v7 = MEMORY[0x18C119DF0](v0);
  if (!v7) {
    return 0;
  }
  size_t v8 = (void *)v7;
  swift_getObjectType();
  id v9 = objc_msgSend(v8, sel_accessibilityNodeForPlatformElement);
  if (v9)
  {
    id v4 = v9;
  }
  else
  {
    uint64_t v11 = 0;
    MEMORY[0x1F4188790](0);
    PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)((uint64_t (*)(void))partial apply for closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter);

    return (id)v11;
  }
  return v4;
}

uint64_t closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter(void *a1, void **a2)
{
  type metadata accessor for AccessibilityNode();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    unsigned int v5 = *a2;
    *a2 = (void *)v4;
    id v6 = a1;
LABEL_5:

    return 0;
  }
  id v7 = objc_msgSend(a1, sel_accessibilityNodeForPlatformElement);
  if (v7)
  {
    unsigned int v5 = *a2;
    *a2 = v7;
    goto LABEL_5;
  }
  return 1;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityFocus.Match(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18806FC3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AccessibilityFocus.Match] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AccessibilityFocus.Match] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AccessibilityFocus.Match] and conformance [A])
  {
    type metadata accessor for [AccessibilityFocus.Match]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AccessibilityFocus.Match] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [AccessibilityFocus.Match]()
{
  if (!lazy cache variable for type metadata for [AccessibilityFocus.Match])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityFocus.Match]);
    }
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityFocus.Match(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance AccessibilityFocus.Match;
}

ValueMetadata *type metadata accessor for AccessibilityFocusInputKey()
{
  return &type metadata for AccessibilityFocusInputKey;
}

uint64_t AccessibilityFocus.Target.match(focusStoreNode:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x18C119DF0](v1);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    type metadata accessor for AccessibilityNode();
    uint64_t v6 = swift_dynamicCastClass();
    if (v6)
    {
      id v7 = (id)v6;
      outlined init with copy of AccessibilityFocus.Target(v2, (uint64_t)v24);
      outlined destroy of AccessibilityFocus.Target((uint64_t)v24);
      goto LABEL_7;
    }
  }
  outlined init with copy of AccessibilityFocus.Target(v2, (uint64_t)v24);
  size_t v8 = (void *)MEMORY[0x18C119DF0](v24);
  if (!v8)
  {
    outlined destroy of AccessibilityFocus.Target((uint64_t)v24);
    goto LABEL_10;
  }
  id v9 = v8;
  id v7 = objc_msgSend(v8, sel_accessibilityNodeForPlatformElement);

  outlined destroy of AccessibilityFocus.Target((uint64_t)v24);
  if (!v7) {
    goto LABEL_10;
  }
LABEL_7:
  type metadata accessor for AccessibilityNode();
  id v10 = a1;
  char v11 = static NSObject.== infix(_:_:)();

  if (v11) {
    return 0;
  }
LABEL_10:
  AccessibilityNode.platformElement.getter();
  if (v12)
  {
    int v13 = v12;
    char v14 = (void *)MEMORY[0x18C119DF0](v2);
    if (v14)
    {
      uint64_t v15 = v14;

      if (v15 == v13) {
        return 0;
      }
    }
    else
    {
    }
  }
  id v17 = AccessibilityFocus.Target.ancestorAccessibilityNode.getter();
  if (v17)
  {
    long long v18 = v17;
    type metadata accessor for NSObject();
    char v19 = static NSObject.== infix(_:_:)();

    if (v19) {
      return 2;
    }
  }
  id v20 = AccessibilityFocus.Target.ancestorAccessibilityNode.getter();
  if (!v20) {
    return 4;
  }
  long long v21 = v20;
  char v23 = 0;
  id v22 = a1;
  specialized PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(v21, v22, &v23);

  if (v23) {
    return 3;
  }
  else {
    return 4;
  }
}

BOOL specialized closure #1 in AccessibilityFocus.Target.match(focusStoreNode:)(id a1, void *a2, unsigned char *a3)
{
  AccessibilityNode.platformElement.getter();
  if (!v6) {
    id v6 = a2;
  }
  id v7 = v6;

  if (v7 == a1) {
    *a3 = 1;
  }
  return v7 != a1;
}

BOOL specialized AccessibilityFocus.Match.takesPriority(over:)(unsigned __int8 a1)
{
  if (!qword_1ED426AC0) {
    return 0;
  }
  if (byte_1ED426AD0 != a1)
  {
    uint64_t v2 = 0;
    uint64_t v4 = qword_1ED426AC0 - 1;
    while (v4 != v2)
    {
      int v5 = *((unsigned __int8 *)&outlined read-only object #0 of AccessibilityFocus.Match.takesPriority(over:)
           + v2++
           + 33);
      if (v5 == a1)
      {
        uint64_t v1 = 0;
        while (v4 != v1)
        {
          int v6 = *((unsigned __int8 *)&outlined read-only object #0 of AccessibilityFocus.Match.takesPriority(over:)
               + v1++
               + 33);
          if (v6 == a1) {
            return v2 < v1;
          }
        }
        return 0;
      }
    }
    return 0;
  }
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  return v2 < v1;
}

SwiftUI::BorderedListStyle __swiftcall BorderedListStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
  result.options.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::BorderedListStyle __swiftcall BorderedListStyle.init()()
{
  result.options.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static BorderedListStyle._makeView<A>(value:inputs:)()
{
}

void static BorderedListStyle._makeViewList<A>(value:inputs:)()
{
}

ValueMetadata *type metadata accessor for BorderedListStyle()
{
  return &type metadata for BorderedListStyle;
}

void protocol witness for DynamicPropertyBox.reset() in conformance IdentityLinkBox()
{
  *unint64_t v0 = 0;
}

ValueMetadata *type metadata accessor for ViewIdentity.Tracker()
{
  return &type metadata for ViewIdentity.Tracker;
}

void *type metadata accessor for IdentityLinkBox()
{
  return &unk_1ED41A2A8;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in IdentityLinkBox()
{
  return &protocol witness table for IdentityLink;
}

uint64_t _ContentShapeModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ContentShapeModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ContentShapeModifier.shape.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ContentShapeModifier.eoFill.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _ContentShapeModifier.eoFill.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_ContentShapeModifier.eoFill.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ContentShapeModifier.init(shape:eoFill:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for _ContentShapeModifier();
  *(unsigned char *)(a4 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t ContentShapeResponder.__allocating_init(inputs:)()
{
  return ContentShapeResponder.init(inputs:)();
}

uint64_t ContentShapeResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t, void *);
  double v9;
  uint64_t result;
  double v11;
  uint64_t v12;
  void v13[4];
  uint64_t v14;
  double v15;
  uint64_t v16;

  uint64_t v7 = *a3;
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    v13[0] = v7;
    type metadata accessor for DefaultLayoutViewResponder();
    size_t v8 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))method lookup function for ViewResponder();
    v8(&v14, a1, a2 | ((HIDWORD(a2) & 1) << 32), v13);
    id v9 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    id v9 = -1.0;
  }
  void v13[3] = v7;
  MultiViewResponder.children.getter();
  swift_beginAccess();
  type metadata accessor for _ContentShapeModifier();
  swift_getWitnessTable();
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)();
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  char v11 = v15;
  if (v15 <= v9) {
    char v11 = v9;
  }
  unsigned int v12 = v16;
  *(void *)a4 = v14;
  *(double *)(a4 + 8) = v11;
  *(void *)(a4 + 16) = v12;
  return result;
}

uint64_t ContentShapeResponder.addContentPath(to:kind:in:observer:)()
{
  return swift_endAccess();
}

unint64_t ContentShapeResponder.descriptionName.getter()
{
  swift_beginAccess();
  type metadata accessor for _ContentShapeModifier();
  swift_getWitnessTable();
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 2629694;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8745;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  return 0xD000000000000016;
}

uint64_t ContentShapeResponder.extendPrintTree(string:)()
{
  uint64_t v1 = *v0 + class metadata base offset for ContentShapeResponder;
  type metadata accessor for _ContentShapeModifier();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  Swift::String v5 = (char *)v17 - v4;
  int v6 = (char *)v0 + *(void *)(v1 + 16);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, v2);
  ContentResponderHelper.globalPosition.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 91;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v12._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v14._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 4202589;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  v17[0] = v8;
  v17[1] = v10;
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v18);
  return swift_bridgeObjectRelease();
}

uint64_t ContentShapeResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return ContentShapeResponder.init(inputs:viewSubgraph:)();
}

uint64_t ContentShapeResponder.init(inputs:viewSubgraph:)()
{
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t ContentShapeResponder.__ivar_destroyer()
{
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + class metadata base offset for ContentShapeResponder + 16);
  type metadata accessor for _ContentShapeModifier();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  uint64_t v3 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

void *ContentShapeResponder.deinit()
{
  Swift::String v0 = (void *)DefaultLayoutViewResponder.deinit();
  uint64_t v1 = (char *)v0 + *(void *)(class metadata base offset for ContentShapeResponder + *v0 + 16);
  type metadata accessor for _ContentShapeModifier();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ContentShapeResponder.__deallocating_deinit()
{
  ContentShapeResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t _ContentShapeModifier.contains(points:size:)()
{
  Shape.effectivePath(in:)();
  default argument 2 of Path.contains(points:eoFill:origin:)();
  Path.contains(points:eoFill:origin:)();
  return outlined release of Path((uint64_t)v1);
}

double _ContentShapeModifier.contentPath(size:)@<D0>(uint64_t a1@<X8>)
{
  Shape.effectivePath(in:)();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _ContentShapeModifier<A>@<D0>(uint64_t a1@<X8>)
{
  _ContentShapeModifier.contentPath(size:)((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_188070E74()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for ContentShapeResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  long long v4 = *(void **)(a2 + 112);
  char v5 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v4;
  id v6 = v4;

  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContentShapeResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);

  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentShapeResponderFilter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentShapeResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for RepresentableContextValues(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);

  return outlined consume of RepresentableContextValues.EnvironmentStorage(v2, v3, v4);
}

uint64_t initializeWithCopy for RepresentableContextValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for RepresentableContextValues(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  LOBYTE(v2) = *((unsigned char *)v2 + 32);
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, (char)v2);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = (_BYTE)v2;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RepresentableContextValues(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  return a1;
}

ValueMetadata *type metadata accessor for RepresentableContextValues()
{
  return &type metadata for RepresentableContextValues;
}

uint64_t destroy for RepresentableContextValues.EnvironmentStorage(uint64_t a1)
{
  return outlined consume of RepresentableContextValues.EnvironmentStorage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of RepresentableContextValues.EnvironmentStorage(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of RepresentableContextValues.EnvironmentStorage(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for RepresentableContextValues.EnvironmentStorage()
{
  return &type metadata for RepresentableContextValues.EnvironmentStorage;
}

uint64_t type metadata completion function for OutlinePrimitive()
{
  uint64_t result = type metadata accessor for OutlinePrimitive.Base();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for OutlinePrimitive(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v7 + 64)) {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  int v9 = *(_DWORD *)(*(void *)(v5 - 8) + 80) | *(_DWORD *)(v7 + 80);
  if ((v9 & 0x1000F8) != 0
    || (((((((((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v15 + (((v9 & 0xF8 | 7u) + 16) & ~(unint64_t)(v9 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = v8 + 1;
    unsigned int v11 = a2[v8];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v13 = v8;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_16;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_16;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_16;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_16:
          int v16 = (v14 | (v12 << (8 * v8))) + 2;
          unsigned int v11 = v14 + 2;
          if (v8 < 4) {
            unsigned int v11 = v16;
          }
          break;
        default:
          break;
      }
    }
    BOOL v17 = v11 == 1;
    if (v11 == 1)
    {
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v18 = v5;
    }
    else
    {
      uint64_t v18 = AssociatedTypeWitness;
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v18);
    *((unsigned char *)a1 + v8) = v17;
    char v19 = (void *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
    id v20 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = v20[1];
    *char v19 = *v20;
    v19[1] = v21;
    id v22 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    char v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = v23[1];
    *id v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v26 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    long long v28 = (void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v29 = (void *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
    *long long v28 = *v29;
    long long v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = v31[1];
    *long long v30 = *v31;
    v30[1] = v32;
    char v33 = (void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
    char v34 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
    void *v33 = *v34;
    v33[1] = v34[1];
    v33[2] = v34[2];
    *(void *)(((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v34 + 31) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OutlinePrimitive(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(*(void *)(v3 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v3 - 8) + 64);
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 1)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    uint64_t v12 = v3;
  }
  else
  {
    uint64_t v12 = AssociatedTypeWitness;
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, v12);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OutlinePrimitive(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v7 + 64)) {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  BOOL v14 = v9 == 1;
  if (v9 == 1)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v15 = v5;
  }
  else
  {
    uint64_t v15 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v15);
  *(unsigned char *)(a1 + v8) = v14;
  int v16 = (void *)((v8 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  BOOL v17 = (void *)((unint64_t)&a2[v8 + 8] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  char v19 = (void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  id v20 = (void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = v20[1];
  *char v19 = *v20;
  v19[1] = v21;
  id v22 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = v23[1];
  *id v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v26 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  uint64_t v27 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v28 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = v28[1];
  void *v27 = *v28;
  v27[1] = v29;
  long long v30 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v30 = *v31;
  v30[1] = v31[1];
  v30[2] = v31[2];
  *(void *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + 31) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned __int8 *assignWithCopy for OutlinePrimitive(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = AssociatedTypeWitness;
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v9 = *(void *)(v5 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
      uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      uint64_t v10 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v5 - 8);
    }
    else {
      uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = v5;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v8;
    }
    if (v18 == 1) {
      uint64_t v25 = v5;
    }
    else {
      uint64_t v25 = v7;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v10] = v23;
  }
  unint64_t v26 = *(void *)(*(void *)(v7 - 8) + 64);
  if (*(void *)(*(void *)(v5 - 8) + 64) > v26) {
    unint64_t v26 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unint64_t v27 = v26 + 8;
  long long v28 = (void *)((unint64_t)&a1[v27] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)((unint64_t)&a2[v27] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v29[1];
  *long long v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  uint64_t v31 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_release();
  char v34 = (void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v35 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = v35[1];
  void *v34 = *v35;
  v34[1] = v36;
  swift_retain();
  swift_release();
  char v37 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v38 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v37 = *v38;
  swift_retain();
  swift_release();
  long long v39 = (void *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v40 = (void *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v41 = v40[1];
  *long long v39 = *v40;
  v39[1] = v41;
  swift_retain();
  swift_release();
  long long v42 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v43 = (void *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v42 = *v43;
  swift_retain();
  swift_release();
  v42[1] = v43[1];
  swift_retain();
  swift_release();
  v42[2] = v43[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v42 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v43 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for OutlinePrimitive(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v7 + 64)) {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  BOOL v14 = v9 == 1;
  if (v9 == 1)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v15 = v5;
  }
  else
  {
    uint64_t v15 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v15);
  *(unsigned char *)(a1 + v8) = v14;
  uint64_t v16 = (_OWORD *)((v8 + 8 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (_OWORD *)((unint64_t)&a2[v8 + 8] & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v16 = *v17;
  unsigned int v18 = (_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v19 = (_OWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v18 = *v19;
  uint64_t v20 = (_OWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  int v21 = (_OWORD *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  int v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  BOOL v23 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v22 = *v23;
  uint64_t v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (_OWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  unint64_t v26 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v28 = *(_OWORD *)v27;
  *(void *)(v26 + 16) = *(void *)(v27 + 16);
  *(_OWORD *)unint64_t v26 = v28;
  *(void *)((v26 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v27 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *assignWithTake for OutlinePrimitive(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = AssociatedTypeWitness;
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v9 = *(void *)(v5 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
      uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      uint64_t v10 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v5 - 8);
    }
    else {
      uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = v5;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v8;
    }
    if (v18 == 1) {
      uint64_t v25 = v5;
    }
    else {
      uint64_t v25 = v7;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v10] = v23;
  }
  unint64_t v26 = *(void *)(*(void *)(v7 - 8) + 64);
  if (*(void *)(*(void *)(v5 - 8) + 64) > v26) {
    unint64_t v26 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unint64_t v27 = v26 + 8;
  long long v28 = (_OWORD *)((unint64_t)&a1[v27] & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = (unint64_t)&a2[v27];
  unint64_t v30 = (v29 & 0xFFFFFFFFFFFFFFF8) + 23;
  *long long v28 = *(_OWORD *)(v29 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v31 = (_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  v30 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v31 = *(_OWORD *)v30;
  swift_release();
  uint64_t v32 = (_OWORD *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (_OWORD *)((v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v32 = *v33;
  swift_release();
  char v34 = (void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v35 = (void *)(((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v34 = *v35;
  swift_release();
  uint64_t v36 = (_OWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v37 = (_OWORD *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v36 = *v37;
  swift_release();
  long long v38 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v38 = *v39;
  swift_release();
  v38[1] = v39[1];
  swift_release();
  void v38[2] = v39[2];
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v38 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v39 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlinePrimitive(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(void *)(*(void *)(v5 - 8) + 64) > v6) {
    unint64_t v6 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v9 = (((((((((((((v6 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  uint64_t v10 = v9 & 0xFFFFFFF8;
  unsigned int v11 = a2 - 2147483646;
  if ((v9 & 0xFFFFFFF8) != 0) {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v13 = 1;
  }
  else {
    int v13 = v12;
  }
  if (v13 == 4)
  {
    int v14 = *(_DWORD *)((char *)a1 + v9);
    if (!v14) {
      goto LABEL_5;
    }
  }
  else if (v13 == 2)
  {
    int v14 = *(unsigned __int16 *)((char *)a1 + v9);
    if (!v14) {
      goto LABEL_5;
    }
  }
  else
  {
    int v14 = *((unsigned __int8 *)a1 + v9);
    if (!v14)
    {
LABEL_5:
      unint64_t v7 = *(void *)(((unint64_t)a1 + v6 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v7 >= 0xFFFFFFFF) {
        LODWORD(v7) = -1;
      }
      return (v7 + 1);
    }
  }
  int v15 = v14 - 1;
  if (v10)
  {
    int v15 = 0;
    LODWORD(v10) = *a1;
  }
  return (v10 | v15) ^ 0x80000000;
}

void storeEnumTagSinglePayload for OutlinePrimitive(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(void *)(*(void *)(v7 - 8) + 64) > v8) {
    unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  size_t v9 = (((((((((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 31) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  if (a3 < 0)
  {
    unsigned int v11 = a3 - 2147483646;
    if ((((((((((((((v8 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
      unsigned int v11 = 2;
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v10 = 1;
    }
    else {
      int v10 = v12;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v10 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v10)
      {
        case 1:
          *((unsigned char *)a1 + v9) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)((char *)a1 + v9) = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(unsigned int *)((char *)a1 + v9) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)(((unint64_t)a1 + v8 + 8) & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if ((((((((((((((v8 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v13 = a2 - 0x7FFFFFFF;
  else {
    int v13 = 1;
  }
  if ((((((((((((((v8 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)
       + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    bzero(a1, v9);
    *a1 = a2 ^ 0x80000000;
  }
  switch(v10)
  {
    case 1:
      *((unsigned char *)a1 + v9) = v13;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v9) = v13;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x1880729D0);
    case 4:
      *(unsigned int *)((char *)a1 + v9) = v13;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for OutlinePrimitive()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for OutlinePrimitive.Base()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for OutlinePrimitive.Base()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for OutlinePrimitive.Base(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
    uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  uint64_t v10 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v7 + 80));
  if (v10 <= 7
    && (unint64_t)(v9 + 1) <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0)
  {
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_21;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_21:
          int v18 = (v17 | (v15 << (8 * v9))) + 2;
          unsigned int v14 = v17 + 2;
          if (v9 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v5);
      *((unsigned char *)a1 + v9) = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v13 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for OutlinePrimitive.Base(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  if (v5 <= *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)) {
    unint64_t v5 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_12:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1) {
    uint64_t v11 = *(void *)(v3 - 8);
  }
  else {
    uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  }
  if (v6 == 1) {
    uint64_t v12 = v3;
  }
  else {
    uint64_t v12 = AssociatedTypeWitness;
  }
  uint64_t v13 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v11 + 8);

  return v13(a1, v12);
}

uint64_t initializeWithCopy for OutlinePrimitive.Base(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v7 + 64)) {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  BOOL v14 = v9 == 1;
  if (v9 == 1)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v15 = v5;
  }
  else
  {
    uint64_t v15 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v15);
  *(unsigned char *)(a1 + v8) = v14;
  return a1;
}

unsigned __int8 *assignWithCopy for OutlinePrimitive.Base(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v7 = AssociatedTypeWitness;
    uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v9 = *(void *)(v5 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
      uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      uint64_t v10 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v5 - 8);
    }
    else {
      uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = v5;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v8;
    }
    if (v18 == 1) {
      uint64_t v25 = v5;
    }
    else {
      uint64_t v25 = v7;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 16))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t initializeWithTake for OutlinePrimitive.Base(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v7 + 64)) {
    uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    uint64_t v8 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_13;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_13:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  BOOL v14 = v9 == 1;
  if (v9 == 1)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v15 = v5;
  }
  else
  {
    uint64_t v15 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v15);
  *(unsigned char *)(a1 + v8) = v14;
  return a1;
}

unsigned __int8 *assignWithTake for OutlinePrimitive.Base(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v7 = AssociatedTypeWitness;
    uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v9 = *(void *)(v5 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v8 + 64)) {
      uint64_t v10 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      uint64_t v10 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(v5 - 8);
    }
    else {
      uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = v5;
    }
    else {
      uint64_t v17 = AssociatedTypeWitness;
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_31;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_31:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    BOOL v23 = v18 == 1;
    if (v18 == 1) {
      uint64_t v24 = v9;
    }
    else {
      uint64_t v24 = v8;
    }
    if (v18 == 1) {
      uint64_t v25 = v5;
    }
    else {
      uint64_t v25 = v7;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v24 + 32))(a1, a2, v25);
    a1[v10] = v23;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for OutlinePrimitive.Base(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 254) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 < 2)
    {
LABEL_22:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 2) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_22;
  }
LABEL_14:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 255;
}

void storeEnumTagSinglePayload for OutlinePrimitive.Base(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  unint64_t v8 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(void *)(*(void *)(v7 - 8) + 64) > v8) {
    unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xFF)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v11 = a2 - 255;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v8 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x188073AA8);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v8] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for OutlinePrimitive.Base(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (*(void *)(*(void *)(v3 - 8) + 64) > v4) {
    unint64_t v4 = *(void *)(*(void *)(v3 - 8) + 64);
  }
  uint64_t result = a1[v4];
  if (result >= 2)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | ((result - 2) << (8 * v4))) + 2;
        unsigned int v9 = v7 + 2;
        if (v4 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for OutlinePrimitive.Base(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (a2 > 1)
  {
    if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
      size_t v8 = *(void *)(v6 + 64);
    }
    else {
      size_t v8 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    unsigned int v9 = a2 - 2;
    if (v8 < 4)
    {
      unsigned int v10 = v9 >> (8 * v8);
      int v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 2;
      bzero(a1, v8);
      if (v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 2;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    unint64_t v7 = *(void *)(v6 + 64);
    if (*(void *)(*(void *)(v5 - 8) + 64) > v7) {
      unint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
    }
    a1[v7] = a2;
  }
}

uint64_t associated type witness table accessor for View.Body : View in <> OutlinePrimitive<A, B, C, D, E>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16 = type metadata accessor for OutlinePrimitive.Base();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a9, a1, v16);
  unsigned int v18 = (int *)type metadata accessor for OutlinePrimitive();
  *(void *)(a9 + v18[22]) = a2;
  unsigned int v19 = (void *)(a9 + v18[23]);
  *unsigned int v19 = a3;
  v19[1] = a4;
  uint64_t v20 = (void *)(a9 + v18[24]);
  *uint64_t v20 = a5;
  v20[1] = a6;
  v20[2] = a7;
  int v21 = (void *)(a9 + v18[19]);
  *int v21 = a8;
  v21[1] = a10;
  int v22 = (void *)(a9 + v18[20]);
  *int v22 = a11;
  v22[1] = a12;
  BOOL v23 = (void *)(a9 + v18[21]);
  *BOOL v23 = a13;
  v23[1] = a14;
  uint64_t v24 = dynamicContentID++;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
  *(void *)(a9 + v18[25]) = v24;
  return result;
}

uint64_t OutlinePrimitive.Base.count.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  unsigned int v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v10, v2);
    uint64_t v11 = dispatch thunk of Collection.count.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a1);
    return 1;
  }
  return v11;
}

uint64_t OutlinePrimitive.Base.itemAt(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)v34 - v8;
  uint64_t v37 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (OutlinePrimitive.Base.count.getter(a2) <= a1)
  {
    uint64_t v28 = swift_getAssociatedTypeWitness();
    unint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
    uint64_t v30 = v28;
    uint64_t v31 = v38;
    return v29(v31, 1, 1, v30);
  }
  else
  {
    v34[1] = a1;
    uint64_t v35 = AssociatedTypeWitness;
    uint64_t v18 = v37;
    uint64_t v17 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v3, a2);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v19 = v18;
      uint64_t v20 = v12;
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v12, v16, v6);
      int v21 = v9;
      Collection.index(atOffset:)();
      int v22 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v24 = v23;
      uint64_t v25 = swift_getAssociatedTypeWitness();
      uint64_t v26 = *(void *)(v25 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v17, v24, v25);
      v22(v39, 0);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v35);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v6);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v17, 0, 1, v25);
    }
    else
    {
      uint64_t v32 = swift_getAssociatedTypeWitness();
      uint64_t v33 = *(void *)(v32 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v17, v16, v32);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v17, 0, 1, v32);
    }
  }
}

uint64_t OutlinePrimitive.$expandedElements.getter()
{
  type metadata accessor for Set();
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  return v1;
}

uint64_t OutlinePrimitive<>.ExpansionProjection.get(base:)()
{
  return Set.contains(_:)();
}

uint64_t OutlinePrimitive<>.ExpansionProjection.set(base:newValue:)(uint64_t a1, char a2, uint64_t a3)
{
  v19[1] = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v19 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v19 - v16;
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v3, v5, v15);
    type metadata accessor for Set();
    Set.insert(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v17, v5);
  }
  else
  {
    type metadata accessor for Set();
    Set.remove(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t OutlinePrimitive<>.ExpansionProjection.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static OutlinePrimitive<>.ExpansionProjection.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int OutlinePrimitive<>.ExpansionProjection.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance OutlinePrimitive<A, B, C, D, E><>.ExpansionProjection@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = OutlinePrimitive<>.ExpansionProjection.get(base:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance OutlinePrimitive<A, B, C, D, E><>.ExpansionProjection(uint64_t a1, char *a2, uint64_t a3)
{
  return OutlinePrimitive<>.ExpansionProjection.set(base:newValue:)(a1, *a2, a3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OutlinePrimitive<A, B, C, D, E><>.ExpansionProjection()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OutlinePrimitive<A, B, C, D, E><>.ExpansionProjection()
{
  return static OutlinePrimitive<>.ExpansionProjection.== infix(_:_:)() & 1;
}

uint64_t OutlinePrimitive<>.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 32);
  long long v17 = *(_OWORD *)(a1 + 16);
  long long v18 = v17;
  long long v19 = v6;
  uint64_t v20 = v5;
  long long v16 = *(_OWORD *)(a1 + 56);
  long long v21 = v16;
  uint64_t v7 = type metadata accessor for OutlinePrimitive.Base();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v16 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v16 - v10, v3, v7, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v11, v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
}

uint64_t OutlinePrimitive<>.nodes.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 32);
  v16[0] = *(_OWORD *)(a1 + 16);
  v16[1] = v16[0];
  long long v7 = *(_OWORD *)(a1 + 48);
  void v16[2] = v6;
  void v16[3] = v7;
  uint64_t v17 = v5;
  uint64_t v8 = type metadata accessor for OutlinePrimitive.Base();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v16 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)v16 - v11, v3, v8, v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    (*(void (**)(uint64_t, char *))(v13 + 32))(a2, v12);
    uint64_t v14 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v13 = *(void *)(*(void *)&v16[0] - 8);
    uint64_t v14 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v13 + 56))(a2, v14, 1, *(void *)&v16[0]);
}

uint64_t OutlinePrimitive<>.body.getter@<X0>(int *a1@<X0>, ValueMetadata *a2@<X1>, _UNKNOWN **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v301 = a4;
  char v316 = a3;
  char v317 = a1;
  uint64_t v293 = a5;
  uint64_t v245 = *((void *)a1 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v243 = v7;
  uint64_t v244 = (char *)&v240 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v8[2];
  uint64_t v10 = v8[3];
  uint64_t v11 = v8[8];
  char v300 = (ValueMetadata *)v8[7];
  uint64_t v414 = v9;
  uint64_t v415 = v10;
  v416 = v8;
  v417 = v300;
  uint64_t v418 = v11;
  uint64_t v12 = type metadata accessor for ForEach();
  uint64_t v248 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  v247 = (char *)&v240 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  Swift::Int v246 = (char *)&v240 - v15;
  type metadata accessor for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>();
  uint64_t v304 = v12;
  uint64_t v274 = v16;
  uint64_t v313 = type metadata accessor for _ConditionalContent();
  uint64_t v275 = *(void *)(v313 - 8);
  MEMORY[0x1F4188790](v313);
  uint64_t v288 = (uint64_t)&v240 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  double v287 = (char *)&v240 - v19;
  uint64_t v20 = (ValueMetadata *)*((void *)a1 + 5);
  uint64_t v21 = type metadata accessor for HStack();
  uint64_t v414 = MEMORY[0x1E4F405F8];
  uint64_t v415 = (uint64_t)v20;
  uint64_t v297 = v21;
  v416 = (void *)v21;
  v417 = (ValueMetadata *)MEMORY[0x1E4F405F0];
  uint64_t v22 = type metadata accessor for StaticIf();
  uint64_t v266 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  int64_t v265 = (char *)&v240 - v23;
  type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>();
  uint64_t v312 = v22;
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v268 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  long long v267 = (char *)&v240 - v25;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v318 = type metadata accessor for _TraitWritingModifier();
  uint64_t v311 = v24;
  uint64_t v26 = type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v424 = v11;
  swift_getWitnessTable();
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for _TraitWritingModifier();
  uint64_t v310 = v26;
  uint64_t v315 = type metadata accessor for ModifiedContent();
  uint64_t v271 = *(void *)(v315 - 8);
  MEMORY[0x1F4188790](v315);
  uint64_t v270 = (uint64_t)&v240 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  v269 = (char *)&v240 - v30;
  uint64_t v285 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v31);
  unint64_t v284 = (char *)&v240 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (void *)*((void *)a1 + 4);
  char v34 = (void *)*((void *)a1 + 6);
  uint64_t v414 = v9;
  uint64_t v415 = v10;
  uint64_t v295 = v10;
  uint64_t v296 = v11;
  v416 = v33;
  v417 = v20;
  double v281 = v20;
  uint64_t v35 = v300;
  uint64_t v36 = v301;
  uint64_t v418 = (uint64_t)v34;
  v419 = v300;
  uint64_t v420 = v11;
  unint64_t v421 = (unint64_t)a2;
  uint64_t v37 = v316;
  v422 = v316;
  uint64_t v423 = v301;
  uint64_t v255 = type metadata accessor for OutlinePrimitive<>.ExpansionProjection();
  uint64_t v253 = *(void *)(v255 - 8);
  MEMORY[0x1F4188790](v255);
  BOOL v251 = (char *)&v240 - v38;
  uint64_t v273 = *((void *)v35->Description + 1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v414 = AssociatedTypeWitness;
  uint64_t v415 = (uint64_t)v33;
  v416 = v34;
  v417 = a2;
  uint64_t v418 = v36;
  uint64_t v40 = type metadata accessor for _OutlineGenerator_Configuration();
  MEMORY[0x1F4188790](v40 - 8);
  uint64_t v257 = (uint64_t)&v240 - v41;
  uint64_t v414 = AssociatedTypeWitness;
  uint64_t v415 = (uint64_t)v33;
  v416 = v34;
  v417 = a2;
  uint64_t v418 = v36;
  uint64_t v42 = type metadata accessor for _OutlineGenerator_Configuration.Subtree();
  unint64_t v43 = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  uint64_t v414 = AssociatedTypeWitness;
  uint64_t v415 = (uint64_t)v33;
  uint64_t v279 = v33;
  uint64_t v280 = v34;
  v416 = v34;
  v417 = &type metadata for OutlineSubgroupChildren;
  uint64_t v418 = v42;
  v419 = a2;
  uint64_t v420 = v36;
  unint64_t v421 = v43;
  unint64_t v252 = v43;
  v422 = &protocol witness table for _OutlineGenerator_Configuration<A, B, C>.Subtree;
  uint64_t v44 = type metadata accessor for OutlineGenerator();
  uint64_t v260 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v259 = (uint64_t)&v240 - v45;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v282 = a2;
  v411 = a2;
  v412 = v37;
  uint64_t v413 = v36;
  uint64_t v47 = (uint64_t)v317;
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v261 = v42;
  uint64_t v414 = v42;
  uint64_t v415 = v47;
  uint64_t v254 = WitnessTable;
  v416 = (void *)WitnessTable;
  v417 = (ValueMetadata *)v48;
  uint64_t v306 = v48;
  type metadata accessor for StaticSourceWriter();
  uint64_t v308 = v44;
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v258 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  char v256 = (char *)&v240 - v50;
  uint64_t v314 = v51;
  uint64_t v307 = type metadata accessor for ModifiedContent();
  uint64_t v309 = v27;
  uint64_t v52 = type metadata accessor for ModifiedContent();
  uint64_t v264 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v263 = (uint64_t)&v240 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v54);
  uint64_t v262 = (char *)&v240 - v55;
  uint64_t v56 = type metadata accessor for Optional();
  uint64_t v249 = *(void *)(v56 - 8);
  uint64_t v250 = v56;
  MEMORY[0x1F4188790](v56);
  long long v58 = (char *)&v240 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v59);
  long long v61 = (char *)&v240 - v60;
  uint64_t v305 = v9;
  uint64_t v299 = *(uint64_t **)(v9 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v272 = (char *)&v240 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v64);
  unint64_t v286 = (char *)&v240 - v65;
  MEMORY[0x1F4188790](v66);
  char v283 = (char *)&v240 - v67;
  uint64_t v303 = v52;
  uint64_t v68 = type metadata accessor for _ConditionalContent();
  uint64_t v278 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  long long v277 = (char *)&v240 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v70);
  uint64_t v294 = (char *)&v240 - v71;
  uint64_t v72 = type metadata accessor for Optional();
  uint64_t v73 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](v72);
  CGRect v75 = (char *)&v240 - v74;
  uint64_t v76 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v77);
  uint64_t v276 = (uint64_t)&v240 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v79);
  uint64_t v302 = (char *)&v240 - v80;
  uint64_t v292 = v68;
  uint64_t v81 = type metadata accessor for _ConditionalContent();
  uint64_t v290 = *(void *)(v81 - 8);
  uint64_t v291 = v81;
  MEMORY[0x1F4188790](v81);
  uint64_t v289 = (char *)&v240 - v82;
  uint64_t v83 = v47;
  uint64_t v84 = v298;
  OutlinePrimitive<>.root.getter(v83, (uint64_t)v75);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48))(v75, 1, AssociatedTypeWitness) != 1)
  {
    uint64_t v93 = v302;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v302, v75, AssociatedTypeWitness);
    (*(void (**)(char *))&v84[v317[23]])(v93);
    char v94 = v299;
    uint64_t v95 = v305;
    int v96 = ((uint64_t (*)(char *, uint64_t, uint64_t))v299[6])(v61, 1, v305);
    uint64_t v97 = v84;
    uint64_t v241 = AssociatedTypeWitness;
    uint64_t v242 = v76;
    if (v96 == 1)
    {
      uint64_t v98 = (*(uint64_t (**)(char *, uint64_t))(v249 + 8))(v61, v250);
      uint64_t v299 = &v240;
      MEMORY[0x1F4188790](v98);
      uint64_t v99 = v295;
      *(&v240 - 12) = v95;
      *(&v240 - 11) = v99;
      long long v100 = v279;
      uint64_t v101 = (uint64_t)v280;
      char v102 = v281;
      *(&v240 - 10) = (uint64_t)v279;
      *(&v240 - 9) = (uint64_t)v102;
      char v103 = v300;
      *(&v240 - 8) = v101;
      *(&v240 - 7) = (uint64_t)v103;
      uint64_t v104 = v316;
      uint64_t v105 = v302;
      MEMORY[0x1F4188790](v100);
      *(&v240 - 12) = v95;
      *(&v240 - 11) = v99;
      *(&v240 - 10) = v106;
      *(&v240 - 9) = (uint64_t)v102;
      *(&v240 - 8) = v108;
      *(&v240 - 7) = v107;
      uint64_t v234 = v109;
      uint64_t v235 = v110;
      uint64_t v239 = v105;
      uint64_t v111 = swift_getWitnessTable();
      unint64_t v237 = v104;
      uint64_t v238 = v111;
      uint64_t v236 = (_UNKNOWN **)MEMORY[0x1E4F405F0];
      uint64_t v112 = v265;
      StaticIf<>.init(_:then:else:)();
      LOBYTE(v414) = 1;
      long long v367 = v104;
      uint64_t v368 = v111;
      uint64_t v113 = v312;
      uint64_t v114 = swift_getWitnessTable();
      char v115 = v267;
      View._trait<A>(_:_:)();
      (*(void (**)(char *, uint64_t))(v266 + 8))(v112, v113);
      uint64_t v116 = (uint64_t)v284;
      swift_getAtKeyPath();
      unint64_t IsLeafTrait = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
      uint64_t v365 = v114;
      unint64_t v366 = IsLeafTrait;
      uint64_t v118 = v311;
      uint64_t v119 = swift_getWitnessTable();
      uint64_t v120 = v270;
      View.tag<A>(_:includeOptional:)(v116, 1, v118, v99, v119, v296, v270);
      (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v116, v99);
      (*(void (**)(char *, uint64_t))(v268 + 8))(v115, v118);
      char v317 = (int *)swift_getWitnessTable();
      uint64_t v363 = v119;
      uint64_t v364 = (uint64_t)v317;
      uint64_t v121 = swift_getWitnessTable();
      uint64_t v122 = swift_getWitnessTable();
      uint64_t v361 = v121;
      uint64_t v362 = v122;
      uint64_t v123 = v315;
      swift_getWitnessTable();
      uint64_t v124 = v269;
      static ViewBuilder.buildExpression<A>(_:)(v120);
      Swift::Int v125 = *(void (**)(uint64_t, uint64_t))(v271 + 8);
      v125(v120, v123);
      static ViewBuilder.buildExpression<A>(_:)(v124);
      uint64_t v359 = swift_getWitnessTable();
      long long v360 = &protocol witness table for StaticSourceWriter<A, B>;
      uint64_t v357 = swift_getWitnessTable();
      uint64_t v358 = (uint64_t)v317;
      uint64_t v355 = swift_getWitnessTable();
      uint64_t v356 = v122;
      uint64_t v126 = v303;
      swift_getWitnessTable();
      static ViewBuilder.buildEither<A, B>(second:)(v120, v126, v123);
      v125(v120, v123);
      v125((uint64_t)v124, v123);
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v94[4])(v283, v61, v95);
      (*(void (**)(uint64_t, char *, uint64_t))(v76 + 16))(v276, v302, AssociatedTypeWitness);
      unint64_t v127 = v317;
      uint64_t v414 = OutlinePrimitive.$expandedElements.getter();
      uint64_t v415 = v128;
      v416 = v129;
      uint64_t v288 = v127[22];
      unint64_t v130 = v284;
      swift_getAtKeyPath();
      unint64_t v131 = v251;
      (*(void (**)(char *, char *, uint64_t))(v285 + 32))(v251, v130, v295);
      type metadata accessor for Set();
      type metadata accessor for Binding();
      uint64_t v132 = v97;
      uint64_t v133 = v255;
      swift_getWitnessTable();
      Binding.projecting<A>(_:)();
      (*(void (**)(char *, uint64_t))(v253 + 8))(v131, v133);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      char v134 = (uint64_t *)&v97[v127[21]];
      uint64_t v135 = *v134;
      uint64_t v136 = v134[1];
      char v137 = (uint64_t *)&v132[v127[19]];
      uint64_t v138 = (_UNKNOWN **)v301;
      char v139 = v282;
      uint64_t v140 = (uint64_t)v280;
      uint64_t v141 = AssociatedTypeWitness;
      uint64_t v142 = v279;
      uint64_t v143 = v257;
      _OutlineGenerator_Configuration.init(element:isExpanded:grouping:parentContent:)(v276, v333, v334, v335, v135, v136, *v137, v137[1], v257, v141);
      swift_retain();
      swift_retain();
      uint64_t v144 = v259;
      uint64_t v145 = OutlineGenerator<>.init(configuration:)(v143, v141, v259);
      MEMORY[0x1F4188790](v145);
      uint64_t v146 = v295;
      uint64_t v147 = v296;
      *(&v240 - 12) = v305;
      *(&v240 - 11) = v146;
      uint64_t v148 = v281;
      *(&v240 - 10) = (uint64_t)v142;
      *(&v240 - 9) = (uint64_t)v148;
      char v149 = v300;
      *(&v240 - 8) = v140;
      *(&v240 - 7) = (uint64_t)v149;
      uint64_t v234 = v147;
      uint64_t v235 = v139;
      uint64_t v236 = v316;
      unint64_t v237 = v138;
      uint64_t v239 = v298;
      uint64_t v150 = v308;
      uint64_t v151 = swift_getWitnessTable();
      uint64_t v238 = v306;
      uint64_t v152 = v256;
      View.viewAlias<A, B>(_:_:)(v261, (void (*)(double))partial apply for closure #1 in OutlinePrimitive<>.body.getter, (uint64_t)(&v240 - 14), v150, v261, (uint64_t)v317, v151);
      (*(void (**)(uint64_t, uint64_t))(v260 + 8))(v144, v150);
      uint64_t v153 = (uint64_t)v284;
      swift_getAtKeyPath();
      uint64_t v331 = v151;
      uint64_t v332 = &protocol witness table for StaticSourceWriter<A, B>;
      uint64_t v154 = v314;
      uint64_t v155 = swift_getWitnessTable();
      uint64_t v156 = v263;
      uint64_t v157 = v295;
      View.tag<A>(_:includeOptional:)(v153, 1, v154, v295, v155, v147, v263);
      (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v153, v157);
      (*(void (**)(char *, uint64_t))(v258 + 8))(v152, v154);
      char v317 = (int *)swift_getWitnessTable();
      uint64_t v329 = v155;
      uint64_t v330 = (uint64_t)v317;
      uint64_t v158 = swift_getWitnessTable();
      uint64_t v159 = swift_getWitnessTable();
      uint64_t v327 = v158;
      uint64_t v328 = v159;
      uint64_t v160 = v303;
      swift_getWitnessTable();
      uint64_t v161 = v262;
      static ViewBuilder.buildExpression<A>(_:)(v156);
      char v162 = *(void (**)(uint64_t, uint64_t))(v264 + 8);
      v162(v156, v160);
      uint64_t v163 = v156;
      static ViewBuilder.buildExpression<A>(_:)(v161);
      uint64_t v164 = swift_getWitnessTable();
      uint64_t v325 = v316;
      uint64_t v326 = v164;
      uint64_t v165 = swift_getWitnessTable();
      unint64_t v166 = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
      uint64_t v323 = v165;
      unint64_t v324 = v166;
      uint64_t v321 = swift_getWitnessTable();
      uint64_t v322 = (uint64_t)v317;
      uint64_t v319 = swift_getWitnessTable();
      uint64_t v320 = v159;
      swift_getWitnessTable();
      static ViewBuilder.buildEither<A, B>(first:)(v163, v160);
      v162(v163, v160);
      v162((uint64_t)v161, v160);
      ((void (*)(char *, uint64_t))v299[1])(v283, v305);
    }
    uint64_t v353 = swift_getWitnessTable();
    uint64_t v354 = &protocol witness table for StaticSourceWriter<A, B>;
    uint64_t v167 = swift_getWitnessTable();
    uint64_t v168 = swift_getWitnessTable();
    uint64_t v351 = v167;
    uint64_t v352 = v168;
    uint64_t v169 = swift_getWitnessTable();
    uint64_t v170 = swift_getWitnessTable();
    uint64_t v349 = v169;
    uint64_t v350 = v170;
    uint64_t v171 = swift_getWitnessTable();
    uint64_t v172 = swift_getWitnessTable();
    uint64_t v173 = v316;
    uint64_t v347 = v316;
    uint64_t v348 = v172;
    uint64_t v174 = swift_getWitnessTable();
    unint64_t v175 = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
    uint64_t v345 = v174;
    char v176 = v173;
    unint64_t v346 = v175;
    uint64_t v343 = swift_getWitnessTable();
    uint64_t v344 = v168;
    uint64_t v341 = swift_getWitnessTable();
    uint64_t v342 = v170;
    uint64_t v177 = swift_getWitnessTable();
    uint64_t v339 = v171;
    uint64_t v340 = v177;
    uint64_t v178 = v292;
    swift_getWitnessTable();
    uint64_t v179 = (uint64_t)v277;
    unint64_t v180 = v294;
    static ViewBuilder.buildExpression<A>(_:)(v294);
    uint64_t v338 = v306;
    uint64_t v181 = swift_getWitnessTable();
    unint64_t v182 = lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>();
    uint64_t v336 = v181;
    unint64_t v337 = v182;
    swift_getWitnessTable();
    unint64_t v183 = v289;
    static ViewBuilder.buildEither<A, B>(first:)(v179, v178);
    int v184 = *(void (**)(uint64_t, uint64_t))(v278 + 8);
    v184(v179, v178);
    double v185 = v180;
    unint64_t v186 = v183;
    v184((uint64_t)v185, v178);
    (*(void (**)(char *, uint64_t))(v242 + 8))(v302, v241);
    goto LABEL_11;
  }
  (*(void (**)(char *, uint64_t))(v73 + 8))(v75, v72);
  OutlinePrimitive<>.nodes.getter((uint64_t)v317, (uint64_t)v58);
  uint64_t v85 = v299;
  uint64_t v86 = v305;
  uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v299[6])(v58, 1, v305);
  if (result != 1)
  {
    uint64_t v88 = v84;
    char v89 = v286;
    ((void (*)(char *, char *, uint64_t))v85[4])(v286, v58, v86);
    if (dispatch thunk of Collection.isEmpty.getter())
    {
      LOBYTE(v414) = 1;
      uint64_t v90 = v306;
      uint64_t v369 = v306;
      uint64_t v91 = v304;
      swift_getWitnessTable();
      lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>();
      uint64_t v92 = v287;
      static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v414, v91, v274);
    }
    else
    {
      uint64_t v187 = v86;
      ((void (*)(char *, char *, uint64_t))v85[2])(v272, v89, v86);
      uint64_t v188 = (uint64_t)v317;
      uint64_t v189 = v244;
      uint64_t v190 = v245;
      (*(void (**)(char *, char *, int *))(v245 + 16))(v244, v88, v317);
      unint64_t v191 = (*(unsigned __int8 *)(v190 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v190 + 80);
      uint64_t v192 = (char *)swift_allocObject();
      uint64_t v193 = v295;
      uint64_t v194 = v296;
      *((void *)v192 + 2) = v187;
      *((void *)v192 + 3) = v193;
      uint64_t v195 = v281;
      *((void *)v192 + 4) = v279;
      *((void *)v192 + 5) = v195;
      uint64_t v196 = v300;
      *((void *)v192 + 6) = v280;
      *((void *)v192 + 7) = v196;
      BOOL v197 = v282;
      *((void *)v192 + 8) = v194;
      *((void *)v192 + 9) = v197;
      uint64_t v198 = v301;
      *((void *)v192 + 10) = v316;
      *((void *)v192 + 11) = v198;
      (*(void (**)(char *, char *, uint64_t))(v190 + 32))(&v192[v191], v189, v188);
      swift_retain();
      uint64_t v90 = v306;
      uint64_t v238 = v306;
      uint64_t v199 = (uint64_t)v247;
      ForEach<>.init(_:id:content:)();
      uint64_t v410 = v90;
      uint64_t v200 = v304;
      swift_getWitnessTable();
      uint64_t v201 = v246;
      static ViewBuilder.buildExpression<A>(_:)(v199);
      uint64_t v202 = *(void (**)(uint64_t, uint64_t))(v248 + 8);
      v202(v199, v200);
      static ViewBuilder.buildExpression<A>(_:)(v201);
      lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>();
      uint64_t v92 = v287;
      static ViewBuilder.buildEither<A, B>(first:)(v199, v200);
      v202(v199, v200);
      v202((uint64_t)v201, v200);
    }
    uint64_t v409 = v90;
    uint64_t v203 = swift_getWitnessTable();
    unint64_t v204 = lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>();
    uint64_t v407 = v203;
    unint64_t v408 = v204;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v92);
    uint64_t v405 = swift_getWitnessTable();
    v406 = &protocol witness table for StaticSourceWriter<A, B>;
    uint64_t v205 = swift_getWitnessTable();
    uint64_t v206 = swift_getWitnessTable();
    uint64_t v403 = v205;
    uint64_t v404 = v206;
    uint64_t v207 = swift_getWitnessTable();
    uint64_t v208 = swift_getWitnessTable();
    uint64_t v401 = v207;
    uint64_t v402 = v208;
    uint64_t v209 = swift_getWitnessTable();
    uint64_t v210 = swift_getWitnessTable();
    uint64_t v211 = v316;
    v399 = v316;
    uint64_t v400 = v210;
    uint64_t v212 = swift_getWitnessTable();
    unint64_t v213 = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
    uint64_t v397 = v212;
    unint64_t v398 = v213;
    uint64_t v395 = swift_getWitnessTable();
    uint64_t v396 = v206;
    uint64_t v393 = swift_getWitnessTable();
    uint64_t v394 = v208;
    uint64_t v214 = v313;
    uint64_t v215 = swift_getWitnessTable();
    uint64_t v391 = v209;
    uint64_t v392 = v215;
    uint64_t v216 = v292;
    swift_getWitnessTable();
    uint64_t v218 = v288;
    uint64_t v217 = v289;
    static ViewBuilder.buildEither<A, B>(second:)(v288, v216, v214);
    uint64_t v219 = *(void (**)(uint64_t, uint64_t))(v275 + 8);
    v219(v218, v214);
    v219((uint64_t)v287, v214);
    ((void (*)(char *, uint64_t))v299[1])(v286, v305);
    char v176 = v211;
    unint64_t v186 = v217;
LABEL_11:
    uint64_t v389 = swift_getWitnessTable();
    v390 = &protocol witness table for StaticSourceWriter<A, B>;
    uint64_t v220 = swift_getWitnessTable();
    uint64_t v221 = swift_getWitnessTable();
    uint64_t v387 = v220;
    uint64_t v388 = v221;
    uint64_t v222 = swift_getWitnessTable();
    uint64_t v223 = swift_getWitnessTable();
    uint64_t v385 = v222;
    uint64_t v386 = v223;
    uint64_t v224 = swift_getWitnessTable();
    uint64_t v225 = swift_getWitnessTable();
    long long v383 = v176;
    uint64_t v384 = v225;
    uint64_t v226 = swift_getWitnessTable();
    unint64_t v227 = lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
    uint64_t v381 = v226;
    unint64_t v382 = v227;
    uint64_t v379 = swift_getWitnessTable();
    uint64_t v380 = v221;
    uint64_t v377 = swift_getWitnessTable();
    uint64_t v378 = v223;
    uint64_t v228 = swift_getWitnessTable();
    uint64_t v375 = v224;
    uint64_t v376 = v228;
    uint64_t v229 = swift_getWitnessTable();
    uint64_t v374 = v306;
    uint64_t v230 = swift_getWitnessTable();
    unint64_t v231 = lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>();
    uint64_t v372 = v230;
    unint64_t v373 = v231;
    uint64_t v232 = swift_getWitnessTable();
    uint64_t v370 = v229;
    uint64_t v371 = v232;
    uint64_t v233 = v291;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v186);
    return (*(uint64_t (**)(char *, uint64_t))(v290 + 8))(v186, v233);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in OutlinePrimitive<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12)
{
  uint64_t v51 = a1;
  uint64_t v62 = a9;
  uint64_t v61 = a12;
  long long v60 = a11;
  uint64_t v57 = a6;
  uint64_t v58 = a5;
  uint64_t v54 = a8;
  uint64_t v55 = a7;
  uint64_t v53 = a10;
  uint64_t v19 = type metadata accessor for OutlinePrimitive.Base();
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v46 - v20;
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v67 = a5;
  uint64_t v68 = a6;
  uint64_t v69 = a7;
  uint64_t v70 = a8;
  uint64_t v71 = a10;
  uint64_t v22 = (int *)type metadata accessor for OutlinePrimitive();
  uint64_t v59 = *((void *)v22 - 1);
  MEMORY[0x1F4188790](v22);
  uint64_t v52 = (uint64_t)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v56 = (char *)&v46 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 16))(v21, v51, a3, v25);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = *(void *)(a2 + v22[22]);
  uint64_t v28 = (uint64_t *)(a2 + v22[23]);
  uint64_t v29 = v28[1];
  uint64_t v51 = *v28;
  swift_retain();
  swift_retain();
  uint64_t v50 = OutlinePrimitive.$expandedElements.getter();
  uint64_t v49 = v30;
  uint64_t v48 = v31;
  uint64_t v32 = v22[20];
  uint64_t v33 = (uint64_t *)(a2 + v22[19]);
  uint64_t v34 = v33[1];
  uint64_t v47 = *v33;
  uint64_t v36 = *(void *)(a2 + v32);
  uint64_t v35 = *(void *)(a2 + v32 + 8);
  uint64_t v37 = (uint64_t *)(a2 + v22[21]);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v45 = v38;
  uint64_t v40 = v52;
  OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)((uint64_t)v21, v27, v51, v29, v50, v49, v48, v47, v52, v34, v36, v35, v39, v45);
  long long v63 = v60;
  uint64_t v64 = v61;
  swift_getWitnessTable();
  uint64_t v41 = v56;
  uint64_t v42 = v40;
  static ViewBuilder.buildExpression<A>(_:)(v40);
  unint64_t v43 = *(void (**)(uint64_t, int *))(v59 + 8);
  v43(v42, v22);
  static ViewBuilder.buildExpression<A>(_:)(v41);
  return ((uint64_t (*)(char *, int *))v43)(v41, v22);
}

uint64_t closure #3 in OutlinePrimitive<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v30 = a8;
  uint64_t v31 = a2;
  uint64_t v27 = a5;
  uint64_t v28 = a7;
  uint64_t v29 = a1;
  uint64_t v32 = a9;
  uint64_t v26 = a13;
  uint64_t v16 = type metadata accessor for HStack();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v25 - v21;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v35 = v27;
  uint64_t v36 = a6;
  uint64_t v37 = v28;
  uint64_t v38 = v30;
  uint64_t v39 = a10;
  uint64_t v40 = a11;
  uint64_t v41 = a12;
  uint64_t v42 = v26;
  uint64_t v43 = v29;
  uint64_t v44 = v31;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v17 + 8);
  v23(v19, v16);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v22, v16);
}

uint64_t closure #2 in OutlinePrimitive<>.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v25 - v13;
  v25[1] = v15;
  v25[2] = v16;
  v25[3] = v17;
  v25[4] = v18;
  v25[5] = v19;
  v25[6] = v20;
  v25[7] = v21;
  uint64_t v22 = type metadata accessor for OutlinePrimitive();
  (*(void (**)(uint64_t))(a1 + *(int *)(v22 + 80)))(a2);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  v23(v11, a6);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v23)(v14, a6);
}

uint64_t closure #4 in OutlinePrimitive<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12)
{
  uint64_t v51 = a1;
  uint64_t v60 = a9;
  uint64_t v59 = a12;
  long long v58 = a11;
  uint64_t v55 = a6;
  uint64_t v56 = a5;
  uint64_t v52 = a10;
  uint64_t v53 = a7;
  uint64_t v19 = type metadata accessor for OutlinePrimitive.Base();
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v44 - v20;
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v49 = a3;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  uint64_t v67 = a7;
  uint64_t v68 = a8;
  uint64_t v50 = a8;
  uint64_t v69 = a10;
  uint64_t v22 = (int *)type metadata accessor for OutlinePrimitive();
  uint64_t v57 = *((void *)v22 - 1);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v54 = (char *)&v44 - v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v21, v51, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = *(void *)(a2 + v22[22]);
  uint64_t v29 = (uint64_t *)(a2 + v22[23]);
  uint64_t v30 = v29[1];
  uint64_t v51 = *v29;
  swift_retain();
  swift_retain();
  uint64_t v48 = OutlinePrimitive.$expandedElements.getter();
  uint64_t v47 = v31;
  uint64_t v46 = v32;
  uint64_t v33 = v22[20];
  uint64_t v34 = (uint64_t *)(a2 + v22[19]);
  uint64_t v35 = v34[1];
  uint64_t v45 = *v34;
  uint64_t v37 = *(void *)(a2 + v33);
  uint64_t v36 = *(void *)(a2 + v33 + 8);
  uint64_t v38 = (uint64_t *)(a2 + v22[21]);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  swift_retain();
  swift_retain();
  swift_retain();
  OutlinePrimitive.init(base:id:children:expandedElements:parentContent:leafContent:grouping:)((uint64_t)v21, v28, v51, v30, v48, v47, v46, v45, (uint64_t)v24, v35, v37, v36, v40, v39);
  long long v61 = v58;
  uint64_t v62 = v59;
  swift_getWitnessTable();
  uint64_t v41 = v54;
  static ViewBuilder.buildExpression<A>(_:)(v24);
  uint64_t v42 = *(void (**)(char *, int *))(v57 + 8);
  v42(v24, v22);
  static ViewBuilder.buildExpression<A>(_:)(v41);
  return ((uint64_t (*)(char *, int *))v42)(v41, v22);
}

uint64_t protocol witness for View.body.getter in conformance <> OutlinePrimitive<A, B, C, D, E>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return OutlinePrimitive<>.body.getter(a1, *(ValueMetadata **)(a2 - 8), *(_UNKNOWN ***)(a2 - 16), *(void *)(a2 - 24), a3);
}

void type metadata accessor for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>)
  {
    type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsLeafTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsLeafTraitKey>);
    }
  }
}

uint64_t type metadata accessor for OutlinePrimitive<>.ExpansionProjection()
{
  return swift_getGenericMetadata();
}

uint64_t sub_188077958()
{
  uint64_t AssociatedTypeWitness = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for OutlinePrimitive() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  type metadata accessor for OutlinePrimitive.Base();
  if (swift_getEnumCaseMultiPayload() != 1) {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v3, AssociatedTypeWitness);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in OutlinePrimitive<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(void *)(v2 + 56);
  uint64_t v10 = *(void *)(v2 + 64);
  long long v14 = *(_OWORD *)(v2 + 72);
  uint64_t v11 = *(void *)(v2 + 88);
  uint64_t v12 = *(void *)(type metadata accessor for OutlinePrimitive() - 8);
  return closure #4 in OutlinePrimitive<>.body.getter(a1, v2 + ((*(unsigned __int8 *)(v12 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v4, v5, v6, v7, v8, v9, a2, v10, v14, v11);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>>();
    lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyView, _TraitWritingModifier<IsLeafTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsLeafTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsLeafTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #3 in OutlinePrimitive<>.body.getter()
{
  return partial apply for closure #1 in OutlinePrimitive<>.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void))closure #3 in OutlinePrimitive<>.body.getter);
}

uint64_t partial apply for closure #1 in OutlinePrimitive<>.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1(v1[12], v1[13], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t partial apply for closure #1 in OutlinePrimitive<>.body.getter()
{
  return partial apply for closure #1 in OutlinePrimitive<>.body.getter((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void))closure #1 in OutlinePrimitive<>.body.getter);
}

uint64_t partial apply for closure #2 in OutlinePrimitive<>.body.getter()
{
  return closure #2 in OutlinePrimitive<>.body.getter(v0[12], v0[13], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t type metadata completion function for OutlinePrimitive<>.ExpansionProjection()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for OutlinePrimitive<>.ExpansionProjection(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for OutlinePrimitive<>.ExpansionProjection(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1880781B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_1880781D8()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in OutlinePrimitive<A, B, C, D, E><>.ExpansionProjection()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in OutlinePrimitive<A, B, C, D, E><>.ExpansionProjection()
{
  return swift_getWitnessTable();
}

uint64_t TableRowList.visitRows<A>(applying:from:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t static TableRowBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1);
}

uint64_t specialized static TableRowContent._makeRows(content:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  long long v5 = v33;
  char v6 = v34;
  int v7 = DWORD1(v34);
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v29 = *(_OWORD *)(a2 + 96);
  long long v30 = v8;
  long long v31 = *(_OWORD *)(a2 + 128);
  uint64_t v32 = *(void *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v25 = *(_OWORD *)(a2 + 32);
  long long v26 = v9;
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v27 = *(_OWORD *)(a2 + 64);
  long long v28 = v10;
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v23 = *(_OWORD *)a2;
  long long v24 = v11;
  outlined retain of _TableRowInputs(a2);
  LOBYTE(v33) = v34;
  specialized static TableRowContent.makeContent(content:inputs:fields:)();
  long long v12 = v33;
  char v13 = v34;
  long long v39 = v29;
  long long v40 = v30;
  long long v41 = v31;
  uint64_t v42 = v32;
  long long v35 = v25;
  long long v36 = v26;
  long long v37 = v27;
  long long v38 = v28;
  long long v33 = v23;
  long long v34 = v24;
  outlined retain of _TableRowInputs((uint64_t)&v33);
  specialized static TableRowContent._makeRows(content:inputs:)(&v18, v18, &v33);
  outlined release of _TableRowInputs((uint64_t)&v33);
  uint64_t v14 = v18;
  int v15 = DWORD2(v18);
  if ((v13 & 1) == 0)
  {
    long long v22 = v12;
    int v21 = a1;
    long long v18 = v5;
    char v19 = v6;
    int v20 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v33);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v14;
  *(_DWORD *)(a3 + 8) = v15;
  return result;
}

uint64_t static TableRowContent._makeRows(content:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[7];
  long long v50 = a2[6];
  long long v51 = v4;
  long long v52 = a2[8];
  uint64_t v53 = *((void *)a2 + 18);
  long long v5 = a2[3];
  long long v46 = a2[2];
  long long v47 = v5;
  long long v6 = a2[5];
  long long v48 = a2[4];
  long long v49 = v6;
  long long v7 = a2[1];
  long long v44 = *a2;
  long long v45 = v7;
  static DynamicPropertyCache.fields(of:)();
  long long v8 = v54;
  char v9 = v55;
  int v10 = DWORD1(v55);
  long long v40 = v50;
  long long v41 = v51;
  long long v42 = v52;
  uint64_t v43 = v53;
  long long v36 = v46;
  long long v37 = v47;
  long long v38 = v48;
  long long v39 = v49;
  long long v34 = v44;
  long long v35 = v45;
  int v19 = v3;
  LODWORD(v21) = v3;
  outlined retain of _TableRowInputs((uint64_t)&v44);
  static TableRowContent.makeContent(content:inputs:fields:)();
  uint64_t v11 = *((void *)&v23 + 1);
  uint64_t v18 = v23;
  char v12 = v24;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v60 = v40;
  long long v61 = v41;
  long long v62 = v42;
  long long v56 = v36;
  long long v57 = v37;
  long long v58 = v38;
  long long v59 = v39;
  long long v54 = v34;
  long long v55 = v35;
  long long v29 = v40;
  long long v30 = v41;
  long long v31 = v42;
  long long v25 = v36;
  long long v26 = v37;
  long long v27 = v38;
  long long v28 = v39;
  uint64_t v63 = v43;
  uint64_t v32 = v43;
  long long v23 = v34;
  long long v24 = v35;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, int *, long long *, uint64_t, uint64_t))(AssociatedConformanceWitness + 48))(&v21, &v33, &v23, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v15 = v21;
  int v16 = v22;
  if ((v12 & 1) == 0)
  {
    uint64_t v21 = v18;
    uint64_t v22 = v11;
    int v33 = v19;
    long long v23 = v8;
    LOBYTE(v24) = v9;
    DWORD1(v24) = v10;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v54);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v15;
  *(_DWORD *)(a3 + 8) = v16;
  return result;
}

uint64_t static TableRowContent._tableRowCount(inputs:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v2 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v2;
  long long v3 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance TableOutlineGroupContent<A>(uint64_t a1)
{
  return static TableRowContent._containsOutlineSymbol(inputs:)(a1) & 1;
}

uint64_t static TableRowContent._containsOutlineSymbol(inputs:)(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v1;
  v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v2 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v2;
  long long v3 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(AssociatedConformanceWitness + 64))(v8, AssociatedTypeWitness, AssociatedConformanceWitness) & 1;
}

BOOL TableRowGenerator.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() == 0;
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <> Section<A, B, C>()
{
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance OutlineGroup<A, B, C, D, E><>.OutlineGroupSubgroup(uint64_t a1)
{
  return static TableRowContent._tableRowCount(inputs:)(a1);
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <> _ConditionalContent<A, B>()
{
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <A> A?()
{
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance TableRowList.Key(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for EmptyTableRowGenerator;
  *(void *)(a1 + 32) = &protocol witness table for EmptyTableRowGenerator;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance TableRowList.Key(long long *a1, uint64_t (*a2)(void))
{
  type metadata accessor for _ContiguousArrayStorage<TableRowList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  long long v5 = *a1;
  long long v6 = a1[1];
  *(_OWORD *)(v4 + 16) = xmmword_18834BB70;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v6;
  *(void *)(v4 + 64) = *((void *)a1 + 4);
  uint64_t result = a2();
  *((void *)a1 + 3) = &type metadata for MergedTableRowGenerator;
  *((void *)a1 + 4) = &protocol witness table for MergedTableRowGenerator;
  *(void *)a1 = v4;
  return result;
}

unint64_t TableRowID.description.getter()
{
  outlined init with copy of TableRowID(v0, (uint64_t)v7);
  if (v9)
  {
    v5[0] = v7[0];
    v5[1] = v7[1];
    uint64_t v6 = v8;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = AnyHashable.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    unint64_t v2 = 0xD000000000000014;
    outlined destroy of AnyHashable((uint64_t)v5);
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *((void *)&v5[0] + 1) = 0x800000018833F040;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return 0xD000000000000013;
  }
  return v2;
}

Swift::Int TableRowID.hashValue.getter()
{
  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(v0, (uint64_t)v5);
  if (v7)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    uint64_t v4 = v6;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
  }
  else
  {
    Swift::UInt v1 = *(void *)&v5[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance TableRowID()
{
  outlined init with copy of TableRowID(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v2);
  }
  else
  {
    Swift::UInt v1 = *(void *)&v4[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableRowID()
{
  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(v0, (uint64_t)v5);
  if (v7)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    uint64_t v4 = v6;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
  }
  else
  {
    Swift::UInt v1 = *(void *)&v5[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void AnyTableRowIDs.startIndex.getter()
{
}

void AnyTableRowIDs.endIndex.getter()
{
}

void AnyTableRowIDs.subscript.getter()
{
}

Swift::Int __swiftcall AnyTableRowIDs.index(before:)(Swift::Int before)
{
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int __swiftcall AnyTableRowIDs.index(after:)(Swift::Int after)
{
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AnyTableRowIDs@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 112))(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance AnyTableRowIDs(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)v1 + 112))(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.startIndex.getter in conformance AnyTableRowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Collection.endIndex.getter in conformance AnyTableRowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 96))();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AnyTableRowIDs(void **a1, void *a2))(uint64_t *a1)
{
  *a1 = malloc(0x29uLL);
  (*(void (**)(void))(**(void **)v2 + 104))(*a2);
  return protocol witness for Collection.subscript.read in conformance AnyTableRowIDs;
}

void protocol witness for Collection.subscript.read in conformance AnyTableRowIDs(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of TableRowID(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance AnyTableRowIDs@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *v2;
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 88))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v6 + 96))();
  if (result < v7)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v4 < v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (result < v5)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;

  return swift_retain();
}

uint64_t protocol witness for Collection.indices.getter in conformance AnyTableRowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v3 + 88))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v3 + 96))();
  if (result < v4)
  {
    __break(1u);
  }
  else
  {
    *a1 = v4;
    a1[1] = result;
  }
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance AnyTableRowIDs@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *v3;
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v6 + 88))();
    uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v6 + 96))();
    if (v5 >= v7 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance AnyTableRowIDs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance AnyTableRowIDs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *v2;
  char v6 = *(uint64_t (**)(void))(*(void *)v5 + 88);
  uint64_t v7 = v6();
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v5 + 96);
  uint64_t result = v8();
  if (v3 < v7 || result < v3)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = ((uint64_t (*)(uint64_t))v6)(result);
  uint64_t result = v8();
  if (v4 < v11 || result < v4) {
    goto LABEL_12;
  }
  uint64_t result = v4 - v3;
  if (__OFSUB__(v4, v3)) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(after:) in conformance AnyTableRowIDs@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 120))(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance AnyTableRowIDs(uint64_t *a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(**(void **)v1 + 120))(*a1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AnyTableRowIDs@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 88);
  uint64_t v5 = swift_retain();
  uint64_t v6 = v4(v5);
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyTableRowIDs(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AnyTableRowIDs()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_release();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AnyTableRowIDs(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AnyTableRowIDs()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t WrappedTableRowIDs.startIndex.getter()
{
  return WrappedTableRowIDs.startIndex.getter(MEMORY[0x1E4FBB620]);
}

uint64_t WrappedTableRowIDs.endIndex.getter()
{
  return WrappedTableRowIDs.startIndex.getter(MEMORY[0x1E4FBB648]);
}

uint64_t WrappedTableRowIDs.startIndex.getter(void (*a1)(uint64_t *__return_ptr, uint64_t, void))
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = (uint64_t)v1 + *(void *)(v3 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  a1(&v10, v4, *(void *)(*(void *)(*(void *)(v3 + 136) + 8) + 8));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10;
}

uint64_t WrappedTableRowIDs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 128);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  char v9 = &v14[-v8];
  uint64_t v10 = (uint64_t)v2 + *(void *)(v5 + 144);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v15 = a1;
  uint64_t v11 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  outlined init with copy of TableRowID(v12, a2);
  v11(v14, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int __swiftcall WrappedTableRowIDs.index(before:)(Swift::Int before)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](before);
  uint64_t v7 = (char *)v10 - v6;
  uint64_t v8 = (uint64_t)v1 + *(void *)(v3 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v10[1] = before;
  dispatch thunk of BidirectionalCollection.index(before:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10[5];
}

Swift::Int __swiftcall WrappedTableRowIDs.index(after:)(Swift::Int after)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 128);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](after);
  uint64_t v7 = (char *)v10 - v6;
  uint64_t v8 = (uint64_t)v1 + *(void *)(v3 + 144);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v10[1] = after;
  dispatch thunk of Collection.index(after:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10[5];
}

uint64_t MergedTableRowGenerator.visitRows<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return 1;
  }
  uint64_t v9 = a3 + 32;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (1)
  {
    outlined init with copy of TableRowList(v9, (uint64_t)v22);
    uint64_t v11 = v23;
    uint64_t v12 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
    uint64_t v14 = v10 + result;
    if (__OFADD__(v10, result)) {
      break;
    }
    uint64_t v15 = *a2;
    if (*a2 < v14)
    {
      BOOL v16 = __OFSUB__(v15, v10);
      uint64_t v17 = v15 - v10;
      if (v16) {
        goto LABEL_13;
      }
      uint64_t v21 = v17 & ~(v17 >> 63);
      uint64_t v18 = v23;
      uint64_t v19 = v24;
      __swift_project_boxed_opaque_existential_1(v22, v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8))(a1, &v21, a4, a5, v18, v19) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined destroy of TableRowList((uint64_t)v22);
        return 0;
      }
    }
    outlined destroy of TableRowList((uint64_t)v22);
    v9 += 40;
    uint64_t v10 = v14;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t MergedTableRowGenerator.count.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    while (1)
    {
      outlined init with copy of TableRowList(v2, (uint64_t)v11);
      outlined init with copy of TableColumnList((uint64_t)v11, (uint64_t)v8);
      outlined destroy of TableRowList((uint64_t)v11);
      uint64_t v4 = v9;
      uint64_t v5 = v10;
      __swift_project_boxed_opaque_existential_1(v8, v9);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      BOOL v7 = __OFADD__(v3, result);
      v3 += result;
      if (v7) {
        break;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
      v2 += 40;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t MergedTableRowGenerator.rowIDs.getter(uint64_t a1)
{
  type metadata accessor for WrappedTableRowIDs<[TableRowID]>();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of TableRowList(v4, (uint64_t)v9);
      uint64_t v5 = v10;
      uint64_t v6 = v11;
      __swift_project_boxed_opaque_existential_1(v9, v10);
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 24))(v5, v6)) {
        break;
      }
      swift_beginAccess();
      uint64_t v7 = swift_retain();
      specialized Array.append<A>(contentsOf:)(v7);
      swift_endAccess();
      swift_release();
      outlined destroy of TableRowList((uint64_t)v9);
      v4 += 40;
      if (!--v3)
      {
        swift_bridgeObjectRelease();
        return v2;
      }
    }
    swift_release();
    outlined destroy of TableRowList((uint64_t)v9);
    swift_bridgeObjectRelease();
    return 0;
  }
  return v2;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance MergedTableRowGenerator(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return MergedTableRowGenerator.visitRows<A>(applying:from:)(a1, a2, *v4, a3, a4);
}

uint64_t protocol witness for TableRowGenerator.count.getter in conformance MergedTableRowGenerator()
{
  return MergedTableRowGenerator.count.getter(*v0);
}

uint64_t protocol witness for TableRowGenerator.rowIDs.getter in conformance MergedTableRowGenerator()
{
  return MergedTableRowGenerator.rowIDs.getter(*v0);
}

uint64_t specialized static TableRowContent.makeContent(content:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    _sSnySiGMaTm_2(0, &lazy cache variable for type metadata for TableRowContentBodyAccessor<Never>, MEMORY[0x1E4FBC248], (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TableRowContentBodyAccessor);
    lazy protocol witness table accessor for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(75);
    v1._object = (void *)0x800000018833F060;
    v1._countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v1);
    v2._countAndFlagsBits = 0x726576654ELL;
    v2._object = (void *)0xE500000000000000;
    String.append(_:)(v2);
    v3._countAndFlagsBits = 0x6C63206120736920;
    v3._object = (void *)0xEC0000002E737361;
    String.append(_:)(v3);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static TableRowContent.makeContent(content:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for TableRowContentBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(75);
    v1._object = (void *)0x800000018833F060;
    v1._countAndFlagsBits = 0xD00000000000003DLL;
    String.append(_:)(v1);
    v2._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v2);
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = 0x6C63206120736920;
    v3._object = (void *)0xEC0000002E737361;
    String.append(_:)(v3);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t TableRowContentBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for TableRowContentBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance TableRowContentBodyAccessor<A>(uint64_t result, char a2)
{
  return TableRowContentBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t static Never._tableRowCount(inputs:)()
{
  return 0;
}

void static Never._containsOutlineSymbol(inputs:)()
{
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance Never@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 112);
  v9[6] = *(_OWORD *)(a2 + 96);
  v9[7] = v4;
  v9[8] = *(_OWORD *)(a2 + 128);
  uint64_t v10 = *(void *)(a2 + 144);
  long long v5 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  void v9[3] = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  void v9[4] = *(_OWORD *)(a2 + 64);
  v9[5] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  return specialized static TableRowContent._makeRows(content:inputs:)(v3, (uint64_t)v9, a3);
}

void protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance Never()
{
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance TableRowDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance TableRowDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static TableRowDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance TableRowDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance TupleTableRowContent<A, B>()
{
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <A> Group<A>()
{
}

_UNKNOWN **associated type witness table accessor for TableRowContent.TableRowBody : TableRowContent in Never()
{
  return &protocol witness table for Never;
}

uint64_t default associated conformance accessor for TableRowContent.TableRowContent.TableRowValue: Identifiable()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t dispatch thunk of TableRowContent.tableRowBody.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static TableRowContent._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of static TableRowContent._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of static TableRowContent._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t destroy for _TableRowInputs()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _TableRowInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _TableRowInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  return a1;
}

uint64_t assignWithTake for _TableRowInputs(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TableRowInputs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _TableRowInputs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _TableRowInputs()
{
  return &type metadata for _TableRowInputs;
}

ValueMetadata *type metadata accessor for _TableRowOutputs()
{
  return &type metadata for _TableRowOutputs;
}

uint64_t type metadata accessor for AnyTableRowIDs()
{
  return self;
}

uint64_t type metadata accessor for WrappedTableRowIDs()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TableRowBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for TableRowID(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for TableRowID(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for TableRowID(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

ValueMetadata *type metadata accessor for TableRowID()
{
  return &type metadata for TableRowID;
}

ValueMetadata *type metadata accessor for TableRowDescriptor()
{
  return &type metadata for TableRowDescriptor;
}

ValueMetadata *type metadata accessor for TableRowList()
{
  return &type metadata for TableRowList;
}

ValueMetadata *type metadata accessor for TableRowList.Key()
{
  return &type metadata for TableRowList.Key;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>, 255, type metadata accessor for IndexingIterator<AnyTableRowIDs>);
}

void type metadata accessor for IndexingIterator<AnyTableRowIDs>(uint64_t a1)
{
}

uint64_t base witness table accessor for Sequence in AnyTableRowIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableRowIDs);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnyTableRowIDs()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_1(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<AnyTableRowIDs> and conformance Slice<A>, 255, type metadata accessor for Slice<AnyTableRowIDs>);
}

void type metadata accessor for Slice<AnyTableRowIDs>(uint64_t a1)
{
}

void type metadata accessor for IndexingIterator<AnyTableRowIDs>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for AnyTableRowIDs();
    uint64_t v8 = lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, v7, (void (*)(uint64_t))type metadata accessor for AnyTableRowIDs);
    unint64_t v9 = a3(a1, v6, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t base witness table accessor for Collection in AnyTableRowIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableRowIDs);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AnyTableRowIDs()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_1(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableRowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableRowIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type AnyTableRowIDs and conformance AnyTableRowIDs);
}

uint64_t lazy protocol witness table accessor for type AnyTableRowIDs and conformance AnyTableRowIDs(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableRowIDs);
}

{
  return lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type AnyTableRowIDs and conformance AnyTableRowIDs, a2, (void (*)(uint64_t))type metadata accessor for AnyTableRowIDs);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in AnyTableRowIDs()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyTableRowIDs()
{
  return lazy protocol witness table accessor for type Slice<AnyTableRowIDs> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyTableRowIDs> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type AnyTableRowIDs and conformance AnyTableRowIDs);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyTableRowIDs> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<AnyTableRowIDs>(255);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<AnyTableRowIDs> and conformance IndexingIterator<A>(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor;
  if (!lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor;
  if (!lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowDescriptor and conformance TableRowDescriptor);
  }
  return result;
}

uint64_t partial apply for closure #1 in TableRowList.visitRows<A>(applying:from:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  unsigned int v3 = (void *)v0[5];
  uint64_t v5 = v0[6];
  uint64_t v9 = v4;
  uint64_t v6 = v3[3];
  uint64_t v7 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v6);
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(v5, &v9, v1, v2, v6, v7);
}

uint64_t specialized static TableRowID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of TableRowID(a1, (uint64_t)v8);
  outlined init with copy of TableRowID(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    outlined init with copy of TableRowID((uint64_t)v8, (uint64_t)v7);
    if ((v11 & 1) == 0)
    {
      char v3 = v7[0] == *(void *)&v9[0];
      goto LABEL_6;
    }
LABEL_8:
    outlined destroy of (TableRowID, TableRowID)((uint64_t)v8);
    char v3 = 0;
    return v3 & 1;
  }
  outlined init with copy of TableRowID((uint64_t)v8, (uint64_t)v7);
  if (v11 != 1)
  {
    outlined destroy of AnyHashable((uint64_t)v7);
    goto LABEL_8;
  }
  v5[0] = v9[0];
  v5[1] = v9[1];
  uint64_t v6 = v10;
  char v3 = MEMORY[0x18C1174E0](v7, v5);
  outlined destroy of AnyHashable((uint64_t)v5);
  outlined destroy of AnyHashable((uint64_t)v7);
LABEL_6:
  outlined destroy of TableRowID((uint64_t)v8);
  return v3 & 1;
}

uint64_t outlined destroy of (TableRowID, TableRowID)(uint64_t a1)
{
  type metadata accessor for (TableRowID, TableRowID)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _sSnySiGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for TableRowContentBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>)
  {
    _sSnySiGMaTm_2(255, &lazy cache variable for type metadata for TableRowContentBodyAccessor<Never>, MEMORY[0x1E4FBC248], (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TableRowContentBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowContentBodyAccessor<Never> and conformance TableRowContentBodyAccessor<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for MergedTableRowGenerator()
{
  return &type metadata for MergedTableRowGenerator;
}

void type metadata accessor for _ContiguousArrayStorage<TableRowList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for closure #1 in TableRowContentBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 40))(*(void *)(v0 + 16));
}

uint64_t _IdentifiedViewTree.forEach(_:)(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t result = outlined init with copy of _IdentifiedViewTree(v2, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      uint64_t v6 = *(void *)(*(void *)&v9[0] + 16);
      if (v6)
      {
        uint64_t v7 = *(void *)&v9[0] + 32;
        do
        {
          outlined init with copy of _IdentifiedViewTree(v7, (uint64_t)v8);
          _IdentifiedViewTree.forEach(_:)(a1, a2);
          outlined destroy of _IdentifiedViewTree((uint64_t)v8);
          v7 += 168;
          --v6;
        }
        while (v6);
      }
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v8[6] = v9[6];
    v8[7] = v9[7];
    v8[8] = v9[8];
    _OWORD v8[9] = v9[9];
    v8[2] = v9[2];
    void v8[3] = v9[3];
    v8[4] = v9[4];
    v8[5] = v9[5];
    v8[0] = v9[0];
    v8[1] = v9[1];
    a1(v8);
    return outlined destroy of _IdentifiedViewProxy((uint64_t)v8);
  }
  return result;
}

uint64_t outlined destroy of _IdentifiedViewProxy(uint64_t a1)
{
  return a1;
}

uint64_t View._identified<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _IdentifiedModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for _IdentifiedModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _IdentifiedViewProxy.accessibilityNode.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of Any?(v1 + 128, (uint64_t)&v9);
  if (v10)
  {
    outlined init with take of Any(&v9, v8);
    outlined init with copy of Any((uint64_t)v8, (uint64_t)&v7);
    swift_dynamicCast();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, v3, v4, v5);
  }
  else
  {
    _s7SwiftUI22AccessibilityNodeProxyVSgWOi0_((uint64_t)v8);
    return outlined init with take of AccessibilityNodeProxy?((uint64_t)v8, a1);
  }
}

uint64_t static _IdentifiedViewsKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of _IdentifiedViewTree((uint64_t)&static _IdentifiedViewsKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance _IdentifiedViewsKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of _IdentifiedViewTree((uint64_t)&static _IdentifiedViewsKey.defaultValue, a1);
}

uint64_t _IdentifiedModifier.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _IdentifiedModifier.identifier.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_IdentifiedModifier.identifier.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _IdentifiedModifier.init(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

double _s7SwiftUI22AccessibilityNodeProxyVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 176) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t outlined init with take of AccessibilityNodeProxy?(uint64_t a1, uint64_t a2)
{
  _sypSgMaTm_8(0, &lazy cache variable for type metadata for AccessibilityNodeProxy?, (uint64_t)&type metadata for AccessibilityNodeProxy, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double static _IdentifiedModifier._makeView(modifier:inputs:body:)@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  a1(&v4);
  type metadata accessor for _IdentifiedModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  _ViewInputs.animatedSize()();
  _ViewInputs.animatedPosition()();
  _ViewInputs.transform.getter();
  _ViewInputs.environment.getter();
  _ViewOutputs.subscript.getter();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  double result = v5;
  a2[1] = v5;
  return result;
}

uint64_t implicit closure #1 in static _IdentifiedModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v7[0] = a1;
  v7[1] = a2;
  _OWORD v7[2] = a3;
  uint64_t v9 = type metadata accessor for IdentifiedViewTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_30, (uint64_t)v8, v9, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6;
}

uint64_t static _IdentifiedModifier.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t IdentifiedViewTransform.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _IdentifiedModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t IdentifiedViewTransform.nodeList.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = *(unsigned int *)(v1 + 20);
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v5 = Value[1];
    *a1 = *Value;
    a1[1] = v5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _IdentifiedModifier<A>@<D0>(void (*a1)(uint64_t *__return_ptr)@<X2>, double *a2@<X8>)
{
  return static _IdentifiedModifier._makeView(modifier:inputs:body:)(a1, a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _IdentifiedModifier<A>()
{
  return static _IdentifiedModifier.== infix(_:_:)();
}

uint64_t (*IdentifiedViewTransform.value.getter(uint64_t a1))(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for _IdentifiedModifier();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v30 - v4;
  unsigned int v7 = *v1;
  unsigned int v6 = v1[1];
  unsigned int v8 = v1[2];
  unsigned int v9 = v1[3];
  LODWORD(v4) = v1[4];
  unsigned int v31 = v1[5];
  unsigned int v32 = v4;
  *(void *)&long long v42 = __PAIR64__(v6, v7);
  *((void *)&v42 + 1) = __PAIR64__(v9, v8);
  *(void *)&long long v43 = __PAIR64__(v31, v4);
  IdentifiedViewTransform.modifier.getter((uint64_t)v5);
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v5, v2);
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v11 = Value[1];
  long long v42 = *Value;
  long long v43 = v11;
  MEMORY[0x18C114450]();
  long long v42 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  uint64_t v12 = AGGraphGetValue();
  uint64_t v13 = *(void *)v12;
  long long v30 = *(_OWORD *)(v12 + 8);
  uint64_t v14 = *(void *)(v12 + 24);
  uint64_t v15 = *(void *)(v12 + 32);
  swift_retain();
  uint64_t v37 = v13;
  long long v38 = v30;
  uint64_t v39 = v14;
  uint64_t v40 = v15;
  *(void *)&long long v42 = __PAIR64__(v6, v7);
  *((void *)&v42 + 1) = __PAIR64__(v9, v8);
  LODWORD(v5) = v31;
  unsigned int v16 = v32;
  *(void *)&long long v43 = __PAIR64__(v31, v32);
  IdentifiedViewTransform.nodeList.getter(v41);
  long long v30 = v41[0];
  long long v35 = v41[0];
  *(void *)&long long v42 = __PAIR64__(v6, v7);
  *((void *)&v42 + 1) = __PAIR64__(v9, v8);
  *(void *)&long long v43 = __PAIR64__(v5, v16);
  PropertiesTransform.environment.getter(&v33);
  long long v42 = v33;
  static AccessibilityNodeProxy.makeProxyForIdentifiedView(with:environment:)((unint64_t *)&v35, (uint64_t *)&v42, (uint64_t)v34);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with take of AccessibilityNodeProxy?((uint64_t)v34, (uint64_t)v41);
  outlined init with take of AccessibilityNodeProxy?((uint64_t)v41, (uint64_t)&v42);
  if (_s7SwiftUI22AccessibilityNodeProxyVSgWOg((uint64_t)&v42) == 1)
  {
    long long v35 = 0u;
    long long v36 = 0u;
  }
  else
  {
    *((void *)&v36 + 1) = &type metadata for AccessibilityNodeProxy;
    uint64_t v17 = swift_allocObject();
    *(void *)&long long v35 = v17;
    long long v18 = v51;
    *(_OWORD *)(v17 + 144) = v50;
    *(_OWORD *)(v17 + 160) = v18;
    *(_OWORD *)(v17 + 176) = v52;
    *(void *)(v17 + 192) = v53;
    long long v19 = v47;
    *(_OWORD *)(v17 + 80) = v46;
    *(_OWORD *)(v17 + 96) = v19;
    long long v20 = v49;
    *(_OWORD *)(v17 + 112) = v48;
    *(_OWORD *)(v17 + 128) = v20;
    long long v21 = v43;
    *(_OWORD *)(v17 + 16) = v42;
    *(_OWORD *)(v17 + 32) = v21;
    long long v22 = v45;
    *(_OWORD *)(v17 + 48) = v44;
    *(_OWORD *)(v17 + 64) = v22;
  }
  _IdentifiedViewProxy.init(identifier:size:position:transform:accessibilityNode:platform:)();
  uint64_t v23 = (_OWORD *)swift_allocObject();
  long long v24 = v34[7];
  void v23[7] = v34[6];
  v23[8] = v24;
  long long v25 = v34[9];
  v23[9] = v34[8];
  v23[10] = v25;
  long long v26 = v34[3];
  v23[3] = v34[2];
  void v23[4] = v26;
  long long v27 = v34[5];
  v23[5] = v34[4];
  v23[6] = v27;
  long long v28 = v34[1];
  v23[1] = v34[0];
  uint64_t v23[2] = v28;
  return partial apply for closure #1 in IdentifiedViewTransform.value.getter;
}

uint64_t closure #1 in IdentifiedViewTransform.value.getter(uint64_t a1, uint64_t a2)
{
  _sypSgMaTm_8(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18834BB70;
  outlined init with copy of _IdentifiedViewProxy(a2, v4 + 32);
  *(unsigned char *)(v4 + 192) = 0;
  outlined init with take of _IdentifiedViewTree(a1, v4 + 200);
  v6[0] = v4;
  char v7 = 1;
  return outlined init with take of _IdentifiedViewTree((uint64_t)v6, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance IdentifiedViewTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = IdentifiedViewTransform.value.getter(a1);
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IdentifiedViewTransform<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t specialized _IdentifiedViewTree.forEach(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *), uint64_t a5)
{
  uint64_t result = outlined init with copy of _IdentifiedViewTree(a1, (uint64_t)v14);
  if (v15)
  {
    if (v15 == 1)
    {
      uint64_t v10 = *(void *)(*(void *)&v14[0] + 16);
      if (v10)
      {
        uint64_t v11 = *(void *)&v14[0] + 32;
        swift_retain();
        do
        {
          outlined init with copy of _IdentifiedViewTree(v11, (uint64_t)v13);
          swift_retain();
          specialized _IdentifiedViewTree.forEach(_:)(v13, a2, a3, a4, a5);
          swift_release();
          outlined destroy of _IdentifiedViewTree((uint64_t)v13);
          v11 += 168;
          --v10;
        }
        while (v10);
        swift_release();
      }
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13[6] = v14[6];
    v13[7] = v14[7];
    v13[8] = v14[8];
    v13[9] = v14[9];
    v13[2] = v14[2];
    void v13[3] = v14[3];
    v13[4] = v14[4];
    v13[5] = v14[5];
    v13[0] = v14[0];
    v13[1] = v14[1];
    outlined init with copy of _IdentifiedViewProxy((uint64_t)v13, (uint64_t)v12);
    swift_retain();
    _IdentifiedViewProxy.adjustment.setter();
    a4(v12);
    outlined destroy of _IdentifiedViewProxy((uint64_t)v12);
    return outlined destroy of _IdentifiedViewProxy((uint64_t)v13);
  }
  return result;
}

uint64_t specialized static _IdentifiedViewsKey.reduce(value:nextValue:)(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v19);
  outlined init with copy of _IdentifiedViewTree(a1, (uint64_t)v15);
  outlined init with take of _IdentifiedViewTree((uint64_t)v19, (uint64_t)v17);
  if (v18 == 2)
  {
    int8x16_t v3 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v17[2], v17[6]), vorrq_s8(v17[4], v17[8])), vorrq_s8(vorrq_s8(v17[3], v17[7]), vorrq_s8(v17[5], v17[9]))), vorrq_s8(v17[0], v17[1]));
    if (!*(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL))) {
      return outlined destroy of _IdentifiedViewTree((uint64_t)v15);
    }
  }
  outlined destroy of _IdentifiedViewTree(a1);
  if (!v16)
  {
    if (v18 != 1)
    {
      outlined init with take of _IdentifiedViewTree((uint64_t)v15, (uint64_t)v14);
      outlined init with take of _IdentifiedViewTree((uint64_t)v17, (uint64_t)v12);
      _sypSgMaTm_8(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, MEMORY[0x1E4FBBE00]);
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_18834BB70;
      outlined init with copy of _IdentifiedViewTree((uint64_t)v14, v9 + 32);
      outlined init with take of _IdentifiedViewTree((uint64_t)v12, v9 + 200);
      outlined destroy of _IdentifiedViewTree((uint64_t)v14);
      uint64_t v10 = v9;
      char v11 = 1;
      unsigned int v8 = (int8x16_t *)&v10;
      return outlined init with take of _IdentifiedViewTree((uint64_t)v8, a1);
    }
    uint64_t v6 = v17[0].i64[0];
    outlined init with take of _IdentifiedViewTree((uint64_t)v15, (uint64_t)v14);
    _sypSgMaTm_8(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
    outlined init with copy of _IdentifiedViewTree((uint64_t)v14, v7 + 32);
    v12[0] = v7;
    goto LABEL_12;
  }
  if (v16 == 1)
  {
    uint64_t v4 = v15[0];
    if (v18 == 1)
    {
      v14[0] = v15[0];
      uint64_t result = specialized Array.append<A>(contentsOf:)(v17[0].i64[0]);
      *(void *)a1 = v14[0];
      *(unsigned char *)(a1 + 160) = 1;
      return result;
    }
    outlined init with take of _IdentifiedViewTree((uint64_t)v17, (uint64_t)v14);
    _sypSgMaTm_8(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, MEMORY[0x1E4FBBE00]);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
    outlined init with copy of _IdentifiedViewTree((uint64_t)v14, v6 + 32);
    v12[0] = v4;
LABEL_12:
    specialized Array.append<A>(contentsOf:)(v6);
    outlined destroy of _IdentifiedViewTree((uint64_t)v14);
    char v13 = 1;
    unsigned int v8 = (int8x16_t *)v12;
    return outlined init with take of _IdentifiedViewTree((uint64_t)v8, a1);
  }
  unsigned int v8 = v17;
  return outlined init with take of _IdentifiedViewTree((uint64_t)v8, a1);
}

uint64_t partial apply for implicit closure #1 in static _IdentifiedModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static _IdentifiedModifier._makeView(modifier:inputs:body:)(v0[4], v0[5], v0[6]);
}

_UNKNOWN **base witness table accessor for ViewModifier in _IdentifiedModifier<A>()
{
  return &protocol witness table for _IdentifiedModifier<A>;
}

uint64_t destroy for _IdentifiedViewTree(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 160);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (v2 == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else if (!v2)
  {
    __swift_destroy_boxed_opaque_existential_1(result);
    uint64_t result = swift_release();
    if (*(void *)(v1 + 112)) {
      uint64_t result = swift_release();
    }
    if (*(void *)(v1 + 152)) {
      return __swift_destroy_boxed_opaque_existential_1(v1 + 128);
    }
  }
  return result;
}

uint64_t initializeWithCopy for _IdentifiedViewTree(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 160);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 160) = 1;
    swift_bridgeObjectRetain();
  }
  else if (v4)
  {
    long long v9 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v9;
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    long long v10 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v10;
    long long v11 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    uint64_t v6 = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    long long v7 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v7;
    swift_retain();
    if (v6)
    {
      uint64_t v8 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v6;
      *(void *)(a1 + 120) = v8;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    }
    uint64_t v14 = (_OWORD *)(a1 + 128);
    char v15 = (_OWORD *)(a2 + 128);
    uint64_t v16 = *(void *)(a2 + 152);
    if (v16)
    {
      *(void *)(a1 + 152) = v16;
      (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 144);
      _OWORD *v14 = *v15;
      *(_OWORD *)(a1 + 144) = v17;
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for _IdentifiedViewTree(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 160);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      if (*(void *)(a1 + 112)) {
        swift_release();
      }
      if (*(void *)(a1 + 152)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 128);
      }
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 160);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 160) = 1;
      swift_bridgeObjectRetain();
    }
    else if (v5)
    {
      long long v9 = *a2;
      long long v10 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v10;
      *(_OWORD *)a1 = v9;
      long long v11 = a2[3];
      long long v12 = a2[4];
      long long v13 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v13;
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 64) = v12;
      long long v14 = a2[7];
      long long v15 = a2[8];
      long long v16 = a2[9];
      *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
      *(_OWORD *)(a1 + 128) = v15;
      *(_OWORD *)(a1 + 144) = v16;
      *(_OWORD *)(a1 + 112) = v14;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
      *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = a2[6];
      uint64_t v7 = *((void *)a2 + 14);
      swift_retain();
      if (v7)
      {
        uint64_t v8 = *((void *)a2 + 15);
        *(void *)(a1 + 112) = v7;
        *(void *)(a1 + 120) = v8;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 112) = a2[7];
      }
      long long v17 = (_OWORD *)(a1 + 128);
      char v18 = a2 + 8;
      uint64_t v19 = *((void *)a2 + 19);
      if (v19)
      {
        *(void *)(a1 + 152) = v19;
        (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
      }
      else
      {
        long long v20 = a2[9];
        *long long v17 = *v18;
        *(_OWORD *)(a1 + 144) = v20;
      }
      *(unsigned char *)(a1 + 160) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for _IdentifiedViewTree(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 160);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else if (!v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      if (*(void *)(a1 + 112)) {
        swift_release();
      }
      if (*(void *)(a1 + 152)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 128);
      }
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 160);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 160) = 1;
    }
    else if (v5)
    {
      long long v11 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v11;
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      long long v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v12;
      long long v13 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v13;
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      long long v15 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v15;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v6;
      long long v7 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v7;
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      long long v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 160) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _IdentifiedViewTree(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 161)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 160);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _IdentifiedViewTree(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 160) = 0;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 161) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 160) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _IdentifiedViewTree(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 160);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _IdentifiedViewTree(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    unsigned int v2 = a2 - 2;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 160) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _IdentifiedViewsKey()
{
  return &type metadata for _IdentifiedViewsKey;
}

uint64_t getEnumTagSinglePayload for _IdentifiedModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _IdentifiedModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18807DAB4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_18807DADC()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of _IdentifiedViewProxy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for IdentifiedViewTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in IdentifiedViewTransform<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_18807DC9C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s7SwiftUI22AccessibilityNodeProxyVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 144);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_18807DCEC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  if (*(void *)(v0 + 128)) {
    swift_release();
  }
  if (*(void *)(v0 + 168)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedViewTransform.value.getter(uint64_t a1)
{
  return closure #1 in IdentifiedViewTransform.value.getter(a1, v1 + 16);
}

uint64_t sub_18807DD54()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for MultiEventListener(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18807DEA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for MultiEventListener()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Gesture in MultiEventListener<A>()
{
  return swift_getWitnessTable();
}

uint64_t static MultiEventListener._makeGesture(gesture:inputs:)(uint64_t a1, long long *a2)
{
  unsigned int v2 = a2;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v3 = a2[3];
  long long v31 = a2[4];
  long long v4 = a2[4];
  long long v5 = a2[6];
  long long v32 = a2[5];
  long long v33 = v5;
  long long v6 = a2[1];
  long long v27 = *a2;
  long long v28 = v6;
  long long v7 = a2[3];
  long long v9 = *a2;
  long long v8 = a2[1];
  long long v29 = a2[2];
  long long v30 = v7;
  long long v40 = v4;
  long long v41 = v32;
  long long v42 = a2[6];
  long long v36 = v9;
  long long v37 = v8;
  uint64_t v34 = *((void *)a2 + 14);
  int v10 = *((_DWORD *)a2 + 30);
  uint64_t v43 = *((void *)a2 + 14);
  long long v38 = v29;
  long long v39 = v3;
  int v44 = v10;
  unsigned int v11 = _GestureInputs.events.getter();
  long long v12 = v2[5];
  long long v40 = v2[4];
  long long v41 = v12;
  long long v42 = v2[6];
  uint64_t v43 = *((void *)v2 + 14);
  long long v13 = v2[1];
  long long v36 = *v2;
  long long v37 = v13;
  long long v14 = v2[3];
  long long v38 = v2[2];
  long long v39 = v14;
  int v44 = v10;
  unsigned int v15 = _GestureInputs.animatedPosition()();
  long long v16 = v2[5];
  long long v40 = v2[4];
  long long v41 = v16;
  long long v42 = v2[6];
  uint64_t v43 = *((void *)v2 + 14);
  long long v17 = v2[1];
  long long v36 = *v2;
  long long v37 = v17;
  long long v18 = v2[3];
  long long v38 = v2[2];
  long long v39 = v18;
  int v44 = v10;
  LODWORD(v2) = _GestureInputs.transform.getter();
  int v35 = v10;
  unsigned int v19 = _GestureInputs.resetSeed.getter();
  type metadata accessor for MultiEventListener();
  type metadata accessor for _GraphValue();
  *(void *)&long long v36 = __PAIR64__(v15, v11);
  *((void *)&v36 + 1) = __PAIR64__(v19, v2);
  LODWORD(v37) = _GraphValue.value.getter();
  BYTE4(v37) = v10 & 1;
  BYTE5(v37) = (v10 & 2) != 0;
  *((void *)&v37 + 1) = default argument 7 of MultiEventListenerPhase.init(events:position:transform:resetSeed:listener:preconvertedEventLocations:allowsIncompleteEventSequences:latestEvents:endedEventIDs:lastResetSeed:)();
  *(void *)&long long v38 = MEMORY[0x1E4FBC870];
  DWORD2(v38) = 0;
  lazy protocol witness table accessor for type EventID and conformance EventID();
  type metadata accessor for Dictionary();
  uint64_t v24 = type metadata accessor for GesturePhase();
  uint64_t v25 = type metadata accessor for MultiEventListenerPhase();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v36, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v23, v25, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _GestureOutputs.init(phase:)();
}

uint64_t default argument 7 of MultiEventListenerPhase.init(events:position:transform:resetSeed:listener:preconvertedEventLocations:allowsIncompleteEventSequences:latestEvents:endedEventIDs:lastResetSeed:)()
{
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  lazy protocol witness table accessor for type EventID and conformance EventID();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t MultiEventListenerPhase.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);

  return swift_retain();
}

uint64_t MultiEventListenerPhase.resetSeed.getter()
{
  return *(unsigned int *)AGGraphGetValue();
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance MultiEventListener<A>(uint64_t a1, long long *a2)
{
  return static MultiEventListener._makeGesture(gesture:inputs:)(a1, a2);
}

void protocol witness for Gesture.body.getter in conformance MultiEventListener<A>()
{
}

uint64_t MultiEventListenerPhase.resetPhase()(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  lazy protocol witness table accessor for type EventID and conformance EventID();
  type metadata accessor for Dictionary();
  Dictionary.removeAll(keepingCapacity:)(0);
  swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = MEMORY[0x1E4FBC870];
  uint64_t v9 = 0;
  unsigned __int8 v10 = 0;
  uint64_t v7 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for GesturePhase();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)v6, v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v4);
  return outlined consume of GesturePhase<[EventID : PanEvent]>(v9, v10);
}

uint64_t MultiEventListenerPhase.updateValue()(uint64_t a1)
{
  void (**v60)(void *__return_ptr, void, void);
  uint64_t v61;
  Swift::UInt v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)();
  int64_t *v74;
  uint64_t v75;
  unsigned __int8 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  void (**v87)(Swift::UInt *, char *, uint64_t);
  int64_t v88;
  Swift::UInt *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::UInt v102;
  Swift::UInt v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned char *v114;
  char v115;
  uint64_t v116;
  uint64_t WitnessTable;
  int64_t v118;
  uint64_t v119;
  void (**v120)(char *, void, uint64_t, uint64_t);
  uint64_t v121;
  int v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (**v129)(char *, char *, uint64_t);
  int64_t v130;
  Swift::UInt *v131;
  char *v132;
  uint64_t v133;
  void (**v134)(char *, uint64_t);
  void (**v135)(char *, char *, uint64_t);
  uint64_t v136;
  long long *v137;
  void (**v138)(char *, uint64_t);
  uint64_t v139;
  long long *v140;
  uint64_t *v141;
  uint64_t (**v142)(char *, uint64_t, uint64_t);
  uint64_t v143;
  char *v144;
  uint64_t v145;
  int64_t v146;
  char v147;
  char v148;
  Swift::UInt v149;
  Swift::UInt v150;
  long long v151;
  long long v152;
  long long v153;
  uint64_t v154;
  long long v155;
  long long v156;
  uint64_t v157;
  uint64_t v158;

  uint64_t v2 = v1;
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v136 = type metadata accessor for Optional();
  uint64_t v121 = *(void *)(v136 - 8);
  MEMORY[0x1F4188790](v136);
  uint64_t v7 = (char *)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unsigned __int8 v10 = (Swift::UInt *)((char *)&v118 - v9);
  uint64_t v11 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v144 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  long long v16 = (char *)&v118 - v15;
  uint64_t v145 = v4;
  uint64_t v143 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v143 - 8);
  MEMORY[0x1F4188790](v143);
  uint64_t v124 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v118 - v20;
  MEMORY[0x1F4188790](v22);
  uint64_t v123 = (char *)&v118 - v23;
  MEMORY[0x1F4188790](v24);
  long long v26 = (char *)&v118 - v25;
  swift_getWitnessTable();
  Swift::Int v125 = a1;
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if ((result & 1) == 0) {
    return result;
  }
  unint64_t v131 = v10;
  uint64_t v132 = v7;
  uint64_t v133 = TupleTypeMetadata2;
  unint64_t v127 = v2 + 32;
  type metadata accessor for [EventID : EventType]();
  uint64_t Value = AGGraphGetValue();
  uint64_t v29 = *(void *)Value;
  uint64_t v30 = *(void *)(*(void *)Value + 64);
  uint64_t v126 = *(void *)Value + 64;
  uint64_t v31 = 1 << *(unsigned char *)(v29 + 32);
  uint64_t v32 = -1;
  if (v31 < 64) {
    uint64_t v32 = ~(-1 << v31);
  }
  uint64_t v33 = v11;
  unint64_t v34 = v32 & v30;
  char v137 = &v152;
  uint64_t v140 = &v156;
  uint64_t v141 = (uint64_t *)(v2 + 24);
  uint64_t v142 = (uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  uint64_t v138 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v135 = (void (**)(char *, char *, uint64_t))(v33 + 32);
  char v129 = (void (**)(char *, char *, uint64_t))(v33 + 16);
  uint64_t v120 = (void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
  uint64_t v128 = v33;
  char v134 = (void (**)(char *, uint64_t))(v33 + 8);
  unint64_t v130 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v118 = v130 - 1;
  swift_bridgeObjectRetain();
  uint64_t v122 = 0;
  uint64_t v146 = 0;
  char v139 = v2;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      unint64_t v36 = v35 | (v146 << 6);
LABEL_7:
      uint64_t v37 = *(void *)(v29 + 56);
      long long v38 = (uint64_t *)(*(void *)(v29 + 48) + 16 * v36);
      uint64_t v40 = *v38;
      uint64_t v39 = v38[1];
      *(void *)&uint64_t v151 = v40;
      *((void *)&v151 + 1) = v39;
      outlined init with copy of TableColumnList(v37 + 40 * v36, (uint64_t)v137);
      goto LABEL_26;
    }
    int64_t v41 = v146 + 1;
    if (__OFADD__(v146, 1))
    {
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
    }
    if (v41 < v130)
    {
      unint64_t v42 = *(void *)(v126 + 8 * v41);
      if (v42) {
        goto LABEL_11;
      }
      int64_t v43 = v146 + 2;
      ++v146;
      if (v41 + 1 < v130)
      {
        unint64_t v42 = *(void *)(v126 + 8 * v43);
        if (v42) {
          goto LABEL_14;
        }
        uint64_t v146 = v41 + 1;
        if (v41 + 2 < v130)
        {
          unint64_t v42 = *(void *)(v126 + 8 * (v41 + 2));
          if (v42)
          {
            v41 += 2;
            goto LABEL_11;
          }
          int64_t v43 = v41 + 3;
          uint64_t v146 = v41 + 2;
          if (v41 + 3 < v130)
          {
            unint64_t v42 = *(void *)(v126 + 8 * v43);
            if (v42)
            {
LABEL_14:
              int64_t v41 = v43;
LABEL_11:
              unint64_t v34 = (v42 - 1) & v42;
              unint64_t v36 = __clz(__rbit64(v42)) + (v41 << 6);
              uint64_t v146 = v41;
              goto LABEL_7;
            }
            while (1)
            {
              int64_t v41 = v43 + 1;
              if (__OFADD__(v43, 1)) {
                goto LABEL_90;
              }
              if (v41 >= v130) {
                break;
              }
              unint64_t v42 = *(void *)(v126 + 8 * v41);
              ++v43;
              if (v42) {
                goto LABEL_11;
              }
            }
            uint64_t v146 = v118;
          }
        }
      }
    }
    unint64_t v34 = 0;
    uint64_t v154 = 0;
    uint64_t v152 = 0u;
    uint64_t v153 = 0u;
    uint64_t v151 = 0u;
LABEL_26:
    outlined init with take of (key: EventID, value: EventType)?((uint64_t)&v151, (uint64_t)&v155);
    Swift::UInt v44 = v155;
    if (!(void)v155) {
      break;
    }
    uint64_t v45 = v21;
    Swift::UInt v46 = *((void *)&v155 + 1);
    outlined init with take of OptionalBinaryInteger(v140, (uint64_t)&v151);
    if (*(unsigned char *)(v2 + 21)) {
      goto LABEL_33;
    }
    uint64_t v47 = *((void *)&v152 + 1);
    uint64_t v48 = v153;
    __swift_project_boxed_opaque_existential_1(&v151, *((uint64_t *)&v152 + 1));
    (*(void (**)(Swift::UInt *__return_ptr, uint64_t, uint64_t))(v48 + 24))(&v149, v47, v48);
    Swift::UInt v49 = v149;
    swift_release();
    uint64_t v50 = *v141;
    if (v49)
    {
      char v149 = v44;
      uint64_t v150 = v46;
      unint64_t v54 = lazy protocol witness table accessor for type EventID and conformance EventID();
      long long v55 = v123;
      uint64_t v56 = v50;
      uint64_t v57 = v145;
      MEMORY[0x18C115450](&v149, v56, MEMORY[0x1E4F41678], v145, v54);
      LODWORD(v57) = (*v142)(v55, 1, v57);
      (*v138)(v55, v143);
      if (v57 == 1)
      {
        uint64_t v58 = *((void *)&v152 + 1);
        uint64_t v59 = v153;
        __swift_project_boxed_opaque_existential_1(&v151, *((uint64_t *)&v152 + 1));
        (*(void (**)(Swift::UInt *__return_ptr, uint64_t, uint64_t))(v59 + 8))(&v149, v58, v59);
        if ((_BYTE)v149)
        {
LABEL_41:
          swift_release();
          goto LABEL_42;
        }
      }
LABEL_33:
      uint64_t v119 = v29;
      outlined init with copy of TableColumnList((uint64_t)&v151, (uint64_t)&v149);
      long long v60 = *(void (***)(void *__return_ptr, void, void))(v125 + 24);
      long long v61 = v145;
      v60[6](&v149, v145, v60);
      if ((*v142)(v45, 1, v61) == 1)
      {
        swift_release();
        (*v138)(v45, v143);
        goto LABEL_42;
      }
      (*v135)(v16, v45, v61);
      v60[3](&v149, v61, v60);
      long long v62 = v149;
      swift_release();
      if (!v62)
      {
        (*v134)(v16, v61);
        swift_release();
LABEL_42:
        uint64_t v67 = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
        *(void *)&uint64_t v155 = 0;
        BYTE8(v155) = 3;
        MEMORY[0x1F4188790](v67);
        uint64_t v116 = v125;
        uint64_t WitnessTable = swift_getWitnessTable();
        lazy protocol witness table accessor for type EventID and conformance EventID();
        type metadata accessor for Dictionary();
        uint64_t v68 = type metadata accessor for GesturePhase();
        uint64_t v70 = MEMORY[0x1E4FBC848] + 8;
        uint64_t v71 = MEMORY[0x1E4FBC248];
        uint64_t v72 = MEMORY[0x1E4FBC278];
        uint64_t v73 = closure #1 in StatefulRule.value.setterpartial apply;
        uint64_t v74 = &v118 - 4;
LABEL_43:
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v155, (uint64_t)v73, (uint64_t)v74, v68, v71, v70, v72, v69);
        CGRect v75 = v155;
        uint64_t v76 = BYTE8(v155);
        return outlined consume of GesturePhase<[EventID : PanEvent]>(v75, v76);
      }
      uint64_t v63 = v124;
      (*v129)(v124, v16, v61);
      (*v120)(v63, 0, 1, v61);
      char v149 = v44;
      uint64_t v150 = v46;
      lazy protocol witness table accessor for type EventID and conformance EventID();
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      v60[1](&v149, v61, v60);
      uint64_t v29 = v119;
      if (!(_BYTE)v149) {
        specialized Set._Variant.remove(_:)(v44, v46, &v149);
      }
      (*v134)(v16, v61);
      uint64_t v21 = v45;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
      uint64_t v122 = 1;
      uint64_t v2 = v139;
    }
    else
    {
      char v149 = v44;
      uint64_t v150 = v46;
      unint64_t v51 = lazy protocol witness table accessor for type EventID and conformance EventID();
      uint64_t v52 = v50;
      uint64_t v53 = v145;
      MEMORY[0x18C115450](&v149, v52, MEMORY[0x1E4F41678], v145, v51);
      LODWORD(v53) = (*v142)(v26, 1, v53);
      (*v138)(v26, v143);
      if (v53 != 1) {
        goto LABEL_41;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
      uint64_t v2 = v139;
      uint64_t v21 = v45;
    }
  }
  swift_release();
  if ((v122 & 1) == 0)
  {
    lazy protocol witness table accessor for type EventID and conformance EventID();
    type metadata accessor for Dictionary();
    uint64_t v77 = type metadata accessor for GesturePhase();
    uint64_t result = AGGraphGetOutputValue();
    if (result) {
      return result;
    }
    *(void *)&uint64_t v155 = 0;
    BYTE8(v155) = 0;
    MEMORY[0x1F4188790](0);
    uint64_t v116 = v125;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v70 = MEMORY[0x1E4FBC848] + 8;
    uint64_t v71 = MEMORY[0x1E4FBC248];
    uint64_t v72 = MEMORY[0x1E4FBC278];
    uint64_t v73 = partial apply for closure #1 in StatefulRule.value.setter;
    uint64_t v74 = &v118 - 4;
    uint64_t v68 = v77;
    goto LABEL_43;
  }
  char v149 = *(void *)(v2 + 24);
  uint64_t v64 = v145;
  if (*(unsigned char *)(v2 + 20))
  {
    uint64_t v65 = swift_bridgeObjectRetain();
    uint64_t v66 = *(void *)(v125 + 24);
  }
  else
  {
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    uint64_t v66 = *(void *)(v125 + 24);
    closure #1 in MultiEventListenerPhase.updateValue()((uint64_t)&v151);
    uint64_t v78 = AGGraphSetUpdate();
    uint64_t v155 = v151;
    uint64_t v156 = v152;
    uint64_t v157 = v153;
    MEMORY[0x1F4188790](v78);
    uint64_t v116 = (uint64_t)&v155;
    defaultConvertEventLocations<A>(_:converter:)();
    uint64_t v65 = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v155);
  }
  uint64_t v79 = v133;
  uint64_t v80 = v121;
  MEMORY[0x1F4188790](v65);
  *(&v118 - 4) = v64;
  *(&v118 - 3) = v66;
  uint64_t v116 = v2;
  uint64_t v140 = (long long *)lazy protocol witness table accessor for type EventID and conformance EventID();
  uint64_t v81 = Dictionary.optimisticFilter(_:)();
  swift_bridgeObjectRelease();
  char v149 = v81;
  uint64_t v82 = *(void *)(v81 + 64);
  uint64_t v141 = (uint64_t *)(v81 + 64);
  uint64_t v83 = 1 << *(unsigned char *)(v81 + 32);
  uint64_t v84 = -1;
  if (v83 < 64) {
    uint64_t v84 = ~(-1 << v83);
  }
  uint64_t v85 = v84 & v82;
  uint64_t v86 = (unint64_t)(v83 + 63) >> 6;
  uint64_t v87 = (void (**)(Swift::UInt *, char *, uint64_t))(v80 + 32);
  uint64_t v146 = v66 + 8;
  unint64_t v130 = v86 - 1;
  swift_bridgeObjectRetain_n();
  uint64_t v88 = 0;
  uint64_t v142 = (uint64_t (**)(char *, uint64_t, uint64_t))v86;
  uint64_t v138 = (void (**)(char *, uint64_t))(v86 - 4);
  uint64_t v143 = v81;
  char v137 = (long long *)(v81 + 96);
  char v89 = v131;
  while (2)
  {
    if (v85)
    {
      uint64_t v90 = __clz(__rbit64(v85));
      v85 &= v85 - 1;
      uint64_t v91 = v90 | (v88 << 6);
      goto LABEL_54;
    }
    uint64_t v98 = v88 + 1;
    if (__OFADD__(v88, 1)) {
      goto LABEL_89;
    }
    if (v98 >= (uint64_t)v142)
    {
      uint64_t v85 = 0;
      uint64_t v97 = 1;
LABEL_60:
      int v96 = v132;
      goto LABEL_61;
    }
    uint64_t v99 = v141[v98];
    if (!v99)
    {
      if (v88 + 2 >= (uint64_t)v142)
      {
        uint64_t v85 = 0;
        uint64_t v97 = 1;
        ++v88;
      }
      else
      {
        uint64_t v99 = v141[v88 + 2];
        if (v99)
        {
          uint64_t v98 = v88 + 2;
          goto LABEL_58;
        }
        uint64_t v98 = v88 + 3;
        if (v88 + 3 >= (uint64_t)v142)
        {
          uint64_t v85 = 0;
          uint64_t v97 = 1;
          v88 += 2;
        }
        else
        {
          uint64_t v99 = v141[v98];
          if (v99) {
            goto LABEL_58;
          }
          while (v138 != (void (**)(char *, uint64_t))v88)
          {
            uint64_t v99 = *((void *)v137 + v88++);
            if (v99)
            {
              uint64_t v98 = v88 + 3;
              goto LABEL_58;
            }
          }
          uint64_t v85 = 0;
          uint64_t v97 = 1;
          uint64_t v88 = v130;
        }
      }
      goto LABEL_60;
    }
LABEL_58:
    uint64_t v85 = (v99 - 1) & v99;
    uint64_t v91 = __clz(__rbit64(v99)) + (v98 << 6);
    uint64_t v88 = v98;
LABEL_54:
    uint64_t v92 = *(void *)(v143 + 56);
    uint64_t v93 = (uint64_t *)(*(void *)(v143 + 48) + 16 * v91);
    uint64_t v95 = *v93;
    char v94 = v93[1];
    int v96 = v132;
    *(void *)uint64_t v132 = v95;
    *((void *)v96 + 1) = v94;
    (*(void (**)(char *, unint64_t, uint64_t))(v128 + 16))(&v96[*(int *)(v79 + 48)], v92 + *(void *)(v128 + 72) * v91, v64);
    uint64_t v97 = 0;
LABEL_61:
    long long v100 = *(void *)(v79 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v100 + 56))(v96, v97, 1, v79);
    (*v87)(v89, v96, v136);
    if ((*(unsigned int (**)(Swift::UInt *, uint64_t, uint64_t))(v100 + 48))(v89, 1, v79) != 1)
    {
      uint64_t v101 = v79;
      char v102 = *v89;
      char v103 = v89[1];
      (*v135)(v144, (char *)v89 + *(int *)(v101 + 48), v64);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v66 + 8))(&v151, v64, v66);
      if (v151 == 2 || v151 == 3) {
        specialized Set._Variant.insert(_:)((Swift::UInt *)&v151, v102, v103);
      }
      (*v134)(v144, v64);
      uint64_t v79 = v133;
      continue;
    }
    break;
  }
  uint64_t v104 = v143;
  uint64_t v105 = swift_release();
  *(void *)&uint64_t v151 = v104;
  uint64_t v147 = 3;
  MEMORY[0x1F4188790](v105);
  uint64_t v116 = v64;
  uint64_t WitnessTable = v66;
  type metadata accessor for Dictionary.Values();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.reduce<A>(_:_:)();
  swift_bridgeObjectRelease();
  switch(v148)
  {
    case 1:
      uint64_t v106 = swift_bridgeObjectRelease();
      *(void *)&uint64_t v151 = v104;
      BYTE8(v151) = 1;
      MEMORY[0x1F4188790](v106);
      uint64_t v107 = &v118 - 4;
      uint64_t v116 = v125;
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Dictionary();
      uint64_t v108 = type metadata accessor for GesturePhase();
      char v110 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v111 = MEMORY[0x1E4FBC248];
      uint64_t v112 = MEMORY[0x1E4FBC278];
      break;
    case 2:
      uint64_t v113 = swift_bridgeObjectRelease();
      *(void *)&uint64_t v151 = v104;
      BYTE8(v151) = 2;
      MEMORY[0x1F4188790](v113);
      uint64_t v107 = &v118 - 4;
      uint64_t v116 = v125;
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Dictionary();
      uint64_t v108 = type metadata accessor for GesturePhase();
      char v110 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v111 = MEMORY[0x1E4FBC248];
      uint64_t v112 = MEMORY[0x1E4FBC278];
      break;
    case 3:
      swift_bridgeObjectRelease();
      type metadata accessor for MultiEventListener();
      uint64_t v114 = (unsigned char *)AGGraphGetValue();
      if (*v114 == 1)
      {
        uint64_t v114 = (unsigned char *)swift_bridgeObjectRelease();
        uint64_t v104 = 0;
        char v115 = 3;
      }
      else
      {
        char v115 = 2;
      }
      *(void *)&uint64_t v151 = v104;
      BYTE8(v151) = v115;
      MEMORY[0x1F4188790](v114);
      uint64_t v107 = &v118 - 4;
      uint64_t v116 = v125;
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Dictionary();
      uint64_t v108 = type metadata accessor for GesturePhase();
      char v110 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v111 = MEMORY[0x1E4FBC248];
      uint64_t v112 = MEMORY[0x1E4FBC278];
      break;
    default:
      LODWORD(WitnessTable) = 0;
      uint64_t v116 = 167;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18807F8D8);
  }
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v151, (uint64_t)closure #1 in StatefulRule.value.setterpartial apply, (uint64_t)v107, v108, v111, v110, v112, v109);
  CGRect v75 = v151;
  uint64_t v76 = BYTE8(v151);
  return outlined consume of GesturePhase<[EventID : PanEvent]>(v75, v76);
}

void closure #1 in MultiEventListenerPhase.updateValue()(uint64_t a1@<X8>)
{
  type metadata accessor for MultiEventListenerPhase();
  MultiEventListenerPhase.transform.getter(a1);
  uint64_t Value = AGGraphGetValue();
  *(double *)&unint64_t v10 = MEMORY[0x18C10C240](Value, v3, v4, v5, v6, v7, v8, v9);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v11, v10));
}

uint64_t closure #2 in MultiEventListenerPhase.updateValue()(uint64_t a1, long long *a2)
{
  long long v2 = a2[1];
  long long v12 = *a2;
  long long v13 = v2;
  uint64_t v14 = *((void *)a2 + 4);
  uint64_t v4 = 1;
  long long v5 = 0u;
  long long v6 = 0u;
  char v7 = 2;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  char v10 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v4, (uint64_t)v11);
  v11[41] = 4;
  outlined destroy of CoordinateSpace((uint64_t)&v4);
  ViewTransform.convert(_:points:)();
  return outlined destroy of ViewTransform.Conversion((uint64_t)v8);
}

uint64_t closure #4 in MultiEventListenerPhase.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  void (*v31)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;

  unint64_t v35 = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v34 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v29 - v11;
  double v14 = MEMORY[0x1F4188790](v13);
  long long v16 = (char *)&v29 - v15;
  int v18 = *v17;
  uint64_t v19 = *(void (**)(char *, double))(v8 + 16);
  v19((char *)&v29 - v15, v14);
  unint64_t v36 = v18;
  if (v18 == 1)
  {
    uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
    v20(v16, a3);
    ((void (*)(char *, uint64_t, uint64_t))v19)(v12, a2, a3);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v20)(v12, a3);
    goto LABEL_8;
  }
  uint64_t v31 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 8);
  v31((uint64_t *)((char *)&v37 + 2), a3, a4);
  uint64_t v33 = BYTE2(v37);
  uint64_t v32 = a4;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v16, a3);
  uint64_t v30 = (void (*)(char *, uint64_t, uint64_t))v19;
  ((void (*)(char *, uint64_t, uint64_t))v19)(v12, a2, a3);
  if (!v33)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v12, a3);
    goto LABEL_8;
  }
  v31((uint64_t *)((char *)&v37 + 1), a3, v32);
  int v23 = BYTE1(v37);
  uint64_t v24 = (uint64_t (*)(char *, uint64_t))v22;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v22)(v12, a3);
  if (v23 == 1)
  {
LABEL_8:
    char v27 = 1;
    goto LABEL_9;
  }
  uint64_t v25 = v34;
  v30(v34, a2, a3);
  char v26 = v36;
  if (v36 == 2)
  {
    uint64_t result = v24(v25, a3);
    char v27 = 2;
  }
  else
  {
    v31(&v37, a3, v32);
    int v28 = v37;
    uint64_t result = v24(v25, a3);
    if (v28 == 2) {
      char v27 = 2;
    }
    else {
      char v27 = v26;
    }
  }
LABEL_9:
  ValueMetadata *v35 = v27;
  return result;
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance MultiEventListenerPhase<A>()
{
  return MEMORY[0x1F40FFCE8]();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance MultiEventListenerPhase<A>()
{
  return MultiEventListenerPhase.resetSeed.getter();
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.getter in conformance MultiEventListenerPhase<A>()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t protocol witness for ResettableGestureRule.lastResetSeed.setter in conformance MultiEventListenerPhase<A>(uint64_t result)
{
  *(_DWORD *)(v1 + 40) = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MultiEventListenerPhase<A>()
{
  return specialized MultiEventListenerPhase.description.getter();
}

uint64_t specialized MultiEventListenerPhase.description.getter()
{
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v3, "MultiListener[");
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return v3[0];
}

uint64_t type metadata accessor for MultiEventListenerPhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for MultiEventListenerPhase()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MultiEventListenerPhase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MultiEventListenerPhase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for MultiEventListenerPhase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(unsigned char *)(a1 + 21) = *(unsigned char *)(a2 + 21);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiEventListenerPhase(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 44)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultiEventListenerPhase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 44) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for StatefulRule in MultiEventListenerPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in MultiEventListenerPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #2 in MultiEventListenerPhase.updateValue()(uint64_t a1)
{
  return closure #2 in MultiEventListenerPhase.updateValue()(a1, *(long long **)(v1 + 16));
}

BOOL partial apply for closure #3 in MultiEventListenerPhase.updateValue()(Swift::UInt *a1)
{
  return (specialized Set.contains(_:)(*a1, a1[1], *(void *)(*(void *)(v1 + 32) + 32)) & 1) == 0;
}

uint64_t partial apply for closure #4 in MultiEventListenerPhase.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #4 in MultiEventListenerPhase.updateValue()(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t NavigationLinkSelectionIdentifier.matches(_:)(void *a1)
{
  if (*v1) {
    BOOL v2 = *a1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2)
  {
    uint64_t v3 = a1[2];
    uint64_t v4 = v1[2];
    if (v4 == 1 || v3 == 1)
    {
      char v12 = v1[3] == a1[3];
    }
    else
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = v1[1];
      v14[0] = v11;
      v14[1] = v4;
      v13[0] = v10;
      v13[1] = v3;
      char v12 = MEMORY[0x18C10D6E0](v14, v13);
    }
    return v12 & 1;
  }
  else
  {
    long long v6 = *(uint64_t (**)(uint64_t))(*(void *)*v1 + 176);
    swift_retain();
    uint64_t v7 = swift_retain();
    char v8 = v6(v7);
    swift_release();
    swift_release();
    return v8 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NavigationLinkSelectionIdentifier()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NavigationLinkSelectionIdentifier()
{
  return Hasher._finalize()();
}

uint64_t NavigationLinkSelectionIdentifier.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[2];
  _StringGuts.grow(_:)(67);
  v3._object = (void *)0x800000018833F0D0;
  v3._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v3);
  if (v1)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 88);
    uint64_t v5 = swift_retain();
    uint64_t v6 = v4(v5);
    char v8 = v7;
    swift_release();
  }
  else
  {
    char v8 = (void *)0xED000065756C6176;
    uint64_t v6 = 0x206B6E696C206F4ELL;
  }
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000018;
  v10._object = (void *)0x800000018833F0F0;
  String.append(_:)(v10);
  if (v2 == 1)
  {
    unint64_t v11 = 0xEB00000000747369;
    uint64_t v12 = 0x4C206E6920746F4ELL;
  }
  else
  {
    uint64_t v12 = _ViewList_ID.Canonical.description.getter();
    unint64_t v11 = v13;
  }
  unint64_t v14 = v11;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x617073656D614E0ALL;
  v15._object = (void *)0xEF203A44492E6563;
  String.append(_:)(v15);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance LinkValueTraitKey(void *a1@<X8>)
{
  *a1 = 1;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
}

BOOL specialized static NavigationLinkSelectionIdentifier.== infix(_:_:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  if (*a1)
  {
    if (!v6) {
      return 0;
    }
    Swift::String v9 = *(uint64_t (**)(uint64_t))(*(void *)*a1 + 176);
    swift_retain();
    swift_retain();
    LOBYTE(v9) = v9(v6);
    swift_release();
    swift_release();
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else if (v6)
  {
    return 0;
  }
  if (v3 == 1)
  {
    if (v7 == 1) {
      return v4 == v8;
    }
    goto LABEL_11;
  }
  v13[0] = v2;
  v13[1] = v3;
  if (v7 == 1)
  {
    swift_retain();
LABEL_11:
    outlined copy of Text.LineStyle?(v5, v7);
    outlined consume of Text.LineStyle?(v2, v3);
    outlined consume of Text.LineStyle?(v5, v7);
    return 0;
  }
  v12[0] = v5;
  v12[1] = v7;
  swift_retain_n();
  char v11 = MEMORY[0x18C10D6E0](v13, v12);
  swift_release();
  outlined consume of Text.LineStyle?(v2, v3);
  if ((v11 & 1) == 0) {
    return 0;
  }
  return v4 == v8;
}

void *assignWithTake for NavigationLinkSelectionIdentifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2 + 1;
  if (a1[2] != 1)
  {
    uint64_t v5 = a2[2];
    if (v5 != 1)
    {
      a1[1] = *v4;
      a1[2] = v5;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of _ViewList_ID.Canonical((uint64_t)(a1 + 1));
  }
  *(_OWORD *)(a1 + 1) = *(_OWORD *)v4;
LABEL_6:
  a1[3] = a2[3];
  return a1;
}

void *assignWithTake for NavigationLinkTraitValueModifier(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t type metadata accessor for IdentifiedPreferenceTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in IdentifiedPreferenceTransformModifier<A>()
{
  return &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
}

uint64_t View.transformIdentifiedPreference<A>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v8 = type metadata accessor for IdentifiedPreferenceTransformModifier();
  swift_retain();
  MEMORY[0x18C113660](v10, a4, v8, a6);
  return swift_release();
}

double static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v3 = a1[2];
  int v9 = *((_DWORD *)a1 + 6);
  int v10 = *((_DWORD *)a1 + 2);
  int v12 = *((_DWORD *)a1 + 7);
  int v13 = *((_DWORD *)a1 + 8);
  uint64_t v20 = a1[5];
  uint64_t v14 = a1[6];
  int v4 = *((_DWORD *)a1 + 15);
  int v7 = *((_DWORD *)a1 + 14);
  int v8 = *((_DWORD *)a1 + 9);
  int v18 = *((_DWORD *)a1 + 17);
  int v19 = *((_DWORD *)a1 + 16);
  int v16 = *((_DWORD *)a1 + 19);
  int v17 = *((_DWORD *)a1 + 18);
  int v15 = *((_DWORD *)a1 + 20);
  type metadata accessor for IdentifiedPreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v5 = _ViewInputs.viewPhase.getter();
  uint64_t v25 = v11;
  int v26 = v10;
  uint64_t v27 = v3;
  int v28 = v9;
  int v29 = v12;
  int v30 = v13;
  int v31 = v8;
  uint64_t v32 = v20;
  uint64_t v33 = v14;
  int v34 = v7;
  int v35 = v4;
  int v36 = v19;
  int v37 = v18;
  int v38 = v17;
  int v39 = v16;
  int v40 = v15;
  a2(&v23, v5, &v25);
  uint64_t v25 = v14;
  int v26 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *(void *)a3 = v23;
  double result = v24;
  a3[1] = v24;
  return result;
}

uint64_t implicit closure #1 in static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  v5[0] = a1;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  uint64_t v8 = type metadata accessor for IdentifiedPreferenceTransformModifier.Transform();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v5, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v6, v8, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return AssociatedTypeWitness;
}

uint64_t IdentifiedPreferenceTransformModifier.Transform.updateValue()(uint64_t a1)
{
  v19[3] = *MEMORY[0x1E4F143B8];
  int v4 = *(_DWORD *)(v1 + 8);
  int v3 = *(_DWORD *)(v1 + 12);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  int v7 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v7 != v3 || v4 == 0)
  {
    int v4 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v9 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v9 = 1;
    }
    static ViewIdentity.nextSeed = v9;
    *(_DWORD *)(v1 + 8) = v4;
    *(_DWORD *)(v1 + 12) = v7;
  }
  type metadata accessor for IdentifiedPreferenceTransformModifier();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v11 = *Value;
  uint64_t v12 = Value[1];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v5;
  *(void *)(v13 + 24) = v6;
  *(void *)(v13 + 32) = v11;
  *(void *)(v13 + 40) = v12;
  *(_DWORD *)(v13 + 48) = v4;
  v19[0] = partial apply for closure #1 in IdentifiedPreferenceTransformModifier.Transform.updateValue();
  v19[1] = v13;
  MEMORY[0x1F4188790](v13);
  _OWORD v18[2] = a1;
  v18[3] = swift_getWitnessTable();
  swift_retain_n();
  void v19[2] = swift_getAssociatedTypeWitness();
  uint64_t v14 = MEMORY[0x1E4FBC848] + 8;
  uint64_t FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v19, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v18, FunctionTypeMetadata, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v16);
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance IdentifiedPreferenceTransformModifier<A>.Transform(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IdentifiedPreferenceTransformModifier<A>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  return static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IdentifiedPreferenceTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t partial apply for implicit closure #1 in static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static IdentifiedPreferenceTransformModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for IdentifiedPreferenceTransformModifier.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in IdentifiedPreferenceTransformModifier<A>.Transform()
{
  return swift_getWitnessTable();
}

uint64_t sub_188080D4C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedPreferenceTransformModifier.Transform.updateValue()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 32))(a1, *(unsigned int *)(v1 + 48));
}

void View.complicationIdiom()()
{
}

void View.widgetIdiom()()
{
}

uint64_t sub_188080DDC()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_188080DF0()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

ValueMetadata *type metadata accessor for WidgetIdiomModifier()
{
  return &type metadata for WidgetIdiomModifier;
}

ValueMetadata *type metadata accessor for ComplicationIdiomModifier()
{
  return &type metadata for ComplicationIdiomModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ComplicationIdiomModifier()
{
  return &protocol witness table for ComplicationIdiomModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ComplicationIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ComplicationIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ComplicationIdiomModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ComplicationIdiomModifier()
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ComplicationIdiomModifier();
}

{
  AnyInterfaceIdiom.init<A>(_:)();
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in WidgetIdiomModifier()
{
  return &protocol witness table for WidgetIdiomModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance WidgetIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance WidgetIdiomModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance WidgetIdiomModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance WidgetIdiomModifier()
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ComplicationIdiomModifier();
}

uint64_t getEnumTagSinglePayload for MainMenuItem.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18808102C);
}

uint64_t sub_18808102C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem(0);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MainMenuItem.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1880810AC);
}

uint64_t sub_1880810AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem(0);
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t associated type witness table accessor for View.Body : View in MainMenuItem.Content()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 MainMenuItem.Content.body.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for MainMenuItem.Content();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = *(void *)(*(void *)(v1 + *(int *)(type metadata accessor for MainMenuItem(0) + 24)) + 16);
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of MainMenuItem.Content(v1, (uint64_t)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  outlined init with take of MainMenuItem.Content((uint64_t)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  void v13[2] = 0;
  void v13[3] = v6;
  v13[1] = KeyPath;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  uint64_t v10 = v17;
  __n128 result = v15;
  long long v12 = v16;
  *(_OWORD *)a1 = v14;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v12;
  *(void *)(a1 + 48) = v10;
  return result;
}

uint64_t closure #1 in MainMenuItem.Content.body.getter@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *a1;
  uint64_t result = type metadata accessor for MainMenuItem(0);
  if ((v5 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + *(int *)(result + 24));
  if (v5 >= *(void *)(v7 + 16))
  {
LABEL_7:
    __break(1u);
    return result;
  }
  *a3 = *(void *)(v7 + 8 * v5 + 32);

  return swift_retain();
}

uint64_t outlined init with copy of MainMenuItem.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1880813A4()
{
  uint64_t v1 = *(void *)(type metadata accessor for MainMenuItem.Content() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for MainMenuItem(0) + 20);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 10, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with take of MainMenuItem.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem.Content();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in MainMenuItem.Content.body.getter@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for MainMenuItem.Content() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in MainMenuItem.Content.body.getter(a1, v6, a2);
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, AnyView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, AnyView> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for ForEach<Range<Int>, Int, AnyView>()
{
  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, AnyView>)
  {
    type metadata accessor for Range<Int>();
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, AnyView>);
    }
  }
}

uint64_t View.textContentType(_:)(uint64_t a1)
{
  if (a1) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  View.environment<A>(_:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.textContentType.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t sub_18808189C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.textContentType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1880818C8(uint64_t *a1)
{
  return key path setter for EnvironmentValues.textContentType : EnvironmentValues, serialized(a1);
}

void type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>);
    }
  }
}

uint64_t EnvironmentValues.textContentType.setter()
{
  type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.textContentType : EnvironmentValues, serialized(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v1, v2);

  return swift_bridgeObjectRelease();
}

void (*EnvironmentValues.textContentType.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 + 1);
  return EnvironmentValues.textContentType.modify;
}

void EnvironmentValues.textContentType.modify(void **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[4];
  uint64_t v5 = (*a1)[1];
  void v3[2] = **a1;
  v3[3] = v5;
  type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextContentTypeKey>);
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
  }

  free(v3);
}

uint64_t sub_188081DD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.textContentType.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_188081E10(uint64_t *a1)
{
  return key path setter for EnvironmentValues.textContentType : EnvironmentValues, serialized(a1);
}

uint64_t sub_188081E28()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<String?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<String?>)
  {
    type metadata accessor for String?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<String?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextContentTypeKey()
{
  return &type metadata for TextContentTypeKey;
}

uint64_t assignWithCopy for ToolbarButtonLabelModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  if (a1 != a2)
  {
    uint64_t v5 = (long long *)(a2 + 8);
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1 + 8);
    if (*(unsigned char *)(a2 + 49))
    {
      if (*(unsigned char *)(a2 + 48) == 1)
      {
        uint64_t v6 = *(void *)(a2 + 32);
        *(void *)(a1 + 32) = v6;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        (**(void (***)(_OWORD *, uint64_t))(v6 - 8))(v4, a2 + 8);
        *(unsigned char *)(a1 + 48) = 1;
      }
      else
      {
        long long v7 = *v5;
        long long v8 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)((char *)v4 + 25) = *(_OWORD *)(a2 + 33);
        *uint64_t v4 = v7;
        v4[1] = v8;
      }
      *(unsigned char *)(a1 + 49) = 1;
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)v5;
      *(unsigned char *)(a1 + 49) = 0;
      swift_retain();
    }
  }
  uint64_t v9 = *(void *)(a2 + 56);
  char v10 = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<Bool>.Content(v9, v10);
  uint64_t v11 = *(void *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  uint64_t v13 = *(void *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v13, v14);
  uint64_t v15 = *(void *)(a1 + 72);
  char v16 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  uint64_t v17 = *(void *)(a2 + 88);
  char v18 = *(unsigned char *)(a2 + 96);
  outlined copy of Environment<Bool>.Content(v17, v18);
  uint64_t v19 = *(void *)(a1 + 88);
  char v20 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = v17;
  *(unsigned char *)(a1 + 96) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  return a1;
}

uint64_t assignWithTake for ToolbarButtonLabelModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (a1 != a2)
  {
    outlined destroy of Environment<ToolbarItemPlacement.Role>.Content(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  }
  char v4 = *(unsigned char *)(a2 + 64);
  uint64_t v5 = *(void *)(a1 + 56);
  char v6 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a1 + 72);
  char v9 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  char v10 = *(unsigned char *)(a2 + 96);
  uint64_t v11 = *(void *)(a1 + 88);
  char v12 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonLabelModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[97]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonLabelModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v25 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(_OWORD *)(a9 + 56) = v30;
  *(_OWORD *)(a9 + 72) = v31;
  *(_OWORD *)(a9 + 88) = v32;
  *(_OWORD *)(a9 + 104) = v33;
  *(_OWORD *)(a9 + 8) = v27;
  *(_OWORD *)(a9 + 24) = v28;
  *(void *)a9 = a16;
  *(_OWORD *)(a9 + 40) = v29;

  return swift_retain();
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(unsigned char *)(a9 + 112) = *(unsigned char *)(v13 + 112);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 152) = v30;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 120) = v28;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 168) = v31;

  return outlined retain of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>(v13);
}

{
  uint64_t v13;
  void *v23;
  long long v24;
  long long v25;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t vars8;

  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 88) = v27;
  *(_OWORD *)(a9 + 104) = v28;
  *(unsigned char *)(a9 + 80) = *(unsigned char *)(v13 + 80);
  *(_OWORD *)(a9 + 120) = v29;

  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<HStack<AnyView>, _DefaultForegroundStyleModifier<AnyShapeStyle>>, _PaddingLayout>, _FlexFrameLayout>(v13);
}

{
  uint64_t v13;
  void *v23;
  long long v24;
  long long v25;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t vars8;

  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 72) = v27;
  *(_OWORD *)(a9 + 88) = v28;
  *(void *)(a9 + 64) = *(void *)(v13 + 64);
  *(_OWORD *)(a9 + 104) = v29;

  return outlined retain of ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>(v13);
}

{
  uint64_t v13;
  void *v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  uint64_t vars8;

  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v24;
  long long v25 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v25;
  long long v26 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v26;
  long long v27 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v27;
  *(_OWORD *)(a9 + 184) = v32;
  *(_OWORD *)(a9 + 200) = v33;
  *(_OWORD *)(a9 + 216) = v34;
  *(_OWORD *)(a9 + 232) = v35;
  *(_OWORD *)(a9 + 136) = v29;
  *(_OWORD *)(a9 + 152) = v30;
  *(void *)(a9 + 128) = *(void *)(v13 + 128);
  *(_OWORD *)(a9 + 168) = v31;

  return outlined retain of StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>(v13);
}

double specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  outlined init with copy of _VariadicView_Children(v13, a9);
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  double result = *(double *)&v25;
  *(_OWORD *)(a9 + 56) = v25;
  *(_OWORD *)(a9 + 72) = v26;
  *(_OWORD *)(a9 + 88) = v27;
  return result;
}

{
  uint64_t v13;
  void *v23;
  double result;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;

  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  outlined init with copy of _UnaryViewAdaptor<_VariadicView_Children>(v13, a9, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4F40A30], MEMORY[0x1E4F40210]);
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 152) = v31;
  double result = *(double *)&v25;
  *(_OWORD *)(a9 + 56) = v25;
  *(_OWORD *)(a9 + 72) = v26;
  *(_OWORD *)(a9 + 88) = v27;
  return result;
}

uint64_t specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = v13[7];
  a9[6] = v13[6];
  a9[7] = v24;
  a9[8] = v13[8];
  *(_OWORD *)((char *)a9 + 137) = *(_OWORD *)((char *)v13 + 137);
  long long v25 = v13[3];
  a9[2] = v13[2];
  a9[3] = v25;
  long long v26 = v13[5];
  a9[4] = v13[4];
  a9[5] = v26;
  long long v27 = v13[1];
  *a9 = *v13;
  a9[1] = v27;
  a9[14] = v33;
  a9[15] = v34;
  a9[16] = v35;
  a9[10] = v29;
  a9[11] = v30;
  a9[12] = v31;
  a9[13] = v32;

  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v13);
}

void *specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 208);
  *(_OWORD *)(a9 + 192) = *(_OWORD *)(v13 + 192);
  *(_OWORD *)(a9 + 208) = v24;
  *(_OWORD *)(a9 + 224) = *(_OWORD *)(v13 + 224);
  long long v25 = *(_OWORD *)(v13 + 144);
  *(_OWORD *)(a9 + 128) = *(_OWORD *)(v13 + 128);
  *(_OWORD *)(a9 + 144) = v25;
  long long v26 = *(_OWORD *)(v13 + 176);
  *(_OWORD *)(a9 + 160) = *(_OWORD *)(v13 + 160);
  *(_OWORD *)(a9 + 176) = v26;
  long long v27 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v27;
  long long v28 = *(_OWORD *)(v13 + 112);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)(v13 + 96);
  *(_OWORD *)(a9 + 112) = v28;
  long long v29 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v29;
  long long v30 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v30;
  *(_OWORD *)(a9 + 296) = v35;
  *(_OWORD *)(a9 + 312) = v36;
  *(_OWORD *)(a9 + 328) = v37;
  *(_OWORD *)(a9 + 344) = v38;
  *(_OWORD *)(a9 + 248) = v32;
  *(void *)(a9 + 240) = *(void *)(v13 + 240);
  *(_OWORD *)(a9 + 264) = v33;
  *(_OWORD *)(a9 + 280) = v34;

  return outlined retain of HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>((void *)v13);
}

uint64_t View.toolbarButtonLabel(ignoreEdge:)(char a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a1;
  uint64_t KeyPath = swift_getKeyPath();
  char v9 = 0;
  uint64_t v10 = swift_getKeyPath();
  char v11 = 0;
  uint64_t v12 = swift_getKeyPath();
  char v13 = 0;
  uint64_t v14 = swift_getKeyPath();
  char v15 = 0;
  outlined init with copy of ToolbarButtonLabelModifier((uint64_t)v7, (uint64_t)v16);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v7);
  _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I21ButtonContentModifierVAA05EmptyL0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
  MEMORY[0x18C113660](v16, a2, v5, a3);
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v16);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarButtonStyle.ResolvedBody()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t closure #1 in ToolbarButtonEdgeOutsetModifier.body(content:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  int v3 = a1;
  static EdgeInsets.zero.getter();
  uint64_t v7 = v6;
  double v8 = v4;
  uint64_t v10 = v9;
  double v11 = v5;
  if (v3 != 2)
  {
    if (v3) {
      double v11 = v5 + -8.0;
    }
    else {
      double v8 = v4 + -8.0;
    }
  }
  uint64_t result = static Edge.Set.all.getter();
  *(unsigned char *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v10;
  *(double *)(a2 + 32) = v11;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarButtonEdgeOutsetModifier(void *a1@<X8>)
{
  *a1 = partial apply for closure #1 in ToolbarButtonEdgeOutsetModifier.body(content:);
  a1[1] = 0;
}

uint64_t sub_1880839E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.toolbarButtonHoverShape.getter();
  *(unsigned char *)(a1 + 2) = BYTE2(result);
  *(_WORD *)a1 = result;
  return result;
}

uint64_t sub_188083A2C()
{
  return EnvironmentValues.toolbarButtonHoverShape.setter();
}

uint64_t ToolbarButtonHoverShape.adjustedRect(in:)(__int16 a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  if (CGRectGetHeight(*(CGRect *)&a2) + 8.0 > 36.0)
  {
    v12.origin.x = a2;
    v12.origin.y = a3;
    v12.size.width = a4;
    v12.size.height = a5;
    CGRectGetHeight(v12);
  }
  if (a1 != 2)
  {
    if ((a1 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((a1 & 0x100) != 0) {
LABEL_7:
  }
    static EdgeInsets.zero.getter();
LABEL_8:

  return CGRect.outset(by:)();
}

double protocol witness for Shape.path(in:) in conformance ToolbarButtonHoverShape@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  __asm { FMOV            V4.2D, #8.0 }
  if (v5[1]) {
    __int16 v12 = 256;
  }
  else {
    __int16 v12 = 0;
  }
  ToolbarButtonHoverShape.adjustedRect(in:)(v12 | *v5, a2, a3, a4, a5);
  RoundedRectangle.path(in:)();
  double result = *(double *)&v14;
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(unsigned char *)(a1 + 32) = v16;
  return result;
}

void protocol witness for View.body.getter in conformance ToolbarButtonHoverShape(uint64_t a1@<X8>)
{
  char v2 = v1[1];
  char v3 = v1[2];
  *(unsigned char *)a1 = *v1;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(_WORD *)(a1 + 3) = 256;
}

uint64_t key path getter for EnvironmentValues.verticalSizeClass : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.verticalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.verticalSizeClass : EnvironmentValues()
{
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t sub_188083C7C()
{
  if (*(unsigned char *)(v0 + 65))
  {
    if (*(unsigned char *)(v0 + 64) == 1) {
      __swift_destroy_boxed_opaque_existential_1(v0 + 24);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 104), *(unsigned char *)(v0 + 112));

  return swift_deallocObject();
}

uint64_t sub_188083D10@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.verticalSizeClass.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_188083D54()
{
  return EnvironmentValues.verticalSizeClass.setter();
}

uint64_t sub_188083D8C()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  return swift_deallocObject();
}

void *outlined retain of HStack<TupleView<(ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>, TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?, ForEach<ArraySlice<ToolbarStorage.Entry>, ToolbarStorage.Entry.ID, BarItemView>)>>(void *a1)
{
  uint64_t v4 = a1[13];
  uint64_t v5 = a1[12];
  uint64_t v3 = a1[14];
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  outlined copy of TupleView<(Spacer, ForEach<[ToolbarStorage.Entry], ToolbarStorage.Entry.ID, BarItemView>, Spacer)>?(v5, v4, v3);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11(a1, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>(255);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>(uint64_t a1)
{
}

void type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?))
  {
    type metadata accessor for ModifiedContent<Spacer, _FrameLayout>?();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ToolbarButtonLabelModifier>, _PaddingLayout>, _FlexFrameLayout>, _FixedSizeLayout>(255, &lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, (uint64_t (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?(255, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?));
    }
  }
}

void type metadata accessor for ModifiedContent<Spacer, _FrameLayout>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>?)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>, MEMORY[0x1E4F415E0], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Spacer, _FrameLayout>?);
    }
  }
}

void type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>()
{
  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, TableRowForegroundStyleModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for TableRowForegroundStyleModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, TableRowForegroundStyleModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for TableRowForegroundStyleModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>(uint64_t a1)
{
}

void type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)()
{
  if (!lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>)
  {
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA08BordereddE0VGMaTm_0(255, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarButtonHoverShapeKey()
{
  return &type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey;
}

void *initializeBufferWithCopyOfBuffer for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    unint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v26 = *(void *)v9;
      uint64_t v27 = *((void *)v9 + 1);
      char v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v27, v28);
      *(void *)unint64_t v8 = v26;
      *((void *)v8 + 1) = v27;
      unsigned char v8[16] = v28;
      uint64_t v29 = *((void *)v9 + 5);
      long long v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((void *)v8 + 5) = v29;
      id v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v39 = v9[34];
        __int16 v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v15, v39);
        *(void *)unint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v39;
        uint64_t v16 = *((void *)v9 + 5);
        uint64_t v17 = *((void *)v9 + 6);
        uint64_t v18 = *((void *)v9 + 7);
        uint64_t v19 = *((void *)v9 + 8);
        char v40 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v40);
        *((void *)v8 + 5) = v16;
        *((void *)v8 + 6) = v17;
        *((void *)v8 + 7) = v18;
        *((void *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v40;
        uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v21 = &v8[v20];
        uint64_t v22 = &v9[v20];
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        uint64_t v33 = *(int *)(a3 + 24);
        *((unsigned char *)v4 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
        long long v34 = (char *)v4 + v33;
        long long v35 = (char *)a2 + v33;
        uint64_t v36 = *(void *)((char *)a2 + v33);
        char v37 = v35[8];
        outlined copy of Environment<Bool>.Content(v36, v37);
        *(void *)long long v34 = v36;
        v34[8] = v37;
        return v4;
      }
      uint64_t v32 = *((void *)v9 + 1);
      *(void *)unint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v25 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

_WORD *assignWithCopy for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v26 = *(void *)v9;
      uint64_t v27 = *((void *)v9 + 1);
      char v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v27, v28);
      *(void *)unint64_t v8 = v26;
      *((void *)v8 + 1) = v27;
      unsigned char v8[16] = v28;
      uint64_t v29 = (void *)*((void *)v9 + 3);
      *((void *)v8 + 3) = v29;
      uint64_t v30 = *((void *)v9 + 5);
      *((void *)v8 + 4) = *((void *)v9 + 4);
      *((void *)v8 + 5) = v30;
      id v31 = v29;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v41 = a3;
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v15 = v9[34];
        __int16 v16 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v16, v15);
        *(void *)unint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v16;
        v8[34] = v15;
        uint64_t v17 = *((void *)v9 + 5);
        uint64_t v18 = *((void *)v9 + 6);
        uint64_t v19 = *((void *)v9 + 7);
        uint64_t v20 = *((void *)v9 + 8);
        LOBYTE(v12) = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v14, v12);
        *((void *)v8 + 5) = v17;
        *((void *)v8 + 6) = v18;
        *((void *)v8 + 7) = v19;
        *((void *)v8 + 8) = v20;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v12;
        a3 = v41;
        uint64_t v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v22 = &v8[v21];
        uint64_t v23 = &v9[v21];
        uint64_t v24 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v22, v23, v24);
        uint64_t v25 = type metadata accessor for LinkDestination.Configuration();
        v22[*(int *)(v25 + 20)] = v23[*(int *)(v25 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      uint64_t v32 = *((void *)v9 + 1);
      *(void *)unint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v33 = *(int *)(a3 + 24);
  long long v34 = (char *)a1 + v33;
  long long v35 = (char *)a2 + v33;
  uint64_t v36 = *(void *)v35;
  char v37 = v35[8];
  outlined copy of Environment<Bool>.Content(*(void *)v35, v37);
  uint64_t v38 = *(void *)v34;
  char v39 = v34[8];
  *(void *)long long v34 = v36;
  v34[8] = v37;
  outlined consume of Environment<Bool>.Content(v38, v39);
  return a1;
}

_WORD *initializeWithTake for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    uint64_t v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v12 = &v7[v11];
    uint64_t v13 = &v8[v11];
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    uint64_t v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v16 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  return a1;
}

_WORD *assignWithTake for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      uint64_t v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v13 = &v8[v12];
      uint64_t v14 = &v9[v12];
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      uint64_t v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v17 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = v19[8];
  uint64_t v21 = *(void *)v18;
  char v22 = v18[8];
  *(void *)uint64_t v18 = v20;
  v18[8] = (char)v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarButtonStyle.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188084D20);
}

uint64_t sub_188084D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonStyle.ResolvedBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188084E04);
}

uint64_t sub_188084E04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  }
  return result;
}

_UNKNOWN **sub_188084EC4()
{
  return &protocol witness table for BarEdgeReader<A>;
}

_UNKNOWN **sub_188084ED0()
{
  return &protocol witness table for BarEdgeReader<A>;
}

uint64_t associated type witness table accessor for View.Body : View in ToolbarButtonHoverShape()
{
  return lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _OpacityEffect>>?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type _ShapeView<ToolbarButtonHoverShape, ForegroundStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>);
}

void type metadata accessor for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type ToolbarButtonHoverShape and conformance ToolbarButtonHoverShape();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<ToolbarButtonHoverShape, ForegroundStyle>);
    }
  }
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>(uint64_t a1, uint64_t a2)
{
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11(a1, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>(uint64_t a1)
{
}

uint64_t outlined retain of StrokeShapeView<RoundedRectangle, Color, _ShapeView<RoundedRectangle, Color>>(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for ToolbarButtonEdgeOutsetModifier()
{
  return &type metadata for ToolbarButtonEdgeOutsetModifier;
}

uint64_t sub_188085100()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>>, CustomHoverEffectModifier<HoverEffect>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<HStack<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _TraitWritingModifier<TransitionTraitKey>>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, _ContentShapeKindModifier<ToolbarButtonHoverShape>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type CustomHoverEffectModifier<HoverEffect> and conformance CustomHoverEffectModifier<A>);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ToolbarButtonEdgeOutsetModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<AnyView, _TraitWritingModifier<LayoutPriorityTraitKey>>, _ConditionalContent<Image, Image>?)>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _PaddingLayout>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  char v3 = *(unsigned char *)(a1 + 48);
  swift_retain();
  outlined copy of _ConditionalContent<Image, Image>?(v2, v3);
  swift_retain();
  return a1;
}

_UNKNOWN **sub_1880851E8()
{
  return &protocol witness table for BarEdgeReader<A>;
}

void DeprecatedAlertBridge.host.getter()
{
}

uint64_t DeprecatedAlertBridge.isShown.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78)) = result;
  return result;
}

void DeprecatedAlertBridge.seed.getter(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80));
}

_DWORD *DeprecatedAlertBridge.seed.setter(_DWORD *result)
{
  *(_DWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80)) = *result;
  return result;
}

void DeprecatedAlertBridge.alertController.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88);
  char v3 = *(void **)((char *)v1 + v2);
  *(void *)((char *)v1 + v2) = a1;
}

uint64_t DeprecatedAlertBridge.lastEnvironment.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90));
  uint64_t v3 = v2[1];
  *a1 = *v2;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t DeprecatedAlertBridge.isChangingIdentity.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0));
}

uint64_t DeprecatedAlertBridge.isChangingIdentity.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA0)) = result;
  return result;
}

uint64_t DeprecatedAlertBridge.style.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8));
}

id closure #1 in DeprecatedAlertBridge.preferencesDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = a5 + 16;
  v15[0] = a3;
  v15[1] = a4;
  PlatformAlertController.update<A>(for:with:environmentChanged:)(a2, v15, 0, a8, a10);
  swift_beginAccess();
  uint64_t v13 = (void *)MEMORY[0x18C119DF0](v12);
  if (v13)
  {
    *((unsigned char *)v13 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v13) + 0xA0)) = 0;
  }
  return objc_msgSend(a6, sel_presentViewController_animated_completion_, a1, 1, 0);
}

void @objc DeprecatedAlertBridge.init()()
{
}

id DeprecatedAlertBridge.__deallocating_deinit()
{
  long long v2 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50);
  long long v3 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for DeprecatedAlertBridge();
  return objc_msgSendSuper2(&v4, sel_dealloc, v2, v3);
}

unint64_t DeprecatedAlertBridge.descriptionName.getter()
{
  unint64_t result = 0xD000000000000011;
  uint64_t v2 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8));
  if (!v2) {
    return 0xD000000000000017;
  }
  if (v2 != 1) {
    return 0xD000000000000013;
  }
  return result;
}

uint64_t DeprecatedAlertBridge.descriptionChildren.getter()
{
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88));
  if (!v1
    || (type metadata accessor for PlatformAlertController(),
        type metadata accessor for CustomRecursiveStringConvertible(),
        id v2 = v1,
        (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_6;
  }
  uint64_t v3 = *((void *)&v8 + 1);
  if (!*((void *)&v8 + 1))
  {
LABEL_6:
    outlined destroy of CustomRecursiveStringConvertible?((uint64_t)&v7, (uint64_t (*)(void))type metadata accessor for CustomRecursiveStringConvertible?);
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v5;
}

uint64_t DeprecatedAlertBridge.descriptionAttributes.getter()
{
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88));
  if (!v1
    || (type metadata accessor for PlatformAlertController(),
        type metadata accessor for CustomRecursiveStringConvertible(),
        id v2 = v1,
        (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_6;
  }
  uint64_t v3 = *((void *)&v8 + 1);
  if (!*((void *)&v8 + 1))
  {
LABEL_6:
    outlined destroy of CustomRecursiveStringConvertible?((uint64_t)&v7, (uint64_t (*)(void))type metadata accessor for CustomRecursiveStringConvertible?);
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v5;
}

unint64_t protocol witness for CustomRecursiveStringConvertible.descriptionName.getter in conformance DeprecatedAlertBridge<A, B>()
{
  return DeprecatedAlertBridge.descriptionName.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionAttributes.getter in conformance DeprecatedAlertBridge<A, B>()
{
  return DeprecatedAlertBridge.descriptionAttributes.getter();
}

uint64_t protocol witness for CustomRecursiveStringConvertible.descriptionChildren.getter in conformance DeprecatedAlertBridge<A, B>()
{
  return DeprecatedAlertBridge.descriptionChildren.getter();
}

void type metadata accessor for CustomRecursiveStringConvertible?()
{
  if (!lazy cache variable for type metadata for CustomRecursiveStringConvertible?)
  {
    type metadata accessor for CustomRecursiveStringConvertible();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CustomRecursiveStringConvertible?);
    }
  }
}

unint64_t type metadata accessor for CustomRecursiveStringConvertible()
{
  unint64_t result = lazy cache variable for type metadata for CustomRecursiveStringConvertible;
  if (!lazy cache variable for type metadata for CustomRecursiveStringConvertible)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CustomRecursiveStringConvertible);
  }
  return result;
}

void specialized DeprecatedAlertBridge.init()()
{
}

uint64_t sub_18808594C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_188085984()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in DeprecatedAlertBridge.preferencesDidChange(_:)()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(v0[3] - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0[3] - 8) + 80);
  unint64_t v2 = (*(void *)(*(void *)(v0[3] - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in DeprecatedAlertBridge.preferencesDidChange(_:)(v0[6], (uint64_t)v0 + v1, *(uint64_t *)((char *)v0 + v2), *(uint64_t *)((char *)v0 + v2 + 8), *(uint64_t *)((char *)v0 + ((v2 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)((char *)v0 + ((((v2 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v0[2], v0[3], v0[4], v0[5]);
}

void ToolbarTitleMenu.init<>()(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t ToolbarTitleMenu.init(content:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  unsigned int v10 = (char *)&v14 - v9;
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 56);
  uint64_t v12 = v11(a3, 1, 1, a2, v8);
  a1(v12);
  ((void (*)(char *, void, uint64_t, uint64_t))v11)(v10, 0, 1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 40))(a3, v10, v6);
}

uint64_t static ToolbarTitleMenu._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, ValueMetadata **a5@<X8>)
{
  uint64_t v53 = a4;
  uint64_t v54 = a3;
  uint64_t v52 = a5;
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  int v55 = *a1;
  uint64_t v5 = *(ValueMetadata **)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(ValueMetadata **)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v9 = *(_DWORD *)(a2 + 28);
  unsigned int v10 = *(_DWORD *)(a2 + 32);
  LODWORD(v47) = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  Swift::UInt v49 = *(ValueMetadata **)(a2 + 48);
  LODWORD(v51) = *(_DWORD *)(a2 + 56);
  uint64_t v12 = *(ValueMetadata **)(a2 + 64);
  LODWORD(WitnessTable) = *(_DWORD *)(a2 + 72);
  uint64_t v73 = v5;
  int v74 = v6;
  CGRect v75 = v7;
  *(void *)&long long v76 = __PAIR64__(v9, v8);
  *((void *)&v76 + 1) = __PAIR64__(v47, v10);
  *(void *)&long long v77 = v11;
  LODWORD(v50) = _GraphInputs.environment.getter();
  uint64_t v85 = v5;
  int v86 = v6;
  uint64_t v87 = v7;
  *(void *)&long long v88 = __PAIR64__(v9, v8);
  *((void *)&v88 + 1) = __PAIR64__(v47, v10);
  uint64_t v89 = v11;
  uint64_t v90 = v49;
  int v91 = (int)v51;
  unint64_t v51 = v12;
  uint64_t v92 = v12;
  int v93 = WitnessTable;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStyleContext<A>(_:)();
  LODWORD(v73) = v50;
  uint64_t v13 = v53;
  uint64_t v14 = type metadata accessor for ToolbarTitleMenu.ChildEnvironment();
  v56[2] = v14;
  v56[3] = swift_getWitnessTable();
  type metadata accessor for Attribute<LayoutComputer>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v73, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v56, v14, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
  uint64_t v50 = 0;
  _GraphInputs.environment.setter();
  LODWORD(v73) = v55;
  type metadata accessor for ToolbarTitleMenu();
  Swift::UInt v49 = (ValueMetadata *)type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v17 = type metadata accessor for Optional();
  if (*(void *)(*(void *)(v17 - 8) + 64)) {
    closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(1);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v73 = v85;
  int v74 = v86;
  long long v76 = v88;
  CGRect v75 = v87;
  *(void *)&long long v77 = v89;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  v56[4] = v13;
  uint64_t v57 = v65;
  int v58 = v66;
  uint64_t v59 = v67;
  long long v60 = v68;
  long long v61 = v69;
  long long v62 = v70;
  uint64_t v63 = v71;
  int v64 = v72;
  uint64_t WitnessTable = swift_getWitnessTable();
  PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v57, 0, (uint64_t)&v73);
  uint64_t v19 = v73;
  int v20 = v74;
  uint64_t v21 = v75;
  int v22 = v76;
  uint64_t v23 = *((void *)&v76 + 1);
  uint64_t v47 = v17;
  uint64_t v25 = v78;
  uint64_t v24 = v79;
  int v45 = v83;
  int v46 = v82;
  int v44 = v84;
  long long v42 = v77;
  long long v43 = v80;
  uint64_t v26 = v81;
  LODWORD(v73) = v55;
  uint64_t v27 = _GraphValue.value.getter();
  int v55 = v27;
  Swift::UInt v49 = (ValueMetadata *)&v42;
  int v74 = v20;
  uint64_t v73 = v19;
  CGRect v75 = v21;
  LODWORD(v76) = v22;
  long long v77 = v42;
  *((void *)&v76 + 1) = v23;
  uint64_t v78 = v25;
  uint64_t v79 = v24;
  long long v80 = v43;
  uint64_t v81 = v26;
  int v82 = v46;
  unsigned __int8 v83 = v45;
  int v84 = v44;
  MEMORY[0x1F4188790](v27);
  uint64_t v65 = &type metadata for AllPlatformItemListFlags;
  uint64_t v66 = v47;
  uint64_t v67 = &protocol witness table for AllPlatformItemListFlags;
  *(void *)&long long v68 = WitnessTable;
  uint64_t v40 = type metadata accessor for PlatformItemListGenerator();
  uint64_t v41 = swift_getWitnessTable();
  type metadata accessor for Attribute<LayoutComputer>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>);
  uint64_t v29 = v28;
  uint64_t v30 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v73, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v39, v40, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v31);
  uint64_t v32 = v73;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v29) = v65;
  uint64_t v33 = PreferencesOutputs.init()();
  uint64_t v73 = v65;
  int v74 = v66;
  CGRect v75 = v51;
  uint64_t v65 = v90;
  LODWORD(v66) = v91;
  MEMORY[0x1F4188790](v33);
  uint64_t v34 = v53;
  *(void *)&v39[-32] = v54;
  *(void *)&v39[-24] = v34;
  *(_DWORD *)&v39[-16] = v55;
  *(_DWORD *)&v39[-12] = v29;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  int v36 = v74;
  char v37 = v75;
  uint64_t v38 = v52;
  *uint64_t v52 = v73;
  *((_DWORD *)v38 + 2) = v36;
  void v38[2] = v37;
  return result;
}

uint64_t closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(uint64_t a1)
{
  void v5[2] = type metadata accessor for ToolbarTitleMenu();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t implicit closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v7 = type metadata accessor for ToolbarTitleMenu.PreferenceTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for ToolbarStorage.NavigationProperties?(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t ToolbarTitleMenu.ChildEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t ToolbarTitleMenu.PreferenceTransform.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ToolbarTitleMenu();
  uint64_t Value = AGGraphGetValue();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarTitleMenu<A>.ChildEnvironment@<X0>(void *a1@<X8>)
{
  return ToolbarTitleMenu.ChildEnvironment.value.getter(a1);
}

uint64_t (*ToolbarTitleMenu.PreferenceTransform.value.getter(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t v7 = type metadata accessor for ToolbarTitleMenu();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v25 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v25 + 64);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - v14;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = 0;
  v15[16] = -2;
  uint64_t v17 = (char *)&v24 + *(int *)(v16 + 32) - v14;
  uint64_t v18 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  ToolbarTitleMenu.PreferenceTransform.content.getter((uint64_t)v9);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
  LODWORD(a2) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 48))(v6, 1, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (a2 == 1)
  {
    uint64_t v19 = 0;
    char v20 = -1;
  }
  else
  {
    uint64_t v19 = AGCreateWeakAttribute();
    char v20 = 0;
  }
  outlined consume of ToolbarStorage.NavigationProperties.Actions?(*((void *)v15 + 1), v15[16]);
  *((void *)v15 + 1) = v19;
  v15[16] = v20;
  outlined init with copy of ToolbarStorage.NavigationProperties((uint64_t)v15, (uint64_t)v12);
  unint64_t v21 = (*(unsigned __int8 *)(v25 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v22 = swift_allocObject();
  outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v12, v22 + v21);
  outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v15);
  return partial apply for closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter;
}

uint64_t closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v14[-v8];
  outlined init with copy of ToolbarStorage.NavigationProperties?(a1, (uint64_t)&v14[-v8]);
  uint64_t v10 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v9);
  if (v12 == 1)
  {
    outlined destroy of ToolbarStorage.NavigationProperties?(a1);
    outlined init with copy of ToolbarStorage.NavigationProperties(a2, a1);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
  else
  {
    outlined init with copy of ToolbarStorage.NavigationProperties(a2, (uint64_t)v6);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV20NavigationPropertiesV_s5NeverOytTg503_s7c4UI23gh32KeyV6reduce5value9nextValueyAA14eF26V0cD0VSgz_AKyXEtFZyAJXEfU_AHSgTf1cn_n((uint64_t)v6, a1);
    return outlined destroy of ToolbarStorage.NavigationProperties?((uint64_t)v6);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarTitleMenu<A>.PreferenceTransform@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = ToolbarTitleMenu.PreferenceTransform.value.getter(*v2, *(void *)(a1 + 16));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance ToolbarTitleMenu<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, ValueMetadata **a4@<X8>)
{
  return static ToolbarTitleMenu._makeToolbar(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t View.toolbarTitleMenu<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  void v10[6] = a1;
  v10[7] = a2;
  type metadata accessor for ToolbarTitleMenu();
  uint64_t v8 = type metadata accessor for TupleToolbarContent();
  return View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.toolbarTitleMenu<A>(content:), (uint64_t)v10, a3, v8, a5);
}

uint64_t closure #1 in View.toolbarTitleMenu<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v22[1] = a7;
  uint64_t v13 = type metadata accessor for ToolbarTitleMenu();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v22 - v18;
  v22[4] = a3;
  unsigned char v22[5] = a4;
  _OWORD v22[6] = a5;
  v22[7] = a6;
  v22[8] = a1;
  v22[9] = a2;
  ToolbarTitleMenu.init(content:)((void (*)(uint64_t))partial apply for closure #1 in closure #1 in View.toolbarTitleMenu<A>(content:), a4, (uint64_t)v16);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  char v20 = *(void (**)(char *, uint64_t))(v14 + 8);
  v20(v16, v13);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v19, v13, &protocol witness table for ToolbarTitleMenu<A>);
  return ((uint64_t (*)(char *, uint64_t))v20)(v19, v13);
}

uint64_t closure #1 in closure #1 in View.toolbarTitleMenu<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - v10;
  v12(v9);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a4);
}

uint64_t type metadata accessor for ToolbarTitleMenu.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ToolbarTitleMenu()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)()
{
  return implicit closure #1 in static ToolbarTitleMenu._makeToolbar(content:inputs:)(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)()
{
  return partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)((uint64_t (*)(void, void, void, void, void, void))closure #1 in View.toolbarTitleMenu<A>(content:));
}

uint64_t getEnumTagSinglePayload for ToolbarTitleMenu(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ToolbarTitleMenu(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x1880872F8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_188087320()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarTitleMenu<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameSelectorKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in View.toolbarTitleMenu<A>(content:)()
{
  return partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)((uint64_t (*)(void, void, void, void, void, void))closure #1 in closure #1 in View.toolbarTitleMenu<A>(content:));
}

uint64_t partial apply for closure #1 in View.toolbarTitleMenu<A>(content:)(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[6], v1[7], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata accessor for ToolbarTitleMenu.PreferenceTransform()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ToolbarStorage.NavigationProperties?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in ToolbarTitleMenu<A>.PreferenceTransform()
{
  return swift_getWitnessTable();
}

uint64_t sub_188087658()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined consume of ToolbarStorage.NavigationProperties.Actions?(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 254) {
    return outlined consume of PlatformItemCollection?(result, a2);
  }
  return result;
}

uint64_t outlined init with copy of ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_188087708()
{
  uint64_t v1 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  unsigned int v3 = *(unsigned __int8 *)(v2 + 16);
  if (v3 <= 0xFD) {
    outlined consume of PlatformItemCollection.Storage(*(void *)(v2 + 8), v3 & 1);
  }
  uint64_t v4 = v2 + *(int *)(v1 + 24);
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v6 = *(void *)(v4 + 184);
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v8 = *(unsigned __int8 *)(v4 + 72);
      if (v8 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v4 + 64), v8);
        uint64_t v6 = *(void *)(v4 + 184);
        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v7 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v4 + 168), *(void *)(v4 + 176), v6);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v4 + 256))
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void **)(v4 + 264);
      if ((unint64_t)v9 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v10 = *(void *)(v4 + 328);
    if (v10 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v4 + 296), *(void *)(v4 + 304), *(void *)(v4 + 312), *(void *)(v4 + 320), v10, *(void *)(v4 + 336), *(void *)(v4 + 344), *(void *)(v4 + 352), *(void *)(v4 + 360), *(void *)(v4 + 368), *(void *)(v4 + 376), *(void *)(v4 + 384), *(void *)(v4 + 392));
    }
    uint64_t v11 = *(void *)(v4 + 408);
    if (v11)
    {
      if (v11 == 1)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (*(void *)(v4 + 504)) {
          swift_release();
        }
        if (*(void *)(v4 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v4 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v4 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v12 = v4 + *(int *)(v5 + 112);
        uint64_t v13 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
        {
          uint64_t v14 = v12 + *(int *)(v13 + 20);
          outlined consume of Text.Storage(*(void *)v14, *(void *)(v14 + 8), *(unsigned char *)(v14 + 16));
          swift_bridgeObjectRelease();
          uint64_t v15 = v14 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v16 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
          if (*(void *)(v12 + *(int *)(v13 + 24))) {
            swift_release();
          }
        }
        swift_release();
        goto LABEL_34;
      }
      swift_release();
    }
    if (*(void *)(v4 + 424)) {
      swift_release();
    }
    if (*(void *)(v4 + 440)) {
      swift_release();
    }
    goto LABEL_23;
  }
LABEL_34:

  return swift_deallocObject();
}

uint64_t outlined init with take of ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ToolbarStorage.NavigationProperties(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in ToolbarTitleMenu.PreferenceTransform.value.getter(a1, v4);
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ToolbarStorage.NavigationProperties?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties?(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.NavigationProperties?(0, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *UIKitBarItemHost.__allocating_init(rootView:)(objc_class *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = specialized UIKitBarItemHost.init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*((void *)v2 + 200) - 8) + 8))(a1);
  return v5;
}

uint64_t specialized CollectionChanges.Projection.index(before:)(unint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = a1 - 1;
  if (__OFSUB__(a1, 1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3 < -1)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(a3 + 16) < a1)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (a1)
  {
    id v4 = (unsigned char *)(a3 + 40 * a1 + 24);
    uint64_t v5 = a1 - 1;
    while (v5 <= v3)
    {
      if (*v4)
      {
        if (*v4 == 1)
        {
          if (a2 == 1) {
            return v5;
          }
        }
        else if (a2 == 2)
        {
          return v5;
        }
      }
      else if (!a2)
      {
        return v5;
      }
      --v5;
      v4 -= 40;
      if (v5 == -1) {
        goto LABEL_19;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_19:
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CollectionChanges.Projection.index(after:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v6 >= a5) {
    return a5;
  }
  uint64_t v7 = *(void *)(a3 + 16);
  if (v7 < v6) {
    goto LABEL_9;
  }
  if (v6 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v8 = specialized Collection.firstIndex(where:)(a3 + 32, v6, (2 * v7) | 1, a2);
  if ((v9 & 1) == 0) {
    return v8;
  }
LABEL_11:
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CollectionChanges.Projection.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(a3 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = a3 + 40 * a1;
  if (*(unsigned __int8 *)(v3 + 64) >= 2u) {
    return *(void *)(v3 + 32);
  }
LABEL_7:
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t result;
  Swift::String v5;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(a3 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v3 = a3 + 40 * a1;
  if (*(unsigned __int8 *)(v3 + 64) <= 1u) {
    return *(void *)(v3 + 32);
  }
LABEL_7:
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void @objc UIKitBarItemHost.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized UIKitBarItemHost.init(coder:)();
}

void closure #1 in UIKitBarItemHost.willMove(toSuperview:)(double *a1, double *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *a1;
  double v11 = *a2;
  uint64_t v12 = a3 + 16;
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x18C119DF0](a3 + 16);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBBEA8], v6);
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    double v21 = *(double *)v20;
    uint64_t v22 = v20[1];
    EnvironmentValues.pixelLength.getter();
    double v16 = v15;
    swift_release();
    swift_release();
    double v21 = v11;
    specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v16);
    double v17 = v21;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v17 != v10)
    {
      objc_msgSend(v14, sel_frame);
      objc_msgSend(v14, sel_setFrame_);
      swift_beginAccess();
      uint64_t v18 = (void *)MEMORY[0x18C119DF0](v12);
      if (v18)
      {
        uint64_t v19 = v18;
        objc_msgSend(v18, sel_invalidateIntrinsicContentSize);
      }
    }
  }
}

uint64_t UIKitBarItemHost.__ivar_destroyer()
{
  return swift_release();
}

uint64_t @objc UIKitBarItemHost.__ivar_destroyer()
{
  return swift_release();
}

void UIKitBarPaletteHost.item.didset()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI19UIKitBarPaletteHost_host);
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUI19UIKitBarPaletteHost_item;
  swift_beginAccess();
  outlined init with copy of _ViewList_View(v2 + 104, (uint64_t)v6);
  outlined init with copy of _ViewList_View((uint64_t)v6, (uint64_t)v5);
  uint64_t v3 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x60);
  swift_beginAccess();
  id v4 = v1;
  outlined assign with take of _ViewList_View((uint64_t)v5, v3);
  swift_endAccess();
  v5[0] = 1;
  type metadata accessor for _UIHostingView<_ViewList_View>();
  _s7SwiftUI14_UIHostingViewCyAA01_d5List_D0VGACyxGAA0D12RendererHostAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<_ViewList_View>);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of _ViewList_View((uint64_t)v6);
}

uint64_t ObjC metadata update function for UIKitBarPaletteHost()
{
  return type metadata accessor for UIKitBarPaletteHost(0);
}

uint64_t type metadata accessor for UIKitBarPaletteHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitBarPaletteHost);
}

uint64_t type metadata completion function for UIKitBarPaletteHost()
{
  uint64_t result = type metadata accessor for ToolbarStorage.Item(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance UIKitBarPaletteHost()
{
  return EnvironmentValues.preferenceBridge.setter();
}

uint64_t UIKitBarButtonItem.item.didset()
{
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = &v12[-v2];
  uint64_t v4 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item;
  swift_beginAccess();
  _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(v8, (uint64_t)v3, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1) {
    return _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v3, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item);
  }
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v3, (uint64_t)v7, type metadata accessor for ToolbarStorage.Item);
  outlined init with copy of _ViewList_View((uint64_t)(v7 + 104), (uint64_t)v13);
  char v10 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge);
  swift_unknownObjectWeakInit();
  uint64_t v11 = swift_unknownObjectWeakAssign();
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2(v11, (uint64_t)&v19, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
  _OWORD v15[2] = v13[2];
  uint64_t v15[3] = v13[3];
  unsigned char v15[4] = v13[4];
  uint64_t v16 = v14;
  v15[0] = v13[0];
  v15[1] = v13[1];
  char v17 = v10;
  char v18 = 0;
  UIKitBarButtonItem.updateHost(rootView:)((uint64_t)v15);
  outlined destroy of BarItemView((uint64_t)v15);
  return outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v7, type metadata accessor for ToolbarStorage.Item);
}

uint64_t UIKitBarButtonItem.listView.didset()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView;
  swift_beginAccess();
  outlined init with copy of _ViewList_View?(v1, (uint64_t)&v7, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308]);
  if (!*((void *)&v8 + 1)) {
    return _sypSgWOhTm_11((uint64_t)&v7, &lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308]);
  }
  void v16[2] = v9;
  void v16[3] = v10;
  _OWORD v16[4] = v11;
  uint64_t v17 = v12;
  v16[0] = v7;
  v16[1] = v8;
  outlined init with copy of _ViewList_View((uint64_t)v16, (uint64_t)v5);
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)&v4, (uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
  long long v9 = v5[2];
  long long v10 = v5[3];
  long long v11 = v5[4];
  uint64_t v12 = v6;
  long long v7 = v5[0];
  long long v8 = v5[1];
  char v13 = v2;
  char v14 = 0;
  UIKitBarButtonItem.updateHost(rootView:)((uint64_t)&v7);
  outlined destroy of BarItemView((uint64_t)&v7);
  return outlined destroy of _ViewList_View((uint64_t)v16);
}

void UIKitBarButtonItem.updateHost(rootView:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host;
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
  outlined init with copy of BarItemView(a1, (uint64_t)v9);
  outlined init with copy of BarItemView((uint64_t)v9, (uint64_t)v8);
  uint64_t v5 = (uint64_t)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x60);
  swift_beginAccess();
  uint64_t v6 = v4;
  outlined assign with take of BarItemView((uint64_t)v8, v5);
  swift_endAccess();
  v8[0] = 1;
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of BarItemView((uint64_t)v9);

  id v7 = objc_msgSend(*(id *)(v2 + v3), sel_window);
  if (v7)
  {
  }
  else
  {
    MEMORY[0x1F4188790](0);
    static Update.ensure<A>(_:)();
  }
}

void closure #1 in UIKitBarButtonItem.updateHost(rootView:)(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host);
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  id v2 = v1;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
}

void closure #1 in UIKitBarButtonItem.performAction(_:)(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v17 - v3;
  _s7SwiftUI16PlatformItemListV0D0VSgWOcTm_0(a1, (uint64_t)&v17 - v3, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    _s7SwiftUI16PlatformItemListV0D0VSgWOhTm_0((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item);
  }
  else
  {
    uint64_t v7 = *((void *)v4 + 50);
    uint64_t v6 = (void (*)(void))*((void *)v4 + 51);
    uint64_t v8 = *((void *)v4 + 52);
    uint64_t v9 = *((void *)v4 + 53);
    uint64_t v10 = *((void *)v4 + 54);
    uint64_t v11 = *((void *)v4 + 55);
    uint64_t v12 = *((void *)v4 + 56);
    uint64_t v13 = *((void *)v4 + 57);
    char v14 = v4[464];
    LOBYTE(v15) = v14;
    outlined copy of PlatformItemList.Item.SelectionBehavior?(v7, (uint64_t)v6, v8, v9, v10, v11, v12, v13, v15, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?)((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (v6 != (void (*)(void))1)
    {
      outlined copy of AppIntentExecutor?((uint64_t)v6);
      LOBYTE(v16) = v14;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v7, (uint64_t)v6, v8, v9, v10, v11, v12, v13, v16, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      if (v6)
      {
        v6();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
      }
    }
  }
}

id @objc UIKitBarButtonItem.accessibilityIdentifier.getter(void *a1, uint64_t a2, SEL *a3)
{
  id v4 = a1;
  uint64_t v5 = UIKitBarButtonItem.accessibilityIdentifier.getter(a3);
  uint64_t v7 = v6;

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x18C115780](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t UIKitBarButtonItem.accessibilityIdentifier.getter(SEL *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v4 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], sel_accessibilityElements);
  uint64_t v5 = MEMORY[0x1E4FBC840];
  if (!v4)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_9;
  }
  uint64_t v6 = v4;
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v7 + 16))
  {
    long long v16 = 0u;
    long long v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(v7 + 32, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
LABEL_9:
    _sypSgWOhTm_11((uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
    goto LABEL_10;
  }
  outlined init with take of Any(&v16, v18);
  outlined init with copy of Any((uint64_t)v18, (uint64_t)&v16);
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if (swift_dynamicCast())
  {
    id v8 = [v14 *a1];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      return v10;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
LABEL_10:
  v15.receiver = v1;
  v15.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v15, *a1);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = v11;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

id UIKitBarButtonItem.accessibilityTraits.getter()
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], sel_accessibilityElements);
  uint64_t v3 = MEMORY[0x1E4FBC840];
  if (!v2)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_8;
  }
  id v4 = v2;
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v5 + 16))
  {
    long long v10 = 0u;
    long long v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with copy of Any(v5 + 32, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_8:
    _sypSgWOhTm_11((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
LABEL_9:
    v9.receiver = v0;
    v9.super_class = ObjectType;
    return objc_msgSendSuper2(&v9, sel_accessibilityTraits);
  }
  outlined init with take of Any(&v10, v12);
  outlined init with copy of Any((uint64_t)v12, (uint64_t)&v10);
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    goto LABEL_9;
  }
  id v6 = objc_msgSend(v8, sel_accessibilityTraits);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v6;
}

uint64_t UIKitBarButtonItem.accessibilityCustomActions.getter()
{
  ObjectType = (objc_class *)swift_getObjectType();
  id v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host], sel_accessibilityElements);
  uint64_t v3 = MEMORY[0x1E4FBC840];
  if (!v2)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    goto LABEL_9;
  }
  id v4 = v2;
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v5 + 16))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  outlined init with copy of Any(v5 + 32, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1))
  {
LABEL_9:
    _sypSgWOhTm_11((uint64_t)&v14, (unint64_t *)&lazy cache variable for type metadata for Any?, v3 + 8);
    goto LABEL_10;
  }
  outlined init with take of Any(&v14, v16);
  outlined init with copy of Any((uint64_t)v16, (uint64_t)&v14);
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if (swift_dynamicCast())
  {
    id v6 = objc_msgSend(v12, sel_accessibilityCustomActions);
    if (v6)
    {
      uint64_t v7 = v6;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
      uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
      return v8;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
LABEL_10:
  v13.receiver = v0;
  v13.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v13, sel_accessibilityCustomActions);
  if (!v9) {
    return 0;
  }
  long long v10 = v9;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

uint64_t ObjC metadata update function for UIKitBarButtonItem()
{
  return type metadata accessor for UIKitBarButtonItem(0);
}

uint64_t ObjC metadata update function for UIKitBarButtonItemGroup()
{
  return type metadata accessor for UIKitBarButtonItemGroup(0);
}

void UINavigationItem.updateTitleIfNeeded(_:)(void *a1)
{
  id v3 = objc_msgSend(v1, sel_titleView);

  if (!v3
    || (id v4 = objc_msgSend(v1, sel_titleView)) != 0
    && (uint64_t v5 = v4,
        _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost), uint64_t v6 = swift_dynamicCastClass(), v5, v6))
  {
    id v7 = objc_msgSend(v1, sel_titleView);
    id v8 = objc_msgSend(a1, sel_titleView);
    id v9 = v8;
    if (v7)
    {

      if (v9)
      {

        if (v7 == v9) {
          return;
        }
      }
    }
    else
    {
      if (!v8) {
        return;
      }
    }
    id v10 = objc_msgSend(a1, sel_titleView);
    objc_msgSend(v1, sel_setTitleView_, v10);
  }
}

uint64_t _s7SwiftUI14_UIHostingViewCyAA01_d5List_D0VGACyxGAA0D12RendererHostAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_188089DF8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  int64_t v4 = a3 >> 1;
  if (a3 >> 1 == a2)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = (unsigned char *)(result + 40 * a2 + 32);
    while (a2 < v4)
    {
      if (*v5)
      {
        if (*v5 == 1)
        {
          if (a4 == 1) {
            return a2;
          }
        }
        else if (a4 == 2)
        {
          return a2;
        }
      }
      else if (!a4)
      {
        return a2;
      }
      ++a2;
      v5 += 40;
      if (v4 == a2) {
        return 0;
      }
    }
    __break(1u);
  }
  return result;
}

id specialized static UIKitBarButtonItem.makeVended(item:context:)(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v6);
  id v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _ViewList_View(a1 + 104, (uint64_t)v57);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v56, (uint64_t)&v63, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
  v59[2] = v57[2];
  v59[3] = v57[3];
  v59[4] = v57[4];
  uint64_t v60 = v58;
  v59[0] = v57[0];
  v59[1] = v57[1];
  LODWORD(v54) = a3;
  char v61 = a3;
  char v62 = 0;
  outlined init with copy of BarItemView((uint64_t)v59, (uint64_t)v57);
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  id v10 = (char *)objc_allocWithZone(v9);
  long long v11 = (void *)MEMORY[0x1E4FBC8C8];
  id v12 = &v10[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v10) + 0x650)];
  *(void *)id v12 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *((void *)v12 + 1) = 0;
  outlined init with copy of BarItemView((uint64_t)v57, (uint64_t)v56);
  objc_super v13 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v56);
  long long v14 = (void *)((char *)v13 + *(void *)((*v11 & *v13) + 0xB8));
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t *v14 = 0;
  if (v15)
  {
    __int16 v16 = word_1ED42A47A;
    if (((unsigned __int16)word_1ED42A47A & ~(unsigned __int16)word_1ED42A478) == 0) {
      __int16 v16 = 0;
    }
    __int16 v55 = v16 | word_1ED42A478;
    _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  outlined destroy of BarItemView((uint64_t)v57);
  swift_weakLoadStrong();
  swift_retain();
  ViewGraph.preferenceBridge.setter();
  swift_release();
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(a1, (uint64_t)v8, type metadata accessor for ToolbarStorage.Item);
  id v17 = objc_allocWithZone((Class)type metadata accessor for UIKitBarButtonItem(0));
  id v18 = a2;
  uint64_t v19 = v13;
  id v20 = specialized UIKitBarButtonItem.init(item:context:host:)((uint64_t)v8, (uint64_t)v18, (int)v54, v19);

  outlined init with copy of ToolbarItemPlacement.Role(a1 + 48, (uint64_t)v57);
  double v21 = &selRef_scrollViewWillEndDragging_withVelocity_targetContentOffset_;
  id v54 = v20;
  if (BYTE8(v57[2]) != 2
    || ((unint64_t)(*(void *)&v57[0] - 21) > 1 ? (BOOL v22 = *(void *)&v57[0] == 4) : (BOOL v22 = 1),
        !v22 ? (BOOL v23 = *(void *)&v57[0] == 1) : (BOOL v23 = 1),
        !v23
     || (int8x16_t v24 = vorrq_s8(*(int8x16_t *)((char *)v57 + 8), *(int8x16_t *)((char *)&v57[1] + 8)),
         *(void *)&vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)))))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v57);
    objc_msgSend(v19, sel_bounds);
    if (v26 == 0.0 && v25 == 0.0)
    {
      lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
      CGSize v27 = ViewRendererHost.idealSize()();
      objc_msgSend(v19, sel_setBounds_, 0.0, 0.0, v27.width, v27.height);
    }
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
    ViewRendererHost.updateViewGraph<A>(body:)();
    uint64_t v28 = *(void *)&v57[0];
    if (*(void *)(*(void *)&v57[0] + 16) == 1)
    {
      uint64_t v29 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      uint64_t v30 = (void *)(v28
                     + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)));
      uint64_t v31 = v30[37];
      uint64_t v32 = v30[38];
      uint64_t v34 = v30[39];
      uint64_t v33 = v30[40];
      unint64_t v36 = v30[41];
      uint64_t v35 = v30[42];
      uint64_t v52 = v30[43];
      uint64_t v53 = v35;
      uint64_t v37 = v30[44];
      uint64_t v38 = v30[45];
      uint64_t v50 = v30[46];
      uint64_t v51 = v37;
      uint64_t v39 = v30[48];
      uint64_t v47 = v30[47];
      uint64_t v48 = v38;
      uint64_t v49 = v30[49];
      swift_bridgeObjectRelease();
      double v21 = &selRef_scrollViewWillEndDragging_withVelocity_targetContentOffset_;
      if (v36 >> 2 != 0xFFFFFFFF
        && v36 >> 62 == 3
        && v36 == 0xC000000000000000
        && v31 == 1
        && !(v34 | v32 | v33)
        && !(v52 | v53 | v51 | v48 | v50 | v47 | v39 | v49))
      {
        id v40 = objc_msgSend(self, sel_flexibleSpaceItem);

        id v41 = v40;
        goto LABEL_31;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      double v21 = &selRef_scrollViewWillEndDragging_withVelocity_targetContentOffset_;
    }
  }
  [v19 v21[440]];
  if (v43 == 0.0 && v42 == 0.0)
  {
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
    CGSize v44 = ViewRendererHost.idealSize()();
    objc_msgSend(v19, sel_setBounds_, 0.0, 0.0, v44.width, v44.height);
  }
  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  ViewRendererHost.updateViewGraph<A>(body:)();
  id v41 = v54;
  UIKitBarButtonItem.updatePlatformItem(_:)(*(uint64_t *)&v57[0]);

  swift_bridgeObjectRelease();
LABEL_31:
  outlined destroy of BarItemView((uint64_t)v59);
  return v41;
}

id specialized UIKitBarButtonItem.init(listView:context:host:)(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v28 = a4;
  int v27 = a3;
  uint64_t v30 = a2;
  uint64_t v26 = a1;
  ObjectType = (objc_class *)swift_getObjectType();
  double v25 = type metadata accessor for ToolbarStorage.Item;
  uint64_t v6 = MEMORY[0x1E4FBB718];
  type metadata accessor for ToolbarStorage.Item?(0, &lazy cache variable for type metadata for ToolbarStorage.Item?, type metadata accessor for ToolbarStorage.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  Class v9 = (char *)&v25 - v8;
  uint64_t v10 = (uint64_t)&v4[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  uint64_t v11 = type metadata accessor for ToolbarStorage.Item(0);
  id v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  uint64_t v13 = (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView];
  *(_OWORD *)uint64_t v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(void *)(v13 + 80) = 0;
  uint64_t v14 = OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge;
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = 2;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = &v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  uint64_t v16 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v5[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection] = 0;
  v12((uint64_t)v9, 1, 1, v11);
  swift_beginAccess();
  id v17 = v5;
  outlined assign with take of _ViewList_View?((uint64_t)v9, v10, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.Item?, (uint64_t)v25, v6, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.Item?);
  swift_endAccess();
  uint64_t v18 = v26;
  outlined init with copy of _ViewList_View(v26, (uint64_t)v33);
  swift_beginAccess();
  outlined assign with take of _ViewList_View?((uint64_t)v33, v13, (uint64_t)&lazy cache variable for type metadata for _ViewList_View?, MEMORY[0x1E4F3F308], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarItemPlacement.Role?);
  swift_endAccess();
  LOBYTE(v10) = v27;
  v5[v14] = v27;
  uint64_t v19 = v28;
  *(void *)&v17[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_host] = v28;
  id v20 = v19;

  v38.receiver = v17;
  v38.super_class = ObjectType;
  id v21 = objc_msgSendSuper2(&v38, sel_init);
  outlined init with copy of _ViewList_View(v18, (uint64_t)v31);
  swift_unknownObjectWeakInit();
  uint64_t v22 = swift_unknownObjectWeakAssign();
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2(v22, (uint64_t)&v37, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
  v33[2] = v31[2];
  v33[3] = v31[3];
  v33[4] = v31[4];
  uint64_t v34 = v32;
  v33[0] = v31[0];
  v33[1] = v31[1];
  char v35 = v10;
  char v36 = 0;
  id v23 = v21;
  UIKitBarButtonItem.initialize(rootView:context:)((uint64_t)v33);

  outlined destroy of _ViewList_View(v18);
  outlined destroy of BarItemView((uint64_t)v33);
  return v23;
}

id specialized static UIKitBarButtonItem.makeRepresentativeItem(view:context:)(uint64_t a1, void *a2, int a3)
{
  outlined init with copy of _ViewList_View(a1, (uint64_t)v19);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  _s7SwiftUI16PlatformItemListV0D0VWObTm_2((uint64_t)v18, (uint64_t)&v25, (uint64_t (*)(void))type metadata accessor for WeakBox<UIBarButtonItem>);
  uint64_t v21[2] = v19[2];
  v21[3] = v19[3];
  v21[4] = v19[4];
  uint64_t v22 = v20;
  v21[0] = v19[0];
  v21[1] = v19[1];
  char v23 = a3;
  char v24 = 0;
  outlined init with copy of BarItemView((uint64_t)v21, (uint64_t)v19);
  _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  Class v9 = &v7[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v7) + 0x650)];
  *(void *)Class v9 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *((void *)v9 + 1) = 0;
  outlined init with copy of BarItemView((uint64_t)v19, (uint64_t)v18);
  uint64_t v10 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v18);
  uint64_t v11 = (void *)((char *)v10 + *(void *)((*v8 & *v10) + 0xB8));
  swift_beginAccess();
  uint64_t v12 = *v11;
  *uint64_t v11 = 0;
  if (v12)
  {
    _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for _UIHostingView<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  outlined destroy of BarItemView((uint64_t)v19);
  outlined init with copy of _ViewList_View(a1, (uint64_t)v19);
  objc_allocWithZone((Class)type metadata accessor for UIKitBarButtonItem(0));
  id v13 = a2;
  uint64_t v14 = v10;
  id v15 = specialized UIKitBarButtonItem.init(listView:context:host:)((uint64_t)v19, (uint64_t)v13, a3, v14);

  lazy protocol witness table accessor for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIKitBarItemHost<BarItemView> and conformance _UIHostingView<A>, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost);
  CGSize v16 = ViewRendererHost.idealSize()();
  objc_msgSend(v14, sel_setBounds_, 0.0, 0.0, v16.width, v16.height);
  ViewRendererHost.updateViewGraph<A>(body:)();
  UIKitBarButtonItem.updatePlatformItem(_:)(*(uint64_t *)&v19[0]);

  swift_bridgeObjectRelease();
  outlined destroy of BarItemView((uint64_t)v21);
  return v15;
}

void *specialized UIKitBarItemHost.init(rootView:)(objc_class *a1)
{
  id v2 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x650));
  *id v2 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v2[1] = 0;
  id v3 = specialized _UIHostingView.init(rootView:)(a1);
  _UIHostingView.safeAreaRegions.setter(0);

  return v3;
}

void partial apply for closure #1 in UIKitBarButtonItem.updateHost(rootView:)()
{
  closure #1 in UIKitBarButtonItem.updateHost(rootView:)(*(void *)(v0 + 16));
}

uint64_t sub_18808AD7C()
{
  type metadata accessor for ToolbarStorage.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = type metadata accessor for PlatformItemList.Item();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3)) {
    goto LABEL_32;
  }

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = *(void *)(v2 + 184);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v6 = *(unsigned __int8 *)(v2 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v2 + 64), v6);
      uint64_t v4 = *(void *)(v2 + 184);
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(v2 + 168), *(void *)(v2 + 176), v4);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(v2 + 256))
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void **)(v2 + 264);
    if ((unint64_t)v7 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v8 = *(void *)(v2 + 328);
  if (v8 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v2 + 296), *(void *)(v2 + 304), *(void *)(v2 + 312), *(void *)(v2 + 320), v8, *(void *)(v2 + 336), *(void *)(v2 + 344), *(void *)(v2 + 352), *(void *)(v2 + 360), *(void *)(v2 + 368), *(void *)(v2 + 376), *(void *)(v2 + 384), *(void *)(v2 + 392));
  }
  uint64_t v9 = *(void *)(v2 + 408);
  if (!v9) {
    goto LABEL_17;
  }
  if (v9 != 1)
  {
    swift_release();
LABEL_17:
    if (*(void *)(v2 + 424)) {
      swift_release();
    }
    if (*(void *)(v2 + 440)) {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 504)) {
    swift_release();
  }
  if (*(void *)(v2 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(v2 + 552) != 1)
  {
    swift_release();
    if (*(void *)(v2 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v2 + *(int *)(v3 + 112);
  uint64_t v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    if (*(void *)(v10 + *(int *)(v11 + 24))) {
      swift_release();
    }
  }
  swift_release();
LABEL_32:

  return swift_deallocObject();
}

void _s7SwiftUI18UIKitBarButtonItemC13performActionyyypSgFyycfU_TA_0()
{
  type metadata accessor for ToolbarStorage.Item?(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));

  closure #1 in UIKitBarButtonItem.performAction(_:)(v2);
}

void specialized UIKitBarItemHost.init(coder:)()
{
  uint64_t v1 = (void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x650));
  *uint64_t v1 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v1[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized UIKitBarButtonItem.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_item];
  uint64_t v2 = type metadata accessor for ToolbarStorage.Item(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_listView];
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((void *)v3 + 10) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_edge] = 2;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v4 = &v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_platformItem];
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v0[OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_hasOwnMenuSection] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_18808B390()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_18808B3C8()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitBarItemHost.willMove(toSuperview:)(double *a1, double *a2)
{
  closure #1 in UIKitBarItemHost.willMove(toSuperview:)(a1, a2, *(void *)(v2 + 32));
}

uint64_t sub_18808B40C()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

void *type metadata accessor for BarItemViewGraph()
{
  return &unk_1ED48D420;
}

void closure #1 in UIKitBarButtonItem.updateHost(rootView:)partial apply()
{
}

uint64_t ScrollViewReader.content.getter(uint64_t a1)
{
  return a1;
}

uint64_t ScrollViewReader.content.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ScrollViewReader.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t sub_18808B4F8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in ScrollViewProxy.apply(to:)(uint64_t a1, uint64_t (*a2)(unsigned char *))
{
  return AGGraphSetUpdate();
}

uint64_t closure #1 in closure #1 in ScrollViewProxy.apply(to:)(uint64_t a1, uint64_t (*a2)(unsigned char *))
{
  type metadata accessor for PPTScrollable?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v4 = *WeakValue;
    swift_bridgeObjectRetain();
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC860];
    uint64_t v5 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = v4 + 32;
      do
      {
        outlined init with copy of TableColumnList(v6, (uint64_t)v9);
        char v7 = a2(v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
        if (v7) {
          break;
        }
        v6 += 40;
        --v5;
      }
      while (v5);
      return swift_bridgeObjectRelease();
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t ScrollViewProxy.scrollTo<A>(_:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = static Transaction.current.getter();
  if ((a4 & 1) == 0) {
    uint64_t v5 = Transaction.scrollTargetAnchor.setter();
  }
  MEMORY[0x1F4188790](v5);
  swift_retain();
  withTransaction<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)()
{
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)()
{
  return closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)();
}

Swift::Void __swiftcall ScrollViewProxy.setContentOffset(_:)(CGPoint a1)
{
  type metadata accessor for ViewGraph();
  uint64_t v1 = static GraphHost.isUpdating.getter();
  if (v1)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v1);
    static Update.ensure<A>(_:)();
  }
}

uint64_t closure #1 in ScrollViewProxy.setContentOffset(_:)(void *a1, double a2, double a3)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = swift_allocObject();
  *(double *)(v7 + 16) = a2;
  *(double *)(v7 + 24) = a3;
  LOBYTE(v5) = (*(uint64_t (**)(double (*)@<D0>(uint64_t *@<X0>, unsigned __int8 *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(v6 + 16))(partial apply for closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:), v7, v5, v6);
  swift_release();
  return v5 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.setContentOffset(_:)(void *a1)
{
  return closure #1 in ScrollViewProxy.setContentOffset(_:)(a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t partial apply for closure #1 in ScrollViewProxy.apply(to:)()
{
  return partial apply for closure #1 in ScrollViewProxy.apply(to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(unsigned char *);

  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(unsigned char *))(v0 + 24);
  AGGraphClearUpdate();
  closure #1 in closure #1 in ScrollViewProxy.apply(to:)(v1, v2);
  return AGGraphSetUpdate();
}

double closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:)@<D0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = a1[6];
  int v13 = *a2;
  ScrollGeometry.containerSize.getter();
  CGFloat v17 = v15;
  CGFloat v18 = v14;
  *(void *)&long long v21 = v6;
  *((void *)&v21 + 1) = v7;
  *(void *)&long long v22 = v8;
  *((void *)&v22 + 1) = v9;
  *(void *)&long long v23 = v10;
  *((void *)&v23 + 1) = v11;
  ScrollGeometry.contentSize.getter();
  if (v13 == 1)
  {
    v24.origin.x = a4;
    v24.origin.y = a5;
    v24.size.width = v18;
    v24.size.height = v17;
    CGRectGetMaxX(v24);
  }
  static UnitPoint.topLeading.getter();
  ScrollTarget.init(rect:anchor:)();
  *(_OWORD *)a3 = v21;
  *(_OWORD *)(a3 + 16) = v22;
  double result = *(double *)&v23;
  *(_OWORD *)(a3 + 32) = v23;
  *(_WORD *)(a3 + 48) = v12;
  return result;
}

uint64_t ScrollViewProxy.scrollTo(rect:anchor:)()
{
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(void *a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6, double a7, double a8)
{
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  uint64_t v17 = swift_allocObject();
  *(double *)(v17 + 16) = a5;
  *(double *)(v17 + 24) = a6;
  *(double *)(v17 + 32) = a7;
  *(double *)(v17 + 40) = a8;
  *(void *)(v17 + 48) = a2;
  *(void *)(v17 + 56) = a3;
  *(unsigned char *)(v17 + 64) = a4 & 1;
  char v18 = (*(uint64_t (**)(double (*)@<D0>(long long *@<X0>, unsigned __int8 *@<X1>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t))(v16 + 16))(partial apply for closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:), v17, v15, v16);
  swift_release();
  return v18 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(void *a1)
{
  return closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(unsigned char *)(v1 + 64), *(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40));
}

double closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)@<D0>(long long *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  int v12 = *a2;
  long long v14 = *a1;
  long long v15 = a1[1];
  long long v16 = a1[2];
  long long v17 = a1[3];
  ScrollGeometry.contentSize.getter();
  if (v12 == 1)
  {
    v18.origin.x = a4;
    v18.origin.y = a5;
    v18.size.width = a6;
    v18.size.height = a7;
    CGRectGetMaxX(v18);
  }
  ScrollTarget.init(rect:anchor:)();
  *(_OWORD *)a3 = v14;
  *(_OWORD *)(a3 + 16) = v15;
  double result = *(double *)&v16;
  *(_OWORD *)(a3 + 32) = v16;
  *(_WORD *)(a3 + 48) = v17;
  return result;
}

uint64_t ScrollViewProxy.runScrollTest(_:)()
{
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t ScrollViewProxy.runScrollTest(_:scrollMode:)()
{
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v9 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PPTScrollable);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t (*)(), void, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40))(v20, v9, closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:), 0, v9, v9, v7, v8);
  outlined init with copy of PPTScrollable?((uint64_t)v20, (uint64_t)&v15);
  if (v16)
  {
    outlined init with take of OptionalBinaryInteger(&v15, (uint64_t)v17);
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    __swift_project_boxed_opaque_existential_1(v17, v18);
    *(void *)&long long v15 = a3;
    *((void *)&v15 + 1) = a4;
    char v12 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(v11 + 8))(a2, &v15, v10, v11);
    outlined destroy of PPTScrollable?((uint64_t)v20);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    outlined destroy of PPTScrollable?((uint64_t)&v15);
    static os_log_type_t.fault.getter();
    int v13 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    outlined destroy of PPTScrollable?((uint64_t)v20);
    char v12 = 0;
  }
  return v12 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:)(void *a1)
{
  return closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)()
{
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PPTScrollable);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>), void, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 40))(v24, v13, closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:), 0, v13, v13, v11, v12);
  outlined init with copy of PPTScrollable?((uint64_t)v24, (uint64_t)&v19);
  if (v20)
  {
    outlined init with take of OptionalBinaryInteger(&v19, (uint64_t)v21);
    uint64_t v14 = v22;
    uint64_t v15 = v23;
    __swift_project_boxed_opaque_existential_1(v21, v22);
    *(void *)&long long v19 = a3;
    *((void *)&v19 + 1) = a4;
    char v16 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 16))(a2, &v19, a5, a6, v14, v15);
    outlined destroy of PPTScrollable?((uint64_t)v24);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  else
  {
    outlined destroy of PPTScrollable?((uint64_t)&v19);
    static os_log_type_t.fault.getter();
    long long v17 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    outlined destroy of PPTScrollable?((uint64_t)v24);
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)(void *a1)
{
  return closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:onComplete:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TableColumnList(a1, a2);
}

uint64_t ScrollViewProxy.runScrollSubTest(_:subTestName:onComplete:)()
{
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)()
{
  type metadata accessor for ViewGraph();
  uint64_t v0 = static GraphHost.isUpdating.getter();
  if (v0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](v0);
    return static Update.ensure<A>(_:)();
  }
  return result;
}

uint64_t closure #1 in ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v15);
  uint64_t v17 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for PPTScrollable);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t (*)(), void, uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 40))(v29, v17, closure #1 in closure #1 in ScrollViewProxy.runScrollTest(_:scrollMode:), 0, v17, v17, v15, v16);
  outlined init with copy of PPTScrollable?((uint64_t)v29, (uint64_t)&v24);
  if (v25)
  {
    outlined init with take of OptionalBinaryInteger(&v24, (uint64_t)v26);
    uint64_t v18 = v27;
    uint64_t v19 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    *(void *)&long long v24 = a3;
    *((void *)&v24 + 1) = a4;
    v23[0] = a5;
    v23[1] = a6;
    char v20 = (*(uint64_t (**)(uint64_t, long long *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 24))(a2, &v24, v23, a7, a8, v18, v19);
    outlined destroy of PPTScrollable?((uint64_t)v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  else
  {
    outlined destroy of PPTScrollable?((uint64_t)&v24);
    static os_log_type_t.fault.getter();
    long long v21 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    outlined destroy of PPTScrollable?((uint64_t)v29);
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t partial apply for closure #1 in ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(void *a1)
{
  return closure #1 in ScrollViewProxy.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_18808C968@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t sub_18808C974(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_18808C9B8()
{
  return 16;
}

__n128 sub_18808C9C4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18808C9D0()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of PPTScrollable?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PPTScrollable?(0, &lazy cache variable for type metadata for PPTScrollable?, &lazy cache variable for type metadata for PPTScrollable, (uint64_t)&protocol descriptor for PPTScrollable, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PPTScrollable?(uint64_t a1)
{
  type metadata accessor for PPTScrollable?(0, &lazy cache variable for type metadata for PPTScrollable?, &lazy cache variable for type metadata for PPTScrollable, (uint64_t)&protocol descriptor for PPTScrollable, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_18808CB48()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)@<D0>(long long *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in ScrollViewProxy.scrollTo(rect:anchor:)(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

void type metadata accessor for PPTScrollable?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for CVarArg(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_18808CBD4()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:)@<D0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in ScrollViewProxy.setContentOffset(_:)(a1, a2, a3, *(CGFloat *)(v3 + 16), *(CGFloat *)(v3 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in ScrollViewProxy.scrollTo<A>(_:anchor:)(void *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(v4, v2, v3, v5, v6) & 1;
}

uint64_t type metadata accessor for WidgetGraph()
{
  uint64_t result = type metadata singleton initialization cache for WidgetGraph;
  if (!type metadata singleton initialization cache for WidgetGraph) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for WidgetGraph()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in WidgetGraph.init<A>(rootWidget:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v25 = a2;
  uint64_t v31 = a5;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v10;
  int v12 = *((_DWORD *)v10 + 2);
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[5];
  uint64_t v15 = v10[6];
  int v16 = *((_DWORD *)v10 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v28 = v42;
  uint64_t v27 = v43;
  int v26 = v44;
  int v29 = HIDWORD(v44);
  uint64_t v42 = v11;
  LODWORD(v43) = v12;
  long long v45 = *(_OWORD *)(a1 + 24);
  uint64_t v44 = v13;
  uint64_t v46 = v14;
  uint64_t v47 = v15;
  int v48 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, a3);
  uint64_t v34 = a3;
  uint64_t v17 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)v33, a3, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  _GraphValue.init(_:)();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, v30, v19, v20);
  uint64_t v35 = v28;
  uint64_t v36 = v27;
  LOBYTE(v37) = v26;
  HIDWORD(v37) = v29;
  type metadata accessor for WidgetBodyAccessor();
  swift_getWitnessTable();
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = v42;
  LODWORD(v36) = v43;
  uint64_t v37 = v44;
  long long v38 = v45;
  uint64_t v39 = v46;
  uint64_t v40 = v47;
  int v41 = v48;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v32, &v35, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in WidgetGraph.init<A>(rootBundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v25 = a2;
  uint64_t v31 = a5;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v10;
  int v12 = *((_DWORD *)v10 + 2);
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[5];
  uint64_t v15 = v10[6];
  int v16 = *((_DWORD *)v10 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v28 = v42;
  uint64_t v27 = v43;
  int v26 = v44;
  int v29 = HIDWORD(v44);
  uint64_t v42 = v11;
  LODWORD(v43) = v12;
  long long v45 = *(_OWORD *)(a1 + 24);
  uint64_t v44 = v13;
  uint64_t v46 = v14;
  uint64_t v47 = v15;
  int v48 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, a3);
  uint64_t v34 = a3;
  uint64_t v17 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)v33, a3, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  _GraphValue.init(_:)();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, v30, v19, v20);
  uint64_t v35 = v28;
  uint64_t v36 = v27;
  LOBYTE(v37) = v26;
  HIDWORD(v37) = v29;
  type metadata accessor for WidgetBundleBodyAccessor();
  swift_getWitnessTable();
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v35 = v42;
  LODWORD(v36) = v43;
  uint64_t v37 = v44;
  long long v38 = v45;
  uint64_t v39 = v46;
  uint64_t v40 = v47;
  int v41 = v48;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v32, &v35, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void WidgetGraph.__allocating_init(data:)()
{
}

uint64_t ObjC metadata update function for WidgetGraph()
{
  return type metadata accessor for WidgetGraph();
}

uint64_t specialized WidgetGraph.__allocating_init<A>(rootWidget:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized WidgetGraph.init<A>(rootWidget:)(a1, a2, a3, (uint64_t)&unk_1ED48D4E0, (uint64_t)partial apply for closure #1 in WidgetGraph.init<A>(rootWidget:), (uint64_t)closure #1 in Attribute.init(value:)partial apply);
}

uint64_t specialized WidgetGraph.init<A>(rootWidget:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = a6;
  uint64_t v48 = a1;
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v47 = *(void (**)(unsigned char *, double))(v10 + 16);
  uint64_t v49 = v10 + 16;
  uint64_t v46 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v47(v46, v12);
  uint64_t v50 = v10;
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v10 + 32))(v14 + v13, &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)], a2);
  uint64_t v51 = v6;
  *(void *)(v6 + 176) = a5;
  *(void *)(v6 + 184) = v14;
  swift_retain();
  GraphHost.Data.init()();
  uint64_t v15 = v64;
  uint64_t v57 = v62;
  uint64_t v58 = v63;
  uint64_t v37 = v64;
  LOBYTE(a5) = v65;
  int v45 = v65;
  int v36 = v66;
  LODWORD(v14) = v67;
  LODWORD(v11) = v68;
  int v44 = v67;
  int v43 = v68;
  LODWORD(v13) = v69;
  int v42 = v69;
  LODWORD(a3) = v71;
  int v35 = v70;
  int v41 = v71;
  int v16 = v72;
  LODWORD(v10) = v73;
  int v40 = v72;
  int v39 = v73;
  uint64_t v56 = v74;
  int v33 = v75;
  uint64_t v55 = v76;
  int v17 = v77;
  int v38 = v77;
  int v34 = v78;
  int v32 = v79;
  int v59 = v80;
  uint64_t v54 = v81;
  id v52 = (id)AGSubgraphGetCurrent();
  char v62 = v57;
  uint64_t v63 = v58;
  int v64 = v15;
  unsigned __int8 v65 = a5;
  LOBYTE(a5) = v36;
  unsigned __int8 v66 = v36;
  int v67 = v14;
  int v68 = v11;
  int v69 = v13;
  LODWORD(v13) = v35;
  int v70 = v35;
  int v71 = a3;
  int v72 = v16;
  int v73 = v10;
  uint64_t v74 = v56;
  LODWORD(v14) = v33;
  int v75 = v33;
  uint64_t v76 = v55;
  LODWORD(v10) = v34;
  int v77 = v17;
  int v78 = v34;
  LODWORD(v11) = v32;
  int v79 = v32;
  int v80 = v59;
  uint64_t v81 = v54;
  uint64_t v18 = (void *)GraphHost.Data.globalSubgraph.getter();
  AGSubgraphSetCurrent();

  uint64_t v19 = (uint64_t)v46;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v47)(v46, v48, a2);
  uint64_t v61 = a2;
  uint64_t v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v19, v53, (uint64_t)v60, a2, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v19, a2);
  *(_DWORD *)(v51 + 192) = v62;
  swift_release();
  uint64_t v23 = v57;
  uint64_t v22 = v58;
  char v62 = v57;
  uint64_t v63 = v58;
  uint64_t v24 = v37;
  int v64 = v37;
  unsigned __int8 v65 = v45;
  unsigned __int8 v66 = a5;
  int v67 = v44;
  int v68 = v43;
  int v69 = v42;
  int v70 = v13;
  int v71 = v41;
  int v72 = v40;
  int v73 = v39;
  uint64_t v74 = v56;
  int v75 = v14;
  uint64_t v76 = v55;
  int v77 = v38;
  int v78 = v10;
  int v79 = v11;
  int v80 = v59;
  uint64_t v81 = v54;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v25 = v23;
  id v26 = v22;
  id v27 = v24;
  uint64_t v28 = GraphHost.init(data:)();
  int v29 = v52;
  AGSubgraphSetCurrent();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v28;
}

uint64_t specialized WidgetGraph.__allocating_init<A>(rootBundle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized WidgetGraph.init<A>(rootWidget:)(a1, a2, a3, (uint64_t)&unk_1ED48D4B8, (uint64_t)partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:), (uint64_t)partial apply for closure #1 in Attribute.init(value:));
}

uint64_t partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(uint64_t a1)
{
  return partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(a1, (uint64_t (*)(uint64_t, unint64_t))closure #1 in WidgetGraph.init<A>(rootBundle:));
}

uint64_t partial apply for closure #1 in WidgetGraph.init<A>(rootWidget:)(uint64_t a1)
{
  return partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(a1, (uint64_t (*)(uint64_t, unint64_t))closure #1 in WidgetGraph.init<A>(rootWidget:));
}

uint64_t partial apply for closure #1 in WidgetGraph.init<A>(rootBundle:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  return a2(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80)));
}

uint64_t sub_18808DB84(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA35AccessibilityRepresentationModifier33_AAF5C5EDB558810623EAFD84FD4E7390LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for AccessibilityRepresentationModifier);
}

uint64_t sub_18808DBA4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA35AccessibilityRepresentationModifier33_AAF5C5EDB558810623EAFD84FD4E7390LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for AccessibilityChildrenModifier);
}

ValueMetadata *type metadata accessor for AccessibilityDisclosureGroupStyle()
{
  return &type metadata for AccessibilityDisclosureGroupStyle;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AccessibilityRepresentationModifier<A>.ProxyModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityProxyModifier();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void AccessibilityRepresentationModifier.BridgedAttachment.value.getter(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  AccessibilityRepresentationModifier.BridgedAttachment.representedNodeList.getter(a1, &v19);
  if (!v19) {
    goto LABEL_12;
  }
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v4)
  {
LABEL_12:
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    v18[0] = Dictionary.init(minimumCapacity:)();
LABEL_17:
    AccessibilityAttachment.init(properties:)();
    unint64_t v15 = v19;
    id v16 = v20;
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    *a2 = v17;
    goto LABEL_18;
  }
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v5 = Dictionary.init(minimumCapacity:)();
  uint64_t v21 = v5;
  AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(a1, &v19);
  uint64_t v6 = v19;
  if (!v19)
  {
LABEL_16:
    v18[0] = v5;
    goto LABEL_17;
  }
  if (!(v19 >> 62))
  {
    if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14 != 1)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v7 = (id)MEMORY[0x18C117680](0, v6);
    goto LABEL_11;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v7 = *(id *)(v6 + 32);
LABEL_11:
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    AccessibilityNode.attachment.getter((uint64_t *)&v19);

    uint64_t v9 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v19);
    swift_bridgeObjectRelease_n();
    _s7SwiftUI20ScrollableCollection_pSgWOcTm_0((uint64_t)&v19, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v18);
    _s7SwiftUI20ScrollableCollection_pSgWOhTm_0((uint64_t)&v19, (uint64_t (*)(void))type metadata accessor for ScrollableCollection?);
    AccessibilityNode.attachment.getter((uint64_t *)&v19);

    uint64_t v10 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v10, (uint64_t)&v19);
    swift_bridgeObjectRelease_n();
    _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_1((uint64_t)&v19, (uint64_t)v18, (uint64_t)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3);
    specialized AccessibilityProperties.subscript.setter((uint64_t)v18);
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_2((uint64_t)&v19, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    v18[0] = v21;
    AccessibilityAttachment.init(properties:)();
    unint64_t v11 = v19;
    id v12 = v20;
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v11;
    *(void *)(v13 + 24) = v12;

    *a2 = v13;
LABEL_18:
    a2[1] = 0;
    return;
  }
  __break(1u);
}

void protocol witness for Rule.value.getter in conformance AccessibilityRepresentationModifier<A>.BridgedAttachment(uint64_t *a1@<X8>)
{
  AccessibilityRepresentationModifier.BridgedAttachment.value.getter(*v1, a1);
}

uint64_t closure #1 in AccessibilityProxyModifier.body(content:)(void *a1)
{
  swift_bridgeObjectRelease();
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)&static AccessibilityNodesKey.defaultValue + 1);
  *a1 = static AccessibilityNodesKey.defaultValue;
  a1[1] = v2;

  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in closure #2 in AccessibilityProxyModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AccessibilityProxyModifier();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityProxyModifier<A>.GeometryTransformModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t AccessibilityRepresentationModifier.BridgedAttachment.representedNodeList.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v4 = Value[1];
    *a2 = *Value;
    a2[1] = v4;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AccessibilityChildrenModifier.BridgedAttachment.value.getter@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  AccessibilityRepresentationModifier.BridgedAttachment.representedNodeList.getter(a1, &v13);
  if (!v13) {
    goto LABEL_15;
  }
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_15;
  }
  uint64_t result = AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(a1, &v13);
  uint64_t v6 = v13;
  if (!v13) {
    goto LABEL_15;
  }
  if (!(v13 >> 62))
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
      goto LABEL_8;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v10 != 1)
  {
LABEL_14:
    swift_bridgeObjectRelease();
LABEL_15:
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    Dictionary.init(minimumCapacity:)();
    goto LABEL_16;
  }
LABEL_8:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v7 = (id)MEMORY[0x18C117680](0, v6);
    goto LABEL_11;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v7 = *(id *)(v6 + 32);
LABEL_11:
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    AccessibilityNode.attachment.getter((uint64_t *)&v13);
    uint64_t v9 = v14;

    unint64_t v13 = 0;
    AccessibilityProperties.visibility.setter();
LABEL_16:
    AccessibilityAttachment.init(properties:)();
    unint64_t v11 = v13;
    id v12 = v14;
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v11;
    *(void *)(result + 24) = v12;
    *a2 = result;
    a2[1] = 0;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityChildrenModifier<A>.BridgedAttachment@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityChildrenModifier.BridgedAttachment.value.getter(*v1, a1);
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in AccessibilityToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void AccessibilityControlStyle.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  _OWORD v15[2] = *(void *)(a1 + 24);
  uint64_t v15[3] = v2;
  unsigned char v15[4] = type metadata accessor for _OverlayModifier();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v16 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v15 - v4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v17 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v18 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v19 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  v15[1] = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  _OWORD v15[5] = (char *)v15 - v11;
  uint64_t v25 = static Color.clear.getter();
  static Alignment.center.getter();
  uint64_t v12 = MEMORY[0x1E4F414D8];
  View.overlay<A>(_:alignment:)();
  swift_release();
  LOBYTE(v25) = 19;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = v12;
  uint64_t v24 = WitnessTable;
  uint64_t v14 = swift_getWitnessTable();
  View.accessibilityRemoveTraits(_:)((unsigned __int8 *)&v25, v3, v14);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v3);
  uint64_t v21 = v14;
  uint64_t v22 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_18808E7E0()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 192) + 8))(v6, v3);
  *(void *)(v7 - 144) = v0;
  *(void *)(v7 - 136) = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = *(void *)(v7 - 248);
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v2, WitnessTable, v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 184) + 8))(v5, v2);
  *(void *)(v7 - 160) = WitnessTable;
  *(void *)(v7 - 152) = v4;
  swift_getWitnessTable();
  uint64_t v10 = *(void *)(v7 - 216);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 176) + 8);
  v11(v9, v1);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(uint64_t, uint64_t))v11)(v10, v1);
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in AccessibilityLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance AccessibilityControlGroupStyle@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  *a1 = static AccessibilityChildBehavior.contain;

  return swift_retain();
}

uint64_t static AccessibilityPickerStyle._makeView<A>(value:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

uint64_t static AccessibilityPickerStyle._makeViewList<A>(value:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t AccessibilityPickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t AccessibilityPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X8>)
{
  return LabeledContent<>.init(content:label:)(partial apply for closure #1 in AccessibilityPickerStyle.Body.value.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in AccessibilityPickerStyle.Body.value.getter, a1);
}

uint64_t closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  static VerticalAlignment.center.getter();
  uint64_t v0 = type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityPickerButton();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ForEachSubviewCollection();
  uint64_t v3 = swift_getWitnessTable();
  unint64_t v4 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  *(void *)&long long v30 = v2;
  *((void *)&v30 + 1) = MEMORY[0x1E4F416F0];
  uint64_t v31 = v0;
  *(void *)&long long v32 = v3;
  *((void *)&v32 + 1) = v4;
  type metadata accessor for ForEach();
  _VariadicView.Tree.init(_:content:)();
  long long v10 = v22;
  char v11 = v23;
  long long v12 = v24;
  uint64_t v13 = v25;
  uint64_t v14 = v26;
  long long v15 = v27;
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  uint64_t v21 = static AccessibilityChildBehavior.contain;
  uint64_t v5 = type metadata accessor for _VariadicView.Tree();
  uint64_t v20 = WitnessTable;
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v18 = MEMORY[0x1E4F3F820];
  uint64_t v19 = v6;
  uint64_t v7 = swift_getWitnessTable();
  View._accessibilityElement(children:)(&v21, v5, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  LOBYTE(v21) = 18;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  ModifiedContent<>.accessibilityAddTraits(_:)((unsigned __int8 *)&v21, v8, (uint64_t)&v22);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v10 = v22;
  char v11 = v23;
  long long v12 = v24;
  uint64_t v13 = v25;
  uint64_t v14 = v26;
  long long v15 = v27;
  uint64_t v16 = v28;
  uint64_t v17 = v29;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v22 = v30;
  char v23 = v31;
  long long v24 = v32;
  uint64_t v25 = v33;
  uint64_t v26 = v34;
  long long v27 = v35;
  uint64_t v28 = v36;
  uint64_t v29 = v37;
  static ViewBuilder.buildExpression<A>(_:)(&v22);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _UNKNOWN **a5)
{
  long long v35 = &protocol witness table for AccessibilityPickerStyle;
  uint64_t v36 = (uint64_t)a5;
  uint64_t v10 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)&v23 - v11;
  *(void *)&long long v34 = a1;
  *((void *)&v34 + 1) = a2;
  LODWORD(v35) = a3;
  type metadata accessor for AccessibilityPickerStyle.Body();
  AccessibilityPickerStyle.Body.base.getter((uint64_t)v12);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4, a5, v13, v14);
  uint64_t v15 = type metadata accessor for PickerStyleConfiguration();
  (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v12, v15);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  *(void *)(v16 + 32) = a1;
  *(void *)(v16 + 40) = a2;
  *(_DWORD *)(v16 + 48) = a3;
  *(void *)&long long v34 = a4;
  *((void *)&v34 + 1) = MEMORY[0x1E4F41708];
  long long v35 = a5;
  uint64_t v36 = MEMORY[0x1E4F41700];
  uint64_t v17 = type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityPickerButton();
  type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113F10](&v30);
  long long v23 = v30;
  long long v26 = v30;
  long long v27 = v31;
  uint64_t v28 = v32;
  long long v24 = v33;
  long long v29 = v33;
  uint64_t v19 = type metadata accessor for ForEachSubviewCollection();
  uint64_t v20 = swift_getWitnessTable();
  unint64_t v21 = lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
  *(void *)&long long v34 = v19;
  *((void *)&v34 + 1) = MEMORY[0x1E4F416F0];
  long long v35 = (_UNKNOWN **)v17;
  uint64_t v36 = v20;
  *(void *)&long long v37 = v21;
  type metadata accessor for ForEach();
  uint64_t v25 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v26);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v23 = v34;
  long long v30 = v34;
  uint64_t v31 = v35;
  uint64_t v32 = v36;
  long long v24 = v37;
  long long v33 = v37;
  static ViewBuilder.buildExpression<A>(_:)(&v30);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a7;
  long long v26 = &type metadata for AccessibilityPickerStyle;
  uint64_t v27 = a5;
  uint64_t v28 = &protocol witness table for AccessibilityPickerStyle;
  uint64_t v29 = a6;
  uint64_t v13 = type metadata accessor for _PickerValue();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - v15;
  outlined init with copy of Subview(a1, (uint64_t)&v26);
  *(void *)&long long v23 = a2;
  *((void *)&v23 + 1) = a3;
  v24[0] = a2;
  v24[1] = a3;
  int v25 = a4;
  type metadata accessor for AccessibilityPickerStyle.Body();
  AccessibilityPickerStyle.Body.base.getter((uint64_t)v16);
  uint64_t v17 = *(void *)&v16[*(int *)(type metadata accessor for PickerStyleConfiguration() + 36)];
  uint64_t v18 = *(void (**)(char *, uint64_t))(v14 + 8);
  swift_bridgeObjectRetain();
  v18(v16, v13);
  AccessibilityPickerStyle.Body.AccessibilityPickerButton.init<>(_:idiom:selection:)((uint64_t)&v26, &v23, v17, a5, a6, (uint64_t)v24);
  long long v26 = (ValueMetadata *)a5;
  uint64_t v27 = MEMORY[0x1E4F41708];
  uint64_t v28 = (_UNKNOWN **)a6;
  uint64_t v29 = MEMORY[0x1E4F41700];
  uint64_t v19 = type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityPickerButton();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v24);
  uint64_t v20 = *(uint64_t (**)(ValueMetadata **, uint64_t))(*(void *)(v19 - 8) + 8);
  v20((ValueMetadata **)v24, v19);
  static ViewBuilder.buildExpression<A>(_:)(&v26);
  return v20(&v26, v19);
}

uint64_t AccessibilityPickerStyle.Body.AccessibilityPickerButton.init<>(_:idiom:selection:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v34 = a3;
  uint64_t v30 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v14 = *(void *)(a4 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v16);
  uint64_t v31 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v29 - v18;
  outlined init with copy of Subview(a1, a6 + 16);
  *(_OWORD *)a6 = *a2;
  uint64_t v32 = a5;
  uint64_t v33 = a1;
  uint64_t v20 = *(void *)(a1 + 88);
  uint64_t v37 = v20;
  ContainerValues.tag<A>(for:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) == 1)
  {
    outlined destroy of Subview(v33);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v30);
    uint64_t v22 = 0;
    *(unsigned char *)(a6 + 112) = 1;
    *(unsigned char *)(a6 + 136) = 0;
    long long v23 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  else
  {
    long long v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v24(v19, v13, a4);
    uint64_t v37 = v34;
    type metadata accessor for Binding();
    type metadata accessor for Array();
    uint64_t v25 = v32;
    swift_getWitnessTable();
    static ToggleState.stateFor<A, B>(item:in:)();
    *(unsigned char *)(a6 + 112) = v36;
    uint64_t v37 = v20;
    char v35 = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    char v26 = v36;
    outlined destroy of Subview(v33);
    *(unsigned char *)(a6 + 136) = v26;
    uint64_t v27 = v31;
    v24(v31, v19, a4);
    unint64_t v28 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v22 = (void *)swift_allocObject();
    uint64_t v22[2] = a4;
    void v22[3] = v25;
    v22[4] = v34;
    uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v24)((char *)v22 + v28, v27, a4);
    long long v23 = partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityPickerButton.init<>(_:idiom:selection:);
  }
  *(void *)(a6 + 120) = v23;
  *(void *)(a6 + 128) = v22;
  return result;
}

uint64_t closure #2 in AccessibilityPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = &protocol witness table for AccessibilityPickerStyle;
  uint64_t v21 = a5;
  uint64_t v10 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v19 - v11;
  v19[0] = a1;
  v19[1] = a2;
  LODWORD(v20) = a3;
  type metadata accessor for AccessibilityPickerStyle.Body();
  AccessibilityPickerStyle.Body.base.getter((uint64_t)v12);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4, a5, v13, v14);
  uint64_t v15 = type metadata accessor for PickerStyleConfiguration();
  (*(void (**)(char *, uint64_t))(*(void *)(v15 - 8) + 8))(v12, v15);
  uint64_t v16 = type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t v17 = static ViewBuilder.buildExpression<A>(_:)(v16);
  return static ViewBuilder.buildExpression<A>(_:)(v17);
}

uint64_t closure #1 in AccessibilityPickerStyle.Body.AccessibilityPickerButton.init<>(_:idiom:selection:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Binding();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = swift_bridgeObjectRetain();
  if (MEMORY[0x18C115CB0](v7, v2))
  {
    for (uint64_t i = 0; ; ++i)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, a1+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * i, v2);
        uint64_t v10 = i + 1;
        if (__OFADD__(i, 1)) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v4 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v13 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 16))(v6, &v13, v2);
        swift_unknownObjectRelease();
        uint64_t v10 = i + 1;
        if (__OFADD__(i, 1))
        {
LABEL_10:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      specialized Binding.wrappedValue.setter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      if (v10 == MEMORY[0x18C115CB0](a1, v2)) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityPickerStyle.Body.AccessibilityPickerButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v4 = a1 - 8;
  uint64_t v57 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v52 = v5;
  uint64_t v55 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v47 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v50 = (uint64_t)&v47 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v51 = (uint64_t)&v47 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v56 = (char *)&v47 - v19;
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v20 - 8);
  uint64_t v59 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v53 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v54 = (char *)&v47 - v23;
  if (one-time initialization token for combine != -1) {
    swift_once();
  }
  *(void *)&long long v65 = static AccessibilityChildBehavior.combine;
  uint64_t v49 = *(void *)(a1 + 40);
  View._accessibilityElement(children:)((uint64_t *)&v65, v6, v49);
  uint64_t v24 = *(int *)(a1 + 56);
  uint64_t v25 = v2;
  if (*((unsigned char *)v2 + v24)) {
    char v26 = 2 * (*((unsigned char *)v2 + v24) != 1);
  }
  else {
    char v26 = 1;
  }
  LOBYTE(v67) = v26;
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  AccessibilityValueStorage.init<A>(_:description:)();
  long long v67 = *v2;
  char v27 = AnyInterfaceIdiom.accepts<A>(_:)();
  unint64_t v28 = lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40B98], (uint64_t)&v65, v27 & 1, v7, MEMORY[0x1E4F40B98], MEMORY[0x1E4F40B90], v28, (uint64_t)v13);
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_2((uint64_t)&v65, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  uint64_t v48 = v6;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v8 + 8);
  v29(v10, v7);
  *(void *)&long long v65 = 4 * (*((unsigned char *)v25 + v24) == 0);
  uint64_t v30 = v50;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v65, v7, v50);
  v29(v13, v7);
  long long v31 = *v25;
  uint64_t v47 = v25;
  long long v65 = v31;
  AnyInterfaceIdiom.accepts<A>(_:)();
  swift_bridgeObjectRetain();
  uint64_t v32 = v51;
  ModifiedContent<>.accessibilityAddTraits(_:)(v7, v51);
  swift_bridgeObjectRelease();
  v29((char *)v30, v7);
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v33 = v57;
  uint64_t v34 = v55;
  (*(void (**)(char *, _OWORD *, uint64_t))(v57 + 16))(v55, v25, a1);
  unint64_t v35 = (*(unsigned __int8 *)(v33 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  char v36 = (char *)swift_allocObject();
  uint64_t v37 = v48;
  *((void *)v36 + 2) = *(void *)(a1 + 16);
  *((void *)v36 + 3) = v37;
  uint64_t v38 = v49;
  *((void *)v36 + 4) = *(void *)(a1 + 32);
  *((void *)v36 + 5) = v38;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v36[v35], v34, a1);
  int v39 = v56;
  ModifiedContent<>.accessibilityAction(kind:_:)((uint64_t *)&v65, (uint64_t)partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityPickerButton.body.getter, (uint64_t)v36, v7);
  swift_release();
  outlined consume of AccessibilityActionKind.ActionKind(v65, *((uint64_t *)&v65 + 1), v66, *((unint64_t *)&v66 + 1));
  v29((char *)v32, v7);
  uint64_t v63 = v38;
  int v64 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  int v41 = v53;
  View._disabled(_:)();
  v29(v39, v7);
  unint64_t v42 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v61 = WitnessTable;
  unint64_t v62 = v42;
  uint64_t v43 = v59;
  swift_getWitnessTable();
  int v44 = v54;
  static ViewBuilder.buildExpression<A>(_:)(v41);
  int v45 = *(void (**)(char *, uint64_t))(v58 + 8);
  v45(v41, v43);
  static ViewBuilder.buildExpression<A>(_:)(v44);
  return ((uint64_t (*)(char *, uint64_t))v45)(v44, v43);
}

double protocol witness for static Rule.initialValue.getter in conformance AccessibilityPickerStyle.Body<A>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 73) = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(0, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v20[-v8];
  type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, MEMORY[0x1E4F40578]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = &v20[-v14];
  if (a1)
  {
    *uint64_t v9 = 256;
    uint64_t v16 = (void *)((char *)v9 + *(int *)(v7 + 36));
    void *v16 = a1;
    v16[1] = a2;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    outlined init with copy of Button<MenuStyleConfiguration.Label>((uint64_t)v9, (uint64_t)v15);
    type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of Button<MenuStyleConfiguration.Label>((uint64_t)v9);
  }
  else
  {
    type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
  }
  type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>();
  lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>();
  Group.init<A, B>(subviews:transform:)();
  outlined init with copy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v15, (uint64_t)v12);
  uint64_t v17 = MEMORY[0x1E4F414E8];
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_1((uint64_t)v21, (uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t)type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, MEMORY[0x1E4F414E8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>);
  outlined init with copy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v12, a3);
  type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)();
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_1((uint64_t)v20, a3 + *(int *)(v18 + 48), (uint64_t)&lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t)type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, v17, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>);
  outlined destroy of Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>((uint64_t)v21);
  outlined destroy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v15);
  outlined destroy of Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>((uint64_t)v20);
  return outlined destroy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>((uint64_t)v12);
}

uint64_t closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = SubviewsCollection.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    swift_getKeyPath();
    outlined init with copy of SubviewsCollection(a1, (uint64_t)&v10);
    uint64_t v5 = swift_allocObject();
    long long v6 = v11;
    *(_OWORD *)(v5 + 16) = v10;
    *(_OWORD *)(v5 + 32) = v6;
    *(_OWORD *)(v5 + 48) = v12;
    *(void *)(v5 + 64) = v13;
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(0, &lazy cache variable for type metadata for ModifiedContent<Subview, AccessibilityAttachmentModifier>, MEMORY[0x1E4F41708], (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    uint64_t result = ForEach.init(_:idGenerator:content:)();
    uint64_t v7 = v13;
    long long v8 = v11;
    long long v9 = v12;
    *(_OWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v8;
    *(_OWORD *)(a2 + 32) = v9;
    *(void *)(a2 + 48) = v7;
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = _VariadicView_Children.subscript.getter();
  uint64_t v5 = -v3;
  if (__OFSUB__(0, v3))
  {
    __break(1u);
  }
  else
  {
    BOOL v6 = __OFSUB__(v5, 1);
    uint64_t v7 = v5 - 1;
    if (!v6)
    {
      specialized View.accessibility<A>(_:_:isEnabled:)(COERCE__INT64((double)v7), 0, 1, a2);
      return outlined destroy of Subview((uint64_t)&v8);
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance AccessibilityMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>();
  MEMORY[0x1F4188790](v4 - 8);
  BOOL v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  *BOOL v6 = static Alignment.center.getter();
  v6[1] = v9;
  type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>();
  closure #1 in AccessibilityMenuStyle.makeBody(configuration:)(v7, v8, (uint64_t)v6 + *(int *)(v10 + 44));
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v11 = static AccessibilityChildBehavior.automatic;
  _s7SwiftUI20ScrollableCollection_pSgWOcTm_0((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
  *(void *)(a2 + *(int *)(v12 + 36)) = v11;
  swift_retain();
  return _s7SwiftUI20ScrollableCollection_pSgWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
}

uint64_t AccessibilityProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static VerticalAlignment.center.getter();
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  char v6 = *(unsigned char *)(a1 + *(int *)(result + 28));
  char v7 = *(unsigned char *)(a1 + *(int *)(result + 32));
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(unsigned char *)(a2 + 17) = v6;
  *(unsigned char *)(a2 + 18) = v7;
  return result;
}

void *closure #1 in AccessibilityDisclosureGroupStyle.makeBody(configuration:)@<X0>(BOOL *a1@<X8>)
{
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t result = MEMORY[0x18C113DA0](&v3);
  *a1 = (v3 & 1) == 0;
  return result;
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance AccessibilityDisclosureGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static HorizontalAlignment.center.getter();
  closure #1 in AccessibilityDisclosureGroupStyle.makeBody(configuration:)(&v6);
  BOOL v3 = v6;
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  uint64_t v4 = static AccessibilityChildBehavior.contain;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 17) = v3;
  *(void *)(a1 + 24) = v4;

  return swift_retain();
}

void closure #1 in AccessibilityLabelStyle.makeBody(configuration:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  BOOL v3 = *(void **)(a1 + 8);
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(unsigned char *)(a1 + 16) == 1) {
      outlined consume of AccessibilityAttachment.Tree(*(void *)a1, v3, 1);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 2;
  }
  else
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    Dictionary.init(minimumCapacity:)();
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = specialized AccessibilityProperties.subscript.getter(v4);
    swift_bridgeObjectRelease();
    specialized AccessibilityProperties.subscript.setter(v5);
    static AccessibilityAttachment.properties(_:)();
    outlined consume of AccessibilityAttachment.Tree(v2, v3, 0);
    swift_bridgeObjectRelease();
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = 0;
  }
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance AccessibilityLabelStyle@<X0>(void (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2 = static Alignment.center.getter();
  uint64_t v4 = v3;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v6;
  *(void *)(result + 24) = v7;
  *a1 = closure #1 in AccessibilityLabelStyle.makeBody(configuration:);
  a1[1] = 0;
  a1[2] = (void (*)(uint64_t))v2;
  a1[3] = v4;
  a1[4] = (void (*)(uint64_t))result;
  a1[5] = 0;
  return result;
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in AccessibilityDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in AccessibilityButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static AccessibilityListStyle._makeView<A>(value:inputs:)()
{
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t static AccessibilityListStyle._makeViewList<A>(value:inputs:)()
{
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

uint64_t AccessibilityListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t AccessibilityListStyle.Body.value.getter@<X0>(int a1@<W0>, ValueMetadata *a2@<X1>, _UNKNOWN **a3@<X2>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v23 = &type metadata for AccessibilityListStyle;
  uint64_t v24 = (uint64_t)a2;
  uint64_t v25 = &protocol witness table for AccessibilityListStyle;
  uint64_t v26 = (uint64_t)a3;
  uint64_t v12 = type metadata accessor for _ListValue();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v21 - v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = a2;
  uint64_t v24 = v7;
  uint64_t v25 = a3;
  uint64_t v26 = WitnessTable;
  uint64_t v16 = type metadata accessor for AccessibilityListStyle.Body.AccessibilityList();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v21 - v17;
  AccessibilityListStyle.Body.base.getter((uint64_t)v14);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v19(v11, v14, v8);
  v19(v18, v11, v8);
  v21[4] = a2;
  _OWORD v21[5] = a3;
  int v22 = a1;
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t closure #1 in AccessibilityListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = &type metadata for AccessibilityListStyle;
  v8[1] = a2;
  _OWORD v8[2] = &protocol witness table for AccessibilityListStyle;
  void v8[3] = a3;
  uint64_t v3 = type metadata accessor for _ListValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  AccessibilityListStyle.Body.base.getter((uint64_t)v8 - v5);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t AccessibilityListStyle.Body.AccessibilityList.body(children:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v23 = a3;
  uint64_t v4 = a2[3];
  type metadata accessor for Binding();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  v24[0] = a2[2];
  v24[1] = v4;
  void v24[2] = v8;
  v24[3] = v9;
  uint64_t v10 = type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v19 - v15;
  outlined init with copy of _VariadicView_Children(v21, (uint64_t)v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v22, v20);
  AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.init(children:selection:)((uint64_t)v24, (uint64_t)v7, (uint64_t)v13);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v10);
}

uint64_t AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.init(children:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a3 + 48) = *(void *)(a1 + 48);
  uint64_t v5 = a3
     + *(int *)(type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody() + 52);
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a2, v6);
}

uint64_t AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter()
{
  static HorizontalAlignment.center.getter();
  uint64_t v0 = MEMORY[0x1E4FBB550];
  type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  uint64_t v2 = v1;
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
  *(void *)&long long v24 = v2;
  *((void *)&v24 + 1) = v0;
  uint64_t v25 = type metadata accessor for ModifiedContent();
  *(void *)&long long v26 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  *((void *)&v26 + 1) = MEMORY[0x1E4FBB560];
  type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  _OWORD v15[2] = MEMORY[0x1E4F40A18];
  uint64_t v15[3] = WitnessTable;
  v15[1] = swift_getWitnessTable();
  swift_getWitnessTable();
  VStack.init(alignment:spacing:content:)();
  long long v7 = v24;
  char v8 = v25;
  long long v9 = v26;
  uint64_t v10 = v27;
  uint64_t v11 = v28;
  uint64_t v12 = v29;
  long long v13 = v30;
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  v15[0] = static AccessibilityChildBehavior.contain;
  uint64_t v4 = type metadata accessor for VStack();
  uint64_t v5 = swift_getWitnessTable();
  View.accessibilityElement(children:)(v15, v4, v5);
  swift_release();
  swift_release();
  swift_release();
  long long v7 = v16;
  char v8 = v17;
  long long v9 = v18;
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  uint64_t v12 = v21;
  long long v13 = v22;
  uint64_t v14 = v23;
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v16 = v24;
  char v17 = v25;
  long long v18 = v26;
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  long long v22 = v30;
  uint64_t v23 = v31;
  static ViewBuilder.buildExpression<A>(_:)(&v16);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v27 = a6;
  *(void *)&long long v41 = a2;
  *((void *)&v41 + 1) = a3;
  uint64_t v42 = a4;
  unint64_t v43 = a5;
  uint64_t v11 = type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v26 - v13;
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *(void *)&long long v29 = 0;
    *((void *)&v29 + 1) = result;
    *(void *)&long long v26 = swift_getKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
    unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    char v17 = (char *)swift_allocObject();
    *((void *)v17 + 2) = a2;
    *((void *)v17 + 3) = a3;
    *((void *)v17 + 4) = a4;
    *((void *)v17 + 5) = a5;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v17[v16], v14, v11);
    uint64_t v18 = MEMORY[0x1E4FBB550];
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    uint64_t v20 = v19;
    *(void *)&long long v41 = a2;
    *((void *)&v41 + 1) = a3;
    uint64_t v42 = a4;
    unint64_t v43 = a5;
    type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
    uint64_t v21 = type metadata accessor for ModifiedContent();
    unint64_t v22 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v34 = MEMORY[0x1E4F40A18];
    uint64_t v35 = WitnessTable;
    uint64_t v24 = swift_getWitnessTable();
    uint64_t v25 = MEMORY[0x1E4FBB560];
    ForEach<>.init(_:id:content:)();
    long long v29 = v36;
    uint64_t v30 = v37;
    unint64_t v31 = v38;
    uint64_t v32 = v39;
    long long v26 = v40;
    long long v33 = v40;
    *(void *)&long long v41 = v20;
    *((void *)&v41 + 1) = v18;
    uint64_t v42 = v21;
    unint64_t v43 = v22;
    uint64_t v44 = v25;
    type metadata accessor for ForEach();
    uint64_t v28 = v24;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(&v29);
    swift_release();
    swift_release();
    swift_release();
    long long v36 = v41;
    uint64_t v37 = v42;
    unint64_t v38 = v43;
    uint64_t v39 = v44;
    long long v26 = v45;
    long long v40 = v45;
    static ViewBuilder.buildExpression<A>(_:)(&v36);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a1;
  _VariadicView_Children.subscript.getter();
  uint64_t v11 = (void *)type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
  v18[0] = AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(v10, v11);
  v18[1] = v12;
  char v19 = v13 & 1;
  v20[0] = a3;
  v20[1] = a4;
  v20[2] = a5;
  void v20[3] = a6;
  uint64_t v14 = type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
  MEMORY[0x18C113660](v20, v18, MEMORY[0x1E4F40A20], v14, MEMORY[0x1E4F40A18]);
  swift_release();
  swift_release();
  outlined destroy of _VariadicView_Children.Element((uint64_t)v21);
  uint64_t v15 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  unint64_t v16 = *(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v15 - 8) + 8);
  v16(v20, v15);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return v16(v21, v15);
}

uint64_t AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *(a2 - 1);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void (**)(char *, uint64_t, void *, double))(v5 + 16);
  v30(v8, v2, a2, v7);
  type metadata accessor for MainActor();
  uint64_t v9 = static MainActor.shared.getter();
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = (v10 + 64) & ~v10;
  unint64_t v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v12 + 8;
  uint64_t v29 = v10 | 7;
  unint64_t v23 = v12;
  uint64_t v24 = v11;
  char v13 = (char *)swift_allocObject();
  uint64_t v14 = MEMORY[0x1E4FBCFD8];
  *((void *)v13 + 2) = v9;
  *((void *)v13 + 3) = v14;
  uint64_t v15 = a2[3];
  uint64_t v25 = a2[2];
  uint64_t v26 = v15;
  *((void *)v13 + 4) = v25;
  *((void *)v13 + 5) = v15;
  uint64_t v16 = a2[5];
  uint64_t v27 = a2[4];
  *((void *)v13 + 6) = v27;
  *((void *)v13 + 7) = v16;
  char v17 = *(void (**)(char *, char *, void *))(v5 + 32);
  v17(&v13[v11], v8, a2);
  *(void *)&v13[v12] = a1;
  ((void (*)(char *, uint64_t, void *))v30)(v8, v31, a2);
  uint64_t v18 = static MainActor.shared.getter();
  char v19 = (void *)swift_allocObject();
  void v19[2] = v18;
  uint64_t v20 = v25;
  v19[3] = MEMORY[0x1E4FBCFD8];
  void v19[4] = v20;
  _OWORD v19[5] = v26;
  uint64_t v21 = (char *)v19 + v24;
  v19[6] = v27;
  v19[7] = v16;
  v17(v21, v8, a2);
  *(void *)((char *)v19 + v23) = a1;
  Binding.init(get:set:)();
  return v32;
}

uint64_t closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, unsigned char *a7@<X8>)
{
  uint64_t v35 = a3;
  uint64_t v36 = a5;
  unint64_t v43 = a7;
  uint64_t v34 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  long long v33 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Binding();
  uint64_t v40 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (char *)&v33 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v42 = (char *)&v33 - v19;
  uint64_t v37 = a2;
  _VariadicView_Children.subscript.getter();
  uint64_t v20 = v44[11];
  swift_bridgeObjectRetain();
  outlined destroy of _VariadicView_Children.Element((uint64_t)v44);
  v44[0] = v20;
  swift_getAssociatedConformanceWitness();
  ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, AssociatedTypeWitness, (uint64_t)v16);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v42, v16, AssociatedTypeWitness);
    v44[0] = v35;
    v44[1] = a4;
    v44[2] = v36;
    v44[3] = a6;
    uint64_t v22 = a6;
    uint64_t v23 = type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
    uint64_t v24 = v38;
    uint64_t v26 = v39;
    uint64_t v25 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v39, v37 + *(int *)(v23 + 52), v40);
    uint64_t v27 = v41;
    uint64_t v28 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v41) != 1)
    {
      uint64_t v30 = v33;
      MEMORY[0x18C113DA0](v27);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v26, v27);
      uint64_t v31 = v42;
      char v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 56))(v42, a4, v22);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v30, a4);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v31, AssociatedTypeWitness);
      char v29 = v32 & 1;
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v42, AssociatedTypeWitness);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v25);
  }
  char v29 = 0;
LABEL_7:
  *unint64_t v43 = v29;
  return result;
}

uint64_t closure #2 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v47 = a6;
  uint64_t v48 = a8;
  uint64_t v52 = a5;
  uint64_t v44 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v43 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for Binding();
  uint64_t v50 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v42 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v41 = (char *)&v40 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v40 - v23;
  int v45 = *a1;
  uint64_t v49 = a4;
  _VariadicView_Children.subscript.getter();
  uint64_t v25 = v57;
  swift_bridgeObjectRetain();
  outlined destroy of _VariadicView_Children.Element((uint64_t)&v53);
  uint64_t v53 = v25;
  uint64_t v52 = a9;
  swift_getAssociatedConformanceWitness();
  ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, AssociatedTypeWitness, (uint64_t)v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v40 = v24;
  v27(v24, v20, AssociatedTypeWitness);
  uint64_t v28 = v46;
  char v29 = (void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v30 = v51;
  if (!v45)
  {
    uint64_t v53 = v47;
    uint64_t v54 = a7;
    uint64_t v38 = v52;
    uint64_t v55 = v48;
    uint64_t v56 = v52;
    uint64_t v39 = type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
    uint64_t v33 = v50;
    uint64_t v34 = v42;
    (*v29)(v42, v49 + *(int *)(v39 + 52), v50);
    uint64_t v35 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, v30) != 1)
    {
      uint64_t v36 = v43;
      MEMORY[0x18C113DA0](v30);
      uint64_t v37 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 40))(v40, a7, v38);
      goto LABEL_9;
    }
LABEL_7:
    (*(void (**)(char *, uint64_t))(v21 + 8))(v40, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v34, v33);
  }
  uint64_t v53 = v47;
  uint64_t v54 = a7;
  uint64_t v31 = v52;
  uint64_t v55 = v48;
  uint64_t v56 = v52;
  uint64_t v32 = type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody();
  uint64_t v33 = v50;
  uint64_t v34 = v41;
  (*v29)(v41, v49 + *(int *)(v32 + 52), v50);
  uint64_t v35 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, v30) == 1) {
    goto LABEL_7;
  }
  uint64_t v36 = v43;
  MEMORY[0x18C113DA0](v30);
  uint64_t v37 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v40, a7, v31);
LABEL_9:
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v36, a7);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v37, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v34, v30);
}

uint64_t AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  LOBYTE(v38) = a4;
  char v23 = a4 & 1;
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v14 = v13;
  MEMORY[0x18C113DA0](&v32);
  uint64_t v15 = 4;
  if (!(_BYTE)v32) {
    uint64_t v15 = 0;
  }
  uint64_t v25 = v15;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier();
  swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.accessibilityAddTraits(_:)(&v25, v16, WitnessTable);
  uint64_t v25 = v32;
  uint64_t v26 = v33;
  if (one-time initialization token for automatic != -1) {
    swift_once();
  }
  uint64_t v31 = static AccessibilityChildBehavior.automatic;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v29 = WitnessTable;
  uint64_t v30 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v19 = swift_getWitnessTable();
  View._accessibilityElement(children:)(&v31, v18, v19);
  swift_release();
  swift_release();
  uint64_t v25 = v36;
  uint64_t v26 = v37;
  uint64_t v27 = v38;
  uint64_t v28 = v39;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  LOBYTE(v34) = v23;
  MEMORY[0x18C113DA0](&v31, v14);
  uint64_t v20 = 4;
  if (!(_BYTE)v31) {
    uint64_t v20 = 0;
  }
  uint64_t v31 = v20;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  ModifiedContent<>.accessibilityAddTraits(_:)(&v31, v21, (uint64_t)&v32);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v25 = v32;
  uint64_t v26 = v33;
  uint64_t v27 = v34;
  uint64_t v28 = v35;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v25);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v32 = v36;
  uint64_t v33 = v37;
  uint64_t v34 = v38;
  uint64_t v35 = v39;
  static ViewBuilder.buildExpression<A>(_:)(&v32);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier(uint64_t a1, uint64_t *a2)
{
  return AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier.body(content:)(a1, *(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16), a2[2], a2[3], a2[4], a2[5]);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance AccessibilityListStyle.Body<A>.AccessibilityList<A1>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AccessibilityListStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  type metadata accessor for AccessibilityListStyle.Body.AccessibilityList();
  uint64_t v2 = type metadata accessor for _VariadicView.Tree();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityListStyle.Body.value.getter(*v2, *(ValueMetadata **)(a1 + 16), *(_UNKNOWN ***)(a1 + 24), a2);
}

uint64_t sub_1880939E8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 9) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *(void *)a2;
    char v12 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v12);
    *(void *)a1 = v11;
    *(unsigned char *)(a1 + 8) = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 9) & ~v7, (a2 + v7 + 9) & ~v7, v5);
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityProxyModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v10 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityProxyModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 9) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 9) & ~v6);
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + 8);
      if (v15 > 1) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for AccessibilityProxyModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 9) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x188093FE0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 9] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0xFE)
        {
          a1[8] = 0;
          *(void *)a1 = a2 - 255;
        }
        else
        {
          a1[8] = -(char)a2;
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for AccessibilityChildrenModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AccessibilityChildrenModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18809437CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AccessibilityControlStyle()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<ButtonStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

uint64_t sub_188094444()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>>, MenuStyleModifier<AccessibilityMenuStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityRepresentableStyleModifier>, StyleContextWriter<AccessibilityRepresentableStyleContext>>, ProgressViewStyleModifier<AccessibilityProgressViewStyle>>, PickerStyleWriter<AccessibilityPickerStyle>>, ListStyleWriter<AccessibilityListStyle>>, SliderStyleModifier<AccessibilitySliderStyle>>, StepperStyleModifier<AccessibilityStepperStyle>>, GroupBoxStyleModifier<AccessibilityGroupBoxStyle>>, ControlGroupStyleModifier<AccessibilityControlGroupStyle>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>);
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>)
  {
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(255, &lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>, (uint64_t (*)(uint64_t))type metadata accessor for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>, (uint64_t (*)(uint64_t))type metadata accessor for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?));
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>>);
    }
  }
}

void type metadata accessor for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)()
{
  if (!lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?))
  {
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(255, &lazy cache variable for type metadata for DisclosureGroupStyleConfiguration.Content?, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?));
    }
  }
}

uint64_t sub_1880946A8()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>);
}

void type metadata accessor for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>, &lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content));
    lazy protocol witness table accessor for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)>, &lazy cache variable for type metadata for (LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(LabeledContentStyleConfiguration.Label, LabeledContentStyleConfiguration.Content)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<ToggleStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityControlStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ProgressViewStyle.Body : View in AccessibilityProgressViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in AccessibilitySliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for StepperStyle.Body : View in AccessibilityStepperStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GroupBoxStyle.Body : View in AccessibilityGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in AccessibilityControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in AccessibilityMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in closure #2 in AccessibilityProxyModifier.body(content:)()
{
  return closure #1 in closure #2 in AccessibilityProxyModifier.body(content:)(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

void type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>)
  {
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(255, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>));
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)()
{
  if (!lazy cache variable for type metadata for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>))
  {
    type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, MEMORY[0x1E4F40578]);
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(255, &lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, MEMORY[0x1E4F414E8]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>));
    }
  }
}

void type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, ValueMetadata *))
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    unint64_t v7 = a3(a1, v6, &type metadata for MenuStyleConfiguration.Label);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>()
{
  if (!lazy cache variable for type metadata for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>();
    unint64_t v0 = type metadata accessor for GroupElementsOfContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>);
    }
  }
}

void type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>()
{
  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<Subview, AccessibilityAttachmentModifier>, MEMORY[0x1E4F41708], (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<Subview, AccessibilityAttachmentModifier>, MEMORY[0x1E4F41708], (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Subview, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(255, a2, a3, MEMORY[0x1E4F41850]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>)
  {
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(255, &lazy cache variable for type metadata for TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>), MEMORY[0x1E4F41850]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_ZStackLayout, TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
    }
  }
}

uint64_t outlined init with copy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>(uint64_t a1)
{
  type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(0, &lazy cache variable for type metadata for Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>, (uint64_t (*)(uint64_t))type metadata accessor for GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>, MEMORY[0x1E4F414E8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>(uint64_t a1)
{
  type metadata accessor for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Button<MenuStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(0, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Button<MenuStyleConfiguration.Label>(uint64_t a1)
{
  type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(0, &lazy cache variable for type metadata for Button<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1880951EC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #2 in closure #1 in AccessibilityMenuStyle.makeBody(configuration:)(a1, a2);
}

uint64_t type metadata accessor for AccessibilityListStyle.Body.AccessibilityList()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityPickerButton()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityPickerStyle.Body.AccessibilityPickerButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityPickerStyle.Body.AccessibilityPickerButton(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 7
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0
    && ((((v5 + 16) & ~v5) + v6) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    *a1 = *a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 16) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 16) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    *(unsigned char *)(v10 + v6) = *(unsigned char *)(v11 + v6);
    unint64_t v12 = (v10 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (v11 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void *)(v13 + 16);
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    *(void *)(v12 + 16) = v14;
    *(unsigned char *)(v12 + 24) = *(unsigned char *)(v13 + 24);
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  swift_retain();
  return v3;
}

uint64_t destroy for AccessibilityPickerStyle.Body.AccessibilityPickerButton(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));

  return swift_release();
}

_OWORD *initializeWithCopy for AccessibilityPickerStyle.Body.AccessibilityPickerButton(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(v11 + 16);
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(void *)(v10 + 16) = v12;
  *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
  swift_retain();
  return a1;
}

_OWORD *assignWithCopy for AccessibilityPickerStyle.Body.AccessibilityPickerButton(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40);
  unint64_t v10 = v9 + v7;
  unint64_t v11 = v9 + v8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v12 + 8) = *(void *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v12 + 16) = v14;
  swift_retain();
  swift_release();
  *(unsigned char *)(v12 + 24) = *(unsigned char *)(v13 + 24);
  return a1;
}

_OWORD *initializeWithTake for AccessibilityPickerStyle.Body.AccessibilityPickerButton(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v11 + 8);
  *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
  return a1;
}

_OWORD *assignWithTake for AccessibilityPickerStyle.Body.AccessibilityPickerButton(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24);
  unint64_t v10 = v9 + v7;
  unint64_t v11 = v9 + v8;
  *(unsigned char *)unint64_t v10 = *(unsigned char *)v11;
  unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(unsigned char *)(v12 + 24) = *(unsigned char *)(v13 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityPickerStyle.Body.AccessibilityPickerButton(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 25;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188095934);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 16) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)) & 0xFFFFFFF8) == 0xFFFFFFE8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 16] & ~v6);
  }
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for AccessibilityPickerStyle.Body.AccessibilityPickerButton(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 25;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v20 = (unint64_t)&a1[v9 + 16] & ~v9;
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
            else
            {
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v19 = a2 ^ 0x80000000;
                *((void *)a1 + 1) = 0;
              }
              else
              {
                uint64_t v19 = a2 - 1;
              }
              *(void *)a1 = v19;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x188095B60);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for AccessibilityListStyle.Body.AccessibilityList()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityListStyle.Body.AccessibilityList(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  if (v8 <= 7 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0 && v9 <= 0x18)
  {
    uint64_t v13 = ~v8;
    int v14 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v14 + v8 + 8) & v13))
      {
LABEL_14:
        memcpy(__dst, __src, v9);
        return __dst;
      }
    }
    else
    {
      uint64_t v15 = *v14;
      if ((unint64_t)*v14 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      if (v15 != -1) {
        goto LABEL_14;
      }
    }
    void *__dst = *__src;
    unsigned int v16 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v16 = *v14;
    uint64_t v17 = ((unint64_t)v16 + v8 + 8) & v13;
    unsigned int v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v18(v17, ((unint64_t)v14 + v8 + 8) & v13, v5);
    return __dst;
  }
  uint64_t v12 = *__src;
  void *__dst = *__src;
  __dst = (void *)(v12 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for AccessibilityListStyle.Body.AccessibilityList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = ~v4;
  uint64_t v6 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v3;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v4 + 8) & v5);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  uint64_t result = (v7 + 1);
  if (v7 == -1)
  {
LABEL_7:
    swift_release();
    swift_release();
    size_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(((unint64_t)v6 + v4 + 8) & v5, v2);
  }
  return result;
}

void *initializeWithCopy for AccessibilityListStyle.Body.AccessibilityList(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    if (v11 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *__dst = *__src;
    uint64_t v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    uint64_t v13 = ((unint64_t)v12 + v7 + 8) & v8;
    int v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v14(v13, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

void *assignWithCopy for AccessibilityListStyle.Body.AccessibilityList(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = ((v8 + 16) & ~v8) + v10;
  uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v16 = ((unint64_t)v12 + v8 + 8) & v9;
    size_t v21 = ((v8 + 16) & ~v8) + v10;
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    int v20 = v17(v16, v7, v5);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v3 = a2;
    int v15 = v17(((unint64_t)v13 + v8 + 8) & ~v8, v7, v5);
    uint64_t v9 = ~v8;
    size_t v11 = v21;
    uint64_t v4 = a1;
    if (!v20)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v4 = *v3;
        swift_retain();
        swift_release();
        *uint64_t v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v12 + v8 + 8) & v9, ((unint64_t)v13 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v12 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v4 = *v3;
    *uint64_t v12 = *v13;
    unsigned int v18 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v18(((unint64_t)v12 + v8 + 8) & v9, ((unint64_t)v13 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v11);
  return v4;
}

void *initializeWithTake for AccessibilityListStyle.Body.AccessibilityList(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    if (v11 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *__dst = *__src;
    uint64_t v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v12 + v7 + 8) & v8, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

void *assignWithTake for AccessibilityListStyle.Body.AccessibilityList(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ~v8;
  size_t v10 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  uint64_t v11 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    int v18 = v16(((unint64_t)v11 + v8 + 8) & ~v8, v7, v5);
    uint64_t v12 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v9 = ~v8;
    int v14 = v16(((unint64_t)v12 + v8 + 8) & ~v8, v7, v5);
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    if (!v18)
    {
LABEL_5:
      if (!v14)
      {
        *uint64_t v4 = *v3;
        swift_release();
        *uint64_t v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
        return v4;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v8 + 8) & v9, v5);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v13) = -1;
    }
    int v14 = v13 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v14)
  {
    *uint64_t v4 = *v3;
    *uint64_t v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v11 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v5);
    return v4;
  }
LABEL_9:
  memcpy(v4, v3, v10);
  return v4;
}

uint64_t getEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = (((1 << v9) + a2 - v7) >> v9) + 1;
  if (HIWORD(v12))
  {
    int v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      unsigned int v18 = v17 + 1;
    }
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
  if (v12 > 0xFF)
  {
    int v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v12 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = ((v6 + 16) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + v7;
}

void storeEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (v8 - 1 >= a3)
  {
    int v12 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v12 = 1;
  if (v11 > 3) {
    goto LABEL_13;
  }
  unsigned int v13 = (((1 << (8 * v11)) + a3 - v8) >> (8 * v11)) + 1;
  if (HIWORD(v13))
  {
    int v12 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 >= 0x100) {
      int v12 = 2;
    }
    else {
      int v12 = v13 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v12)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v23 = a2 + 1;
                  v22(((unint64_t)v20 + v10 + 8) & ~v10, v23);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v21 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v21 = a2;
                  }
                  *int v20 = v21;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v17 = ~(-1 << (8 * v11));
              }
              else {
                int v17 = -1;
              }
              if (v11)
              {
                int v18 = v17 & (a2 - v8);
                if (v11 <= 3) {
                  int v19 = v11;
                }
                else {
                  int v19 = 4;
                }
                bzero(a1, v11);
                switch(v19)
                {
                  case 2:
                    *(_WORD *)a1 = v18;
                    break;
                  case 3:
                    *(_WORD *)a1 = v18;
                    a1[2] = BYTE2(v18);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v18;
                    break;
                  default:
                    *a1 = v18;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v14 = a2 - v8;
  if (v11 < 4)
  {
    int v15 = (v14 >> (8 * v11)) + 1;
    if (v11)
    {
      int v16 = v14 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v12)
  {
    case 1:
      a1[v11] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v15;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x188096AD4);
    case 4:
      *(_DWORD *)&a1[v11] = v15;
      break;
    default:
      return;
  }
}

uint64_t sub_188096B0C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DisableDeferredAccessibilityAttachmentModifier>, _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>>, AccessibilityAttachmentModifier>, DetachDeferredAccessibilityAttachmentModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ConditionalContent<Button<MenuStyleConfiguration.Label>, MenuStyleConfiguration.Label>, Group<GroupElementsOfContent<MenuStyleConfiguration.Content, ForEach<Range<Int>, Int, ModifiedContent<Subview, AccessibilityAttachmentModifier>>>>)>>, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Content, (uint64_t)&type metadata for AccessibilityContainerModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ControlGroupStyleConfiguration.Content, AccessibilityContainerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_188096EFC()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>);
}

void type metadata accessor for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>, &lazy cache variable for type metadata for (GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content));
    lazy protocol witness table accessor for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(Badge, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)>, &lazy cache variable for type metadata for (GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<StepperStyleConfiguration.Label>, (uint64_t)&type metadata for StepperStyleConfiguration.Label, (uint64_t)&protocol witness table for StepperStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<StepperStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>)
  {
    type metadata accessor for AccessibilityControlStyle<ButtonStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityControlStyle<SliderStyleConfiguration.Label>, (uint64_t)&type metadata for SliderStyleConfiguration.Label, (uint64_t)&protocol witness table for SliderStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityControlStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityControlStyle<SliderStyleConfiguration.Label> and conformance AccessibilityControlStyle<A>);
  }
  return result;
}

uint64_t sub_188097150()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>);
}

void type metadata accessor for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>)
  {
    type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, DisclosureGroupStyleConfiguration.Content?)>(255, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?));
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)>>);
    }
  }
}

void type metadata accessor for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?)()
{
  if (!lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?))
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, MEMORY[0x1E4FBB718]);
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, v0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ProgressViewStyleConfiguration.Label?, ProgressViewStyleConfiguration.CurrentValueLabel?));
    }
  }
}

uint64_t sub_188097300()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityProxyModifier<A>.GeometryTransformModifier()
{
  return &protocol witness table for AccessibilityProxyModifier<A>.GeometryTransformModifier;
}

uint64_t instantiation function for generic protocol witness table for AccessibilityListStyle.Body<A>.AccessibilityList<A1>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityPickerStyle.Body<A>.AccessibilityPickerButton<A1>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in AccessibilityListStyle.Body<A>.AccessibilityList<A1>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in AccessibilityListStyle.Body.value.getter()
{
  return closure #1 in AccessibilityListStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody()
{
  return swift_getGenericMetadata();
}

uint64_t sub_188097510()
{
  long long v3 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityPickerButton();
  (*(void (**)(unint64_t))(*(void *)(v3 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))+ *(int *)(v1 + 52));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityPickerButton.body.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityPickerButton() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = type metadata accessor for AccessibilityPickerStyle.Body.AccessibilityPickerButton();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + *(int *)(v5 + 60) + v4))(v5, v6, v7, v8);
  *a1 = 3;
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  return closure #1 in AccessibilityPickerStyle.Body.value.getter();
}

uint64_t partial apply for closure #2 in AccessibilityPickerStyle.Body.value.getter()
{
  return closure #2 in AccessibilityPickerStyle.Body.value.getter(*(void *)(v0 + 32), *(void *)(v0 + 40), *(_DWORD *)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter()
{
  return closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter(*(void *)(v0 + 32), *(void *)(v0 + 40), *(_DWORD *)(v0 + 48), *(void *)(v0 + 16), *(_UNKNOWN ***)(v0 + 24));
}

uint64_t sub_188097710()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in AccessibilityPickerStyle.Body.value.getter(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_188097730()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityPickerStyle.Body.AccessibilityPickerButton.init<>(_:idiom:selection:)()
{
  return closure #1 in AccessibilityPickerStyle.Body.AccessibilityPickerButton.init<>(_:idiom:selection:)(*(void *)(v0 + 32));
}

uint64_t type metadata completion function for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(unsigned int *)(v6 + 84);
  uint64_t v9 = v7;
  unint64_t v10 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  size_t v11 = ((v9 + 16) & ~v9) + *(void *)(v6 + 64);
  int v12 = v7 & 0x100000;
  if (v9 <= 7 && v12 == 0 && (v10 & (v9 + 56)) + v11 <= 0x18)
  {
    long long v16 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v16;
    (**(void (***)(uint64_t, uint64_t *))(v16 - 8))(a1, a2);
    int v17 = (void *)a2[5];
    uint64_t v18 = a2[6];
    v4[5] = v17;
    v4[6] = v18;
    int v19 = (void *)(v10 & ((unint64_t)v4 + 63));
    int v20 = (void *)(v10 & ((unint64_t)a2 + 63));
    uint64_t v21 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    id v22 = v17;
    swift_bridgeObjectRetain();
    if ((v8 & 0x80000000) != 0)
    {
      int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)v21 + v9 + 8) & ~v9, v8, v5);
      uint64_t v24 = ~v9;
      if (v25)
      {
LABEL_14:
        memcpy(v19, v20, v11);
        return v4;
      }
    }
    else
    {
      uint64_t v23 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF) {
        LODWORD(v23) = -1;
      }
      uint64_t v24 = ~v9;
      if (v23 != -1) {
        goto LABEL_14;
      }
    }
    *int v19 = *v20;
    uint64_t v26 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v26 = *v21;
    uint64_t v27 = ((unint64_t)v26 + v9 + 8) & v24;
    uint64_t v28 = ((unint64_t)v21 + v9 + 8) & v24;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v29(v27, v28, v5);
    return v4;
  }
  uint64_t v15 = *a2;
  *unint64_t v4 = *a2;
  unint64_t v4 = (void *)(v15 + (v10 & (v9 + 16)));
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (a1 + (v7 | 7) + 56) & ~(v7 | 7);
  uint64_t v9 = ~v7;
  unint64_t v10 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    uint64_t v14 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v10 + v7 + 8) & v9);
    uint64_t v6 = v14;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v11 = *v10;
  if ((unint64_t)*v10 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  uint64_t result = (v11 + 1);
  if (v11 == -1)
  {
LABEL_7:
    uint64_t v15 = v6;
    swift_release();
    swift_release();
    unsigned int v13 = *(uint64_t (**)(unint64_t, uint64_t))(v15 + 8);
    return v13(((unint64_t)v10 + v7 + 8) & v9, v4);
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(void **)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 56;
  unsigned int v13 = (void *)((v12 + a1) & ~(v11 | 7));
  uint64_t v14 = (void *)((v12 + a2) & ~(v11 | 7));
  uint64_t v15 = *(unsigned int *)(v10 + 84);
  uint64_t v16 = ~v11;
  uint64_t v24 = *(void *)(v10 + 64);
  int v17 = (uint64_t *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v18 = v7;
  swift_bridgeObjectRetain();
  if ((v15 & 0x80000000) == 0)
  {
    uint64_t v19 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    if (v19 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unsigned int v13 = *v14;
    int v20 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v20 = *v17;
    uint64_t v21 = ((unint64_t)v20 + v11 + 8) & v16;
    id v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
    swift_retain();
    swift_retain();
    v22(v21, ((unint64_t)v17 + v11 + 8) & v16, v9);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(((unint64_t)v17 + v11 + 8) & v16, v15, v9))goto LABEL_7; {
LABEL_5:
  }
  memcpy(v13, v14, ((v11 + 16) & ~v11) + v24);
  return a1;
}

uint64_t *assignWithCopy for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  long long v6 = (void *)a2[5];
  uint64_t v7 = (void *)a1[5];
  a1[5] = (uint64_t)v6;
  id v8 = v6;

  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 56;
  unsigned int v13 = (void *)(((unint64_t)a1 + v12) & ~(v11 | 7));
  unint64_t v14 = (unint64_t)a2 + v12;
  uint64_t v15 = (void *)(v14 & ~(v11 | 7));
  uint64_t v16 = *(unsigned int *)(v10 + 84);
  uint64_t v17 = ~v11;
  size_t v18 = ((v11 + 16) & ~v11) + *(void *)(v10 + 64);
  uint64_t v19 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 0x80000000) != 0)
  {
    uint64_t v36 = v14 & ~(v11 | 7);
    uint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v35 = ((v11 + 16) & ~v11) + *(void *)(v10 + 64);
    int v27 = v26(((unint64_t)v19 + v11 + 8) & ~v11, v16, v9);
    uint64_t v28 = v26;
    int v34 = v27;
    int v20 = (void *)((v36 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = ~v11;
    int v22 = v28(((unint64_t)v20 + v11 + 8) & ~v11, v16, v9);
    size_t v18 = v35;
    uint64_t v15 = (void *)v36;
    if (!v34)
    {
LABEL_5:
      if (!v22)
      {
        *unsigned int v13 = *v15;
        swift_retain();
        swift_release();
        *uint64_t v19 = *v20;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))(((unint64_t)v19 + v11 + 8) & v17, ((unint64_t)v20 + v11 + 8) & v17, v9);
        return a1;
      }
      size_t v23 = v18;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v19 + v11 + 8) & v17, v9);
      uint64_t v24 = v13;
      int v25 = v15;
      size_t v18 = v23;
      goto LABEL_10;
    }
  }
  else
  {
    int v20 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = *v20;
    if (*v20 >= 0xFFFFFFFFuLL) {
      LODWORD(v21) = -1;
    }
    int v22 = v21 + 1;
    if (*v19 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v22)
  {
    *unsigned int v13 = *v15;
    *uint64_t v19 = *v20;
    uint64_t v29 = v17;
    uint64_t v30 = ((unint64_t)v19 + v11 + 8) & v17;
    uint64_t v31 = ((unint64_t)v20 + v11 + 8) & v29;
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    swift_retain();
    swift_retain();
    v32(v30, v31, v9);
    return a1;
  }
  uint64_t v24 = v13;
  int v25 = v15;
LABEL_10:
  memcpy(v24, v25, v18);
  return a1;
}

uint64_t initializeWithTake for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 56;
  uint64_t v9 = (char *)((v8 + a1) & ~(v7 | 7));
  uint64_t v10 = (void *)((v8 + a2) & ~(v7 | 7));
  uint64_t v11 = ~v7;
  uint64_t v12 = *(void *)(v6 + 64);
  unsigned int v13 = (uint64_t *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    uint64_t v14 = *v13;
    if ((unint64_t)*v13 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    if (v14 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v9 = *v10;
    unint64_t v15 = (unint64_t)(v9 + 15);
    *(void *)(v15 & 0xFFFFFFFFFFFFFFF8) = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((v7 + 8 + (v15 & 0xFFFFFFFFFFFFFFF8)) & v11, ((unint64_t)v13 + v7 + 8) & v11, v5);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v13 + v7 + 8) & v11)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v9, v10, ((v7 + 16) & ~v7) + v12);
  return a1;
}

uint64_t assignWithTake for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 56;
  unsigned int v13 = (void *)((v12 + a1) & ~(v11 | 7));
  uint64_t v14 = v12 + a2;
  unint64_t v15 = (void *)(v14 & ~(v11 | 7));
  uint64_t v16 = *(unsigned int *)(v10 + 84);
  uint64_t v17 = ~v11;
  size_t v18 = ((v11 + 16) & ~v11) + *(void *)(v10 + 64);
  uint64_t v19 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v16 & 0x80000000) != 0)
  {
    uint64_t v32 = v14 & ~(v11 | 7);
    uint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);
    uint64_t v31 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(v9 - 8) + 64);
    int v27 = v26(((unint64_t)v19 + v11 + 8) & ~v11, v16, v9);
    uint64_t v28 = v26;
    int v30 = v27;
    int v20 = (void *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = ~v11;
    int v22 = v28(((unint64_t)v20 + v11 + 8) & ~v11, v16, v9);
    size_t v18 = v31;
    unint64_t v15 = (void *)v32;
    if (!v30)
    {
LABEL_5:
      if (!v22)
      {
        *unsigned int v13 = *v15;
        swift_release();
        *uint64_t v19 = *v20;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))(((unint64_t)v19 + v11 + 8) & v17, ((unint64_t)v20 + v11 + 8) & v17, v9);
        return a1;
      }
      size_t v23 = v18;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v19 + v11 + 8) & v17, v9);
      uint64_t v24 = v13;
      int v25 = v15;
      size_t v18 = v23;
      goto LABEL_10;
    }
  }
  else
  {
    int v20 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = *v20;
    if (*v20 >= 0xFFFFFFFFuLL) {
      LODWORD(v21) = -1;
    }
    int v22 = v21 + 1;
    if (*v19 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v22)
  {
    *unsigned int v13 = *v15;
    *uint64_t v19 = *v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)v19 + v11 + 8) & v17, ((unint64_t)v20 + v11 + 8) & v17, v9);
    return a1;
  }
  uint64_t v24 = v13;
  int v25 = v15;
LABEL_10:
  memcpy(v24, v25, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v8 | 7;
  int v11 = a2 - v9;
  if (a2 <= v9) {
    goto LABEL_26;
  }
  uint64_t v12 = ((v8 + 16) & ~v8) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v8 + 56) & ~v10);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_26:
      if ((v7 & 0x80000000) != 0)
      {
        uint64_t v19 = (unint64_t *)(((((unint64_t)a1 + v10 + 56) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v19 + v8 + 8) & ~v8);
        }
        else
        {
          unint64_t v20 = *v19;
          if (v20 >= 0xFFFFFFFF) {
            LODWORD(v20) = -1;
          }
          unsigned int v21 = v20 + 1;
        }
        if (v21 >= 2) {
          return v21 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *((void *)a1 + 3);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_26;
  }
LABEL_18:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (v12)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v9 + (v12 | v17) + 1;
}

void storeEnumTagSinglePayload for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  if (v8 - 1 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8 - 1;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v13 = v12 + ((v11 + 56) & ~(v11 | 7));
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 != 0 && v14)
  {
    if (v13 <= 3)
    {
      unsigned int v19 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v19))
      {
        int v16 = 4;
      }
      else if (v19 >= 0x100)
      {
        int v16 = 2;
      }
      else
      {
        int v16 = v19 > 1;
      }
    }
    else
    {
      int v16 = 1;
    }
  }
  else
  {
    int v16 = 0;
  }
  if (v10 < a2)
  {
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v13)
      {
        int v20 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_71;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_71:
      __break(1u);
      JUMPOUT(0x188098AA0);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v21 = (unsigned char *)((unint64_t)&a1[(v11 | 7) + 56] & ~(v11 | 7));
          if (v9 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v27 = (void *)((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v28 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v29 = a2 + 1;
                  v28(((unint64_t)v27 + v11 + 8) & ~v11, v29);
                }
                else if (((a2 + 1) & 0x80000000) != 0)
                {
                  void *v27 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  void *v27 = a2;
                }
              }
            }
            else
            {
              if (v12 <= 3) {
                int v25 = ~(-1 << (8 * v12));
              }
              else {
                int v25 = -1;
              }
              if (v12)
              {
                int v23 = v25 & (a2 - v8);
                if (v12 <= 3) {
                  int v26 = v12;
                }
                else {
                  int v26 = 4;
                }
                bzero(v21, v12);
                switch(v26)
                {
                  case 2:
LABEL_65:
                    *(_WORD *)unsigned int v21 = v23;
                    break;
                  case 3:
LABEL_64:
                    *(_WORD *)unsigned int v21 = v23;
                    uint64_t v21[2] = BYTE2(v23);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)unsigned int v21 = v23;
                    break;
                  default:
LABEL_52:
                    *unsigned int v21 = v23;
                    break;
                }
              }
            }
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (a2 - v8);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  goto LABEL_65;
                case 3:
                  goto LABEL_64;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 3) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_188098AE8()
{
  return swift_getWitnessTable();
}

uint64_t sub_188098B34()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t partial apply for closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter(*(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListCellModifier()
{
  return swift_getGenericMetadata();
}

uint64_t sub_188098C48()
{
  long long v6 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = (int *)(type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  __swift_destroy_boxed_opaque_existential_1(v2);

  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + v1[15];
  uint64_t v4 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, void))(*(void *)(v6 - 8) + 8))(v3 + *(int *)(v4 + 32), v6);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter(uint64_t *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.body.getter(a1, v8, v3, v4, v5, v6);
}

uint64_t partial apply for closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v7 = *(void *)(type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody() - 8);
  uint64_t v8 = v1[2];
  uint64_t v9 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(v8, v9, v3, v4, v5, v6, a1);
}

uint64_t objectdestroy_84Tm()
{
  long long v6 = *(_OWORD *)(v0 + 40);
  uint64_t v1 = (int *)(type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + v2);

  swift_bridgeObjectRelease();
  unint64_t v3 = v0 + v2 + v1[15];
  uint64_t v4 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, void))(*(void *)(v6 - 8) + 8))(v3 + *(int *)(v4 + 32), v6);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(unsigned __int8 *a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v6 = v1[7];
  uint64_t v7 = *(void *)(type metadata accessor for AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return closure #2 in AccessibilityListStyle.Body.AccessibilityList.AccessibilityListBody.isSelected(at:)(a1, v1[2], v1[3], (uint64_t)v1 + v8, *(uint64_t *)((char *)v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8)), v3, v4, v5, v6);
}

uint64_t sub_1880991C4()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityListStyle.Body<A>.AccessibilityList<A1>.AccessibilityListCellModifier()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t sub_188099374()
{
  return swift_getWitnessTable();
}

void NavigationLinkPickerStyle.init()(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t NavigationLinkPickerStyle.init(labelAxis:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result & 1;
  return result;
}

uint64_t static NavigationLinkPickerStyle._makeView<A>(value:inputs:)()
{
  return static MultiView._makeView(view:inputs:)();
}

uint64_t type metadata accessor for NavigationPickerButton()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NavigationLinkPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static NavigationLinkPickerStyle._makeViewList<A>(value:inputs:)()
{
  return static Group<A>._makeViewList(view:inputs:)();
}

uint64_t NavigationLinkPickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t NavigationLinkPickerStyle.Body.value.getter(int a1, _UNKNOWN **a2, _UNKNOWN **a3)
{
  int v20 = &type metadata for NavigationLinkPickerStyle;
  uint64_t v21 = (uint64_t)a2;
  int v22 = &protocol witness table for NavigationLinkPickerStyle;
  int v23 = a3;
  uint64_t v6 = type metadata accessor for _PickerValue();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v20 - v8;
  NavigationLinkPickerStyle.Body.base.getter((uint64_t)&v20 - v8);
  unsigned int v10 = &v9[*(int *)(v7 + 60)];
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, v11, v12);
  uint64_t v13 = type metadata accessor for PickerStyleConfiguration();
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v10, v13);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  *(_DWORD *)(v14 + 32) = a1;
  uint64_t v15 = type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v16 = type metadata accessor for PickerStyleConfiguration.Label();
  int v20 = (ValueMetadata *)v15;
  uint64_t v21 = (uint64_t)a2;
  int v22 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  int v23 = a3;
  uint64_t v17 = type metadata accessor for PickerCurrentValueLabel();
  uint64_t WitnessTable = swift_getWitnessTable();
  int v20 = (ValueMetadata *)v16;
  uint64_t v21 = v17;
  int v22 = a2;
  int v23 = &protocol witness table for PickerStyleConfiguration<A>.Label;
  uint64_t v24 = WitnessTable;
  int v25 = a3;
  type metadata accessor for NavigationPickerButton();
  swift_getWitnessTable();
  return Group.init<A, B>(subviews:transform:)();
}

uint64_t closure #1 in NavigationLinkPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v40 = a1;
  uint64_t v41 = a4;
  uint64_t v6 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v37 = &v33[-v7];
  uint64_t v38 = (ValueMetadata *)type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v42 = v38;
  uint64_t v43 = a2;
  uint64_t v44 = &protocol witness table for PickerStyleConfiguration<A>.Content;
  uint64_t v45 = a3;
  uint64_t v39 = type metadata accessor for PickerCurrentValueLabel();
  uint64_t v36 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v35 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v33[-v10];
  uint64_t v42 = &type metadata for NavigationLinkPickerStyle;
  uint64_t v43 = a2;
  uint64_t v44 = &protocol witness table for NavigationLinkPickerStyle;
  uint64_t v45 = a3;
  uint64_t v12 = type metadata accessor for _PickerValue();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v33[-v14];
  uint64_t v16 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unsigned int v19 = &v33[-v18];
  NavigationLinkPickerStyle.Body.base.getter((uint64_t)v15);
  (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v17 + 32))(v19, &v15[*(int *)(v12 + 52)], v16);
  NavigationLinkPickerStyle.Body.base.getter((uint64_t)v15);
  int v20 = *(void (**)(unsigned __int8 *, uint64_t))(v13 + 8);
  int v34 = *v15;
  v20(v15, v12);
  uint64_t v21 = (uint64_t)v37;
  PickerStyleConfiguration.$selection.getter();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, v22, v23);
  PickerCurrentValueLabel.init(selection:options:)(v21, v24, (uint64_t)v38, v11);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, v25, v26);
  uint64_t v28 = (uint64_t)v35;
  uint64_t v27 = v36;
  uint64_t v29 = v39;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v36 + 16))(v35, v11, v39);
  outlined init with copy of SubviewsCollection(v40, (uint64_t)&v42);
  PickerStyleConfiguration.$selection.getter();
  (*(void (**)(unsigned char *, uint64_t))(v27 + 8))(v11, v29);
  (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v30 = type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t WitnessTable = swift_getWitnessTable();
  return NavigationPickerButton.init(label:detailLabel:options:selection:labelAxis:)(WitnessTable, v28, (uint64_t)&v42, v21, v34, v30, v29, v41);
}

uint64_t NavigationPickerButton.init(label:detailLabel:options:selection:labelAxis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8, a1, a6);
  uint64_t v14 = (int *)type metadata accessor for NavigationPickerButton();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + v14[17], a2, a7);
  uint64_t v15 = a8 + v14[18];
  long long v16 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a3;
  *(_OWORD *)(v15 + 16) = v16;
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(a3 + 32);
  *(void *)(v15 + 48) = *(void *)(a3 + 48);
  uint64_t v17 = a8 + v14[19];
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a4, v18);
  *(unsigned char *)(a8 + v14[20]) = a5;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationLinkPickerStyle.Body<A>(uint64_t a1)
{
  return NavigationLinkPickerStyle.Body.value.getter(*v1, *(_UNKNOWN ***)(a1 + 16), *(_UNKNOWN ***)(a1 + 24));
}

unsigned char *storeEnumTagSinglePayload for NavigationLinkPickerStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18809A280);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationLinkPickerStyle()
{
  return &type metadata for NavigationLinkPickerStyle;
}

uint64_t type metadata completion function for NavigationPickerButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Binding();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationPickerButton(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v8 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = *(void *)(v9 + 64) + 7;
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v14 | 7;
  unint64_t v16 = ((v14 + 16) & ~v14)
      + *(void *)(v13 + 64)
      + ((v14 + ((v12 + ((v6 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 56) & ~(v14 | 7))
      + 1;
  unsigned int v17 = v14 | *(_DWORD *)(v5 + 80) & 0xF8 | v10;
  if (v17 > 7 || ((*(_DWORD *)(v13 + 80) | *(_DWORD *)(v9 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0 || v16 > 0x18)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    uint64_t v37 = (uint64_t *)(v20 + (((v17 | 7) + 16) & ~(unint64_t)(v17 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v21 = ~v10;
    uint64_t v39 = ~v14;
    uint64_t v40 = ((v14 + 16) & ~v14) + *(void *)(*(void *)(v7 - 8) + 64);
    uint64_t v41 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v42 = a1;
    unint64_t v22 = ((unint64_t)a1 + v11) & v21;
    unint64_t v23 = ((unint64_t)a2 + v11) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(v22, v23, v8);
    uint64_t v24 = (void *)((v12 + v22) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (void *)((v12 + v23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v25[3];
    v24[3] = v26;
    v24[4] = v25[4];
    (**(void (***)(void *, void *))(v26 - 8))(v24, v25);
    uint64_t v27 = (void *)v25[5];
    void v24[5] = v27;
    v24[6] = v25[6];
    uint64_t v28 = (void *)(((unint64_t)v24 + v15 + 56) & ~v15);
    uint64_t v29 = (void *)(((unint64_t)v25 + v15 + 56) & ~v15);
    *uint64_t v28 = *v29;
    uint64_t v30 = (void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v30 = *v31;
    uint64_t v32 = v14 + 8;
    uint64_t v33 = ((unint64_t)v30 + v14 + 8) & ~v14;
    unint64_t v34 = ((unint64_t)v31 + v32) & v39;
    uint64_t v35 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    id v36 = v27;
    uint64_t v37 = v42;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v35(v33, v34, v41);
    *((unsigned char *)v28 + v40) = *((unsigned char *)v29 + v40);
  }
  return v37;
}

uint64_t destroy for NavigationPickerButton(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v9 = (*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v9);

  swift_bridgeObjectRelease();
  uint64_t v10 = a2[4];
  uint64_t v14 = *(void *)(v10 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v14 + 80);
  swift_release();
  swift_release();
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t))(v14 + 8);

  return v12((v11 + ((((v9 + (v11 | 7) + 56) & ~(v11 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11, v10);
}

uint64_t initializeWithCopy for NavigationPickerButton(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v5 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = v15[3];
  v14[3] = v16;
  v14[4] = v15[4];
  (**(void (***)(void *, void *))(v16 - 8))(v14, v15);
  unsigned int v17 = (void *)v15[5];
  v14[5] = v17;
  v14[6] = v15[6];
  uint64_t v18 = a3[4];
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  uint64_t v20 = v19 + 16;
  uint64_t v21 = *(_DWORD *)(v19 + 80);
  unint64_t v22 = *(_DWORD *)(v19 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (void *)(((unint64_t)v14 + v21 + 56) & v22);
  uint64_t v24 = (void *)(((unint64_t)v15 + v21 + 56) & v22);
  *unint64_t v23 = *v24;
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  uint64_t v27 = ((unint64_t)v25 + v21 + 8) & ~v21;
  uint64_t v28 = ((unint64_t)v26 + v21 + 8) & ~v21;
  id v29 = v17;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v32(v27, v28, v18);
  uint64_t v30 = *(void *)(v20 + 48) + ((v21 + 16) & ~v21);
  *((unsigned char *)v23 + v30) = *((unsigned char *)v24 + v30);
  return a1;
}

uint64_t assignWithCopy for NavigationPickerButton(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 40) + 7;
  uint64_t v14 = (uint64_t *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (uint64_t *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v14, v15);
  uint64_t v16 = (void *)v15[5];
  unsigned int v17 = (void *)v14[5];
  v14[5] = (uint64_t)v16;
  id v18 = v16;

  v14[6] = v15[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[4];
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  unint64_t v22 = *(_DWORD *)(v20 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (void *)(((unint64_t)v14 + v21 + 56) & v22);
  uint64_t v24 = (void *)(((unint64_t)v15 + v21 + 56) & v22);
  *unint64_t v23 = *v24;
  swift_retain();
  swift_release();
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 24))(((unint64_t)v25 + v21 + 8) & ~v21, ((unint64_t)v26 + v21 + 8) & ~v21, v19);
  uint64_t v27 = *(void *)(v20 + 64) + ((v21 + 16) & ~v21);
  *((unsigned char *)v23 + v27) = *((unsigned char *)v24 + v27);
  return a1;
}

uint64_t initializeWithTake for NavigationPickerButton(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)(v15 + 16);
  long long v16 = *(_OWORD *)(v15 + 32);
  long long v18 = *(_OWORD *)v15;
  *(void *)(v14 + 48) = *(void *)(v15 + 48);
  *(_OWORD *)(v14 + 16) = v17;
  *(_OWORD *)(v14 + 32) = v16;
  *(_OWORD *)unint64_t v14 = v18;
  uint64_t v19 = *(void *)(a3[4] - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80);
  unint64_t v21 = *(_DWORD *)(v19 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (void *)((v20 + 56 + v14) & v21);
  unint64_t v23 = (void *)((v20 + 56 + v15) & v21);
  *unint64_t v22 = *v23;
  uint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  uint64_t v26 = v19 + 32;
  (*(void (**)(unint64_t, unint64_t))(v19 + 32))(((unint64_t)v24 + v20 + 8) & ~v20, ((unint64_t)v25 + v20 + 8) & ~v20);
  uint64_t v27 = *(void *)(v26 + 32) + ((v20 + 16) & ~v20);
  *((unsigned char *)v22 + v27) = *((unsigned char *)v23 + v27);
  return a1;
}

uint64_t assignWithTake for NavigationPickerButton(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v14);
  long long v16 = *(_OWORD *)v15;
  long long v17 = *(_OWORD *)(v15 + 16);
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  *(_OWORD *)unint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  long long v18 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = *(void *)(v15 + 40);

  *(void *)(v14 + 48) = *(void *)(v15 + 48);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[4];
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(_DWORD *)(v20 + 80);
  unint64_t v22 = *(_DWORD *)(v20 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (void *)((v21 + 56 + v14) & v22);
  uint64_t v24 = (void *)((v21 + 56 + v15) & v22);
  *unint64_t v23 = *v24;
  swift_release();
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 40))(((unint64_t)v25 + v21 + 8) & ~v21, ((unint64_t)v26 + v21 + 8) & ~v21, v19);
  uint64_t v27 = *(void *)(v20 + 64) + ((v21 + 16) & ~v21);
  *((unsigned char *)v23 + v27) = *((unsigned char *)v24 + v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPickerButton(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = a3[3];
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(a3[4] - 8);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v9 + 64);
  if (*(_DWORD *)(v9 + 84) <= 0x7FFFFFFFu) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  if (v10 > v14) {
    unsigned int v14 = v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v15 = *(void *)(*(void *)(a3[2] - 8) + 64) + v11;
  uint64_t v16 = *(void *)(*(void *)(v4 - 8) + 64) + 7;
  uint64_t v17 = v12 | 7;
  if (a2 <= v14) {
    goto LABEL_30;
  }
  unint64_t v18 = v13 + ((v12 + 16) & ~v12) + ((v12 + ((v16 + (v15 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 56) & ~v17) + 1;
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((a2 - v14 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v22 < 2)
    {
LABEL_30:
      if (v6 == v14)
      {
        uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
        return v26();
      }
      else
      {
        unint64_t v27 = ((unint64_t)a1 + v15) & ~v11;
        if (v8 == v14)
        {
          uint64_t v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
          return v28(v27, v8, v4);
        }
        else
        {
          unint64_t v29 = (v16 + v27) & 0xFFFFFFFFFFFFFFF8;
          if ((v14 & 0x80000000) != 0)
          {
            uint64_t v31 = *(uint64_t (**)(unint64_t))(*(void *)(a3[4] - 8) + 48);
            return v31((v12 + ((((v29 + v17 + 56) & ~v17) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12);
          }
          else
          {
            unint64_t v30 = *(void *)(v29 + 24);
            if (v30 >= 0xFFFFFFFF) {
              LODWORD(v30) = -1;
            }
            return (v30 + 1);
          }
        }
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_30;
  }
LABEL_20:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v24 = v18;
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v14 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for NavigationPickerButton(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v5 = a4[3];
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(a4[4] - 8);
  uint64_t v12 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = *(void *)(v11 + 64);
  if (*(_DWORD *)(v11 + 84) <= 0x7FFFFFFFu) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v11 + 84);
  }
  if (v10 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v10;
  }
  uint64_t v19 = v12 + v13;
  uint64_t v20 = v14 + 7;
  unint64_t v21 = (v15 + ((v14 + 7 + ((v12 + v13) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 56) & ~(v15 | 7);
  uint64_t v22 = ((v15 + 16) & ~v15) + v16;
  size_t v23 = v22 + v21 + 1;
  if (a3 > v18)
  {
    if (v23 <= 3)
    {
      unsigned int v27 = ((a3 - v18 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
      if (HIWORD(v27))
      {
        int v24 = 4;
      }
      else if (v27 >= 0x100)
      {
        int v24 = 2;
      }
      else
      {
        int v24 = v27 > 1;
      }
    }
    else
    {
      int v24 = 1;
    }
  }
  else
  {
    int v24 = 0;
  }
  if (v18 < a2)
  {
    unsigned int v25 = ~v18 + a2;
    if (v23 < 4)
    {
      int v26 = (v25 >> (8 * v23)) + 1;
      if (v22 + v21 != -1)
      {
        int v28 = v25 & ~(-1 << (8 * v23));
        bzero(a1, v23);
        if (v23 == 3)
        {
          *(_WORD *)a1 = v28;
          a1[2] = BYTE2(v28);
        }
        else if (v23 == 2)
        {
          *(_WORD *)a1 = v28;
        }
        else
        {
          *a1 = v28;
        }
      }
    }
    else
    {
      bzero(a1, v23);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v24)
    {
      case 1:
        a1[v23] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v23] = v26;
        return;
      case 3:
        goto LABEL_68;
      case 4:
        *(_DWORD *)&a1[v23] = v26;
        return;
      default:
        return;
    }
  }
  switch(v24)
  {
    case 1:
      a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v23] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_68:
      __break(1u);
      JUMPOUT(0x18809B794);
    case 4:
      *(_DWORD *)&a1[v23] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (!a2) {
        return;
      }
LABEL_30:
      if (v7 == v18)
      {
        unint64_t v29 = *(void (**)(char *))(v6 + 56);
        unint64_t v30 = a1;
LABEL_33:
        v29(v30);
        return;
      }
      unint64_t v30 = (char *)((unint64_t)&a1[v19] & ~v13);
      if (v9 == v18)
      {
        unint64_t v29 = *(void (**)(char *))(v8 + 56);
        goto LABEL_33;
      }
      unint64_t v31 = (unint64_t)&v30[v20] & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 0x80000000) != 0)
      {
        uint64_t v32 = (unsigned char *)((v31 + (v15 | 7) + 56) & ~(v15 | 7));
        if (v17 >= a2)
        {
          id v36 = *(void (**)(unint64_t))(v11 + 56);
          v36((v15 + ((unint64_t)(v32 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15);
        }
        else
        {
          if (v22 <= 3) {
            int v33 = ~(-1 << (8 * v22));
          }
          else {
            int v33 = -1;
          }
          if (v22)
          {
            int v34 = v33 & (~v17 + a2);
            if (v22 <= 3) {
              int v35 = ((v15 + 16) & ~v15) + v16;
            }
            else {
              int v35 = 4;
            }
            bzero(v32, ((v15 + 16) & ~v15) + v16);
            switch(v35)
            {
              case 2:
                *(_WORD *)uint64_t v32 = v34;
                break;
              case 3:
                *(_WORD *)uint64_t v32 = v34;
                v32[2] = BYTE2(v34);
                break;
              case 4:
                *(_DWORD *)uint64_t v32 = v34;
                break;
              default:
                *uint64_t v32 = v34;
                break;
            }
          }
        }
      }
      else if ((a2 & 0x80000000) != 0)
      {
        *(_OWORD *)(v31 + 40) = 0u;
        *(_OWORD *)(v31 + 24) = 0u;
        *(_OWORD *)(v31 + 8) = 0u;
        *(void *)unint64_t v31 = a2 ^ 0x80000000;
      }
      else
      {
        *(void *)(v31 + 24) = a2 - 1;
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in NavigationLinkPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationPickerButton<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t NavigationPickerButton.DetailView.dismiss.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 88);
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v4 + 16);
  int v8 = *(unsigned __int8 *)(v4 + 17);
  outlined copy of Environment<DismissAction>.Content(*(void *)v4, v6, v7, *(unsigned char *)(v4 + 17));
  specialized Environment.wrappedValue.getter(v5, v6, v7 | (v8 << 8), a2);

  return outlined consume of Environment<DismissAction>.Content(v5, v6, v7, v8);
}

uint64_t NavigationPickerButton.DetailView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v6 + 32);
  uint64_t v33 = type metadata accessor for Binding();
  uint64_t v43 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  int v8 = (char *)&v31 - v7;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v36 = *(void *)(v9 - 8);
  uint64_t v10 = v36;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = v13;
  uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v37 = *(void *)(a1 + 64);
  uint64_t v38 = v14;
  uint64_t v41 = type metadata accessor for _BindingActionModifier();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int v34 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v40 = (char *)&v31 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v2 + *(int *)(a1 + 84), v9, v18);
  uint64_t v20 = v8;
  Binding.projectedValue.getter();
  unint64_t v21 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v39, v2, a1);
  unint64_t v22 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(v23 + 32) = v35;
  *(void *)(v23 + 40) = v9;
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 72);
  *(void *)(v23 + 64) = v37;
  *(void *)(v23 + 72) = v24;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v23 + v22, v21, a1);
  unsigned int v25 = v34;
  int v26 = v32;
  View._onBindingChange<A>(_:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v20, v33);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = v24;
  uint64_t v46 = WitnessTable;
  swift_getWitnessTable();
  int v28 = v40;
  static ViewBuilder.buildExpression<A>(_:)(v25);
  unint64_t v29 = *(void (**)(char *, uint64_t))(v42 + 8);
  v29(v25, v15);
  static ViewBuilder.buildExpression<A>(_:)(v28);
  return ((uint64_t (*)(char *, uint64_t))v29)(v28, v15);
}

uint64_t closure #1 in NavigationPickerButton.DetailView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v15[0] = a3;
  v15[1] = a4;
  _OWORD v15[2] = a5;
  uint64_t v15[3] = a6;
  uint64_t v15[4] = a7;
  _OWORD v15[5] = a8;
  void v15[6] = a9;
  v15[7] = a10;
  uint64_t v10 = type metadata accessor for NavigationPickerButton.DetailView();
  NavigationPickerButton.DetailView.dismiss.getter(v10, (uint64_t)v15);
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41638]);
  uint64_t v12 = v11;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v14, v12);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release_n();
  return swift_release_n();
}

uint64_t NavigationPickerButton.DetailView.init(selection:content:dismiss:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  char v12 = *((unsigned char *)a3 + 17);
  char v13 = *((unsigned char *)a3 + 16);
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for NavigationPickerButton.DetailView();
  uint64_t result = a2();
  uint64_t v11 = a4 + *(int *)(v9 + 88);
  *(void *)uint64_t v11 = v6;
  *(void *)(v11 + 8) = v7;
  *(unsigned char *)(v11 + 16) = v13;
  *(unsigned char *)(v11 + 17) = v12;
  return result;
}

uint64_t NavigationPickerButton.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v82 = a2;
  uint64_t v80 = *(a1 - 1);
  uint64_t v81 = *(void *)(v80 + 64);
  MEMORY[0x1F4188790](a1);
  int v79 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 32);
  uint64_t v76 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v76);
  int v75 = (char *)&v61 - v6;
  uint64_t v7 = a1[2];
  uint64_t v74 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v72 = v5;
  int v73 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = a1[5];
  uint64_t v85 = (ValueMetadata *)a1[7];
  uint64_t v118 = v7;
  uint64_t v119 = v5;
  uint64_t v120 = v83;
  uint64_t v121 = v85;
  uint64_t v84 = type metadata accessor for ListPicker();
  uint64_t v78 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  uint64_t v87 = (uint64_t)&v61 - v10;
  uint64_t v11 = a1[3];
  int v71 = a1;
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  type metadata accessor for ModifiedContent();
  uint64_t v70 = v7;
  type metadata accessor for LabeledContent();
  type metadata accessor for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = a1[6];
  uint64_t v118 = v7;
  uint64_t v119 = v11;
  uint64_t v69 = v11;
  uint64_t v120 = v5;
  uint64_t v121 = &type metadata for BoundInputsView;
  uint64_t v14 = v83;
  uint64_t v122 = v83;
  uint64_t v123 = v13;
  uint64_t v15 = v13;
  uint64_t v86 = v13;
  uint64_t v124 = v85;
  Swift::Int v125 = &protocol witness table for BoundInputsView;
  uint64_t v16 = type metadata accessor for NavigationPickerButton.DetailView();
  uint64_t v116 = v15;
  uint64_t v117 = &protocol witness table for DisableAccessibilityNodesModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v18 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v114 = WitnessTable;
  unint64_t v115 = v18;
  uint64_t v19 = swift_getWitnessTable();
  unint64_t v20 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v112 = v19;
  unint64_t v113 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v110 = v14;
  uint64_t v111 = v21;
  uint64_t v108 = swift_getWitnessTable();
  uint64_t v109 = &protocol witness table for _LabeledContentStyleModifier<A>;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v118 = v12;
  uint64_t v119 = v16;
  uint64_t v120 = v22;
  uint64_t v121 = (ValueMetadata *)v23;
  uint64_t v68 = type metadata accessor for NavigationLink();
  uint64_t v67 = type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  uint64_t v106 = v86;
  uint64_t v107 = &protocol witness table for DetachedGeometryModifier;
  uint64_t v24 = swift_getWitnessTable();
  unint64_t v25 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  uint64_t v104 = v24;
  unint64_t v105 = v25;
  uint64_t v102 = swift_getWitnessTable();
  char v103 = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  uint64_t v100 = swift_getWitnessTable();
  uint64_t v101 = &protocol witness table for _HiddenModifier;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key);
  uint64_t v98 = v26;
  uint64_t v99 = v27;
  swift_getWitnessTable();
  type metadata accessor for _BackgroundModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v29 = v84;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v65 = v30;
  uint64_t v96 = swift_getWitnessTable();
  uint64_t v97 = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v94 = v31;
  uint64_t v95 = v32;
  uint64_t v92 = swift_getWitnessTable();
  int v93 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v90 = swift_getWitnessTable();
  int v91 = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  uint64_t v88 = swift_getWitnessTable();
  uint64_t v89 = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  uint64_t v66 = v28;
  int v64 = (ValueMetadata *)swift_getWitnessTable();
  uint64_t v118 = v29;
  uint64_t v119 = v28;
  uint64_t v120 = v30;
  uint64_t v121 = v64;
  uint64_t v33 = type metadata accessor for ViewInputsBinding();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v67 = v33;
  uint64_t v68 = v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v62 = (uint64_t)&v61 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v37 = MEMORY[0x1F4188790](v36);
  uint64_t v63 = (char *)&v61 - v38;
  uint64_t v39 = v73;
  uint64_t v40 = v77;
  uint64_t v41 = v70;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v74 + 16))(v73, v77, v70, v37);
  uint64_t v42 = v71;
  outlined init with copy of SubviewsCollection(v40 + *((int *)v71 + 18), (uint64_t)&v118);
  uint64_t v43 = (uint64_t)v75;
  Binding.projectedValue.getter();
  uint64_t v44 = (uint64_t)v39;
  uint64_t v45 = v41;
  uint64_t v46 = v72;
  uint64_t v47 = v83;
  uint64_t v48 = v85;
  ListPicker.init(label:options:selection:)(v44, (uint64_t)&v118, v43, v41, v87);
  uint64_t v50 = v79;
  uint64_t v49 = v80;
  (*(void (**)(char *, uint64_t, void *))(v80 + 16))(v79, v40, v42);
  unint64_t v51 = (*(unsigned __int8 *)(v49 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v52 = (char *)swift_allocObject();
  uint64_t v53 = v69;
  *((void *)v52 + 2) = v45;
  *((void *)v52 + 3) = v53;
  *((void *)v52 + 4) = v46;
  *((void *)v52 + 5) = v47;
  *((void *)v52 + 6) = v86;
  *((void *)v52 + 7) = v48;
  (*(void (**)(char *, char *, void *))(v49 + 32))(&v52[v51], v50, v42);
  uint64_t v54 = v62;
  uint64_t v55 = v84;
  uint64_t v56 = v87;
  View.bindInputs<A>(transform:)((uint64_t)partial apply for closure #1 in NavigationPickerButton.body.getter, (uint64_t)v52, v84, v66, v65, (uint64_t)v64, v62);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v56, v55);
  uint64_t v57 = v63;
  uint64_t v58 = v67;
  static ViewBuilder.buildExpression<A>(_:)(v54);
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
  v59(v54, v58);
  static ViewBuilder.buildExpression<A>(_:)(v57);
  return ((uint64_t (*)(char *, uint64_t))v59)(v57, v58);
}

uint64_t ListPicker.init(label:options:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for ListPicker();
  uint64_t v9 = a5 + *(int *)(v8 + 52);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 16) = v10;
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v9 + 48) = *(void *)(a2 + 48);
  uint64_t v11 = a5 + *(int *)(v8 + 56);
  uint64_t v12 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a3, v12);
}

uint64_t closure #1 in NavigationPickerButton.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v83 = a6;
  uint64_t v84 = a8;
  uint64_t v87 = a7;
  uint64_t v82 = a5;
  uint64_t v77 = a1;
  uint64_t v78 = a2;
  uint64_t v79 = a9;
  uint64_t v85 = a4;
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  type metadata accessor for ModifiedContent();
  uint64_t v86 = a3;
  type metadata accessor for LabeledContent();
  type metadata accessor for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  *(void *)&long long v141 = v83;
  *((void *)&v141 + 1) = v87;
  *(void *)&long long v142 = a8;
  *((void *)&v142 + 1) = &protocol witness table for BoundInputsView;
  uint64_t v12 = type metadata accessor for NavigationPickerButton.DetailView();
  uint64_t v137 = v87;
  uint64_t v138 = &protocol witness table for DisableAccessibilityNodesModifier;
  uint64_t v13 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v136 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v133 = swift_getWitnessTable();
  unint64_t v134 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v131 = v83;
  uint64_t v132 = swift_getWitnessTable();
  uint64_t v129 = swift_getWitnessTable();
  unint64_t v130 = &protocol witness table for _LabeledContentStyleModifier<A>;
  uint64_t v75 = v11;
  *(void *)&long long v74 = swift_getWitnessTable();
  uint64_t v81 = v12;
  *((void *)&v74 + 1) = swift_getWitnessTable();
  *(void *)&long long v139 = v11;
  *((void *)&v139 + 1) = v12;
  long long v140 = v74;
  uint64_t v73 = type metadata accessor for NavigationLink();
  uint64_t v76 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  uint64_t v72 = (uint64_t)&v59 - v14;
  uint64_t v63 = type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  uint64_t v127 = v87;
  uint64_t v128 = &protocol witness table for DetachedGeometryModifier;
  uint64_t v15 = swift_getWitnessTable();
  unint64_t v16 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  uint64_t v125 = v15;
  unint64_t v126 = v16;
  uint64_t v123 = swift_getWitnessTable();
  uint64_t v124 = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  uint64_t v121 = swift_getWitnessTable();
  uint64_t v122 = &protocol witness table for _HiddenModifier;
  uint64_t v67 = v13;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key);
  uint64_t v119 = v17;
  uint64_t v120 = v18;
  swift_getWitnessTable();
  uint64_t v65 = type metadata accessor for _BackgroundModifier();
  uint64_t v66 = type metadata accessor for ModifiedContent();
  uint64_t v68 = type metadata accessor for ModifiedContent();
  uint64_t v69 = type metadata accessor for ModifiedContent();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v70 = v19;
  uint64_t v71 = v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v62 = (uint64_t)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  int v64 = (char *)&v59 - v23;
  uint64_t v24 = v82;
  uint64_t v25 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v27 = (char *)&v59 - v26;
  uint64_t v80 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v61 = (char *)&v59 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v59 - v31;
  long long v33 = v77[3];
  long long v141 = v77[2];
  long long v142 = v33;
  long long v143 = v77[4];
  uint64_t v144 = *((void *)v77 + 10);
  long long v34 = v77[1];
  long long v139 = *v77;
  long long v140 = v34;
  uint64_t v36 = v85;
  uint64_t v35 = v86;
  uint64_t KeyPath = v86;
  uint64_t v114 = v85;
  uint64_t v115 = v24;
  uint64_t v37 = v83;
  uint64_t v116 = v83;
  uint64_t v38 = v87;
  uint64_t v117 = v87;
  uint64_t v118 = v84;
  type metadata accessor for NavigationPickerButton();
  uint64_t v39 = v78;
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  uint64_t v102 = &v139;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v114 = 0;
  LOWORD(v115) = 0;
  uint64_t v40 = v38;
  uint64_t v60 = v32;
  uint64_t v41 = (uint64_t)v27;
  uint64_t v42 = v36;
  uint64_t v43 = v82;
  NavigationPickerButton.DetailView.init(selection:content:dismiss:)(v41, (uint64_t (*)(void))partial apply for closure #1 in closure #1 in NavigationPickerButton.body.getter, &KeyPath, (uint64_t)v32);
  uint64_t v44 = v81;
  uint64_t v45 = (uint64_t)v61;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v61, v32, v81);
  uint64_t v95 = v35;
  uint64_t v96 = v42;
  uint64_t v46 = v42;
  uint64_t v97 = v43;
  uint64_t v98 = v37;
  uint64_t v99 = v40;
  uint64_t v47 = v40;
  uint64_t v48 = v84;
  uint64_t v100 = v84;
  uint64_t v101 = v39;
  uint64_t v49 = v72;
  NavigationLink.init(destination:label:)(v45, (void (*)(uint64_t))partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter, v75, v44, *((uint64_t *)&v74 + 1), v72);
  uint64_t v88 = v86;
  uint64_t v89 = v46;
  uint64_t v90 = v43;
  uint64_t v91 = v37;
  uint64_t v92 = v47;
  uint64_t v93 = v48;
  uint64_t v94 = v39;
  uint64_t v50 = v73;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = v62;
  View.accessibilityValue<A>(value:)((uint64_t)partial apply for closure #3 in closure #1 in NavigationPickerButton.body.getter, v50, v46, v51, v47, v62);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v49, v50);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v44);
  uint64_t v111 = v51;
  uint64_t v112 = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v54 = swift_getWitnessTable();
  uint64_t v109 = v53;
  uint64_t v110 = v54;
  uint64_t v107 = swift_getWitnessTable();
  uint64_t v108 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v105 = swift_getWitnessTable();
  uint64_t v106 = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  uint64_t v103 = swift_getWitnessTable();
  uint64_t v104 = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  uint64_t v55 = v70;
  swift_getWitnessTable();
  uint64_t v56 = v64;
  static ViewBuilder.buildExpression<A>(_:)(v52);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
  v57(v52, v55);
  static ViewBuilder.buildExpression<A>(_:)(v56);
  return ((uint64_t (*)(char *, uint64_t))v57)(v56, v55);
}

uint64_t closure #2 in closure #1 in NavigationPickerButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a1;
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v33 = type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  uint64_t v35 = type metadata accessor for ModifiedContent();
  uint64_t v12 = type metadata accessor for LabeledContent();
  uint64_t v37 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v34 = (uint64_t)&v30 - v13;
  type metadata accessor for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v30 - v18;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v30 = a5;
  uint64_t v53 = v40;
  uint64_t v54 = v41;
  uint64_t v55 = v39;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v46 = v40;
  uint64_t v47 = v41;
  uint64_t v48 = v39;
  v60[10] = v40;
  v60[11] = &protocol witness table for DisableAccessibilityNodesModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v21 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v60[8] = WitnessTable;
  v60[9] = v21;
  uint64_t v22 = swift_getWitnessTable();
  unint64_t v23 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  v60[6] = v22;
  v60[7] = v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = v34;
  uint64_t v26 = v30;
  LabeledContent<>.init(content:label:)(partial apply for closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in closure #2 in closure #1 in NavigationPickerButton.body.getter, v34);
  v60[0] = a2;
  v60[1] = v31;
  v60[2] = v32;
  v60[3] = v26;
  v60[4] = v40;
  v60[5] = v41;
  LOBYTE(v60[0]) = *(unsigned char *)(v39 + *(int *)(type metadata accessor for NavigationPickerButton() + 80));
  uint64_t v58 = v26;
  uint64_t v59 = v24;
  uint64_t v27 = swift_getWitnessTable();
  lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle();
  View.labeledContentStyle<A>(_:)((uint64_t)v60, v12, (uint64_t)&type metadata for AdaptiveLeadingTrailingLabeledContentStyle, v27);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v25, v12);
  uint64_t v56 = v27;
  uint64_t v57 = &protocol witness table for _LabeledContentStyleModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v36 + 8);
  v28(v16, v14);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v28)(v19, v14);
}

uint64_t closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v43 = a5;
  uint64_t v44 = a7;
  uint64_t v41 = a2;
  uint64_t v42 = a4;
  uint64_t v47 = a8;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  uint64_t v59 = a7;
  uint64_t v11 = type metadata accessor for NavigationPickerButton();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v38 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  uint64_t v37 = (char *)&KeyPath - v13;
  uint64_t v39 = type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v36 = (char *)&KeyPath - v15;
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&KeyPath - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v40 = (char *)&KeyPath - v20;
  uint64_t v21 = a3;
  View.accessibilityDisabled()(a3, a6);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v37, a1, v11);
  unint64_t v23 = (*(unsigned __int8 *)(v12 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = v41;
  *((void *)v24 + 3) = v21;
  uint64_t v25 = v43;
  *((void *)v24 + 4) = v42;
  *((void *)v24 + 5) = v25;
  uint64_t v26 = v44;
  *((void *)v24 + 6) = a6;
  *((void *)v24 + 7) = v26;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v24[v23], v22, v11);
  uint64_t v52 = a6;
  uint64_t v53 = &protocol witness table for DisableAccessibilityNodesModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v28 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v50 = WitnessTable;
  unint64_t v51 = v28;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v30 = v36;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v14);
  unint64_t v31 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v48 = v29;
  unint64_t v49 = v31;
  swift_getWitnessTable();
  uint64_t v32 = v40;
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v46 + 8);
  v33(v18, v16);
  static ViewBuilder.buildExpression<A>(_:)(v32);
  return ((uint64_t (*)(char *, uint64_t))v33)(v32, v16);
}

uint64_t closure #1 in closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter(uint64_t *a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for NavigationPickerButton();
  if (*(unsigned char *)(a2 + *(int *)(result + 80)))
  {
    swift_release();
    uint64_t result = static Font.subheadline.getter();
    *a1 = result;
  }
  return result;
}

uint64_t closure #3 in closure #1 in NavigationPickerButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v8;
  v16[1] = v9;
  _OWORD v16[2] = v10;
  void v16[3] = v11;
  _OWORD v16[4] = v12;
  _OWORD v16[5] = v13;
  uint64_t v14 = type metadata accessor for NavigationPickerButton();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v14 + 68));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t type metadata accessor for ListPicker()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Font?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Font?>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Font?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle;
  if (!lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AdaptiveLeadingTrailingLabeledContentStyle and conformance AdaptiveLeadingTrailingLabeledContentStyle);
  }
  return result;
}

uint64_t type metadata accessor for NavigationPickerButton.DetailView()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Font?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, a2, a3, a4, MEMORY[0x1E4F41108]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in NavigationPickerButton.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = *(void *)(type metadata accessor for NavigationPickerButton() - 8);
  uint64_t v12 = (uint64_t)v2 + ((*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));

  return closure #1 in NavigationPickerButton.body.getter(a1, v12, v5, v6, v7, v8, v9, v10, a2);
}

uint64_t partial apply for closure #1 in closure #1 in NavigationPickerButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  long long v3 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(void *)(a1 + 80) = *(void *)(v2 + 80);
  long long v4 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v4;
  return outlined retain of BoundInputsView(v2);
}

uint64_t partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter()
{
  return partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #2 in closure #1 in NavigationPickerButton.body.getter);
}

uint64_t partial apply for closure #3 in closure #1 in NavigationPickerButton.body.getter()
{
  return partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #3 in closure #1 in NavigationPickerButton.body.getter);
}

uint64_t partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter()
{
  return partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter);
}

uint64_t partial apply for closure #2 in closure #2 in ListPicker.resolvedList<A>(list:)()
{
  return closure #2 in closure #2 in closure #1 in NavigationPickerButton.body.getter(*(void *)(v0 + 64), *(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for NavigationPickerButton() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in closure #1 in closure #2 in closure #1 in NavigationPickerButton.body.getter(a1, v4);
}

uint64_t ListPicker.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v46 = a1;
  uint64_t v39 = a1[3];
  uint64_t v41 = a1[5];
  uint64_t v44 = type metadata accessor for PickerContentView();
  uint64_t WitnessTable = swift_getWitnessTable();
  int v64 = (void *)MEMORY[0x1E4FBC248];
  uint64_t v65 = v44;
  uint64_t v66 = MEMORY[0x1E4FBC258];
  unint64_t IsGroupedPredicate = WitnessTable;
  uint64_t v3 = type metadata accessor for List();
  type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>();
  uint64_t v42 = v4;
  uint64_t v37 = v3;
  uint64_t v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  uint64_t v38 = v5;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>(255, &lazy cache variable for type metadata for ToggleStyleModifier<CheckmarkToggleStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle, (uint64_t)&type metadata for CheckmarkToggleStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ToggleStyleModifier);
  uint64_t v40 = v6;
  uint64_t v47 = type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v48 = a1[2];
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v78 = v34;
  uint64_t IsGrouped = lazy protocol witness table accessor for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>);
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v76 = v35;
  uint64_t v77 = lazy protocol witness table accessor for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v75 = &protocol witness table for ToggleStyleModifier<A>;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v72 = v36;
  uint64_t v73 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v70[14] = swift_getWitnessTable();
  uint64_t v71 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  v70[12] = swift_getWitnessTable();
  v70[13] = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  v70[10] = swift_getWitnessTable();
  v70[11] = v71;
  uint64_t v7 = swift_getWitnessTable();
  uint64_t v8 = v46;
  uint64_t v31 = v46[4];
  uint64_t v68 = v7;
  uint64_t v69 = v31;
  int v64 = &unk_1ED45ED58;
  uint64_t v65 = v47;
  uint64_t v66 = type metadata accessor for PlatformItemListReader();
  unint64_t IsGroupedPredicate = lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate();
  uint64_t v9 = type metadata accessor for StaticIf();
  uint64_t v33 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v32 = (char *)&v30 - v13;
  uint64_t v14 = v39;
  type metadata accessor for Binding();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  uint64_t v15 = static Array._adoptStorage(_:count:)();
  uint64_t v16 = v49;
  type metadata accessor for Binding();
  Binding.projectedValue.getter();
  _finalizeUninitializedArray<A>(_:)();
  outlined init with copy of SubviewsCollection(v16 + *((int *)v8 + 13), (uint64_t)&v64);
  uint64_t v17 = v14;
  uint64_t v18 = v41;
  PickerContentView.init(selection:items:)(v15, (uint64_t)&v64, (uint64_t)v70);
  uint64_t v19 = v48;
  uint64_t v55 = v48;
  uint64_t v56 = v17;
  uint64_t v20 = v31;
  uint64_t v57 = v31;
  uint64_t v58 = v18;
  uint64_t v59 = v70;
  uint64_t v21 = v44;
  List<>.init(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in ListPicker.body.getter, (uint64_t)&v64);
  memset(v62, 0, 32);
  v62[32] = 1;
  uint64_t v22 = v37;
  MEMORY[0x18C113660](v63, v62, v37, v42, v34);
  (*(void (**)(void **, uint64_t))(*(void *)(v22 - 8) + 8))(&v64, v22);
  unint64_t v23 = lazy protocol witness table accessor for type AnyFormStyleContext and conformance AnyFormStyleContext();
  uint64_t v24 = v38;
  View.listStyle<A, B>(_:in:)(v23, v25, v38, (uint64_t)&type metadata for InsetGroupedListStyle, (uint64_t)&type metadata for AnyFormStyleContext, v35, v23, (uint64_t)&v64);
  (*(void (**)(void *, uint64_t))(*(void *)(v24 - 8) + 8))(v63, v24);
  uint64_t v50 = v19;
  uint64_t v51 = v17;
  uint64_t v52 = v20;
  uint64_t v53 = v18;
  uint64_t v54 = &v64;
  uint64_t v26 = v36;
  ListPicker.resolvedList<A>(list:)((uint64_t)partial apply for closure #2 in ListPicker.body.getter, v46, v47, v36, (uint64_t)v11);
  uint64_t v60 = v26;
  uint64_t v61 = &protocol witness table for PlatformItemListReader<A, B, C>;
  swift_getWitnessTable();
  uint64_t v27 = v32;
  static ViewBuilder.buildExpression<A>(_:)(v11);
  unint64_t v28 = *(void (**)(char *, uint64_t))(v33 + 8);
  v28(v11, v9);
  static ViewBuilder.buildExpression<A>(_:)(v27);
  v28(v27, v9);
  (*(void (**)(void **))(*(void *)(v40 - 8) + 8))(&v64);
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v21 - 8) + 8))(v70, v21);
}

uint64_t closure #1 in ListPicker.body.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v2 - 8) + 8))(v4, v2);
}

uint64_t closure #2 in ListPicker.body.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v1 = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  uint64_t v3 = v12;
  char v4 = v13;
  uint64_t v5 = v14;
  char v6 = v15;
  uint64_t v7 = v16;
  char v8 = v17;
  uint64_t v12 = KeyPath;
  char v13 = 0;
  uint64_t v14 = v1;
  char v15 = 0;
  uint64_t v16 = v2;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = v3;
  char v22 = v4;
  uint64_t v23 = v5;
  char v24 = v6;
  uint64_t v25 = v7;
  char v26 = v8;
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for List();
  type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
  uint64_t WitnessTable = swift_getWitnessTable();
  lazy protocol witness table accessor for type CheckmarkToggleStyle and conformance CheckmarkToggleStyle();
  View.toggleStyle<A>(_:)((uint64_t)&v12, v9, (uint64_t)&type metadata for CheckmarkToggleStyle, WitnessTable);
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  outlined consume of Environment<Bool>.Content(v1, 0);
  outlined consume of Environment<HoverEffectContext?>.Content(v2, 0, 0, 0, 0);
  outlined consume of Environment<Bool>.Content(v3, v4);
  return outlined consume of Environment<Bool>.Content(v5, v6);
}

uint64_t ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = *(void *)(a3 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12(v9);
  uint64_t v14 = a2[2];
  uint64_t v13 = a2[3];
  uint64_t v23 = a4;
  uint64_t v24 = v14;
  uint64_t v35 = v14;
  uint64_t v36 = v13;
  uint64_t v16 = a2[4];
  uint64_t v15 = a2[5];
  uint64_t v37 = a3;
  uint64_t v38 = v16;
  uint64_t v39 = v15;
  uint64_t v40 = a4;
  uint64_t v41 = v11;
  uint64_t v27 = v14;
  uint64_t v28 = v13;
  uint64_t v29 = a3;
  uint64_t v30 = v16;
  uint64_t v31 = v15;
  uint64_t v32 = a4;
  uint64_t v17 = a4;
  uint64_t v33 = v11;
  uint64_t v34 = v5;
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v54 = v17;
  uint64_t v55 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  uint64_t v52 = WitnessTable;
  uint64_t v53 = v20;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v51 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v49 = v20;
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v42 = &type metadata for TextPlatformItemListFlags;
  uint64_t v43 = v18;
  uint64_t v44 = v24;
  uint64_t v45 = &protocol witness table for TextPlatformItemListFlags;
  uint64_t v46 = v21;
  uint64_t v47 = v16;
  type metadata accessor for PlatformItemListReader();
  lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate();
  StaticIf<>.init(_:then:else:)();
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, a3);
}

uint64_t closure #1 in ListPicker.resolvedList<A>(list:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a4);
}

uint64_t closure #2 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v49 = a7;
  uint64_t v44 = a6;
  uint64_t v48 = a4;
  uint64_t v42 = a3;
  uint64_t v50 = a2;
  uint64_t v47 = a1;
  uint64_t v51 = a9;
  uint64_t v43 = a5;
  uint64_t v46 = *(void *)(a5 - 8);
  uint64_t v10 = *(void *)(v46 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v71 = a8;
  uint64_t v72 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t v12 = a8;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  uint64_t v69 = WitnessTable;
  uint64_t v70 = v14;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v68 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v66 = v14;
  uint64_t v41 = v11;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v59 = &type metadata for TextPlatformItemListFlags;
  uint64_t v60 = v11;
  uint64_t v15 = v42;
  uint64_t v61 = v42;
  uint64_t v62 = &protocol witness table for TextPlatformItemListFlags;
  uint64_t v16 = v44;
  uint64_t v63 = v38;
  uint64_t v64 = v44;
  uint64_t v39 = type metadata accessor for PlatformItemListReader();
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v37 = (char *)&v36 - v21;
  uint64_t v22 = v46;
  uint64_t v23 = v45;
  uint64_t v24 = v43;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v46 + 16))(v45, v47, v43, v20);
  unint64_t v25 = (*(unsigned __int8 *)(v22 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v27 = v48;
  _OWORD v26[2] = v15;
  void v26[3] = v27;
  uint64_t v28 = v24;
  v26[4] = v24;
  void v26[5] = v16;
  uint64_t v29 = v49;
  v26[6] = v49;
  v26[7] = v12;
  uint64_t v30 = (char *)v26 + v25;
  uint64_t v31 = v28;
  (*(void (**)(char *, char *))(v22 + 32))(v30, v23);
  uint64_t v52 = v15;
  uint64_t v53 = v27;
  uint64_t v54 = v31;
  uint64_t v55 = v16;
  uint64_t v56 = v29;
  uint64_t v57 = v12;
  uint64_t v58 = v50;
  PlatformItemListReader.init(flags:content:source:)((uint64_t)partial apply for closure #1 in closure #2 in ListPicker.resolvedList<A>(list:), (uint64_t)v26, v18);
  uint64_t v32 = v37;
  uint64_t v33 = v39;
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
  v34(v18, v33);
  static ViewBuilder.buildExpression<A>(_:)(v32);
  return v34(v32, v33);
}

uint64_t closure #1 in closure #2 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v7 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v7 - 8);
  double v9 = (id *)((char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  uint64_t v34 = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v32 - v18;
  PlatformItemList.mergedContentItem.getter(a1, (uint64_t)v9);
  id v20 = *v9;
  id v21 = *v9;
  outlined destroy of PlatformItemList.Item((uint64_t)v9);
  if (v20)
  {
    id v22 = objc_msgSend(v21, sel_string);

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    unint64_t v25 = 0xE000000000000000;
  }
  v46[0] = v23;
  v46[1] = v25;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v26 = v36;
  View.navigationTitle<A>(_:)((uint64_t)v46, v34, v36, (uint64_t)v12);
  swift_bridgeObjectRelease();
  LOBYTE(v46[0]) = 1;
  uint64_t v44 = v26;
  uint64_t v45 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey);
  uint64_t v42 = WitnessTable;
  uint64_t v43 = v28;
  uint64_t v29 = swift_getWitnessTable();
  View.navigationBarTitleDisplayMode(_:)(v46, v10, v29, (uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v10);
  uint64_t v40 = v29;
  uint64_t v41 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v39 = v28;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v14 + 8);
  v30(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v30)(v19, v13);
}

uint64_t closure #2 in closure #2 in closure #1 in NavigationPickerButton.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t sub_18809FA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.dismiss.getter((uint64_t)v5);
  uint64_t v3 = v5[1];
  char v4 = v6;
  *(void *)a1 = v5[0];
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_18809FA68()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationLinkPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in NavigationLinkPickerStyle.Body.value.getter(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t type metadata completion function for NavigationPickerButton.DetailView()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationPickerButton.DetailView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 32);
  uint64_t v4 = *(void *)(a3 + 40);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v4 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = ((v7 + 16) & ~v7) + *(void *)(v6 + 64) + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  int v12 = (*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000;
  uint64_t v13 = *a2;
  *a1 = *a2;
  if ((v9 | v7) > 7 || v12 != 0 || ((v11 + (v10 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    a1 = (uint64_t *)(v13 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    uint64_t v18 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    uint64_t v20 = ((unint64_t)v19 + v7 + 8) & ~v7;
    id v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    uint64_t v30 = ((unint64_t)v18 + v7 + 8) & ~v7;
    uint64_t v31 = v4;
    swift_retain();
    swift_retain();
    v21(v30, v20, v5);
    unint64_t v22 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)a1 + v10) & v17, v22, v31);
    unint64_t v23 = (v11 + (((unint64_t)a1 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v11 + v22) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v25 = *(void *)v24;
    uint64_t v26 = *(void *)(v24 + 8);
    char v27 = *(unsigned char *)(v24 + 17);
    unsigned __int8 v28 = *(unsigned char *)(v24 + 16);
    outlined copy of Environment<DismissAction>.Content(*(void *)v24, v26, v28, v27);
    *(void *)unint64_t v23 = v25;
    *(void *)(v23 + 8) = v26;
    *(unsigned char *)(v23 + 16) = v28;
    *(unsigned char *)(v23 + 17) = v27;
  }
  return a1;
}

uint64_t destroy for NavigationPickerButton.DetailView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
  uint64_t v8 = *(void *)(*(void *)(a2 + 40) - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (*(void *)(v6 + 56) + a1 + *(unsigned __int8 *)(v8 + 80) + ((v7 + 16) & ~v7)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v10);
  unint64_t v11 = (*(void *)(v9 + 56) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  char v14 = *(unsigned char *)(v11 + 17);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 16);

  return outlined consume of Environment<DismissAction>.Content(v12, v13, v15, v14);
}

void *initializeWithCopy for NavigationPickerButton.DetailView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v10 = *(void *)(v8 - 8) + 16;
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v12 = ((unint64_t)v6 + v11 + 8) & ~v11;
  uint64_t v13 = ((unint64_t)v7 + v11 + 8) & ~v11;
  swift_retain();
  swift_retain();
  v9(v12, v13, v8);
  uint64_t v14 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = ((v11 + 16) & ~v11) + *(void *)(v10 + 48) + v16;
  unint64_t v18 = ((unint64_t)a1 + v17) & ~v16;
  unint64_t v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(void *)(v22 + 8);
  LOBYTE(v15) = *(unsigned char *)(v22 + 17);
  LOBYTE(v8) = *(unsigned char *)(v22 + 16);
  outlined copy of Environment<DismissAction>.Content(*(void *)v22, v24, v8, v15);
  *(void *)unint64_t v21 = v23;
  *(void *)(v21 + 8) = v24;
  *(unsigned char *)(v21 + 16) = v8;
  *(unsigned char *)(v21 + 17) = v15;
  return a1;
}

void *assignWithCopy for NavigationPickerButton.DetailView(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = *(void *)(v9 + 40);
  uint64_t v12 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((v10 + 16) & ~v10) + v11 + v14;
  unint64_t v16 = ((unint64_t)a1 + v15) & ~v14;
  unint64_t v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 40) + 7;
  unint64_t v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  uint64_t v22 = *(void *)(v20 + 8);
  LOBYTE(v13) = *(unsigned char *)(v20 + 17);
  LOBYTE(v6) = *(unsigned char *)(v20 + 16);
  outlined copy of Environment<DismissAction>.Content(*(void *)v20, v22, v6, v13);
  uint64_t v23 = *(void *)v19;
  uint64_t v24 = *(void *)(v19 + 8);
  char v25 = *(unsigned char *)(v19 + 17);
  *(void *)unint64_t v19 = v21;
  *(void *)(v19 + 8) = v22;
  uint64_t v26 = *(unsigned __int8 *)(v19 + 16);
  *(unsigned char *)(v19 + 16) = v6;
  *(unsigned char *)(v19 + 17) = v13;
  outlined consume of Environment<DismissAction>.Content(v23, v24, v26, v25);
  return a1;
}

void *initializeWithTake for NavigationPickerButton.DetailView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + v10 + 8) & ~v10, ((unint64_t)v7 + v10 + 8) & ~v10);
  uint64_t v11 = *(void *)(v9 + 32);
  uint64_t v12 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((v10 + 16) & ~v10) + v11 + v14;
  unint64_t v16 = ((unint64_t)a1 + v15) & ~v14;
  unint64_t v17 = ((unint64_t)a2 + v15) & ~v14;
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 32) + 7;
  unint64_t v19 = (v18 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v18 + v17) & 0xFFFFFFFFFFFFFFF8;
  __int16 v21 = *(_WORD *)(v20 + 16);
  *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  *(_WORD *)(v19 + 16) = v21;
  return a1;
}

void *assignWithTake for NavigationPickerButton.DetailView(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = *(void *)(*(void *)(a3 + 40) - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((v10 + 16) & ~v10) + *(void *)(v9 + 24) + v13;
  unint64_t v15 = ((unint64_t)a1 + v14) & ~v13;
  unint64_t v16 = ((unint64_t)a2 + v14) & ~v13;
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(v15, v16);
  uint64_t v17 = *(void *)(v12 + 24) + 7;
  unint64_t v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  char v20 = *(unsigned char *)(v19 + 16);
  char v21 = *(unsigned char *)(v19 + 17);
  uint64_t v22 = *(void *)v18;
  uint64_t v23 = *(void *)(v18 + 8);
  char v24 = *(unsigned char *)(v18 + 17);
  *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  uint64_t v25 = *(unsigned __int8 *)(v18 + 16);
  *(unsigned char *)(v18 + 16) = v20;
  *(unsigned char *)(v18 + 17) = v21;
  outlined consume of Environment<DismissAction>.Content(v22, v23, v25, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPickerButton.DetailView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(a3 + 40);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= v6) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64) + v11;
  if (v12 < a2)
  {
    unint64_t v14 = ((*(void *)(*(void *)(v7 - 8) + 64) + (v13 & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
    unsigned int v15 = (a2 - v12 + 0xFFFF) >> (8 * v14);
    if (v14 <= 3) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      LODWORD(v17) = 4;
    }
    else {
      LODWORD(v17) = 2;
    }
    if (v16 < 0x100) {
      LODWORD(v17) = 1;
    }
    if (v16 >= 2) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *((unsigned __int8 *)a1 + v14);
        if (!*((unsigned char *)a1 + v14)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)((char *)a1 + v14);
        if (*(unsigned __int16 *)((char *)a1 + v14)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880A05E8);
      case 4:
        int v18 = *(_DWORD *)((char *)a1 + v14);
        if (!v18) {
          break;
        }
LABEL_25:
        int v20 = (v18 - 1) << (8 * v14);
        if (v14 <= 3)
        {
          int v21 = *a1;
        }
        else
        {
          int v20 = 0;
          int v21 = *(_DWORD *)a1;
        }
        return v12 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if (v6 < v9) {
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v13) & ~v11, v9, v7);
  }
  uint64_t v22 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v22 + v10 + 8) & ~v10);
  }
  unint64_t v23 = *v22;
  if (v23 >= 0xFFFFFFFF) {
    LODWORD(v23) = -1;
  }
  return (v23 + 1);
}

void storeEnumTagSinglePayload for NavigationPickerButton.DetailView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 40);
  uint64_t v9 = *(void *)(v8 - 8);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v11 = *(void *)(v8 - 8);
  unsigned int v12 = *(_DWORD *)(v9 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  if (v12 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v9 + 84);
  }
  size_t v17 = ((v13 + 16) & ~v13) + *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  size_t v18 = v17 + v14;
  size_t v19 = ((v15 + ((v17 + v14) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
  char v20 = 8 * v19;
  if (v16 >= a3)
  {
    int v24 = 0;
    if (v16 >= a2)
    {
LABEL_20:
      uint64_t v25 = ~v14;
      switch(v24)
      {
        case 1:
          a1[v19] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v19] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_64;
        case 4:
          *(_DWORD *)&a1[v19] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v10 >= v12)
            {
              if (v10 >= a2)
              {
                uint64_t v33 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v35 = *(void (**)(unint64_t))(v6 + 56);
                  v35(((unint64_t)v33 + v13 + 8) & ~v13);
                }
                else
                {
                  if ((a2 & 0x80000000) != 0) {
                    uint64_t v34 = a2 ^ 0x80000000;
                  }
                  else {
                    uint64_t v34 = a2 - 1;
                  }
                  void *v33 = v34;
                }
              }
              else
              {
                if (v17 <= 3) {
                  int v30 = ~(-1 << (8 * v17));
                }
                else {
                  int v30 = -1;
                }
                if (v17)
                {
                  int v31 = v30 & (~v10 + a2);
                  if (v17 <= 3) {
                    int v32 = v17;
                  }
                  else {
                    int v32 = 4;
                  }
                  bzero(a1, v17);
                  switch(v32)
                  {
                    case 2:
                      *(_WORD *)a1 = v31;
                      break;
                    case 3:
                      *(_WORD *)a1 = v31;
                      a1[2] = BYTE2(v31);
                      break;
                    case 4:
                      *(_DWORD *)a1 = v31;
                      break;
                    default:
                      *a1 = v31;
                      break;
                  }
                }
              }
            }
            else
            {
              uint64_t v29 = *(void (**)(unint64_t))(v11 + 56);
              v29((unint64_t)&a1[v18] & v25);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v21 = (a3 - v16 + 0xFFFF) >> v20;
    if (v19 <= 3) {
      unsigned int v22 = v21 + 1;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v22 >= 0x10000) {
      int v23 = 4;
    }
    else {
      int v23 = 2;
    }
    if (v22 < 0x100) {
      int v23 = 1;
    }
    if (v22 >= 2) {
      int v24 = v23;
    }
    else {
      int v24 = 0;
    }
    if (v16 >= a2) {
      goto LABEL_20;
    }
  }
  unsigned int v26 = ~v16 + a2;
  unsigned int v27 = v26 >> v20;
  bzero(a1, v19);
  if (v19 <= 3) {
    int v28 = v27 + 1;
  }
  else {
    int v28 = 1;
  }
  if (v19 > 3) {
    *(_DWORD *)a1 = v26;
  }
  else {
    *(_WORD *)a1 = v26;
  }
  switch(v24)
  {
    case 1:
      a1[v19] = v28;
      break;
    case 2:
      *(_WORD *)&a1[v19] = v28;
      break;
    case 3:
LABEL_64:
      __break(1u);
      JUMPOUT(0x1880A0958);
    case 4:
      *(_DWORD *)&a1[v19] = v28;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for ListPicker()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Binding();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListPicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v9 | 7;
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || ((v9 + 16) & ~v9) + *(void *)(v8 + 64) + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 56) & ~(v9 | 7)) > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v16 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    size_t v17 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = v17[3];
    void v16[3] = v18;
    _OWORD v16[4] = v17[4];
    (**(void (***)(void *, void *))(v18 - 8))(v16, v17);
    size_t v19 = (void *)v17[5];
    _OWORD v16[5] = v19;
    void v16[6] = v17[6];
    char v20 = (void *)(((unint64_t)v16 + v10 + 56) & ~v10);
    unsigned int v21 = (void *)(((unint64_t)v17 + v10 + 56) & ~v10);
    *char v20 = *v21;
    unsigned int v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v22 = *v23;
    uint64_t v24 = v9 + 8;
    uint64_t v25 = ((unint64_t)v22 + v9 + 8) & ~v9;
    unint64_t v26 = ((unint64_t)v23 + v24) & v15;
    unsigned int v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    id v28 = v19;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v27(v25, v26, v7);
  }
  return v4;
}

uint64_t destroy for ListPicker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  unint64_t v5 = (a1 + *(void *)(v4 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v5);

  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v10 + 80);
  swift_release();
  swift_release();
  uint64_t v8 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);

  return v8((v7 + ((((v5 + (v7 | 7) + 56) & ~(v7 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v7, v6);
}

uint64_t initializeWithCopy for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  uint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v9[3];
  void v8[3] = v10;
  void v8[4] = v9[4];
  (**(void (***)(void *, void *))(v10 - 8))(v8, v9);
  unsigned int v11 = (void *)v9[5];
  v8[5] = v11;
  v8[6] = v9[6];
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  uint64_t v15 = *(_DWORD *)(v13 + 80);
  unint64_t v16 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  size_t v17 = (void *)(((unint64_t)v9 + v15 + 56) & v16);
  uint64_t v18 = (void *)(((unint64_t)v8 + v15 + 56) & v16);
  *uint64_t v18 = *v17;
  size_t v19 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v20 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *size_t v19 = *v20;
  uint64_t v21 = ((unint64_t)v19 + v15 + 8) & ~v15;
  uint64_t v22 = ((unint64_t)v20 + v15 + 8) & ~v15;
  id v23 = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v14(v21, v22, v12);
  return a1;
}

uint64_t assignWithCopy for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  uint64_t v8 = (uint64_t *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (uint64_t *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v8, v9);
  uint64_t v10 = (void *)v9[5];
  unsigned int v11 = (void *)v8[5];
  v8[5] = (uint64_t)v10;
  id v12 = v10;

  v8[6] = v9[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  unint64_t v16 = (unint64_t)v8 + v15 + 56;
  unint64_t v17 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (unint64_t)v9 + v15 + 56;
  uint64_t v19 = (v18 & v17) + 15;
  *(void *)(v16 & v17) = *(void *)(v18 & v17);
  uint64_t v20 = (v16 & v17) + 15;
  swift_retain();
  swift_release();
  v20 &= 0xFFFFFFFFFFFFFFF8;
  v19 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v20 = *(void *)v19;
  swift_retain();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24))((v15 + 8 + v20) & ~v15, (v15 + 8 + v19) & ~v15, v13);
  return a1;
}

uint64_t initializeWithTake for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)(v9 + 16);
  long long v10 = *(_OWORD *)(v9 + 32);
  long long v12 = *(_OWORD *)v9;
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(_OWORD *)(v8 + 16) = v11;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v12;
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  unint64_t v15 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (void *)((v14 + 56 + v8) & v15);
  unint64_t v17 = (void *)((v14 + 56 + v9) & v15);
  void *v16 = *v17;
  unint64_t v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))(((unint64_t)v18 + v14 + 8) & ~v14, ((unint64_t)v19 + v14 + 8) & ~v14);
  return a1;
}

uint64_t assignWithTake for ListPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v8);
  long long v10 = *(_OWORD *)v9;
  long long v11 = *(_OWORD *)(v9 + 16);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(_OWORD *)unint64_t v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  long long v12 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);

  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  unint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (void *)((v15 + 56 + v8) & v16);
  unint64_t v18 = v15 + 56 + v9;
  uint64_t v19 = (v18 & v16) + 15;
  *unint64_t v17 = *(void *)(v18 & v16);
  swift_release();
  uint64_t v20 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  v19 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v20 = *(void *)v19;
  swift_release();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 40))(((unint64_t)v20 + v15 + 8) & ~v15, (v15 + 8 + v19) & ~v15, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListPicker(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  if (v4 <= v8) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v3 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v7 | 7;
  if (a2 <= v9) {
    goto LABEL_28;
  }
  unint64_t v11 = ((v7 + 16) & ~v7) + *(void *)(v5 + 64) + ((v7 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 56) & ~v10);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((a2 - v9 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v4 >= v8) {
        return (*(uint64_t (**)(void))(v3 + 48))();
      }
      unint64_t v19 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v5 + 48))((v7
      }
                                                                      + ((((v19 + v10 + 56) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + 8) & ~v7);
      unint64_t v20 = *(void *)(v19 + 24);
      if (v20 >= 0xFFFFFFFF) {
        LODWORD(v20) = -1;
      }
      return (v20 + 1);
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_18:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 <= 3) {
      int v17 = ((v7 + 16) & ~v7) + *(_DWORD *)(v5 + 64) + ((v7 + ((v6 + 7) & 0xFFFFFFF8) + 56) & ~v10);
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v9 + (v18 | v16) + 1;
}

void storeEnumTagSinglePayload for ListPicker(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84) <= 0x7FFFFFFFu) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v6 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  size_t v12 = ((v9 + 16) & ~v9) + *(void *)(v7 + 64);
  size_t v13 = v12 + ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 56) & ~(v9 | 7));
  if (a3 > v11)
  {
    if (v13 <= 3)
    {
      unsigned int v17 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v11 < a2)
  {
    unsigned int v15 = ~v11 + a2;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v13)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        return;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_61:
      __break(1u);
      JUMPOUT(0x1880A1994);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v6 >= v10)
        {
          unint64_t v20 = *(void (**)(char *))(v5 + 56);
          v20(a1);
        }
        else
        {
          unint64_t v19 = (unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((v11 & 0x80000000) != 0)
          {
            uint64_t v21 = (unsigned char *)((v19 + (v9 | 7) + 56) & ~(v9 | 7));
            if (v10 >= a2)
            {
              uint64_t v25 = *(void (**)(unint64_t))(v7 + 56);
              v25((v9 + ((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9);
            }
            else
            {
              if (v12 <= 3) {
                int v22 = ~(-1 << (8 * v12));
              }
              else {
                int v22 = -1;
              }
              if (v12)
              {
                int v23 = v22 & (~v10 + a2);
                if (v12 <= 3) {
                  int v24 = v12;
                }
                else {
                  int v24 = 4;
                }
                bzero(v21, v12);
                switch(v24)
                {
                  case 2:
                    *(_WORD *)uint64_t v21 = v23;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v21 = v23;
                    uint64_t v21[2] = BYTE2(v23);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v21 = v23;
                    break;
                  default:
                    *uint64_t v21 = v23;
                    break;
                }
              }
            }
          }
          else if ((a2 & 0x80000000) != 0)
          {
            *(_OWORD *)(v19 + 40) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 8) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 24) = a2 - 1;
          }
        }
      }
      return;
  }
}

_UNKNOWN **sub_1880A19CC()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

uint64_t associated type witness table accessor for View.Body : View in ListPicker<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationPickerButton<A, B, C>.DetailView<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1880A1A68()
{
  uint64_t v1 = *(void *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 40);
  unint64_t v2 = (int *)(type metadata accessor for NavigationPickerButton.DetailView() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  uint64_t v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v4 + 32), v1);
  (*(void (**)(uint64_t))(*(void *)(v6 - 8) + 8))(v3 + v2[23]);
  outlined consume of Environment<DismissAction>.Content(*(void *)(v3 + v2[24]), *(void *)(v3 + v2[24] + 8), *(unsigned __int8 *)(v3 + v2[24] + 16), *(unsigned char *)(v3 + v2[24] + 17));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationPickerButton.DetailView.body.getter(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = v1[9];
  uint64_t v11 = *(void *)(type metadata accessor for NavigationPickerButton.DetailView() - 8);
  return closure #1 in NavigationPickerButton.DetailView.body.getter(a1, (uint64_t)v1 + ((*(unsigned __int8 *)(v11 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v3, v4, v5, v6, v7, v8, v9, v10);
}

void type metadata accessor for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, &lazy cache variable for type metadata for ListStyleWriter<GroupedListStyle>, (uint64_t)&type metadata for GroupedListStyle, (uint64_t)&protocol witness table for GroupedListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate;
  if (!lazy protocol witness table cache variable for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListPickerStyleIsGroupedPredicate and conformance ListPickerStyleIsGroupedPredicate);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyFormStyleContext>, (uint64_t)&type metadata for AnyFormStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(255, &lazy cache variable for type metadata for ListStyleWriter<InsetGroupedListStyle>, (uint64_t)&type metadata for InsetGroupedListStyle, (uint64_t)&protocol witness table for InsetGroupedListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyFormStyleContext>, ListStyleWriter<InsetGroupedListStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyFormStyleContext>, (uint64_t)&type metadata for AnyFormStyleContext, MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

void type metadata accessor for _LabeledContentStyleModifier<AdaptiveLeadingTrailingLabeledContentStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for _PreferenceTransformModifier<AccessibilityAttachment.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticIf<ListPickerStyleIsGroupedPredicate, ListStyleWriter<GroupedListStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ListPicker.body.getter()
{
  return closure #1 in ListPicker.body.getter(*(void *)(v0 + 48));
}

uint64_t partial apply for closure #2 in ListPicker.body.getter()
{
  return closure #2 in ListPicker.body.getter();
}

uint64_t partial apply for closure #1 in ListPicker.resolvedList<A>(list:)()
{
  return partial apply for closure #2 in closure #1 in NavigationPickerButton.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in ListPicker.resolvedList<A>(list:));
}

uint64_t partial apply for closure #2 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in ListPicker.resolvedList<A>(list:)(v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

uint64_t sub_1880A2078()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in ListPicker.resolvedList<A>(list:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #2 in ListPicker.resolvedList<A>(list:)(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) - 8) + 80)), *(void *)(v2 + 32), *(void *)(v2 + 56), a2);
}

void *type metadata accessor for ListPickerStyleIsGroupedPredicate()
{
  return &unk_1ED45ED58;
}

uint64_t sub_1880A2170()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880A2208()
{
  return swift_getWitnessTable();
}

uint64_t specialized static ListPickerStyleIsGroupedPredicate.evaluate(inputs:)()
{
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    && (static Semantics.v4_4.getter(), (isLinkedOnOrAfter(_:)() & 1) == 0))
  {
    char v0 = 1;
  }
  else
  {
    static Semantics.v4.getter();
    char v0 = isLinkedOnOrAfter(_:)() ^ 1;
  }
  return v0 & 1;
}

uint64_t destroy for TableRowView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  int v2 = *(unsigned __int8 *)(a1 + 123);
  if (v2 == 2)
  {
    swift_release();
    if (*(void *)(a1 + 64))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v3 = a1 + 80;
    if (*(unsigned char *)(a1 + 120))
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  else if (v2 == 1)
  {
    swift_release();
    if (*(unsigned char *)(a1 + 96)) {
      goto LABEL_12;
    }
    uint64_t v3 = a1 + 56;
  }
  else
  {
    if (*(unsigned char *)(a1 + 123)) {
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + 72;
  }
  __swift_destroy_boxed_opaque_existential_1(v3);
LABEL_12:

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  int v10 = *(unsigned __int8 *)(a2 + 123);
  if (v10 == 2)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 64);
    swift_retain();
    if (v13)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v13;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
    }
    int v18 = (void *)(a1 + 80);
    unint64_t v19 = (void *)(a2 + 80);
    char v20 = *(unsigned char *)(a2 + 120);
    if (v20)
    {
      *int v18 = *v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v21 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 104) = v21;
      (**(void (***)(void *, void *))(v21 - 8))(v18, v19);
    }
    *(unsigned char *)(a1 + 120) = v20;
    *(_WORD *)(a1 + 121) = *(_WORD *)(a2 + 121);
  }
  else if (v10 == 1)
  {
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    int v11 = *(unsigned __int8 *)(a2 + 96);
    swift_retain();
    if (v11)
    {
      long long v17 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v17;
      *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
    }
    else
    {
      long long v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 80) = v12;
      (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 56, a2 + 56);
      *(unsigned char *)(a1 + 96) = 0;
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v14;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 96);
    *(void *)(a1 + 96) = v15;
    int v16 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    v16(a1 + 72, a2 + 72, v15);
  }
  *(unsigned char *)(a1 + 123) = v10;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TableRowView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(unsigned char *)(a1 + 40) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  if (a1 != a2)
  {
    outlined destroy of TableRowView.Storage(a1 + 48);
    int v16 = *(unsigned __int8 *)(a2 + 123);
    if (v16 == 2)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v19 = *(void *)(a2 + 64);
      swift_retain();
      if (v19)
      {
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v25 = *(_OWORD *)(a2 + 56);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(_OWORD *)(a1 + 56) = v25;
      }
      unint64_t v26 = (void *)(a1 + 80);
      unsigned int v27 = (void *)(a2 + 80);
      char v28 = *(unsigned char *)(a2 + 120);
      if (v28)
      {
        void *v26 = *v27;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v29 = *(void *)(a2 + 104);
        *(void *)(a1 + 104) = v29;
        *(void *)(a1 + 112) = *(void *)(a2 + 112);
        (**(void (***)(void *, void *))(v29 - 8))(v26, v27);
      }
      *(unsigned char *)(a1 + 120) = v28;
      *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
      *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
    }
    else if (v16 == 1)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      int v17 = *(unsigned __int8 *)(a2 + 96);
      swift_retain();
      if (v17)
      {
        long long v23 = *(_OWORD *)(a2 + 56);
        long long v24 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 81) = *(_OWORD *)(a2 + 81);
        *(_OWORD *)(a1 + 56) = v23;
        *(_OWORD *)(a1 + 72) = v24;
      }
      else
      {
        uint64_t v18 = *(void *)(a2 + 80);
        *(void *)(a1 + 80) = v18;
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 56, a2 + 56);
        *(unsigned char *)(a1 + 96) = 0;
      }
    }
    else
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      uint64_t v20 = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 56) = v20;
      uint64_t v21 = *(void *)(a2 + 96);
      *(void *)(a1 + 96) = v21;
      int v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v21 - 8);
      swift_bridgeObjectRetain();
      v22(a1 + 72, a2 + 72, v21);
    }
    *(unsigned char *)(a1 + 123) = v16;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of TableRowView.Storage(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for TableRowView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  char v11 = *((unsigned char *)a2 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of TableRowView.Storage(a1 + 48);
    long long v14 = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 96) = v14;
    *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
    long long v15 = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 64) = v15;
  }
  *(void *)(a1 + 128) = a2[16];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRowView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 128);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TableRowView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 128) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableRowView()
{
  return &type metadata for TableRowView;
}

uint64_t destroy for TableRowView.Storage(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 75);
  if (v2 >= 3) {
    unsigned int v2 = *(_DWORD *)a1 + 3;
  }
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      uint64_t result = swift_release();
      if (*(unsigned char *)(a1 + 48)) {
        return result;
      }
      uint64_t v4 = a1 + 8;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = a1 + 24;
    }
    return __swift_destroy_boxed_opaque_existential_1(v4);
  }
  swift_release();
  if (*(void *)(a1 + 16))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + 32;
  if ((*(unsigned char *)(a1 + 72) & 1) == 0) {
    return __swift_destroy_boxed_opaque_existential_1(v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 75);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a2 + 3;
  }
  if (v4 == 2)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v9 = (_OWORD *)(a1 + 8);
    uint64_t v10 = *(void *)(a2 + 16);
    swift_retain();
    if (v10)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *uint64_t v9 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
    }
    int v16 = (void *)(a1 + 32);
    int v17 = (void *)(a2 + 32);
    char v18 = *(unsigned char *)(a2 + 72);
    if (v18)
    {
      void *v16 = *v17;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v19 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 56) = v19;
      (**(void (***)(void *, void *))(v19 - 8))(v16, v17);
    }
    *(unsigned char *)(a1 + 72) = v18;
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    char v8 = 2;
  }
  else if (v4 == 1)
  {
    *(void *)a1 = *(void *)a2;
    char v5 = (_OWORD *)(a2 + 8);
    int v6 = *(unsigned __int8 *)(a2 + 48);
    swift_retain();
    if (v6)
    {
      long long v15 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *v5;
      *(_OWORD *)(a1 + 24) = v15;
      *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 32) = v7;
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      *(unsigned char *)(a1 + 48) = 0;
    }
    char v8 = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v11;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    uint64_t v12 = a2 + 24;
    uint64_t v13 = *(void *)(a2 + 48);
    *(void *)(a1 + 48) = v13;
    long long v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    v14(a1 + 24, v12, v13);
    char v8 = 0;
  }
  *(unsigned char *)(a1 + 75) = v8;
  return a1;
}

uint64_t assignWithCopy for TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 75);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a1 + 3;
  }
  if (v4 == 2)
  {
    swift_release();
    if (*(void *)(a1 + 16))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v5 = a1 + 32;
    if ((*(unsigned char *)(a1 + 72) & 1) == 0) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v4 != 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = a1 + 24;
      goto LABEL_13;
    }
    swift_release();
    if (!*(unsigned char *)(a1 + 48))
    {
      uint64_t v5 = a1 + 8;
LABEL_13:
      __swift_destroy_boxed_opaque_existential_1(v5);
    }
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 75);
  if (v6 >= 3) {
    unsigned int v6 = *(_DWORD *)a2 + 3;
  }
  if (v6 == 2)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
    swift_retain();
    if (v10)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v17;
    }
    char v18 = (void *)(a1 + 32);
    long long v19 = (void *)(a2 + 32);
    char v20 = *(unsigned char *)(a2 + 72);
    if (v20)
    {
      *char v18 = *v19;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v21 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v21;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(void *, void *))(v21 - 8))(v18, v19);
    }
    *(unsigned char *)(a1 + 72) = v20;
    *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
    *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
    char v9 = 2;
  }
  else if (v6 == 1)
  {
    *(void *)a1 = *(void *)a2;
    int v7 = *(unsigned __int8 *)(a2 + 48);
    swift_retain();
    if (v7)
    {
      long long v15 = *(_OWORD *)(a2 + 8);
      long long v16 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
      *(_OWORD *)(a1 + 8) = v15;
      *(_OWORD *)(a1 + 24) = v16;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 8, a2 + 8);
      *(unsigned char *)(a1 + 48) = 0;
    }
    char v9 = 1;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v11 = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(void *)(a1 + 8) = v11;
    uint64_t v12 = a2 + 24;
    uint64_t v13 = *(void *)(a2 + 48);
    *(void *)(a1 + 48) = v13;
    long long v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    v14(a1 + 24, v12, v13);
    char v9 = 0;
  }
  *(unsigned char *)(a1 + 75) = v9;
  return a1;
}

uint64_t assignWithTake for TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 75);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a1 + 3;
  }
  if (v4 == 2)
  {
    swift_release();
    if (*(void *)(a1 + 16))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v5 = a1 + 32;
    if ((*(unsigned char *)(a1 + 72) & 1) == 0) {
      goto LABEL_13;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (v4 != 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = a1 + 24;
      goto LABEL_13;
    }
    swift_release();
    if (!*(unsigned char *)(a1 + 48))
    {
      uint64_t v5 = a1 + 8;
LABEL_13:
      __swift_destroy_boxed_opaque_existential_1(v5);
    }
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 75);
  if (v6 >= 3) {
    unsigned int v6 = *(_DWORD *)a2 + 3;
  }
  if (v6 == 2)
  {
    long long v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
    *(_OWORD *)(a1 + 59) = *(_OWORD *)(a2 + 59);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  else if (v6 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    LOBYTE(v6) = 1;
  }
  else
  {
    LOBYTE(v6) = 0;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 75) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRowView.Storage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 76)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 75);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TableRowView.Storage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 60) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 76) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 76) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 75) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TableRowView.Storage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 75);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for TableRowView.Storage(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(_OWORD *)(result + 59) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 75) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TableRowView.Storage()
{
  return &type metadata for TableRowView.Storage;
}

uint64_t associated type witness table accessor for View.Body : View in TableRowView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized View.onDrop(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0(a1, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  if (v11[0])
  {
    swift_bridgeObjectRetain();
    outlined destroy of DropOntoConfiguration((uint64_t)v11);
  }
  else
  {
    _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  }
  v11[3] = &type metadata for DropConfigurationDelegate;
  v11[4] = &protocol witness table for DropConfigurationDelegate;
  v11[0] = swift_allocObject();
  _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0(a1, v11[0] + 16, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  outlined init with copy of TableColumnList((uint64_t)v11, (uint64_t)v10);
  uint64_t v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  outlined destroy of TableColumnCollection.Entry((uint64_t)&v7, (uint64_t (*)(void))type metadata accessor for DropDelegate?);
  outlined init with take of OptionalBinaryInteger(v10, (uint64_t)&v7);
  long long v5 = v8;
  *(_OWORD *)(a2 + 544) = v7;
  *(_OWORD *)(a2 + 560) = v5;
  *(void *)(a2 + 576) = v9;
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v2, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t TableRowView.expandButton(expanded:tinted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  type metadata accessor for Button<RotatingDisclosureIndicator>(0, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (_WORD *)((char *)v28 - v12);
  type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
  MEMORY[0x1F4188790](v14 - 8);
  long long v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  *(unsigned char *)(v17 + 32) = a3;
  *uint64_t v13 = 256;
  char v18 = (uint64_t (**)())((char *)v13 + *(int *)(v11 + 36));
  *char v18 = partial apply for closure #1 in TableRowView.expandButton(expanded:tinted:);
  v18[1] = (uint64_t (*)())v17;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  if (a2)
  {
    v28[1] = a1;
    v28[2] = a2;
    char v29 = a3 & 1;
    swift_retain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
    _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    uint64_t v20 = v19;
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](&v30, v20);
    swift_release();
    swift_release();
    swift_release();
    char v21 = v30;
  }
  else
  {
    char v21 = 0;
  }
  int v22 = (char *)v13 + *(int *)(v11 + 40);
  *int v22 = a4 & 1;
  v22[1] = v21;
  outlined init with copy of Button<RotatingDisclosureIndicator>((uint64_t)v13, (uint64_t)v16);
  outlined destroy of Button<RotatingDisclosureIndicator>((uint64_t)v13);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = swift_getKeyPath();
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v16, a5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  uint64_t v26 = a5 + *(int *)(v25 + 36);
  *(void *)uint64_t v26 = KeyPath;
  *(unsigned char *)(v26 + 8) = 0;
  *(void *)(v26 + 16) = v24;
  *(unsigned char *)(v26 + 24) = 0;
  return outlined destroy of TableColumnCollection.Entry((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
}

uint64_t closure #1 in TableRowView.expandButton(expanded:tinted:)(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    swift_retain();
    swift_retain();
    specialized static RotatingDisclosureIndicator.toggle(_:)();
    return outlined consume of Binding<NavigationSplitViewColumn>?(v3, a2);
  }
  return result;
}

void *TableRowView.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 128);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  double v4 = __src[0];
  double v5 = __src[1];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v60 = 0u;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  char v30 = LOBYTE(__src[0]);
  double v31 = __src[1];
  __int16 v29 = LOWORD(__src[2]);
  double v6 = __src[3];
  char v33 = LOBYTE(__src[4]);
  double v34 = __src[5];
  __int16 v32 = LOWORD(__src[6]);
  double v37 = __src[7];
  v59[1] = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v59[0] = v3;
  v47[0] = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  v40[0] = static HorizontalAlignment.center.getter();
  v40[1] = 0;
  char v41 = 1;
  uint64_t v35 = *(void *)&__src[1];
  uint64_t v36 = *(void *)&__src[0];
  closure #1 in TableRowView.body.getter(v1, *(uint64_t *)&__src[0], *(uint64_t *)&__src[1], SLOBYTE(__src[2]), (uint64_t)&v42, __src[0]);
  uint64_t v7 = *(void *)v1;
  char v8 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v2, *(unsigned char *)(v2 + 8));
  char v9 = specialized Environment.wrappedValue.getter(v7, v8);
  outlined consume of Environment<Bool>.Content(v7, v8);
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v40, (uint64_t)v43, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo);
  uint64_t v44 = KeyPath;
  BOOL v45 = (v9 & 1) == 0;
  char v46 = v9 & 1;
  outlined destroy of TableColumnCollection.Entry((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo);
  double v11 = v6;
  if (v4 == 0.0)
  {
    BOOL v12 = 1;
    uint64_t v13 = static Alignment.center.getter();
    uint64_t v15 = v17;
    double v16 = 0.0;
  }
  else
  {
    BOOL v12 = *(void *)&v5 == 0;
    swift_retain();
    if (v5 != 0.0) {
      swift_release();
    }
    uint64_t v13 = static Alignment.center.getter();
    uint64_t v15 = v14;
    swift_retain();
    swift_retain();
    double v16 = v5;
  }
  uint64_t v18 = swift_getKeyPath();
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v43, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab);
  int v48 = 0;
  uint64_t v49 = v18;
  char v50 = 0;
  uint64_t v51 = v13;
  uint64_t v52 = v15;
  uint64_t v38 = *(void *)&v4;
  double v53 = v4;
  double v54 = v16;
  BOOL v55 = v12;
  uint64_t v57 = 0;
  uint64_t v56 = 0;
  char v58 = -2;
  outlined destroy of TableColumnCollection.Entry((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab);
  if (v11 == 0.0)
  {
    double v20 = 0.0;
    double v19 = 0.0;
    double v21 = 0.0;
    double v22 = 0.0;
  }
  else
  {
    double v19 = v31;
    *(void *)&double v20 = v30 & 1;
    *(void *)&double v21 = v29 & 0x1FF;
    double v22 = MEMORY[0x1E4FBC860];
  }
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v47, (uint64_t)__src, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM);
  __src[38] = v11;
  __src[39] = v20;
  __src[40] = v19;
  __src[41] = v21;
  __src[42] = v22;
  memset(&__src[43], 0, 80);
  swift_retain();
  outlined destroy of TableColumnCollection.Entry((uint64_t)v47, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM);
  if (v37 == 0.0)
  {
    uint64_t v24 = 0;
    double v23 = 0.0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    double v23 = v34;
    uint64_t v24 = v33 & 1 | 0x100;
    uint64_t v25 = v32 & 0x1FF;
    uint64_t v26 = MEMORY[0x1E4FBC860];
  }
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)__src, (uint64_t)v59, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A);
  double v63 = v37;
  uint64_t v64 = v24;
  double v65 = v23;
  uint64_t v66 = v25;
  uint64_t v67 = v26;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  swift_retain();
  outlined destroy of TableColumnCollection.Entry((uint64_t)__src, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A);
  __src[0] = *(double *)(v2 + 128);
  uint64_t v27 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v27 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  specialized View.onDrop(_:)((uint64_t)v47, (uint64_t)__src);
  outlined consume of Binding<NavigationSplitViewColumn>?(v36, v35);
  swift_release();
  swift_release();
  outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(v38);
  _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v47, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  outlined destroy of TableColumnCollection.Entry((uint64_t)v59, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T);
  return memcpy(a1, __src, 0x248uLL);
}

uint64_t closure #1 in TableRowView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  outlined init with copy of TableRowView.Storage(a1 + 48, (uint64_t)&v82);
  if (v90)
  {
    if (v90 != 1)
    {
      uint64_t v41 = v82;
      uint64_t v42 = v83;
      uint64_t v43 = v84;
      uint64_t v44 = v85;
      char v45 = v88;
      int v46 = v89;
      *(_OWORD *)uint64_t v81 = v86;
      *(_OWORD *)&v81[16] = *(_OWORD *)v87;
      *(_OWORD *)&v81[25] = *(_OWORD *)&v87[9];
      long long v70 = (unint64_t)static HorizontalAlignment.center.getter();
      LOBYTE(v71) = 1;
      closure #2 in closure #1 in TableRowView.body.getter(a1, v46, v42, v43, v44, (uint64_t)v81, v45, v41, (uint64_t)&v71 + 8);
      outlined consume of Binding<[SwiftUIAnySortComparator]>?(v42, v43);
      swift_release();
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v48 = swift_getKeyPath();
      outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)&v70, (uint64_t)&v60, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>);
      *((void *)&v67 + 1) = KeyPath;
      LOBYTE(v68) = 0;
      *((void *)&v68 + 1) = v48;
      __int16 v69 = 0;
      outlined destroy of TableColumnCollection.Entry((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>);
      long long v78 = v67;
      long long v79 = v68;
      long long v74 = v63;
      long long v75 = v64;
      long long v76 = v65;
      long long v77 = v66;
      long long v70 = v60;
      long long v71 = *(_OWORD *)v61;
      __int16 v80 = v69;
      long long v72 = *(_OWORD *)&v61[16];
      long long v73 = v62;
      outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)&v70, a5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>);
      *(unsigned char *)(a5 + 162) = 1;
      outlined destroy of TableColumnCollection.Entry((uint64_t)&v70, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>);
      return outlined destroy of TableColumnCollection((uint64_t)v81);
    }
    uint64_t v12 = v82;
    outlined init with take of AccessibilityTableContext?((uint64_t)&v83, (uint64_t)&v70, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI25AccessibilityTableContextOSgMaTm_0);
    uint64_t v13 = *(void *)a1;
    char v14 = *(unsigned char *)(a1 + 8);
    outlined copy of Environment<Bool>.Content(v13, v14);
    char v15 = specialized Environment.wrappedValue.getter(v13, v14);
    outlined consume of Environment<Bool>.Content(v13, v14);
    if (v15)
    {
      _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0((uint64_t)&v70, (uint64_t)&v60, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      if (v61[24] == 255)
      {
        _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)&v60, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
        memset(v81, 0, 40);
        v81[40] = -1;
      }
      else
      {
        outlined init with copy of AccessibilityTableContext((uint64_t)&v60, (uint64_t)v59);
        if (v59[40] == 2)
        {
          *(void *)uint64_t v81 = *(void *)v59;
          *(void *)&v81[8] = 1;
          v81[40] = 2;
        }
        else
        {
          outlined init with copy of AccessibilityTableContext((uint64_t)&v60, (uint64_t)v81);
          outlined destroy of AccessibilityTableContext((uint64_t)v59);
        }
        outlined destroy of AccessibilityTableContext((uint64_t)&v60);
      }
    }
    else
    {
      _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0((uint64_t)&v70, (uint64_t)v81, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    memset(v59, 0, 40);
    v59[40] = -1;
    if (v81[40] == 255)
    {
      _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v81, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    else
    {
      outlined init with take of AccessibilityTableContext((uint64_t)v81, (uint64_t)&v60);
      _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v59, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      outlined init with take of AccessibilityTableContext((uint64_t)&v60, (uint64_t)v59);
    }
    long long v60 = *(_OWORD *)v59;
    *(_OWORD *)long long v61 = *(_OWORD *)&v59[16];
    *(_OWORD *)&v61[9] = *(_OWORD *)&v59[25];
    type metadata accessor for Button<RotatingDisclosureIndicator>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
    uint64_t v49 = swift_allocObject();
    *(unsigned char *)(v49 + 16) = 0;
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    swift_retain();
    *(void *)uint64_t v59 = Dictionary.init(minimumCapacity:)();
    static AccessibilityAttachment.properties(_:)();
    swift_bridgeObjectRelease();
    long long v50 = *(_OWORD *)v81;
    _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = v50;
    swift_retain();
    swift_release();
    _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityTraitSet>, MEMORY[0x1E4F40760], MEMORY[0x1E4FBBE00]);
    uint64_t v52 = swift_allocObject();
    AccessibilityTraitSet.init(traits:)();
    uint64_t v53 = *(void *)(v52 + 32);
    swift_setDeallocating();
    swift_deallocClassInstance();
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v51 + 16, 0, v53);
    swift_endAccess();
    swift_release();
    swift_release();
    uint64_t v54 = dword_1ED465FF8;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v51 + 16, v54 | (v54 << 32));
    swift_endAccess();
    swift_release();
    swift_release();
    if (v61[24] == 255) {
      goto LABEL_22;
    }
    uint64_t result = _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0((uint64_t)&v60, (uint64_t)v59, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    if (v59[40] != 255)
    {
      outlined init with take of AccessibilityTableContext((uint64_t)v59, (uint64_t)v81);
      swift_beginAccess();
      _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0((uint64_t)v81, (uint64_t)v58, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      swift_retain();
      swift_retain();
      specialized AccessibilityProperties.subscript.setter((uint64_t)v58);
      swift_endAccess();
      swift_release();
      swift_release();
      _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v81, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
LABEL_22:
      outlined destroy of AccessibilityTableCellModifier<AnyView>((uint64_t)&v60);
      swift_release();
      *(void *)a5 = v12;
      *(void *)(a5 + 8) = v51;
      *(void *)(a5 + 16) = v49;
      *(_OWORD *)(a5 + 24) = 0u;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_OWORD *)(a5 + 72) = 0u;
      *(void *)(a5 + 88) = 0;
      *(unsigned char *)(a5 + 96) = 1;
      *(unsigned char *)(a5 + 162) = 0;
      return _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)&v70, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    __break(1u);
  }
  else
  {
    uint64_t v16 = v82;
    uint64_t v56 = v83;
    char v55 = v84;
    outlined init with take of Any(&v85, &v60);
    uint64_t v57 = static VerticalAlignment.center.getter();
    uint64_t v17 = *(void *)a1;
    char v18 = *(unsigned char *)(a1 + 8);
    uint64_t v19 = v16;
    swift_bridgeObjectRetain();
    outlined copy of Environment<Bool>.Content(v17, v18);
    uint64_t v20 = a5;
    char v21 = specialized Environment.wrappedValue.getter(v17, v18);
    outlined consume of Environment<Bool>.Content(v17, v18);
    if (v21) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v23 = specialized Collection.prefix(_:)(v22, v19);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    *(void *)uint64_t v81 = v23;
    *(void *)&v81[8] = v24;
    *(void *)&v81[16] = v26;
    *(void *)&v81[24] = v28;
    outlined init with copy of Any((uint64_t)&v60, (uint64_t)v59);
    outlined init with copy of TableRowView(a1, (uint64_t)&v70);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v23;
    *(void *)(v30 + 24) = v25;
    *(void *)(v30 + 32) = v27;
    *(void *)(v30 + 40) = v29;
    outlined init with take of Any(v59, (_OWORD *)(v30 + 48));
    *(double *)(v30 + 80) = a6;
    *(void *)(v30 + 88) = v56;
    *(unsigned char *)(v30 + 96) = v55;
    *(void *)(v30 + 104) = a2;
    *(void *)(v30 + 112) = a3;
    *(unsigned char *)(v30 + 120) = a4;
    long long v31 = v77;
    *(_OWORD *)(v30 + 224) = v76;
    *(_OWORD *)(v30 + 240) = v31;
    *(void *)(v30 + 256) = v78;
    long long v32 = v73;
    *(_OWORD *)(v30 + 160) = v72;
    *(_OWORD *)(v30 + 176) = v32;
    long long v33 = v75;
    *(_OWORD *)(v30 + 192) = v74;
    *(_OWORD *)(v30 + 208) = v33;
    long long v34 = v71;
    *(_OWORD *)(v30 + 128) = v70;
    *(_OWORD *)(v30 + 144) = v34;
    swift_unknownObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
    type metadata accessor for ArraySlice<TableCellFormula>(0);
    type metadata accessor for UUID();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type ArraySlice<TableCellFormula> and conformance ArraySlice<A>, type metadata accessor for ArraySlice<TableCellFormula>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type TableCellFormula and conformance TableCellFormula, (void (*)(uint64_t))type metadata accessor for TableCellFormula);
    ForEach<>.init(_:content:)();
    swift_bridgeObjectRelease();
    uint64_t v35 = v74;
    long long v37 = v70;
    long long v36 = v71;
    long long v39 = v72;
    long long v38 = v73;
    *(void *)uint64_t v20 = v57;
    *(_OWORD *)(v20 + 8) = xmmword_18834BB90;
    *(_OWORD *)(v20 + 24) = v37;
    *(_OWORD *)(v20 + 40) = v36;
    *(_OWORD *)(v20 + 56) = v39;
    *(_OWORD *)(v20 + 72) = v38;
    *(void *)(v20 + 88) = v35;
    *(unsigned char *)(v20 + 96) = 0;
    *(unsigned char *)(v20 + 162) = 0;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
  }
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if ((uint64_t)v3 >= result) {
      unint64_t v4 = result;
    }
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v3 >= v5)
    {
      type metadata accessor for TableCellFormula();
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in TableRowView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  LODWORD(v128) = a7;
  uint64_t v129 = a5;
  uint64_t v130 = a6;
  uint64_t v139 = a4;
  uint64_t v143 = a3;
  uint64_t v122 = a2;
  uint64_t v136 = a8;
  type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v133 = (uint64_t *)((char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>(0);
  uint64_t v131 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v134 = (uint64_t)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>(0);
  uint64_t v132 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v124 = (char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v135 = (uint64_t)&v115 - v20;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v117 = (char *)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UUID?, UUID?)();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v140 = (uint64_t)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v115 - v28;
  type metadata accessor for UUID?(0);
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v116 = (uint64_t)&v115 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v137 = (char *)&v115 - v33;
  MEMORY[0x1F4188790](v34);
  uint64_t v138 = (char *)&v115 - v35;
  MEMORY[0x1F4188790](v36);
  uint64_t v118 = (char *)&v115 - v37;
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (char *)&v115 - v39;
  double v42 = MEMORY[0x1F4188790](v41);
  uint64_t v44 = (char *)&v115 - v43;
  uint64_t v45 = v22 + 16;
  long long v141 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  uint64_t v142 = a1;
  v141((char *)&v115 - v43, a1, v21, v42);
  uint64_t v46 = v22 + 56;
  uint64_t v47 = *(char **)(v22 + 56);
  uint64_t v48 = 1;
  uint64_t result = ((uint64_t (*)(char *, void, uint64_t, uint64_t))v47)(v44, 0, 1, v21);
  uint64_t v139 = (unint64_t)v139 >> 1;
  uint64_t v123 = v22;
  if (v139 != v143)
  {
    uint64_t v127 = v29;
    if (v139 <= v143)
    {
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v50 = type metadata accessor for TableCellFormula();
    ((void (*)(char *, uint64_t, uint64_t))v141)(v40, v122 + *(void *)(*(void *)(v50 - 8) + 72) * v143, v21);
    uint64_t v48 = 0;
    uint64_t v22 = v123;
    uint64_t v29 = v127;
  }
  uint64_t v125 = v46;
  uint64_t v126 = v45;
  uint64_t v127 = v47;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v47)(v40, v48, 1, v21);
  uint64_t v51 = (uint64_t)&v29[*(int *)(v25 + 48)];
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v44, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for UUID?);
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v40, v51, (uint64_t (*)(void))type metadata accessor for UUID?);
  uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  unsigned int v53 = v52(v29, 1, v21);
  uint64_t v121 = v25;
  uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v52;
  if (v53 == 1)
  {
    outlined destroy of TableColumnCollection.Entry((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for UUID?);
    outlined destroy of TableColumnCollection.Entry((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for UUID?);
    unsigned int v54 = v52((char *)v51, 1, v21);
    if (v54 == 1) {
      char v55 = (uint64_t (*)(void))type metadata accessor for UUID?;
    }
    else {
      char v55 = (uint64_t (*)(void))type metadata accessor for (UUID?, UUID?);
    }
    if (v54 == 1) {
      int v56 = -1;
    }
    else {
      int v56 = 0;
    }
    int v120 = v56;
  }
  else
  {
    uint64_t v57 = (uint64_t)v118;
    outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v29, (uint64_t)v118, (uint64_t (*)(void))type metadata accessor for UUID?);
    if (v52((char *)v51, 1, v21) == 1)
    {
      outlined destroy of TableColumnCollection.Entry((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for UUID?);
      outlined destroy of TableColumnCollection.Entry((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for UUID?);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v57, v21);
      int v120 = 0;
      char v55 = (uint64_t (*)(void))type metadata accessor for (UUID?, UUID?);
    }
    else
    {
      char v58 = v117;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v117, v51, v21);
      lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      int v120 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v59 = *(void (**)(char *, uint64_t))(v22 + 8);
      v59(v58, v21);
      char v55 = (uint64_t (*)(void))type metadata accessor for UUID?;
      outlined destroy of TableColumnCollection.Entry((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for UUID?);
      outlined destroy of TableColumnCollection.Entry((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for UUID?);
      v59(v118, v21);
    }
  }
  uint64_t v60 = (uint64_t)v137;
  outlined destroy of TableColumnCollection.Entry((uint64_t)v29, v55);
  uint64_t v61 = (uint64_t)v138;
  ((void (*)(char *, uint64_t, uint64_t))v141)(v138, v142, v21);
  uint64_t v62 = 1;
  long long v63 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v127;
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v127)(v61, 0, 1, v21);
  if (v139 == v143)
  {
LABEL_18:
    LODWORD(v141) = v128 & 1;
    uint64_t v139 = a12;
    LODWORD(v137) = a11;
    uint64_t v143 = a9;
    uint64_t v128 = a10;
    v63(v60, v62, 1, v21);
    uint64_t v66 = v140;
    uint64_t v67 = v140 + *(int *)(v121 + 48);
    outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v61, v140, (uint64_t (*)(void))type metadata accessor for UUID?);
    outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v60, v67, (uint64_t (*)(void))type metadata accessor for UUID?);
    long long v68 = v119;
    if (v119(v66, 1, v21) == 1)
    {
      outlined destroy of TableColumnCollection.Entry(v60, (uint64_t (*)(void))type metadata accessor for UUID?);
      outlined destroy of TableColumnCollection.Entry(v61, (uint64_t (*)(void))type metadata accessor for UUID?);
      int v69 = v68(v67, 1, v21);
      if (v69 == 1) {
        long long v70 = (uint64_t (*)(void))type metadata accessor for UUID?;
      }
      else {
        long long v70 = (uint64_t (*)(void))type metadata accessor for (UUID?, UUID?);
      }
      if (v69 == 1) {
        char v71 = -1;
      }
      else {
        char v71 = 0;
      }
      uint64_t v72 = (uint64_t)v124;
      uint64_t v73 = v142;
    }
    else
    {
      uint64_t v74 = v116;
      outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v66, v116, (uint64_t (*)(void))type metadata accessor for UUID?);
      int v75 = v68(v67, 1, v21);
      uint64_t v73 = v142;
      if (v75 == 1)
      {
        outlined destroy of TableColumnCollection.Entry(v60, (uint64_t (*)(void))type metadata accessor for UUID?);
        outlined destroy of TableColumnCollection.Entry(v61, (uint64_t (*)(void))type metadata accessor for UUID?);
        (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v74, v21);
        char v71 = 0;
        long long v70 = (uint64_t (*)(void))type metadata accessor for (UUID?, UUID?);
      }
      else
      {
        uint64_t v76 = v123;
        long long v77 = v117;
        (*(void (**)(char *, uint64_t, uint64_t))(v123 + 32))(v117, v67, v21);
        lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v78 = v74;
        char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v79 = *(void (**)(char *, uint64_t))(v76 + 8);
        v79(v77, v21);
        long long v70 = (uint64_t (*)(void))type metadata accessor for UUID?;
        outlined destroy of TableColumnCollection.Entry(v60, (uint64_t (*)(void))type metadata accessor for UUID?);
        outlined destroy of TableColumnCollection.Entry(v61, (uint64_t (*)(void))type metadata accessor for UUID?);
        v79((char *)v78, v21);
        uint64_t v66 = v140;
      }
      uint64_t v72 = (uint64_t)v124;
    }
    outlined destroy of TableColumnCollection.Entry(v66, v70);
    __int16 v80 = (int *)type metadata accessor for TableCellFormula();
    uint64_t v81 = (*(uint64_t (**)(uint64_t))(v73 + v80[9]))(v129);
    uint64_t v82 = static VerticalAlignment.center.getter();
    uint64_t v83 = (uint64_t)v133;
    *uint64_t v133 = v82;
    *(void *)(v83 + 8) = 0;
    *(unsigned char *)(v83 + 16) = 1;
    type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>();
    closure #1 in closure #1 in closure #1 in closure #1 in TableRowView.body.getter(v120 & 1, v81, v120 & 1, v130, (char)v141, v73, v71 & 1, v143, v83 + *(int *)(v84 + 44), v128, (char)v137);
    if (one-time initialization token for tableColumnContentPadding != -1) {
      swift_once();
    }
    EdgeInsets.init(_all:)();
    uint64_t v86 = v85;
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    uint64_t v93 = v134;
    outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v83, v134, (uint64_t (*)(void))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
    uint64_t v94 = v93 + *(int *)(v131 + 36);
    *(unsigned char *)uint64_t v94 = 2;
    *(void *)(v94 + 8) = v86;
    *(void *)(v94 + 16) = v88;
    *(void *)(v94 + 24) = v90;
    *(void *)(v94 + 32) = v92;
    *(unsigned char *)(v94 + 40) = 0;
    outlined destroy of TableColumnCollection.Entry(v83, (uint64_t (*)(void))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
    EdgeInsets.init(_all:)();
    uint64_t v96 = v95;
    uint64_t v98 = v97;
    uint64_t v100 = v99;
    uint64_t v102 = v101;
    outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v93, v72, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>);
    uint64_t v103 = v72 + *(int *)(v132 + 36);
    *(unsigned char *)uint64_t v103 = 8;
    *(void *)(v103 + 8) = v96;
    *(void *)(v103 + 16) = v98;
    *(void *)(v103 + 24) = v100;
    *(void *)(v103 + 32) = v102;
    *(unsigned char *)(v103 + 40) = 0;
    outlined destroy of TableColumnCollection.Entry(v93, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>);
    uint64_t v104 = v80[8];
    uint64_t v105 = v73 + v80[7];
    double v106 = *(double *)v105;
    uint64_t v107 = *(void *)(v105 + 8);
    double v109 = *(double *)(v105 + 16);
    double v108 = *(double *)(v105 + 24);
    char v110 = *(unsigned char *)(v105 + 32);
    if (*(unsigned char *)(v73 + v104))
    {
      if (*(unsigned char *)(v73 + v104) == 1)
      {
        uint64_t v111 = static Alignment.center.getter();
        if (v110) {
          goto LABEL_39;
        }
LABEL_37:
        char v113 = v107 & 1;
LABEL_40:
        uint64_t v114 = v135;
        specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v109, v110, v106, v113, v108, v110, 0.0, 1, v135, 0.0, 1, 0.0, 1, v111, v112);
        swift_release();
        outlined destroy of TableColumnCollection.Entry(v72, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
        return outlined init with take of AccessibilityTableContext?(v114, v136, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, (uint64_t)type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, MEMORY[0x1E4F3FE58], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>);
      }
      uint64_t v111 = static Alignment.trailing.getter();
      if ((v110 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v111 = static Alignment.leading.getter();
      if ((v110 & 1) == 0) {
        goto LABEL_37;
      }
    }
LABEL_39:
    double v108 = 0.0;
    double v106 = 0.0;
    double v109 = 0.0;
    char v113 = 1;
    goto LABEL_40;
  }
  if (v139 > v143)
  {
    uint64_t v64 = v139 - 1;
    uint64_t v65 = type metadata accessor for TableCellFormula();
    ((void (*)(uint64_t, uint64_t, uint64_t))v141)(v60, v122 + *(void *)(*(void *)(v65 - 8) + 72) * v64, v21);
    uint64_t v62 = 0;
    goto LABEL_18;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in TableRowView.body.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  uint64_t v58 = a8;
  int v61 = a7;
  int v70 = a3;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v57 = (uint64_t)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v56 = (uint64_t)&v55 - v20;
  type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?(0);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v69 = (uint64_t)&v55 - v25;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (a1)
  {
    static Alignment.center.getter();
    uint64_t v26 = 1;
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v27 = v78;
    uint64_t v28 = v79;
    uint64_t v29 = v80;
    uint64_t v30 = v81;
    uint64_t v31 = v82;
    uint64_t v32 = v83;
  }
  uint64_t v62 = v32;
  uint64_t v63 = v31;
  uint64_t v64 = v30;
  uint64_t v65 = v29;
  uint64_t v66 = v28;
  uint64_t v67 = v27;
  uint64_t v68 = v26;
  uint64_t v33 = (uint64_t *)(a6 + *(int *)(type metadata accessor for TableCellFormula() + 40));
  uint64_t v34 = *v33;
  char v35 = *((unsigned char *)v33 + 8);
  memset(v75, 0, 40);
  v75[40] = -1;
  if ((a5 & 1) == 0 && (v35 & 1) == 0)
  {
    _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v75, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    *(void *)int v75 = a4;
    *(void *)&v75[8] = v34;
    v75[40] = 1;
  }
  long long v76 = *(_OWORD *)v75;
  *(_OWORD *)long long v77 = *(_OWORD *)&v75[16];
  *(_OWORD *)&v77[9] = *(_OWORD *)&v75[25];
  type metadata accessor for Button<RotatingDisclosureIndicator>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v36 = swift_allocObject();
  *(unsigned char *)(v36 + 16) = 0;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  swift_retain();
  v72[0] = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  long long v37 = *(_OWORD *)v75;
  _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = v37;
  swift_retain();
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  uint64_t v39 = v74;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v38 + 16, 0, v39);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v40 = dword_1ED466020;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v38 + 16, v40 | (v40 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  if (v77[24] != 255)
  {
    uint64_t result = _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0((uint64_t)&v76, (uint64_t)v72, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    if (v73 == 255)
    {
      __break(1u);
      return result;
    }
    outlined init with take of AccessibilityTableContext((uint64_t)v72, (uint64_t)v75);
    swift_beginAccess();
    _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0((uint64_t)v75, (uint64_t)v71, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    swift_retain();
    swift_retain();
    specialized AccessibilityProperties.subscript.setter((uint64_t)v71);
    swift_endAccess();
    swift_release();
    swift_release();
    _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v75, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
  int v59 = a1;
  uint64_t v60 = a2;
  outlined destroy of TableColumnCollection.Entry((uint64_t)&v76, (uint64_t (*)(void))type metadata accessor for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>);
  if ((v61 & 1) != 0 && a10)
  {
    uint64_t v42 = v58;
    outlined copy of Binding<NavigationSplitViewColumn>?(v58, a10);
    swift_retain();
    swift_retain();
    uint64_t v43 = v56;
    TableRowView.expandButton(expanded:tinted:)(v42, a10, a11, 1, v56);
    outlined consume of Binding<NavigationSplitViewColumn>?(v42, a10);
    uint64_t v44 = v57;
    outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v43, v57, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    *(void *)uint64_t v23 = 0;
    v23[8] = 1;
    type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)();
    outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v44, (uint64_t)&v23[*(int *)(v45 + 48)], (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    swift_release();
    swift_release();
    outlined destroy of TableColumnCollection.Entry(v43, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    outlined destroy of TableColumnCollection.Entry(v44, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>(0);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v23, 0, 1, v46);
    uint64_t v47 = v69;
    outlined init with take of _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?((uint64_t)v23, v69, (uint64_t (*)(void))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  }
  else
  {
    type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>(0);
    uint64_t v47 = v69;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v69, 1, 1, v48);
  }
  uint64_t v49 = v68;
  char v50 = v70 & 1;
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(v47, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = v49;
  uint64_t v51 = v66;
  *(void *)(a9 + 16) = v67;
  *(void *)(a9 + 24) = v51;
  uint64_t v52 = v64;
  *(void *)(a9 + 32) = v65;
  *(void *)(a9 + 40) = v52;
  uint64_t v53 = v62;
  *(void *)(a9 + 48) = v63;
  *(void *)(a9 + 56) = v53;
  *(unsigned char *)(a9 + 64) = (v59 & 1) == 0;
  *(void *)(a9 + 72) = v60;
  *(unsigned char *)(a9 + 80) = v50;
  *(void *)(a9 + 88) = v38;
  *(void *)(a9 + 96) = v36;
  type metadata accessor for (ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)();
  outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo((uint64_t)v23, a9 + *(int *)(v54 + 64), (uint64_t (*)(void))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined destroy of TableColumnCollection.Entry(v47, (uint64_t (*)(void))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  outlined destroy of TableColumnCollection.Entry((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?);
  swift_release();
  swift_release();
  return swift_release();
}

__n128 closure #2 in closure #1 in TableRowView.body.getter@<Q0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v16 = *(void *)(a1 + 16);
  char v17 = *(unsigned char *)(a1 + 24);
  outlined copy of Environment<Bool>.Content(v16, v17);
  int v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined consume of Environment<Bool>.Content(v16, v17);
  outlined init with copy of TableRowView(a1, (uint64_t)&v68);
  if (v18 == 2)
  {
    outlined destroy of TableRowView((uint64_t)&v68);
  }
  else
  {
    uint64_t v20 = v68;
    char v21 = v69;
    outlined copy of Environment<Bool>.Content(v68, v69);
    char v22 = specialized Environment.wrappedValue.getter(v20, v21);
    outlined consume of Environment<Bool>.Content(v20, v21);
    outlined destroy of TableRowView((uint64_t)&v68);
    if (v22 & 1) == 0 && (a2)
    {
      outlined init with copy of TableColumnCollection(a6, (uint64_t)v57);
      uint64_t v54 = a3;
      uint64_t v55 = a4;
      uint64_t v56 = a5;
      *(_WORD *)((char *)&v63 + 1) = *(_WORD *)(&a7 - 1) & 0x100;
      outlined init with copy of TableHeaderView((uint64_t)&v54, (uint64_t)&v68);
      char v76 = 0;
      outlined copy of Binding<[SwiftUIAnySortComparator]>?(a3, a4);
      outlined destroy of TableHeaderView((uint64_t)&v54);
      outlined init with take of _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?((uint64_t)&v68, a9, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?);
      return result;
    }
  }
  if (a8)
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v24 = swift_getKeyPath();
    uint64_t v25 = swift_getKeyPath();
    uint64_t v68 = KeyPath;
    char v69 = 0;
    uint64_t v70 = v24;
    char v71 = 0;
    uint64_t v72 = v25;
    char v73 = 0;
    uint64_t v74 = a8;
    __int16 v75 = a7 & 1;
    outlined init with copy of TableColumnCollection(a6, (uint64_t)&v52);
    uint64_t v26 = swift_allocObject();
    long long v27 = v53[0];
    *(_OWORD *)(v26 + 16) = v52;
    *(_OWORD *)(v26 + 32) = v27;
    *(_OWORD *)(v26 + 41) = *(_OWORD *)((char *)v53 + 9);
    *(void *)(v26 + 64) = a3;
    *(void *)(v26 + 72) = a4;
    *(void *)(v26 + 80) = a5;
    swift_retain();
    outlined copy of Binding<[SwiftUIAnySortComparator]>?(a3, a4);
    type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur(&lazy protocol witness table cache variable for type ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (void (*)(void))lazy protocol witness table accessor for type TableSectionHeaderView and conformance TableSectionHeaderView);
    swift_retain();
    View.onTapGesture(count:perform:)();
    swift_release();
    uint64_t v28 = v70;
    LOBYTE(KeyPath) = v71;
    uint64_t v29 = v72;
    char v30 = v73;
    outlined consume of Environment<Bool>.Content(v68, v69);
    outlined consume of Environment<Bool>.Content(v28, KeyPath);
    outlined consume of Environment<Bool>.Content(v29, v30);
    swift_release();
    uint64_t v31 = v54;
    char v32 = v55;
    uint64_t v33 = v56;
    char v34 = v57[0];
    uint64_t v48 = v58;
    char v47 = v59;
    uint64_t v46 = v60;
    char v44 = v62;
    char v45 = v61;
    __n128 v51 = v64;
    uint64_t v42 = v65;
    uint64_t v43 = v63;
    uint64_t v41 = v66;
    int v40 = v67;
    uint64_t v35 = *(void *)a1;
    LOBYTE(KeyPath) = *(unsigned char *)(a1 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a1, KeyPath);
    LOBYTE(v29) = specialized Environment.wrappedValue.getter(v35, KeyPath);
    outlined consume of Environment<Bool>.Content(v35, KeyPath);
    outlined init with copy of TableRowView(a1, (uint64_t)&v68);
    if (v29)
    {
      swift_release();
      outlined destroy of TableRowView((uint64_t)&v68);
      LOBYTE(v36) = 0;
    }
    else
    {
      uint64_t v37 = v72;
      char v38 = v73;
      outlined copy of Environment<Bool>.Content(v72, v73);
      int v39 = specialized Environment.wrappedValue.getter(v37, v38);
      swift_release();
      outlined consume of Environment<Bool>.Content(v37, v38);
      outlined destroy of TableRowView((uint64_t)&v68);
      unsigned int v36 = a2 | ((v39 & 0x10000u) >> 16);
    }
    *(void *)a9 = v31;
    *(unsigned char *)(a9 + 8) = v32;
    *(void *)(a9 + 16) = v33;
    *(unsigned char *)(a9 + 24) = v34;
    *(void *)(a9 + 32) = v48;
    *(unsigned char *)(a9 + 40) = v47;
    *(void *)(a9 + 48) = v46;
    *(unsigned char *)(a9 + 56) = v45;
    *(unsigned char *)(a9 + 57) = v44;
    *(void *)(a9 + 64) = v43;
    __n128 result = v51;
    *(__n128 *)(a9 + 72) = v51;
    *(void *)(a9 + 88) = v42;
    *(void *)(a9 + 96) = v41;
    *(_DWORD *)(a9 + 104) = v40;
    *(unsigned char *)(a9 + 108) = v36 & 1;
    *(unsigned char *)(a9 + 109) = 1;
  }
  else
  {
    *(void *)(a9 + 96) = 0;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 80) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_DWORD *)(a9 + 104) = 0;
    *(_WORD *)(a9 + 108) = -256;
  }
  return result;
}

uint64_t closure #1 in closure #2 in closure #1 in TableRowView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TableColumnCollection.Entry?(0);
  MEMORY[0x1F4188790](v7 - 8);
  char v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Collection.first.getter((uint64_t)v9);
  uint64_t v10 = type metadata accessor for TableColumnCollection.Entry(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TableColumnCollection.Entry((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TableColumnCollection.Entry?);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    uint64_t v19 = 0;
  }
  else
  {
    _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0((uint64_t)&v9[*(int *)(v10 + 44)], (uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
    outlined destroy of TableColumnCollection.Entry((uint64_t)v9, type metadata accessor for TableColumnCollection.Entry);
    if (*((void *)&v13 + 1))
    {
      v20[4] = v16;
      void v20[5] = v17;
      v20[6] = v18;
      uint64_t v21 = v19;
      v20[0] = v12;
      v20[1] = v13;
      v20[2] = v14;
      void v20[3] = v15;
      sort(_:comparator:)(a2, a3, a4, (uint64_t)v20);
      return outlined destroy of SwiftUIAnySortComparator((uint64_t)v20);
    }
  }
  return _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for SwiftUIAnySortComparator?, (uint64_t)&type metadata for SwiftUIAnySortComparator);
}

uint64_t TableRowView.reuseIdentifier.getter()
{
  outlined init with copy of TableRowView.Storage(v0 + 48, (uint64_t)&v2);
  if (v6)
  {
    if (v6 == 1)
    {
      swift_release();
      _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1((uint64_t)v3, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
      return 1;
    }
    else
    {
      swift_release();
      outlined consume of Binding<[SwiftUIAnySortComparator]>?(v3[0], v3[1]);
      outlined destroy of TableColumnCollection((uint64_t)&v5);
      return 2;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
    return 0;
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TableRowView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

unint64_t instantiation function for generic protocol witness table for TableRowView(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type TableRowView and conformance TableRowView();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t outlined init with copy of TableRowView.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t TableRowForegroundStyleModifier.ChildEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v6 = *Value;
  if (*(unsigned char *)AGGraphGetValue())
  {
    swift_retain();
    uint64_t result = swift_retain();
  }
  else
  {
    swift_retain_n();
    swift_retain_n();
    ShapeStyle.copyStyle(name:in:foregroundStyle:)();
    swift_release();
    swift_release();
    uint64_t result = EnvironmentValues.defaultForegroundStyle.setter();
    uint64_t v3 = v6;
  }
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRowForegroundStyleModifier.ChildEnvironment@<X0>(void *a1@<X8>)
{
  return TableRowForegroundStyleModifier.ChildEnvironment.value.getter(a1);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance TableRowForegroundStyleModifier()
{
  return _ViewInputs.environment.setter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TableRowForegroundStyleModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TableRowForegroundStyleModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance TableRowForegroundStyleModifier()
{
}

uint64_t key path setter for EnvironmentValues.activeContextMenu : EnvironmentValues()
{
  return EnvironmentValues.activeContextMenu.setter();
}

void type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo()
{
  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Labe)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleW, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelSt();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Labe);
    }
  }
}

void type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>();
    type metadata accessor for ModifiedContent<Spacer, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, AccessibilityAttachmentModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>);
    }
  }
}

void type metadata accessor for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>()
{
  if (!lazy cache variable for type metadata for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>)
  {
    type metadata accessor for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>();
    lazy protocol witness table accessor for type ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>> and conformance <> ForEach<A, B, C>(&lazy protocol witness table cache variable for type ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>> and conformance <> ForEach<A, B, C>, (void (*)(uint64_t))type metadata accessor for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>);
    }
  }
}

void type metadata accessor for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>)
  {
    type metadata accessor for ArraySlice<TableCellFormula>(255);
    type metadata accessor for UUID();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type ArraySlice<TableCellFormula> and conformance ArraySlice<A>, type metadata accessor for ArraySlice<TableCellFormula>);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>);
    }
  }
}

void type metadata accessor for ArraySlice<TableCellFormula>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>(255);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>)
  {
    type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>();
    type metadata accessor for Button<RotatingDisclosureIndicator>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<TableHeaderLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle, (uint64_t)&type metadata for TableHeaderLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>);
    }
  }
}

void type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>()
{
  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>)
  {
    type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?(255);
    lazy protocol witness table accessor for type ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>> and conformance <> ForEach<A, B, C>(&lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>? and conformance <A> A?, type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?, (void (*)(void))lazy protocol witness table accessor for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>);
    }
  }
}

void type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for Button<RotatingDisclosureIndicator>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>);
    }
  }
}

void type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>)
  {
    type metadata accessor for ModifiedContent<Spacer, _FrameLayout>(255, &lazy cache variable for type metadata for _EndedGesture<TapGesture>, MEMORY[0x1E4F3F3C8], MEMORY[0x1E4F3F3C0], MEMORY[0x1E4F3F810]);
    lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>();
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<TapGesture>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>;
  if (!lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>)
  {
    type metadata accessor for ModifiedContent<Spacer, _FrameLayout>(255, &lazy cache variable for type metadata for _EndedGesture<TapGesture>, MEMORY[0x1E4F3F3C8], MEMORY[0x1E4F3F3C0], MEMORY[0x1E4F3F810]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EndedGesture<TapGesture> and conformance _EndedGesture<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>> and conformance <> ForEach<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>();
    lazy protocol witness table accessor for type TableHeaderView and conformance TableHeaderView();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (uint64_t (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur(&lazy protocol witness table cache variable for type ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, (void (*)(void))lazy protocol witness table accessor for type TableSectionHeaderView and conformance TableSectionHeaderView);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<TapGesture>> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<TapGesture>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableSectionHeaderView and conformance TableSectionHeaderView()
{
  unint64_t result = lazy protocol witness table cache variable for type TableSectionHeaderView and conformance TableSectionHeaderView;
  if (!lazy protocol witness table cache variable for type TableSectionHeaderView and conformance TableSectionHeaderView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableSectionHeaderView and conformance TableSectionHeaderView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle;
  if (!lazy protocol witness table cache variable for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelSt()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, L;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, L)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleW, (uint64_t (*)(uint64_t))type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, L);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>();
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AnyView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AnyView, AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, TableRowForegroundStyleModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<Spacer, _FrameLayout>(255, a2, MEMORY[0x1E4F41618], a3, MEMORY[0x1E4F3FBA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>>();
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<TableHeaderLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for Button<RotatingDisclosureIndicator>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<TableHeaderLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableHeaderLabelStyle and conformance TableHeaderLabelStyle, (uint64_t)&type metadata for TableHeaderLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TableHeaderLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

uint64_t sub_1880A78D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.activeContextMenu.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1880A791C()
{
  return EnvironmentValues.activeContextMenu.setter();
}

void type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab(uint64_t a1)
{
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Int?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>)
  {
    _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM(uint64_t a1)
{
}

void type metadata accessor for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>()
{
  if (!lazy cache variable for type metadata for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>)
  {
    type metadata accessor for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>();
    _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>);
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for ContextMenuPreviewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>);
    }
  }
}

void type metadata accessor for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>()
{
  if (!lazy cache variable for type metadata for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>)
  {
    type metadata accessor for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>)
  {
    _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    type metadata accessor for ModifiedContent<Spacer, _FrameLayout>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>();
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A(uint64_t a1)
{
}

void type metadata accessor for SwipeActionsModifier<AnyView?>()
{
  if (!lazy cache variable for type metadata for SwipeActionsModifier<AnyView?>)
  {
    _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type AnyView? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for SwipeActionsModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SwipeActionsModifier<AnyView?>);
    }
  }
}

uint64_t _s7SwiftUI25AccessibilityTableContextOSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingModifier<(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

uint64_t _s7SwiftUI0A19UIAnySortComparatorVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1880A7F64()
{
  if (*(void *)(v0 + 16))
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  }

  return swift_deallocObject();
}

void type metadata accessor for Button<RotatingDisclosureIndicator>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t outlined destroy of AccessibilityTableCellModifier<AnyView>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<Spacer, _FrameLayout>(0, &lazy cache variable for type metadata for AccessibilityTableCellModifier<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityTableCellModifier);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ModifiedContent<Spacer, _FrameLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1880A80F8()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  if (*(void *)(v0 + 112))
  {
    swift_release();
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 144), *(unsigned char *)(v0 + 152));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 160), *(unsigned char *)(v0 + 168));
  int v1 = *(unsigned __int8 *)(v0 + 251);
  if (v1 == 2)
  {
    swift_release();
    if (*(void *)(v0 + 192))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v2 = v0 + 208;
    if (*(unsigned char *)(v0 + 248))
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
  }
  else if (v1 == 1)
  {
    swift_release();
    if (*(unsigned char *)(v0 + 224)) {
      goto LABEL_14;
    }
    uint64_t v2 = v0 + 184;
  }
  else
  {
    if (*(unsigned char *)(v0 + 251)) {
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v0 + 200;
  }
  __swift_destroy_boxed_opaque_existential_1(v2);
LABEL_14:
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in TableRowView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in TableRowView.body.getter(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), v2 + 48, *(void *)(v2 + 88), *(unsigned __int8 *)(v2 + 96), a2, *(void *)(v2 + 104), *(void *)(v2 + 112), *(unsigned char *)(v2 + 120), v2 + 128);
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>(255);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>);
    }
  }
}

uint64_t outlined init with take of AccessibilityTableContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>()
{
  if (!lazy cache variable for type metadata for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>)
  {
    type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>();
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>> and conformance _UnaryViewAdaptor<A>, (void (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>);
    unint64_t v0 = type metadata accessor for AccessibilityTableCellModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTableCellModifier<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>>);
    }
  }
}

uint64_t outlined init with take of _ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1880A8424()
{
  if (*(void *)(v0 + 24))
  {
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableRowView.expandButton(expanded:tinted:)()
{
  return closure #1 in TableRowView.expandButton(expanded:tinted:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined init with copy of Button<RotatingDisclosureIndicator>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Button<RotatingDisclosureIndicator>(0, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Button<RotatingDisclosureIndicator>(uint64_t a1)
{
  type metadata accessor for Button<RotatingDisclosureIndicator>(0, &lazy cache variable for type metadata for Button<RotatingDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type RotatingDisclosureIndicator and conformance RotatingDisclosureIndicator, (uint64_t)&type metadata for RotatingDisclosureIndicator, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of TableRowView(uint64_t a1)
{
  return a1;
}

uint64_t sub_1880A8660()
{
  if ((*(unsigned char *)(v0 + 56) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    if (!*(void *)(v0 + 72)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 72))
  {
LABEL_5:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_6:

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in TableRowView.body.getter()
{
  return closure #1 in closure #2 in closure #1 in TableRowView.body.getter((uint64_t)(v0 + 2), v0[8], v0[9], v0[10]);
}

uint64_t outlined init with copy of TableHeaderView(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for ArraySlice<TableCellFormula>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of TableColumnCollection.Entry(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_Ended, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _A, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>,);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>,()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGestu;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGestu)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingM(255);
    lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTesti();
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>, (void (*)(uint64_t))type metadata accessor for ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGestu);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTesti()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHi;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHi)
  {
    type metadata accessor for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, Lab(255);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHitTestingModifier>>?>, LabelStyleWritingMo);
    lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Int?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<TapGesture>>>, _AllowsHi);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ContextMenuPreviewModifier<ZStack<ModifiedContent<AnyView?, StyleContextWriter<MenuStyleContext>>>, AnyView?> and conformance ContextMenuPreviewModifier<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TableRowForegroundStyleModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880A8B54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableRowForegroundStyleModifier()
{
  return &type metadata for TableRowForegroundStyleModifier;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>,()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectan;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectan)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, Add, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestur, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGesture<T, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectangle>>, AddGestureModifier<_EndedGestur);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<HStack<ForEach<ArraySlice<TableCellFormula>, UUID, ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>>>, ModifiedContent<AnyView, AccessibilityAttachmentModifier>>, ModifiedContent<VStack<_ConditionalContent<TableHeaderView, ModifiedContent<ModifiedContent<ModifiedContent<TableSectionHeaderView, _ContentShapeModifier<Rectan);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _FrameLayout>?, ModifiedContent<_UnaryViewAdaptor<ModifiedContent<AnyView, TableRowForegroundStyleModifier>>, AccessibilityAttachmentModifier>, TupleView<(Spacer, ModifiedContent<ModifiedContent<Button<RotatingDisclosureIndicator>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)>?)>>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in TableRowForegroundStyleModifier()
{
  return &protocol witness table for TableRowForegroundStyleModifier;
}

unint64_t lazy protocol witness table accessor for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier;
  if (!lazy protocol witness table cache variable for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowForegroundStyleModifier and conformance TableRowForegroundStyleModifier);
  }
  return result;
}

void _s7SwiftUI25AccessibilityTableContextOSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

ValueMetadata *type metadata accessor for TableRowForegroundStyleModifier.ChildEnvironment()
{
  return &type metadata for TableRowForegroundStyleModifier.ChildEnvironment;
}

uint64_t View.badgedViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BadgedViewStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  long long v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for BadgedViewStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t BadgeViewStyleConfiguration.badgeText.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v1 - 8);
  type metadata accessor for IntegerFormatStyle<Int>(0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E4FBB550], MEMORY[0x1E4F27420]);
  MEMORY[0x1F4188790](v2);
  uint64_t v3 = 0;
  unint64_t v4 = v0[2];
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    uint64_t v3 = *v0;
    if ((v4 & 0x8000000000000000) != 0)
    {
      outlined copy of Text.Storage(v3, v0[1], v4 & 1);
      swift_bridgeObjectRetain();
    }
    else
    {
      static Locale.autoupdatingCurrent.getter();
      lazy protocol witness table accessor for type Int and conformance Int();
      IntegerFormatStyle.init(locale:)();
      lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>();
      return Text.init<A>(_:format:)();
    }
  }
  return v3;
}

unint64_t instantiation function for generic protocol witness table for BadgeViewStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  }
  return result;
}

_UNKNOWN **base witness table accessor for View in BadgeViewStyleConfiguration.Content()
{
  return &protocol witness table for BadgeViewStyleConfiguration.Content;
}

uint64_t dispatch thunk of BadgedViewStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for BadgeViewStyleConfiguration()
{
  return &type metadata for BadgeViewStyleConfiguration;
}

ValueMetadata *type metadata accessor for BadgeViewStyleConfiguration.Content()
{
  return &type metadata for BadgeViewStyleConfiguration.Content;
}

uint64_t sub_1880A91CC()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for BadgedViewStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for BadgedViewStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1880A95B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in BadgedViewStyleModifier<A>()
{
  return &protocol witness table for BadgedViewStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in BadgedViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in BadgedViewStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in BadgedViewStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedBadgedView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedBadgedView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedBadgedView()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t BadgedViewStyleModifier.styleBody(configuration:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)v15 - v10;
  long long v12 = a1[1];
  v15[0] = *a1;
  v15[1] = v12;
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v3 + 24))(v15, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance BadgedViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BadgedViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance BadgedViewStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

ValueMetadata *type metadata accessor for ResolvedBadgedView()
{
  return &type metadata for ResolvedBadgedView;
}

uint64_t sub_1880A9AC0()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

unint64_t lazy protocol witness table accessor for type ResolvedBadgedView and conformance ResolvedBadgedView()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView;
  if (!lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView;
  if (!lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedBadgedView and conformance ResolvedBadgedView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>)
  {
    type metadata accessor for IntegerFormatStyle<Int>(255, &lazy cache variable for type metadata for BadgedViewStyleModifier<AutomaticBadgedViewStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticBadgedViewStyle and conformance AutomaticBadgedViewStyle, (uint64_t)&type metadata for AutomaticBadgedViewStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BadgedViewStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgedViewStyleModifier<AutomaticBadgedViewStyle> and conformance BadgedViewStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for IntegerFormatStyle<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedBadgedView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithCopy for PlatformItemListGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  unsigned int v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for PlatformItemListGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemListGenerator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 108)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemListGenerator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 108) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 108) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0 || AGGraphGetWeakValue()) {
    uint64_t v2 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v2 = MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  return v3 == 0;
}

BOOL specialized Collection.isEmpty.getter()
{
  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if (v9)
  {
    uint64_t v1 = *(void *)(*(void *)&v8[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
    uint64_t v2 = v6;
    uint64_t v3 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v1 == 0;
}

uint64_t specialized RandomAccessCollection<>.indices.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0 || AGGraphGetWeakValue()) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized RandomAccessCollection<>.indices.getter()
{
  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if (v9 == 1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
  uint64_t v1 = v6;
  uint64_t v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if ((v3 & 0x8000000000000000) == 0) {
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = specialized Dictionary.startIndex.getter(a2);
  if (v8) {
    goto LABEL_17;
  }
  uint64_t v9 = v7;
  uint64_t v10 = *(unsigned int *)(a2 + 36);
  if (v10 != v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v11 = result;
  uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
  if (v12 < result)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  long long v20 = *(_OWORD *)a1;
  char v21 = *(unsigned char *)(a1 + 16);
  long long v22 = v20;
  char v23 = v21;
  outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)&v22, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  uint64_t result = outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)v24, (uint64_t)&v25, (uint64_t (*)(void))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  if (v27)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v26 != v10) {
    goto LABEL_13;
  }
  if (v25 < v11)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  long long v15 = *(_OWORD *)(a1 + 24);
  char v16 = *(unsigned char *)(a1 + 40);
  long long v17 = v15;
  char v18 = v16;
  outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)&v17, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  uint64_t result = outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)v19, (uint64_t)&v28, (uint64_t (*)(void))type metadata accessor for [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant);
  if ((v30 & 1) == 0)
  {
    uint64_t v13 = v28;
    int v14 = v29;
    outlined consume of Set<UIOpenURLContext>.Index._Variant(v11, v9, 0);
    uint64_t result = outlined consume of Set<UIOpenURLContext>.Index._Variant(v12, v10, 0);
    if (v10 == v14)
    {
      if (v12 >= v13)
      {
        *(void *)(a3 + 48) = a2;
        *(_OWORD *)a3 = v20;
        *(unsigned char *)(a3 + 16) = v21;
        *(_OWORD *)(a3 + 24) = v15;
        *(unsigned char *)(a3 + 40) = v16;
        swift_bridgeObjectRetain();
        return outlined retain of Range<SpatialEventCollection.Index>(a1);
      }
      goto LABEL_16;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  outlined init with copy of TableColumnCollection.Backing(v3, (uint64_t)v15);
  if (v16 == 1)
  {
    uint64_t v8 = *(void *)(*(void *)&v15[0] + 16);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v15, (uint64_t)v12);
    uint64_t v10 = v13;
    uint64_t v11 = v14;
    __swift_project_boxed_opaque_existential_1(v12, v13);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_8;
    }
  }
  if (a1 < 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v8 >= a2)
  {
    uint64_t result = outlined init with copy of TableColumnCollection(v4, (uint64_t)(a3 + 2));
    *a3 = a1;
    a3[1] = a2;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6 = result;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v8 < 0)
    {
      __break(1u);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v6 < 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v8 < a2)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  a4[1] = a2;
  a4[2] = a3;
  *a4 = v6;

  return swift_bridgeObjectRetain();
}

uint64_t specialized Collection<>.subscript.getter@<X0>(_OWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  *(_OWORD *)uint64_t v12 = *a1;
  *(_OWORD *)&v12[9] = *(_OWORD *)((char *)a1 + 9);
  uint64_t result = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter(a1);
  if (v8) {
    goto LABEL_10;
  }
  uint64_t v9 = result;
  uint64_t v10 = v6;
  char v11 = v7;
  outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)v12, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Int?);
  uint64_t result = outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)v13, (uint64_t)&v17, (uint64_t (*)(void))type metadata accessor for Int?);
  if (v18) {
    goto LABEL_11;
  }
  if (v17 >= v9)
  {
    if (v9 >= v17)
    {
      outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)&v12[16], (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind);
      uint64_t result = outlined init with take of [SpatialEventCollection.Event.ID : SpatialEventCollection.Event].Index._Variant((uint64_t)v14, (uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind);
      if (v16)
      {
        if (v16 == 1)
        {
          if (v11 != 1 || v15 >= v10) {
            goto LABEL_11;
          }
          __break(1u);
LABEL_10:
          if (v12[8]) {
            goto LABEL_11;
          }
          goto LABEL_20;
        }
      }
      else
      {
        if (!v11)
        {
LABEL_18:
          if (v15 >= v10) {
            goto LABEL_11;
          }
          __break(1u);
LABEL_20:
          __break(1u);
          goto LABEL_21;
        }
        if (v11 == 2) {
          goto LABEL_11;
        }
        __break(1u);
      }
      if (v11 == 2 && !v10) {
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_18;
    }
LABEL_11:
    memcpy(a2 + 4, v2, 0x1A0uLL);
    *a2 = *(_OWORD *)v12;
    *(_OWORD *)((char *)a2 + 9) = *(_OWORD *)&v12[9];
    a2[2] = a1[2];
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)a1 + 41);
    return outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v2);
  }
LABEL_21:
  __break(1u);
  return result;
}

unint64_t specialized Collection.underestimatedCount.getter(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  if ((a2 & 1) != 0 || AGGraphGetWeakValue()) {
    uint64_t v4 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  unint64_t v5 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();

  return specialized RandomAccessCollection<>.distance(from:to:)(0, v5, a1, v3);
}

uint64_t specialized Collection.underestimatedCount.getter()
{
  outlined init with copy of TableColumnCollection.Backing(v0, (uint64_t)v8);
  if (v9)
  {
    uint64_t v1 = *(void *)(*(void *)&v8[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v8, (uint64_t)v5);
    uint64_t v2 = v6;
    uint64_t v3 = v7;
    __swift_project_boxed_opaque_existential_1(v5, v6);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return specialized RandomAccessCollection<>.distance(from:to:)(0, v1);
}

uint64_t specialized Collection.underestimatedCount.getter(unint64_t a1)
{
  if (!(a1 >> 62)) {
    return *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v1 & 0x8000000000000000) == 0) {
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t *PlatformItemCollection.subscript.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if (a3)
  {
LABEL_4:
    uint64_t result = (uint64_t *)swift_bridgeObjectRetain();
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    a2 = *result;
    goto LABEL_4;
  }
  a2 = MEMORY[0x1E4FBC860];
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
  outlined init with copy of PlatformItemList.Item(a2+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * a1, a4);

  return (uint64_t *)swift_bridgeObjectRelease();
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a4) {
    goto LABEL_5;
  }
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    a3 = *WeakValue;
LABEL_5:
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  a3 = MEMORY[0x1E4FBC860];
LABEL_6:
  unint64_t v7 = *(void *)(a3 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 <= v7) {
    return v4;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection<>.index(_:offsetBy:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result + a2;
  if (__OFADD__(result, a2))
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of TableColumnCollection.Backing(v2, (uint64_t)v10);
    if (v11)
    {
      uint64_t v4 = *(void *)(*(void *)&v10[0] + 16);
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      outlined init with take of OptionalBinaryInteger(v10, (uint64_t)v7);
      uint64_t v5 = v8;
      uint64_t v6 = v9;
      __swift_project_boxed_opaque_existential_1(v7, v8);
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
    }
    if ((v3 & 0x8000000000000000) == 0 && v4 >= v3) {
      return v3;
    }
  }
  __break(1u);
  return result;
}

uint64_t PlatformItemListGenerator.itemList.getter()
{
  if (*(_DWORD *)(v0 + 104) == *MEMORY[0x1E4F4E7A0]) {
    return 0;
  }
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall PlatformItemListGenerator.updateValue()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (AGGraphGetOutputValue())
  {
    int v4 = *(_DWORD *)(v1 + 104);
  }
  else
  {
    uint64_t v5 = *(void **)v1;
    int v6 = *(_DWORD *)(v2 + 8);
    uint64_t v7 = *(void *)(v2 + 16);
    int v8 = *(_DWORD *)(v2 + 24);
    uint64_t v9 = *(void *)(v2 + 32);
    unsigned int v10 = *(_DWORD *)(v2 + 40);
    unsigned int v11 = *(_DWORD *)(v2 + 44);
    unsigned int v34 = *(_DWORD *)(v2 + 52);
    unsigned int v35 = *(_DWORD *)(v2 + 48);
    uint64_t v32 = *(void *)(v2 + 64);
    uint64_t v33 = *(void *)(v2 + 56);
    unsigned int v30 = *(_DWORD *)(v2 + 76);
    unsigned int v31 = *(_DWORD *)(v2 + 72);
    unsigned int v28 = *(_DWORD *)(v2 + 84);
    unsigned int v29 = *(_DWORD *)(v2 + 80);
    unsigned int v26 = *(_DWORD *)(v2 + 92);
    unsigned int v27 = *(_DWORD *)(v2 + 88);
    char v24 = *(unsigned char *)(v2 + 100);
    int v25 = *(_DWORD *)(v2 + 96);
    int v23 = *(_DWORD *)(v2 + 104);
    unsigned int v36 = v5;
    int v37 = v6;
    uint64_t v38 = v7;
    int v39 = v8;
    uint64_t v40 = v9;
    *(void *)&long long v41 = __PAIR64__(v11, v10);
    *((void *)&v41 + 1) = __PAIR64__(v34, v35);
    *(void *)&long long v42 = v33;
    *((void *)&v42 + 1) = v32;
    *(void *)&long long v43 = __PAIR64__(v30, v31);
    *((void *)&v43 + 1) = __PAIR64__(v28, v29);
    unint64_t v44 = __PAIR64__(v26, v27);
    int v45 = v25;
    char v46 = v24;
    int v47 = v23;
    uint64_t v12 = swift_allocObject();
    long long v13 = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(v3 + 16);
    *(_OWORD *)(v12 + 32) = v13;
    *(void *)(v12 + 48) = v5;
    *(_DWORD *)(v12 + 56) = v6;
    *(void *)(v12 + 64) = v7;
    *(_DWORD *)(v12 + 72) = v8;
    *(void *)(v12 + 80) = v9;
    *(_DWORD *)(v12 + 88) = v10;
    *(_DWORD *)(v12 + 92) = v11;
    *(_DWORD *)(v12 + 96) = v35;
    *(_DWORD *)(v12 + 100) = v34;
    *(void *)(v12 + 104) = v33;
    *(void *)(v12 + 112) = v32;
    *(_DWORD *)(v12 + 120) = v31;
    *(_DWORD *)(v12 + 124) = v30;
    *(_DWORD *)(v12 + 128) = v29;
    *(_DWORD *)(v12 + 132) = v28;
    *(_DWORD *)(v12 + 136) = v27;
    *(_DWORD *)(v12 + 140) = v26;
    *(_DWORD *)(v12 + 144) = v25;
    *(unsigned char *)(v12 + 148) = v24;
    *(_DWORD *)(v12 + 152) = v23;
    outlined retain of SelectionEditMenuModifier<A>.Child(&v36);
    AGGraphClearUpdate();
    id v14 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    int v4 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListGenerator.updateValue()();
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();
    *(_DWORD *)(v2 + 104) = v4;
  }
  int v15 = *(_DWORD *)(v2 + 8);
  uint64_t v16 = *(void *)(v2 + 16);
  int v17 = *(_DWORD *)(v2 + 24);
  uint64_t v18 = *(void *)(v2 + 32);
  int v19 = *(_DWORD *)(v2 + 96);
  char v20 = *(unsigned char *)(v2 + 100);
  unsigned int v36 = *(void **)v2;
  int v37 = v15;
  uint64_t v38 = v16;
  int v39 = v17;
  uint64_t v40 = v18;
  long long v41 = *(_OWORD *)(v2 + 40);
  long long v42 = *(_OWORD *)(v2 + 56);
  long long v43 = *(_OWORD *)(v2 + 72);
  unint64_t v44 = *(void *)(v2 + 88);
  int v45 = v19;
  char v46 = v20;
  int v47 = v4;
  uint64_t v21 = PlatformItemListGenerator.itemList.getter();
  if (v21) {
    long long v22 = (void *)v21;
  }
  else {
    long long v22 = (void *)MEMORY[0x1E4FBC860];
  }
  unsigned int v36 = v22;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
}

uint64_t PlatformItemListGenerator.makeItemList()(void *a1)
{
  uint64_t v23 = *(void *)(v1 + 16);
  unsigned int v31 = *(_DWORD *)(v1 + 24);
  uint64_t v32 = *(void *)(v1 + 32);
  unsigned int v2 = *(_DWORD *)(v1 + 48);
  unsigned int v20 = *(_DWORD *)(v1 + 44);
  unsigned int v21 = *(_DWORD *)(v1 + 40);
  unsigned int v3 = *(_DWORD *)(v1 + 52);
  uint64_t v29 = *(void *)(v1 + 64);
  uint64_t v30 = *(void *)(v1 + 56);
  unsigned int v4 = *(_DWORD *)(v1 + 76);
  unsigned int v28 = *(_DWORD *)(v1 + 72);
  unsigned int v6 = *(_DWORD *)(v1 + 80);
  unsigned int v5 = *(_DWORD *)(v1 + 84);
  unsigned int v8 = *(_DWORD *)(v1 + 88);
  unsigned int v7 = *(_DWORD *)(v1 + 92);
  int v9 = *(_DWORD *)(v1 + 96);
  int v22 = *(unsigned __int8 *)(v1 + 100);
  uint64_t v24 = a1[4];
  uint64_t v25 = a1[2];
  char v26 = (*(uint64_t (**)(uint64_t))(v24 + 8))(v25);
  uint64_t v57 = v23;
  unsigned int v58 = v31;
  uint64_t v59 = v32;
  *(void *)&long long v60 = __PAIR64__(v20, v21);
  *((void *)&v60 + 1) = __PAIR64__(v3, v2);
  uint64_t v61 = v30;
  uint64_t v62 = v29;
  *(void *)&v63[0] = __PAIR64__(v4, v28);
  *((void *)&v63[0] + 1) = __PAIR64__(v5, v6);
  *(void *)&v63[1] = __PAIR64__(v7, v8);
  DWORD2(v63[1]) = v9;
  if (v22 == 1)
  {
    int v10 = v4;
    int v11 = v6;
    uint64_t v34 = v23;
    unsigned int v35 = v31;
    uint64_t v36 = v32;
    unsigned int v37 = v21;
    unsigned int v38 = v20;
    unsigned int v12 = v2;
    unsigned int v39 = v2;
    unsigned int v40 = v3;
    unsigned int v13 = v3;
    uint64_t v41 = v30;
    uint64_t v42 = v29;
    unsigned int v43 = v28;
    int v44 = v10;
    unsigned int v14 = v10;
    unsigned int v15 = v11;
    int v45 = v11;
    unsigned int v46 = v5;
    unsigned int v47 = v8;
    unsigned int v48 = v7;
    int v49 = v9;
    _ViewInputs.withoutGeometryDependencies.getter();
    uint64_t v57 = v50;
    unsigned int v58 = v51;
    uint64_t v59 = v52;
    long long v60 = v53;
    uint64_t v61 = v54;
    *(_OWORD *)((char *)v63 + 4) = *(_OWORD *)((char *)v56 + 4);
    *(void *)((char *)&v63[1] + 4) = *(void *)((char *)&v56[1] + 4);
    uint64_t v50 = v23;
    unsigned int v51 = v31;
    uint64_t v52 = v32;
    *(void *)&long long v53 = __PAIR64__(v20, v21);
    *((void *)&v53 + 1) = __PAIR64__(v13, v12);
    uint64_t v54 = v30;
    uint64_t v55 = v29;
    *(void *)&v56[0] = __PAIR64__(v14, v28);
    *((void *)&v56[0] + 1) = __PAIR64__(v5, v15);
    *(void *)&v56[1] = __PAIR64__(v7, v8);
    DWORD2(v56[1]) = v9;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = v29;
    swift_bridgeObjectRetain();
    PreferenceKeys.init()();
    uint64_t v33 = v23;
    _ViewInputs.intern<A>(_:id:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    PreferencesInputs.init(hostKeys:)();
    swift_bridgeObjectRelease();
    uint64_t v62 = v23;
    LODWORD(v63[0]) = v31;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = v29;
    swift_bridgeObjectRetain();
  }
  _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(v25, 0, v25, v24);
  LOBYTE(v50) = 1;
  lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
  PropertyList.subscript.setter();
  if ((v26 & 0x10) != 0)
  {
    uint64_t v50 = v16;
    unsigned int v51 = v28;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
      PreferenceKeys.add(_:)();
    }
  }
  uint64_t v17 = a1[3];
  _GraphValue.init(_:)();
  uint64_t v50 = v57;
  unsigned int v51 = v58;
  uint64_t v52 = v59;
  long long v53 = v60;
  uint64_t v54 = v61;
  uint64_t v55 = v62;
  v56[0] = v63[0];
  *(void *)&v56[1] = *(void *)&v63[1];
  DWORD2(v56[1]) = DWORD2(v63[1]);
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *, uint64_t))(a1[5] + 24))(&v34, &v33, &v50, v17);
  uint64_t v50 = v34;
  unsigned int v51 = v35;
  uint64_t v18 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v18 & 0x100000000) != 0) {
    uint64_t v18 = *MEMORY[0x1E4F4E7A0];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v18;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<PlatformItemCollection>, MEMORY[0x1E4FBBC18]);
}

unint64_t lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection;
  if (!lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemCollection and conformance PlatformItemCollection);
  }
  return result;
}

uint64_t PlatformItemCollection.endIndex.getter(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0 || AGGraphGetWeakValue()) {
    uint64_t v2 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v2 = MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(*a1, a2, *(void *)v3, *(unsigned char *)(v3 + 8));
  *a3 = result;
  return result;
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance PlatformItemCollection(unint64_t *a1, unint64_t *a2)
{
  return specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a2, *(void *)v2, *(unsigned char *)(v2 + 8));
}

uint64_t protocol witness for Collection.endIndex.getter in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PlatformItemCollection.endIndex.getter(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance PlatformItemCollection(void *a1, unint64_t *a2))(void *a1)
{
  unsigned int v5 = malloc(0x28uLL);
  *a1 = v5;
  v5[4] = PlatformItemCollection.subscript.read(v5, *a2, *(void *)v2, *(unsigned char *)(v2 + 8));
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*PlatformItemCollection.subscript.read(void *a1, unint64_t a2, uint64_t a3, char a4))(uint64_t *a1)
{
  uint64_t v8 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
  int v9 = malloc(*(void *)(v8 + 64));
  *a1 = v9;
  if (a4)
  {
LABEL_4:
    uint64_t result = (void (*)(uint64_t *))swift_bridgeObjectRetain();
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_5;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = (void (*)(uint64_t *))AGGraphGetWeakValue();
  if (result)
  {
    a3 = *(void *)result;
    goto LABEL_4;
  }
  a3 = MEMORY[0x1E4FBC860];
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (*(void *)(a3 + 16) > a2)
  {
    outlined init with copy of PlatformItemList.Item(a3+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * a2, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return PlatformItemCollection.subscript.read;
  }
LABEL_9:
  __break(1u);
  return result;
}

void PlatformItemCollection.subscript.read(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of PlatformItemList.Item(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = specialized Collection<>.subscript.getter(*a1, a1[1], *(void *)v2, *(unsigned char *)(v2 + 8));
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v6 & 1;

  return outlined copy of PlatformItemCollection.Storage(v5, v6 & 1);
}

uint64_t protocol witness for Collection.indices.getter in conformance PlatformItemCollection@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized RandomAccessCollection<>.indices.getter(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PlatformItemCollection()
{
  return specialized Collection.isEmpty.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

unint64_t protocol witness for Collection.count.getter in conformance PlatformItemCollection()
{
  return specialized Collection.underestimatedCount.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance PlatformItemCollection@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = *(void *)v4;
  char v9 = *(unsigned char *)(v4 + 8);
  int64_t v10 = specialized RandomAccessCollection<>.distance(from:to:)(*a1, *a3, *(void *)v4, v9);
  if (a2 < 1)
  {
    if (v10 <= 0 && v10 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v7, a2, v8, v9);
    char v12 = 0;
    goto LABEL_11;
  }
  if (v10 < 0 || v10 >= (unint64_t)a2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t result = 0;
  char v12 = 1;
LABEL_11:
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v12;
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PlatformItemCollection(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
}

size_t protocol witness for Sequence._copyToContiguousArray() in conformance PlatformItemCollection()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  size_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v1, v2);
  outlined consume of PlatformItemCollection.Storage(v1, v2);
  return v3;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance PlatformItemCollection(uint64_t a1, uint64_t a2, unint64_t a3)
{
  specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(unsigned __int8 *)(v3 + 8));
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in PlatformItemCollection()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_2(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<PlatformItemCollection> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<PlatformItemCollection>, MEMORY[0x1E4FBC320]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<PlatformItemCollection> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItemCollection>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<PlatformItemCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection();
    unint64_t v7 = a3(a1, &type metadata for PlatformItemCollection, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in PlatformItemCollection()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_2(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_2(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type Slice<PlatformItemCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItemCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in PlatformItemCollection()
{
  return _sSnySiGSnyxGSlsSxRzSZ6StrideRpzrlWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in PlatformItemCollection()
{
  return lazy protocol witness table accessor for type Slice<PlatformItemCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItemCollection> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PlatformItemCollection and conformance PlatformItemCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<PlatformItemCollection> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItemCollection>(255, &lazy cache variable for type metadata for Slice<PlatformItemCollection>, MEMORY[0x1E4FBC320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1880ABB08()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListGenerator.updateValue()()
{
  uint64_t v0 = (void *)type metadata accessor for PlatformItemListGenerator();
  return PlatformItemListGenerator.makeItemList()(v0);
}

uint64_t specialized Collection<>.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0 || AGGraphGetWeakValue()) {
    uint64_t v6 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 0x8000000000000000) == 0 && v7 >= a2) {
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t outlined retain of Range<SpatialEventCollection.Index>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  outlined copy of [A : B].Index._Variant<A, B>(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined copy of [A : B].Index._Variant<A, B>(v2, v3, v4);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformItemCollection.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of PlatformItemCollection.Storage(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for PlatformItemCollection.Storage(uint64_t a1)
{
  return outlined consume of PlatformItemCollection.Storage(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t assignWithCopy for PlatformItemCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of PlatformItemCollection.Storage(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of PlatformItemCollection.Storage(v5, v6);
  return a1;
}

uint64_t assignWithTake for PlatformItemCollection.Storage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of PlatformItemCollection.Storage(v5, v6);
  return a1;
}

void type metadata accessor for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind()
{
  if (!lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind)
  {
    type metadata accessor for ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for NavigationState.StackContent.Views.ViewsSequence.Index.Kind();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>.Index.Kind);
    }
  }
}

void _sSnySiGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void View._navigationDestination<A>(isPresented:content:)()
{
}

void View._navigationDestination<A, B>(item:content:)()
{
}

void View._navigationDestination(isPresented:storyboardName:)()
{
}

void View._navigationDestination<A>(item:storyboardName:)()
{
}

uint64_t sub_1880ABF9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880AC00C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880AC0B0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for NavigationLinkModifier<EmptyView>()
{
  if (!lazy cache variable for type metadata for NavigationLinkModifier<EmptyView>)
  {
    unint64_t v0 = type metadata accessor for NavigationLinkModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationLinkModifier<EmptyView>);
    }
  }
}

uint64_t sub_1880AC17C()
{
  return swift_getWitnessTable();
}

uint64_t AccessibilityQuickActionProxy.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t AccessibilityQuickActionProxy.isActive.didset()
{
  if (*(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8))
  {
    uint64_t v3 = *(void *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive);
    type metadata accessor for Published<AccessibilityQuickActionState>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v4);
    int v1 = v4;
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    uint64_t result = swift_release();
    if ((_BYTE)v3)
    {
      if (v1) {
        return result;
      }
      goto LABEL_10;
    }
    if (!v1)
    {
LABEL_10:
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      uint64_t result = swift_release();
      if (!(_BYTE)v3) {
        return result;
      }
      goto LABEL_11;
    }
    if ((*(void *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                    + 8)
       || *(unsigned char *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
      && *(void *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
    {
LABEL_11:
      swift_retain();
      static Update.enqueueAction(_:)();
      return swift_release();
    }
  }
  return result;
}

uint64_t AccessibilityQuickActionProxy.isEnabled.didset(uint64_t result)
{
  if (!*(void *)(v1
                  + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                  + 8))
  {
    if (*(unsigned char *)(v1
                  + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled) == 1)
    {
      if ((result & 1) == 0
        && (*(void *)(v1
                      + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                      + 8)
         || *(unsigned char *)(v1
                     + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
        && *(void *)(v1
                     + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
      {
        swift_retain();
        static Update.enqueueAction(_:)();
        return swift_release();
      }
    }
    else if (result)
    {
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      uint64_t result = swift_release();
      if (v2)
      {
        swift_retain();
        static Update.enqueueAction(_:)();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t AccessibilityQuickActionProxy.init(style:)(char a1)
{
  char v2 = a1 & 1;
  type metadata accessor for Published<AccessibilityQuickActionState>(0, &lazy cache variable for type metadata for Published<AccessibilityQuickActionState>, (uint64_t)&type metadata for AccessibilityQuickActionState, MEMORY[0x1E4F1AC70]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v13[-v6];
  uint64_t v8 = v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy__state;
  v13[15] = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v8, v7, v4);
  char v9 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label);
  *char v9 = 0;
  v9[1] = 0;
  uint64_t v10 = v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive;
  *(void *)uint64_t v10 = 0;
  *(void *)(v10 + 8) = 0;
  *(unsigned char *)(v10 + 16) = 0;
  int v11 = (void *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action);
  *int v11 = 0;
  v11[1] = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled) = 1;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) = v2;
  return v1;
}

void AccessibilityQuickActionProxy.viewDidAppear()()
{
  if (*(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8))
  {
    type metadata accessor for Published<AccessibilityQuickActionState>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    uint64_t v2 = v1;
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](&v3, v2);
    if (v3 == 1
      && (*(void *)(v0
                    + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                    + 8)
       || *(unsigned char *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
      && *(void *)(v0
                   + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
    {
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
    }
    swift_release();
  }
  else if (*(unsigned char *)(v0 {
                     + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled) == 1
  }
         && (*(void *)(v0
                       + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label
                       + 8)
          || *(unsigned char *)(v0
                      + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_style) == 1)
         && *(void *)(v0
                      + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action))
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
  }
}

uint64_t closure #1 in AccessibilityQuickActionProxy.start()(uint64_t result)
{
  uint64_t v1 = *(void *)(result
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8);
  if (v1)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)(result+ OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive), v1);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in AccessibilityQuickActionProxy.stop()(uint64_t a1)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  uint64_t result = static Published.subscript.setter();
  uint64_t v3 = *(void *)(a1
                 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive
                 + 8);
  if (v3)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)(a1+ OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive), v3);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t AccessibilityQuickActionProxy.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy__state;
  type metadata accessor for Published<AccessibilityQuickActionState>(0, &lazy cache variable for type metadata for Published<AccessibilityQuickActionState>, (uint64_t)&type metadata for AccessibilityQuickActionState, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive), *(void *)(v0+ OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive+ 8));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action));

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance AccessibilityQuickActionProxy@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for AccessibilityQuickActionProxy();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v63 = a7;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  uint64_t v10 = *(ValueMetadata **)a2;
  int v11 = *(_DWORD *)(a2 + 8);
  char v12 = *(_UNKNOWN ***)(a2 + 16);
  unsigned int v13 = *(_DWORD *)(a2 + 24);
  unsigned int v14 = *(_DWORD *)(a2 + 28);
  unsigned int v15 = *(_DWORD *)(a2 + 32);
  unsigned int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v17 = *(void *)(a2 + 40);
  uint64_t v18 = *(void **)(a2 + 48);
  unsigned int v19 = *(_DWORD *)(a2 + 56);
  unsigned int v20 = *(_DWORD *)(a2 + 60);
  unsigned int v21 = *(_DWORD *)(a2 + 64);
  unsigned int v22 = *(_DWORD *)(a2 + 68);
  unsigned int v24 = *(_DWORD *)(a2 + 72);
  unsigned int v23 = *(_DWORD *)(a2 + 76);
  int v25 = *(_DWORD *)(a2 + 80);
  char v110 = v10;
  int v111 = v11;
  uint64_t v112 = v12;
  *(void *)&long long v113 = __PAIR64__(v14, v13);
  *((void *)&v113 + 1) = __PAIR64__(v16, v15);
  uint64_t v114 = v17;
  uint64_t v115 = v18;
  *(void *)&long long v116 = __PAIR64__(v20, v19);
  *((void *)&v116 + 1) = __PAIR64__(v22, v21);
  unint64_t v117 = __PAIR64__(v23, v24);
  int v118 = v25;
  HIDWORD(v96) = HIDWORD(v10);
  int v82 = v11;
  int v97 = v11;
  uint64_t v99 = v12;
  unsigned int v75 = v15;
  unsigned int v76 = v13;
  unsigned int v100 = v13;
  unsigned int v79 = v21;
  unsigned int v80 = v14;
  unsigned int v101 = v14;
  unint64_t v102 = __PAIR64__(v16, v15);
  unsigned int v74 = v16;
  uint64_t v103 = v17;
  uint64_t v104 = v18;
  unsigned int v70 = v20;
  unsigned int v71 = v19;
  unint64_t v105 = __PAIR64__(v20, v19);
  unint64_t v106 = __PAIR64__(v22, v21);
  unsigned int v77 = v23;
  unsigned int v78 = v22;
  int v68 = v25;
  unsigned int v69 = v24;
  unsigned int v107 = v24;
  unsigned int v108 = v23;
  int v109 = v25;
  unint64_t v83 = (unint64_t)v10;
  swift_retain();
  unsigned __int8 v81 = v12;
  swift_retain();
  uint64_t v73 = v17;
  swift_bridgeObjectRetain();
  uint64_t v72 = v18;
  swift_bridgeObjectRetain();
  LODWORD(v96) = _ViewInputs.environment.getter();
  uint64_t v85 = type metadata accessor for AccessibilityQuickActionModifier.ChildEnvironment();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Published<AccessibilityQuickActionState>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E4F40140], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)&v84, v85, MEMORY[0x1E4FBC248], v26, MEMORY[0x1E4FBC278], v27);
  uint64_t v55 = 0;
  _ViewInputs.environment.setter();
  int v62 = v9;
  LODWORD(v96) = v9;
  type metadata accessor for AccessibilityQuickActionModifier();
  uint64_t v56 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a5 - 8) + 64)) {
    closure #1 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(1, a5);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v52 = v112;
  uint64_t v53 = v114;
  id v61 = v115;
  uint64_t v87 = v110;
  LODWORD(v88) = v111;
  uint64_t v89 = v112;
  long long v90 = v113;
  uint64_t v91 = v114;
  uint64_t v92 = v115;
  long long v93 = v116;
  unint64_t v94 = v117;
  int v95 = v118;
  PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v87, 1, (uint64_t)&v96);
  uint64_t v54 = &v52;
  uint64_t v29 = a6;
  uint64_t v66 = a6;
  uint64_t v30 = (void *)v96;
  unint64_t v59 = v102;
  long long v60 = v99;
  unint64_t v57 = v106;
  unint64_t v58 = v105;
  MEMORY[0x1F4188790](v29);
  uint64_t v67 = a5;
  uint64_t v87 = &type metadata for ActionPlatformItemListFlags;
  uint64_t v88 = a5;
  uint64_t v89 = &protocol witness table for ActionPlatformItemListFlags;
  *(void *)&long long v90 = v31;
  uint64_t v50 = type metadata accessor for PlatformItemListGenerator();
  uint64_t v51 = swift_getWitnessTable();
  type metadata accessor for Published<AccessibilityQuickActionState>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v33 = v32;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v61 = v30;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = v55;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v49, v50, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v35);
  uint64_t v55 = v34;
  uint64_t v36 = (void *)v96;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v54) = v87;
  LODWORD(v33) = v62;
  LODWORD(v96) = v62;
  _GraphValue.value.getter();
  closure #2 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(1);
  LODWORD(v53) = AGGraphCreateOffsetAttribute2();
  LODWORD(v96) = v33;
  _GraphValue.value.getter();
  closure #3 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(1);
  int v62 = AGGraphCreateOffsetAttribute2();
  unint64_t v96 = v83;
  int v97 = v82;
  uint64_t v99 = v81;
  unsigned int v37 = v75;
  unsigned int v100 = v76;
  LODWORD(v36) = v76;
  unsigned int v101 = v80;
  unint64_t v102 = __PAIR64__(v74, v75);
  unsigned int v38 = v74;
  unsigned int v40 = v72;
  uint64_t v39 = v73;
  uint64_t v103 = v73;
  uint64_t v104 = v72;
  unsigned int v41 = v71;
  unint64_t v105 = __PAIR64__(v70, v71);
  unint64_t v106 = __PAIR64__(v78, v79);
  LODWORD(v34) = v68;
  unsigned int v107 = v69;
  unsigned int v108 = v77;
  int v109 = v68;
  swift_getKeyPath();
  LODWORD(v56) = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  unint64_t v96 = v83;
  int v97 = v82;
  uint64_t v99 = v81;
  unsigned int v100 = v36;
  unsigned int v101 = v80;
  unint64_t v102 = __PAIR64__(v38, v37);
  uint64_t v103 = v39;
  uint64_t v104 = v40;
  unint64_t v105 = __PAIR64__(v70, v41);
  LODWORD(v40) = v69;
  unsigned int v42 = v70;
  unint64_t v106 = __PAIR64__(v78, v79);
  unsigned int v107 = v69;
  unsigned int v108 = v77;
  int v109 = v34;
  swift_getKeyPath();
  int v43 = _ViewInputs.mapEnvironment<A>(_:)();
  uint64_t v44 = swift_release();
  unint64_t v96 = __PAIR64__(v53, v54);
  int v97 = v62;
  int v98 = v56;
  LODWORD(v99) = v43;
  MEMORY[0x1F4188790](v44);
  uint64_t v45 = type metadata accessor for AccessibilityQuickActionModifier.ProxyTransform();
  *(void *)&v49[-16] = v45;
  *(void *)&v49[-8] = swift_getWitnessTable();
  type metadata accessor for Attribute<AccessibilityQuickActionProxy>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v49[-32], v45, MEMORY[0x1E4FBC248], v46, MEMORY[0x1E4FBC278], v47);
  LODWORD(v96) = v87;
  type metadata accessor for AccessibilityQuickActionModifier.ProxyModifier();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  unint64_t v96 = v83;
  int v97 = v82;
  uint64_t v99 = v81;
  unsigned int v100 = v76;
  unsigned int v101 = v80;
  unint64_t v102 = __PAIR64__(v74, v75);
  uint64_t v103 = v73;
  uint64_t v104 = v72;
  unint64_t v105 = __PAIR64__(v42, v71);
  unint64_t v106 = __PAIR64__(v78, v79);
  unsigned int v107 = v40;
  unsigned int v108 = v77;
  int v109 = v68;
  lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier();
  static ViewModifier.makeView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for AccessibilityQuickActionModifier();
  void v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #2 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessibilityQuickActionModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  _OWORD v9[2] = v2;
  type metadata accessor for Binding<Bool>?();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t closure #3 in static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessibilityQuickActionModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  _OWORD v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_21, (uint64_t)v7, (uint64_t)&type metadata for _AccessibilityQuickActionStyle.RawValue, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t EnvironmentValues.accessibilityQuickActionsEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.accessibilityQuickActionsEnabled : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityQuickActionsEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.accessibilityQuickActionsEnabled : EnvironmentValues()
{
  return EnvironmentValues.accessibilityQuickActionsEnabled.setter();
}

uint64_t EnvironmentValues.accessibilityQuickActionsEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityQuickActionModifier<A>.ProxyModifier@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized AccessibilityQuickActionModifier.ProxyModifier.value.getter();
  a1[1] = v2;

  return swift_retain();
}

uint64_t AccessibilityQuickActionModifier.ChildEnvironment.updateValue()()
{
  uint64_t result = *(void *)(AGGraphGetValue() + 8);
  if (v1)
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.isEnabled.setter();
    AGGraphSetOutputValue();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t *AccessibilityQuickActionModifier.ProxyTransform.updateValue()()
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (void **)((char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AccessibilityQuickActionProxy();
  if (!AGGraphGetOutputValue())
  {
    char v3 = *(unsigned char *)AGGraphGetValue();
    swift_allocObject();
    uint64_t v32 = AccessibilityQuickActionProxy.init(style:)(v3);
    AGGraphSetOutputValue();
    swift_release();
  }
  uint64_t result = (uint64_t *)AGGraphGetValue();
  if (*(unsigned char *)result == 1)
  {
    type metadata accessor for Binding<Bool>?();
    uint64_t Value = AGGraphGetValue();
    uint64_t v7 = *(void *)Value;
    uint64_t v6 = *(void *)(Value + 8);
    char v8 = *(unsigned char *)(Value + 16);
    if (v9)
    {
      uint64_t v31 = v2;
      uint64_t result = (uint64_t *)AGGraphGetOutputValue();
      if (!result)
      {
        __break(1u);
        goto LABEL_27;
      }
      uint64_t v10 = *result
          + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isActive;
      uint64_t v11 = *(void *)v10;
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)uint64_t v10 = v7;
      *(void *)(v10 + 8) = v6;
      *(unsigned char *)(v10 + 16) = v8;
      outlined copy of Binding<NavigationSplitViewColumn>?(v7, v6);
      outlined copy of Binding<NavigationSplitViewColumn>?(v7, v6);
      outlined copy of Binding<NavigationSplitViewColumn>?(v7, v6);
      swift_retain();
      outlined consume of Binding<NavigationSplitViewColumn>?(v11, v12);
      AccessibilityQuickActionProxy.isActive.didset();
      outlined consume of Binding<NavigationSplitViewColumn>?(v7, v6);
      swift_release();
      uint64_t v2 = v31;
    }
    else
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)Value, v6);
    }
    unsigned int v13 = (char *)AGGraphGetValue();
    if ((v14 & 1) == 0) {
      goto LABEL_11;
    }
    char v15 = *v13;
    uint64_t result = (uint64_t *)AGGraphGetOutputValue();
    if (result)
    {
      uint64_t v16 = *(unsigned __int8 *)(*result
                               + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled);
      *(unsigned char *)(*result
               + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_isEnabled) = v15;
      swift_retain();
      AccessibilityQuickActionProxy.isEnabled.didset(v16);
      swift_release();
LABEL_11:
      AGGraphGetValue();
      if ((v17 & 1) == 0) {
        return (uint64_t *)outlined consume of Binding<NavigationSplitViewColumn>?(v7, v6);
      }
      uint64_t v18 = swift_bridgeObjectRetain();
      PlatformItemList.mergedContentItem.getter(v18, (uint64_t)v2);
      swift_bridgeObjectRelease();
      uint64_t result = (uint64_t *)AGGraphGetOutputValue();
      if (result)
      {
        uint64_t v19 = *result;
        unsigned int v20 = *v2;
        if (*v2)
        {
          swift_retain();
          id v21 = objc_msgSend(v20, sel_string);
          unsigned int v20 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v23 = v22;
        }
        else
        {
          swift_retain();
          uint64_t v23 = 0;
        }
        unsigned int v24 = (void *)(v19
                       + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_label);
        *unsigned int v24 = v20;
        v24[1] = v23;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = (uint64_t *)AGGraphGetOutputValue();
        if (result)
        {
          uint64_t v25 = *result;
          uint64_t v26 = (uint64_t)v2[51];
          if (v26 == 1)
          {
            uint64_t v26 = 0;
            uint64_t v27 = 0;
          }
          else
          {
            uint64_t v27 = v2[52];
            outlined copy of AppIntentExecutor?((uint64_t)v2[51]);
          }
          unsigned int v28 = (uint64_t *)(v25
                          + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action);
          uint64_t v29 = *(void *)(v25
                          + OBJC_IVAR____TtC7SwiftUIP33_B8D2E4520F2964BB14185EE65411F68529AccessibilityQuickActionProxy_action);
          *unsigned int v28 = v26;
          v28[1] = (uint64_t)v27;
          swift_retain();
          outlined copy of AppIntentExecutor?(v26);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
          if (!*v28)
          {
            swift_getKeyPath();
            swift_getKeyPath();
            static Published.subscript.getter();
            swift_release();
            swift_release();
            if ((_BYTE)v32)
            {
              swift_retain();
              static Update.enqueueAction(_:)();
              swift_release();
            }
          }
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
          outlined consume of Binding<NavigationSplitViewColumn>?(v7, v6);
          swift_release();
          return (uint64_t *)outlined destroy of PlatformItemList.Item((uint64_t)v2);
        }
LABEL_29:
        __break(1u);
        return result;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityQuickActionModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static AccessibilityQuickActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityQuickActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

double AccessibilityQuickActionProxyModifier.body(content:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain_n();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  *(void *)a3 = partial apply for closure #1 in AccessibilityQuickActionProxyModifier.body(content:);
  *(void *)(a3 + 8) = v6;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = partial apply for closure #2 in AccessibilityQuickActionProxyModifier.body(content:);
  *(void *)(a3 + 56) = v7;
  *(unsigned char *)(a3 + 64) = v9;
  *(unsigned char *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  return result;
}

uint64_t closure #2 in AccessibilityQuickActionProxyModifier.body(content:)()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  if (v1)
  {
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
  }
  return swift_release();
}

double protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionProxyModifier@<D0>(uint64_t a1@<X8>)
{
  return AccessibilityQuickActionProxyModifier.body(content:)(*v1, v1[1], a1);
}

uint64_t one-time initialization function for pulse()
{
  uint64_t result = static Animation.easeInOut(duration:)();
  static AnimationCurve.pulse = result;
  return result;
}

uint64_t one-time initialization function for press()
{
  uint64_t result = static Animation.easeInOut(duration:)();
  static AnimationCurve.press = result;
  return result;
}

uint64_t AccessibilityQuickActionAnimationModifier.FocusRing.Outline.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  long long v11 = *((_OWORD *)v5 + 1);
  v22[0] = *(_OWORD *)v5;
  v22[1] = v11;
  char v12 = *((unsigned char *)v5 + 32);
  char v23 = v12;
  uint64_t v13 = *v5;
  uint64_t v14 = v5[1];
  uint64_t v15 = v5[2];
  uint64_t v16 = v5[3];
  if (Path.isEmpty.getter())
  {
    v26.origin.CGFloat x = a2;
    v26.origin.CGFloat y = a3;
    v26.size.CGFloat width = a4;
    v26.size.CGFloat height = a5;
    CGRect v27 = CGRectInset(v26, *((double *)v5 + 5) * -0.5, *((double *)v5 + 5) * -0.5);
    CGFloat x = v27.origin.x;
    CGFloat y = v27.origin.y;
    CGFloat width = v27.size.width;
    CGFloat height = v27.size.height;
    CGRectGetHeight(v27);
    v28.origin.CGFloat x = x;
    v28.origin.CGFloat y = y;
    v28.size.CGFloat width = width;
    v28.size.CGFloat height = height;
    CGRectGetWidth(v28);
    uint64_t result = Path.init(roundedRect:cornerRadius:style:)();
    uint64_t v13 = v24[0];
    uint64_t v14 = v24[1];
    uint64_t v15 = v24[2];
    uint64_t v16 = v24[3];
    char v12 = v25;
  }
  else
  {
    outlined init with take of Path.Storage((uint64_t)v22, (uint64_t)v24);
    uint64_t result = outlined retain of Path.Storage((uint64_t)v24);
  }
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v15;
  *(void *)(a1 + 24) = v16;
  *(unsigned char *)(a1 + 32) = v12;
  return result;
}

double protocol witness for Shape.path(in:) in conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  long long v7 = v5[1];
  long long v12 = *v5;
  long long v13 = v7;
  long long v14 = v5[2];
  AccessibilityQuickActionAnimationModifier.FocusRing.Outline.path(in:)((uint64_t)v10, a2, a3, a4, a5);
  double result = *(double *)v10;
  long long v9 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 40);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  unsigned __int8 v7 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = 256;
  return outlined copy of Path.Storage(v2, v3, v4, v5, v7);
}

double protocol witness for View.body.getter in conformance AccessibilityQuickActionAnimationModifier.FocusRing@<D0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  unsigned __int8 v7 = *(unsigned char *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v1 + 48);
  outlined copy of Path.Storage(v4, v3, v5, v6, v7);
  outlined copy of Environment<Color?>.Content(v8, v9);
  uint64_t v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<Color?>.Content(v8, v9);
  if (!v10) {
    uint64_t v10 = static Color.accentColor.getter();
  }
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v11 = static Alignment.center.getter();
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = 0x4008000000000000;
  double result = v15;
  *(void *)(a1 + 48) = v14;
  *(double *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v18;
  *(void *)(a1 + 88) = v10;
  *(_WORD *)(a1 + 96) = 256;
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = v13;
  return result;
}

uint64_t AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for Published<AccessibilityQuickActionState>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  if (v12) {
    double v8 = 1.0;
  }
  else {
    double v8 = 0.0;
  }
  uint64_t v9 = Animation.repeatForever(autoreverses:)();
  State.wrappedValue.getter();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(unsigned char *)(v10 + 24) = a2;
  *(void *)(v10 + 32) = a3;
  *(double *)a4 = v8;
  *(void *)(a4 + 8) = v9;
  *(unsigned char *)(a4 + 16) = v12;
  *(void *)(a4 + 24) = partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:);
  *(void *)(a4 + 32) = v10;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = 0;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Published<AccessibilityQuickActionState>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  swift_retain();
  uint64_t result = State.wrappedValue.getter();
  if (a3)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), a1);
}

uint64_t AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for Published<AccessibilityQuickActionState>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  if (v16) {
    double v8 = 1.0;
  }
  else {
    double v8 = 0.0;
  }
  State.wrappedValue.getter();
  if (v16) {
    double v9 = 1.0;
  }
  else {
    double v9 = 1.2;
  }
  static UnitPoint.center.getter();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  State.wrappedValue.getter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(unsigned char *)(v14 + 24) = a2;
  *(void *)(v14 + 32) = a3;
  *(double *)a4 = v8;
  *(double *)(a4 + 8) = v9;
  *(double *)(a4 + 16) = v9;
  *(void *)(a4 + 24) = v11;
  *(void *)(a4 + 32) = v13;
  *(void *)(a4 + 40) = a1;
  *(unsigned char *)(a4 + 48) = v16;
  *(void *)(a4 + 56) = partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:);
  *(void *)(a4 + 64) = v14;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 0;
  swift_retain();
  return swift_retain_n();
}

uint64_t closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionAnimationModifier.ActivateModifier@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), a1);
}

__n128 AccessibilityQuickActionAnimationModifier.body(content:)@<Q0>(char a1@<W1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a1;
  *(unsigned char *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  swift_retain();
  static Alignment.center.getter();
  LOBYTE(v11) = a2;
  *((void *)&v11 + 1) = a3;
  type metadata accessor for Published<AccessibilityQuickActionState>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  static UnitPoint.center.getter();
  uint64_t v9 = swift_allocObject();
  *(unsigned char *)(v9 + 16) = a1;
  *(unsigned char *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = a3;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState();
  swift_retain();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  swift_release();
  __n128 result = v13;
  *(_OWORD *)a4 = v11;
  *(_OWORD *)(a4 + 16) = v12;
  *(__n128 *)(a4 + 32) = v13;
  *(_OWORD *)(a4 + 48) = v14;
  *(unsigned char *)(a4 + 64) = v15;
  *(_OWORD *)(a4 + 72) = v16;
  *(_OWORD *)(a4 + 88) = v17;
  *(_OWORD *)(a4 + 104) = v18;
  return result;
}

uint64_t closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain_n();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      long long v37 = 0u;
      long long v38 = 0u;
      char v39 = 6;
      unint64_t v7 = v5 & 0xC000000000000001;
      if ((v5 & 0xC000000000000001) != 0)
      {
LABEL_35:
        swift_bridgeObjectRetain();
        MEMORY[0x18C117680](0, v5);
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      char v8 = Path.isEmpty.getter();
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      if (v8)
      {
        unint64_t v28 = v7;
        if (v6 == 1) {
          goto LABEL_21;
        }
        if (v7)
        {
          unint64_t v10 = 1;
          while (1)
          {
            swift_bridgeObjectRetain();
            MEMORY[0x18C117680](v10, v5);
            char v11 = Path.isEmpty.getter();
            swift_bridgeObjectRelease();
            uint64_t result = swift_unknownObjectRelease();
            if ((v11 & 1) == 0) {
              break;
            }
            unint64_t v12 = v10 + 1;
            if (__OFADD__(v10, 1))
            {
              __break(1u);
              goto LABEL_32;
            }
            ++v10;
            if (v12 == v6) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          uint64_t v13 = 5;
          while (1)
          {
            unint64_t v10 = v13 - 4;
            unint64_t v7 = *(void *)(v5 + 8 * v13);
            swift_bridgeObjectRetain();
            swift_retain();
            char v14 = Path.isEmpty.getter();
            swift_bridgeObjectRelease();
            uint64_t result = swift_release();
            if ((v14 & 1) == 0) {
              break;
            }
            uint64_t v15 = v13 - 3;
            if (__OFADD__(v10, 1))
            {
              __break(1u);
              goto LABEL_35;
            }
            ++v13;
            if (v15 == v6) {
              goto LABEL_21;
            }
          }
        }
        if (v10 == v6) {
          goto LABEL_21;
        }
        if (!v28)
        {
          if ((v10 & 0x8000000000000000) != 0)
          {
LABEL_38:
            __break(1u);
            return result;
          }
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v10 = 0;
        if (!v7)
        {
LABEL_24:
          if (v10 >= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
          swift_retain();
LABEL_26:
          char v16 = Path.isEmpty.getter();
          swift_bridgeObjectRelease();
          uint64_t result = swift_release();
          if ((v16 & 1) == 0) {
            goto LABEL_27;
          }
          __break(1u);
          goto LABEL_37;
        }
      }
      MEMORY[0x18C117680](v10, v5);
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
  }
LABEL_21:
  swift_bridgeObjectRelease();
LABEL_27:
  memset(v35, 0, sizeof(v35));
  char v36 = 6;
  uint64_t v17 = static HorizontalAlignment.center.getter();
  closure #2 in closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)(a2, (uint64_t)v35, (uint64_t)v30);
  long long v27 = v30[1];
  long long v29 = v30[0];
  long long v25 = v30[3];
  long long v26 = v30[2];
  uint64_t v18 = v31;
  uint64_t v19 = v32;
  BOOL v20 = a2 == 0;
  char v21 = v33;
  if ((_BYTE)a2) {
    double v22 = 1.0;
  }
  else {
    double v22 = 0.0;
  }
  char v23 = v34;
  uint64_t v24 = static Animation.default.getter();
  uint64_t result = outlined consume of Path.Storage(0, 0, 0, 0, 6u);
  LOBYTE(v30[0]) = 1;
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  *(_OWORD *)(a3 + 24) = v29;
  *(_OWORD *)(a3 + 40) = v27;
  *(_OWORD *)(a3 + 56) = v26;
  *(_OWORD *)(a3 + 72) = v25;
  *(void *)(a3 + 88) = v18;
  *(void *)(a3 + 96) = v19;
  *(unsigned char *)(a3 + 104) = v21;
  *(unsigned char *)(a3 + 105) = v23;
  *(double *)(a3 + 112) = v22;
  *(void *)(a3 + 120) = v24;
  *(unsigned char *)(a3 + 128) = v20;
  *(unsigned char *)(a3 + 129) = 0;
  return result;
}

uint64_t closure #2 in closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 32);
  int64x2_t v4 = 0uLL;
  char v5 = result;
  char v8 = 0;
  long long v9 = 0uLL;
  long long v10 = 0uLL;
  int64x2_t v11 = 0uLL;
  switch((char)result)
  {
    case 1:
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      uint64_t KeyPath = swift_getKeyPath();
      outlined init with take of Path.Storage(a2, (uint64_t)v19);
      outlined retain of Path.Storage((uint64_t)v19);
      int64x2_t v4 = 0uLL;
      char v5 = 0;
      char v8 = 0;
      int64x2_t v11 = vdupq_n_s64(0x100uLL);
      v11.i64[0] = KeyPath;
      uint64_t result = v3;
      goto LABEL_9;
    case 2:
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      uint64_t v13 = swift_getKeyPath();
      outlined init with take of Path.Storage(a2, (uint64_t)v19);
      outlined retain of Path.Storage((uint64_t)v19);
      if (one-time initialization token for pulse != -1) {
        swift_once();
      }
      uint64_t v14 = swift_retain();
      char v5 = 0;
      int64x2_t v11 = (int64x2_t)(unint64_t)v13;
      char v8 = 1;
      int64x2_t v4 = vdupq_n_s64(1uLL);
      v4.i64[0] = v14;
      uint64_t result = v3;
      goto LABEL_9;
    case 3:
      long long v17 = *(_OWORD *)a2;
      long long v18 = *(_OWORD *)(a2 + 16);
      uint64_t v15 = swift_getKeyPath();
      outlined init with take of Path.Storage(a2, (uint64_t)v19);
      outlined retain of Path.Storage((uint64_t)v19);
      if (one-time initialization token for press != -1) {
        swift_once();
      }
      uint64_t v16 = Animation.delay(_:)();
      int64x2_t v11 = (int64x2_t)(unint64_t)v15;
      char v5 = 1;
      int64x2_t v4 = vdupq_n_s64(1uLL);
      v4.i64[0] = v16;
      uint64_t result = v3;
      char v8 = 1;
LABEL_9:
      long long v9 = v17;
      long long v10 = v18;
      break;
    default:
      break;
  }
  *(_OWORD *)a3 = v9;
  *(_OWORD *)(a3 + 16) = v10;
  *(void *)(a3 + 32) = result;
  *(int64x2_t *)(a3 + 40) = v11;
  *(int64x2_t *)(a3 + 56) = v4;
  *(void *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 80) = v5;
  *(unsigned char *)(a3 + 81) = v8;
  return result;
}

void closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  switch(*a2)
  {
    case 1:
      if (one-time initialization token for press != -1) {
        swift_once();
      }
      Animation.speed(_:)();
      Animation.repeatCount(_:autoreverses:)();
      swift_release();
      Animation.delay(_:)();
      uint64_t v5 = swift_release();
      MEMORY[0x1F4188790](v5);
      withAnimation<A>(_:_:)();
      swift_release();
      Animation.speed(_:)();
      Animation.delay(_:)();
      uint64_t v6 = swift_release();
      MEMORY[0x1F4188790](v6);
      withAnimation<A>(_:_:)();
      swift_release();
      break;
    case 2:
      return;
    case 3:
      if (one-time initialization token for press != -1) {
        swift_once();
      }
      MEMORY[0x1F4188790](static AnimationCurve.press);
      withAnimation<A>(_:_:)();
      uint64_t v7 = Animation.delay(_:)();
      MEMORY[0x1F4188790](v7);
      withAnimation<A>(_:_:)();
      swift_release();
      break;
    default:
      if (a5)
      {
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
      }
      break;
  }
}

uint64_t closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance AccessibilityQuickActionAnimationModifier@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = AccessibilityQuickActionAnimationModifier.body(content:)(*(unsigned char *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), a1).n128_u64[0];
  return result;
}

void static AccessibilityQuickActionPromptStyle._style.getter()
{
}

void __swiftcall AccessibilityQuickActionPromptStyle.init()()
{
}

void __swiftcall AccessibilityQuickActionOutlineStyle.init()()
{
}

void View.accessibilityQuickAction<A, B>(style:content:)()
{
}

void View.accessibilityQuickAction<A, B>(style:isActive:content:)()
{
}

uint64_t EnvironmentValues._accessibilityQuickActionsEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues._accessibilityQuickActionsEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues._accessibilityQuickActionsEnabled.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues._accessibilityQuickActionsEnabled.modify;
}

uint64_t EnvironmentValues._accessibilityQuickActionsEnabled.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>, (uint64_t)&type metadata for AccessibilityQuickActionsKey, (uint64_t)&protocol witness table for AccessibilityQuickActionsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1880AF744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm_5(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.accessibilityQuickActionsEnabled.getter, a3);
}

uint64_t sub_1880AF75C()
{
  return EnvironmentValues.accessibilityQuickActionsEnabled.setter();
}

uint64_t sub_1880AF784@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm_5(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues._accessibilityQuickActionsEnabled.getter, a3);
}

uint64_t sub_1880AF79C()
{
  return EnvironmentValues._accessibilityQuickActionsEnabled.setter();
}

uint64_t ObjC metadata update function for AccessibilityQuickActionProxy()
{
  return type metadata accessor for AccessibilityQuickActionProxy();
}

uint64_t type metadata accessor for AccessibilityQuickActionProxy()
{
  uint64_t result = type metadata singleton initialization cache for AccessibilityQuickActionProxy;
  if (!type metadata singleton initialization cache for AccessibilityQuickActionProxy) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AccessibilityQuickActionProxy()
{
  type metadata accessor for Published<AccessibilityQuickActionState>(319, &lazy cache variable for type metadata for Published<AccessibilityQuickActionState>, (uint64_t)&type metadata for AccessibilityQuickActionState, MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

ValueMetadata *type metadata accessor for _AccessibilityQuickActionStyle()
{
  return &type metadata for _AccessibilityQuickActionStyle;
}

uint64_t dispatch thunk of static AccessibilityQuickActionStyle._style.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionPromptStyle()
{
  return &type metadata for AccessibilityQuickActionPromptStyle;
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionOutlineStyle()
{
  return &type metadata for AccessibilityQuickActionOutlineStyle;
}

uint64_t sub_1880AF934()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for StyleContextWriter<AccessibilityQuickActionStyleContext>, MEMORY[0x1E4F41300], MEMORY[0x1E4F412F8], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<AccessibilityQuickActionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityQuickActionModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityQuickActionModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int64x2_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    uint64_t v9 = *a2;
    *int64x2_t v4 = *a2;
    int64x2_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v11 + 8) < 0xFFFFFFFFuLL)
    {
      long long v12 = *(_OWORD *)v11;
      *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
      *(_OWORD *)unint64_t v10 = v12;
    }
    else
    {
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = *(void *)(v11 + 8);
      *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
      swift_retain();
      swift_retain();
    }
    *(unsigned char *)(v10 + 17) = *(unsigned char *)(v11 + 17);
  }
  return v4;
}

uint64_t destroy for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  if (*(void *)(((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 8) < 0xFFFFFFFFuLL)
  {
    long long v9 = *(_OWORD *)v8;
    *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = v9;
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = *(void *)(v8 + 8);
    *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
    swift_retain();
    swift_retain();
  }
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  return a1;
}

uint64_t assignWithCopy for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 8);
  if (*(void *)(v7 + 8) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v7 = *(void *)v8;
      *(void *)(v7 + 8) = *(void *)(v8 + 8);
      *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    long long v10 = *(_OWORD *)v8;
    *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = v10;
    goto LABEL_8;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  *(void *)unint64_t v7 = *(void *)v8;
  swift_retain();
  swift_release();
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
LABEL_8:
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  return a1;
}

uint64_t initializeWithTake for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v9;
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  return a1;
}

uint64_t assignWithTake for AccessibilityQuickActionModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v8 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    long long v9 = *(_OWORD *)v8;
    *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = v9;
    goto LABEL_6;
  }
  *(void *)unint64_t v7 = *(void *)v8;
  swift_release();
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
LABEL_6:
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityQuickActionModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
    unsigned int v9 = (a2 - v7 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v8);
        if (*(unsigned __int16 *)((char *)a1 + v8)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1880B0200);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v8);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AccessibilityQuickActionModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 18;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v20 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0x7FFFFFFE)
              {
                *(void *)unint64_t v20 = 0;
                *(void *)(v20 + 8) = 0;
                *(unsigned char *)(v20 + 16) = 0;
                *(_DWORD *)unint64_t v20 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *(void *)(v20 + 8) = a2;
              }
            }
            else
            {
              uint64_t v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 0xFFFF) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v11;
  bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 18);
  if (v10 <= 3) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 > 3) {
    *(_DWORD *)a1 = v16;
  }
  else {
    *(_WORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1880B0430);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for _AccessibilityQuickActionStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880B0524);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _AccessibilityQuickActionStyle.RawValue()
{
  return &type metadata for _AccessibilityQuickActionStyle.RawValue;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityQuickActionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880B0628);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionState()
{
  return &type metadata for AccessibilityQuickActionState;
}

ValueMetadata *type metadata accessor for AccessibilityQuickActionsKey()
{
  return &type metadata for AccessibilityQuickActionsKey;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue()
{
  unint64_t result = lazy protocol witness table cache variable for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue;
  if (!lazy protocol witness table cache variable for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AccessibilityQuickActionStyle.RawValue and conformance _AccessibilityQuickActionStyle.RawValue);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityQuickActionModifier<A>()
{
  return &protocol witness table for AccessibilityQuickActionModifier<A>;
}

uint64_t key path getter for AccessibilityQuickActionProxy.state : AccessibilityQuickActionProxy@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for AccessibilityQuickActionProxy.state : AccessibilityQuickActionProxy()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier.ProxyTransform()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<AccessibilityQuickActionProxy>()
{
  if (!lazy cache variable for type metadata for Attribute<AccessibilityQuickActionProxy>)
  {
    type metadata accessor for AccessibilityQuickActionProxy();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<AccessibilityQuickActionProxy>);
    }
  }
}

uint64_t type metadata accessor for AccessibilityQuickActionModifier.ProxyModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionProxy.start()()
{
  return closure #1 in AccessibilityQuickActionProxy.start()(v0);
}

void *assignWithCopy for AccessibilityQuickActionProxyModifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AccessibilityQuickActionProxyModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

void *type metadata accessor for AccessibilityQuickActionProxyModifier()
{
  return &unk_1ED462AE0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionProxyModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityQuickActionModifier<A>.ProxyModifier()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityQuickActionModifier<A>.ProxyTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityQuickActionModifier<A>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionProxy.stop()()
{
  return closure #1 in AccessibilityQuickActionProxy.stop()(v0);
}

uint64_t specialized AccessibilityQuickActionModifier.ProxyModifier.value.getter()
{
  return 0;
}

uint64_t sub_1880B0AD4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionProxyModifier.body(content:)()
{
  swift_retain();
  AccessibilityQuickActionProxy.viewDidAppear()();

  return swift_release();
}

uint64_t partial apply for closure #2 in AccessibilityQuickActionProxyModifier.body(content:)()
{
  return closure #2 in AccessibilityQuickActionProxyModifier.body(content:)();
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier()
{
  return &unk_1ED464D58;
}

uint64_t sub_1880B0B64()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier, (uint64_t)&unk_1ED462AE0, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionProxyModifier and conformance AccessibilityQuickActionProxyModifier, (uint64_t)&unk_1ED462AE0, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionProxyModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionAnimationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1880B0F04()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AccessibilityQuickActionAnimationModifier.body(content:)(a1, *(unsigned __int8 *)(v2 + 16), a2);
}

void type metadata accessor for Published<AccessibilityQuickActionState>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void partial apply for closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(uint64_t a1, unsigned char *a2)
{
  closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(a1, a2, *(unsigned __int8 *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(void *)(v2 + 32));
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier, (uint64_t)&unk_1ED464D58, MEMORY[0x1E4F408E0]);
    type metadata accessor for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
    }
  }
}

void type metadata accessor for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>()
{
  if (!lazy cache variable for type metadata for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _OverlayPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>);
    }
  }
}

void type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>()
{
  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>();
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, MEMORY[0x1E4F417F8], (uint64_t)&unk_1ED464CD8, MEMORY[0x1E4F40578]);
    type metadata accessor for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>)
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F3FBA0];
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t)&unk_1ED464CD8, (uint64_t)&unk_1ED464B20, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t)&unk_1ED464CD8, (uint64_t)&unk_1ED464BA0, v0);
    unint64_t v1 = type metadata accessor for _ConditionalContent();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>();
    lazy protocol witness table accessor for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, MEMORY[0x1E4F417F8], (uint64_t)&unk_1ED464CD8, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>();
    lazy protocol witness table accessor for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t)&unk_1ED464B20, (void (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier);
    lazy protocol witness table accessor for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t)&unk_1ED464BA0, (void (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, a2, (uint64_t)&unk_1ED464CD8, a3, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing and conformance AccessibilityQuickActionAnimationModifier.FocusRing();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>);
    lazy protocol witness table accessor for type _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle> and conformance _ShapeView<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>> and conformance _OverlayPreferenceModifier<A, B>, (void (*)(uint64_t))type metadata accessor for _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier and conformance AccessibilityQuickActionAnimationModifier, (uint64_t)&unk_1ED464D58, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t partial apply for closure #3 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  return closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #2 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  return closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)(*(unsigned __int8 *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t outlined retain of Path.Storage(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.ActivateModifier()
{
  return &unk_1ED464BA0;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier()
{
  return &unk_1ED464B20;
}

uint64_t destroy for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1)
{
  outlined consume of Path.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);

  return outlined consume of Environment<Color?>.Content(v2, v3);
}

uint64_t initializeWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<Color?>.Content(v9, v10);
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = v10;
  return a1;
}

uint64_t assignWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v15 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<Color?>.Content(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(unsigned char *)(a1 + 48) = v15;
  outlined consume of Environment<Color?>.Content(v16, v17);
  return a1;
}

uint64_t assignWithTake for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  char v11 = *(unsigned char *)(a2 + 48);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v11;
  outlined consume of Environment<Color?>.Content(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 48) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.FocusRing()
{
  return &unk_1ED464CD8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>);
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ValueActionModifier2<AccessibilityQuickActionState>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState, (uint64_t)&type metadata for AccessibilityQuickActionState, MEMORY[0x1E4F408C8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier>, _OverlayPreferenceModifier<ViewRespondersKey, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<_ConditionalContent<EmptyView, AccessibilityQuickActionAnimationModifier.FocusRing>, _ConditionalContent<ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, ModifiedContent<AccessibilityQuickActionAnimationModifier.FocusRing, AccessibilityQuickActionAnimationModifier.ActivateModifier>>>>, _OpacityEffect>, _AnimationModifier<Bool>>, _AllowsHitTestingModifier>>>, _ScaleEffect>, _ValueActionModifier2<AccessibilityQuickActionState>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ValueActionModifier2<AccessibilityQuickActionState>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionState and conformance AccessibilityQuickActionState, (uint64_t)&type metadata for AccessibilityQuickActionState, MEMORY[0x1E4F408C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<AccessibilityQuickActionState> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionAnimationModifier.ActivateModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityQuickActionAnimationModifier.FocusRing()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)()
{
  return closure #1 in AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier.body(content:)(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)()
{
  return closure #1 in AccessibilityQuickActionAnimationModifier.ActivateModifier.body(content:)(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t destroy for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1)
{
  return outlined consume of Path.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  outlined copy of Path.Storage(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Path.Storage(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Path.Storage(v5, v6, v7, v8, v10);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityQuickActionAnimationModifier.FocusRing.Outline()
{
  return &unk_1ED464C58;
}

uint64_t sub_1880B2394()
{
  return lazy protocol witness table accessor for type _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView> and conformance StrokeShapeView<A, B, C>, (void (*)(uint64_t))type metadata accessor for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>);
}

void type metadata accessor for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>()
{
  if (!lazy cache variable for type metadata for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>)
  {
    lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
    unint64_t v0 = type metadata accessor for StrokeShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, Color, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline;
  if (!lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier, (uint64_t)&unk_1ED464B20);
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, _AnimationModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, a3, a4, a5, MEMORY[0x1E4F408E0]);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier, (uint64_t)&unk_1ED464B20);
    lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier and conformance AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier, (uint64_t)&unk_1ED464B20, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ContinuousOpacityModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier>, AccessibilityQuickActionAnimationModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>();
    type metadata accessor for EnvironmentPropertyKey<AccessibilityQuickActionsKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, _AnimationModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier, (uint64_t)&unk_1ED464BA0);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionProxyModifier>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, _ScaleEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect>, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier, (uint64_t)&unk_1ED464BA0);
    lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<AccessibilityQuickActionProxyModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.ActivateModifier and conformance AccessibilityQuickActionAnimationModifier.ActivateModifier, (uint64_t)&unk_1ED464BA0, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<AccessibilityQuickActionAnimationModifier.ActivateModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in AccessibilityQuickActionAnimationModifier.FocusRing.Outline()
{
  return lazy protocol witness table accessor for type _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>);
}

void type metadata accessor for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<AccessibilityQuickActionAnimationModifier.FocusRing.Outline, ForegroundStyle>);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for AccessibilityQuickActionAnimationModifier.FocusRing.Outline(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
  unint64_t result = lazy protocol witness table accessor for type AccessibilityQuickActionAnimationModifier.FocusRing.Outline and conformance AccessibilityQuickActionAnimationModifier.FocusRing.Outline();
  *(void *)(a1 + 16) = result;
  return result;
}

void static AccessibilityQuickActionOutlineStyle._style.getter()
{
}

uint64_t partial apply for closure #1 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  return partial apply for closure #3 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)();
}

uint64_t partial apply for closure #4 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)()
{
  return partial apply for closure #2 in closure #2 in AccessibilityQuickActionAnimationModifier.body(content:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityNodeList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2) & (v2 == v3);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AccessibilityNodesKey(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  a2(&v6);
  unint64_t v3 = v6;
  uint64_t v4 = v7;
  if (v7 <= *(void *)(a1 + 8)) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  *(void *)(a1 + 8) = v4;
  return specialized Array.append<A>(contentsOf:)(v3);
}

Swift::Void __swiftcall _ViewInputs.enableAccessibility()()
{
}

void *assignWithCopy for AccessibilityNodeList(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for AccessibilityNodeList(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *specialized UIView.firstAncestorWhere(_:)(void *a1)
{
  self;
  if (swift_dynamicCastObjCClass() || (self, swift_dynamicCastObjCClass()))
  {
    id v2 = a1;
    return a1;
  }
  id v4 = objc_msgSend(a1, sel_superview);
  a1 = v4;
  if (!v4) {
    return a1;
  }
  uint64_t v5 = specialized UIView.firstAncestorWhere(_:)(v4);

  return (void *)v5;
}

{
  return specialized UIView.firstAncestorWhere(_:)(a1, (uint64_t (*)(id))specialized UIView.firstAncestorWhere(_:));
}

void *specialized UIView.firstAncestorWhere(_:)(void *a1, uint64_t (*a2)(id))
{
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    id v4 = a1;
  }
  else {
    id v4 = 0;
  }
  if (v4)
  {
    id v5 = a1;
    return a1;
  }
  id v7 = objc_msgSend(a1, sel_superview);
  a1 = v7;
  if (!v7) {
    return a1;
  }
  uint64_t v8 = a2(v7);

  return (void *)v8;
}

uint64_t UIView.constrainToView(_:exceptEdges:identifier:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = v4;
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  uint64_t v33 = MEMORY[0x1E4FBC860];
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    id v9 = objc_msgSend(v4, sel_topAnchor);
    id v10 = objc_msgSend(a1, sel_topAnchor);
    id v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

    objc_msgSend(v11, sel_setActive_, 1);
    if (a4)
    {
      v12._countAndFlagsBits = a3;
      v12._object = a4;
      String.append(_:)(v12);
      unsigned __int8 v13 = (void *)MEMORY[0x18C115780](762343284, 0xE400000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      unsigned __int8 v13 = 0;
    }
    objc_msgSend(v11, sel_setIdentifier_, v13);

    id v14 = v11;
    MEMORY[0x18C115B40]();
    if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    id v15 = objc_msgSend(v5, sel_leadingAnchor);
    id v16 = objc_msgSend(a1, sel_leadingAnchor);
    id v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

    objc_msgSend(v17, sel_setActive_, 1);
    if (a4)
    {
      v18._countAndFlagsBits = a3;
      v18._object = a4;
      String.append(_:)(v18);
      uint64_t v19 = (void *)MEMORY[0x18C115780](0x2D676E696461656CLL, 0xE800000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v19 = 0;
    }
    objc_msgSend(v17, sel_setIdentifier_, v19);

    id v20 = v17;
    MEMORY[0x18C115B40]();
    if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    id v21 = objc_msgSend(v5, sel_bottomAnchor);
    id v22 = objc_msgSend(a1, sel_bottomAnchor);
    id v23 = objc_msgSend(v21, sel_constraintEqualToAnchor_, v22);

    objc_msgSend(v23, sel_setActive_, 1);
    if (a4)
    {
      v24._countAndFlagsBits = a3;
      v24._object = a4;
      String.append(_:)(v24);
      long long v25 = (void *)MEMORY[0x18C115780](0x2D6D6F74746F62, 0xE700000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v25 = 0;
    }
    objc_msgSend(v23, sel_setIdentifier_, v25);

    id v26 = v23;
    MEMORY[0x18C115B40]();
    if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if ((Edge.Set.contains(_:)() & 1) == 0)
  {
    id v27 = objc_msgSend(v5, sel_trailingAnchor);
    id v28 = objc_msgSend(a1, sel_trailingAnchor);
    id v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_, v28);

    objc_msgSend(v29, sel_setActive_, 1);
    if (a4)
    {
      v30._countAndFlagsBits = a3;
      v30._object = a4;
      String.append(_:)(v30);
      a4 = (void *)MEMORY[0x18C115780](0x676E696C69617274, 0xE90000000000002DLL);
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v29, sel_setIdentifier_, a4);

    id v31 = v29;
    MEMORY[0x18C115B40]();
    if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return v33;
}

uint64_t UIViewController.firstDescendantWhere(_:)(uint64_t (*a1)(void *), uint64_t a2)
{
  uint64_t v3 = (uint64_t)v2;
  if (a1(v2))
  {
    id v6 = v2;
  }
  else
  {
    id v7 = objc_msgSend(v2, sel_childViewControllers);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62) {
      goto LABEL_16;
    }
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v9)
    {
      uint64_t v10 = 4;
      while (1)
      {
        id v11 = (v8 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18C117680](v10 - 4, v8)
            : *(id *)(v8 + 8 * v10);
        Swift::String v12 = v11;
        uint64_t v13 = v10 - 3;
        if (__OFADD__(v10 - 4, 1)) {
          break;
        }
        uint64_t v3 = UIViewController.firstDescendantWhere(_:)(a1, a2);

        if (v3)
        {
          swift_bridgeObjectRelease();
          return v3;
        }
        ++v10;
        if (v13 == v9) {
          goto LABEL_12;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *specialized UIView.firstDescendantWhere(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for PortalGroupMarkerView();
  uint64_t v6 = swift_dynamicCastClass();
  if (v6
    && *(_DWORD *)(v6 + OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60321PortalGroupMarkerView_id) == a2
    && (a3 & ~*(void *)(v6 + OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60321PortalGroupMarkerView_kind)) == 0)
  {
    id v7 = a1;
  }
  else
  {
    id v8 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62) {
      goto LABEL_18;
    }
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v10)
    {
      uint64_t v11 = 4;
      while (1)
      {
        id v12 = (v9 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18C117680](v11 - 4, v9)
            : *(id *)(v9 + 8 * v11);
        uint64_t v13 = v12;
        uint64_t v14 = v11 - 3;
        if (__OFADD__(v11 - 4, 1)) {
          break;
        }
        a1 = (void *)specialized UIView.firstDescendantWhere(_:)(v12, a2, a3);

        if (a1)
        {
          swift_bridgeObjectRelease();
          return a1;
        }
        ++v11;
        if (v14 == v10) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  return a1;
}

id specialized implicit closure #1 in UIView.ancestors.getter@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_superview);
  *a2 = result;
  return result;
}

void specialized UIView.forEachDescendant(_:)(void *a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  swift_getObjectType();
  uint64_t v6 = swift_conformsToProtocol2();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v6) {
    id v8 = a1;
  }
  else {
    id v8 = 0;
  }
  if (v8)
  {
    id v9 = a1;
    a2(v8, v7);
  }
  id v10 = objc_msgSend(a1, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v12) {
      goto LABEL_18;
    }
  }
  if (v12 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v12; ++i)
  {
    if ((v11 & 0xC000000000000001) != 0) {
      id v14 = (id)MEMORY[0x18C117680](i, v11);
    }
    else {
      id v14 = *(id *)(v11 + 8 * i + 32);
    }
    id v15 = v14;
    specialized UIView.forEachDescendant(_:)(v14, a2, a3);
  }
LABEL_18:

  swift_bridgeObjectRelease();
}

id _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B108UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC39MatchedTransitionDestinationMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(void *a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  return _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_nTm(a1, a2, a3, (void (*)(void))type metadata accessor for MatchedTransitionDestinationMarkingView, (uint64_t (*)(id, uint64_t (*)(void), uint64_t))_sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B108UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC39MatchedTransitionDestinationMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n);
}

BOOL static KeyPress.Result.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t View.onKeyPress(_:action:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a5;
  uint64_t v18 = a4;
  uint64_t v8 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1F4188790](v8);
  id v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  type metadata accessor for _ContiguousArrayStorage<TableRowList>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyEquivalent>, (uint64_t)&type metadata for KeyEquivalent, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = v11;
  *(void *)(inited + 40) = v12;
  Swift::Int v14 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  swift_arrayDestroy();
  *id v10 = v14;
  swift_storeEnumTagMultiPayload();
  uint64_t v15 = unk_1ED465FD0;
  if ((unk_1ED465FD0 & ~qword_1ED465FC8) == 0) {
    uint64_t v15 = 0;
  }
  uint64_t v20 = v15 | qword_1ED465FC8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  swift_retain();
  View.onKeyPress(subject:phases:action:)((uint64_t)v10, &v20, (uint64_t)partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:), v16, v18, v19);
  swift_release();
  return outlined destroy of KeyPress.Handler.Subject((uint64_t)v10, type metadata accessor for KeyPress.Handler.Subject);
}

uint64_t View.onKeyPress(subject:phases:action:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for KeyPressModifier(0);
  MEMORY[0x1F4188790](v12);
  Swift::Int v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a2;
  outlined init with copy of KeyPress.Handler(a1, (uint64_t)v14, type metadata accessor for KeyPress.Handler.Subject);
  uint64_t v16 = type metadata accessor for KeyPress.Handler(0);
  *(void *)&v14[*(int *)(v16 + 20)] = v15;
  id v17 = &v14[*(int *)(v16 + 24)];
  *(void *)id v17 = a3;
  *((void *)v17 + 1) = a4;
  swift_retain();
  MEMORY[0x18C113660](v14, a5, v12, a6);
  return outlined destroy of KeyPress.Handler.Subject((uint64_t)v14, type metadata accessor for KeyPressModifier);
}

uint64_t View.onKeyPress(_:phases:action:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v9 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = *a2;
  type metadata accessor for _ContiguousArrayStorage<TableRowList>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyEquivalent>, (uint64_t)&type metadata for KeyEquivalent, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = v12;
  *(void *)(inited + 40) = v13;
  Swift::Int v16 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_bridgeObjectRetain();
  swift_arrayDestroy();
  *uint64_t v11 = v16;
  swift_storeEnumTagMultiPayload();
  uint64_t v22 = v14;
  View.onKeyPress(subject:phases:action:)((uint64_t)v11, &v22, a3, v19, v20, v21);
  return outlined destroy of KeyPress.Handler.Subject((uint64_t)v11, type metadata accessor for KeyPress.Handler.Subject);
}

void static KeyPress.Phases.down.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static KeyPress.Phases.repeat.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t View.onKeyPress(phases:action:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *a1;
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = v13;
  View.onKeyPress(subject:phases:action:)((uint64_t)v12, &v16, a2, a3, a4, a5);
  return outlined destroy of KeyPress.Handler.Subject((uint64_t)v12, type metadata accessor for KeyPress.Handler.Subject);
}

void KeyPress.phase.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t KeyPress.key.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t KeyPress.characters.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KeyPress.modifiers.getter()
{
  return *(void *)(v0 + 40);
}

SwiftUI::KeyPress::Phases __swiftcall KeyPress.Phases.init(rawValue:)(SwiftUI::KeyPress::Phases rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static KeyPress.Phases.up.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static KeyPress.Phases.all.getter(void *a1@<X8>)
{
  *a1 = 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t KeyPress.Phases.debugDescription.getter()
{
  uint64_t v1 = *v0;
  if (*v0 == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v4 = *((void *)v2 + 2);
    unint64_t v3 = *((void *)v2 + 3);
    unint64_t v5 = v4 + 1;
    if (v4 >= v3 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v5;
    uint64_t v6 = &v2[16 * v4];
    uint64_t v7 = 1819042094;
    unint64_t v8 = 0xE400000000000000;
    goto LABEL_23;
  }
  if (v1)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v16 = *((void *)v2 + 2);
    unint64_t v15 = *((void *)v2 + 3);
    if (v16 >= v15 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v16 + 1;
    id v17 = &v2[16 * v16];
    *((void *)v17 + 4) = 0x6E776F642ELL;
    *((void *)v17 + 5) = 0xE500000000000000;
    if ((v1 & 2) == 0)
    {
LABEL_7:
      if ((v1 & 4) == 0) {
        goto LABEL_8;
      }
LABEL_18:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
      }
      unint64_t v22 = *((void *)v2 + 2);
      unint64_t v21 = *((void *)v2 + 3);
      unint64_t v5 = v22 + 1;
      if (v22 >= v21 >> 1) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v2);
      }
      *((void *)v2 + 2) = v5;
      uint64_t v6 = &v2[16 * v22];
      uint64_t v7 = 7370030;
      unint64_t v8 = 0xE300000000000000;
LABEL_23:
      *((void *)v6 + 4) = v7;
      *((void *)v6 + 5) = v8;
      if (v5 == 1) {
        goto LABEL_24;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = (char *)MEMORY[0x1E4FBC860];
    if ((v1 & 2) == 0) {
      goto LABEL_7;
    }
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v19 = *((void *)v2 + 2);
  unint64_t v18 = *((void *)v2 + 3);
  if (v19 >= v18 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v19 + 1;
  uint64_t v20 = &v2[16 * v19];
  *((void *)v20 + 4) = 0x7461657065722ELL;
  *((void *)v20 + 5) = 0xE700000000000000;
  if ((v1 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if (*((void *)v2 + 2) == 1)
  {
LABEL_24:
    uint64_t v14 = *((void *)v2 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v14;
  }
LABEL_9:
  type metadata accessor for _ContiguousArrayStorage<TableRowList>(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  swift_bridgeObjectRetain();
  uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 93;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return 91;
}

uint64_t KeyPress.Phases.rawValue.getter()
{
  return *(void *)v0;
}

void KeyPress.Result.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int KeyPress.Result.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t KeyPress.debugDescription.getter()
{
  uint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt v1 = *(void **)(v0 + 32);
  _StringGuts.grow(_:)(18);
  v3._countAndFlagsBits = 0x737365725079654BLL;
  v3._object = (void *)0xE900000000000028;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 2236460;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v2;
  v5._object = v1;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 10530;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance KeyPressModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance KeyPressModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance KeyPressModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance KeyPressModifier()
{
  lazy protocol witness table accessor for type UIGestureRecognizer and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type KeyPressModifier and conformance KeyPressModifier, (void (*)(uint64_t))type metadata accessor for KeyPressModifier);

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t View.onKeyPress(keys:phases:action:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = *a2;
  void *v14 = a1;
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = v15;
  swift_bridgeObjectRetain();
  View.onKeyPress(subject:phases:action:)((uint64_t)v14, &v18, a3, a4, a5, a6);
  return outlined destroy of KeyPress.Handler.Subject((uint64_t)v14, type metadata accessor for KeyPress.Handler.Subject);
}

uint64_t View.onKeyPress(characters:phases:action:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for KeyPress.Handler.Subject(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a2;
  uint64_t v16 = type metadata accessor for CharacterSet();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, a1, v16);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = v15;
  View.onKeyPress(subject:phases:action:)((uint64_t)v14, &v19, a3, a4, a5, a6);
  return outlined destroy of KeyPress.Handler.Subject((uint64_t)v14, type metadata accessor for KeyPress.Handler.Subject);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v1 = a1;
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      type metadata accessor for _SetStorage<UIGestureRecognizer>();
      uint64_t v3 = static _SetStorage.allocate(capacity:)();
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  uint64_t v7 = v3 + 56;
  uint64_t v43 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    unint64_t v41 = v1;
    while (1)
    {
      uint64_t v9 = MEMORY[0x18C117680](v8, v1);
      BOOL v10 = __OFADD__(v8++, 1);
      if (v10)
      {
        __break(1u);
        goto LABEL_37;
      }
      uint64_t v11 = v9;
      Swift::Int v12 = NSObject._rawHashValue(seed:)(*(void *)(v3 + 40));
      uint64_t v13 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v14 = v12 & ~v13;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
      uint64_t v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
      {
        type metadata accessor for UIGestureRecognizer();
        id v18 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19)
        {
LABEL_11:
          swift_unknownObjectRelease();
          unint64_t v1 = v41;
          goto LABEL_12;
        }
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)(v7 + 8 * (v14 >> 6));
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(*(void *)(v3 + 48) + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        unint64_t v1 = v41;
      }
      *(void *)(v7 + 8 * v15) = v17 | v16;
      *(void *)(*(void *)(v3 + 48) + 8 * v14) = v11;
      uint64_t v23 = *(void *)(v3 + 16);
      BOOL v10 = __OFADD__(v23, 1);
      uint64_t v24 = v23 + 1;
      if (v10) {
        goto LABEL_38;
      }
      *(void *)(v3 + 16) = v24;
LABEL_12:
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  uint64_t v42 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = *(void *)(v3 + 40);
    id v27 = *(id *)(v1 + 32 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      type metadata accessor for UIGestureRecognizer();
      id v34 = *(id *)(*(void *)(v3 + 48) + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35) {
        goto LABEL_24;
      }
      uint64_t v36 = ~v29;
      unint64_t v30 = (v30 + 1) & v36;
      unint64_t v31 = v30 >> 6;
      uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
      uint64_t v33 = 1 << v30;
      if ((v32 & (1 << v30)) != 0)
      {
        while (1)
        {
          id v37 = *(id *)(*(void *)(v3 + 48) + 8 * v30);
          char v38 = static NSObject.== infix(_:_:)();

          if (v38) {
            break;
          }
          unint64_t v30 = (v30 + 1) & v36;
          unint64_t v31 = v30 >> 6;
          uint64_t v32 = *(void *)(v7 + 8 * (v30 >> 6));
          uint64_t v33 = 1 << v30;
          if ((v32 & (1 << v30)) == 0) {
            goto LABEL_32;
          }
        }
LABEL_24:

        uint64_t v5 = v43;
        goto LABEL_25;
      }
LABEL_32:
      uint64_t v5 = v43;
    }
    *(void *)(v7 + 8 * v31) = v33 | v32;
    *(void *)(*(void *)(v3 + 48) + 8 * v30) = v27;
    uint64_t v39 = *(void *)(v3 + 16);
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_39;
    }
    *(void *)(v3 + 16) = v40;
LABEL_25:
    if (++v25 == v5) {
      return;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_1880B5508()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type KeyPress.Phases and conformance KeyPress.Phases()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases;
  if (!lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Phases and conformance KeyPress.Phases);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KeyPress.Result and conformance KeyPress.Result()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyPress.Result and conformance KeyPress.Result;
  if (!lazy protocol witness table cache variable for type KeyPress.Result and conformance KeyPress.Result)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyPress.Result and conformance KeyPress.Result);
  }
  return result;
}

uint64_t destroy for KeyPress()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for KeyPress(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KeyPress(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

uint64_t assignWithTake for KeyPress(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for KeyPress()
{
  return &type metadata for KeyPress;
}

ValueMetadata *type metadata accessor for KeyPress.Phases()
{
  return &type metadata for KeyPress.Phases;
}

unsigned char *storeEnumTagSinglePayload for KeyPress.Result(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880B5940);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyPress.Result()
{
  return &type metadata for KeyPress.Result;
}

uint64_t sub_1880B5978()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for KeyPressModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for KeyPressModifier);
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyPressModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for KeyPress.Handler(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for KeyPress.Handler.Subject(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    uint64_t v11 = *(int *)(v6 + 24);
    Swift::Int v12 = (uint64_t *)((char *)a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *Swift::Int v12 = *v13;
    v12[1] = v14;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for KeyPressModifier(uint64_t a1)
{
  type metadata accessor for KeyPress.Handler.Subject(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = type metadata accessor for CharacterSet();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for KeyPress.Handler(0);

  return swift_release();
}

void *initializeWithCopy for KeyPressModifier(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for KeyPress.Handler.Subject(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = type metadata accessor for KeyPress.Handler(0);
  *(void *)((char *)a1 + *(int *)(v7 + 20)) = *(void *)((char *)a2 + *(int *)(v7 + 20));
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_retain();
  return a1;
}

void *assignWithCopy for KeyPressModifier(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of KeyPress.Handler.Subject((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    uint64_t v4 = type metadata accessor for KeyPress.Handler.Subject(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v7 = type metadata accessor for KeyPress.Handler(0);
  *(void *)((char *)a1 + *(int *)(v7 + 20)) = *(void *)((char *)a2 + *(int *)(v7 + 20));
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for KeyPressModifier(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for KeyPress.Handler.Subject(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for CharacterSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  uint64_t v6 = type metadata accessor for KeyPress.Handler(0);
  *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
  *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
  return a1;
}

char *assignWithTake for KeyPressModifier(char *a1, char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of KeyPress.Handler.Subject((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    uint64_t v4 = type metadata accessor for KeyPress.Handler.Subject(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for CharacterSet();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  uint64_t v6 = type metadata accessor for KeyPress.Handler(0);
  *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
  *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyPressModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1880B6060);
}

uint64_t sub_1880B6060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyPress.Handler(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for KeyPressModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1880B60E0);
}

uint64_t sub_1880B60E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyPress.Handler(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for KeyPressModifier()
{
  uint64_t result = type metadata accessor for KeyPress.Handler(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyPress.Handler(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for KeyPress.Handler.Subject(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v11 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    Swift::Int v12 = (uint64_t *)((char *)a1 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = v13[1];
    *Swift::Int v12 = *v13;
    v12[1] = v14;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for KeyPress.Handler(uint64_t a1)
{
  type metadata accessor for KeyPress.Handler.Subject(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v3 = type metadata accessor for CharacterSet();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
  }

  return swift_release();
}

void *initializeWithCopy for KeyPress.Handler(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for KeyPress.Handler.Subject(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_retain();
  return a1;
}

void *assignWithCopy for KeyPress.Handler(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of KeyPress.Handler.Subject((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    uint64_t v6 = type metadata accessor for KeyPress.Handler.Subject(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (void *)((char *)a1 + v9);
  uint64_t v11 = (void *)((char *)a2 + v9);
  uint64_t v12 = v11[1];
  *uint64_t v10 = *v11;
  v10[1] = v12;
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for KeyPress.Handler(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for KeyPress.Handler.Subject(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for CharacterSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  return a1;
}

char *assignWithTake for KeyPress.Handler(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of KeyPress.Handler.Subject((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    uint64_t v6 = type metadata accessor for KeyPress.Handler.Subject(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for CharacterSet();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  *(_OWORD *)&a1[v8] = *(_OWORD *)&a2[v8];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyPress.Handler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1880B680C);
}

uint64_t sub_1880B680C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for KeyPress.Handler.Subject(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for KeyPress.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1880B68E0);
}

uint64_t sub_1880B68E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for KeyPress.Handler.Subject(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyPress.Handler.Subject(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = type metadata accessor for CharacterSet();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for KeyPress.Handler.Subject(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for CharacterSet();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  else if (!result)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for KeyPress.Handler.Subject(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for KeyPress.Handler.Subject(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of KeyPress.Handler.Subject((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for KeyPress.Handler.Subject(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for CharacterSet();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for KeyPress.Handler.Subject(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of KeyPress.Handler.Subject((uint64_t)a1, type metadata accessor for KeyPress.Handler.Subject);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for CharacterSet();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in KeyPressModifier()
{
  return &protocol witness table for KeyPressModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in KeyPressModifier()
{
  return &protocol witness table for KeyPressModifier;
}

void type metadata accessor for _SetStorage<NSURLResourceKey>()
{
  if (!lazy cache variable for type metadata for _SetStorage<NSURLResourceKey>)
  {
    type metadata accessor for NSURLResourceKey(255);
    lazy protocol witness table accessor for type UIGestureRecognizer and conformance NSObject(&lazy protocol witness table cache variable for type NSURLResourceKey and conformance NSURLResourceKey, type metadata accessor for NSURLResourceKey);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type UIGestureRecognizer and conformance NSObject(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized static KeyPressModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for KeyPress.Handler(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyPressModifier(0);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of KeyPress.Handler(Value, (uint64_t)v6, type metadata accessor for KeyPress.Handler);
  uint64_t v8 = *(void *)(a2 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v8)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v9 = v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
  }
  _OWORD v9[2] = v11 + 1;
  outlined init with take of KeyPress.Handler((uint64_t)v6, (uint64_t)v9+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11);
  uint64_t v14 = v9;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v8)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t outlined init with take of KeyPress.Handler(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeyPress.Handler(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _SetStorage<UIGestureRecognizer>()
{
  if (!lazy cache variable for type metadata for _SetStorage<UIGestureRecognizer>)
  {
    type metadata accessor for UIGestureRecognizer();
    lazy protocol witness table accessor for type UIGestureRecognizer and conformance NSObject(&lazy protocol witness table cache variable for type UIGestureRecognizer and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UIGestureRecognizer);
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<UIGestureRecognizer>);
    }
  }
}

unint64_t type metadata accessor for UIGestureRecognizer()
{
  unint64_t result = lazy cache variable for type metadata for UIGestureRecognizer;
  if (!lazy cache variable for type metadata for UIGestureRecognizer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.KeyPressHandlersKey()
{
  return &type metadata for EnvironmentValues.KeyPressHandlersKey;
}

unint64_t lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent;
  if (!lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent;
  if (!lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent and conformance PresentationDetent);
  }
  return result;
}

uint64_t Gauge.init<A>(value:in:label:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, double a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  double v47 = a5;
  uint64_t v48 = a7;
  uint64_t v44 = a4;
  uint64_t v45 = a3;
  uint64_t v51 = a9;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v13 - 8);
  uint64_t v50 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v46 = (char *)v42 - v14;
  v42[2] = a8;
  uint64_t v15 = *(void *)(a8 + 16);
  v42[4] = *(void *)(*(void *)(*(void *)(v15 + 16) + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v43 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v17);
  v42[0] = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  id v21 = (char *)v42 - v20;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v42 - v23;
  v42[1] = v15;
  v42[3] = *(void *)(*(void *)(v15 + 24) + 8);
  uint64_t v25 = type metadata accessor for ClosedRange();
  uint64_t v52 = a1;
  uint64_t v26 = a2;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    id v27 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v28 = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v29 = v43;
  unint64_t v30 = *(void (**)(char *, uint64_t))(v43 + 8);
  v30(v21, a6);
  if (v28)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    unint64_t v31 = (char *)v42[0];
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v30(v21, a6);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v21, v31, a6);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    double v32 = v53;
    if (v53 < 0.0) {
      double v32 = 0.0;
    }
    if (v32 <= 1.0) {
      double v33 = v32;
    }
    else {
      double v33 = 1.0;
    }
    id v34 = v31;
    char v35 = v52;
    v30(v34, a6);
    uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v30)(v24, a6);
  }
  else
  {
    uint64_t v36 = ((uint64_t (*)(char *, uint64_t))v30)(v24, a6);
    double v33 = 1.0;
    char v35 = v52;
  }
  id v37 = v51;
  *uint64_t v51 = v33;
  char v38 = v46;
  v45(v36);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v26, v25);
  v30(v35, a6);
  double v39 = v47;
  (*(void (**)(char *, void, uint64_t, double))(*(void *)(*(void *)&v47 - 8) + 56))(v38, 0, 1, COERCE_DOUBLE(*(void *)&v47));
  double v53 = v39;
  uint64_t v54 = MEMORY[0x1E4F417F8];
  uint64_t v55 = MEMORY[0x1E4F417F8];
  uint64_t v56 = MEMORY[0x1E4F417F8];
  uint64_t v57 = v48;
  uint64_t v58 = MEMORY[0x1E4F417F0];
  uint64_t v59 = MEMORY[0x1E4F417F0];
  uint64_t v60 = MEMORY[0x1E4F417F0];
  uint64_t v40 = (int *)type metadata accessor for Gauge();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))((char *)v37 + v40[21], v38, v50);
  *((unsigned char *)v37 + v40[22]) = 1;
  *((unsigned char *)v37 + v40[23]) = 1;
  *((unsigned char *)v37 + v40[24]) = 1;
  *((unsigned char *)v37 + v40[25]) = 1;
  return result;
}

uint64_t type metadata accessor for Gauge()
{
  return swift_getGenericMetadata();
}

uint64_t Gauge.init<A>(value:in:label:currentValueLabel:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, double a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  double v53 = a7;
  uint64_t v54 = a6;
  uint64_t v55 = a5;
  uint64_t v51 = a4;
  uint64_t v52 = a3;
  uint64_t v59 = a8;
  uint64_t v60 = a9;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v57 = *(void *)(v15 - 8);
  uint64_t v58 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v56 = (char *)&v45 - v16;
  uint64_t v47 = a13;
  uint64_t v17 = *(void *)(a13 + 16);
  uint64_t v18 = *(void *)(*(void *)(v17 + 16) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v50 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v46 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v45 - v23;
  MEMORY[0x1F4188790](v25);
  id v27 = (char *)&v45 - v26;
  uint64_t v45 = v17;
  uint64_t v28 = type metadata accessor for ClosedRange();
  int v62 = a1;
  uint64_t v63 = v28;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    uint64_t v29 = static Log.runtimeIssuesLog.getter();
    uint64_t v61 = v18;
    unint64_t v30 = (void *)v29;
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v49 = a12;
  uint64_t v48 = a11;
  uint64_t v61 = a2;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v31 = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v32 = v50;
  double v33 = *(void (**)(char *, uint64_t))(v50 + 8);
  v33(v24, a10);
  if (v31)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    id v34 = v46;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v33(v24, a10);
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v24, v34, a10);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    double v35 = v64;
    if (v64 < 0.0) {
      double v35 = 0.0;
    }
    if (v35 <= 1.0) {
      double v36 = v35;
    }
    else {
      double v36 = 1.0;
    }
    v33(v34, a10);
    v33(v27, a10);
  }
  else
  {
    v33(v27, a10);
    double v36 = 1.0;
  }
  uint64_t v38 = v59;
  id v37 = v60;
  *uint64_t v60 = v36;
  double v39 = v53;
  double v64 = v53;
  uint64_t v65 = v38;
  uint64_t v66 = MEMORY[0x1E4F417F8];
  uint64_t v67 = MEMORY[0x1E4F417F8];
  uint64_t v68 = v48;
  uint64_t v69 = v49;
  uint64_t v70 = MEMORY[0x1E4F417F0];
  uint64_t v71 = MEMORY[0x1E4F417F0];
  uint64_t v40 = (int *)type metadata accessor for Gauge();
  unint64_t v41 = (char *)v37 + v40[21];
  v52();
  uint64_t v42 = (*(uint64_t (**)(char *, void, uint64_t, double))(*(void *)(*(void *)&v39 - 8) + 56))(v41, 0, 1, COERCE_DOUBLE(*(void *)&v39));
  uint64_t v43 = v56;
  v55(v42);
  (*(void (**)(uint64_t))(*(void *)(v63 - 8) + 8))(v61);
  v33(v62, a10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v43, 0, 1, v38);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v57 + 32))((char *)v37 + v40[22], v43, v58);
  *((unsigned char *)v37 + v40[23]) = 1;
  *((unsigned char *)v37 + v40[24]) = 1;
  *((unsigned char *)v37 + v40[25]) = 1;
  return result;
}

uint64_t Gauge.init<A>(value:in:label:currentValueLabel:minimumValueLabel:maximumValueLabel:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, double *a9@<X8>, void (*a10)(uint64_t), uint64_t a11, double a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v72 = a8;
  uint64_t v73 = a7;
  uint64_t v69 = a6;
  uint64_t v70 = a5;
  uint64_t v66 = a4;
  uint64_t v67 = a3;
  unsigned int v80 = a9;
  uint64_t v71 = a13;
  double v68 = a12;
  uint64_t v74 = a11;
  unsigned int v75 = a10;
  uint64_t v79 = a14;
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v77 = *(void *)(v21 - 8);
  uint64_t v78 = v21;
  MEMORY[0x1F4188790](v21);
  unsigned int v76 = (char *)&v56 - v22;
  uint64_t v59 = a19;
  uint64_t v23 = *(void *)(a19 + 16);
  uint64_t v61 = *(void *)(*(void *)(v23 + 16) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v65 = *(void *)(a15 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v57 = (char *)&v56 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v56 - v28;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v56 - v31;
  uint64_t v58 = v23;
  uint64_t v33 = type metadata accessor for ClosedRange();
  unsigned __int8 v81 = a1;
  uint64_t v82 = v33;
  uint64_t v34 = a2;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    double v35 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v64 = a18;
  uint64_t v63 = a17;
  uint64_t v62 = a16;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v36 = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v37 = v65;
  uint64_t v38 = *(void (**)(char *, uint64_t))(v65 + 8);
  v38(v29, a15);
  uint64_t v60 = v34;
  if (v36)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    double v39 = v57;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v38(v29, a15);
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v29, v39, a15);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    double v40 = v83;
    if (v83 < 0.0) {
      double v40 = 0.0;
    }
    if (v40 <= 1.0) {
      double v41 = v40;
    }
    else {
      double v41 = 1.0;
    }
    v38(v39, a15);
    v38(v32, a15);
  }
  else
  {
    v38(v32, a15);
    double v41 = 1.0;
  }
  uint64_t v42 = v79;
  uint64_t v43 = v80;
  *unsigned int v80 = v41;
  double v44 = v68;
  uint64_t v45 = v71;
  double v83 = v68;
  uint64_t v84 = v71;
  uint64_t v85 = v42;
  uint64_t v86 = MEMORY[0x1E4F417F8];
  uint64_t v87 = v62;
  uint64_t v88 = v63;
  uint64_t v89 = v64;
  uint64_t v90 = MEMORY[0x1E4F417F0];
  uint64_t v46 = (int *)type metadata accessor for Gauge();
  uint64_t v47 = (char *)v43 + v46[21];
  v67();
  uint64_t v48 = (*(uint64_t (**)(char *, void, uint64_t, double))(*(void *)(*(void *)&v44 - 8) + 56))(v47, 0, 1, COERCE_DOUBLE(*(void *)&v44));
  uint64_t v49 = (char *)v43 + v46[22];
  v70(v48);
  uint64_t v50 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v49, 0, 1, v45);
  uint64_t v51 = (char *)v43 + v46[23];
  v73(v50);
  uint64_t v52 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
  uint64_t v53 = v52(v51, 0, 1, v42);
  uint64_t v54 = v76;
  v75(v53);
  (*(void (**)(uint64_t))(*(void *)(v82 - 8) + 8))(v60);
  v38(v81, a15);
  v52(v54, 0, 1, v42);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v77 + 32))((char *)v43 + v46[24], v54, v78);
  *((unsigned char *)v43 + v46[25]) = 1;
  return result;
}

uint64_t Gauge.init<A>(value:in:label:currentValueLabel:markedValueLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, double *a9@<X8>, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v66 = a8;
  uint64_t v67 = a7;
  uint64_t v63 = a6;
  uint64_t v64 = a5;
  uint64_t v60 = a4;
  uint64_t v61 = a3;
  uint64_t v71 = a9;
  uint64_t v62 = a11;
  double v59 = a10;
  uint64_t v69 = a12;
  uint64_t v70 = type metadata accessor for Optional();
  uint64_t v68 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v65 = (char *)v50 - v19;
  v50[1] = a17;
  uint64_t v20 = *(void *)(a17 + 16);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v20 + 16) + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v58 = *(void *)(a13 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v51 = (char *)v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v50 - v25;
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)v50 - v28;
  uint64_t v52 = v20;
  uint64_t v30 = type metadata accessor for ClosedRange();
  uint64_t v72 = a1;
  uint64_t v73 = v30;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    uint64_t v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v56 = a16;
  uint64_t v55 = a15;
  uint64_t v54 = a14;
  uint64_t v32 = a2;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v33 = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v34 = v58;
  double v35 = *(void (**)(char *, uint64_t))(v58 + 8);
  v35(v26, a13);
  uint64_t v57 = (void (*)(uint64_t, uint64_t))v35;
  uint64_t v53 = v32;
  if (v33)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    char v36 = v51;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v35(v26, a13);
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v26, v36, a13);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    double v37 = v74;
    if (v74 < 0.0) {
      double v37 = 0.0;
    }
    if (v37 <= 1.0) {
      double v38 = v37;
    }
    else {
      double v38 = 1.0;
    }
    v35(v36, a13);
    v35(v29, a13);
  }
  else
  {
    v35(v29, a13);
    double v38 = 1.0;
  }
  double v39 = v71;
  *uint64_t v71 = v38;
  double v40 = v59;
  uint64_t v41 = v62;
  double v74 = v59;
  uint64_t v75 = v62;
  uint64_t v42 = v69;
  uint64_t v76 = MEMORY[0x1E4F417F8];
  uint64_t v77 = v69;
  uint64_t v78 = v54;
  uint64_t v79 = v55;
  uint64_t v80 = MEMORY[0x1E4F417F0];
  uint64_t v81 = v56;
  uint64_t v43 = (int *)type metadata accessor for Gauge();
  double v44 = (char *)v39 + v43[21];
  v61();
  uint64_t v45 = (*(uint64_t (**)(char *, void, uint64_t, double))(*(void *)(*(void *)&v40 - 8) + 56))(v44, 0, 1, COERCE_DOUBLE(*(void *)&v40));
  uint64_t v46 = (char *)v39 + v43[22];
  v64(v45);
  uint64_t v47 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v46, 0, 1, v41);
  *((unsigned char *)v39 + v43[23]) = 1;
  *((unsigned char *)v39 + v43[24]) = 1;
  uint64_t v48 = v65;
  v67(v47);
  (*(void (**)(uint64_t))(*(void *)(v73 - 8) + 8))(v53);
  v57(v72, a13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v48, 0, 1, v42);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v68 + 32))((char *)v39 + v43[25], v48, v70);
}

uint64_t Gauge.init<A>(value:in:label:currentValueLabel:minimumValueLabel:maximumValueLabel:markedValueLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, double *a9@<X8>, void (*a10)(uint64_t), uint64_t a11, void (*a12)(uint64_t), uint64_t a13, double a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v80 = a8;
  uint64_t v81 = a7;
  uint64_t v78 = a6;
  uint64_t v79 = a5;
  uint64_t v74 = a4;
  uint64_t v75 = a3;
  uint64_t v91 = a9;
  uint64_t v84 = a16;
  uint64_t v77 = a15;
  double v76 = a14;
  uint64_t v85 = a13;
  uint64_t v86 = a12;
  uint64_t v82 = a11;
  double v83 = a10;
  uint64_t v90 = a17;
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v88 = *(void *)(v25 - 8);
  uint64_t v89 = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v87 = (char *)&v63 - v26;
  uint64_t v66 = a23;
  uint64_t v27 = *(void *)(a23 + 16);
  uint64_t v73 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 + 16) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v72 = *(void *)(a18 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v64 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  char v33 = (char *)&v63 - v32;
  MEMORY[0x1F4188790](v34);
  char v36 = (char *)&v63 - v35;
  uint64_t v65 = v27;
  uint64_t v37 = type metadata accessor for ClosedRange();
  uint64_t v92 = a1;
  uint64_t v93 = v37;
  uint64_t v38 = a2;
  if ((ClosedRange.contains(_:)() & 1) == 0)
  {
    static os_log_type_t.fault.getter();
    double v39 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  uint64_t v71 = a22;
  uint64_t v70 = a21;
  uint64_t v69 = a20;
  uint64_t v68 = a19;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v40 = dispatch thunk of static Comparable.> infix(_:_:)();
  uint64_t v41 = v72;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v72 + 8);
  v42(v33, a18);
  uint64_t v73 = (void (*)(uint64_t, uint64_t))v42;
  uint64_t v67 = v38;
  if (v40)
  {
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    uint64_t v43 = v64;
    dispatch thunk of static FloatingPoint./ infix(_:_:)();
    v42(v33, a18);
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v33, v43, a18);
    lazy protocol witness table accessor for type Double and conformance Double();
    BinaryFloatingPoint.init<A>(_:)();
    double v44 = v94;
    if (v94 < 0.0) {
      double v44 = 0.0;
    }
    if (v44 <= 1.0) {
      double v45 = v44;
    }
    else {
      double v45 = 1.0;
    }
    v42(v43, a18);
    v42(v36, a18);
  }
  else
  {
    v42(v36, a18);
    double v45 = 1.0;
  }
  uint64_t v47 = v90;
  uint64_t v46 = v91;
  *uint64_t v91 = v45;
  double v48 = v76;
  uint64_t v49 = v77;
  double v94 = v76;
  uint64_t v95 = v77;
  uint64_t v50 = v84;
  uint64_t v96 = v84;
  uint64_t v97 = v47;
  uint64_t v98 = v68;
  uint64_t v99 = v69;
  uint64_t v100 = v70;
  uint64_t v101 = v71;
  uint64_t v51 = (int *)type metadata accessor for Gauge();
  uint64_t v52 = (char *)v46 + v51[21];
  v75();
  uint64_t v53 = (*(uint64_t (**)(char *, void, uint64_t, double))(*(void *)(*(void *)&v48 - 8) + 56))(v52, 0, 1, COERCE_DOUBLE(*(void *)&v48));
  uint64_t v54 = (char *)v46 + v51[22];
  v79(v53);
  uint64_t v55 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v54, 0, 1, v49);
  uint64_t v56 = (char *)v46 + v51[23];
  v81(v55);
  uint64_t v57 = *(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56);
  uint64_t v58 = v57(v56, 0, 1, v50);
  double v59 = (char *)v46 + v51[24];
  v83(v58);
  uint64_t v60 = v57(v59, 0, 1, v50);
  uint64_t v61 = v87;
  v86(v60);
  (*(void (**)(uint64_t))(*(void *)(v93 - 8) + 8))(v67);
  v73(v92, a18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v61, 0, 1, v47);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v88 + 32))((char *)v46 + v51[25], v61, v89);
}

uint64_t Gauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v40 = *(void *)(a1 + 32);
  uint64_t v4 = v40;
  uint64_t v45 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  double v44 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v43 = (char *)&v33 - v7;
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v8 = v39;
  uint64_t v41 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v47 = (uint64_t)&v33 - v10;
  uint64_t v38 = *(void *)(a1 + 16);
  uint64_t v11 = v38;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v33 - v14;
  uint64_t v34 = (uint64_t)&v33 - v14;
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v36 = *(void *)(a1 + 56);
  uint64_t v37 = v16;
  uint64_t v35 = *(void *)(a1 + 64);
  uint64_t v48 = v11;
  uint64_t v49 = v8;
  uint64_t v50 = v4;
  uint64_t v51 = v16;
  uint64_t v52 = v36;
  uint64_t v53 = v35;
  uint64_t v17 = type metadata accessor for BaseGauge();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (double *)((char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v33 - v23;
  double v25 = *v2;
  (*(void (**)(char *, char *, uint64_t, double))(v13 + 16))(v15, (char *)v2 + *(int *)(a1 + 84), v12, v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v47, (char *)v2 + *(int *)(a1 + 88), v41);
  uint64_t v26 = (uint64_t)v43;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
  uint64_t v28 = v45;
  v27(v43, (char *)v2 + *(int *)(a1 + 92), v45);
  uint64_t v29 = (char *)v2 + *(int *)(a1 + 96);
  uint64_t v30 = (uint64_t)v44;
  v27(v44, v29, v28);
  BaseGauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:)(v34, v47, v26, v30, v20, v25);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  uint64_t v31 = *(void (**)(double *, uint64_t))(v18 + 8);
  v31(v20, v17);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v31)(v24, v17);
}

uint64_t type metadata accessor for BaseGauge()
{
  return swift_getGenericMetadata();
}

uint64_t BaseGauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>, double a6@<D0>)
{
  *a5 = a6;
  uint64_t v11 = (int *)type metadata accessor for BaseGauge();
  uint64_t v12 = (char *)a5 + v11[17];
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a1, v13);
  uint64_t v14 = (char *)a5 + v11[18];
  uint64_t v15 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a2, v15);
  uint64_t v16 = (char *)a5 + v11[19];
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32);
  v18(v16, a3, v17);
  return ((uint64_t (*)(char *, uint64_t, uint64_t))v18)((char *)a5 + v11[20], a4, v17);
}

uint64_t associated type witness table accessor for View.Body : View in Gauge<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Gauge()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for Optional();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Gauge(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a3[2];
  uint64_t v4 = a3[3];
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v11 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  else {
    size_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + 1;
  }
  uint64_t v13 = a3[4];
  uint64_t v12 = a3[5];
  uint64_t v52 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  int v15 = *(_DWORD *)(v14 + 80);
  uint64_t v16 = v15;
  if (*(_DWORD *)(v14 + 84)) {
    uint64_t v17 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v14 + 64) + 1;
  }
  uint64_t v18 = *(void *)(v12 - 8);
  int v19 = *(_DWORD *)(v18 + 80);
  uint64_t v53 = v18;
  size_t __n = v17;
  uint64_t v20 = v19;
  if (*(_DWORD *)(v18 + 84)) {
    uint64_t v21 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  else {
    uint64_t v21 = *(void *)(*(void *)(v12 - 8) + 64) + 1;
  }
  unint64_t v22 = v10 | v7 | v15 | (unint64_t)v19;
  if (v22 > 7
    || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80) | v15 | v19) & 0x100000) != 0
    || v21
     + ((v17
       + v19
       + ((v17
         + v15
         + ((v11 + v15 + ((v8 + v10 + ((v7 + 8) & ~v7)) & ~v10)) & ~(unint64_t)v15)) & ~(unint64_t)v15)) & ~(unint64_t)v19) > 0x18)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    uint64_t v26 = v25 + ((v22 & 0xF8 ^ 0x1F8) & (v22 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v47 = v4;
    uint64_t v48 = v17 + v15;
    uint64_t v51 = *(void *)(v13 - 8);
    uint64_t v49 = v12;
    size_t v45 = v21;
    uint64_t v46 = ~v10;
    *a1 = *a2;
    uint64_t v27 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    uint64_t v28 = (char *)(((unint64_t)a2 + v7 + 8) & ~v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v28, 1, v5))
    {
      memcpy(v27, v28, v8);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 16))(v27, v28, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v27, 0, 1, v5);
    }
    uint64_t v29 = ~v16;
    uint64_t v30 = &v28[v8];
    uint64_t v31 = (void *)(((unint64_t)v27 + v8 + v10) & v46);
    uint64_t v32 = (const void *)((unint64_t)&v30[v10] & v46);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v32, 1, v47))
    {
      memcpy(v31, v32, v11);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v31, v32, v47);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v31, 0, 1, v47);
    }
    uint64_t v33 = (void *)(((unint64_t)v31 + v11 + v16) & v29);
    uint64_t v34 = (const void *)(((unint64_t)v32 + v11 + v16) & v29);
    uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v51 + 48);
    if (v35(v34, 1, v52))
    {
      memcpy(v33, v34, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v51 + 16))(v33, v34, v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v33, 0, 1, v52);
    }
    uint64_t v36 = ~v20;
    uint64_t v37 = (void *)(((unint64_t)v33 + v48) & v29);
    uint64_t v38 = (char *)(((unint64_t)v34 + v48) & v29);
    if (v35(v38, 1, v52))
    {
      size_t v39 = __n;
      memcpy(v37, v38, __n);
      uint64_t v40 = v53;
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v51 + 16))(v37, v38, v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v37, 0, 1, v52);
      uint64_t v40 = v53;
      size_t v39 = __n;
    }
    uint64_t v41 = &v38[v39];
    uint64_t v42 = (void *)(((unint64_t)v37 + v39 + v20) & v36);
    uint64_t v43 = (const void *)((unint64_t)&v41[v20] & v36);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v43, 1, v49))
    {
      memcpy(v42, v43, v45);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v40 + 16))(v42, v43, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v49);
    }
    return a1;
  }
  return (uint64_t *)v26;
}

void *initializeWithCopy for Gauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    uint64_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  uint64_t v15 = a3[3];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  int v19 = (char *)(((unint64_t)v7 + v18) & ~v17);
  uint64_t v20 = (char *)(((unint64_t)v8 + v18) & ~v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v20, 1, v15))
  {
    int v21 = *(_DWORD *)(v16 + 84);
    size_t v22 = *(void *)(v16 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v15);
    uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    uint64_t v24 = v16 + 56;
    v25(v19, 0, 1, v15);
    int v21 = *(_DWORD *)(v24 + 28);
    size_t v22 = *(void *)(v24 + 8);
  }
  if (v21) {
    size_t v26 = v22;
  }
  else {
    size_t v26 = v22 + 1;
  }
  uint64_t v50 = a3;
  uint64_t v27 = a3[4];
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v26 + v29;
  unint64_t v31 = (unint64_t)&v19[v30];
  uint64_t v48 = ~v29;
  uint64_t v32 = (void *)((unint64_t)&v19[v30] & ~v29);
  unint64_t v33 = (unint64_t)&v20[v30];
  uint64_t v34 = (const void *)((unint64_t)&v20[v30] & ~v29);
  uint64_t v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (v49(v34, 1, v27))
  {
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
    if (v35) {
      size_t v37 = *(void *)(v28 + 64);
    }
    else {
      size_t v37 = v36 + 1;
    }
    memcpy(v32, v34, v37);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v32, v34, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  if (v35) {
    size_t v38 = v36;
  }
  else {
    size_t v38 = v36 + 1;
  }
  size_t v39 = (void *)(((v31 | v29) + v38) & v48);
  uint64_t v40 = (const void *)(((v33 | v29) + v38) & v48);
  if (v49(v40, 1, v27))
  {
    memcpy(v39, v40, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v39, v40, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v39, 0, 1, v27);
  }
  uint64_t v41 = v50[5];
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(unsigned __int8 *)(v42 + 80);
  double v44 = (void *)(((unint64_t)v39 + v38 + v43) & ~v43);
  size_t v45 = (const void *)(((unint64_t)v40 + v38 + v43) & ~v43);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v45, 1, v41))
  {
    if (*(_DWORD *)(v42 + 84)) {
      size_t v46 = *(void *)(v42 + 64);
    }
    else {
      size_t v46 = *(void *)(v42 + 64) + 1;
    }
    memcpy(v44, v45, v46);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 16))(v44, v45, v41);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v41);
  }
  return a1;
}

void *assignWithCopy for Gauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  uint64_t v15 = *(void *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v15;
  }
  uint64_t v16 = a3[3];
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (char *)(((unint64_t)v7 + v19) & ~v18);
  int v21 = (char *)(((unint64_t)v8 + v19) & ~v18);
  size_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v23 = v22(v20, 1, v16);
  int v24 = v22(v21, 1, v16);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v21, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
      goto LABEL_25;
    }
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v20, v21, v16);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  if (v25) {
    size_t v27 = v26;
  }
  else {
    size_t v27 = v26 + 1;
  }
  memcpy(v20, v21, v27);
LABEL_25:
  uint64_t v28 = *(void *)(v17 + 64);
  if (!*(_DWORD *)(v17 + 84)) {
    ++v28;
  }
  uint64_t v63 = a3;
  uint64_t v29 = a3[4];
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = v28 + v31;
  unint64_t v33 = (unint64_t)&v20[v32];
  uint64_t v62 = ~v31;
  uint64_t v34 = (void *)((unint64_t)&v20[v32] & ~v31);
  unint64_t v35 = (unint64_t)&v21[v32];
  size_t v36 = (void *)((unint64_t)&v21[v32] & ~v31);
  size_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v38 = v37(v34, 1, v29);
  int v39 = v37(v36, 1, v29);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v34, v36, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
      goto LABEL_38;
    }
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  else
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v34, v36, v29);
      goto LABEL_38;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v34, v29);
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  if (v40) {
    size_t v42 = v41;
  }
  else {
    size_t v42 = v41 + 1;
  }
  memcpy(v34, v36, v42);
LABEL_38:
  if (*(_DWORD *)(v30 + 84)) {
    size_t v43 = *(void *)(v30 + 64);
  }
  else {
    size_t v43 = *(void *)(v30 + 64) + 1;
  }
  double v44 = (void *)(((v33 | v31) + v43) & v62);
  size_t v45 = (void *)(((v35 | v31) + v43) & v62);
  int v46 = v37(v44, 1, v29);
  int v47 = v37(v45, 1, v29);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v44, v45, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v44, 0, 1, v29);
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v44, v29);
LABEL_46:
    memcpy(v44, v45, v43);
    goto LABEL_47;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v44, v45, v29);
LABEL_47:
  uint64_t v48 = v63[5];
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = (void *)(((unint64_t)v44 + v43 + v50) & ~v50);
  uint64_t v52 = (void *)(((unint64_t)v45 + v43 + v50) & ~v50);
  uint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 48);
  int v54 = v53(v51, 1, v48);
  int v55 = v53(v52, 1, v48);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 16))(v51, v52, v48);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v48);
      return a1;
    }
    int v56 = *(_DWORD *)(v49 + 84);
    size_t v57 = *(void *)(v49 + 64);
  }
  else
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 24))(v51, v52, v48);
      return a1;
    }
    double v59 = *(void (**)(void *, uint64_t))(v49 + 8);
    uint64_t v58 = v49 + 8;
    v59(v51, v48);
    int v56 = *(_DWORD *)(v58 + 76);
    size_t v57 = *(void *)(v58 + 56);
  }
  if (v56) {
    size_t v60 = v57;
  }
  else {
    size_t v60 = v57 + 1;
  }
  memcpy(v51, v52, v60);
  return a1;
}

void *initializeWithTake for Gauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    size_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  uint64_t v15 = a3[3];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = (char *)(((unint64_t)v7 + v18) & ~v17);
  uint64_t v20 = (char *)(((unint64_t)v8 + v18) & ~v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v20, 1, v15))
  {
    int v21 = *(_DWORD *)(v16 + 84);
    size_t v22 = *(void *)(v16 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v15);
    int v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    uint64_t v24 = v16 + 56;
    v25(v19, 0, 1, v15);
    int v21 = *(_DWORD *)(v24 + 28);
    size_t v22 = *(void *)(v24 + 8);
  }
  if (v21) {
    size_t v26 = v22;
  }
  else {
    size_t v26 = v22 + 1;
  }
  uint64_t v50 = a3;
  uint64_t v27 = a3[4];
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v26 + v29;
  unint64_t v31 = (unint64_t)&v19[v30];
  uint64_t v48 = ~v29;
  uint64_t v32 = (void *)((unint64_t)&v19[v30] & ~v29);
  unint64_t v33 = (unint64_t)&v20[v30];
  uint64_t v34 = (const void *)((unint64_t)&v20[v30] & ~v29);
  uint64_t v49 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (v49(v34, 1, v27))
  {
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
    if (v35) {
      size_t v37 = *(void *)(v28 + 64);
    }
    else {
      size_t v37 = v36 + 1;
    }
    memcpy(v32, v34, v37);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v32, v34, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  if (v35) {
    size_t v38 = v36;
  }
  else {
    size_t v38 = v36 + 1;
  }
  int v39 = (void *)(((v31 | v29) + v38) & v48);
  int v40 = (const void *)(((v33 | v29) + v38) & v48);
  if (v49(v40, 1, v27))
  {
    memcpy(v39, v40, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v39, v40, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v39, 0, 1, v27);
  }
  uint64_t v41 = v50[5];
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(unsigned __int8 *)(v42 + 80);
  double v44 = (void *)(((unint64_t)v39 + v38 + v43) & ~v43);
  size_t v45 = (const void *)(((unint64_t)v40 + v38 + v43) & ~v43);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v42 + 48))(v45, 1, v41))
  {
    if (*(_DWORD *)(v42 + 84)) {
      size_t v46 = *(void *)(v42 + 64);
    }
    else {
      size_t v46 = *(void *)(v42 + 64) + 1;
    }
    memcpy(v44, v45, v46);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v42 + 32))(v44, v45, v41);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v44, 0, 1, v41);
  }
  return a1;
}

void *assignWithTake for Gauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  uint64_t v15 = *(void *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v15;
  }
  uint64_t v16 = a3[3];
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (char *)(((unint64_t)v7 + v19) & ~v18);
  int v21 = (char *)(((unint64_t)v8 + v19) & ~v18);
  size_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v23 = v22(v20, 1, v16);
  int v24 = v22(v21, 1, v16);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v21, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
      goto LABEL_25;
    }
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v20, v21, v16);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  if (v25) {
    size_t v27 = v26;
  }
  else {
    size_t v27 = v26 + 1;
  }
  memcpy(v20, v21, v27);
LABEL_25:
  uint64_t v28 = *(void *)(v17 + 64);
  if (!*(_DWORD *)(v17 + 84)) {
    ++v28;
  }
  uint64_t v63 = a3;
  uint64_t v29 = a3[4];
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = v28 + v31;
  unint64_t v33 = (unint64_t)&v20[v32];
  uint64_t v62 = ~v31;
  uint64_t v34 = (void *)((unint64_t)&v20[v32] & ~v31);
  unint64_t v35 = (unint64_t)&v21[v32];
  size_t v36 = (void *)((unint64_t)&v21[v32] & ~v31);
  size_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v38 = v37(v34, 1, v29);
  int v39 = v37(v36, 1, v29);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v34, v36, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
      goto LABEL_38;
    }
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  else
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v34, v36, v29);
      goto LABEL_38;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v34, v29);
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  if (v40) {
    size_t v42 = v41;
  }
  else {
    size_t v42 = v41 + 1;
  }
  memcpy(v34, v36, v42);
LABEL_38:
  if (*(_DWORD *)(v30 + 84)) {
    size_t v43 = *(void *)(v30 + 64);
  }
  else {
    size_t v43 = *(void *)(v30 + 64) + 1;
  }
  double v44 = (void *)(((v33 | v31) + v43) & v62);
  size_t v45 = (void *)(((v35 | v31) + v43) & v62);
  int v46 = v37(v44, 1, v29);
  int v47 = v37(v45, 1, v29);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v44, v45, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v44, 0, 1, v29);
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (v47)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v44, v29);
LABEL_46:
    memcpy(v44, v45, v43);
    goto LABEL_47;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v44, v45, v29);
LABEL_47:
  uint64_t v48 = v63[5];
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = (void *)(((unint64_t)v44 + v43 + v50) & ~v50);
  uint64_t v52 = (void *)(((unint64_t)v45 + v43 + v50) & ~v50);
  uint64_t v53 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v49 + 48);
  int v54 = v53(v51, 1, v48);
  int v55 = v53(v52, 1, v48);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 32))(v51, v52, v48);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v51, 0, 1, v48);
      return a1;
    }
    int v56 = *(_DWORD *)(v49 + 84);
    size_t v57 = *(void *)(v49 + 64);
  }
  else
  {
    if (!v55)
    {
      (*(void (**)(void *, void *, uint64_t))(v49 + 40))(v51, v52, v48);
      return a1;
    }
    double v59 = *(void (**)(void *, uint64_t))(v49 + 8);
    uint64_t v58 = v49 + 8;
    v59(v51, v48);
    int v56 = *(_DWORD *)(v58 + 76);
    size_t v57 = *(void *)(v58 + 56);
  }
  if (v56) {
    size_t v60 = v57;
  }
  else {
    size_t v60 = v57 + 1;
  }
  memcpy(v51, v52, v60);
  return a1;
}

uint64_t getEnumTagSinglePayload for Gauge(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v8 = a3[3];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  if (v12 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v15 = a3[4];
  uint64_t v14 = a3[5];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(unsigned int *)(v16 + 84);
  if (v18) {
    unsigned int v19 = v18 - 1;
  }
  else {
    unsigned int v19 = 0;
  }
  if (v19 <= v13) {
    unsigned int v20 = v13;
  }
  else {
    unsigned int v20 = v19;
  }
  uint64_t v21 = *(void *)(v14 - 8);
  uint64_t v22 = v21;
  uint64_t v23 = *(unsigned int *)(v21 + 84);
  unsigned int v24 = v23 - 1;
  if (!v23) {
    unsigned int v24 = 0;
  }
  if (v24 > v20) {
    unsigned int v20 = v24;
  }
  uint64_t v25 = *(void *)(v4 + 64);
  if (v6) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = v25 + 1;
  }
  if (v11) {
    uint64_t v27 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v27 = *(void *)(v9 + 64) + 1;
  }
  if (v18) {
    uint64_t v28 = *(void *)(v16 + 64);
  }
  else {
    uint64_t v28 = *(void *)(v16 + 64) + 1;
  }
  uint64_t v29 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v30 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v31 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v32 = *(unsigned __int8 *)(v21 + 80);
  if (v23) {
    uint64_t v33 = *(void *)(v21 + 64);
  }
  else {
    uint64_t v33 = *(void *)(v21 + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v34 = v27 + v31;
  uint64_t v35 = v28 + v31;
  uint64_t v36 = v28 + v32;
  unsigned int v37 = a2 - v20;
  if (a2 <= v20) {
    goto LABEL_52;
  }
  uint64_t v38 = (v36 + ((v35 + ((v34 + ((v26 + v30 + ((v29 + 8) & ~v29)) & ~v30)) & ~v31)) & ~v31)) & ~v32;
  uint64_t v39 = v33 + v38;
  char v40 = 8 * (v33 + v38);
  if (v39 <= 3)
  {
    unsigned int v42 = ((v37 + ~(-1 << v40)) >> v40) + 1;
    if (HIWORD(v42))
    {
      int v41 = *(_DWORD *)((char *)a1 + v39);
      if (!v41) {
        goto LABEL_52;
      }
      goto LABEL_42;
    }
    if (v42 > 0xFF)
    {
      int v41 = *(unsigned __int16 *)((char *)a1 + v39);
      if (!*(unsigned __int16 *)((char *)a1 + v39)) {
        goto LABEL_52;
      }
      goto LABEL_42;
    }
    if (v42 < 2)
    {
LABEL_52:
      if (v20)
      {
        uint64_t v46 = ((unint64_t)a1 + v29 + 8) & ~v29;
        if (v7 == v20)
        {
          unsigned int v47 = (*(uint64_t (**)(uint64_t))(v5 + 48))(v46);
        }
        else
        {
          uint64_t v49 = (v46 + v26 + v30) & ~v30;
          if (v12 == v20)
          {
            unsigned int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v49, v11, v8);
          }
          else
          {
            uint64_t v50 = (v34 + v49) & ~v31;
            if (v19 == v20) {
              unsigned int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v50, v18, v15);
            }
            else {
              unsigned int v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 48))((v36 + ((v35 + v50) & ~v31)) & ~v32, v23);
            }
          }
        }
        if (v47 >= 2) {
          return v47 - 1;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v41 = *((unsigned __int8 *)a1 + v39);
  if (!*((unsigned char *)a1 + v39)) {
    goto LABEL_52;
  }
LABEL_42:
  int v43 = (v41 - 1) << v40;
  if (v39 > 3) {
    int v43 = 0;
  }
  if (v39)
  {
    if (v39 <= 3) {
      int v44 = v39;
    }
    else {
      int v44 = 4;
    }
    switch(v44)
    {
      case 2:
        int v45 = *a1;
        break;
      case 3:
        int v45 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v45 = *(_DWORD *)a1;
        break;
      default:
        int v45 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v45 = 0;
  }
  return v20 + (v45 | v43) + 1;
}

void storeEnumTagSinglePayload for Gauge(unsigned char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  int v60 = 0;
  uint64_t v5 = *(void *)(a4[2] - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  uint64_t v8 = a4[4];
  uint64_t v57 = v8;
  uint64_t v58 = a4[3];
  uint64_t v9 = *(void *)(v58 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  if (v14) {
    unsigned int v15 = v14 - 1;
  }
  else {
    unsigned int v15 = 0;
  }
  if (v15 <= v12) {
    unsigned int v16 = v12;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v56 = a4[5];
  uint64_t v17 = *(void *)(v56 - 8);
  uint64_t v18 = *(unsigned int *)(v17 + 84);
  uint64_t v19 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v20 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = *(unsigned __int8 *)(v17 + 80);
  if (v18) {
    unsigned int v24 = v18 - 1;
  }
  else {
    unsigned int v24 = 0;
  }
  if (v24 <= v16) {
    unsigned int v25 = v16;
  }
  else {
    unsigned int v25 = v24;
  }
  if (v6) {
    uint64_t v26 = *(void *)(*(void *)(a4[2] - 8) + 64);
  }
  else {
    uint64_t v26 = *(void *)(*(void *)(a4[2] - 8) + 64) + 1;
  }
  if (v10) {
    uint64_t v27 = *(void *)(*(void *)(v58 - 8) + 64);
  }
  else {
    uint64_t v27 = *(void *)(*(void *)(v58 - 8) + 64) + 1;
  }
  if (v14) {
    uint64_t v28 = v19;
  }
  else {
    uint64_t v28 = v19 + 1;
  }
  uint64_t v29 = v27 + v22;
  uint64_t v30 = v28 + v22;
  uint64_t v31 = v28 + v23;
  uint64_t v32 = (v28 + v23 + ((v28 + v22 + ((v27 + v22 + ((v26 + v21 + ((v20 + 8) & ~v20)) & ~v21)) & ~v22)) & ~v22)) & ~v23;
  if (v18) {
    size_t v33 = *(void *)(*(void *)(v56 - 8) + 64);
  }
  else {
    size_t v33 = *(void *)(*(void *)(v56 - 8) + 64) + 1;
  }
  size_t v34 = v32 + v33;
  BOOL v35 = a3 >= v25;
  unsigned int v36 = a3 - v25;
  if (v36 != 0 && v35)
  {
    if (v34 <= 3)
    {
      unsigned int v38 = ((v36 + ~(-1 << (8 * v34))) >> (8 * v34)) + 1;
      if (HIWORD(v38))
      {
        int v37 = 4;
      }
      else if (v38 >= 0x100)
      {
        int v37 = 2;
      }
      else
      {
        int v37 = v38 > 1;
      }
    }
    else
    {
      int v37 = 1;
    }
    int v60 = v37;
  }
  if (v25 < a2)
  {
    unsigned int v39 = ~v25 + a2;
    if (v34 < 4)
    {
      int v40 = (v39 >> (8 * v34)) + 1;
      if (v34)
      {
        int v43 = v39 & ~(-1 << (8 * v34));
        bzero(a1, v34);
        if (v34 == 3)
        {
          *(_WORD *)a1 = v43;
          a1[2] = BYTE2(v43);
        }
        else if (v34 == 2)
        {
          *(_WORD *)a1 = v43;
        }
        else
        {
          *a1 = v43;
        }
      }
    }
    else
    {
      bzero(a1, v34);
      *(_DWORD *)a1 = v39;
      int v40 = 1;
    }
    switch(v60)
    {
      case 1:
        a1[v34] = v40;
        return;
      case 2:
        *(_WORD *)&a1[v34] = v40;
        return;
      case 3:
        goto LABEL_93;
      case 4:
        *(_DWORD *)&a1[v34] = v40;
        return;
      default:
        return;
    }
  }
  uint64_t v41 = ~v22;
  uint64_t v42 = ~v23;
  switch(v60)
  {
    case 1:
      a1[v34] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_56;
    case 2:
      *(_WORD *)&a1[v34] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_56;
    case 3:
LABEL_93:
      __break(1u);
      JUMPOUT(0x1880BC210);
    case 4:
      *(_DWORD *)&a1[v34] = 0;
      goto LABEL_55;
    default:
LABEL_55:
      if (!a2) {
        return;
      }
LABEL_56:
      uint64_t v44 = (unint64_t)&a1[v20 + 8] & ~v20;
      if (v7 == v25)
      {
        uint64_t v45 = a2 + 1;
        uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v5 + 56);
        v46(v44, v45);
        return;
      }
      unsigned int v47 = (unsigned char *)((v44 + v26 + v21) & ~v21);
      if (v11 == v25)
      {
        uint64_t v48 = a2 + 1;
        uint64_t v49 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        uint64_t v50 = v10;
        uint64_t v51 = v58;
LABEL_89:
        v49(v47, v48, v50, v51);
        return;
      }
      unsigned int v47 = (unsigned char *)((unint64_t)&v47[v29] & v41);
      if (v15 == v25)
      {
        uint64_t v48 = a2 + 1;
        uint64_t v49 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
        uint64_t v50 = v14;
        uint64_t v51 = v57;
        goto LABEL_89;
      }
      uint64_t v52 = (unsigned char *)((v31 + ((unint64_t)&v47[v30] & v41)) & v42);
      if (v24 >= a2)
      {
        uint64_t v48 = a2 + 1;
        uint64_t v49 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
        unsigned int v47 = v52;
        uint64_t v50 = v18;
        uint64_t v51 = v56;
        goto LABEL_89;
      }
      if (v33 <= 3) {
        int v53 = ~(-1 << (8 * v33));
      }
      else {
        int v53 = -1;
      }
      if (v33)
      {
        int v54 = v53 & (~v24 + a2);
        if (v33 <= 3) {
          int v55 = v33;
        }
        else {
          int v55 = 4;
        }
        bzero(v52, v33);
        switch(v55)
        {
          case 2:
            *(_WORD *)uint64_t v52 = v54;
            break;
          case 3:
            *(_WORD *)uint64_t v52 = v54;
            v52[2] = BYTE2(v54);
            break;
          case 4:
            *(_DWORD *)uint64_t v52 = v54;
            break;
          default:
            *uint64_t v52 = v54;
            break;
        }
      }
      return;
  }
}

_UNKNOWN **sub_1880BC248()
{
  return &protocol witness table for BaseGauge<A, B, C>;
}

uint64_t type metadata completion function for BaseGauge()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BaseGauge(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = a3[2];
  uint64_t v4 = a3[3];
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v11 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  else {
    size_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + 1;
  }
  uint64_t v12 = *(void *)(a3[4] - 8);
  int v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v13;
  if (*(_DWORD *)(v12 + 84)) {
    uint64_t v15 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v15 = *(void *)(v12 + 64) + 1;
  }
  unint64_t v16 = v10 | v7 | v13;
  if (v16 > 7
    || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80) | v13) & 0x100000) != 0
    || ((v15
       + v13
       + ((v11 + v13 + ((v8 + v10 + ((v7 + 8) & ~v7)) & ~v10)) & ~(unint64_t)v13)) & ~(unint64_t)v13)
     + v15 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    uint64_t v20 = (uint64_t *)(v19 + ((v16 & 0xF8 ^ 0x1F8) & (v16 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v34 = a3[3];
    uint64_t v35 = v15 + v13;
    size_t __n = v15;
    uint64_t v36 = a3[4];
    uint64_t v33 = ~v10;
    *a1 = *a2;
    uint64_t v21 = (void *)(((unint64_t)a1 + v7 + 8) & ~v7);
    uint64_t v22 = (char *)(((unint64_t)a2 + v7 + 8) & ~v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v22, 1, v5))
    {
      memcpy(v21, v22, v8);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v6 + 16))(v21, v22, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v5);
    }
    uint64_t v23 = ~v14;
    unsigned int v24 = &v22[v8];
    unsigned int v25 = (void *)(((unint64_t)v21 + v8 + v10) & v33);
    uint64_t v26 = (const void *)((unint64_t)&v24[v10] & v33);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v26, 1, v34))
    {
      memcpy(v25, v26, v11);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v25, v26, v34);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v25, 0, 1, v34);
    }
    uint64_t v20 = a1;
    uint64_t v27 = (void *)(((unint64_t)v25 + v11 + v14) & v23);
    uint64_t v28 = (const void *)(((unint64_t)v26 + v11 + v14) & v23);
    uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    if (v29(v28, 1, v36))
    {
      memcpy(v27, v28, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v27, v28, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v27, 0, 1, v36);
    }
    uint64_t v30 = (void *)(((unint64_t)v27 + v35) & v23);
    uint64_t v31 = (const void *)(((unint64_t)v28 + v35) & v23);
    if (v29(v31, 1, v36))
    {
      memcpy(v30, v31, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v30, v31, v36);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v30, 0, 1, v36);
    }
  }
  return v20;
}

void *initializeWithCopy for BaseGauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    int v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  uint64_t v15 = a3[3];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = (char *)(((unint64_t)v7 + v18) & ~v17);
  uint64_t v20 = (char *)(((unint64_t)v8 + v18) & ~v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v20, 1, v15))
  {
    int v21 = *(_DWORD *)(v16 + 84);
    size_t v22 = *(void *)(v16 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v15);
    unsigned int v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    uint64_t v24 = v16 + 56;
    v25(v19, 0, 1, v15);
    int v21 = *(_DWORD *)(v24 + 28);
    size_t v22 = *(void *)(v24 + 8);
  }
  if (v21) {
    size_t v26 = v22;
  }
  else {
    size_t v26 = v22 + 1;
  }
  uint64_t v27 = a3[4];
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v26 + v29;
  unint64_t v31 = (unint64_t)&v19[v30];
  uint64_t v42 = ~v29;
  uint64_t v32 = (void *)((unint64_t)&v19[v30] & ~v29);
  unint64_t v33 = (unint64_t)&v20[v30];
  uint64_t v34 = (const void *)((unint64_t)&v20[v30] & ~v29);
  int v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (v43(v34, 1, v27))
  {
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
    if (v35) {
      size_t v37 = *(void *)(v28 + 64);
    }
    else {
      size_t v37 = v36 + 1;
    }
    memcpy(v32, v34, v37);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v32, v34, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  if (v35) {
    size_t v38 = v36;
  }
  else {
    size_t v38 = v36 + 1;
  }
  unsigned int v39 = (void *)(((v31 | v29) + v38) & v42);
  int v40 = (const void *)(((v33 | v29) + v38) & v42);
  if (v43(v40, 1, v27))
  {
    memcpy(v39, v40, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v39, v40, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v39, 0, 1, v27);
  }
  return a1;
}

void *assignWithCopy for BaseGauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  uint64_t v15 = *(void *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v15;
  }
  uint64_t v16 = a3[3];
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (char *)(((unint64_t)v7 + v19) & ~v18);
  int v21 = (char *)(((unint64_t)v8 + v19) & ~v18);
  size_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v23 = v22(v20, 1, v16);
  int v24 = v22(v21, 1, v16);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v21, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
      goto LABEL_25;
    }
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v20, v21, v16);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  if (v25) {
    size_t v27 = v26;
  }
  else {
    size_t v27 = v26 + 1;
  }
  memcpy(v20, v21, v27);
LABEL_25:
  uint64_t v28 = *(void *)(v17 + 64);
  if (!*(_DWORD *)(v17 + 84)) {
    ++v28;
  }
  uint64_t v29 = a3[4];
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = v28 + v31;
  unint64_t v33 = (unint64_t)&v20[v32];
  uint64_t v49 = ~v31;
  uint64_t v34 = (void *)((unint64_t)&v20[v32] & ~v31);
  unint64_t v35 = (unint64_t)&v21[v32];
  size_t v36 = (void *)((unint64_t)&v21[v32] & ~v31);
  size_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v38 = v37(v34, 1, v29);
  int v39 = v37(v36, 1, v29);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v34, v36, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
      goto LABEL_38;
    }
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  else
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v34, v36, v29);
      goto LABEL_38;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v34, v29);
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  if (v40) {
    size_t v42 = v41;
  }
  else {
    size_t v42 = v41 + 1;
  }
  memcpy(v34, v36, v42);
LABEL_38:
  if (*(_DWORD *)(v30 + 84)) {
    size_t v43 = *(void *)(v30 + 64);
  }
  else {
    size_t v43 = *(void *)(v30 + 64) + 1;
  }
  uint64_t v44 = (void *)(((v33 | v31) + v43) & v49);
  uint64_t v45 = (void *)(((v35 | v31) + v43) & v49);
  int v46 = v37(v44, 1, v29);
  int v47 = v37(v45, 1, v29);
  if (!v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 24))(v44, v45, v29);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v44, v29);
    goto LABEL_46;
  }
  if (v47)
  {
LABEL_46:
    memcpy(v44, v45, v43);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 16))(v44, v45, v29);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v44, 0, 1, v29);
  return a1;
}

void *initializeWithTake for BaseGauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (const void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    int v9 = *(_DWORD *)(v5 + 84);
    size_t v10 = *(void *)(v5 + 64);
    if (v9) {
      size_t v11 = v10;
    }
    else {
      size_t v11 = v10 + 1;
    }
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    size_t v13 = *(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56);
    uint64_t v12 = v5 + 56;
    v13(v7, 0, 1, v4);
    int v9 = *(_DWORD *)(v12 + 28);
    size_t v10 = *(void *)(v12 + 8);
  }
  if (v9) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v10 + 1;
  }
  uint64_t v15 = a3[3];
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  uint64_t v19 = (char *)(((unint64_t)v7 + v18) & ~v17);
  uint64_t v20 = (char *)(((unint64_t)v8 + v18) & ~v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v20, 1, v15))
  {
    int v21 = *(_DWORD *)(v16 + 84);
    size_t v22 = *(void *)(v16 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v15);
    int v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56);
    uint64_t v24 = v16 + 56;
    v25(v19, 0, 1, v15);
    int v21 = *(_DWORD *)(v24 + 28);
    size_t v22 = *(void *)(v24 + 8);
  }
  if (v21) {
    size_t v26 = v22;
  }
  else {
    size_t v26 = v22 + 1;
  }
  uint64_t v27 = a3[4];
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v26 + v29;
  unint64_t v31 = (unint64_t)&v19[v30];
  uint64_t v42 = ~v29;
  uint64_t v32 = (void *)((unint64_t)&v19[v30] & ~v29);
  unint64_t v33 = (unint64_t)&v20[v30];
  uint64_t v34 = (const void *)((unint64_t)&v20[v30] & ~v29);
  size_t v43 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  if (v43(v34, 1, v27))
  {
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
    if (v35) {
      size_t v37 = *(void *)(v28 + 64);
    }
    else {
      size_t v37 = v36 + 1;
    }
    memcpy(v32, v34, v37);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v32, v34, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v32, 0, 1, v27);
    int v35 = *(_DWORD *)(v28 + 84);
    size_t v36 = *(void *)(v28 + 64);
  }
  if (v35) {
    size_t v38 = v36;
  }
  else {
    size_t v38 = v36 + 1;
  }
  int v39 = (void *)(((v31 | v29) + v38) & v42);
  int v40 = (const void *)(((v33 | v29) + v38) & v42);
  if (v43(v40, 1, v27))
  {
    memcpy(v39, v40, v38);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 32))(v39, v40, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v39, 0, 1, v27);
  }
  return a1;
}

void *assignWithTake for BaseGauge(void *a1, void *a2, void *a3)
{
  *a1 = *a2;
  uint64_t v4 = a3[2];
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(((unint64_t)a1 + v6 + 8) & ~v6);
  size_t v8 = (void *)(((unint64_t)a2 + v6 + 8) & ~v6);
  int v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v10 = v9(v7, 1, v4);
  int v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_12;
    }
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
    int v12 = *(_DWORD *)(v5 + 84);
    size_t v13 = *(void *)(v5 + 64);
  }
  if (v12) {
    size_t v14 = v13;
  }
  else {
    size_t v14 = v13 + 1;
  }
  memcpy(v7, v8, v14);
LABEL_12:
  uint64_t v15 = *(void *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v15;
  }
  uint64_t v16 = a3[3];
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (char *)(((unint64_t)v7 + v19) & ~v18);
  int v21 = (char *)(((unint64_t)v8 + v19) & ~v18);
  size_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v23 = v22(v20, 1, v16);
  int v24 = v22(v21, 1, v16);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v21, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v20, 0, 1, v16);
      goto LABEL_25;
    }
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v20, v21, v16);
      goto LABEL_25;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    int v25 = *(_DWORD *)(v17 + 84);
    size_t v26 = *(void *)(v17 + 64);
  }
  if (v25) {
    size_t v27 = v26;
  }
  else {
    size_t v27 = v26 + 1;
  }
  memcpy(v20, v21, v27);
LABEL_25:
  uint64_t v28 = *(void *)(v17 + 64);
  if (!*(_DWORD *)(v17 + 84)) {
    ++v28;
  }
  uint64_t v29 = a3[4];
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = v28 + v31;
  unint64_t v33 = (unint64_t)&v20[v32];
  uint64_t v49 = ~v31;
  uint64_t v34 = (void *)((unint64_t)&v20[v32] & ~v31);
  unint64_t v35 = (unint64_t)&v21[v32];
  size_t v36 = (void *)((unint64_t)&v21[v32] & ~v31);
  size_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v38 = v37(v34, 1, v29);
  int v39 = v37(v36, 1, v29);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v34, v36, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v34, 0, 1, v29);
      goto LABEL_38;
    }
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  else
  {
    if (!v39)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v34, v36, v29);
      goto LABEL_38;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v34, v29);
    int v40 = *(_DWORD *)(v30 + 84);
    size_t v41 = *(void *)(v30 + 64);
  }
  if (v40) {
    size_t v42 = v41;
  }
  else {
    size_t v42 = v41 + 1;
  }
  memcpy(v34, v36, v42);
LABEL_38:
  if (*(_DWORD *)(v30 + 84)) {
    size_t v43 = *(void *)(v30 + 64);
  }
  else {
    size_t v43 = *(void *)(v30 + 64) + 1;
  }
  uint64_t v44 = (void *)(((v33 | v31) + v43) & v49);
  uint64_t v45 = (void *)(((v35 | v31) + v43) & v49);
  int v46 = v37(v44, 1, v29);
  int v47 = v37(v45, 1, v29);
  if (!v46)
  {
    if (!v47)
    {
      (*(void (**)(void *, void *, uint64_t))(v30 + 40))(v44, v45, v29);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v30 + 8))(v44, v29);
    goto LABEL_46;
  }
  if (v47)
  {
LABEL_46:
    memcpy(v44, v45, v43);
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v30 + 32))(v44, v45, v29);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v44, 0, 1, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseGauge(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(v6 - 8);
  if (v5) {
    unsigned int v9 = v5 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(void *)(v7 - 8);
  if (v11 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = v11;
  }
  uint64_t v14 = *(unsigned int *)(v12 + 84);
  unsigned int v15 = v14 - 1;
  if (!v14) {
    unsigned int v15 = 0;
  }
  if (v15 > v13) {
    unsigned int v13 = v15;
  }
  if (v5) {
    uint64_t v16 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(a3[2] - 8) + 64) + 1;
  }
  if (v10) {
    uint64_t v17 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v17 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v18 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v19 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v21 = *(void *)(v12 + 64);
  if (v14) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = v21 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v23 = v17 + v20;
  unsigned int v24 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_43;
  }
  uint64_t v25 = ((v22 + v20 + ((v23 + ((v16 + v19 + ((v18 + 8) & ~v18)) & ~v19)) & ~v20)) & ~v20) + v22;
  char v26 = 8 * v25;
  if (v25 <= 3)
  {
    unsigned int v28 = ((v24 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)((char *)a1 + v25);
      if (!v27) {
        goto LABEL_43;
      }
      goto LABEL_33;
    }
    if (v28 > 0xFF)
    {
      int v27 = *(unsigned __int16 *)((char *)a1 + v25);
      if (!*(unsigned __int16 *)((char *)a1 + v25)) {
        goto LABEL_43;
      }
      goto LABEL_33;
    }
    if (v28 < 2)
    {
LABEL_43:
      if (v13)
      {
        uint64_t v32 = ((unint64_t)a1 + v18 + 8) & ~v18;
        if (v9 == v13)
        {
          unsigned int v33 = (*(uint64_t (**)(uint64_t))(v4 + 48))(v32);
        }
        else
        {
          uint64_t v35 = (v32 + v16 + v19) & ~v19;
          if (v11 == v13) {
            unsigned int v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v35, v10, v6);
          }
          else {
            unsigned int v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))((v23 + v35) & ~v20, v14, v7);
          }
        }
        if (v33 >= 2) {
          return v33 - 1;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v27 = *((unsigned __int8 *)a1 + v25);
  if (!*((unsigned char *)a1 + v25)) {
    goto LABEL_43;
  }
LABEL_33:
  int v29 = (v27 - 1) << v26;
  if (v25 > 3) {
    int v29 = 0;
  }
  if (v25)
  {
    if (v25 <= 3) {
      int v30 = v25;
    }
    else {
      int v30 = 4;
    }
    switch(v30)
    {
      case 2:
        int v31 = *a1;
        break;
      case 3:
        int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v31 = *(_DWORD *)a1;
        break;
      default:
        int v31 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v31 = 0;
  }
  return v13 + (v31 | v29) + 1;
}

void storeEnumTagSinglePayload for BaseGauge(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4[2] - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = a4[3];
  uint64_t v11 = a4[4];
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  if (v13) {
    unsigned int v14 = v13 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  if (v14 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(void *)(v11 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = *(unsigned __int8 *)(v16 + 80);
  unsigned int v21 = v17 - 1;
  if (!v17) {
    unsigned int v21 = 0;
  }
  if (v21 <= v15) {
    unsigned int v22 = v15;
  }
  else {
    unsigned int v22 = v21;
  }
  if (v8) {
    uint64_t v23 = *(void *)(*(void *)(a4[2] - 8) + 64);
  }
  else {
    uint64_t v23 = *(void *)(*(void *)(a4[2] - 8) + 64) + 1;
  }
  if (v13) {
    uint64_t v24 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  else {
    uint64_t v24 = *(void *)(*(void *)(v10 - 8) + 64) + 1;
  }
  uint64_t v25 = v24 + v20;
  uint64_t v26 = (v24 + v20 + ((v23 + v19 + ((v18 + 8) & ~v18)) & ~v19)) & ~v20;
  if (v17) {
    size_t v27 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  else {
    size_t v27 = *(void *)(*(void *)(v11 - 8) + 64) + 1;
  }
  size_t v28 = ((v27 + v20 + v26) & ~v20) + v27;
  BOOL v29 = a3 >= v22;
  unsigned int v30 = a3 - v22;
  if (v30 == 0 || !v29)
  {
LABEL_33:
    if (v22 < a2) {
      goto LABEL_34;
    }
    goto LABEL_41;
  }
  if (v28 <= 3)
  {
    unsigned int v31 = ((v30 + ~(-1 << (8 * v28))) >> (8 * v28)) + 1;
    if (HIWORD(v31))
    {
      int v6 = 4;
      if (v22 < a2)
      {
LABEL_34:
        unsigned int v32 = ~v22 + a2;
        if (v28 < 4)
        {
          int v33 = (v32 >> (8 * v28)) + 1;
          if (v28)
          {
            int v34 = v32 & ~(-1 << (8 * v28));
            bzero(a1, v28);
            if (v28 == 3)
            {
              *(_WORD *)a1 = v34;
              a1[2] = BYTE2(v34);
            }
            else if (v28 == 2)
            {
              *(_WORD *)a1 = v34;
            }
            else
            {
              *a1 = v34;
            }
          }
        }
        else
        {
          bzero(a1, v28);
          *(_DWORD *)a1 = v32;
          int v33 = 1;
        }
        switch(v6)
        {
          case 1:
            a1[v28] = v33;
            return;
          case 2:
            *(_WORD *)&a1[v28] = v33;
            return;
          case 3:
            goto LABEL_79;
          case 4:
            *(_DWORD *)&a1[v28] = v33;
            return;
          default:
            return;
        }
      }
      goto LABEL_41;
    }
    if (v31 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v31 > 1;
    }
    goto LABEL_33;
  }
  int v6 = 1;
  if (v22 < a2) {
    goto LABEL_34;
  }
LABEL_41:
  switch(v6)
  {
    case 1:
      a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_46;
    case 2:
      *(_WORD *)&a1[v28] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_46;
    case 3:
LABEL_79:
      __break(1u);
      JUMPOUT(0x1880BE1E4);
    case 4:
      *(_DWORD *)&a1[v28] = 0;
      goto LABEL_45;
    default:
LABEL_45:
      if (!a2) {
        return;
      }
LABEL_46:
      unint64_t v36 = (unint64_t)&a1[v18 + 8] & ~v18;
      if (v9 == v22)
      {
        uint64_t v37 = a2 + 1;
        int v38 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
        v38(v36, v37);
        return;
      }
      unint64_t v39 = (v36 + v23 + v19) & ~v19;
      if (v14 == v22)
      {
        uint64_t v40 = a2 + 1;
        size_t v41 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
        uint64_t v42 = v13;
        uint64_t v43 = v10;
LABEL_53:
        v41(v39, v40, v42, v43);
        return;
      }
      uint64_t v35 = ~v20;
      unint64_t v44 = (v25 + v39) & ~v20;
      if (v21 >= a2)
      {
        uint64_t v40 = a2 + 1;
        size_t v41 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
        unint64_t v39 = (v25 + v39) & v35;
        uint64_t v42 = v17;
        uint64_t v43 = v11;
        goto LABEL_53;
      }
      if (v27 <= 3) {
        int v45 = ~(-1 << (8 * v27));
      }
      else {
        int v45 = -1;
      }
      if (v27)
      {
        int v46 = v45 & (~v21 + a2);
        if (v27 <= 3) {
          int v47 = v27;
        }
        else {
          int v47 = 4;
        }
        bzero((void *)((v25 + v39) & v35), v27);
        switch(v47)
        {
          case 2:
            *(_WORD *)unint64_t v44 = v46;
            break;
          case 3:
            *(_WORD *)unint64_t v44 = v46;
            *(unsigned char *)(v44 + 2) = BYTE2(v46);
            break;
          case 4:
            *(_DWORD *)unint64_t v44 = v46;
            break;
          default:
            *(unsigned char *)unint64_t v44 = v46;
            break;
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in BaseGauge<A, B, C>()
{
  return &protocol witness table for BaseGauge<A, B, C>;
}

double static BaseGauge._makeView(view:inputs:)@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, double *a9@<X8>)
{
  int v15 = *a1;
  long long v16 = a2[3];
  long long v46 = a2[2];
  long long v47 = v16;
  long long v48 = a2[4];
  int v49 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v44 = *a2;
  long long v45 = v17;
  LODWORD(v41) = v15;
  HIDWORD(v34) = HIDWORD(a3);
  unint64_t v35 = a4;
  *(void *)&long long v36 = a5;
  *((void *)&v36 + 1) = a6;
  *(void *)&long long v37 = a7;
  *((void *)&v37 + 1) = a8;
  type metadata accessor for BaseGauge();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static BaseGauge._makeView(view:inputs:)(1, a3, a4, a5, a6, a7, a8);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v33 = v15;
  LODWORD(v34) = v15;
  _GraphValue.value.getter();
  uint64_t v31 = a3;
  if (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64))
  {
    uint64_t v18 = a3;
    uint64_t v19 = a5;
    closure #2 in static BaseGauge._makeView(view:inputs:)(1, v18, a4, a5, a6, a7, a8);
  }
  else
  {
    uint64_t v19 = a5;
  }
  uint64_t v32 = a7;
  unsigned int v29 = AGGraphCreateOffsetAttribute2();
  LODWORD(v34) = v15;
  _GraphValue.value.getter();
  uint64_t v20 = a4;
  if (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64))
  {
    uint64_t v21 = a4;
    uint64_t v22 = v19;
    closure #3 in static BaseGauge._makeView(view:inputs:)(1, v31, v21, v19, a6, a7, a8);
  }
  else
  {
    uint64_t v22 = v19;
  }
  unsigned int v28 = AGGraphCreateOffsetAttribute2();
  LODWORD(v34) = v15;
  _GraphValue.value.getter();
  uint64_t v23 = *(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64);
  if (v23) {
    closure #4 in static BaseGauge._makeView(view:inputs:)(1, v31, v20, v22, a6, a7, a8);
  }
  unsigned int v24 = AGGraphCreateOffsetAttribute2();
  LODWORD(v34) = v33;
  _GraphValue.value.getter();
  if (v23) {
    closure #5 in static BaseGauge._makeView(view:inputs:)(1, v31, v20, v22, a6, v32, a8);
  }
  unint64_t v41 = __PAIR64__(v29, OffsetAttribute2);
  double v42 = COERCE_DOUBLE(__PAIR64__(v24, v28));
  int v43 = AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for BaseGauge.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  long long v37 = v46;
  long long v38 = v47;
  long long v39 = v48;
  int v40 = v49;
  long long v36 = v45;
  lazy protocol witness table accessor for type ResolvedGauge and conformance ResolvedGauge();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static ModifiedContent<>._makeView(view:inputs:)();
  uint64_t v34 = v47;
  unint64_t v35 = __PAIR64__(HIDWORD(v44), DWORD2(v47));
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v25 = PreferencesOutputs.subscript.setter();
    MEMORY[0x1F4188790](v25);
    outlined retain of [Text.Modifier]((uint64_t)&v34);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  *(void *)a9 = v41;
  double result = v42;
  a9[1] = v42;
  return result;
}

uint64_t closure #1 in static BaseGauge._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a6;
  uint64_t v18 = a7;
  _OWORD v12[2] = type metadata accessor for BaseGauge();
  uint64_t v8 = MEMORY[0x1E4FBB3D0];
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t closure #2 in static BaseGauge._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v8 = type metadata accessor for BaseGauge();
  uint64_t v9 = a1 + *(int *)(v8 + 68);
  void v13[2] = v8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v15;
}

uint64_t closure #3 in static BaseGauge._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v8 = type metadata accessor for BaseGauge();
  uint64_t v9 = a1 + *(int *)(v8 + 72);
  void v13[2] = v8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v15;
}

uint64_t closure #4 in static BaseGauge._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v8 = type metadata accessor for BaseGauge();
  uint64_t v9 = a1 + *(int *)(v8 + 76);
  void v13[2] = v8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v15;
}

uint64_t closure #5 in static BaseGauge._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v8 = type metadata accessor for BaseGauge();
  uint64_t v9 = a1 + *(int *)(v8 + 80);
  void v13[2] = v8;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v15;
}

uint64_t implicit closure #1 in static BaseGauge._makeView(view:inputs:)(unsigned int a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, long long a10, uint64_t a11)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v13 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)uint64_t v67 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v67[16] = v13;
  *(_OWORD *)&v67[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v67[48] = *(_DWORD *)(a3 + 80);
  long long v14 = *(_OWORD *)(a3 + 16);
  long long v65 = *(_OWORD *)a3;
  long long v66 = v14;
  type metadata accessor for Optional();
  swift_getWitnessTable();
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a2, (uint64_t *)&v65, (uint64_t)&v69);
  *(void *)&long long v65 = v69;
  DWORD2(v65) = DWORD2(v69);
  *(void *)&long long v66 = *(void *)v70;
  DWORD2(v66) = *(_DWORD *)&v70[8];
  *(void *)uint64_t v67 = *(void *)&v70[16];
  *(_OWORD *)&v67[8] = *(_OWORD *)&v70[24];
  *(_OWORD *)&v67[24] = *(_OWORD *)&v70[40];
  *(_OWORD *)&v67[40] = *(_OWORD *)&v70[56];
  long long v68 = v71;
  uint64_t v63 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage();
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of _ViewInputs(a3);
  long long v46 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F4E740];
  _s14AttributeGraph0A0Vy7SwiftUI34WidgetAuxiliaryTextImagePreferenceVSgGMaTm_0(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryTextImagePreference?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryTextImagePreference?, MEMORY[0x1E4F4E740]);
  uint64_t v16 = v15;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_25, (uint64_t)v62, v63, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v17);
  uint64_t v18 = (void *)v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  long long v19 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)uint64_t v67 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v67[16] = v19;
  *(_OWORD *)&v67[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v67[48] = *(_DWORD *)(a3 + 80);
  long long v20 = *(_OWORD *)(a3 + 16);
  long long v65 = *(_OWORD *)a3;
  long long v66 = v20;
  type metadata accessor for Optional();
  swift_getWitnessTable();
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a4, (uint64_t *)&v65, (uint64_t)&v69);
  *(void *)&long long v65 = v69;
  DWORD2(v65) = DWORD2(v69);
  *(void *)&long long v66 = *(void *)v70;
  DWORD2(v66) = *(_DWORD *)&v70[8];
  *(void *)uint64_t v67 = *(void *)&v70[16];
  *(_OWORD *)&v67[8] = *(_OWORD *)&v70[24];
  *(_OWORD *)&v67[24] = *(_OWORD *)&v70[40];
  *(_OWORD *)&v67[40] = *(_OWORD *)&v70[56];
  long long v68 = v71;
  uint64_t v60 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage();
  uint64_t v61 = swift_getWitnessTable();
  outlined retain of _ViewInputs(a3);
  uint64_t v41 = v16;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_25, (uint64_t)v59, v60, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v21);
  uint64_t v22 = (void *)v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  long long v23 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)uint64_t v67 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v67[16] = v23;
  *(_OWORD *)&v67[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v67[48] = *(_DWORD *)(a3 + 80);
  long long v24 = *(_OWORD *)(a3 + 16);
  long long v65 = *(_OWORD *)a3;
  long long v66 = v24;
  type metadata accessor for Optional();
  swift_getWitnessTable();
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a5, (uint64_t *)&v65, (uint64_t)&v69);
  *(void *)&long long v65 = v69;
  DWORD2(v65) = DWORD2(v69);
  *(void *)&long long v66 = *(void *)v70;
  DWORD2(v66) = *(_DWORD *)&v70[8];
  *(void *)uint64_t v67 = *(void *)&v70[16];
  *(_OWORD *)&v67[8] = *(_OWORD *)&v70[24];
  *(_OWORD *)&v67[24] = *(_OWORD *)&v70[40];
  *(_OWORD *)&v67[40] = *(_OWORD *)&v70[56];
  long long v68 = v71;
  uint64_t v25 = type metadata accessor for LazyWidgetAuxiliaryMetadataTextImage();
  uint64_t v57 = v25;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v58 = v26;
  outlined retain of _ViewInputs(a3);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_25, (uint64_t)v56, v25, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v27);
  unsigned int v28 = (void *)v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  long long v29 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)uint64_t v67 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v67[16] = v29;
  *(_OWORD *)&v67[32] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v67[48] = *(_DWORD *)(a3 + 80);
  long long v30 = *(_OWORD *)(a3 + 16);
  long long v65 = *(_OWORD *)a3;
  long long v66 = v30;
  LazyWidgetAuxiliaryMetadataTextImage.init(flags:content:inputs:)(a6, (uint64_t *)&v65, (uint64_t)&v69);
  *(void *)&long long v65 = v69;
  DWORD2(v65) = DWORD2(v69);
  *(void *)&long long v66 = *(void *)v70;
  DWORD2(v66) = *(_DWORD *)&v70[8];
  *(void *)uint64_t v67 = *(void *)&v70[16];
  *(_OWORD *)&v67[8] = *(_OWORD *)&v70[24];
  *(_OWORD *)&v67[24] = *(_OWORD *)&v70[40];
  *(_OWORD *)&v67[40] = *(_OWORD *)&v70[56];
  long long v68 = v71;
  uint64_t v54 = v25;
  uint64_t v55 = v26;
  outlined retain of _ViewInputs(a3);
  uint64_t v31 = MEMORY[0x1E4FBC248];
  uint64_t v32 = MEMORY[0x1E4FBC278];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_25, (uint64_t)v53, v25, MEMORY[0x1E4FBC248], v41, MEMORY[0x1E4FBC278], v33);
  uint64_t v34 = (void *)v65;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  long long v35 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v70[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v70[32] = v35;
  *(_OWORD *)&v70[48] = *(_OWORD *)(a3 + 64);
  *(_DWORD *)&v70[64] = *(_DWORD *)(a3 + 80);
  long long v36 = *(_OWORD *)(a3 + 16);
  long long v69 = *(_OWORD *)a3;
  *(_OWORD *)uint64_t v70 = v36;
  unsigned int v37 = _ViewInputs.environment.getter();
  *(void *)&long long v65 = __PAIR64__(v49, a1);
  DWORD2(v65) = v49;
  HIDWORD(v65) = v49;
  *(void *)&long long v66 = __PAIR64__(v37, v49);
  *(void *)&long long v69 = a7;
  *((void *)&v69 + 1) = a8;
  *(_OWORD *)&v70[8] = a10;
  *(void *)uint64_t v70 = a9;
  *(void *)&v70[24] = a11;
  uint64_t v51 = type metadata accessor for BaseGauge.WidgetMetadataWriter();
  uint64_t v52 = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI34WidgetAuxiliaryTextImagePreferenceVSgGMaTm_0(0, &lazy cache variable for type metadata for Attribute<WidgetAuxiliaryViewMetadata?>, (uint64_t (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata?, v46);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_31, (uint64_t)v50, v51, v31, v38, v32, v39);
  return v69;
}

uint64_t BaseGauge.Child.value.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v69 = a7;
  int v77 = a3;
  unint64_t v74 = a2;
  uint64_t v65 = a9;
  unint64_t v75 = HIDWORD(a1);
  unint64_t v55 = HIDWORD(a2);
  unint64_t v57 = lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  uint64_t v114 = &type metadata for GaugeStyleConfiguration.Label;
  uint64_t v115 = a4;
  unint64_t v116 = v57;
  uint64_t v117 = a7;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v51 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v72 = (char *)&v50 - v16;
  unint64_t v56 = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  uint64_t v114 = &type metadata for GaugeStyleConfiguration.CurrentValueLabel;
  uint64_t v115 = a5;
  uint64_t v76 = a5;
  unint64_t v116 = v56;
  uint64_t v117 = a8;
  uint64_t v17 = a8;
  uint64_t v66 = a8;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v52 = type metadata accessor for ModifiedContent();
  uint64_t v62 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  long long v71 = (char *)&v50 - v18;
  unint64_t v58 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  uint64_t v114 = &type metadata for GaugeStyleConfiguration.MinimumValueLabel;
  uint64_t v115 = a6;
  unint64_t v116 = v58;
  uint64_t v117 = a10;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v54 = type metadata accessor for ModifiedContent();
  uint64_t v63 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v73 = (char *)&v50 - v19;
  unint64_t v59 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  uint64_t v114 = &type metadata for GaugeStyleConfiguration.MaximumValueLabel;
  uint64_t v115 = a6;
  uint64_t v20 = a6;
  unint64_t v116 = v59;
  uint64_t v117 = a10;
  uint64_t v67 = a10;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v60 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  int v53 = (char *)&v50 - v21;
  unint64_t v68 = a1;
  uint64_t v114 = *(ValueMetadata **)AGGraphGetValue();
  LOWORD(v115) = 0;
  BYTE2(v115) = 0;
  v96[2] = a4;
  v96[3] = a5;
  v96[4] = a6;
  uint64_t v50 = a6;
  uint64_t v22 = v69;
  v96[5] = v69;
  v96[6] = v17;
  v96[7] = a10;
  int v97 = a1;
  LODWORD(a6) = v74;
  LODWORD(v17) = v75;
  int v98 = v75;
  int v99 = v74;
  int v23 = v55;
  int v100 = v55;
  LODWORD(a5) = v77;
  int v101 = v77;
  unint64_t v24 = lazy protocol witness table accessor for type ResolvedGauge and conformance ResolvedGauge();
  uint64_t v70 = a4;
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for GaugeStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in BaseGauge.Child.value.getter, (uint64_t)v96, (uint64_t)&unk_1ED415390, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, a4, v24, v57, v22);
  v90[2] = a4;
  v90[3] = v76;
  v90[4] = v20;
  v90[5] = v22;
  uint64_t v25 = v66;
  v90[6] = v66;
  v90[7] = v67;
  int v91 = v68;
  LODWORD(a4) = v17;
  int v92 = v17;
  int v93 = a6;
  int v94 = v23;
  int v95 = a5;
  unint64_t v112 = v24;
  long long v113 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v26 = v51;
  uint64_t WitnessTable = swift_getWitnessTable();
  unsigned int v28 = v72;
  uint64_t v29 = v76;
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, (void (*)(double))partial apply for closure #2 in BaseGauge.Child.value.getter, (uint64_t)v90, v26, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, v76, WitnessTable, v56, v25);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v28, v26);
  v84[2] = v70;
  v84[3] = v29;
  uint64_t v30 = v50;
  v84[4] = v50;
  v84[5] = v22;
  uint64_t v31 = v67;
  LODWORD(v22) = v68;
  v84[6] = v25;
  v84[7] = v67;
  int v85 = v68;
  int v86 = a4;
  LODWORD(v25) = v74;
  int v87 = v74;
  int v88 = v23;
  int v89 = v77;
  uint64_t v110 = WitnessTable;
  int v111 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v32 = v52;
  uint64_t v33 = swift_getWitnessTable();
  uint64_t v49 = v31;
  uint64_t v34 = v31;
  uint64_t v35 = v30;
  uint64_t v36 = v30;
  unsigned int v37 = v71;
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, (void (*)(double))partial apply for closure #3 in BaseGauge.Child.value.getter, (uint64_t)v84, v32, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel, v35, v33, v58, v49);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v32);
  v78[2] = v70;
  void v78[3] = v76;
  v78[4] = v36;
  v78[5] = v69;
  v78[6] = v66;
  v78[7] = v34;
  int v79 = v22;
  int v80 = v75;
  int v81 = v25;
  int v82 = v23;
  int v83 = v77;
  uint64_t v108 = v33;
  int v109 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v38 = v54;
  uint64_t v39 = swift_getWitnessTable();
  int v40 = v53;
  uint64_t v41 = v73;
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel, (void (*)(double))partial apply for closure #4 in BaseGauge.Child.value.getter, (uint64_t)v78, v38, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel, v36, v39, v59, v34);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v38);
  AGGraphGetValue();
  uint64_t v106 = v39;
  unsigned int v107 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v42 = v60;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v114 = COERCE_VALUEMETADATA_(destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v42, v43, v44, v45));
  uint64_t v46 = type metadata accessor for AccessibilityGaugeModifier();
  uint64_t v47 = swift_getWitnessTable();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v104 = v43;
  unint64_t v105 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v102 = swift_getWitnessTable();
  uint64_t v103 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)((uint64_t)&v114, v42, v46, v43, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v40, v42);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance BaseGauge<A, B, C>.Child@<X0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance BaseGauge<A, B, C>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return BaseGauge.Child.value.getter(*(void *)v2, *(void *)(v2 + 8), *(_DWORD *)(v2 + 16), a1[2], a1[3], a1[4], a1[5], a1[6], a2, a1[7]);
}

uint64_t BaseGauge.WidgetMetadataWriter.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  *(void *)&long long v98 = a3;
  uint64_t v95 = a2;
  int v94 = a4;
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v93 = (uint64_t)v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v92 = (uint64_t)v87 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v91 = (uint64_t)v87 - v10;
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)v87 - v12;
  long long v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s14AttributeGraph0A0Vy7SwiftUI34WidgetAuxiliaryTextImagePreferenceVSgGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v87 - v16;
  _s14AttributeGraph0A0Vy7SwiftUI34WidgetAuxiliaryTextImagePreferenceVSgGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, v14);
  MEMORY[0x1F4188790](v18 - 8);
  int v88 = (char *)v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v87 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v87 - v24;
  MEMORY[0x1F4188790](v26);
  unsigned int v28 = (char *)v87 - v27;
  uint64_t v29 = (int *)type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v30 = *((void *)v29 - 1);
  MEMORY[0x1F4188790](v29);
  int v89 = (id *)((char *)v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v32);
  int v97 = (id *)((char *)v87 - v33);
  MEMORY[0x1F4188790](v34);
  uint64_t v96 = (id *)((char *)v87 - v35);
  MEMORY[0x1F4188790](v36);
  *(void *)&long long v99 = (char *)v87 - v37;
  uint64_t v90 = (char *)a1;
  type metadata accessor for WidgetAuxiliaryTextImagePreference?();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v39 = *Value;
  if (*Value)
  {
    if (v39 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*Value);
      uint64_t v40 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v40);
      PlatformItemList.mergedContentItem.getter(v39, (uint64_t)v28);
      swift_bridgeObjectRelease();
      uint64_t v41 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v28, 0, 1, v41);
      goto LABEL_6;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  uint64_t v42 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v28, 1, 1, v42);
LABEL_6:
  uint64_t v43 = type metadata accessor for URL();
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
  uint64_t v101 = v44 + 56;
  uint64_t v102 = v45;
  v45(v17, 1, 1, v43);
  long long v48 = *(void (**)(char *, uint64_t, uint64_t, int *))(v30 + 56);
  uint64_t v47 = v30 + 56;
  uint64_t v46 = v48;
  long long v100 = xmmword_18834BB90;
  long long v107 = xmmword_18834BB90;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  v48(v13, 1, 1, v29);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v28, (uint64_t)v17, (uint64_t *)&v107, (uint64_t)v13, (id *)v99);
  uint64_t v49 = (uint64_t *)AGGraphGetValue();
  uint64_t v50 = *v49;
  if (*v49)
  {
    if (v50 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*v49);
      uint64_t v51 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v51);
      PlatformItemList.mergedContentItem.getter(v50, (uint64_t)v25);
      swift_bridgeObjectRelease();
      uint64_t v52 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v25, 0, 1, v52);
      goto LABEL_11;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  uint64_t v53 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v25, 1, 1, v53);
LABEL_11:
  v102(v17, 1, 1, v43);
  long long v107 = v100;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  v46(v13, 1, 1, v29);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v25, (uint64_t)v17, (uint64_t *)&v107, (uint64_t)v13, v96);
  uint64_t v54 = (uint64_t *)AGGraphGetValue();
  uint64_t v55 = *v54;
  if (*v54)
  {
    if (v55 != 1)
    {
      outlined copy of WidgetAuxiliaryTextImagePreference?(*v54);
      uint64_t v56 = swift_bridgeObjectRetain();
      outlined consume of WidgetAuxiliaryTextImagePreference?(v56);
      PlatformItemList.mergedContentItem.getter(v55, (uint64_t)v22);
      swift_bridgeObjectRelease();
      uint64_t v57 = type metadata accessor for PlatformItemList.Item();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v22, 0, 1, v57);
      goto LABEL_16;
    }
  }
  else
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
  }
  uint64_t v58 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v22, 1, 1, v58);
LABEL_16:
  uint64_t v59 = (uint64_t)v88;
  v102(v17, 1, 1, v43);
  long long v107 = v100;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  v46(v13, 1, 1, v29);
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)((uint64_t)v22, (uint64_t)v17, (uint64_t *)&v107, (uint64_t)v13, v97);
  uint64_t v60 = (uint64_t *)AGGraphGetValue();
  uint64_t v61 = *v60;
  if (!*v60)
  {
    outlined copy of WidgetAuxiliaryTextImagePreference?(0);
    outlined consume of WidgetAuxiliaryTextImagePreference?(0);
    goto LABEL_20;
  }
  if (v61 == 1)
  {
LABEL_20:
    uint64_t v64 = type metadata accessor for PlatformItemList.Item();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v59, 1, 1, v64);
    goto LABEL_21;
  }
  outlined copy of WidgetAuxiliaryTextImagePreference?(*v60);
  uint64_t v62 = swift_bridgeObjectRetain();
  outlined consume of WidgetAuxiliaryTextImagePreference?(v62);
  PlatformItemList.mergedContentItem.getter(v61, v59);
  swift_bridgeObjectRelease();
  uint64_t v63 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v59, 0, 1, v63);
LABEL_21:
  v102(v17, 1, 1, v43);
  long long v107 = v100;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v110 = 0u;
  v46(v13, 1, 1, v29);
  uint64_t v65 = v46;
  uint64_t v66 = v89;
  WidgetAuxiliaryViewMetadata.init(item:url:accessibility:child:)(v59, (uint64_t)v17, (uint64_t *)&v107, (uint64_t)v13, v89);
  double v67 = *(double *)AGGraphGetValue();
  uint64_t v95 = v43;
  outlined init with copy of WidgetAuxiliaryViewMetadata(v99, (uint64_t)v13);
  v65(v13, 0, 1, v29);
  uint64_t v90 = v13;
  unint64_t v68 = v96;
  uint64_t v69 = v91;
  outlined init with copy of WidgetAuxiliaryViewMetadata((uint64_t)v96, v91);
  v65((char *)v69, 0, 1, v29);
  uint64_t v70 = v47;
  long long v71 = v97;
  uint64_t v72 = v92;
  outlined init with copy of WidgetAuxiliaryViewMetadata((uint64_t)v97, v92);
  v65((char *)v72, 0, 1, v29);
  v87[1] = v70;
  uint64_t v73 = v93;
  outlined init with copy of WidgetAuxiliaryViewMetadata((uint64_t)v66, v93);
  v65((char *)v73, 0, 1, v29);
  unint64_t v74 = (uint64_t *)AGGraphGetValue();
  uint64_t v75 = *v74;
  uint64_t v76 = v74[1];
  swift_retain();
  swift_retain();
  *(void *)&long long v107 = v75;
  *((void *)&v107 + 1) = v76;
  static WidgetAuxiliaryViewMetadata.tint(from:)((uint64_t)&v105);
  swift_release();
  swift_release();
  uint64_t v103 = v105;
  char v104 = v106;
  WidgetAuxiliaryViewMetadata.Gauge.init(value:label:currentValueLabel:minimumValueLabel:maximumValueLabel:tint:)((uint64_t)v90, v69, v72, v73, &v103, (double *)&v107, v67);
  outlined destroy of WidgetAuxiliaryViewMetadata((uint64_t)v66);
  outlined destroy of WidgetAuxiliaryViewMetadata((uint64_t)v71);
  outlined destroy of WidgetAuxiliaryViewMetadata((uint64_t)v68);
  outlined destroy of WidgetAuxiliaryViewMetadata(v99);
  long long v99 = v107;
  long long v98 = v108;
  long long v77 = v109;
  LOBYTE(v73) = v110;
  uint64_t v78 = v94;
  *(void *)int v94 = 0;
  *((void *)v78 + 1) = 0;
  int v79 = &v78[v29[6]];
  uint64_t v80 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 1, 1, v80);
  *(void *)&v78[v29[7]] = 0;
  int v81 = &v78[v29[8]];
  uint64_t v82 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v81, 1, 1, v82);
  int v83 = &v78[v29[9]];
  v102(&v78[v29[10]], 1, 1, v95);
  uint64_t v84 = (long long *)&v78[v29[11]];
  *uint64_t v84 = v100;
  v84[1] = 0u;
  v84[2] = 0u;
  v84[3] = 0u;
  long long v85 = v98;
  *(_OWORD *)int v83 = v99;
  *((_OWORD *)v83 + 1) = v85;
  *((_OWORD *)v83 + 2) = v77;
  v83[48] = v73;
  return ((uint64_t (*)(char *, void, uint64_t, int *))v65)(v78, 0, 1, v29);
}

uint64_t protocol witness for Rule.value.getter in conformance BaseGauge<A, B, C>.WidgetMetadataWriter@<X0>(char *a1@<X8>)
{
  return BaseGauge.WidgetMetadataWriter.value.getter(*v1, v1[1], v1[2], a1);
}

double protocol witness for static View._makeView(view:inputs:) in conformance BaseGauge<A, B, C>@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, double *a4@<X8>)
{
  return static BaseGauge._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BaseGauge<A, B, C>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BaseGauge<A, B, C>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance BaseGauge<A, B, C>()
{
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedGauge(long long *a1)
{
  int v1 = *((_DWORD *)a1 + 4);
  uint64_t v2 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v1;
  uint64_t v7 = v2;
  unint64_t v3 = lazy protocol witness table accessor for type ResolvedGaugeStyle and conformance ResolvedGaugeStyle();
  return (*(uint64_t (**)(long long *))(v3 + 40))(&v5);
}

double protocol witness for View.body.getter in conformance ResolvedGauge@<D0>(uint64_t a1@<X8>)
{
  double result = *(double *)v1;
  char v3 = *(unsigned char *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 9);
  char v5 = *(unsigned char *)(v1 + 10);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = (v3 & 1) == 0;
  *(unsigned char *)(a1 + 9) = (v4 & 1) == 0;
  *(unsigned char *)(a1 + 10) = (v5 & 1) == 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  }
  return result;
}

uint64_t type metadata accessor for BaseGauge.Child()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ResolvedGauge and conformance ResolvedGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedGauge and conformance ResolvedGauge;
  if (!lazy protocol witness table cache variable for type ResolvedGauge and conformance ResolvedGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGauge and conformance ResolvedGauge);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static BaseGauge._makeView(view:inputs:)()
{
  *(void *)&v2[16] = *(void *)(v0 + 48);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 32);
  return implicit closure #1 in static BaseGauge._makeView(view:inputs:)(*(_DWORD *)(v0 + 64), *(_DWORD *)(v0 + 68), *(void *)(v0 + 72), *(_DWORD *)(v0 + 80), *(_DWORD *)(v0 + 84), *(_DWORD *)(v0 + 88), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(long long *)&v2[8], *(void *)(v0 + 56));
}

uint64_t type metadata accessor for BaseGauge.WidgetMetadataWriter()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ResolvedGauge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ResolvedGauge()
{
  return &unk_1ED415390;
}

uint64_t base witness table accessor for _AttributeBody in BaseGauge<A, B, C>.WidgetMetadataWriter()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in BaseGauge<A, B, C>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t partial apply for closure #2 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t partial apply for closure #3 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t partial apply for closure #4 in BaseGauge.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

void _s14AttributeGraph0A0Vy7SwiftUI34WidgetAuxiliaryTextImagePreferenceVSgGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for SystemTabViewStyle()
{
  return &type metadata for SystemTabViewStyle;
}

uint64_t static SystemTabViewStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t static SystemTabViewStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t SystemTabViewStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t SystemTabViewStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = a4;
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t v31 = &type metadata for SystemTabViewStyle;
  uint64_t v32 = a2;
  uint64_t v33 = &protocol witness table for SystemTabViewStyle;
  uint64_t v34 = a3;
  uint64_t v10 = type metadata accessor for _TabViewValue();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v22 - v11;
  uint64_t v13 = type metadata accessor for SystemTabView();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v22 - v14;
  type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v16 = type metadata accessor for _VariadicView.Tree();
  uint64_t v22 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - v17;
  SystemTabViewStyle.Body.base.getter((uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v9, v12, v24);
  UniversalList.init(selection:)((uint64_t)v9, (uint64_t)v15);
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  int v28 = a1;
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  uint64_t v19 = swift_getWitnessTable();
  unint64_t v20 = lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  View.input<A>(_:)((uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v16, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v19, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v18, v16);
}

uint64_t closure #1 in SystemTabViewStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = &type metadata for SystemTabViewStyle;
  v10[1] = a2;
  _OWORD v10[2] = &protocol witness table for SystemTabViewStyle;
  v10[3] = a3;
  uint64_t v3 = type metadata accessor for _TabViewValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  int v6 = (char *)v10 - v5;
  SystemTabViewStyle.Body.base.getter((uint64_t)v10 - v5);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v7 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v8 = static ViewBuilder.buildExpression<A>(_:)(v7);
  return static ViewBuilder.buildExpression<A>(_:)(v8);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SystemTabViewStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SystemTabView();
  type metadata accessor for TabViewStyleConfiguration.Content();
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SystemTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SystemTabViewStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t type metadata accessor for SystemTabView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>)
  {
    lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>);
    }
  }
}

uint64_t type metadata accessor for SystemTabViewStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for SystemTabView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v8 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = (((1 << v9) + a2 - v7) >> v9) + 1;
  if (HIWORD(v12))
  {
    int v10 = *(_DWORD *)((char *)a1 + v8);
    if (v10) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      unsigned int v18 = v17 + 1;
    }
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
  if (v12 > 0xFF)
  {
    int v10 = *(unsigned __int16 *)((char *)a1 + v8);
    if (*(unsigned __int16 *)((char *)a1 + v8)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v12 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_25;
  }
LABEL_15:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 <= 3) {
      int v14 = ((v6 + 16) & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      int v14 = 4;
    }
    switch(v14)
    {
      case 2:
        int v15 = *a1;
        break;
      case 3:
        int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v15 = *(_DWORD *)a1;
        break;
      default:
        int v15 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v15 = 0;
  }
  return (v15 | v13) + v7;
}

void storeEnumTagSinglePayload for SystemTabView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v8 - 1 >= a3)
  {
    int v12 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v12 = 1;
  if (v11 > 3) {
    goto LABEL_13;
  }
  unsigned int v13 = (((1 << (8 * v11)) + a3 - v8) >> (8 * v11)) + 1;
  if (HIWORD(v13))
  {
    int v12 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v13 >= 0x100) {
      int v12 = 2;
    }
    else {
      int v12 = v13 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v12)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                unint64_t v20 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v23 = a2 + 1;
                  v22(((unint64_t)v20 + v10 + 8) & ~v10, v23);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v21 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v21 = a2;
                  }
                  *unint64_t v20 = v21;
                }
              }
            }
            else
            {
              if (v11 <= 3) {
                int v17 = ~(-1 << (8 * v11));
              }
              else {
                int v17 = -1;
              }
              if (v11)
              {
                int v18 = v17 & (a2 - v8);
                if (v11 <= 3) {
                  int v19 = v11;
                }
                else {
                  int v19 = 4;
                }
                bzero(a1, v11);
                switch(v19)
                {
                  case 2:
                    *(_WORD *)a1 = v18;
                    break;
                  case 3:
                    *(_WORD *)a1 = v18;
                    a1[2] = BYTE2(v18);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v18;
                    break;
                  default:
                    *a1 = v18;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v14 = a2 - v8;
  if (v11 < 4)
  {
    int v15 = (v14 >> (8 * v11)) + 1;
    if (v11)
    {
      int v16 = v14 & ~(-1 << (8 * v11));
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v11);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v12)
  {
    case 1:
      a1[v11] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v15;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x1880C1FE4);
    case 4:
      *(_DWORD *)&a1[v11] = v15;
      break;
    default:
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for SystemTabView<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in SystemTabView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SystemTabView.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v9 = &v15[-v8 - 8];
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v15);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
  uint64_t v10 = default argument 0 of SystemTabView.BodyContent.init(clientSidebarVisibility:children:selection:)();
  return SystemTabView.BodyContent.init(clientSidebarVisibility:children:selection:)(v10, v12, v11 & 0x1FF, (uint64_t)v15, (uint64_t)v9, a2);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance SystemTabView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t base witness table accessor for _AttributeBody in SystemTabViewStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in SystemTabViewStyle.Body.value.getter()
{
  return closure #1 in SystemTabViewStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1880C2284()
{
  type metadata accessor for SystemTabView.BodyContent();

  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for TraitBasedBadgedViewStyle()
{
  return &type metadata for TraitBasedBadgedViewStyle;
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in TraitBasedBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for BadgeTraitKey()
{
  return &type metadata for BadgeTraitKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>();
    lazy protocol witness table accessor for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>)
  {
    type metadata accessor for _TraitWritingModifier<BadgeTraitKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BadgeViewStyleConfiguration.Content, _TraitWritingModifier<BadgeTraitKey>>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<BadgeTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<BadgeTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<BadgeTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<BadgeTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<BadgeTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

SwiftUI::UnifiedWindowToolbarStyle __swiftcall UnifiedWindowToolbarStyle.init()()
{
  result.showsTitle = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::UnifiedWindowToolbarStyle __swiftcall UnifiedWindowToolbarStyle.init(showsTitle:)(Swift::Bool showsTitle)
{
  result.showsTitle = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void UnifiedWindowToolbarStyle.configureWindowToolbar(_:)()
{
}

void static UnifiedWindowToolbarStyle._makeInputs(style:inputs:)()
{
}

unsigned char *storeEnumTagSinglePayload for UnifiedWindowToolbarStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *SwiftUI::UnifiedWindowToolbarStyle result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880C25B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *SwiftUI::UnifiedWindowToolbarStyle result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnifiedWindowToolbarStyle()
{
  return &type metadata for UnifiedWindowToolbarStyle;
}

void static BackgroundTask.intentDidRun.getter()
{
}

void SnapshotResponse.init(restoredDefaultState:estimatedSnapshotExpiration:identifier:)()
{
}

void SnapshotData.reason.getter()
{
}

void SnapshotData.identifier.getter()
{
}

void static SnapshotData.SnapshotReason.== infix(_:_:)()
{
}

void SnapshotData.SnapshotReason.hash(into:)()
{
}

void SnapshotData.SnapshotReason.hashValue.getter()
{
}

unint64_t lazy protocol witness table accessor for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason()
{
  unint64_t result = lazy protocol witness table cache variable for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason;
  if (!lazy protocol witness table cache variable for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SnapshotData.SnapshotReason and conformance SnapshotData.SnapshotReason);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SnapshotResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    unsigned int v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      type metadata accessor for Date?();
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(unsigned char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = *(int *)(a3 + 24);
    int v15 = (uint64_t *)((char *)v4 + v14);
    int v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    void *v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for SnapshotResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }

  return swift_bridgeObjectRelease();
}

unsigned char *initializeWithCopy for SnapshotResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for Date?();
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *assignWithCopy for SnapshotResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for Date?();
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  int v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unsigned char *initializeWithTake for SnapshotResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for Date?();
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

unsigned char *assignWithTake for SnapshotResponse(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for Date?();
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  int v16 = &a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  void *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SnapshotResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1880C2F0C);
}

uint64_t sub_1880C2F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Date?();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SnapshotResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1880C2FF4);
}

void sub_1880C2FF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Date?();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
}

uint64_t type metadata accessor for SnapshotResponse()
{
  uint64_t result = type metadata singleton initialization cache for SnapshotResponse;
  if (!type metadata singleton initialization cache for SnapshotResponse) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for SnapshotResponse()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SnapshotData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SnapshotData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SnapshotData(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SnapshotData()
{
  return &type metadata for SnapshotData;
}

unsigned char *storeEnumTagSinglePayload for SnapshotData.SnapshotReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880C3344);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SnapshotData.SnapshotReason()
{
  return &type metadata for SnapshotData.SnapshotReason;
}

void static BackgroundTask.snapshot.getter()
{
}

void static BackgroundTask.relevantShortcut.getter()
{
}

void static BackgroundTask.watchConnectivity.getter()
{
}

void static BackgroundTask.bluetoothAlert.getter()
{
}

uint64_t outlined copy of ListRowSeparatorVisitor.Neighbor()
{
  swift_retain();

  return swift_retain();
}

unint64_t destroy for ListRowSeparatorVisitor(void *a1)
{
  if (*a1 >> 2 != 0xFFFFFFFFLL || a1[2] >= 4uLL) {
    outlined consume of ListRowSeparatorVisitor.Neighbor();
  }
  swift_release();
  swift_release();
  unint64_t result = a1[8];
  if (result >> 2 != 0xFFFFFFFF || a1[10] >= 4uLL)
  {
    return outlined consume of ListRowSeparatorVisitor.Neighbor();
  }
  return result;
}

uint64_t initializeWithCopy for ListRowSeparatorVisitor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[2];
  if ((unint64_t)*a2 >> 2 != 0xFFFFFFFF || v5 >= 4)
  {
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[3];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v8;
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
  }
  unint64_t v10 = a2[8];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 40) = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = a2[7];
  unint64_t v11 = a2[10];
  swift_retain();
  swift_retain();
  if (v10 >> 2 == 0xFFFFFFFF && v11 < 4)
  {
    long long v12 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v12;
  }
  else
  {
    uint64_t v13 = a2[9];
    uint64_t v14 = a2[11];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = v14;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 104) = a2[13];
  return a1;
}

uint64_t assignWithCopy for ListRowSeparatorVisitor(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *a2;
  unint64_t v5 = a2[2];
  BOOL v7 = (unint64_t)*a2 >> 2 == 0xFFFFFFFF && v5 < 4;
  if (*(void *)a1 >> 2 != 0xFFFFFFFFLL || *(void *)(a1 + 16) >= 4uLL)
  {
    if (v7)
    {
      outlined destroy of ListRowSeparatorVisitor.Neighbor(a1);
      long long v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v11 = a2[1];
      uint64_t v12 = a2[3];
      outlined copy of ListRowSeparatorVisitor.Neighbor();
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v11;
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v12;
      outlined consume of ListRowSeparatorVisitor.Neighbor();
    }
  }
  else if (v7)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v13 = a2[1];
    uint64_t v14 = a2[3];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v13;
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v14;
  }
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 40) = a2[5];
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 56) = a2[7];
  swift_retain();
  swift_release();
  uint64_t v15 = (_OWORD *)(a1 + 64);
  uint64_t v17 = a2 + 8;
  unint64_t v16 = a2[8];
  unint64_t v18 = a2[10];
  BOOL v20 = v16 >> 2 == 0xFFFFFFFF && v18 < 4;
  if (*(void *)(a1 + 64) >> 2 == 0xFFFFFFFFLL && *(void *)(a1 + 80) < 4uLL)
  {
    if (v20)
    {
      long long v21 = *((_OWORD *)a2 + 5);
      _OWORD *v15 = *v17;
      *(_OWORD *)(a1 + 80) = v21;
    }
    else
    {
      uint64_t v25 = a2[9];
      uint64_t v26 = a2[11];
      outlined copy of ListRowSeparatorVisitor.Neighbor();
      *(void *)(a1 + 64) = v16;
      *(void *)(a1 + 72) = v25;
      *(void *)(a1 + 80) = v18;
      *(void *)(a1 + 88) = v26;
    }
  }
  else if (v20)
  {
    outlined destroy of ListRowSeparatorVisitor.Neighbor(a1 + 64);
    long long v22 = *((_OWORD *)a2 + 5);
    _OWORD *v15 = *v17;
    *(_OWORD *)(a1 + 80) = v22;
  }
  else
  {
    uint64_t v23 = a2[9];
    uint64_t v24 = a2[11];
    outlined copy of ListRowSeparatorVisitor.Neighbor();
    *(void *)(a1 + 64) = v16;
    *(void *)(a1 + 72) = v23;
    *(void *)(a1 + 80) = v18;
    *(void *)(a1 + 88) = v24;
    outlined consume of ListRowSeparatorVisitor.Neighbor();
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a2 + 96);
  *(void *)(a1 + 104) = a2[13];
  return a1;
}

uint64_t outlined destroy of ListRowSeparatorVisitor.Neighbor(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for ListRowSeparatorVisitor(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 >> 2 == 0xFFFFFFFFLL && *(void *)(a1 + 16) < 4uLL) {
    goto LABEL_12;
  }
  unint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)a2 >> 2 == 0xFFFFFFFFLL && v5 < 4)
  {
    outlined destroy of ListRowSeparatorVisitor.Neighbor(a1);
LABEL_12:
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v8;
  outlined consume of ListRowSeparatorVisitor.Neighbor();
LABEL_13:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  unint64_t v10 = *(void *)(a2 + 64);
  unint64_t v11 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 64) >> 2 != 0xFFFFFFFFLL || *(void *)(a1 + 80) >= 4uLL)
  {
    if (v10 >> 2 != 0xFFFFFFFF || v11 >= 4)
    {
      uint64_t v13 = *(void *)(a2 + 72);
      uint64_t v14 = *(void *)(a2 + 88);
      *(void *)(a1 + 64) = v10;
      *(void *)(a1 + 72) = v13;
      *(void *)(a1 + 80) = v11;
      *(void *)(a1 + 88) = v14;
      outlined consume of ListRowSeparatorVisitor.Neighbor();
      goto LABEL_20;
    }
    outlined destroy of ListRowSeparatorVisitor.Neighbor(a1 + 64);
  }
  long long v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v12;
LABEL_20:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowSeparatorVisitor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)a1 >> 2;
  int v4 = -2 - v3;
  if (-2 - (int)v3 < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowSeparatorVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 4 * ~a2;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListRowSeparatorVisitor()
{
  return &type metadata for ListRowSeparatorVisitor;
}

uint64_t destroy for ListRowSeparatorVisitor.Neighbor()
{
  return outlined consume of ListRowSeparatorVisitor.Neighbor();
}

void *initializeWithCopy for ListRowSeparatorVisitor.Neighbor(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of ListRowSeparatorVisitor.Neighbor();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

void *assignWithCopy for ListRowSeparatorVisitor.Neighbor(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  outlined copy of ListRowSeparatorVisitor.Neighbor();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  outlined consume of ListRowSeparatorVisitor.Neighbor();
  return a1;
}

_OWORD *assignWithTake for ListRowSeparatorVisitor.Neighbor(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  outlined consume of ListRowSeparatorVisitor.Neighbor();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRowSeparatorVisitor.Neighbor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)a1 >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRowSeparatorVisitor.Neighbor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 4 * -a2;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for ListRowSeparatorVisitor.Neighbor(void *result, uint64_t a2)
{
  uint64_t v2 = result[2] & 3 | (a2 << 63);
  *result &= 3uLL;
  result[2] = v2;
  return result;
}

void *type metadata accessor for ListRowSeparatorVisitor.Neighbor()
{
  return &unk_1ED43F3A0;
}

ValueMetadata *type metadata accessor for ListRowSeparatorVisitor.Options()
{
  return &type metadata for ListRowSeparatorVisitor.Options;
}

unsigned char *storeEnumTagSinglePayload for ListRowSeparatorVisitor.Steps(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1880C3C98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ListRowSeparatorVisitor.Steps()
{
  return &unk_1ED43F2E8;
}

unint64_t lazy protocol witness table accessor for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps()
{
  unint64_t result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Steps and conformance ListRowSeparatorVisitor.Steps);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor.Options and conformance ListRowSeparatorVisitor.Options);
  }
  return result;
}

uint64_t static Animation.timingCurve(_:duration:)()
{
  return Animation.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type BezierAnimation and conformance BezierAnimation()
{
  unint64_t result = lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation;
  if (!lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierAnimation and conformance BezierAnimation);
  }
  return result;
}

double BezierTimingCurve.startControlPoint.getter()
{
  return *(double *)v0;
}

void BezierTimingCurve.startControlPoint.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*BezierTimingCurve.startControlPoint.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double BezierTimingCurve.endControlPoint.getter()
{
  return *(double *)(v0 + 16);
}

void BezierTimingCurve.endControlPoint.setter(double a1, double a2)
{
  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t (*BezierTimingCurve.endControlPoint.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void BezierTimingCurve.init(startControlPoint:endControlPoint:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
}

Swift::Double __swiftcall BezierTimingCurve.value(at:)(Swift::Double at)
{
  BezierTimingCurve.value(at:)(MEMORY[0x1E4F41860], v1, v2, v3, v4);
  return result;
}

Swift::Double __swiftcall BezierTimingCurve.velocity(at:)(Swift::Double at)
{
  BezierTimingCurve.value(at:)(MEMORY[0x1E4F41868], v1, v2, v3, v4);
  return result;
}

uint64_t BezierTimingCurve.value(at:)(uint64_t (*a1)(void, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return a1(a1, a2, a3, a4, a5);
}

int8x16_t BezierTimingCurve.inverse.getter@<Q0>(int8x16_t *a1@<X8>)
{
  int8x16_t result = vextq_s8(*v1, *v1, 8uLL);
  int8x16_t v3 = vextq_s8(v1[1], v1[1], 8uLL);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t BezierTimingCurve.hash(into:)()
{
  UnitPoint.hash(into:)();

  return UnitPoint.hash(into:)();
}

uint64_t static BezierTimingCurve.== infix(_:_:)()
{
  if ((static UnitPoint.== infix(_:_:)() & 1) == 0) {
    return 0;
  }

  return static UnitPoint.== infix(_:_:)();
}

Swift::Int BezierTimingCurve.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance BezierTimingCurve()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance BezierTimingCurve()
{
  UnitPoint.hash(into:)();

  return UnitPoint.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance BezierTimingCurve()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BezierTimingCurve()
{
  if ((static UnitPoint.== infix(_:_:)() & 1) == 0) {
    return 0;
  }

  return static UnitPoint.== infix(_:_:)();
}

double one-time initialization function for easeInEaseOut()
{
  double result = 0.42;
  static BezierTimingCurve.easeInEaseOut = xmmword_1883C5460;
  unk_1E9036488 = xmmword_1883C5470;
  return result;
}

double static BezierTimingCurve.easeInEaseOut.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for easeInEaseOut, (__n128 *)&static BezierTimingCurve.easeInEaseOut, &xmmword_1E9036488, a1).n128_u64[0];
  return result;
}

double one-time initialization function for easeIn()
{
  double result = 0.42;
  __asm { FMOV            V1.2D, #1.0 }
  static BezierTimingCurve.easeIn = xmmword_1883C5460;
  unk_1E90364A8 = _Q1;
  return result;
}

double static BezierTimingCurve.easeIn.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for easeIn, (__n128 *)&static BezierTimingCurve.easeIn, &xmmword_1E90364A8, a1).n128_u64[0];
  return result;
}

double one-time initialization function for easeOut()
{
  static BezierTimingCurve.easeOut = 0;
  unk_1E90364C0 = 0;
  double result = 0.58;
  xmmword_1E90364C8 = xmmword_1883C5470;
  return result;
}

double static BezierTimingCurve.easeOut.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for easeOut, (__n128 *)&static BezierTimingCurve.easeOut, (__n128 *)&xmmword_1E90364C8, a1).n128_u64[0];
  return result;
}

__n128 one-time initialization function for linear()
{
  static BezierTimingCurve.linear = 0;
  unk_1E90364E0 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  xmmword_1E90364E8 = (__int128)result;
  return result;
}

double static BezierTimingCurve.linear.getter@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = static BezierTimingCurve.easeInEaseOut.getter(&one-time initialization token for linear, (__n128 *)&static BezierTimingCurve.linear, (__n128 *)&xmmword_1E90364E8, a1).n128_u64[0];
  return result;
}

__n128 static BezierTimingCurve.easeInEaseOut.getter@<Q0>(void *a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X2>, __n128 *a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  __n128 result = *a2;
  __n128 v8 = *a3;
  *a4 = *a2;
  a4[1] = v8;
  return result;
}

unint64_t lazy protocol witness table accessor for type BezierTimingCurve and conformance BezierTimingCurve()
{
  unint64_t result = lazy protocol witness table cache variable for type BezierTimingCurve and conformance BezierTimingCurve;
  if (!lazy protocol witness table cache variable for type BezierTimingCurve and conformance BezierTimingCurve)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BezierTimingCurve and conformance BezierTimingCurve);
  }
  return result;
}

ValueMetadata *type metadata accessor for BezierTimingCurve()
{
  return &type metadata for BezierTimingCurve;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1]);
  *a3 = result & 1;
  return result;
}

uint64_t EnvironmentValues.textInputValidation.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputValidation?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputValidation?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextInputValidationKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of TextInputValidation?((uint64_t)&static TextInputValidationKey.defaultValue, a1);
}

uint64_t EnvironmentValues.textInputValidation.setter(uint64_t a1)
{
  outlined init with copy of TextInputValidation?(a1, (uint64_t)v4);
  type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputValidation?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of TextInputValidation?(a1);
}

uint64_t View.textInputValidation(_:)(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  if (a1)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    uint64_t v5 = swift_allocObject();
    unsigned int v6 = _sSSSbIeggd_SSSbIegnr_TRTA_0;
    *(void *)(v5 + 16) = _sSSSbIeggd_SSSbIegnr_TRTA_0;
    *(void *)(v5 + 24) = v4;
    *((void *)&v9 + 1) = &unk_1ED446100;
    unint64_t v10 = &protocol witness table for CustomTextInputValidation;
    *(void *)&long long v8 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool);
    *((void *)&v8 + 1) = v5;
    swift_retain();
  }
  else
  {
    unsigned int v6 = 0;
    unint64_t v10 = 0;
    long long v8 = 0u;
    long long v9 = 0u;
  }
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
  View.environment<A>(_:_:)();
  swift_release();
  return outlined destroy of TextInputValidation?((uint64_t)&v8);
}

uint64_t key path getter for EnvironmentValues.textInputValidation : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputValidation?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputValidation?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputValidationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_1880C4A38(uint64_t a1)
{
  outlined init with copy of TextInputValidation?(a1, (uint64_t)v2);
  return EnvironmentValues.textInputValidation.setter((uint64_t)v2);
}

uint64_t outlined destroy of TextInputValidation?(uint64_t a1)
{
  type metadata accessor for TextInputValidation?(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1880C4ACC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sSSSbIeggd_SSSbIegnr_TRTA_0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(v2 + 16))(*a1, a1[1]);
  *a2 = result & 1;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed String) -> (@out Bool)(uint64_t a1, uint64_t a2)
{
  void (*v3)(unsigned __int8 *__return_ptr, void *);
  unsigned __int8 v5;
  void v6[2];

  int8x16_t v3 = *(void (**)(unsigned __int8 *__return_ptr, void *))(v2 + 16);
  v6[0] = a1;
  v6[1] = a2;
  v3(&v5, v6);
  return v5;
}

uint64_t sub_1880C4B80()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TextInputValidation?>(uint64_t a1)
{
}

void type metadata accessor for TextInputValidation?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *type metadata accessor for CustomTextInputValidation()
{
  return &unk_1ED446100;
}

uint64_t outlined init with copy of TextInputValidation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextInputValidation?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<TextInputValidationKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputValidationKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextInputValidation?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TextInputValidationKey()
{
  return &type metadata for TextInputValidationKey;
}

void View.hiddenAllowingViewResponders()()
{
}

void View.hiddenAllowingPlatformItemList()()
{
}

uint64_t _ViewInputs.requestedHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

uint64_t _ViewInputs.requestedDynamicHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t _ViewInputs.requestedHiddenRepresentation.setter(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  return PropertyList.subscript.setter();
}

uint64_t View.hidden(_:allowingDisplayList:)(char a1, char a2, uint64_t a3)
{
  uint64_t v3 = qword_1ED466230;
  if ((a2 & 1) == 0) {
    uint64_t v3 = 0;
  }
  v5[0] = a1;
  uint64_t v6 = v3;
  return MEMORY[0x18C113660](v5, a3, &type metadata for DynamicHiddenModifier);
}

void View.hiddenAllowingAccessibility()()
{
}

uint64_t static _HiddenModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 20);
  uint64_t v16 = qword_1ED41CC00;
  uint64_t v8 = v3;
  int v9 = v4;
  uint64_t v10 = v5;
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = *(_OWORD *)(a2 + 5);
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v6;
  return makeHiddenView(allowedKeys:inputs:body:)(&v16, (uint64_t)&v8, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _HiddenModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HiddenModifierAllowingPlatformItemList(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return static HiddenModifierAllowingPlatformItemList._makeView(modifier:inputs:body:)(a1, a2, a3, a4, qword_1ED463D00, &qword_1ED463D00[1]);
}

void protocol witness for ViewModifier.body(content:) in conformance HiddenModifierAllowingPlatformItemList()
{
}

uint64_t static HiddenModifierAllowingPlatformItemList._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void *a5, uint64_t *a6)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 20);
  uint64_t v10 = *a6;
  if ((*a6 & ~*a5) == 0) {
    uint64_t v10 = 0;
  }
  uint64_t v20 = v10 | *a5;
  uint64_t v12 = v6;
  int v13 = v7;
  uint64_t v14 = v8;
  long long v15 = *(_OWORD *)(a2 + 3);
  long long v16 = *(_OWORD *)(a2 + 5);
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v18 = a2[9];
  int v19 = v9;
  return makeHiddenView(allowedKeys:inputs:body:)(&v20, (uint64_t)&v12, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HiddenModifierAllowingAccessibility(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return static HiddenModifierAllowingPlatformItemList._makeView(modifier:inputs:body:)(a1, a2, a3, a4, qword_1ED461468, &qword_1ED461468[1]);
}

void protocol witness for ViewModifier.body(content:) in conformance HiddenModifierAllowingAccessibility()
{
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance HiddenModifierAllowingViewResponders(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(a1, a2, a3, a4, a5, a6, &qword_1ED461E88);
}

void protocol witness for ViewModifier.body(content:) in conformance HiddenModifierAllowingViewResponders()
{
}

uint64_t AllowedPreferenceKeysWhileHidden.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::AllowedPreferenceKeysWhileHidden __swiftcall AllowedPreferenceKeysWhileHidden.init(rawValue:)(SwiftUI::AllowedPreferenceKeysWhileHidden rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static AllowedPreferenceKeysWhileHidden.accessibility.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static AllowedPreferenceKeysWhileHidden.platformItemList.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static AllowedPreferenceKeysWhileHidden.viewResponders.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static AllowedPreferenceKeysWhileHidden.hostPreferences.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static AllowedPreferenceKeysWhileHidden.displayList.getter(void *a1@<X8>)
{
  *a1 = 16;
}

double static DynamicHiddenModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 6);
  int v9 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v11 = *((_DWORD *)a2 + 9);
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  int v15 = *((_DWORD *)a2 + 14);
  int v14 = *((_DWORD *)a2 + 15);
  int v16 = *((_DWORD *)a2 + 16);
  int v17 = *((_DWORD *)a2 + 17);
  int v18 = *((_DWORD *)a2 + 18);
  int v19 = *((_DWORD *)a2 + 19);
  int v20 = *((_DWORD *)a2 + 20);
  uint64_t v37 = *a2;
  int v34 = v8;
  int v35 = v6;
  LODWORD(v38) = v6;
  uint64_t v39 = v7;
  int v40 = v8;
  int v41 = v9;
  int v32 = v10;
  int v33 = v9;
  int v42 = v10;
  int v43 = v11;
  int v30 = v14;
  int v31 = v11;
  uint64_t v44 = v12;
  uint64_t v45 = v13;
  int v46 = v15;
  int v47 = v14;
  int v28 = v17;
  int v29 = v16;
  int v48 = v16;
  int v49 = v17;
  int v26 = v19;
  int v27 = v18;
  int v50 = v18;
  int v51 = v19;
  int v25 = v20;
  int v52 = v20;
  a3(&v53);
  type metadata accessor for _GraphValue<DynamicHiddenModifier>();
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  LODWORD(v37) = v4;
  _GraphValue.value.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t v21 = v37;
  if (v37)
  {
    uint64_t v22 = v38;
    uint64_t v37 = v5;
    LODWORD(v38) = v35;
    uint64_t v39 = v7;
    int v40 = v34;
    int v41 = v33;
    int v42 = v32;
    int v43 = v31;
    uint64_t v44 = v12;
    uint64_t v45 = v13;
    int v46 = v15;
    int v47 = v30;
    int v48 = v29;
    int v49 = v28;
    int v50 = v27;
    int v51 = v26;
    int v52 = v25;
    if ((*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v22 + 8))(&v37, v21, v22))
    {
      uint64_t v37 = v5;
      LODWORD(v38) = v35;
      uint64_t v39 = v7;
      int v40 = v34;
      int v41 = v33;
      int v42 = v32;
      int v43 = v31;
      uint64_t v44 = v12;
      uint64_t v45 = v13;
      int v46 = v15;
      int v47 = v30;
      int v48 = v29;
      int v49 = v28;
      int v50 = v27;
      int v51 = v26;
      int v52 = v25;
      uint64_t v23 = _GraphValue.value.getter();
      swift_beginAccess();
      (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t))(v22 + 16))(&v37, v23, &v53, v21, v22);
      swift_endAccess();
    }
  }
  *(void *)a4 = v53;
  double result = v54;
  a4[1] = v54;
  return result;
}

uint64_t specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(0, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<AccessibilityNodesKey>);
  lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(&lazy protocol witness table cache variable for type DynamicHiddenModifier.DynamicTransform<AccessibilityNodesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<AccessibilityNodesKey>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(0, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<ViewRespondersKey>);
  lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(&lazy protocol witness table cache variable for type DynamicHiddenModifier.DynamicTransform<ViewRespondersKey> and conformance DynamicHiddenModifier.DynamicTransform<A>, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<ViewRespondersKey>);
  return Attribute.init<A>(body:value:flags:update:)();
}

{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(0, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<DisplayList.Key>);
  lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(&lazy protocol witness table cache variable for type DynamicHiddenModifier.DynamicTransform<DisplayList.Key> and conformance DynamicHiddenModifier.DynamicTransform<A>, &lazy cache variable for type metadata for DynamicHiddenModifier.DynamicTransform<DisplayList.Key>);
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t _ViewInputs.requestedDynamicHiddenRepresentation.getter()
{
  return _ViewInputs.requestedDynamicHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t (*DynamicHiddenModifier.DynamicTransform.value.getter(int a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = a1;
  return partial apply for closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
}

uint64_t closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(uint64_t a1, uint64_t a2, ValueMetadata *a3, uint64_t a4)
{
  uint64_t result = AGGraphGetValue();
  if (*(unsigned char *)result == 1)
  {
    uint64_t result = DynamicHiddenModifier.DynamicTransform.includeKey.getter(a2, a3);
    if ((result & 1) == 0)
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
      return (*(uint64_t (**)(ValueMetadata *, uint64_t))(a4 + 16))(a3, a4);
    }
  }
  return result;
}

uint64_t DynamicHiddenModifier.DynamicTransform.includeKey.getter(uint64_t a1, ValueMetadata *a2)
{
  unint64_t v3 = *(void *)(AGGraphGetValue() + 8);
  uint64_t v4 = (v3 >> 3) & 1;
  if (a2 != (ValueMetadata *)MEMORY[0x1E4F40288]) {
    LODWORD(v4) = 0;
  }
  if (a2 == &type metadata for AccessibilityNodesKey) {
    unsigned int v5 = v3 & 1;
  }
  else {
    unsigned int v5 = v4;
  }
  if (a2 == (ValueMetadata *)MEMORY[0x1E4F401D0]) {
    unsigned int v6 = (v3 >> 2) & 1;
  }
  else {
    unsigned int v6 = v5;
  }
  uint64_t v7 = (v3 >> 4) & 1;
  if (a2 == (ValueMetadata *)MEMORY[0x1E4F3F488]) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t (*protocol witness for Rule.value.getter in conformance DynamicHiddenModifier.DynamicTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>))(uint64_t a1)
{
  int v4 = *v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  DynamicHiddenModifier.DynamicTransform.value.getter(v4, v5, v6);
  uint64_t v8 = v7;
  uint64_t result = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)result + 2) = v5;
  *((void *)result + 3) = v6;
  *((void *)result + 4) = partial apply for closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter;
  *((void *)result + 5) = v8;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
  a2[1] = result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance DynamicHiddenModifier()
{
}

uint64_t View.hiddenAllowingHostPreferences(_:allowingDisplayList:)(char a1, char a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = unk_1ED466208;
    if ((unk_1ED466208 & ~qword_1ED466200) == 0) {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 | qword_1ED466200;
  }
  else
  {
    uint64_t v4 = qword_1ED4661D8;
  }
  v6[0] = a1 & 1;
  uint64_t v7 = v4;
  return MEMORY[0x18C113660](v6, a3, &type metadata for DynamicHiddenModifier);
}

uint64_t _ViewInputs.requestedHiddenRepresentation.getter()
{
  return _ViewInputs.requestedDynamicHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

uint64_t _ViewInputs.requestedDynamicHiddenRepresentation.getter(void (*a1)(void))
{
  a1();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2;
}

uint64_t _GraphInputs.requestedHiddenRepresentation.getter()
{
  return _GraphInputs.requestedHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

uint64_t _GraphInputs.requestedHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

void (*_ViewInputs.requestedHiddenRepresentation.modify(void *a1))(_OWORD **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedHiddenRepresentation.modify;
}

void _ViewInputs.requestedHiddenRepresentation.modify(_OWORD **a1)
{
}

{
  _OWORD *v1;
  uint64_t vars8;

  uint64_t v1 = *a1;
  (*a1)[1] = **a1;
  PropertyList.subscript.setter();

  free(v1);
}

void (*_GraphInputs.requestedHiddenRepresentation.modify(void *a1))(_OWORD **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedHiddenRepresentation.modify;
}

double key path getter for _ViewInputs.requestedHiddenRepresentation : _ViewInputs@<D0>(void (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  a1();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t _GraphInputs.requestedDynamicHiddenRepresentation.getter()
{
  return _GraphInputs.requestedHiddenRepresentation.getter((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t _GraphInputs.requestedHiddenRepresentation.getter(void (*a1)(void))
{
  a1();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2;
}

uint64_t _GraphInputs.requestedDynamicHiddenRepresentation.setter(uint64_t a1, uint64_t a2)
{
  return _ViewInputs.requestedHiddenRepresentation.setter(a1, a2, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

void type metadata accessor for _GraphValue<DynamicHiddenModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<DynamicHiddenModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<DynamicHiddenModifier>);
    }
  }
}

uint64_t partial apply for specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)()
{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

{
  return specialized implicit closure #1 in transformPreference #1 <A>(_:) in static DynamicHiddenModifier._makeView(modifier:inputs:body:)();
}

void (*_ViewInputs.requestedDynamicHiddenRepresentation.modify(void *a1))(_OWORD **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDynamicHiddenRepresentation.modify;
}

void _ViewInputs.requestedDynamicHiddenRepresentation.modify(_OWORD **a1)
{
}

double key path getter for _GraphInputs.requestedHiddenRepresentation : _GraphInputs@<D0>(void (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  a1();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

void (*_GraphInputs.requestedDynamicHiddenRepresentation.modify(void *a1))(_OWORD **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedDynamicHiddenRepresentation.modify;
}

_UNKNOWN **base witness table accessor for ViewModifier in _HiddenModifier()
{
  return &protocol witness table for _HiddenModifier;
}

unint64_t lazy protocol witness table accessor for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden()
{
  unint64_t result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden;
  if (!lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowedPreferenceKeysWhileHidden and conformance AllowedPreferenceKeysWhileHidden);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DynamicHiddenModifier()
{
  return &protocol witness table for DynamicHiddenModifier;
}

double sub_1880C6610@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedHiddenRepresentation : _ViewInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey, a1);
}

uint64_t sub_1880C6644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

double sub_1880C6664@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _GraphInputs.requestedHiddenRepresentation : _GraphInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey, a1);
}

uint64_t sub_1880C6698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.HiddenRepresentationKey and conformance _GraphInputs.HiddenRepresentationKey);
}

double sub_1880C66B8@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _ViewInputs.requestedHiddenRepresentation : _ViewInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey, a1);
}

uint64_t sub_1880C66EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t keypath_setTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  return PropertyList.subscript.setter();
}

double sub_1880C675C@<D0>(_OWORD *a1@<X8>)
{
  return key path getter for _GraphInputs.requestedHiddenRepresentation : _GraphInputs((void (*)(void))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey, a1);
}

uint64_t sub_1880C6790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type _GraphInputs.DynamicHiddenRepresentationKey and conformance _GraphInputs.DynamicHiddenRepresentationKey);
}

uint64_t dispatch thunk of static PlatformHiddenRepresentable.makeRepresentation(inputs:allowedKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static PlatformDynamicHiddenRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformDynamicHiddenRepresentable.makeRepresentation(inputs:modifier:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t sub_1880C67EC()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_1880C6800()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_1880C6814()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_1880C6828()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_1880C683C()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

ValueMetadata *type metadata accessor for _GraphInputs.DynamicHiddenRepresentationKey()
{
  return &type metadata for _GraphInputs.DynamicHiddenRepresentationKey;
}

ValueMetadata *type metadata accessor for _GraphInputs.HiddenRepresentationKey()
{
  return &type metadata for _GraphInputs.HiddenRepresentationKey;
}

ValueMetadata *type metadata accessor for HiddenModifierAllowingPlatformItemList()
{
  return &type metadata for HiddenModifierAllowingPlatformItemList;
}

ValueMetadata *type metadata accessor for HiddenModifierAllowingViewResponders()
{
  return &type metadata for HiddenModifierAllowingViewResponders;
}

_UNKNOWN **base witness table accessor for ViewModifier in HiddenModifierAllowingViewResponders()
{
  return &protocol witness table for HiddenModifierAllowingViewResponders;
}

_UNKNOWN **base witness table accessor for ViewModifier in HiddenModifierAllowingPlatformItemList()
{
  return &protocol witness table for HiddenModifierAllowingPlatformItemList;
}

_UNKNOWN **base witness table accessor for ViewModifier in HiddenModifierAllowingAccessibility()
{
  return &protocol witness table for HiddenModifierAllowingAccessibility;
}

uint64_t *protocol witness for Rule.value.getter in conformance HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *a1 = *(void *)AGGraphGetValue();
  uint64_t v4 = v2;
  swift_bridgeObjectRetain();
  return PreferenceKeys.removeHiddenKeys(allowing:)(&v4);
}

void specialized ViewModifier.bodyError()(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 46;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for DynamicHiddenModifier.DynamicTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1880C6C74()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(uint64_t a1)
{
  return closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(a1, *(unsigned int *)(v1 + 32), *(ValueMetadata **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type DynamicHiddenModifier.DynamicTransform<HostPreferencesKey> and conformance DynamicHiddenModifier.DynamicTransform<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for DynamicHiddenModifier.DynamicTransform<HostPreferencesKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for DynamicHiddenModifier.DynamicTransform();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void *type metadata accessor for HostKeys #1 in makeHiddenView(allowedKeys:inputs:body:)()
{
  return &unk_1ED418EA8;
}

uint64_t base witness table accessor for _AttributeBody in DynamicHiddenModifier.DynamicTransform<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1880C6D5C()
{
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for TableViewListHeaderFooterContent()
{
  return &type metadata for TableViewListHeaderFooterContent;
}

double TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(void *)(a5 + 96) = a2;
  *(void *)(a5 + 104) = a3;
  *(unsigned char *)(a5 + 112) = a4 & 1;
  *(double *)(a5 + 120) = a6;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v13);
  Sections.init(from:useFooters:)(v13, a2 != 0, (uint64_t)v14);
  outlined destroy of _VariadicView_Children(a1);
  long long v9 = v14[3];
  *(_OWORD *)(a5 + 32) = v14[2];
  *(_OWORD *)(a5 + 48) = v9;
  long long v10 = v14[5];
  *(_OWORD *)(a5 + 64) = v14[4];
  *(_OWORD *)(a5 + 80) = v10;
  double result = *(double *)v14;
  long long v12 = v14[1];
  *(_OWORD *)a5 = v14[0];
  *(_OWORD *)(a5 + 16) = v12;
  return result;
}

uint64_t TableViewListDataSource.sectionIDs.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v1;
}

BOOL TableViewListDataSource.spacing(forSectionAt:)@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = specialized Set.contains(_:)(a1, *(void *)(v2 + 80));
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result;
  *(unsigned char *)(a2 + 9) = !result;
  return result;
}

uint64_t TableViewListDataSource.configureHeader(_:transaction:forSectionAt:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v3[7] + 16) > a3)
  {
    uint64_t v6 = (void *)result;
    uint64_t v7 = v3[15];
    uint64_t v8 = v3[12];
    TableViewListDataSource.sectionIDs.getter();
    id v9 = v6;
    outlined copy of Transaction?(a2);
    swift_release();
    swift_bridgeObjectRelease();
    id v14 = v9;
    uint64_t v15 = a2;
    uint64_t v16 = v7;
    uint64_t v17 = v8;
    char v18 = 1;
    BOOL v19 = a3 == 0;
    outlined init with copy of _VariadicView_Children((uint64_t)v3, (uint64_t)v12);
    v10[0] = v12[0];
    v10[1] = v12[1];
    _OWORD v10[2] = v12[2];
    uint64_t v11 = v13;
    lazy protocol witness table accessor for type HeaderFooterVisitor and conformance HeaderFooterVisitor();
    _ViewList_Backing.visitViews<A>(applying:from:)();
    outlined destroy of _ViewList_Backing((uint64_t)v10);

    return outlined consume of Transaction?(v15);
  }
  __break(1u);
  return result;
}

Swift::Bool __swiftcall TableViewListDataSource.hasFooter(forSectionAt:)(Swift::Int forSectionAt)
{
  uint64_t v2 = *(void *)(v1 + 72);
  return v2 && specialized Set.contains(_:)(forSectionAt, v2);
}

uint64_t TableViewListDataSource.configureFooter(_:transaction:forSectionAt:)(void *a1, uint64_t a2, Swift::Int a3)
{
  uint64_t v7 = *(void *)(v3 + 120);
  uint64_t v8 = *(void *)(v3 + 96);
  id v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = v7;
  uint64_t v18 = v8;
  __int16 v19 = 0;
  outlined init with copy of _VariadicView_Children(v3, (uint64_t)v13);
  v11[0] = v13[0];
  v11[1] = v13[1];
  void v11[2] = v13[2];
  uint64_t v12 = v14;
  id v9 = a1;
  outlined copy of Transaction?(a2);
  Sections.footerOffset(forSectionAt:)(a3);
  lazy protocol witness table accessor for type HeaderFooterVisitor and conformance HeaderFooterVisitor();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v11);

  return outlined consume of Transaction?(v16);
}

double TableViewListDataSource.rowIDs(forSectionAt:)@<D0>(Swift::Int a1@<X0>, uint64_t a2@<X8>)
{
  Sections.rowIDs(forSectionAt:)(a1, (Swift::Int *)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

uint64_t TableViewListDataSource.configureCell(_:transaction:context:)(char *a1, unint64_t a2, Swift::Int *a3)
{
  uint64_t v4 = v3;
  outlined init with copy of _ViewList_View((uint64_t)(a3 + 2), (uint64_t)v56);
  uint64_t v33 = DWORD1(v57);
  uint64_t v34 = v57;
  long long v44 = v57;
  uint64_t v35 = *((void *)&v57 + 1);
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  v54[0] = v41[0];
  char v55 = 1;
  *(void *)&long long v44 = a3[13];
  uint64_t v6 = v44;
  uint64_t v40 = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  unsigned __int8 v7 = TableViewListDataSource.separatorConfiguration(forRowAt:)(*a3, a3[1]);
  unsigned __int8 v30 = v8;
  unsigned __int8 v31 = v7;
  uint64_t v36 = v9;
  uint64_t v38 = v10;
  long long v44 = 0u;
  long long v45 = 0u;
  char v46 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v40 = v6;
  *(void *)&long long v44 = 1;
  BYTE8(v44) = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  char v11 = *(unsigned char *)(v3 + 112);
  if (v11)
  {
    uint64_t v12 = a1;
    objc_msgSend(a1, sel_swiftui_defaultRowHeight);
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v14 = *(void *)(v4 + 104);
    uint64_t v12 = a1;
  }
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v54, (uint64_t)v52);
  long long v44 = v41[0];
  long long v45 = v41[1];
  char v46 = v42;
  uint64_t v47 = *(void *)&v41[0];
  uint64_t v48 = *(void *)&v41[0];
  char v49 = BYTE8(v41[0]);
  uint64_t v50 = v14;
  char v51 = v11;
  v52[9] = swift_getKeyPath();
  char v53 = 0;
  id v15 = &v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_disclosureIndent];
  *(void *)id v15 = *(void *)&v41[0];
  void v15[8] = 0;
  uint64_t v16 = &v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration];
  uint64_t v17 = v12;
  uint64_t v18 = *(void *)&v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration];
  uint64_t v19 = *(void *)&v12[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_separatorConfiguration + 8];
  *(void *)uint64_t v16 = v31;
  *((void *)v16 + 1) = v36;
  *((void *)v16 + 2) = v30;
  *((void *)v16 + 3) = v38;
  swift_retain();
  swift_retain();
  outlined consume of ListSeparatorConfiguration?(v18, v19);
  Swift::Int v20 = a3[13];
  *(void *)&v41[0] = v20;
  LOBYTE(v39[0]) = 2;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  LOBYTE(v18) = v40;
  uint64_t v21 = &v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration];
  swift_beginAccess();
  uint64_t v22 = *(int *)(type metadata accessor for CellConfiguration() + 28);
  unsigned __int8 v23 = v21[v22];
  v21[v22] = v40;
  specialized CellConfiguration.updateValues<A>(pre:post:)(v23, v18);
  swift_endAccess();
  uint64_t v24 = *(void **)&v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
  if (v24)
  {
    LOWORD(v41[0]) = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    id v25 = v24;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  int v26 = (uint64_t *)&v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID];
  uint64_t *v26 = v34 | (v33 << 32);
  v26[1] = v35;
  swift_bridgeObjectRelease();
  outlined init with copy of _ViewList_View((uint64_t)v56, (uint64_t)v41);
  outlined init with copy of ListTableCellModifier((uint64_t)&v44, (uint64_t)&v43);
  specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)((uint64_t)v41, a2);
  uint64_t v40 = v20;
  LOBYTE(v39[0]) = 0;
  unint64_t v27 = ViewTraitCollection.listItemBackground(kind:)((unsigned __int8 *)v39);
  swift_bridgeObjectRetain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v27, a2);
  swift_bridgeObjectRelease();
  v39[1] = 0;
  v39[2] = v20;
  v39[0] = 0;
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v28 = v40;
  outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>((uint64_t)v41, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, (uint64_t)&type metadata for ListTableCellModifier, MEMORY[0x1E4F3FBA0]);
  outlined destroy of ListTableCellModifier((uint64_t)&v44);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v54);
  uint64_t result = outlined destroy of _ViewList_View((uint64_t)v56);
  if (v28) {
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
  }
  v17[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasItemProviderTrait] = v28 != 0;
  return result;
}

Swift::Int TableViewListDataSource.separatorConfiguration(forRowAt:)(Swift::Int a1, uint64_t a2)
{
  Swift::Int result = Sections.startOffset(forSectionAt:)(a1);
  if (result == a2)
  {
    uint64_t v6 = 1;
    uint64_t v7 = *(void *)(v2 + 72);
    if (!v7) {
      goto LABEL_8;
    }
  }
  else
  {
    if (__OFSUB__(a2, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v2 + 72);
    if (!v7) {
      goto LABEL_8;
    }
  }
  Swift::Int result = specialized Set.contains(_:)(a1, v7);
  if (result)
  {
    uint64_t v8 = 2;
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v8 = 1;
LABEL_9:
  BOOL v9 = __OFADD__(a2, v8);
  uint64_t v10 = a2 + v8;
  if (v9)
  {
    __break(1u);
    goto LABEL_36;
  }
  Swift::Int v11 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v12 = *(void *)(v2 + 56);
  if (v11 < *(void *)(v12 + 16))
  {
    if ((v11 & 0x8000000000000000) == 0)
    {
      uint64_t v13 = *(void *)(v12 + 16 * v11 + 32);
      goto LABEL_15;
    }
LABEL_38:
    __break(1u);
    return result;
  }
  uint64_t v13 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
LABEL_15:
  uint64_t v14 = v6 | 2;
  uint64_t v34 = 0;
  if (v13 != v10) {
    uint64_t v14 = v6;
  }
  unsigned __int8 v35 = 0;
  unint64_t v29 = 0x3FFFFFFFCLL;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  unsigned __int8 v33 = 0;
  long long v36 = xmmword_188354150;
  unint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v37 = 0;
  char v40 = v14 & 1;
  uint64_t v41 = v14;
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)v27);
  v25[0] = v27[0];
  v25[1] = v27[1];
  v25[2] = v27[2];
  uint64_t v26 = v28;
  lazy protocol witness table accessor for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v25);
  unint64_t v15 = v29;
  uint64_t v16 = v30;
  unint64_t v17 = v31;
  unsigned int v24 = v33;
  int v18 = v35;
  long long v19 = v36;
  unint64_t v20 = v38;
  uint64_t v23 = v37;
  if (v29 >> 2 != 0xFFFFFFFF || v31 >= 4)
  {
    if ((v31 & 0x8000000000000000) != 0)
    {
      if (v31 | v32)
      {
        swift_retain();
        unsigned int v24 = v17;
        goto LABEL_26;
      }
    }
    else if ((_BYTE)v29 || v30)
    {
      swift_retain();
      unsigned int v24 = v15;
      goto LABEL_26;
    }
  }
  swift_retain();
LABEL_26:
  if (*((void *)&v19 + 1) >> 2 == 0xFFFFFFFFLL && v20 < 4 || (v20 & 0x8000000000000000) == 0 || v18 || (void)v19)
  {
    swift_retain();
    outlined consume of ListRowSeparatorVisitor.Neighbor?(v15, v16, v17);
    swift_release();
    uint64_t v22 = v23;
  }
  else
  {
    swift_retain();
    unint64_t v21 = v17;
    uint64_t v22 = v23;
    outlined consume of ListRowSeparatorVisitor.Neighbor?(v15, v16, v21);
  }
  swift_release();
  outlined consume of ListRowSeparatorVisitor.Neighbor?(*((unint64_t *)&v19 + 1), v22, v20);
  return v24;
}

Swift::Int TableViewListDataSource.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return Sections.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t TableViewListDataSource.firstIndexPath(viewListID:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1[1];
  uint64_t v12 = 0;
  memset(&v11[1], 0, 32);
  *(void *)&v11[0] = *a1;
  *((void *)&v11[0] + 1) = v5;
  outlined init with copy of _VariadicView_Children(v3, (uint64_t)v9);
  v7[0] = v9[0];
  v7[1] = v9[1];
  _OWORD v7[2] = v9[2];
  uint64_t v8 = v10;
  lazy protocol witness table accessor for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor();
  swift_retain();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v7);
  v9[0] = v11[0];
  Sections.firstIndexPath(of:)(v9, a2);
  return outlined destroy of ExplicitIDFromViewListIDVisitor((uint64_t)v11);
}

uint64_t TableViewListDataSource.firstCollectionViewIndex(of:)(unsigned int *a1)
{
  unsigned int v3 = *a1;
  unsigned int v2 = a1[1];
  uint64_t v4 = *((void *)a1 + 1);
  outlined init with copy of _VariadicView_Children(v1, (uint64_t)v18);
  outlined init with copy of TableColumnList((uint64_t)v18, (uint64_t)&v10);
  outlined destroy of _VariadicView_Children((uint64_t)v18);
  uint64_t v5 = *((void *)&v11 + 1);
  uint64_t v6 = v12;
  __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v5, v6))
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    *(void *)&v18[0] = __PAIR64__(v2, v3);
    *((void *)&v18[0] + 1) = v4;
    swift_retain();
    uint64_t v7 = 0;
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      while (1)
      {
        dispatch thunk of _ViewList_ID_Views.subscript.getter();
        _ViewList_ID.canonicalID.getter();
        swift_bridgeObjectRelease();
        long long v10 = v14;
        char v8 = MEMORY[0x18C10D6E0](&v10, v18);
        swift_release();
        if (v8) {
          break;
        }
        uint64_t result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
        if (v7 >= result)
        {
          __break(1u);
          return result;
        }
        if (++v7 == dispatch thunk of _ViewList_ID_Views.endIndex.getter())
        {
          uint64_t v7 = 0;
          break;
        }
      }
    }
    swift_release_n();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    *(void *)&long long v14 = 0;
    *((void *)&v14 + 1) = __PAIR64__(v2, v3);
    uint64_t v15 = v4;
    uint64_t v16 = 0;
    char v17 = 1;
    outlined init with copy of _VariadicView_Children(v1, (uint64_t)v18);
    long long v10 = v18[0];
    long long v11 = v18[1];
    long long v12 = v18[2];
    uint64_t v13 = v19;
    lazy protocol witness table accessor for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor();
    swift_retain();
    _ViewList_Backing.visitViews<A>(applying:from:)();
    outlined destroy of _ViewList_Backing((uint64_t)&v10);
    uint64_t v7 = v16;
    swift_release();
  }
  return v7;
}

uint64_t TableViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  BOOL v7 = closure #1 in TableViewListDataSource.applyCollectionViewIDs(from:to:)((uint64_t)_s7SwiftUI12_ViewList_IDV9CanonicalVSbIgnl_AESbIegnl_TRTA_0, v6, v3);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v7;
  }
  __break(1u);
  return result;
}

BOOL closure #1 in TableViewListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  char v11 = 0;
  outlined init with copy of _VariadicView_Children(a3, (uint64_t)v7);
  v5[0] = v7[0];
  v5[1] = v7[1];
  _OWORD v5[2] = v7[2];
  uint64_t v6 = v8;
  lazy protocol witness table accessor for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor();
  swift_retain();
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v5);
  char v3 = v11;
  swift_release();
  return (v3 & 1) == 0;
}

uint64_t TableViewListDataSource.contextForItem(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for ListContentVisitor();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v16 - v12;
  *(void *)&v18[0] = a1;
  *(void *)&v16[0] = a2;
  ListContentVisitor.init(index:)((uint64_t)v18, (uint64_t)v16, a3, WitnessTable, (uint64_t)v16 - v12);
  outlined init with copy of _VariadicView_Children(v5, (uint64_t)v18);
  v16[0] = v18[0];
  v16[1] = v18[1];
  _OWORD v16[2] = v18[2];
  uint64_t v17 = v19;
  swift_getWitnessTable();
  uint64_t v20 = a2;
  _ViewList_Backing.visitViews<A>(applying:from:)();
  outlined destroy of _ViewList_Backing((uint64_t)v16);
  type metadata accessor for _RowVisitationContext();
  uint64_t v14 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a4, v13, v14);
}

uint64_t protocol witness for ListCoreDataSource.configureHeader(_:transaction:forSectionAt:) in conformance TableViewListDataSource<A>(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return TableViewListDataSource.configureHeader(_:transaction:forSectionAt:)(a1, a2, *a3);
}

uint64_t protocol witness for ListCoreDataSource.configureFooter(_:transaction:forSectionAt:) in conformance TableViewListDataSource<A>(void *a1, uint64_t a2, Swift::Int *a3)
{
  return TableViewListDataSource.configureFooter(_:transaction:forSectionAt:)(a1, a2, *a3);
}

BOOL protocol witness for ListCoreDataSource.spacing(forSectionAt:) in conformance TableViewListDataSource<A>@<W0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return TableViewListDataSource.spacing(forSectionAt:)(*a1, a2);
}

Swift::Int protocol witness for ListCoreDataSource.firstIndexPath<A>(for:) in conformance TableViewListDataSource<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return TableViewListDataSource.firstIndexPath<A>(for:)(a1, a2, a3, a4);
}

uint64_t protocol witness for ListCoreDataSource.firstCollectionViewIndex(of:) in conformance TableViewListDataSource<A>(unsigned int *a1)
{
  return TableViewListDataSource.firstCollectionViewIndex(of:)(a1);
}

uint64_t protocol witness for ListCoreDataSource.contextForItem(index:) in conformance TableViewListDataSource<A>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return TableViewListDataSource.contextForItem(index:)(*a1, *a2, a3, a4);
}

Swift::Int protocol witness for ListCoreDataSource.separatorConfiguration(forRowAt:) in conformance TableViewListDataSource<A>(Swift::Int *a1, uint64_t *a2)
{
  return TableViewListDataSource.separatorConfiguration(forRowAt:)(*a1, *a2);
}

uint64_t protocol witness for ListDiffable.sectionIDs.getter in conformance TableViewListDataSource<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TableViewListDataSource.sectionIDs.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

BOOL protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance TableViewListDataSource<A>(Swift::Int *a1)
{
  return TableViewListDataSource.hasHeader(forSectionAt:)(*a1);
}

BOOL protocol witness for ListDiffable.hasFooter(forSectionAt:) in conformance TableViewListDataSource<A>(Swift::Int *a1)
{
  return TableViewListDataSource.hasFooter(forSectionAt:)(*a1);
}

double protocol witness for ListDiffable.rowIDs(forSectionAt:) in conformance TableViewListDataSource<A>@<D0>(Swift::Int *a1@<X0>, uint64_t a2@<X8>)
{
  TableViewListDataSource.rowIDs(forSectionAt:)(*a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(void *)(a2 + 32) = v6;
  return result;
}

uint64_t HeaderFooterVisitor.HeaderContent.prominence.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  BOOL v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *(unsigned __int8 *)(v8 + 105);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  if (v9 == 2)
  {
    uint64_t v10 = *((void *)v7 + 12);
    char v11 = v7[104];
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11, a2);
    outlined consume of Environment<Bool>.Content(v10, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a1);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a1);
    *a2 = v9 & 1;
  }
  return result;
}

BOOL HeaderFooterVisitor.HeaderContent.isHeader.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  double v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  long long v6 = v1[4];
  void v18[2] = v1[3];
  v19[0] = v6;
  *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)((char *)v1 + 73);
  long long v7 = v1[2];
  v18[0] = v1[1];
  v18[1] = v7;
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v18, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v16);
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v18, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  char v8 = v16[0];
  swift_release();
  swift_release();
  (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v3 + 16))(v5, v1, a1);
  if (v8)
  {
    (*(void (**)(_OWORD *, uint64_t))(v3 + 8))(v5, a1);
    return 0;
  }
  else
  {
    long long v10 = v5[4];
    _OWORD v16[2] = v5[3];
    v17[0] = v10;
    *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)((char *)v5 + 73);
    long long v11 = v5[2];
    v16[0] = v5[1];
    v16[1] = v11;
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)v14);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v16, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    (*(void (**)(_OWORD *, uint64_t))(v3 + 8))(v5, a1);
    uint64_t v12 = v15;
    swift_release();
    swift_release();
    return v12 != 0;
  }
}

double HeaderFooterVisitor.HeaderContent.legacyInsets.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x1F4188790](a1);
  double v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = *(double *)(v6 + 120);
  int v8 = *(unsigned __int8 *)(v6 + 152);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  if (v8 == 1)
  {
    double v7 = *((double *)v5 + 14);
    uint64_t v9 = *(void *)v5;
    char v10 = v5[8];
    outlined copy of Environment<Bool>.Content(*(void *)v5, v10);
    specialized Environment.wrappedValue.getter(v9, v10);
    specialized Environment.wrappedValue.getter(v9, v10);
    outlined consume of Environment<Bool>.Content(v9, v10);
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v7;
}

uint64_t HeaderFooterVisitor.HeaderContent.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v4 = *(void *)(a1 - 8);
  *(void *)&long long v60 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v59 = *(void *)(v8 - 8);
  uint64_t v9 = v59;
  MEMORY[0x1F4188790](v7);
  long long v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyTransformModifier<Font?>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E4F413C0], MEMORY[0x1E4F41280]);
  uint64_t v62 = type metadata accessor for ModifiedContent();
  uint64_t v66 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  int v79 = (char *)&v58 - v12;
  type metadata accessor for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>();
  uint64_t v63 = v13;
  uint64_t v65 = type metadata accessor for ModifiedContent();
  uint64_t v71 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v61 = (char *)&v58 - v14;
  type metadata accessor for [Sections.Item](255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HeaderFooterConfiguration>, (uint64_t)&type metadata for HeaderFooterConfiguration, MEMORY[0x1E4F411E8]);
  uint64_t v68 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  uint64_t v64 = (char *)&v58 - v15;
  uint64_t v70 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  double v67 = (char *)&v58 - v16;
  uint64_t v74 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v69 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v72 = (char *)&v58 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v2 + *(int *)(a1 + 64), v8, v19);
  swift_getKeyPath();
  uint64_t v21 = v4;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v23 = v6;
  v22(v6, v2, a1);
  unint64_t v24 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = a1;
  uint64_t v78 = a1;
  uint64_t v27 = *(void *)(a1 + 24);
  *(void *)(v25 + 16) = v8;
  *(void *)(v25 + 24) = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v25 + v24, v23, v26);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v11, v8);
  long long v60 = *(_OWORD *)(v2 + 120);
  uint64_t v28 = *(void *)(v2 + 136);
  uint64_t v29 = *(void *)(v2 + 144);
  LOBYTE(v24) = *(unsigned char *)(v2 + 152);
  LOBYTE(v8) = *(unsigned char *)(v2 + 168);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v31 = swift_getKeyPath();
  uint64_t v32 = swift_getKeyPath();
  *(void *)&v105[0] = KeyPath;
  *(_OWORD *)((char *)v105 + 8) = 0u;
  *(_OWORD *)((char *)&v105[1] + 8) = 0u;
  *(_OWORD *)((char *)&v105[2] + 8) = 0u;
  *(_OWORD *)((char *)&v105[3] + 8) = 0u;
  BYTE8(v105[4]) = 0;
  *(void *)&long long v106 = v31;
  BYTE8(v106) = 0;
  *(void *)&long long v107 = v32;
  BYTE8(v107) = 0;
  long long v108 = v60;
  *(void *)&long long v109 = v28;
  *((void *)&v109 + 1) = v29;
  LOBYTE(v110[0]) = v24;
  BYTE1(v110[0]) = v8;
  *(_OWORD *)((char *)v110 + 8) = xmmword_1883C5D20;
  uint64_t v33 = v78;
  uint64_t v58 = v2;
  double v34 = HeaderFooterVisitor.HeaderContent.legacyInsets.getter(v78);
  v99[6] = v109;
  v99[7] = v110[0];
  uint64_t v100 = *(void *)&v110[1];
  v99[2] = v105[4];
  v99[3] = v106;
  v99[4] = v107;
  v99[5] = v108;
  long long v97 = v105[0];
  long long v98 = v105[1];
  v99[0] = v105[2];
  v99[1] = v105[3];
  double v101 = v34;
  uint64_t v102 = v35;
  uint64_t v103 = v36;
  uint64_t v104 = v37;
  unint64_t v38 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v95 = v27;
  unint64_t v96 = v38;
  uint64_t v39 = v62;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v61;
  char v42 = v79;
  MEMORY[0x18C113660](&v97, v39, v63, WitnessTable);
  outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)v105, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v42, v39);
  swift_getKeyPath();
  HeaderFooterVisitor.HeaderContent.resolvedConfiguration.getter(v33, (uint64_t)&v97);
  __int16 v88 = v97;
  uint64_t v89 = *((void *)&v97 + 1);
  __int16 v90 = v98;
  uint64_t v91 = *((void *)&v98 + 1);
  uint64_t v92 = *(void *)&v99[0];
  long long v93 = *(_OWORD *)((char *)v99 + 8);
  long long v94 = *(_OWORD *)((char *)&v99[1] + 8);
  unint64_t v43 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v86 = WitnessTable;
  unint64_t v87 = v43;
  uint64_t v44 = v65;
  uint64_t v45 = swift_getWitnessTable();
  char v46 = v64;
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v41, v44);
  outlined init with copy of AccessibilityScrollableContext(v58 + *(int *)(v78 + 68), (uint64_t)&v97);
  unint64_t v47 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v84 = v45;
  unint64_t v85 = v47;
  uint64_t v48 = v68;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = v67;
  MEMORY[0x18C113660](&v97, v48, &type metadata for AccessibilityScrollableContextModifier, v49);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)&v97);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v46, v48);
  static Alignment.top.getter();
  uint64_t v82 = v49;
  int v83 = &protocol witness table for AccessibilityScrollableContextModifier;
  uint64_t v56 = v70;
  uint64_t v57 = swift_getWitnessTable();
  char v51 = v69;
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v50, v56);
  uint64_t v80 = v57;
  uint64_t v81 = MEMORY[0x1E4F3FE50];
  uint64_t v52 = v74;
  swift_getWitnessTable();
  char v53 = v72;
  static ViewBuilder.buildExpression<A>(_:)(v51);
  double v54 = *(void (**)(char *, uint64_t))(v76 + 8);
  v54(v51, v52);
  static ViewBuilder.buildExpression<A>(_:)(v53);
  return ((uint64_t (*)(char *, uint64_t))v54)(v53, v52);
}

uint64_t closure #1 in HeaderFooterVisitor.HeaderContent.body.getter(unsigned char *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HeaderFooterVisitor.HeaderContent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v12 - v6;
  BOOL v9 = HeaderFooterVisitor.HeaderContent.isHeader.getter(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  if (!v9) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  HeaderFooterVisitor.HeaderContent.prominence.getter(v4, &v13);
  char v10 = v13;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v10 & 1) == 0)
  {
    uint64_t result = static SemanticFeature.isEnabled.getter();
    if (result) {
      *a1 = 0;
    }
  }
  return result;
}

double key path getter for EnvironmentValues.headerFooterConfiguration : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, (uint64_t)&type metadata for HeaderFooterConfigurationKey, (uint64_t)&protocol witness table for HeaderFooterConfigurationKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>, (uint64_t)&type metadata for HeaderFooterConfigurationKey, (uint64_t)&protocol witness table for HeaderFooterConfigurationKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)a2 = v4;
  *(unsigned char *)(a2 + 1) = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 17) = v8;
  *(_OWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 40) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 56) = v11;
  return result;
}

double HeaderFooterVisitor.HeaderContent.resolvedConfiguration.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v5 = v2[4];
  _OWORD v19[2] = v2[3];
  v20[0] = v5;
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v2 + 73);
  long long v6 = v2[2];
  v19[0] = v2[1];
  v19[1] = v6;
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v13);
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v19, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  HeaderFooterVisitor.HeaderContent.prominence.getter(a1, &v12);
  char v7 = v12;
  char v8 = v13[1];
  uint64_t v9 = v14;
  char v10 = v15;
  *(unsigned char *)a2 = v13[0];
  *(unsigned char *)(a2 + 1) = v8;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 17) = v10;
  *(_OWORD *)(a2 + 24) = v16;
  *(_OWORD *)(a2 + 40) = v17;
  double result = *(double *)&v18;
  *(_OWORD *)(a2 + 56) = v18;
  return result;
}

uint64_t HeaderFooterVisitor.DefaultForegroundColorModifier.body(content:)@<X0>(void *a1@<X8>)
{
  id v3 = objc_msgSend(self, sel__defaultTextColorForTableViewStyle_isSectionHeader_, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
  Color.Resolved.init(platformColor:)();
  if ((v4 & 1) == 0) {
    Color.init(_:)();
  }

  type metadata accessor for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>();
  View.defaultForegroundColor(_:)();
  uint64_t result = swift_release();
  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance HeaderFooterVisitor.LegacyModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = static Edge.Set.all.getter();
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = result;
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v4;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[9];
  long long v101 = v1[8];
  long long v102 = v3;
  uint64_t v103 = *((void *)v1 + 20);
  long long v4 = v1[5];
  *(_OWORD *)&v97[16] = v1[4];
  long long v98 = v4;
  long long v5 = v1[7];
  long long v99 = v1[6];
  long long v100 = v5;
  long long v6 = v1[1];
  long long v94 = *v1;
  long long v95 = v6;
  long long v7 = v1[3];
  long long v96 = v1[2];
  *(_OWORD *)long long v97 = v7;
  uint64_t v8 = static VerticalAlignment.firstTextBaseline.getter();
  __n128 v108 = (__n128)(unint64_t)v8;
  char v109 = 0;
  uint64_t v110 = 0;
  char v111 = 0;
  uint64_t v9 = static HorizontalAlignment.center.getter();
  closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)((uint64_t)&v94, &v108, (uint64_t)&v82);
  long long v120 = v86;
  long long v121 = v87;
  *(_OWORD *)uint64_t v122 = *(_OWORD *)v88;
  *(_OWORD *)&v122[10] = *(_OWORD *)&v88[10];
  long long v116 = v82;
  long long v117 = v83;
  long long v118 = v84;
  long long v119 = v85;
  *(_OWORD *)&v123[71] = v86;
  *(_OWORD *)&v123[87] = v87;
  *(_OWORD *)&v123[103] = *(_OWORD *)v122;
  *(_OWORD *)&v123[119] = *(_OWORD *)&v122[16];
  *(_OWORD *)&v123[7] = v82;
  *(_OWORD *)&v123[23] = v83;
  *(_OWORD *)&v123[39] = v84;
  *(_OWORD *)&v123[55] = v85;
  long long v74 = *(_OWORD *)&v123[80];
  long long v75 = *(_OWORD *)&v123[96];
  *(_OWORD *)uint64_t v76 = *(_OWORD *)&v123[112];
  long long v70 = *(_OWORD *)&v123[16];
  long long v71 = *(_OWORD *)&v123[32];
  long long v72 = *(_OWORD *)&v123[48];
  long long v73 = *(_OWORD *)&v123[64];
  long long v69 = *(_OWORD *)v123;
  _OWORD v112[2] = v96;
  v113[0] = *(_OWORD *)v97;
  *(_OWORD *)((char *)v113 + 9) = *(_OWORD *)&v97[9];
  v112[1] = v95;
  v112[0] = v94;
  *(_OWORD *)((char *)v107 + 9) = *(_OWORD *)&v97[9];
  char v115 = 0;
  char v114 = 0;
  char v124 = 1;
  uint64_t v66 = v9;
  uint64_t v67 = 0;
  char v68 = 1;
  *(void *)&v76[15] = *(void *)&v122[24];
  uint64_t v77 = v8;
  uint64_t v78 = 0;
  char v79 = 0;
  uint64_t v80 = 0;
  char v81 = 0;
  v107[0] = *(_OWORD *)v97;
  long long v106 = v96;
  long long v104 = v94;
  long long v105 = v95;
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v112, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v62);
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v112, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  if (v62[0] != 1 && v64 && (v63 == 2 || v65))
  {
    static Color.primary.getter();
    swift_release();
  }
  swift_release();
  type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>();
  lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>);
  View.defaultForegroundColor(_:)();
  swift_release();
  long long v59 = v91;
  long long v60 = v92;
  long long v61 = v93;
  long long v55 = *(_OWORD *)v88;
  long long v56 = *(_OWORD *)&v88[16];
  long long v57 = v89;
  long long v58 = v90;
  long long v51 = v84;
  long long v52 = v85;
  long long v53 = v86;
  long long v54 = v87;
  long long v49 = v82;
  long long v50 = v83;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = KeyPath;
  if (v102)
  {
    uint64_t v47 = KeyPath;
    uint64_t v12 = v98;
    char v13 = BYTE8(v98);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v112, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v94, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)&v48);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v112, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    outlined copy of Environment<Bool>.Content(v12, v13);
    specialized Environment.wrappedValue.getter(v12, v13);
    outlined consume of Environment<Bool>.Content(v12, v13);
    HeaderFooterConfiguration.defaultEdgeInsets(for:)();
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    swift_release();
    swift_release();
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v94, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v112, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v94, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)&v48);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v112, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    outlined copy of Environment<Bool>.Content(v12, v13);
    specialized Environment.wrappedValue.getter(v12, v13);
    uint64_t v22 = v12;
    uint64_t v11 = v47;
    outlined consume of Environment<Bool>.Content(v22, v13);
    HeaderFooterConfiguration.defaultEdgeInsets(for:)();
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    swift_release();
    swift_release();
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v94, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  }
  else
  {
    uint64_t v30 = *((void *)&v101 + 1);
    uint64_t v28 = v101;
    uint64_t v26 = *((void *)&v100 + 1);
    uint64_t v17 = *((void *)&v100 + 1);
    uint64_t v24 = v100;
    uint64_t v15 = v100;
    uint64_t v21 = *((void *)&v101 + 1);
    uint64_t v19 = v101;
  }
  char v31 = static Edge.Set.all.getter();
  char v48 = 0;
  uint64_t v32 = swift_getKeyPath();
  uint64_t v33 = swift_allocObject();
  long long v34 = v102;
  *(_OWORD *)(v33 + 144) = v101;
  *(_OWORD *)(v33 + 160) = v34;
  *(void *)(v33 + 176) = v103;
  long long v35 = v98;
  *(_OWORD *)(v33 + 80) = *(_OWORD *)&v97[16];
  *(_OWORD *)(v33 + 96) = v35;
  long long v36 = v100;
  *(_OWORD *)(v33 + 112) = v99;
  *(_OWORD *)(v33 + 128) = v36;
  long long v37 = v95;
  *(_OWORD *)(v33 + 16) = v94;
  *(_OWORD *)(v33 + 32) = v37;
  long long v38 = *(_OWORD *)v97;
  *(_OWORD *)(v33 + 48) = v96;
  *(_OWORD *)(v33 + 64) = v38;
  char v39 = v48;
  long long v40 = v60;
  *(_OWORD *)(a1 + 160) = v59;
  *(_OWORD *)(a1 + 176) = v40;
  *(_OWORD *)(a1 + 192) = v61;
  long long v41 = v56;
  *(_OWORD *)(a1 + 96) = v55;
  *(_OWORD *)(a1 + 112) = v41;
  long long v42 = v58;
  *(_OWORD *)(a1 + 128) = v57;
  *(_OWORD *)(a1 + 144) = v42;
  long long v43 = v52;
  *(_OWORD *)(a1 + 32) = v51;
  *(_OWORD *)(a1 + 48) = v43;
  long long v44 = v54;
  *(_OWORD *)(a1 + 64) = v53;
  *(_OWORD *)(a1 + 80) = v44;
  long long v45 = v50;
  *(_OWORD *)a1 = v49;
  *(_OWORD *)(a1 + 16) = v45;
  *(void *)(a1 + 208) = v11;
  *(void *)(a1 + 216) = v15;
  *(void *)(a1 + 224) = v17;
  *(void *)(a1 + 232) = v19;
  *(void *)(a1 + 240) = v21;
  *(unsigned char *)(a1 + 248) = v31;
  *(void *)(a1 + 256) = v24;
  *(void *)(a1 + 264) = v26;
  *(void *)(a1 + 272) = v28;
  *(void *)(a1 + 280) = v30;
  *(unsigned char *)(a1 + 288) = v39;
  *(void *)(a1 + 296) = v32;
  *(void *)(a1 + 304) = partial apply for closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:);
  *(void *)(a1 + 312) = v33;
  return outlined release of HeaderFooterVisitor.IOSMultiColumnModifier((uint64_t)&v94, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
}

double closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)@<D0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = a2->n128_u64[0];
  unint64_t v5 = a2->n128_u64[1];
  unint64_t v7 = a2[1].n128_u64[1];
  uint64_t v8 = a2[1].n128_u8[0] & 1;
  uint64_t v9 = a2[2].n128_u8[0] & 1;
  uint64_t v10 = MEMORY[0x1E4F3F360];
  uint64_t v11 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with take of Transaction?(a1 + 112, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?, MEMORY[0x1E4F3F360], MEMORY[0x1E4FBB718]);
  outlined init with take of Transaction?((uint64_t)v48, (uint64_t)v49, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?, v10, v11);
  if (v49[32])
  {
    int v12 = v9;
    long long v13 = *(_OWORD *)(a1 + 48);
    void v46[2] = *(_OWORD *)(a1 + 32);
    v47[0] = v13;
    *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)(a1 + 57);
    long long v14 = *(_OWORD *)(a1 + 16);
    v46[0] = *(_OWORD *)a1;
    v46[1] = v14;
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v46, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)&v50);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v46, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    unsigned __int8 v15 = v50.n128_u8[0];
    swift_release();
    swift_release();
    uint64_t v16 = a3;
    if (v15)
    {
      uint64_t v17 = *(void *)(a1 + 160);
      static Alignment.center.getter();
      _FrameLayout.init(width:height:alignment:)();
      uint64_t v18 = *(void *)(a1 + 96);
      char v19 = *(unsigned char *)(a1 + 104);
      outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
      outlined copy of Environment<Bool>.Content(v18, v19);
      double v20 = specialized Environment.wrappedValue.getter(v18, v19);
      outlined consume of Environment<Bool>.Content(v18, v19);
      outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
      uint64_t v28 = v17;
      LOBYTE(v29) = 0;
      *((void *)&v29 + 1) = v40;
      LOBYTE(v30) = v41;
      uint64_t v31 = v42;
      LOBYTE(v32) = v43;
      *((void *)&v32 + 1) = v44;
      *(void *)&long long v33 = v45;
      *((void *)&v33 + 1) = v6;
      *(void *)&long long v34 = v5;
      BYTE8(v34) = v8 != 0;
      unint64_t v35 = v7;
      BOOL v36 = v12 != 0;
      uint64_t v37 = 0x3FF0000000000000;
      double v38 = 18.0 - v20;
      char v39 = 0;
      _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi0_((uint64_t)&v28);
    }
    else
    {
      uint64_t v21 = static HorizontalAlignment.center.getter();
      closure #1 in closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(a1, a2, &v50);
      uint64_t v22 = *(void *)(a1 + 152);
      uint64_t v28 = v21;
      long long v29 = xmmword_18834BB90;
      unint64_t v30 = v50.n128_u64[0];
      uint64_t v31 = v50.n128_u8[8];
      long long v32 = v51;
      *(void *)&long long v33 = v52;
      *((void *)&v33 + 1) = *((void *)&v52 + 1);
      *(void *)&long long v34 = v53;
      *((void *)&v34 + 1) = v22;
      LOWORD(v35) = 256;
      _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi_((uint64_t)&v28);
    }
    outlined init with take of _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage((uint64_t)&v28, (uint64_t)&v50);
  }
  else
  {
    uint64_t v28 = v6;
    *(void *)&long long v29 = v5;
    *((void *)&v29 + 1) = v8;
    unint64_t v30 = v7;
    uint64_t v31 = v9;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    LOWORD(v35) = 0;
    _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi_((uint64_t)&v28);
    outlined init with take of _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage((uint64_t)&v28, (uint64_t)&v50);
    uint64_t v16 = a3;
  }
  long long v23 = v55;
  *(_OWORD *)(v16 + 64) = v54;
  *(_OWORD *)(v16 + 80) = v23;
  *(_OWORD *)(v16 + 96) = v56[0];
  *(_OWORD *)(v16 + 106) = *(_OWORD *)((char *)v56 + 10);
  long long v24 = v51;
  *(__n128 *)uint64_t v16 = v50;
  *(_OWORD *)(v16 + 16) = v24;
  double result = *(double *)&v52;
  long long v26 = v53;
  *(_OWORD *)(v16 + 32) = v52;
  *(_OWORD *)(v16 + 48) = v26;
  return result;
}

__n128 closure #1 in closure #1 in closure #2 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, __n128 *a3@<X8>)
{
  if (*(unsigned char *)(a1 + 145))
  {
    uint64_t v10 = *(void *)(a1 + 96);
    char v11 = *(unsigned char *)(a1 + 104);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    outlined copy of Environment<Bool>.Content(v10, v11);
    double v12 = specialized Environment.wrappedValue.getter(v10, v11);
    outlined consume of Environment<Bool>.Content(v10, v11);
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    double v9 = v12 + 45.0;
  }
  else
  {
    long long v6 = *(_OWORD *)(a1 + 48);
    void v18[2] = *(_OWORD *)(a1 + 32);
    v19[0] = v6;
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(a1 + 57);
    long long v7 = *(_OWORD *)(a1 + 16);
    v18[0] = *(_OWORD *)a1;
    v18[1] = v7;
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v18, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    specialized Environment.wrappedValue.getter((uint64_t)v17);
    _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v18, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    int v8 = v17[0];
    swift_release();
    swift_release();
    outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(a1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    double v9 = 28.0;
    if (v8) {
      double v9 = 20.0;
    }
  }
  unsigned __int8 v13 = a2[1].n128_u8[0];
  unint64_t v14 = a2[1].n128_u64[1];
  unsigned __int8 v15 = a2[2].n128_u8[0];
  a3->n128_f64[0] = v9;
  a3->n128_u8[8] = 0;
  __n128 result = *a2;
  a3[1] = *a2;
  a3[2].n128_u8[0] = v13 & 1;
  a3[2].n128_u64[1] = v14;
  a3[3].n128_u8[0] = v15 & 1;
  return result;
}

uint64_t closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(uint64_t *a1, _OWORD *a2)
{
  long long v3 = a2[3];
  long long v8[2] = a2[2];
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)a2 + 57);
  long long v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  outlined init with take of Transaction?((uint64_t)v8, (uint64_t)v10, &lazy cache variable for type metadata for Environment<HeaderFooterConfiguration>.Content, (uint64_t)&type metadata for HeaderFooterConfiguration, MEMORY[0x1E4F3F4D8]);
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v10, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)&v7);
  _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0((uint64_t)v8, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
  uint64_t v5 = HeaderFooterConfiguration.font.getter();
  swift_release();
  uint64_t result = swift_release();
  if (v5)
  {
    uint64_t result = swift_release();
    *a1 = v5;
  }
  return result;
}

uint64_t HeaderFooterVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *v2;
  uint64_t v7 = *(unsigned int *)(a1 + 48);
  uint64_t v8 = *(unsigned int *)(a1 + 52);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  specialized HeaderFooterVisitor.configure<A>(view:traits:id:)(a1, v4, v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  double v9 = (uint64_t *)(v6 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
  *double v9 = v7 | (v8 << 32);
  v9[1] = v5;
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized HeaderFooterVisitor.configure<A>(view:traits:id:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v53[0] = static VerticalAlignment.center.getter();
  v53[1] = 0;
  char v54 = 1;
  specialized closure #1 in HeaderFooterVisitor.configure<A>(view:traits:id:)(a2, v5, a1, a3, a4, (uint64_t)&v55);
  outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>((uint64_t)v53, (uint64_t)v52);
  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(0, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>();
  uint64_t v10 = AnyView.init<A>(_:)();
  unint64_t v11 = *(char **)v5;
  uint64_t v12 = OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host;
  unsigned __int8 v13 = *(void **)(*(void *)v5 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
  if (v13)
  {
    unint64_t v14 = v13;
    id v15 = objc_msgSend(v11, sel_contentView);
    objc_msgSend(v15, sel_bounds);
    double v17 = v16;
    double v19 = v18;
    double v21 = v20;
    double v23 = v22;

    objc_msgSend(v14, sel_setFrame_, v17, v19, v21, v23);
    uint64_t v24 = MEMORY[0x1E4F3F560];
    uint64_t v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined init with take of Transaction?(v5 + 8, (uint64_t)&v56, (unint64_t *)&lazy cache variable for type metadata for Transaction?, MEMORY[0x1E4F3F560], MEMORY[0x1E4FBB718]);
    outlined init with take of Transaction?((uint64_t)&v56, (uint64_t)&v57, (unint64_t *)&lazy cache variable for type metadata for Transaction?, v24, v25);
    long long v26 = (void *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x60));
    if (v57 == 1)
    {
      swift_beginAccess();
      uint64_t *v26 = v10;
      swift_retain_n();
      swift_release();
      LOWORD(v51) = 1;
      type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

      swift_release();
      if (!a2) {
        goto LABEL_8;
      }
    }
    else
    {
      swift_beginAccess();
      uint64_t *v26 = v10;
      swift_retain();
      outlined retain of Transaction?(&v56);
      swift_release();
      swift_allocObject();
      swift_unknownObjectWeakInit();
      swift_retain();
      swift_retain();
      default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
      GraphHost.asyncTransaction(_:id:_:)();

      swift_release();
      swift_release_n();
      outlined release of Transaction?(&v56);
      if (!a2)
      {
LABEL_8:
        ViewTraitCollection.init()();
        goto LABEL_14;
      }
    }
  }
  else
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(0, &lazy cache variable for type metadata for CellHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for CellHostingView);
    id v28 = objc_allocWithZone(v27);
    long long v29 = (void *)specialized _UIHostingView.init(rootView:)(v10);
    unint64_t v30 = (void *)MEMORY[0x1E4FBC8C8];
    *(unsigned char *)(*(void *)((char *)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x68)) + 220) = 1;
    uint64_t v31 = v29;
    UIHostingViewBase.updateRemovedState(uiView:)(0);

    long long v32 = *(void **)&v11[v12];
    *(void *)&v11[v12] = v29;
    long long v33 = v31;

    long long v34 = *(void **)&v11[v12];
    if (v34)
    {
      *(void *)((char *)v34 + *(void *)((*v30 & *v34) + 0x198) + 8) = &protocol witness table for ListTableViewHeaderFooter;
      swift_unknownObjectWeakAssign();
    }
    unint64_t v35 = v33;
    id v36 = objc_msgSend(v11, sel_contentView);
    objc_msgSend(v36, sel_bounds);
    double v38 = v37;
    double v40 = v39;
    double v42 = v41;
    double v44 = v43;

    objc_msgSend(v35, sel_setFrame_, v38, v40, v42, v44);
    objc_msgSend(v35, sel_setAutoresizingMask_, 18);
    id v45 = objc_msgSend(v11, sel_contentView);
    objc_msgSend(v45, sel_addSubview_, v35);

    if (!a2) {
      goto LABEL_8;
    }
  }
  if (*(unsigned char *)(v5 + 32)) {
    unsigned __int8 v46 = 1;
  }
  else {
    unsigned __int8 v46 = 2;
  }
  uint64_t v51 = a2;
  unsigned __int8 v50 = v46;
  ViewTraitCollection.listItemBackground(kind:)(&v50);
LABEL_14:
  uint64_t v47 = *(void *)(v5 + 8);
  swift_bridgeObjectRetain();
  uint64_t v48 = swift_retain();
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(v48, v47);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  return outlined destroy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>((uint64_t)v53);
}

uint64_t specialized closure #1 in HeaderFooterVisitor.configure<A>(view:traits:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v6 = a4;
  uint64_t v8 = a1;
  unint64_t v26 = HIDWORD(a4);
  if (a1)
  {
    *(void *)&__dst[0] = a1;
    LOBYTE(v29[0]) = 0;
    uint64_t v9 = a3;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    char v10 = __src[0];
    uint64_t v24 = *(void *)(a2 + 24);
    BOOL v27 = v24 == 0;
    if (v24) {
      double v11 = 6.0;
    }
    else {
      double v11 = 0.0;
    }
    v29[0] = v8;
    memset(__src, 0, 32);
    LOBYTE(__src[2]) = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    a3 = v9;
    uint64_t v8 = *((void *)&__dst[0] + 1);
    uint64_t v12 = *(void *)&__dst[0];
    uint64_t v14 = *((void *)&__dst[1] + 1);
    uint64_t v13 = *(void *)&__dst[1];
    char v15 = __dst[2];
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v24 = *(void *)(a2 + 24);
    BOOL v27 = v24 == 0;
    if (v24) {
      double v11 = 6.0;
    }
    else {
      double v11 = 0.0;
    }
    char v15 = 1;
    char v10 = 2;
  }
  uint64_t v16 = *(void *)(a2 + 16);
  char v17 = *(unsigned char *)(a2 + 33);
  outlined init with copy of _ViewList_View(a3, (uint64_t)__dst);
  v29[0] = __PAIR64__(v26, v6);
  v29[1] = a5;
  char v30 = 1;
  *(void *)&__src[0] = swift_getKeyPath();
  BYTE8(__src[0]) = 0;
  *(void *)&__src[1] = swift_getKeyPath();
  *(_OWORD *)((char *)&__src[1] + 8) = 0u;
  *(_OWORD *)((char *)&__src[2] + 8) = 0u;
  *(_OWORD *)((char *)&__src[3] + 8) = 0u;
  *(_OWORD *)((char *)&__src[4] + 8) = 0u;
  BYTE8(__src[5]) = 0;
  *(void *)&__src[6] = swift_getKeyPath();
  BYTE8(__src[6]) = 0;
  BYTE9(__src[6]) = v10;
  *(double *)&__src[7] = v11;
  *((void *)&__src[7] + 1) = v12;
  *(void *)&__src[8] = v8;
  *((void *)&__src[8] + 1) = v13;
  *(void *)&__src[9] = v14;
  BYTE8(__src[9]) = v15;
  *(void *)&__src[10] = v16;
  BYTE8(__src[10]) = v17;
  __src[13] = __dst[2];
  __src[14] = __dst[3];
  __src[15] = __dst[4];
  *(void *)&__src[16] = *(void *)&__dst[5];
  __src[11] = __dst[0];
  __src[12] = __dst[1];
  outlined init with take of AccessibilityScrollableContext((uint64_t)v29, (uint64_t)&__src[16] + 8);
  swift_retain();
  if (v27) {
    uint64_t v18 = static Font.headline.getter();
  }
  else {
    uint64_t v18 = static Font.footnote.getter();
  }
  uint64_t v19 = v18;
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with copy of HeaderFooterVisitor.HeaderContent<_ViewList_View>((uint64_t)__src, (uint64_t)__dst);
  *(void *)&__dst[21] = KeyPath;
  *((void *)&__dst[21] + 1) = v19;
  outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>((uint64_t)__src, &lazy cache variable for type metadata for HeaderFooterVisitor.HeaderContent<_ViewList_View>, MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for HeaderFooterVisitor.HeaderContent);
  char v21 = *(unsigned char *)(a2 + 32);
  uint64_t v22 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>((uint64_t)__dst, (uint64_t)__src);
  *(void *)&__src[22] = v24;
  BYTE8(__src[22]) = v21 & 1;
  *(void *)&__src[23] = v22;
  BYTE8(__src[23]) = 0;
  outlined destroy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>((uint64_t)__dst);
  memcpy(__dst, __src, 0x179uLL);
  outlined init with copy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__dst, (uint64_t)__src);
  outlined init with copy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__src, a6);
  *(void *)(a6 + 384) = 0;
  *(unsigned char *)(a6 + 392) = 0;
  outlined destroy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__dst);
  return outlined destroy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>((uint64_t)__src);
}

void protocol witness for ListCellContent.reuseIdentifier.getter in conformance TableViewListHeaderFooterContent()
{
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance PreferBaselineAlignedHeaders()
{
  lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance PreferBaselineAlignedHeaders()
{
  return PropertyList.subscript.setter();
}

uint64_t initializeWithCopy for TableViewListDataSource(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableViewListDataSource(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for TableViewListDataSource(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t type metadata accessor for TableViewListDataSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs : BidirectionalCollection in TableViewListDataSource<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>)
  {
    type metadata accessor for Slice<_ViewList_ID_Views>();
    lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, MEMORY[0x1E4F403D8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<_ViewList_ID_Views> and conformance <> Slice<A>);
  }
  return result;
}

void type metadata accessor for Slice<_ViewList_ID_Views>()
{
  if (!lazy cache variable for type metadata for Slice<_ViewList_ID_Views>)
  {
    type metadata accessor for _ViewList_ID_Views();
    lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type _ViewList_ID_Views and conformance _ViewList_ID_Views, MEMORY[0x1E4F403D8]);
    unint64_t v0 = type metadata accessor for Slice();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slice<_ViewList_ID_Views>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in TableViewListDataSource<A>()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type [Sections.Item] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Sections.Item] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Sections.Item] and conformance [A])
  {
    type metadata accessor for [Sections.Item](255, &lazy cache variable for type metadata for [Sections.Item], (uint64_t)&type metadata for Sections.Item, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Sections.Item] and conformance [A]);
  }
  return result;
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : PlatformListCell in TableViewListDataSource<A>()
{
  return lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type ListTableViewCell and conformance ListTableViewCell, (void (*)(uint64_t))type metadata accessor for ListTableViewCell);
}

_UNKNOWN **associated type witness table accessor for ListCoreDataSource.Cell : UIHostingViewDelegate in TableViewListDataSource<A>()
{
  return &protocol witness table for ListTableViewCell;
}

_UNKNOWN **associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in TableViewListDataSource<A>()
{
  return &protocol witness table for ListTableViewHeaderFooter;
}

uint64_t instantiation function for generic protocol witness table for TableViewListDataSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor()
{
  unint64_t result = lazy protocol witness table cache variable for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor;
  if (!lazy protocol witness table cache variable for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListRowSeparatorVisitor and conformance ListRowSeparatorVisitor);
  }
  return result;
}

uint64_t sub_1880CB204()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI12_ViewList_IDV9CanonicalVSbIgnl_AESbIegnl_TRTA_0(uint64_t a1, uint64_t a2)
{
  return thunk for @callee_guaranteed (@in_guaranteed _ViewList_ID.Canonical, @inout Bool) -> ()(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor()
{
  unint64_t result = lazy protocol witness table cache variable for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor;
  if (!lazy protocol witness table cache variable for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ApplyCollectionViewIDsVisitor and conformance ApplyCollectionViewIDsVisitor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor()
{
  unint64_t result = lazy protocol witness table cache variable for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor;
  if (!lazy protocol witness table cache variable for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplicitIDOffsetVisitor and conformance ExplicitIDOffsetVisitor);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor()
{
  unint64_t result = lazy protocol witness table cache variable for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor;
  if (!lazy protocol witness table cache variable for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExplicitIDFromViewListIDVisitor and conformance ExplicitIDFromViewListIDVisitor);
  }
  return result;
}

uint64_t outlined destroy of ExplicitIDFromViewListIDVisitor(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of ListSeparatorConfiguration?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor and conformance HeaderFooterVisitor()
{
  unint64_t result = lazy protocol witness table cache variable for type HeaderFooterVisitor and conformance HeaderFooterVisitor;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor and conformance HeaderFooterVisitor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor and conformance HeaderFooterVisitor);
  }
  return result;
}

uint64_t partial apply for closure #2 in Sections.sectionIDs.getter()
{
  return closure #2 in Sections.sectionIDs.getter();
}

uint64_t destroy for HeaderFooterVisitor(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result != 1)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for HeaderFooterVisitor(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  id v6 = v4;
  if (v5 != 1) {
    swift_retain();
  }
  *(void *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for HeaderFooterVisitor(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = (uint64_t *)(a1 + 8);
  uint64_t v8 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) == 1)
  {
    if (v8 != 1)
    {
      *uint64_t v7 = v8;
      swift_retain();
      goto LABEL_9;
    }
    uint64_t v9 = 1;
  }
  else
  {
    if (v8 != 1)
    {
      *uint64_t v7 = v8;
      swift_retain();
      swift_release();
      goto LABEL_9;
    }
    outlined destroy of Transaction(a1 + 8);
    uint64_t v9 = *(void *)(a2 + 8);
  }
  *uint64_t v7 = v9;
LABEL_9:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) != 1)
  {
    if (v6 != 1)
    {
      *uint64_t v5 = v6;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of Transaction(a1 + 8);
    uint64_t v6 = 1;
  }
  *uint64_t v5 = v6;
LABEL_6:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 34)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HeaderFooterVisitor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 34) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for HeaderFooterVisitor()
{
  return &unk_1ED42C190;
}

uint64_t outlined init with copy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(0, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer));
    }
  }
}

void type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(255, &lazy cache variable for type metadata for HeaderFooterVisitor.HeaderContent<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for HeaderFooterVisitor.HeaderContent);
    type metadata accessor for _EnvironmentKeyTransformModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

uint64_t type metadata accessor for HeaderFooterVisitor.HeaderContent()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Font?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for [Sections.Item](255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    uint64_t v7 = v6;
    unint64_t v8 = lazy protocol witness table accessor for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, (uint64_t)&type metadata for TableViewListHeaderFooterContent, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(uint64_t a1)
{
  type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(0, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)> and conformance TupleView<A>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *outlined retain of Transaction?(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1880CBC38()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t *outlined release of Transaction?(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1880CBCA8(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 48);
  _OWORD v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v1;
  uint64_t v5 = *(void *)(a1 + 64);
  long long v2 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v2;
  outlined retain of HeaderFooterConfiguration((uint64_t)v4);
  specialized EnvironmentValues.subscript.setter((uint64_t)v4);
  return outlined release of HeaderFooterConfiguration((uint64_t)v4);
}

uint64_t outlined init with take of AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of HeaderFooterVisitor.HeaderContent<_ViewList_View>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(0, &lazy cache variable for type metadata for HeaderFooterVisitor.HeaderContent<_ViewList_View>, MEMORY[0x1E4F3F308], MEMORY[0x1E4F3F300], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for HeaderFooterVisitor.HeaderContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<_ViewList_View, ListTableCellModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t))
{
  type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(0, a2, MEMORY[0x1E4F3F308], a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of HeaderFooterConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t destroy for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1)
{
  return outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v3, v4);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t storeEnumTagSinglePayload for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for HeaderFooterVisitor.DefaultForegroundColorModifier()
{
  return &unk_1ED48DB60;
}

uint64_t type metadata completion function for HeaderFooterVisitor.HeaderContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((*(void *)(v5 + 64) + 7 + ((v6 + 169) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 71 > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v10 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
  }
  else
  {
    uint64_t v44 = *(void *)(a3 + 16);
    uint64_t v11 = *(void *)a2;
    char v12 = *(unsigned char *)(a2 + 8);
    uint64_t v43 = *(void *)(v44 - 8);
    uint64_t v45 = *(void *)(v5 + 64) + 7;
    outlined copy of Environment<Bool>.Content(*(void *)a2, v12);
    *(void *)a1 = v11;
    *(unsigned char *)(a1 + 8) = v12;
    uint64_t v46 = a1;
    unint64_t v13 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    uint64_t v16 = *(void *)(v14 + 24);
    uint64_t v17 = *(void *)(v14 + 40);
    uint64_t v18 = *(void *)(v14 + 48);
    uint64_t v19 = *(void *)(v14 + 56);
    uint64_t v20 = *(void *)(v14 + 64);
    uint64_t v21 = *(void *)(v14 + 72);
    uint64_t v40 = *(void *)(v14 + 32);
    uint64_t v41 = *(void *)(v14 + 80);
    char v42 = *(unsigned char *)(v14 + 88);
    outlined copy of Environment<HeaderFooterConfiguration>.Content(v15, v16, v40, v17, v18, v19, v20, v21, v41, v42);
    *(void *)(v13 + 16) = v15;
    *(void *)(v13 + 24) = v16;
    *(void *)(v13 + 32) = v40;
    *(void *)(v13 + 40) = v17;
    *(void *)(v13 + 48) = v18;
    *(void *)(v13 + 56) = v19;
    *(void *)(v13 + 64) = v20;
    *(void *)(v13 + 72) = v21;
    *(void *)(v13 + 80) = v41;
    *(unsigned char *)(v13 + 88) = v42;
    uint64_t v22 = *(void *)(v14 + 96);
    LOBYTE(v16) = *(unsigned char *)(v14 + 104);
    outlined copy of Environment<Bool>.Content(v22, v16);
    *(void *)(v13 + 96) = v22;
    *(unsigned char *)(v13 + 104) = v16;
    *(unsigned char *)(v13 + 105) = *(unsigned char *)(v14 + 105);
    double v23 = (void *)((v13 + 113) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)((v14 + 113) & 0xFFFFFFFFFFFFFFF8);
    *double v23 = *v24;
    unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v27 = *(_OWORD *)v26;
    long long v28 = *(_OWORD *)(v26 + 16);
    *(unsigned char *)(v25 + 32) = *(unsigned char *)(v26 + 32);
    *(_OWORD *)unint64_t v25 = v27;
    *(_OWORD *)(v25 + 16) = v28;
    unint64_t v29 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = ((unint64_t)v24 + 55) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v29 = *(void *)v30;
    *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
    uint64_t v31 = (v29 + v6 + 9) & ~v6;
    uint64_t v32 = (v30 + v6 + 9) & ~v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v31, v32, v44);
    unint64_t v33 = (v45 + v32) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v34 = *(unsigned __int8 *)(v33 + 70);
    if (v34 >= 3) {
      unsigned int v34 = *(_DWORD *)v33 + 3;
    }
    unint64_t v35 = (v45 + v31) & 0xFFFFFFFFFFFFFFF8;
    if (v34 == 2)
    {
      uint64_t v36 = *(void *)(v33 + 24);
      *(void *)(v35 + 24) = v36;
      *(void *)(v35 + 32) = *(void *)(v33 + 32);
      (**(void (***)(unint64_t, unint64_t))(v36 - 8))(v35, v33);
      *(_DWORD *)(v35 + 40) = *(_DWORD *)(v33 + 40);
      *(_DWORD *)(v35 + 44) = *(_DWORD *)(v33 + 44);
      *(void *)(v35 + 48) = *(void *)(v33 + 48);
      *(unsigned char *)(v35 + 70) = 2;
      uint64_t v10 = v46;
    }
    else
    {
      uint64_t v10 = v46;
      if (v34 == 1)
      {
        *(_DWORD *)unint64_t v35 = *(_DWORD *)v33;
        *(_DWORD *)(v35 + 4) = *(_DWORD *)(v33 + 4);
        *(void *)(v35 + 8) = *(void *)(v33 + 8);
        *(unsigned char *)(v35 + 70) = 1;
      }
      else
      {
        uint64_t v37 = *(void *)(v33 + 24);
        *(void *)(v35 + 24) = v37;
        *(void *)(v35 + 32) = *(void *)(v33 + 32);
        (**(void (***)(unint64_t, unint64_t))(v37 - 8))(v35, v33);
        *(unsigned char *)(v35 + 40) = *(unsigned char *)(v33 + 40);
        *(_DWORD *)(v35 + 48) = *(_DWORD *)(v33 + 48);
        *(_DWORD *)(v35 + 52) = *(_DWORD *)(v33 + 52);
        *(void *)(v35 + 56) = *(void *)(v33 + 56);
        int v38 = *(_DWORD *)(v33 + 64);
        *(_WORD *)(v35 + 68) = *(_WORD *)(v33 + 68);
        *(_DWORD *)(v35 + 64) = v38;
        *(unsigned char *)(v35 + 70) = 0;
      }
    }
  }
  swift_retain();
  return v10;
}

uint64_t destroy for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(void *)(v3 + 80), *(unsigned char *)(v3 + 88));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 96), *(unsigned char *)(v3 + 104));
  unint64_t v4 = (((v3 + 113) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v7);
  unint64_t v8 = (*(void *)(v6 + 56) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v9 = *(unsigned __int8 *)(v8 + 70);
  if (v9 >= 3) {
    unsigned int v9 = *(_DWORD *)v8 + 3;
  }
  if (v9 != 1) {
    __swift_destroy_boxed_opaque_existential_1(v8);
  }

  return swift_release();
}

uint64_t initializeWithCopy for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v6);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  uint64_t v44 = a1;
  unint64_t v7 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v10 = *(void *)(v8 + 24);
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 40);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(v8 + 56);
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(void *)(v8 + 72);
  uint64_t v41 = *(void *)(v8 + 80);
  char v42 = *(unsigned char *)(v8 + 88);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(v9, v10, v11, v12, v13, v14, v15, v16, v41, v42);
  *(void *)(v7 + 16) = v9;
  *(void *)(v7 + 24) = v10;
  *(void *)(v7 + 32) = v11;
  *(void *)(v7 + 40) = v12;
  *(void *)(v7 + 48) = v13;
  *(void *)(v7 + 56) = v14;
  *(void *)(v7 + 64) = v15;
  *(void *)(v7 + 72) = v16;
  *(void *)(v7 + 80) = v41;
  *(unsigned char *)(v7 + 88) = v42;
  uint64_t v17 = *(void *)(v8 + 96);
  LOBYTE(v10) = *(unsigned char *)(v8 + 104);
  outlined copy of Environment<Bool>.Content(v17, v10);
  *(void *)(v7 + 96) = v17;
  *(unsigned char *)(v7 + 104) = v10;
  *(unsigned char *)(v7 + 105) = *(unsigned char *)(v8 + 105);
  uint64_t v18 = (void *)((v7 + 113) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)((v8 + 113) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v22 = *(_OWORD *)v21;
  long long v23 = *(_OWORD *)(v21 + 16);
  *(unsigned char *)(v20 + 32) = *(unsigned char *)(v21 + 32);
  *(_OWORD *)unint64_t v20 = v22;
  *(_OWORD *)(v20 + 16) = v23;
  unint64_t v24 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  uint64_t v26 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v27 = v26 + 16;
  uint64_t v28 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v29 = (v28 + 9 + v24) & ~v28;
  uint64_t v30 = (v28 + 9 + v25) & ~v28;
  (*(void (**)(uint64_t, uint64_t))(v26 + 16))(v29, v30);
  uint64_t v31 = *(void *)(v27 + 48) + 7;
  uint64_t v32 = v31 + v29;
  unint64_t v33 = (v31 + v30) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v34 = *(unsigned __int8 *)(v33 + 70);
  if (v34 >= 3) {
    unsigned int v34 = *(_DWORD *)v33 + 3;
  }
  unint64_t v35 = v32 & 0xFFFFFFFFFFFFFFF8;
  if (v34 == 2)
  {
    uint64_t v37 = *(void *)(v33 + 24);
    *(void *)(v35 + 24) = v37;
    *(void *)(v35 + 32) = *(void *)(v33 + 32);
    (**(void (***)(unint64_t, unint64_t))(v37 - 8))(v35, v33);
    *(_DWORD *)(v35 + 40) = *(_DWORD *)(v33 + 40);
    *(_DWORD *)(v35 + 44) = *(_DWORD *)(v33 + 44);
    *(void *)(v35 + 48) = *(void *)(v33 + 48);
    char v36 = 2;
  }
  else if (v34 == 1)
  {
    *(_DWORD *)unint64_t v35 = *(_DWORD *)v33;
    *(_DWORD *)(v35 + 4) = *(_DWORD *)(v33 + 4);
    *(void *)(v35 + 8) = *(void *)(v33 + 8);
    char v36 = 1;
  }
  else
  {
    uint64_t v38 = *(void *)(v33 + 24);
    *(void *)(v35 + 24) = v38;
    *(void *)(v35 + 32) = *(void *)(v33 + 32);
    (**(void (***)(unint64_t, unint64_t))(v38 - 8))(v35, v33);
    char v36 = 0;
    *(unsigned char *)(v35 + 40) = *(unsigned char *)(v33 + 40);
    *(_DWORD *)(v35 + 48) = *(_DWORD *)(v33 + 48);
    *(_DWORD *)(v35 + 52) = *(_DWORD *)(v33 + 52);
    *(void *)(v35 + 56) = *(void *)(v33 + 56);
    int v39 = *(_DWORD *)(v33 + 64);
    *(_WORD *)(v35 + 68) = *(_WORD *)(v33 + 68);
    *(_DWORD *)(v35 + 64) = v39;
  }
  *(unsigned char *)(v35 + 70) = v36;
  swift_retain();
  return v44;
}

uint64_t assignWithCopy for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v6);
  uint64_t v7 = *(void *)a1;
  char v8 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  outlined consume of Environment<Bool>.Content(v7, v8);
  uint64_t v57 = a1;
  a1 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v11 = *(void *)(v9 + 24);
  uint64_t v12 = *(void *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 40);
  uint64_t v14 = *(void *)(v9 + 48);
  uint64_t v15 = *(void *)(v9 + 56);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = *(void *)(v9 + 72);
  uint64_t v54 = *(void *)(v9 + 80);
  char v55 = *(unsigned char *)(v9 + 88);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(v10, v11, v12, v13, v14, v15, v16, v17, v54, v55);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v20 = *(void *)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v22 = *(void *)(a1 + 48);
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 72);
  uint64_t v26 = *(void *)(a1 + 80);
  char v27 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v54;
  *(unsigned char *)(a1 + 88) = v55;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v18, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  uint64_t v28 = *(void *)(v9 + 96);
  LOBYTE(v11) = *(unsigned char *)(v9 + 104);
  outlined copy of Environment<Bool>.Content(v28, v11);
  uint64_t v29 = *(void *)(a1 + 96);
  char v30 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = v28;
  *(unsigned char *)(a1 + 104) = v11;
  outlined consume of Environment<Bool>.Content(v29, v30);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(v9 + 105);
  uint64_t v31 = (void *)((a1 + 113) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (void *)((v9 + 113) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  unint64_t v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v35 = *(_OWORD *)v34;
  long long v36 = *(_OWORD *)(v34 + 16);
  *(unsigned char *)(v33 + 32) = *(unsigned char *)(v34 + 32);
  *(_OWORD *)unint64_t v33 = v35;
  *(_OWORD *)(v33 + 16) = v36;
  unint64_t v37 = ((unint64_t)v31 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v32 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  uint64_t v39 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v40 = v39 + 24;
  uint64_t v41 = *(unsigned __int8 *)(v39 + 80);
  uint64_t v42 = (v41 + 9 + v37) & ~v41;
  uint64_t v43 = (v41 + 9 + v38) & ~v41;
  (*(void (**)(uint64_t, uint64_t))(v39 + 24))(v42, v43);
  uint64_t v44 = *(void *)(v40 + 40) + 7;
  unint64_t v45 = (v44 + v42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (v44 + v43) & 0xFFFFFFFFFFFFFFF8;
  if (v45 != v46)
  {
    unsigned int v47 = *(unsigned __int8 *)(v45 + 70);
    if (v47 >= 3) {
      unsigned int v47 = *(_DWORD *)v45 + 3;
    }
    if (v47 != 1) {
      __swift_destroy_boxed_opaque_existential_1(v45);
    }
    swift_release();
    unsigned int v48 = *(unsigned __int8 *)(v46 + 70);
    if (v48 >= 3) {
      unsigned int v48 = *(_DWORD *)v46 + 3;
    }
    if (v48 == 2)
    {
      uint64_t v50 = *(void *)(v46 + 24);
      *(void *)(v45 + 24) = v50;
      *(void *)(v45 + 32) = *(void *)(v46 + 32);
      (**(void (***)(unint64_t, unint64_t))(v50 - 8))(v45, v46);
      *(_DWORD *)(v45 + 40) = *(_DWORD *)(v46 + 40);
      *(_DWORD *)(v45 + 44) = *(_DWORD *)(v46 + 44);
      *(void *)(v45 + 48) = *(void *)(v46 + 48);
      char v49 = 2;
    }
    else if (v48 == 1)
    {
      *(_DWORD *)unint64_t v45 = *(_DWORD *)v46;
      *(_DWORD *)(v45 + 4) = *(_DWORD *)(v46 + 4);
      *(void *)(v45 + 8) = *(void *)(v46 + 8);
      char v49 = 1;
    }
    else
    {
      uint64_t v51 = *(void *)(v46 + 24);
      *(void *)(v45 + 24) = v51;
      *(void *)(v45 + 32) = *(void *)(v46 + 32);
      (**(void (***)(unint64_t, unint64_t))(v51 - 8))(v45, v46);
      char v49 = 0;
      *(unsigned char *)(v45 + 40) = *(unsigned char *)(v46 + 40);
      *(_DWORD *)(v45 + 48) = *(_DWORD *)(v46 + 48);
      *(_DWORD *)(v45 + 52) = *(_DWORD *)(v46 + 52);
      *(void *)(v45 + 56) = *(void *)(v46 + 56);
      int v52 = *(_DWORD *)(v46 + 64);
      *(_WORD *)(v45 + 68) = *(_WORD *)(v46 + 68);
      *(_DWORD *)(v45 + 64) = v52;
    }
    *(unsigned char *)(v45 + 70) = v49;
    swift_retain();
  }
  return v57;
}

uint64_t initializeWithTake for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 64);
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v4 + 73) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 73);
  *(_OWORD *)(v4 + 48) = v6;
  *(_OWORD *)(v4 + 64) = v5;
  *(_OWORD *)(v4 + 32) = v7;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 96);
  *(unsigned char *)(v4 + 104) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(void *)(v4 + 96) = v8;
  *(unsigned char *)(v4 + 105) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 105);
  unint64_t v9 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)v12;
  long long v14 = *(_OWORD *)(v12 + 16);
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
  *(_OWORD *)unint64_t v11 = v13;
  *(_OWORD *)(v11 + 16) = v14;
  unint64_t v15 = ((unint64_t)v9 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v18 = v17 + 32;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (v19 + 9 + v15) & ~v19;
  uint64_t v21 = (v19 + 9 + v16) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 32))(v20, v21);
  uint64_t v22 = *(void *)(v18 + 32) + 7;
  uint64_t v23 = v22 + v20;
  unint64_t v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v25 = *(unsigned __int8 *)(v24 + 70);
  if (v25 >= 3) {
    unsigned int v25 = *(_DWORD *)v24 + 3;
  }
  unint64_t v26 = v23 & 0xFFFFFFFFFFFFFFF8;
  if (v25 == 2)
  {
    long long v27 = *(_OWORD *)v24;
    long long v28 = *(_OWORD *)(v24 + 16);
    long long v29 = *(_OWORD *)(v24 + 32);
    *(void *)(v26 + 48) = *(void *)(v24 + 48);
    *(_OWORD *)(v26 + 16) = v28;
    *(_OWORD *)(v26 + 32) = v29;
  }
  else
  {
    if (v25 != 1)
    {
      LOBYTE(v25) = 0;
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v24;
      long long v30 = *(_OWORD *)(v24 + 16);
      long long v31 = *(_OWORD *)(v24 + 32);
      long long v32 = *(_OWORD *)(v24 + 48);
      *(void *)(v26 + 62) = *(void *)(v24 + 62);
      *(_OWORD *)(v26 + 32) = v31;
      *(_OWORD *)(v26 + 48) = v32;
      *(_OWORD *)(v26 + 16) = v30;
      goto LABEL_9;
    }
    long long v27 = *(_OWORD *)v24;
  }
  *(_OWORD *)unint64_t v26 = v27;
LABEL_9:
  *(unsigned char *)(v26 + 70) = v25;
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor.HeaderContent(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  unint64_t v4 = (uint64_t *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v4[10];
  unint64_t v11 = a1 & 0xFFFFFFFFFFFFFFF8;
  char v12 = *((unsigned char *)v4 + 88);
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 48);
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 56);
  uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 64);
  uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 72);
  uint64_t v21 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 80);
  char v22 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 88);
  long long v23 = *((_OWORD *)v4 + 2);
  long long v24 = *((_OWORD *)v4 + 3);
  long long v25 = *((_OWORD *)v4 + 4);
  *(_OWORD *)(v11 + 16) = *((_OWORD *)v4 + 1);
  *(_OWORD *)(v11 + 32) = v23;
  *(_OWORD *)(v11 + 48) = v24;
  *(_OWORD *)(v11 + 64) = v25;
  *(void *)(v11 + 80) = v10;
  *(unsigned char *)(v11 + 88) = v12;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v13, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  char v26 = *((unsigned char *)v4 + 104);
  uint64_t v27 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 96);
  char v28 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(void *)(v11 + 96) = v4[12];
  *(unsigned char *)(v11 + 104) = v26;
  outlined consume of Environment<Bool>.Content(v27, v28);
  *(unsigned char *)(v11 + 105) = *((unsigned char *)v4 + 105);
  long long v29 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8);
  long long v30 = (void *)(((unint64_t)v4 + 113) & 0xFFFFFFFFFFFFFFF8);
  *long long v29 = *v30;
  unint64_t v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v33 = *(_OWORD *)v32;
  long long v34 = *(_OWORD *)(v32 + 16);
  *(unsigned char *)(v31 + 32) = *(unsigned char *)(v32 + 32);
  *(_OWORD *)unint64_t v31 = v33;
  *(_OWORD *)(v31 + 16) = v34;
  unint64_t v35 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v35 = *(void *)v36;
  *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
  uint64_t v37 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v38 = v37 + 40;
  uint64_t v39 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v40 = (v39 + 9 + v35) & ~v39;
  uint64_t v41 = (v39 + 9 + v36) & ~v39;
  (*(void (**)(uint64_t, uint64_t))(v37 + 40))(v40, v41);
  uint64_t v42 = *(void *)(v38 + 24) + 7;
  unint64_t v43 = (v42 + v40) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v42 + v41) & 0xFFFFFFFFFFFFFFF8;
  if (v43 != v44)
  {
    unsigned int v45 = *(unsigned __int8 *)(v43 + 70);
    if (v45 >= 3) {
      unsigned int v45 = *(_DWORD *)v43 + 3;
    }
    if (v45 != 1) {
      __swift_destroy_boxed_opaque_existential_1(v43);
    }
    swift_release();
    unsigned int v46 = *(unsigned __int8 *)(v44 + 70);
    if (v46 >= 3) {
      unsigned int v46 = *(_DWORD *)v44 + 3;
    }
    if (v46 == 2)
    {
      long long v47 = *(_OWORD *)v44;
      long long v48 = *(_OWORD *)(v44 + 16);
      long long v49 = *(_OWORD *)(v44 + 32);
      *(void *)(v43 + 48) = *(void *)(v44 + 48);
      *(_OWORD *)(v43 + 16) = v48;
      *(_OWORD *)(v43 + 32) = v49;
      *(_OWORD *)unint64_t v43 = v47;
      LOBYTE(v46) = 2;
    }
    else if (v46 == 1)
    {
      *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
    }
    else
    {
      LOBYTE(v46) = 0;
      *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
      long long v50 = *(_OWORD *)(v44 + 16);
      long long v51 = *(_OWORD *)(v44 + 32);
      long long v52 = *(_OWORD *)(v44 + 48);
      *(void *)(v43 + 62) = *(void *)(v44 + 62);
      *(_OWORD *)(v43 + 32) = v51;
      *(_OWORD *)(v43 + 48) = v52;
      *(_OWORD *)(v43 + 16) = v50;
    }
    *(unsigned char *)(v43 + 70) = v46;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor.HeaderContent(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2
    && *(unsigned char *)(a1
                + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 169) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
                + 71))
  {
    return v7 + *(_DWORD *)a1 + 1;
  }
  if (v5 > 0xFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                    + 55) & 0xFFFFFFFFFFFFFFF8)
                                                                  + v6
                                                                  + 9) & ~v6);
  unsigned int v9 = *(unsigned __int8 *)(a1 + 8);
  if (v9 > 1) {
    return (v9 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for HeaderFooterVisitor.HeaderContent(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 169) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 71;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      *(unsigned char *)(a1 + v10) = 0;
    }
    if (a2)
    {
      if (v7 > 0xFE)
      {
        unint64_t v12 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 113) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + v9 + 9) & ~v9;
        uint64_t v13 = *(void (**)(unint64_t))(v6 + 56);
        v13(v12);
      }
      else if (a2 > 0xFE)
      {
        *(unsigned char *)(a1 + 8) = 0;
        *(void *)a1 = a2 - 255;
      }
      else
      {
        *(unsigned char *)(a1 + 8) = -(char)a2;
      }
    }
  }
  else
  {
    unsigned int v11 = ~v8 + a2;
    bzero((void *)a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      *(unsigned char *)(a1 + v10) = 1;
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in HeaderFooterVisitor.HeaderContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HeaderFooterVisitor.DefaultForegroundColorModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>)
  {
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>);
    }
  }
}

uint64_t sub_1880CD5B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for HeaderFooterVisitor.HeaderContent() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  outlined consume of Environment<Bool>.Content(*(void *)v3, *(unsigned char *)(v3 + 8));
  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(void *)(v3 + 80), *(unsigned char *)(v3 + 88));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + 96), *(unsigned char *)(v3 + 104));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[18], v1);
  int v4 = *(unsigned __int8 *)(v3 + v2[19] + 70);
  if (v4 == 2)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(v3 + v2[19]);
    goto LABEL_5;
  }
  if (v4 != 1)
  {
    if (*(unsigned char *)(v3 + v2[19] + 70)) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
LABEL_5:
  swift_release();
LABEL_6:

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HeaderFooterVisitor.HeaderContent.body.getter(unsigned char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for HeaderFooterVisitor.HeaderContent() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in HeaderFooterVisitor.HeaderContent.body.getter(a1, v4);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier>();
    lazy protocol witness table accessor for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier();
    lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v2, HeaderFooterVisitor.IOSMultiColumnModifier, HeaderFooterVisitor.LegacyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier;
  if (!lazy protocol witness table cache variable for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for [Sections.Item](255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<HeaderFooterConfiguration>, (uint64_t)&type metadata for HeaderFooterConfiguration, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<HeaderFooterConfiguration> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for HeaderFooterVisitor.LegacyModifier()
{
  return &unk_1ED42C078;
}

uint64_t destroy for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1)
{
  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  uint64_t v2 = *(void *)(a1 + 96);
  char v3 = *(unsigned char *)(a1 + 104);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithCopy for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v16 = *(void *)(a2 + 64);
  char v17 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v16, v17);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v16;
  *(unsigned char *)(a1 + 72) = v17;
  uint64_t v12 = *(void *)(a2 + 80);
  LOBYTE(v5) = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v12, v5);
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = v5;
  uint64_t v13 = *(void *)(a2 + 96);
  LOBYTE(v5) = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v13, v5);
  *(void *)(a1 + 96) = v13;
  *(unsigned char *)(a1 + 104) = v5;
  long long v14 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v14;
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v31 = *(void *)(a2 + 64);
  char v32 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<HeaderFooterConfiguration>.Content(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v31, v32);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 72);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v31;
  *(unsigned char *)(a1 + 72) = v32;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  uint64_t v22 = *(void *)(a2 + 80);
  LOBYTE(v5) = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v22, v5);
  uint64_t v23 = *(void *)(a1 + 80);
  char v24 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v22;
  *(unsigned char *)(a1 + 88) = v5;
  outlined consume of Environment<Bool>.Content(v23, v24);
  uint64_t v25 = *(void *)(a2 + 96);
  LOBYTE(v5) = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v25, v5);
  uint64_t v26 = *(void *)(a1 + 96);
  char v27 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = v25;
  *(unsigned char *)(a1 + 104) = v5;
  outlined consume of Environment<Bool>.Content(v26, v27);
  long long v28 = *(_OWORD *)(a2 + 112);
  long long v29 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v28;
  *(_OWORD *)(a1 + 128) = v29;
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  char v5 = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  char v15 = *(unsigned char *)(a1 + 72);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v17;
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 72) = v5;
  outlined consume of Environment<HeaderFooterConfiguration>.Content(v6, v7, v8, v9, v10, v11, v12, v13, v14, v15);
  char v18 = *(unsigned char *)(a2 + 88);
  uint64_t v19 = *(void *)(a1 + 80);
  char v20 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  char v21 = *(unsigned char *)(a2 + 104);
  uint64_t v22 = *(void *)(a1 + 96);
  char v23 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  long long v24 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v24;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 168)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 168) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

void *type metadata accessor for HeaderFooterVisitor.IOSMultiColumnModifier()
{
  return &unk_1ED42C0F8;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.DefaultForegroundColorModifier and conformance HeaderFooterVisitor.DefaultForegroundColorModifier);
    type metadata accessor for _EnvironmentKeyTransformModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

uint64_t sub_1880CDF00()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HeaderFooterVisitor.LegacyModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in HeaderFooterVisitor.IOSMultiColumnModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>()
{
  if (!lazy cache variable for type metadata for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>)
  {
    type metadata accessor for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>();
    lazy protocol witness table accessor for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>);
    }
  }
}

void type metadata accessor for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, MEMORY[0x1E4F40578]);
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    lazy protocol witness table accessor for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer));
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, a3, a4);
    a5();
    unint64_t v7 = type metadata accessor for HStack();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)()
{
  if (!lazy cache variable for type metadata for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer))
  {
    type metadata accessor for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.IOSMultiColumnModifier and conformance HeaderFooterVisitor.IOSMultiColumnModifier);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer));
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)()
{
  if (!lazy cache variable for type metadata for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer))
  {
    type metadata accessor for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer));
    }
  }
}

void type metadata accessor for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>, (void (*)(uint64_t))type metadata accessor for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>));
    lazy protocol witness table accessor for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>);
    }
  }
}

void type metadata accessor for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)()
{
  if (!lazy cache variable for type metadata for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>))
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>));
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>, (void (*)(uint64_t))type metadata accessor for (_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for TupleView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer))
  {
    type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, MEMORY[0x1E4F41058], MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer));
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    type metadata accessor for ModifiedContent<_ViewList_View, ListTableCellModifier>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E4F40980], MEMORY[0x1E4F40978], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate;
  if (!lazy protocol witness table cache variable for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListUsesBaselineAlignedHeadersPredicate and conformance ListUsesBaselineAlignedHeadersPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>();
    lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(255, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>();
    lazy protocol witness table accessor for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>();
    lazy protocol witness table accessor for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, &lazy cache variable for type metadata for TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer), (void (*)(void))lazy protocol witness table accessor for type TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)> and conformance TupleView<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t outlined release of HeaderFooterVisitor.IOSMultiColumnModifier(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, char), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 104);
  char v10 = *(unsigned char *)(a1 + 72);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v10);
  a3(v5, v6);
  a3(v7, v8);
  return a1;
}

uint64_t sub_1880CEC18()
{
  outlined consume of Environment<HeaderFooterConfiguration>.Content(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 112), *(unsigned char *)(v0 + 120));

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(uint64_t *a1)
{
  return closure #3 in HeaderFooterVisitor.IOSMultiColumnModifier.body(content:)(a1, (_OWORD *)(v1 + 16));
}

uint64_t outlined init with take of Transaction?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for [Sections.Item](0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI11EnvironmentVyAA25HeaderFooterConfigurationVGWOrTm_0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 72);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), v4);
  return a1;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi0_(uint64_t result)
{
  *(unsigned char *)(result + 121) = 1;
  return result;
}

uint64_t outlined init with take of _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(0, &lazy cache variable for type metadata for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>.Storage, MEMORY[0x1E4F40568]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for _ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>();
    uint64_t v7 = v6;
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer));
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOyACyAA6HStackVyAA9TupleViewVyAA01_h9Modifier_D0VyAA19HeaderFooterVisitor33_09EFF545269A5D039E3623E2F99BCD02LLV014IOSMultiColumnI0VG_AA6SpacerVtGGAIyAA6VStackVyAIyAA021_TextBaselineRelativeV0V_AUtGG_AYtGGAIyAA08ModifiedD0VyAyA12_FrameLayoutVG_A3_yAuA013_TraitWritingI0VyAA22LayoutPriorityTraitKeyVGGAYtG_GWOi_(uint64_t result)
{
  *(unsigned char *)(result + 121) = 0;
  return result;
}

ValueMetadata *type metadata accessor for ListUsesBaselineAlignedHeadersPredicate()
{
  return &type metadata for ListUsesBaselineAlignedHeadersPredicate;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> Modifie()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> M;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> M)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Font?> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>> and conformance <> M);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
    type metadata accessor for _EnvironmentKeyTransformModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, _EnvironmentKeyTransformModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for [Sections.Item](255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E4F3F360], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>();
    type metadata accessor for _EnvironmentKeyTransformModifier<Font?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for [Sections.Item](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    lazy protocol witness table accessor for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type _ViewList_ID_Views and conformance _ViewList_ID_Views(&lazy protocol witness table cache variable for type VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_1880CF2E8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<StaticIf<ListUsesBaselineAlignedHeadersPredicate, _ConditionalContent<_ConditionalContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, TupleView<(VStack<TupleView<(_TextBaselineRelativeSpacer, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>)>>, _TextBaselineRelativeSpacer)>>, TupleView<(ModifiedContent<_TextBaselineRelativeSpacer, _FrameLayout>, ModifiedContent<HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>, _TraitWritingModifier<LayoutPriorityTraitKey>>, _TextBaselineRelativeSpacer)>>, HStack<TupleView<(_ViewModifier_Content<HeaderFooterVisitor.IOSMultiColumnModifier>, Spacer)>>>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HeaderFooterVisitor.HeaderContent<_ViewList_View>, _EnvironmentKeyWritingModifier<Font?>>, HeaderFooterVisitor.DefaultForegroundColorModifier>(255, a2, a3);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>)
  {
    type metadata accessor for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier);
    type metadata accessor for [Sections.Item](255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E4F3F360], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<HeaderFooterVisitor.DefaultForegroundColorModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier>, (void (*)(void))lazy protocol witness table accessor for type HeaderFooterVisitor.LegacyModifier and conformance HeaderFooterVisitor.LegacyModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<HeaderFooterVisitor.LegacyModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t specialized static ListUsesBaselineAlignedHeadersPredicate.evaluate(inputs:)()
{
  static Semantics.v3.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
    return 0;
  }
  _GraphInputs.interfaceIdiom.getter();
  unsigned __int8 v1 = v2;
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0)
  {
    _GraphInputs.interfaceIdiom.getter();
    unsigned __int8 v1 = v2;
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0) {
      return 0;
    }
  }
  lazy protocol witness table accessor for type PreferBaselineAlignedHeaders and conformance PreferBaselineAlignedHeaders();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t _UIHostingView.convertAnchor<A>(_:)()
{
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  ViewGraph.transform.getter();
  swift_release();
  Anchor.convert(to:)();

  return swift_release();
}

uint64_t protocol witness for HostingViewProtocol.preferenceValue<A>(_:) in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  return ViewRendererHost.preferenceValue<A>(_:)();
}

uint64_t DatePicker<>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Binding<Date>(a1, a2, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  unint64_t v4 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v5 = a1 + v4[6];
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for DatePicker<DatePickerStyleConfiguration.Label>);
  uint64_t v7 = v6;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with copy of Binding<Date>(v5, a2 + *(int *)(v6 + 36), (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  outlined init with copy of Binding<Date>(a1 + v4[7], a2 + *(int *)(v7 + 40), (unint64_t *)&lazy cache variable for type metadata for Date?, v8);
  *(void *)(a2 + *(int *)(v7 + 44)) = *(void *)(a1 + v4[8]);
  return _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_0(a1, type metadata accessor for DatePickerStyleConfiguration);
}

uint64_t DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v23 = a6;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *v13;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  outlined init with copy of Binding<Date>(v15, a7, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  long long v16 = (int *)type metadata accessor for DatePicker();
  long long v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with copy of Binding<Date>(a2, a7 + v16[9], (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  uint64_t v18 = outlined init with copy of Binding<Date>(a3, a7 + v16[10], (unint64_t *)&lazy cache variable for type metadata for Date?, v17);
  *(void *)(a7 + v16[11]) = v21;
  v25(v18);
  _s10Foundation4DateVSgWOhTm_0(a3, (unint64_t *)&lazy cache variable for type metadata for Date?, v17);
  _s10Foundation4DateVSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for Date?, v17);
  _s10Foundation4DateVSgWOhTm_0(v22, &lazy cache variable for type metadata for Binding<Date>, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a7 + v16[12], v12, v23);
}

uint64_t DatePicker.body.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ResolvedDatePickerStyle(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v8 = (int *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Binding<Date>(v2, (uint64_t)v10, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with copy of Binding<Date>(v2 + *(int *)(a1 + 36), (uint64_t)&v10[v8[8]], (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  outlined init with copy of Binding<Date>(v2 + *(int *)(a1 + 40), (uint64_t)&v10[v8[9]], (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  *(void *)&v10[v8[10]] = *(void *)(v2 + *(int *)(a1 + 44));
  outlined init with copy of DatePickerStyleConfiguration((uint64_t)v10, (uint64_t)v6);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v17 = v13;
  uint64_t v18 = v12;
  uint64_t v19 = v2;
  uint64_t v14 = lazy protocol witness table accessor for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle(&lazy protocol witness table cache variable for type ResolvedDatePickerStyle and conformance ResolvedDatePickerStyle, (void (*)(uint64_t))type metadata accessor for ResolvedDatePickerStyle);
  lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in DatePicker.body.getter, (uint64_t)v16, v4, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, v13, v14);
  _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_0((uint64_t)v6, type metadata accessor for ResolvedDatePickerStyle);
  return _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_0((uint64_t)v10, type metadata accessor for DatePickerStyleConfiguration);
}

uint64_t closure #1 in DatePicker.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DatePicker();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 48));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t type metadata accessor for DatePicker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of Binding<Date>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for closure #1 in DatePicker.body.getter()
{
  return closure #1 in DatePicker.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  }
  return result;
}

uint64_t _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *static DatePickerComponents.hourAndMinute.getter@<X0>(void *a1@<X8>)
{
  return static DatePickerComponents.hourAndMinute.getter(&one-time initialization token for hourAndMinute, &static DatePickerComponents.hourAndMinute, a1);
}

void *static DatePickerComponents.date.getter@<X0>(void *a1@<X8>)
{
  return static DatePickerComponents.hourAndMinute.getter(&one-time initialization token for date, &static DatePickerComponents.date, a1);
}

void *static DatePickerComponents.hourAndMinute.getter@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*result != -1) {
    unint64_t result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

uint64_t specialized DatePicker.init(selection:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v40 = a4;
  uint64_t v41 = a6;
  int v38 = a5;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v35 = a1;
  uint64_t v39 = a7;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v34 = (uint64_t)&v33 - v17;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v33 - v21;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v33 - v21, &lazy cache variable for type metadata for Binding<Date>, v19);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  v24(v18, 1, 1, v23);
  v24(v15, 1, 1, v23);
  outlined init with copy of Binding<Date>((uint64_t)v22, (uint64_t)v11, &lazy cache variable for type metadata for Binding<Date>, v19);
  outlined init with copy of Binding<Date>((uint64_t)v18, (uint64_t)&v11[v9[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  outlined init with copy of Binding<Date>((uint64_t)v15, (uint64_t)&v11[v9[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  *(void *)&v11[v9[13]] = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v27 = v26;
  LOBYTE(v24) = v28;
  uint64_t v30 = v29;
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  _s10Foundation4DateVSgWOhTm_0(v34, (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v22, &lazy cache variable for type metadata for Binding<Date>, v19);
  uint64_t v31 = &v11[v9[14]];
  *(void *)uint64_t v31 = v25;
  *((void *)v31 + 1) = v27;
  v31[16] = v24 & 1;
  *((void *)v31 + 3) = v30;
  outlined init with take of DatePicker<Text>((uint64_t)v11, v39);
  _s10Foundation4DateVSgWOhTm_0(v35, &lazy cache variable for type metadata for Binding<Date>, v19);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DatePicker.init(selection:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  void (*v32)(long long *__return_ptr, uint64_t);
  uint64_t v33;
  long long v34;
  char v35;
  uint64_t v36;

  uint64_t v31 = a4;
  char v32 = a3;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v33 = a5;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v28 - v19;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v28 - v19, &lazy cache variable for type metadata for Binding<Date>, v17);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v22(v16, 1, 1, v21);
  v22(v13, 1, 1, v21);
  outlined init with copy of Binding<Date>((uint64_t)v20, (uint64_t)v9, &lazy cache variable for type metadata for Binding<Date>, v17);
  outlined init with copy of Binding<Date>((uint64_t)v16, (uint64_t)&v9[v7[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v10);
  uint64_t v23 = outlined init with copy of Binding<Date>((uint64_t)v13, (uint64_t)&v9[v7[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v10);
  *(void *)&v9[v7[13]] = v30;
  v32(&v34, v23);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Date?, v10);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Date?, v10);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v20, &lazy cache variable for type metadata for Binding<Date>, v17);
  uint64_t v24 = &v9[v7[14]];
  char v25 = v35;
  uint64_t v26 = v36;
  *(_OWORD *)uint64_t v24 = v34;
  unsigned char v24[16] = v25;
  *((void *)v24 + 3) = v26;
  outlined init with take of DatePicker<Text>((uint64_t)v9, v33);
  return _s10Foundation4DateVSgWOhTm_0(v29, &lazy cache variable for type metadata for Binding<Date>, v17);
}

uint64_t DatePicker.init(selection:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v23 = a7;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v23 - v17;
  uint64_t v19 = *a2;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v23 - v17, &lazy cache variable for type metadata for Binding<Date>, v15);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v14, 1, 1, v20);
  v21(v11, 1, 1, v20);
  uint64_t v28 = v19;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v18, (uint64_t)v14, (uint64_t)v11, v24, v25, v26, v23);
  return _s10Foundation4DateVSgWOhTm_0(a1, &lazy cache variable for type metadata for Binding<Date>, v15);
}

uint64_t specialized DatePicker.init(selection:in:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v45 = a7;
  uint64_t v46 = a4;
  int v47 = a6;
  uint64_t v51 = a5;
  uint64_t v43 = a1;
  uint64_t v44 = a3;
  uint64_t v48 = a8;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v39 - v18;
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  long long v49 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v50 = (uint64_t)&v39 - v22;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v39 - v22, &lazy cache variable for type metadata for Binding<Date>, v20);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v40 = a2;
  v25(v19, a2, v23);
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
  v26(v19, 0, 1, v23);
  uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBB010];
  type metadata accessor for ClosedRange<Date>(0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, MEMORY[0x1E4FBB010]);
  v25(v16, a2 + *(int *)(v27 + 36), v23);
  v26(v16, 0, 1, v23);
  outlined init with copy of Binding<Date>(v50, (uint64_t)v13, &lazy cache variable for type metadata for Binding<Date>, v49);
  uint64_t v28 = v42;
  outlined init with copy of Binding<Date>((uint64_t)v19, (uint64_t)&v13[v11[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v42);
  uint64_t v29 = v28;
  outlined init with copy of Binding<Date>((uint64_t)v16, (uint64_t)&v13[v11[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v28);
  *(void *)&v13[v11[13]] = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v32 = v31;
  LOBYTE(v20) = v33;
  uint64_t v35 = v34;
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Date?, v29);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Date?, v29);
  uint64_t v36 = v49;
  _s10Foundation4DateVSgWOhTm_0(v50, &lazy cache variable for type metadata for Binding<Date>, v49);
  uint64_t v37 = &v13[v11[14]];
  *(void *)uint64_t v37 = v30;
  *((void *)v37 + 1) = v32;
  unsigned char v37[16] = v20 & 1;
  *((void *)v37 + 3) = v35;
  outlined init with take of DatePicker<Text>((uint64_t)v13, v48);
  _sSNy10Foundation4DateVGWOhTm_2(v40, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, v41);
  _s10Foundation4DateVSgWOhTm_0(v43, &lazy cache variable for type metadata for Binding<Date>, v36);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  char *v36;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  uint64_t v45 = a5;
  uint64_t v46 = a7;
  uint64_t v43 = a6;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v44 = a8;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v38 - v23;
  int v38 = v21;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v38 - v23, &lazy cache variable for type metadata for Binding<Date>, v21);
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v20, a2, v25);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56);
  v27(v20, 0, 1, v25);
  v27(v17, 1, 1, v25);
  outlined init with copy of Binding<Date>((uint64_t)v24, (uint64_t)v13, &lazy cache variable for type metadata for Binding<Date>, v21);
  outlined init with copy of Binding<Date>((uint64_t)v20, (uint64_t)&v13[v11[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v14);
  uint64_t v28 = (uint64_t)v17;
  outlined init with copy of Binding<Date>((uint64_t)v17, (uint64_t)&v13[v11[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v14);
  *(void *)&v13[v11[13]] = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v29 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v30;
  LOBYTE(v27) = v32;
  uint64_t v34 = v33;
  _s10Foundation4DateVSgWOhTm_0(v28, (unint64_t *)&lazy cache variable for type metadata for Date?, v14);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for Date?, v14);
  uint64_t v35 = v38;
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v24, &lazy cache variable for type metadata for Binding<Date>, v38);
  uint64_t v36 = &v13[v11[14]];
  *(void *)uint64_t v36 = v29;
  *((void *)v36 + 1) = v31;
  unsigned char v36[16] = v27 & 1;
  *((void *)v36 + 3) = v34;
  outlined init with take of DatePicker<Text>((uint64_t)v13, v44);
  _sSNy10Foundation4DateVGWOhTm_2(v39, &lazy cache variable for type metadata for PartialRangeFrom<Date>, MEMORY[0x1E4FBBC28]);
  _s10Foundation4DateVSgWOhTm_0(v40, &lazy cache variable for type metadata for Binding<Date>, v35);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  char *v35;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v45 = a5;
  uint64_t v46 = a7;
  uint64_t v43 = a6;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  int v47 = a2;
  uint64_t v40 = a1;
  uint64_t v44 = a8;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v37 - v17;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v37 - v21;
  int v38 = v19;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v37 - v21, &lazy cache variable for type metadata for Binding<Date>, v19);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v25(v18, 1, 1, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v15, v47, v23);
  v25(v15, 0, 1, v23);
  outlined init with copy of Binding<Date>((uint64_t)v22, (uint64_t)v12, &lazy cache variable for type metadata for Binding<Date>, v19);
  uint64_t v26 = v39;
  outlined init with copy of Binding<Date>((uint64_t)v18, (uint64_t)&v12[v10[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v39);
  outlined init with copy of Binding<Date>((uint64_t)v15, (uint64_t)&v12[v10[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v26);
  *(void *)&v12[v10[13]] = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  char v33 = v32;
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Date?, v26);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Date?, v26);
  uint64_t v34 = v38;
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v22, &lazy cache variable for type metadata for Binding<Date>, v38);
  uint64_t v35 = &v12[v10[14]];
  *(void *)uint64_t v35 = v27;
  *((void *)v35 + 1) = v29;
  unsigned char v35[16] = v31 & 1;
  *((void *)v35 + 3) = v33;
  outlined init with take of DatePicker<Text>((uint64_t)v12, v44);
  _sSNy10Foundation4DateVGWOhTm_2(v47, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E4FBBD60]);
  _s10Foundation4DateVSgWOhTm_0(v40, &lazy cache variable for type metadata for Binding<Date>, v34);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized DatePicker.init(selection:in:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(long long *__return_ptr, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v42)(long long *__return_ptr, uint64_t);
  uint64_t v43;
  long long v44;
  char v45;
  uint64_t v46;

  uint64_t v41 = a5;
  uint64_t v42 = a4;
  uint64_t v39 = a1;
  uint64_t v40 = a3;
  uint64_t v43 = a6;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v34 - v10;
  int v38 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v34 = (uint64_t)&v34 - v20;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v34 - v20, &lazy cache variable for type metadata for Binding<Date>, v18);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v36 = a2;
  v23(v17, a2, v21);
  uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
  v24(v17, 0, 1, v21);
  uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBB010];
  type metadata accessor for ClosedRange<Date>(0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, MEMORY[0x1E4FBB010]);
  v23(v14, a2 + *(int *)(v25 + 36), v21);
  v24(v14, 0, 1, v21);
  uint64_t v26 = v34;
  uint64_t v27 = v35;
  outlined init with copy of Binding<Date>(v34, (uint64_t)v11, &lazy cache variable for type metadata for Binding<Date>, v35);
  uint64_t v28 = v38;
  outlined init with copy of Binding<Date>((uint64_t)v17, (uint64_t)&v11[v9[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v38);
  uint64_t v29 = outlined init with copy of Binding<Date>((uint64_t)v14, (uint64_t)&v11[v9[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v28);
  *(void *)&v11[v9[13]] = v40;
  v42(&v44, v29);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Date?, v28);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Date?, v28);
  _s10Foundation4DateVSgWOhTm_0(v26, &lazy cache variable for type metadata for Binding<Date>, v27);
  uint64_t v30 = &v11[v9[14]];
  char v31 = v45;
  uint64_t v32 = v46;
  *(_OWORD *)uint64_t v30 = v44;
  v30[16] = v31;
  *((void *)v30 + 3) = v32;
  outlined init with take of DatePicker<Text>((uint64_t)v11, v43);
  _sSNy10Foundation4DateVGWOhTm_2(v36, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, v37);
  return _s10Foundation4DateVSgWOhTm_0(v39, &lazy cache variable for type metadata for Binding<Date>, v27);
}

{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(long long *__return_ptr, uint64_t);
  uint64_t v36;
  long long v37;
  char v38;
  uint64_t v39;

  uint64_t v34 = a5;
  uint64_t v35 = a4;
  uint64_t v32 = a1;
  char v33 = a3;
  char v31 = a2;
  uint64_t v36 = a6;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v31 - v21;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v31 - v21, &lazy cache variable for type metadata for Binding<Date>, v19);
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v18, a2, v23);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v25(v18, 0, 1, v23);
  v25(v15, 1, 1, v23);
  outlined init with copy of Binding<Date>((uint64_t)v22, (uint64_t)v11, &lazy cache variable for type metadata for Binding<Date>, v19);
  outlined init with copy of Binding<Date>((uint64_t)v18, (uint64_t)&v11[v9[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  uint64_t v26 = outlined init with copy of Binding<Date>((uint64_t)v15, (uint64_t)&v11[v9[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  *(void *)&v11[v9[13]] = v33;
  v35(&v37, v26);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Date?, v12);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v22, &lazy cache variable for type metadata for Binding<Date>, v19);
  uint64_t v27 = &v11[v9[14]];
  uint64_t v28 = v38;
  uint64_t v29 = v39;
  *(_OWORD *)uint64_t v27 = v37;
  v27[16] = v28;
  *((void *)v27 + 3) = v29;
  outlined init with take of DatePicker<Text>((uint64_t)v11, v36);
  _sSNy10Foundation4DateVGWOhTm_2(v31, &lazy cache variable for type metadata for PartialRangeFrom<Date>, MEMORY[0x1E4FBBC28]);
  return _s10Foundation4DateVSgWOhTm_0(v32, &lazy cache variable for type metadata for Binding<Date>, v19);
}

{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(long long *__return_ptr, uint64_t);
  uint64_t v37;
  uint64_t v38;
  long long v39;
  char v40;
  uint64_t v41;

  uint64_t v35 = a5;
  uint64_t v36 = a4;
  char v33 = a1;
  uint64_t v34 = a3;
  uint64_t v37 = a6;
  int v38 = a2;
  type metadata accessor for DatePicker<DatePickerStyleConfiguration.Label>(0, &lazy cache variable for type metadata for DatePicker<Text>);
  uint64_t v8 = (int *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v31 - v16;
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v31 - v20;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v31 - v20, &lazy cache variable for type metadata for Binding<Date>, v18);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v24(v17, 1, 1, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v14, v38, v22);
  v24(v14, 0, 1, v22);
  uint64_t v25 = v32;
  outlined init with copy of Binding<Date>((uint64_t)v21, (uint64_t)v10, &lazy cache variable for type metadata for Binding<Date>, v32);
  outlined init with copy of Binding<Date>((uint64_t)v17, (uint64_t)&v10[v8[11]], (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  uint64_t v26 = outlined init with copy of Binding<Date>((uint64_t)v14, (uint64_t)&v10[v8[12]], (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  *(void *)&v10[v8[13]] = v34;
  v36(&v39, v26);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Date?, v11);
  _s10Foundation4DateVSgWOhTm_0((uint64_t)v21, &lazy cache variable for type metadata for Binding<Date>, v25);
  uint64_t v27 = &v10[v8[14]];
  uint64_t v28 = v40;
  uint64_t v29 = v41;
  *(_OWORD *)uint64_t v27 = v39;
  v27[16] = v28;
  *((void *)v27 + 3) = v29;
  outlined init with take of DatePicker<Text>((uint64_t)v10, v37);
  _sSNy10Foundation4DateVGWOhTm_2(v38, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E4FBBD60]);
  return _s10Foundation4DateVSgWOhTm_0(v33, &lazy cache variable for type metadata for Binding<Date>, v25);
}

uint64_t DatePicker.init(selection:in:displayedComponents:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  char v33 = a4;
  uint64_t v34 = a5;
  uint64_t v31 = a1;
  uint64_t v32 = a8;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v28 - v19;
  uint64_t v29 = *a3;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v28 - v19, &lazy cache variable for type metadata for Binding<Date>, v17);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v23(v16, a2, v21);
  uint64_t v24 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
  v24(v16, 0, 1, v21);
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBB010];
  type metadata accessor for ClosedRange<Date>(0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, MEMORY[0x1E4FBB010]);
  v23(v13, a2 + *(int *)(v26 + 36), v21);
  v24(v13, 0, 1, v21);
  uint64_t v37 = v29;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v20, (uint64_t)v16, (uint64_t)v13, v33, v34, v35, v32);
  _sSNy10Foundation4DateVGWOhTm_2(a2, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<Date>, v25);
  return _s10Foundation4DateVSgWOhTm_0(v31, &lazy cache variable for type metadata for Binding<Date>, v30);
}

{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v26 = a8;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v26 - v19;
  uint64_t v21 = *a3;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v26 - v19, &lazy cache variable for type metadata for Binding<Date>, v17);
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v16, a2, v22);
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v24(v16, 0, 1, v22);
  v24(v13, 1, 1, v22);
  uint64_t v31 = v21;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v20, (uint64_t)v16, (uint64_t)v13, v27, v28, v29, v26);
  _sSNy10Foundation4DateVGWOhTm_2(a2, &lazy cache variable for type metadata for PartialRangeFrom<Date>, MEMORY[0x1E4FBBC28]);
  return _s10Foundation4DateVSgWOhTm_0(a1, &lazy cache variable for type metadata for Binding<Date>, v17);
}

{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a8;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v26 - v18;
  uint64_t v20 = *a3;
  outlined init with copy of Binding<Date>(a1, (uint64_t)&v26 - v18, &lazy cache variable for type metadata for Binding<Date>, v16);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v23(v15, 1, 1, v21);
  uint64_t v24 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v12, v27, v21);
  v23(v12, 0, 1, v21);
  char v33 = v20;
  DatePicker.init(selection:minimumDate:maximumDate:displayedComponents:label:)((uint64_t)v19, (uint64_t)v15, (uint64_t)v12, v29, v30, v31, v28);
  _sSNy10Foundation4DateVGWOhTm_2(v24, &lazy cache variable for type metadata for PartialRangeThrough<Date>, MEMORY[0x1E4FBBD60]);
  return _s10Foundation4DateVSgWOhTm_0(v26, &lazy cache variable for type metadata for Binding<Date>, v16);
}