uint64_t UICollectionViewListCoordinatorBase.isAnimated.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;

  v1 = (void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0));
  swift_beginAccess();
  if (*v1 == 1)
  {
    swift_endAccess();
  }
  else
  {
    v2 = Transaction.animation.getter();
    swift_endAccess();
    if (v2)
    {
      swift_release();
      return 1;
    }
  }
  return 0;
}

uint64_t UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  v5 = v4;
  LODWORD(v107) = a4;
  uint64_t v117 = a2;
  v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = *MEMORY[0x1E4FBC8C8] & *v4;
  uint64_t v10 = *(void *)(v9 + 96);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v110 = *(void *)(v11 - 8);
  uint64_t v111 = v11;
  MEMORY[0x1F4188790](v11);
  v109 = (char *)&v89 - v12;
  uint64_t v101 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v100 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101);
  v103 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v102 = (char *)&v89 - v15;
  uint64_t v112 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v16);
  v104 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  v105 = (char *)&v89 - v19;
  uint64_t v99 = *(void *)(v9 + 112);
  uint64_t v20 = *(void *)(v99 + 8);
  uint64_t v113 = type metadata accessor for ShadowListDataSource();
  uint64_t v115 = *(void *)(v113 - 8);
  MEMORY[0x1F4188790](v113);
  uint64_t v114 = (uint64_t)&v89 - v21;
  uint64_t v106 = v20;
  v22 = (int *)type metadata accessor for ListCoreBatchUpdates();
  uint64_t v23 = *((void *)v22 - 1);
  MEMORY[0x1F4188790](v22);
  v25 = (char *)&v89 - v24;
  id v27 = objc_msgSend(a1, sel_setAllowsMultipleSelection_, UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v26) & 1);
  char v28 = UICollectionViewListCoordinatorBase.hasMultipleSelection.getter((uint64_t)v27);
  id v108 = a1;
  objc_msgSend(a1, sel_setAllowsMultipleSelectionDuringEditing_, v28 & 1);
  v29 = (void *)(*v8 & *v5);
  int v116 = *((unsigned __int8 *)v5 + v29[29]);
  if (v116 != 1)
  {
    v30 = (void *)((char *)v5 + v29[20]);
    swift_beginAccess();
    uint64_t v31 = *v30;
    uint64_t *v30 = a3;
    outlined consume of Transaction?(v31);
    v29 = (void *)(*v8 & *v5);
    swift_retain();
  }
  v32 = (char *)v5 + v29[22];
  swift_beginAccess();
  v33 = *(void (**)(char *, char *, int *))(v23 + 16);
  v33(v25, v32, v22);
  char v34 = ListCoreBatchUpdates.isEmpty.getter(v22);
  v35 = *(void (**)(char *, int *))(v23 + 8);
  v35(v25, v22);
  if (v34)
  {
    v97 = v35;
    v98 = v33;
    UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v118);
    if (v118[0] == 1)
    {
      unsigned int v36 = 0;
    }
    else
    {
      UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v118);
      BOOL v47 = v118[0] != 0;
      unsigned int v36 = v47 ^ objc_msgSend(v108, sel_isEditing);
    }
    v48 = v32;
    uint64_t v49 = *MEMORY[0x1E4FBC8C8] & *v5;
    uint64_t v50 = *(void *)(v49 + 0xB8);
    if (*((unsigned char *)v5 + v50) == 1)
    {
      *((unsigned char *)v5 + v50) = 0;
      UICollectionViewListCoordinatorBase.resolvedEditMode.getter(v118);
      if (v118[0]) {
        objc_msgSend(v108, sel_setEditing_, 1);
      }
    }
    else
    {
      uint64_t v95 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xB8);
      unsigned int v94 = v36;
      v96 = v32;
      if (v107)
      {
        v51 = (char *)v5 + *(void *)(v49 + 136);
        swift_beginAccess();
        uint64_t v52 = v114;
        v53 = *(void (**)(uint64_t, void, uint64_t))(v115 + 16);
        v107 = (void (*)(void, void, void))v51;
        uint64_t v54 = v113;
        uint64_t v93 = v115 + 16;
        v92 = v53;
        v53(v114, v51, v113);
        swift_beginAccess();
        uint64_t WitnessTable = swift_getWitnessTable();
        ListCoreBatchUpdates.formUpdates<A>(from:to:)(v52, v117, v22, v54, WitnessTable);
        v48 = v96;
        swift_endAccess();
        uint64_t v56 = v115 + 8;
        v57 = *(void (**)(uint64_t, uint64_t))(v115 + 8);
        uint64_t v58 = v54;
        v59 = v105;
        v57(v114, v58);
        if (*((unsigned char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xE8)) == 1)
        {
          v90 = v57;
          uint64_t v91 = v56;
          v60 = v107;
          v98(v25, v48, v22);
          char v61 = ListCoreBatchUpdates.isEmpty.getter(v22);
          v97(v25, v22);
          (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v59, v117, v10);
          if (v61)
          {
            uint64_t v62 = v114;
            uint64_t v63 = v113;
            v92(v114, v60, v113);
            uint64_t v64 = v99;
            ShadowListDataSource<>.style.getter(v63, v99);
            v90(v62, v63);
            (*(void (**)(uint64_t, uint64_t))(v64 + 16))(v10, v64);
            lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.Appearance and conformance UICollectionLayoutListConfiguration.Appearance, MEMORY[0x1E4FB10E8]);
            v65 = v102;
            uint64_t v66 = v101;
            LODWORD(v107) = dispatch thunk of static Equatable.== infix(_:_:)();
            v67 = *(void (**)(char *, uint64_t))(v100 + 8);
            v67(v103, v66);
            v67(v65, v66);
            v68 = (void *)MEMORY[0x1E4FBC8C8];
            (*(void (**)(char *, uint64_t))(v112 + 8))(v105, v10);
            if (v107) {
              return $defer #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v116 != 1, v5);
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v112 + 8))(v59, v10);
            v68 = (void *)MEMORY[0x1E4FBC8C8];
          }
          uint64_t v69 = *(void *)((*v68 & *v5) + 0xE8);
          char v70 = *((unsigned char *)v5 + v69);
          *((unsigned char *)v5 + v69) = 2;
          UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v70);
          v48 = v96;
        }
      }
      v98(v25, v48, v22);
      char v71 = ListCoreBatchUpdates.isEmpty.getter(v22);
      v97(v25, v22);
      v72 = *(void (**)(char *, uint64_t, uint64_t))(v112 + 16);
      if (v71)
      {
        uint64_t v73 = (uint64_t)v104;
        v107 = *(void (**)(void, void, void))(v112 + 16);
        v72(v104, v117, v10);
        uint64_t v74 = v114;
        ShadowListDataSource.init(_:)(v73, v10, v114);
        specialized UICollectionViewListCoordinatorBase.dataSource.setter(v74);
        (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v74, v113);
        v75 = UICollectionViewListCoordinatorBase.dragAndDropController.getter();
        v107(v73, v117, v10);
        ShadowListDataSource.init(_:)(v73, v10, v74);
        v76 = (void *)MEMORY[0x1E4FBC8C8];
        v77 = (char *)v75 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v75) + 0x60);
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v115 + 40))(v77, v74, v113);
        swift_endAccess();
      }
      else
      {
        v78 = v109;
        uint64_t v79 = v112;
        v72(v109, v117, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v78, 0, 1, v10);
        v76 = (void *)MEMORY[0x1E4FBC8C8];
        v80 = (char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xC8);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v110 + 40))(v80, v78, v111);
        swift_endAccess();
      }
      v81 = v97;
      v98(v25, v96, v22);
      char v82 = ListCoreBatchUpdates.isEmpty.getter(v22);
      v81(v25, v22);
      if (((v82 & 1) == 0 || (*((unsigned char *)v5 + *(void *)((*v76 & *v5) + 0xD0)) & 1) == 0)
        && (*((unsigned char *)v5 + v95) & 1) == 0)
      {
        *((unsigned char *)v5 + *(void *)((*v76 & *v5) + 0xD0)) = 1;
        char v83 = UICollectionViewListCoordinatorBase.isAnimated.getter();
        uint64_t v84 = swift_allocObject();
        *(unsigned char *)(v84 + 16) = v83 & 1;
        id v85 = v108;
        *(void *)(v84 + 24) = v5;
        *(void *)(v84 + 32) = v85;
        *(unsigned char *)(v84 + 40) = v94;
        v86 = v5;
        id v87 = v85;
        static Update.enqueueAction(_:)();
        swift_release();
      }
    }
  }
  else
  {
    v37 = (void *)MEMORY[0x1E4FBC8C8];
    v38 = (char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x88);
    swift_beginAccess();
    uint64_t v40 = v114;
    uint64_t v39 = v115;
    uint64_t v41 = v113;
    (*(void (**)(uint64_t, char *, uint64_t))(v115 + 16))(v114, v38, v113);
    swift_beginAccess();
    uint64_t v42 = swift_getWitnessTable();
    uint64_t v43 = v117;
    ListCoreBatchUpdates.formUpdates<A>(from:to:)(v40, v117, v22, v41, v42);
    swift_endAccess();
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
    uint64_t v44 = v112;
    v45 = v109;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v109, v43, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v10);
    v46 = (char *)v5 + *(void *)((*v37 & *v5) + 0xC8);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v110 + 40))(v46, v45, v111);
    swift_endAccess();
  }
  return $defer #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v116 != 1, v5);
}

uint64_t ListCoreBatchUpdates.isEmpty.getter(int *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *((void *)a1 - 1);
  MEMORY[0x1F4188790](a1);
  v35 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v34 = (char *)&v32 - v7;
  MEMORY[0x1F4188790](v8);
  v33 = (char *)&v32 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v32 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v32 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v32 - v17;
  char v19 = IndexSet.isEmpty.getter();
  uint64_t v20 = *(void (**)(char *, uint64_t, int *))(v4 + 16);
  v20(v18, v2, a1);
  if (v19) {
    char v21 = IndexSet.isEmpty.getter();
  }
  else {
    char v21 = 0;
  }
  v22 = *(void (**)(char *, int *))(v4 + 8);
  v22(v18, a1);
  v20(v15, v2, a1);
  if ((v21 & 1) == 0)
  {
    v22(v15, a1);
    v20(v12, v2, a1);
    goto LABEL_11;
  }
  uint64_t v23 = *(void *)(*(void *)&v15[a1[10]] + 16);
  v22(v15, a1);
  v20(v12, v2, a1);
  if (v23)
  {
LABEL_11:
    v22(v12, a1);
    v25 = v33;
    v20(v33, v2, a1);
    uint64_t v26 = v34;
    goto LABEL_12;
  }
  uint64_t v24 = *(void *)(*(void *)&v12[a1[11]] + 16);
  v22(v12, a1);
  v25 = v33;
  v20(v33, v2, a1);
  uint64_t v26 = v34;
  if (v24)
  {
LABEL_12:
    v22(v25, a1);
    v20(v26, v2, a1);
    char v28 = v35;
    goto LABEL_13;
  }
  uint64_t v27 = *(void *)(*(void *)&v25[a1[12]] + 16);
  v22(v25, a1);
  v20(v26, v2, a1);
  char v28 = v35;
  if (v27)
  {
LABEL_13:
    v22(v26, a1);
    v20(v28, v2, a1);
    goto LABEL_14;
  }
  uint64_t v29 = *(void *)(*(void *)&v26[a1[13]] + 16);
  v22(v26, a1);
  v20(v28, v2, a1);
  if (v29)
  {
LABEL_14:
    LOBYTE(v30) = 0;
    goto LABEL_15;
  }
  uint64_t v30 = IndexSet.isEmpty.getter();
LABEL_15:
  v22(v28, a1);
  return v30 & 1;
}

uint64_t destroy for ListCoreBatchUpdates(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IndexSet();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 36), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5(a1 + *(int *)(a2 + 56), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ListCoreBatchUpdates(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[9], a2 + a3[9], v6);
  uint64_t v8 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[13];
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[14];
  uint64_t v18 = a1 + v10;
  uint64_t v11 = a2 + v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(v18, v11, v6);
  uint64_t v12 = a3[15];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = v14[3];
  v13[2] = v14[2];
  v13[3] = v16;
  v13[4] = v14[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for ListCoreBatchUpdates()
{
  return __swift_instantiateGenericMetadata();
}

void *UICollectionViewListCoordinatorBase.resolvedEditMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x110) + 8);
  if (v3)
  {
    type metadata accessor for PlatformItemList?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
    result = MEMORY[0x18C113DA0](&v5);
    LOBYTE(v3) = v5;
  }
  *a1 = v3;
  return result;
}

void type metadata accessor for PlatformItemList?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t ShadowListDataSource.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v10 = *(void *)(updated - 8);
  double v11 = MEMORY[0x1F4188790](updated);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v11);
  ShadowListUpdateRecorder.init(_:)((uint64_t)v8, a2, (uint64_t)v13);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v13, updated);
}

uint64_t ShadowListUpdateRecorder.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v8 = *(int *)(updated + 36);
  uint64_t v9 = updated;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ListUpdate();
  *(void *)(a3 + v8) = Array.init()();
  uint64_t v6 = *(int *)(v9 + 40);
  *(void *)(a3 + v6) = Array.init()();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

id UICollectionViewListCoordinatorBase.dragAndDropController.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150);
  uint64_t v2 = *(void **)((char *)v0 + v1);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + v1);
  }
  else
  {
    uint64_t v4 = (void *)closure #1 in UICollectionViewListCoordinatorBase.dragAndDropController.getter(v0);
    unint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t $defer #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t result, void *a2)
{
  if (result)
  {
    uint64_t v2 = (void *)((char *)a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0xA0));
    swift_beginAccess();
    uint64_t v3 = *v2;
    *uint64_t v2 = 1;
    return outlined consume of Transaction?(v3);
  }
  return result;
}

uint64_t assignWithTake for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CollectionViewListDataSource(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v8 = a3[9];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[10];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = *(void *)(a1 + v12 + 8);
  if (v15 == 1) {
    goto LABEL_4;
  }
  uint64_t v16 = *(void *)(v14 + 8);
  if (v16 != 1)
  {
    if (v15)
    {
      if (v16)
      {
        *(void *)uint64_t v13 = *(void *)v14;
        swift_release();
        *(void *)(v13 + 8) = *(void *)(v14 + 8);
        swift_release();
        *(void *)(v13 + 16) = *(void *)(v14 + 16);
        swift_bridgeObjectRelease();
        if (a1 == a2) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_0(v13, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
    }
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    *(void *)(v13 + 16) = *(void *)(v14 + 16);
    if (a1 == a2)
    {
LABEL_12:
      *(unsigned char *)(v13 + 65) = *(unsigned char *)(v14 + 65);
      *(unsigned char *)(v13 + 66) = *(unsigned char *)(v14 + 66);
      goto LABEL_13;
    }
LABEL_11:
    outlined destroy of TableColumnCollection.Backing(v13 + 24);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v13 + 40) = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(v13 + 49) = *(_OWORD *)(v14 + 49);
    goto LABEL_12;
  }
  outlined destroy of TableHeaderView(v13);
LABEL_4:
  long long v17 = *(_OWORD *)(v14 + 48);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 48) = v17;
  *(_DWORD *)(v13 + 63) = *(_DWORD *)(v14 + 63);
  long long v18 = *(_OWORD *)(v14 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *(_OWORD *)(v13 + 16) = v18;
LABEL_13:
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  swift_release();
  *(void *)(v20 + 8) = *(void *)(v21 + 8);
  swift_release();
  uint64_t v22 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  return a1;
}

id partial apply for closure #1 in EditMenuBridge.hostRemovedFromWindow()()
{
  id result = *(id *)(*(void *)(v0 + 16) + direct field offset for EditMenuBridge.interaction);
  if (result) {
    return objc_msgSend(result, sel_dismissMenu);
  }
  return result;
}

void partial apply for closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_layoutIfNeeded);
  UICollectionViewListCoordinatorBase.updateListContents(_:)(v1);
}

uint64_t specialized UICollectionViewListCoordinatorBase.dataSource.setter(uint64_t a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t assignWithCopy for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithCopy for CollectionViewListDataSource(uint64_t a1, uint64_t a2, int *a3)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  uint64_t v6 = *(void **)(a2 + 48);
  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v6;
  id v8 = v6;

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = a3[10];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (long long *)(a2 + v13);
  uint64_t v16 = *(void *)(a1 + v13 + 8);
  uint64_t v17 = *(void *)(a2 + v13 + 8);
  if (v16 != 1)
  {
    if (v17 == 1)
    {
      outlined destroy of TableHeaderView(v14);
      *(_OWORD *)uint64_t v14 = *v15;
      long long v22 = v15[2];
      long long v21 = v15[3];
      long long v23 = v15[1];
      *(_DWORD *)(v14 + 63) = *(_DWORD *)((char *)v15 + 63);
      *(_OWORD *)(v14 + 32) = v22;
      *(_OWORD *)(v14 + 48) = v21;
      *(_OWORD *)(v14 + 16) = v23;
      goto LABEL_27;
    }
    if (v16)
    {
      if (v17)
      {
        *(void *)uint64_t v14 = *(void *)v15;
        swift_retain();
        swift_release();
        *(void *)(v14 + 8) = *((void *)v15 + 1);
        swift_retain();
        swift_release();
        *(void *)(v14 + 16) = *((void *)v15 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (a1 == a2) {
          goto LABEL_26;
        }
      }
      else
      {
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_0(v14, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
        uint64_t v29 = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v14 = *v15;
        *(void *)(v14 + 16) = v29;
        if (a1 == a2) {
          goto LABEL_26;
        }
      }
    }
    else if (v17)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (a1 == a2) {
        goto LABEL_26;
      }
    }
    else
    {
      long long v30 = *v15;
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v14 = v30;
      if (a1 == a2)
      {
LABEL_26:
        *(unsigned char *)(v14 + 65) = *((unsigned char *)v15 + 65);
        *(unsigned char *)(v14 + 66) = *((unsigned char *)v15 + 66);
        goto LABEL_27;
      }
    }
    outlined destroy of TableColumnCollection.Backing(v14 + 24);
    if (v15[4])
    {
      *(void *)(v14 + 24) = *((void *)v15 + 3);
      *(unsigned char *)(v14 + 64) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v31 = *((void *)v15 + 6);
      *(void *)(v14 + 48) = v31;
      *(void *)(v14 + 56) = *((void *)v15 + 7);
      (**(void (***)(uint64_t, uint64_t))(v31 - 8))(v14 + 24, (uint64_t)v15 + 24);
      *(unsigned char *)(v14 + 64) = 0;
    }
    goto LABEL_26;
  }
  if (v17 != 1)
  {
    if (v17)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      *(void *)(v14 + 8) = *((void *)v15 + 1);
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v24 = *v15;
      *(void *)(v14 + 16) = *((void *)v15 + 2);
      *(_OWORD *)uint64_t v14 = v24;
    }
    v25 = (void *)(v14 + 24);
    uint64_t v26 = (void *)v15 + 3;
    char v27 = *((unsigned char *)v15 + 64);
    if (v27)
    {
      void *v25 = *v26;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v28 = *((void *)v15 + 6);
      *(void *)(v14 + 48) = v28;
      *(void *)(v14 + 56) = *((void *)v15 + 7);
      (**(void (***)(void *, void *))(v28 - 8))(v25, v26);
    }
    *(unsigned char *)(v14 + 64) = v27;
    goto LABEL_26;
  }
  *(_OWORD *)uint64_t v14 = *v15;
  long long v18 = v15[1];
  long long v19 = v15[2];
  long long v20 = v15[3];
  *(_DWORD *)(v14 + 63) = *(_DWORD *)((char *)v15 + 63);
  *(_OWORD *)(v14 + 32) = v19;
  *(_OWORD *)(v14 + 48) = v20;
  *(_OWORD *)(v14 + 16) = v18;
LABEL_27:
  uint64_t v32 = a3[11];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(void *)(a1 + v32) = *(void *)(a2 + v32);
  swift_retain();
  swift_release();
  *(void *)(v33 + 8) = *(void *)(v34 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v35 = a3[13];
  uint64_t v36 = a1 + v35;
  uint64_t v37 = a2 + v35;
  char v38 = *(unsigned char *)(v37 + 8);
  *(void *)uint64_t v36 = *(void *)v37;
  *(unsigned char *)(v36 + 8) = v38;
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  return a1;
}

uint64_t partial apply for performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  return performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.dragAndDropController.getter(void *a1)
{
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v3 = type metadata accessor for ShadowListDataSource();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - v5;
  type metadata accessor for CollectionViewListDragAndDropController();
  uint64_t v7 = (char *)a1 + *(void *)(v2 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = specialized CollectionViewListDragAndDropController.__allocating_init(dataSource:dispatchUpdate:)(v6, partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

uint64_t type metadata accessor for CollectionViewListDragAndDropController()
{
  return __swift_instantiateGenericMetadata();
}

id specialized CollectionViewListDragAndDropController.__allocating_init(dataSource:dispatchUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return specialized ListDragAndDropControllerBase.init(dataSource:dispatchUpdate:)(a1, a2, a3);
}

id specialized ListDragAndDropControllerBase.init(dataSource:dispatchUpdate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = (_OWORD *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70));
  _OWORD *v8 = xmmword_18834BB90;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  *(_OWORD *)((char *)v8 + 57) = 0u;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  *(void *)((char *)v3 + *(void *)((*v7 & *v3) + 0x78)) = MEMORY[0x1E4FBC860];
  *(void *)((char *)v3 + *(void *)((*v7 & *v3) + 0x80)) = v9;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v3 + *(void *)((*v7 & *v3) + 0x90)) = 0;
  uint64_t v10 = (char *)v3 + *(void *)((*v7 & *v3) + 0x60);
  uint64_t v11 = type metadata accessor for ShadowListDataSource();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v10, a1, v11);
  uint64_t v12 = (void *)((char *)v3 + *(void *)((*v7 & *v3) + 0x68));
  *uint64_t v12 = a2;
  v12[1] = a3;
  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for ListDragAndDropControllerBase();
  return objc_msgSendSuper2(&v14, sel_init);
}

uint64_t type metadata accessor for ListDragAndDropControllerBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80);
  return closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(void **)(v0 + 48), v0 + v1, *(void **)(v0+ ((*(void *)(*(void *)(*(void *)(v0 + 16) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

void UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate] = 2;
  int v5 = *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  BOOL v6 = __CFADD__(v5, 1);
  int v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    *(_DWORD *)&v4[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v7;
    if (a1)
    {
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = a1;
      *(void *)(v12 + 24) = a2;
      long long v22 = partial apply for thunk for @callee_guaranteed () -> ();
      long long v23 = (void *)v12;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v19 = 1107296256;
      long long v20 = thunk for @escaping @callee_guaranteed () -> ();
      long long v21 = &block_descriptor_65;
      uint64_t v13 = _Block_copy(&aBlock);
      swift_release();
    }
    else
    {
      uint64_t v13 = 0;
    }
    objc_super v14 = (void *)swift_allocObject();
    v14[2] = a3;
    v14[3] = a4;
    v14[4] = v4;
    long long v22 = partial apply for closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
    long long v23 = v14;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    long long v20 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    long long v21 = &block_descriptor_43;
    uint64_t v15 = _Block_copy(&aBlock);
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a3, a4);
    uint64_t v16 = v4;
    swift_release();
    v17.receiver = v16;
    v17.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
    objc_msgSendSuper2(&v17, sel_performBatchUpdates_completion_, v13, v15);
    _Block_release(v15);
    _Block_release(v13);
  }
}

uint64_t partial apply for specialized closure #1 in UIHostingController.performRender()()
{
  return static Update.locked<A>(_:)();
}

id partial apply for closure #1 in closure #3 in SheetBridge.present(_:from:animated:existingPresentedVC:isPreempting:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_presentViewController_animated_completion_, *(void *)(v0 + 24), 0, 0);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance BridgedPopUpButtonPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  return outlined init with copy of WeakBox<UIButton>?((uint64_t)&static BridgedPopUpButtonPreferenceKey.defaultValue, a1, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
}

uint64_t outlined init with copy of WeakBox<UIButton>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t UIHostingContentView._configuration.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)(*MEMORY[0x1E4FBC8C8] & *v1);
  uint64_t v5 = type metadata accessor for UICellConfigurationState();
  uint64_t v45 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v40 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UICellConfigurationState?, UICellConfigurationState?)();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UICellConfigurationState?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v39 - v14;
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v39 - v17;
  uint64_t v19 = v4[200];
  uint64_t v20 = v4[201];
  uint64_t v21 = v4[203];
  uint64_t v41 = v4[202];
  uint64_t v42 = v19;
  uint64_t v48 = v19;
  uint64_t v49 = v20;
  uint64_t v43 = v21;
  uint64_t v44 = v20;
  uint64_t v50 = v41;
  uint64_t v51 = v21;
  uint64_t v22 = type metadata accessor for UIHostingConfiguration();
  uint64_t v23 = *(int *)(v22 + 56);
  uint64_t v24 = type metadata accessor for UIHostingConfigurationStorage(0);
  outlined init with copy of UIHostingConfigurationStorage(a1 + *(int *)(v24 + 36) + v23, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  v25 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x668);
  swift_beginAccess();
  outlined init with copy of UIHostingConfigurationStorage((uint64_t)&v25[*(int *)(v22 + 56) + (uint64_t)*(int *)(v24 + 36)], (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  uint64_t v26 = *(int *)(v8 + 56);
  uint64_t v27 = v45;
  uint64_t v28 = (uint64_t)&v10[v26];
  outlined init with copy of UIHostingConfigurationStorage((uint64_t)v18, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  outlined init with copy of UIHostingConfigurationStorage((uint64_t)v15, v28, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v29((uint64_t)v10, 1, v5) == 1)
  {
    outlined destroy of UIHostingConfigurationStorage((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
    outlined destroy of UIHostingConfigurationStorage((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
    if (v29(v28, 1, v5) == 1)
    {
      outlined destroy of UIHostingConfigurationStorage((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
      return UIHostingContentView.updateHostedViews()();
    }
  }
  else
  {
    outlined init with copy of UIHostingConfigurationStorage((uint64_t)v10, v46, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
    if (v29(v28, 1, v5) != 1)
    {
      uint64_t v32 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v40, v28, v5);
      lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier(&lazy protocol witness table cache variable for type UICellConfigurationState and conformance UICellConfigurationState, MEMORY[0x1E4FB0F00]);
      uint64_t v33 = v46;
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v27 + 8);
      v35(v32, v5);
      outlined destroy of UIHostingConfigurationStorage((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
      outlined destroy of UIHostingConfigurationStorage((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
      v35((char *)v33, v5);
      outlined destroy of UIHostingConfigurationStorage((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
      uint64_t v31 = v43;
      uint64_t v30 = v44;
      if (v34) {
        return UIHostingContentView.updateHostedViews()();
      }
      goto LABEL_8;
    }
    outlined destroy of UIHostingConfigurationStorage((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
    outlined destroy of UIHostingConfigurationStorage((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v46, v5);
  }
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (UICellConfigurationState?, UICellConfigurationState?));
  uint64_t v31 = v43;
  uint64_t v30 = v44;
LABEL_8:
  __int16 v47 = 2;
  uint64_t v48 = v42;
  uint64_t v49 = v30;
  uint64_t v50 = v41;
  uint64_t v51 = v31;
  type metadata accessor for UIHostingContentView();
  swift_getWitnessTable();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  uint64_t v36 = *(void **)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x678));
  if (v36)
  {
    LOWORD(v48) = 2;
    type metadata accessor for _UIHostingView();
    id v37 = v36;
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  return UIHostingContentView.updateHostedViews()();
}

uint64_t outlined init with copy of UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for Binding<SearchFieldState>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for UICellConfigurationState?(uint64_t a1)
{
}

uint64_t outlined destroy of UIHostingConfigurationStorage(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for HostingContentViewRootModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for HostingContentViewRootModifier);
}

uint64_t initializeWithCopy for HostingContentViewRootModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = a2 + 72;
  uint64_t v8 = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v8 == 1)
  {
    *(void *)(a1 + 72) = *(void *)v9;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(v9 + 8);
  }
  else
  {
    *(void *)(a1 + 72) = v8;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    swift_retain();
  }
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  char v10 = *(unsigned char *)(a2 + 177);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (const void *)(a2 + v11);
  uint64_t v13 = (void *)(a1 + v11);
  *(unsigned char *)(a1 + 177) = v10;
  uint64_t v14 = type metadata accessor for UICellConfigurationState();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14))
  {
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v13, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v13, v12, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  }
  return a1;
}

uint64_t destroy for HostingContentViewRootModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 72) != 1) {
    swift_release();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UICellConfigurationState();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void type metadata accessor for WeakBox<UIButton>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for WeakBox<UIButton>?(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>(uint64_t a1)
{
}

uint64_t specialized static ContentConfigurationBasedRootEnvironment.makeEnvironment(modifier:environment:)()
{
  uint64_t v0 = type metadata accessor for ContentConfigurationBasedRootEnvironment();
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of UICellConfigurationState?(Value, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for ContentConfigurationBasedRootEnvironment);
  if (v2[81] == 1)
  {
    uint64_t v4 = *((void *)v2 + 4);
    char v5 = v2[56];
    uint64_t v6 = *((void *)v2 + 8);
    uint64_t v7 = *((void *)v2 + 9);
    char v8 = v2[80];
    long long v9 = *((_OWORD *)v2 + 1);
    v11[0] = *(_OWORD *)v2;
    v11[1] = v9;
    uint64_t v12 = v4;
    long long v13 = *(_OWORD *)(v2 + 40);
    char v14 = v5;
    uint64_t v15 = v6;
    uint64_t v16 = v7;
    char v17 = v8;
    EnvironmentValues.configureListStyling(_:state:)((uint64_t)v11, (void (*)(char *, uint64_t))&v2[*(int *)(v0 + 24)]);
  }
  return _s5UIKit24UICellConfigurationStateVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for ContentConfigurationBasedRootEnvironment);
}

uint64_t outlined init with copy of UICellConfigurationState?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = a2 + 72;
  uint64_t v8 = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v8 == 1)
  {
    *(void *)(a1 + 72) = *(void *)v9;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(v9 + 8);
  }
  else
  {
    *(void *)(a1 + 72) = v8;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    swift_retain();
  }
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = type metadata accessor for UICellConfigurationState();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  return a1;
}

uint64_t outlined destroy of UICellConfigurationState?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for UICellConfigurationState?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s5UIKit24UICellConfigurationStateVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ContentConfigurationBasedRootEnvironment()
{
  uint64_t result = type metadata singleton initialization cache for ContentConfigurationBasedRootEnvironment;
  if (!type metadata singleton initialization cache for ContentConfigurationBasedRootEnvironment) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t destroy for ContentConfigurationBasedRootEnvironment(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 72) != 1) {
    swift_release();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UICellConfigurationState();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void specialized ListCollectionViewCellBase.configureContent(_:transaction:)(uint64_t a1, unint64_t a2)
{
  uint64_t v42 = a1;
  uint64_t v4 = (int *)type metadata accessor for UIHostingConfigurationStorage(0);
  MEMORY[0x1F4188790](v4);
  long long v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v41 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v41 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v41 - v18;
  if (one-time initialization token for isEnabledInProcessEnv != -1) {
    swift_once();
  }
  if (static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv == 1)
  {
    uint64_t v20 = &v10[*(int *)(v8 + 56)];
    *long long v6 = 1;
    OptionalEdgeInsets.init()();
    *((void *)v6 + 9) = 0;
    v6[80] = 1;
    *((void *)v6 + 11) = 0;
    v6[96] = 1;
    *(_WORD *)(v6 + 97) = 1;
    uint64_t v21 = v4[9];
    v41[1] = v2;
    uint64_t v22 = &v6[v21];
    uint64_t v23 = type metadata accessor for UICellConfigurationState();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
    v6[v4[10]] = 0;
    *(void *)&v6[v4[11] + 8] = 0;
    swift_unknownObjectWeakInit();
    outlined init with take of UIHostingConfigurationStorage((uint64_t)v6, (uint64_t)v20, type metadata accessor for UIHostingConfigurationStorage);
    outlined init with copy of TableRowList?(v42, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    *uint64_t v20 = 0;
    static Edge.Set.all.getter();
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    uint64_t v24 = &v13[*(int *)(v8 + 56)];
    char v25 = v24[16];
    uint64_t v26 = *((void *)v24 + 3);
    char v27 = v24[32];
    uint64_t v28 = *((void *)v24 + 5);
    char v29 = v24[48];
    uint64_t v30 = *((void *)v24 + 7);
    char v31 = v24[64];
    uint64_t v59 = *((void *)v24 + 1);
    char v60 = v25;
    uint64_t v61 = v26;
    char v62 = v27;
    uint64_t v63 = v28;
    char v64 = v29;
    uint64_t v65 = v30;
    char v66 = v31;
    OptionalEdgeInsets.init(_:edges:)();
    uint64_t v43 = v51;
    char v44 = v52;
    uint64_t v45 = v53;
    char v46 = v54;
    uint64_t v47 = v55;
    char v48 = v56;
    uint64_t v49 = v57;
    char v50 = v58;
    OptionalEdgeInsets.adding(_:)();
    char v32 = v68;
    uint64_t v33 = v69;
    char v34 = v70;
    uint64_t v35 = v71;
    char v36 = v72;
    uint64_t v37 = v73;
    char v38 = v74;
    *((void *)v24 + 1) = v67;
    v24[16] = v32;
    *((void *)v24 + 3) = v33;
    v24[32] = v34;
    *((void *)v24 + 5) = v35;
    v24[48] = v36;
    *((void *)v24 + 7) = v37;
    v24[64] = v38;
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    v16[*(int *)(v8 + 56) + 97] = 0;
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    *(void *)&v19[*(int *)(v8 + 56) + 8 + (uint64_t)v4[11]] = &protocol witness table for ListCollectionViewCellBase<A>;
    swift_unknownObjectWeakAssign();
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    uint64_t v70 = v8;
    uint64_t v71 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView> and conformance UIHostingConfiguration<A, B>, (void (*)(uint64_t))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    uint64_t v39 = __swift_allocate_boxed_opaque_existential_1(&v67);
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v19, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    *((unsigned char *)v39 + *(int *)(v8 + 56) + v4[10]) = 1;
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    MEMORY[0x18C116970](&v67);
  }
  else
  {
    uint64_t v40 = v42;
    specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)(v40, a2);
  }
}

{
  uint64_t v2;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  void v41[2];
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t vars8;

  uint64_t v42 = a1;
  uint64_t v4 = (int *)type metadata accessor for UIHostingConfigurationStorage(0);
  MEMORY[0x1F4188790](v4);
  long long v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v41 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v41 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v41 - v18;
  if (one-time initialization token for isEnabledInProcessEnv != -1) {
    swift_once();
  }
  if (static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv == 1)
  {
    uint64_t v20 = &v10[*(int *)(v8 + 56)];
    *long long v6 = 1;
    OptionalEdgeInsets.init()();
    *((void *)v6 + 9) = 0;
    v6[80] = 1;
    *((void *)v6 + 11) = 0;
    v6[96] = 1;
    *(_WORD *)(v6 + 97) = 1;
    uint64_t v21 = v4[9];
    v41[1] = v2;
    uint64_t v22 = &v6[v21];
    uint64_t v23 = type metadata accessor for UICellConfigurationState();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
    v6[v4[10]] = 0;
    *(void *)&v6[v4[11] + 8] = 0;
    swift_unknownObjectWeakInit();
    outlined init with take of UIHostingConfigurationStorage((uint64_t)v6, (uint64_t)v20, type metadata accessor for UIHostingConfigurationStorage);
    outlined init with copy of TableRowList?(v42, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    *uint64_t v20 = 0;
    static Edge.Set.all.getter();
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    uint64_t v24 = &v13[*(int *)(v8 + 56)];
    char v25 = v24[16];
    uint64_t v26 = *((void *)v24 + 3);
    char v27 = v24[32];
    uint64_t v28 = *((void *)v24 + 5);
    char v29 = v24[48];
    uint64_t v30 = *((void *)v24 + 7);
    char v31 = v24[64];
    uint64_t v59 = *((void *)v24 + 1);
    char v60 = v25;
    uint64_t v61 = v26;
    char v62 = v27;
    uint64_t v63 = v28;
    char v64 = v29;
    uint64_t v65 = v30;
    char v66 = v31;
    OptionalEdgeInsets.init(_:edges:)();
    uint64_t v43 = v51;
    char v44 = v52;
    uint64_t v45 = v53;
    char v46 = v54;
    uint64_t v47 = v55;
    char v48 = v56;
    uint64_t v49 = v57;
    char v50 = v58;
    OptionalEdgeInsets.adding(_:)();
    char v32 = v68;
    uint64_t v33 = v69;
    char v34 = v70;
    uint64_t v35 = v71;
    char v36 = v72;
    uint64_t v37 = v73;
    char v38 = v74;
    *((void *)v24 + 1) = v67;
    v24[16] = v32;
    *((void *)v24 + 3) = v33;
    v24[32] = v34;
    *((void *)v24 + 5) = v35;
    v24[48] = v36;
    *((void *)v24 + 7) = v37;
    v24[64] = v38;
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v13, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    v16[*(int *)(v8 + 56) + 97] = 0;
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v16, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    *(void *)&v19[*(int *)(v8 + 56) + 8 + (uint64_t)v4[11]] = &protocol witness table for ListCollectionViewCellBase<A>;
    swift_unknownObjectWeakAssign();
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    uint64_t v70 = v8;
    uint64_t v71 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView> and conformance UIHostingConfiguration<A, B>, (void (*)(uint64_t))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    uint64_t v39 = __swift_allocate_boxed_opaque_existential_1(&v67);
    outlined init with copy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v19, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    *((unsigned char *)v39 + *(int *)(v8 + 56) + v4[10]) = 1;
    outlined destroy of ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<ModifiedContent<TableRowView, CollectionViewCellModifier>, EmptyView>);
    MEMORY[0x18C116970](&v67);
  }
  else
  {
    uint64_t v40 = v42;
    specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)(v40, a2);
  }
}

uint64_t type metadata accessor for UIHostingConfigurationStorage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIHostingConfigurationStorage);
}

void type metadata accessor for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>()
{
  if (!lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, (uint64_t)&type metadata for CollectionViewCellModifier, (void (*)(void))lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier);
    unint64_t v0 = type metadata accessor for UIHostingConfiguration();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingConfiguration<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EmptyView>);
    }
  }
}

uint64_t initializeWithCopy for UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 81);
  *(_WORD *)(a1 + 97) = *(_WORD *)(a2 + 97);
  uint64_t v7 = a3[9];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 81) = v6;
  uint64_t v10 = type metadata accessor for UICellConfigurationState();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(swift_unknownObjectWeakCopyInit() + 8) = *(void *)(a2 + v13 + 8);
  return a1;
}

uint64_t destroy for UIHostingConfigurationStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for UICellConfigurationState();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }

  return swift_unknownObjectWeakDestroy();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>(255);
    type metadata accessor for ContentConfigurationBasedRootEnvironment();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>);
    }
  }
}

uint64_t protocol witness for ViewGraphFeature.update(graph:) in conformance PlatformItemListViewGraph(uint64_t result)
{
  if (*(unsigned char *)(v1 + 9) == 1)
  {
    uint64_t v2 = result;
    uint64_t result = swift_beginAccess();
    if ((*(unsigned char *)(v2 + 361) & 2) != 0)
    {
      PlatformItemListViewGraph.readAndUpdate(graph:)(v2);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t PlatformItemListViewGraph.readAndUpdate(graph:)(uint64_t a1)
{
  uint64_t v2 = v1;
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue) {
    return MEMORY[0x1E4FBC860];
  }
  char v6 = v5;
  uint64_t v7 = *WeakValue;
  *(unsigned char *)(v2 + 8) = 1;
  swift_beginAccess();
  if (*(unsigned char *)(a1 + 41))
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    if (*(unsigned char *)(v2 + 9)) {
      goto LABEL_8;
    }
LABEL_7:
    if ((v6 & 1) == 0) {
      return v7;
    }
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  if ((*(unsigned char *)(v2 + 9) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  *(_WORD *)(v2 + 8) = 0;
  swift_beginAccess();
  if (MEMORY[0x18C119DF0](a1 + 200))
  {
    uint64_t v8 = *(void *)(a1 + 208);
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v10 = type metadata accessor for PlatformItemListHost();
    (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v8 + 16))(v15, v10, v10, ObjectType, v8);
    swift_unknownObjectRelease();
    if (v15[0])
    {
      uint64_t v11 = v15[1];
      uint64_t v12 = swift_getObjectType();
      double v13 = MEMORY[0x1F4188790](v12);
      (*(void (**)(uint64_t (*)(), double))(v11 + 8))(partial apply for closure #1 in PlatformItemListViewGraph.readAndUpdate(graph:), v13);
      swift_unknownObjectRelease();
    }
  }
  return v7;
}

unint64_t type metadata accessor for PlatformItemListHost()
{
  unint64_t result = lazy cache variable for type metadata for PlatformItemListHost;
  if (!lazy cache variable for type metadata for PlatformItemListHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListHost);
  }
  return result;
}

uint64_t _UIHostingView.platformItemListDidChange(list:)(uint64_t (*a1)(void))
{
  uint64_t v3 = (void *)(*MEMORY[0x1E4FBC8C8] & *v1);
  uint64_t v4 = (char *)v1 + v3[51];
  uint64_t result = MEMORY[0x18C119DF0](v4);
  if (result)
  {
    uint64_t v6 = *((void *)v4 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = a1();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v6 + 40))(v1, v8, v3[10], v3[11], ObjectType, v6);
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

void specialized ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v64 = *MEMORY[0x1E4FBC8C8] & *(void *)v3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v72 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v70 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for DispatchQoS();
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  char v68 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PlatformItemList.Item();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  PlatformItemList.containerSelectionBehavior.getter(a1, (uint64_t)&aBlock);
  char v13 = v77;
  uint64_t v14 = &v3[direct field offset for ListCollectionViewCellBase.selectionBehavior];
  uint64_t v15 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior];
  uint64_t v16 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 8];
  uint64_t v17 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 16];
  uint64_t v18 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 24];
  uint64_t v19 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 32];
  uint64_t v20 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 40];
  uint64_t v21 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 48];
  uint64_t v22 = *(void *)&v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 56];
  char v23 = v3[direct field offset for ListCollectionViewCellBase.selectionBehavior + 64];
  long long v24 = v74;
  *(_OWORD *)uint64_t v14 = aBlock;
  *((_OWORD *)v14 + 1) = v24;
  long long v25 = v76;
  *((_OWORD *)v14 + 2) = v75;
  *((_OWORD *)v14 + 3) = v25;
  v14[64] = v13;
  LOBYTE(v57) = v23;
  outlined copy of PlatformItemList.Item.SelectionBehavior?(v15, v16, v17, v18, v19, v20, v21, v22, v57, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  uint64_t v26 = *(void *)(a1 + 16);
  if (v26)
  {
    uint64_t v65 = v6;
    uint64_t v27 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v28 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain();
    do
    {
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_1(v27, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v29 = v12[69];
      uint64_t v30 = v12[70];
      uint64_t v31 = v12[71];
      outlined copy of PlatformItemList.Item.SecondaryNavigationBehavior?(v29, v30);
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_1((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (v29 != 1)
      {
        if (v29) {
          goto LABEL_9;
        }
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v30);
      }
      v27 += v28;
      --v26;
    }
    while (v26);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = 1;
LABEL_9:
    uint64_t v6 = v65;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = 1;
  }
  char v32 = (uint64_t *)&v4[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior];
  uint64_t v33 = *(void *)&v4[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior];
  uint64_t v34 = *(void *)&v4[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8];
  uint64_t *v32 = v29;
  v32[1] = v30;
  v32[2] = v31;
  outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(v33, v34);
  uint64_t v35 = *((void *)v14 + 1);
  if (v35 != 1)
  {
    uint64_t v36 = *(void *)v14;
    uint64_t v37 = *((void *)v14 + 2);
    uint64_t v38 = *((void *)v14 + 3);
    uint64_t v39 = *((void *)v14 + 4);
    uint64_t v40 = *((void *)v14 + 5);
    uint64_t v41 = *((void *)v14 + 6);
    uint64_t v61 = *((void *)v14 + 7);
    int v42 = v14[64];
    uint64_t v43 = v36 & 0xFF00000000;
    uint64_t v63 = v37;
    outlined copy of AppIntentExecutor?(v35);
    uint64_t v65 = v38;
    outlined copy of AppIntentExecutor?(v38);
    outlined copy of AppIntentExecutor?(v40);
    objc_msgSend(v4, sel_alpha);
    uint64_t v62 = v36;
    if (v44 == 0.0)
    {
      LODWORD(v64) = v42;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      uint64_t v45 = static OS_dispatch_queue.main.getter();
      uint64_t v60 = v41;
      char v46 = (void *)v45;
      uint64_t v47 = swift_allocObject();
      uint64_t v48 = v67;
      *(void *)(v47 + 16) = v66;
      *(void *)(v47 + 24) = v48;
      *(void *)(v47 + 32) = v4;
      *(unsigned char *)(v47 + 40) = v43 == 0x200000000;
      *(void *)&long long v75 = partial apply for closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:);
      *((void *)&v75 + 1) = v47;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v74 = thunk for @escaping @callee_guaranteed () -> ();
      *((void *)&v74 + 1) = &block_descriptor_45;
      uint64_t v49 = _Block_copy(&aBlock);
      char v50 = v4;
      swift_release();
      uint64_t v51 = v68;
      static DispatchQoS.unspecified.getter();
      *(void *)&long long aBlock = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      type metadata accessor for [DispatchWorkItemFlags]();
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
      char v52 = v70;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x18C116870](0, v51, v52, v49);
      _Block_release(v49);

      LOBYTE(v58) = v64;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v62, v35, v63, v65, v39, v40, v60, v61, v58, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v52, v6);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v71);
    }
    else
    {
      char v53 = v42;
      char v54 = &v4[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate];
      if (MEMORY[0x18C119DF0](&v4[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate]))
      {
        uint64_t v55 = *((void *)v54 + 1);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(char *, BOOL, void, void, uint64_t, uint64_t))(v55 + 8))(v4, v43 == 0x200000000, *(void *)(v64 + 168), *(void *)(v64 + 176), ObjectType, v55);
        swift_unknownObjectRelease();
      }
      LOBYTE(v58) = v53;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v62, v35, v63, v65, v39, v40, v41, v61, v58, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    }
  }
}

void specialized ListCollectionViewCellBase.hostingView<A>(_:willUpdate:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v60 = a1;
  type metadata accessor for UICellConfigurationState?(0);
  MEMORY[0x1F4188790](v3 - 8);
  char v5 = (void (*)(char *, uint64_t))((char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for UICellConfigurationState();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIListContentConfiguration?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UIListContentConfiguration();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v53 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v62 = (char *)&v53 - v20;
  if (one-time initialization token for isEnabledInProcessEnv != -1)
  {
    uint64_t v59 = v19;
    swift_once();
    uint64_t v19 = v59;
  }
  if ((static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv & 1) == 0)
  {
    uint64_t v59 = v19;
    uint64_t v61 = v14;
    uint64_t v21 = &v2[direct field offset for ListCollectionViewCellBase.lastConfiguration];
    swift_beginAccess();
    uint64_t v22 = (uint64_t)v21;
    uint64_t v23 = v61;
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_1(v22, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for UIListContentConfiguration?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1, v13) == 1)
    {
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_1((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for UIListContentConfiguration?);
    }
    else
    {
      uint64_t v57 = v7;
      uint64_t v58 = v6;
      long long v24 = *(void (**)(char *, char *))(v23 + 32);
      uint64_t v25 = v13;
      uint64_t v26 = v62;
      uint64_t v56 = v25;
      v24(v62, v12);
      id v27 = objc_msgSend(v2, sel__bridgedConfigurationState);
      static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)();

      UIListContentConfiguration.directionalLayoutMargins.getter();
      double v29 = v28;
      double v31 = v30;
      id v32 = objc_msgSend(v2, sel_contentView);
      objc_msgSend(v32, sel_directionalLayoutMargins);
      double v34 = v33;
      double v36 = v35;

      if (v34 > v29) {
        double v37 = v34;
      }
      else {
        double v37 = v29;
      }
      if (v36 > v31) {
        double v38 = v36;
      }
      else {
        double v38 = v31;
      }
      if (v29 != v37 || v31 != v38) {
        UIListContentConfiguration.directionalLayoutMargins.setter();
      }
      uint64_t v55 = *(char **)(v23 + 16);
      uint64_t v40 = v56;
      ((void (*)(char *, char *, uint64_t))v55)(v17, v26, v56);
      uint64_t v41 = (void *)UICellConfigurationState.traitCollection.getter();
      memset(v79, 0, sizeof(v79));
      char v80 = 1;
      ListContentStyling.init(configuration:traitCollection:insets:minHeight:)(v17, v41, (uint64_t)v79, 0, 1, &v71);
      long long v63 = v71;
      long long v64 = v72;
      uint64_t v65 = v73;
      long long v66 = v74;
      char v67 = v75;
      uint64_t v68 = v76;
      uint64_t v69 = v77;
      unsigned __int8 v70 = v78;
      uint64_t v43 = v57;
      uint64_t v42 = v58;
      (*(void (**)(void (*)(char *, uint64_t), char *, uint64_t))(v57 + 16))(v5, v9, v58);
      (*(void (**)(void (*)(char *, uint64_t), void, uint64_t, uint64_t))(v43 + 56))(v5, 0, 1, v42);
      uint64_t v44 = v60;
      EnvironmentValues.configureListStyling(_:state:)((uint64_t)&v63, v5);
      _s7SwiftUI16PlatformItemListV0D0VWOhTm_1((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
      uint64_t v45 = v69;
      swift_release();
      swift_release();
      outlined consume of Transaction?(v45);
      uint64_t v46 = v59;
      ListCollectionViewCellBase.prominentConfigForContent(state:contentViewMargins:)((uint64_t)v9, v47, v34, v48, v36);
      ((void (*)(char *, uint64_t, uint64_t))v55)(v17, v46, v40);
      uint64_t v55 = v9;
      uint64_t v49 = (void *)UICellConfigurationState.traitCollection.getter();
      ListContentStyling.init(configuration:traitCollection:insets:minHeight:)(v17, v49, (uint64_t)v79, 0, 1, &v71);
      uint64_t v50 = v77;
      LODWORD(v46) = v78;
      long long v63 = v71;
      long long v64 = v72;
      uint64_t v65 = v73;
      long long v66 = v74;
      char v67 = v75;
      uint64_t v68 = v76;
      uint64_t v69 = v77;
      unsigned __int8 v70 = v78;
      _s7SwiftUI22EnvironmentPropertyKeyVyAA024TableHeaderLeadingMarginE0VGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>, (uint64_t)&type metadata for ProminentHeaderStylingKey, (uint64_t)&protocol witness table for ProminentHeaderStylingKey, MEMORY[0x1E4F40930]);
      swift_retain();
      swift_retain();
      uint64_t v53 = v50;
      int v54 = v46;
      outlined copy of Transaction?(v50);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (*(void *)(v44 + 8))
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Transaction?(v53);
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
      uint64_t v52 = v56;
      v51(v59, v56);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v55, v58);
      v51((uint64_t)v62, v52);
    }
  }
}

uint64_t destroy for ListContentStyling(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t result = *(void *)(a1 + 72);
  if (result != 1)
  {
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of PlatformItemList.Item(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOhTm_3(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of PlatformItemList.Item(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOcTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOcTm_3(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16PlatformItemListV0D0VWOcTm_4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for UIListContentConfiguration?(uint64_t a1)
{
}

uint64_t EnvironmentValues.configureListStyling(_:state:)(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v3 = v2;
  type metadata accessor for UICellConfigurationState?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for UICellConfigurationState();
  uint64_t v9 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v40 = (char *)&v39 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v45 = (char *)&v39 - v15;
  uint64_t v16 = *(void *)a1;
  uint64_t v17 = *(void *)(a1 + 8);
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v20 = *(void *)(a1 + 48);
  int v42 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 72);
  char v23 = *(unsigned char *)(a1 + 80);
  swift_retain();
  EnvironmentValues.defaultFont.setter();
  uint64_t v43 = a2;
  uint64_t v44 = v9;
  uint64_t v41 = v11;
  if (v20)
  {
    uint64_t v48 = v20;
    uint64_t v24 = v3[1];
    uint64_t v49 = *v3;
    uint64_t v50 = v24;
    char v47 = 0;
    swift_retain();
    swift_retain();
    ShapeStyle.copyStyle(name:in:foregroundStyle:)();
    swift_release();
    swift_release();
  }
  EnvironmentValues.defaultForegroundStyle.setter();
  uint64_t v49 = v21;
  LOBYTE(v50) = 0;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelIconToTitleSpacingKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v25 = v3[1];
  if (v25)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v49 = v16;
  uint64_t v50 = v17;
  uint64_t v51 = v18;
  uint64_t v52 = v19;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowInsetsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v25)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v49 = v22;
  LOBYTE(v50) = v23;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  outlined copy of Transaction?(v22);
  outlined copy of Transaction?(v22);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v25)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of Transaction?(v22);
  if (v42)
  {
    LOBYTE(v49) = 0;
    EnvironmentValues.textCase.setter();
  }
  outlined init with copy of UICellConfigurationState?((uint64_t)v43, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  uint64_t v26 = v44;
  uint64_t v27 = v46;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v44 + 48))(v8, 1, v46);
  double v29 = v45;
  if (v28 == 1) {
    return _s5UIKit24UICellConfigurationStateVSgWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for UICellConfigurationState?);
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v45, v8, v27);
  char v31 = UICellConfigurationState.isSelected.getter();
  id v32 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  double v33 = v40;
  v32(v40, v29, v27);
  if ((v31 & 1) == 0)
  {
    uint64_t v43 = *(void (**)(char *, uint64_t))(v26 + 8);
    v43(v33, v27);
    goto LABEL_17;
  }
  char v34 = UICellConfigurationState.isFocused.getter();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v26 + 8);
  v43(v33, v27);
  if ((v34 & 1) == 0)
  {
LABEL_17:
    static BackgroundProminence.standard.getter();
    goto LABEL_18;
  }
  static BackgroundProminence.increased.getter();
LABEL_18:
  EnvironmentValues.backgroundProminence.setter();
  double v35 = v41;
  v32(v41, v29, v27);
  char v36 = UICellConfigurationState.isEditing.getter();
  char v37 = UICellConfigurationState.isSelected.getter();
  char v38 = UICellConfigurationState.isPinned.getter();
  v43(v35, v27);
  LOBYTE(v49) = v36 & 1;
  BYTE1(v49) = v37 & 1;
  BYTE2(v49) = v38 & 1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UIKitCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v43)(v29, v27);
}

void type metadata accessor for EnvironmentPropertyKey<TableHeaderLeadingMarginKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI22EnvironmentPropertyKeyVyAA024TableHeaderLeadingMarginE0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void ListCollectionViewCellBase.prominentConfigForContent(state:contentViewMargins:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v8 = type metadata accessor for UIListContentConfiguration.TextProperties();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v30[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v30[-1] - v13;
  uint64_t v15 = type metadata accessor for UIListContentConfiguration();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v30[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.prominentInsetGroupedHeader()();
  uint64_t v19 = type metadata accessor for UICellConfigurationState();
  v30[3] = v19;
  v30[4] = MEMORY[0x1E4FB0EF8];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(boxed_opaque_existential_1, a1, v19);
  UIListContentConfiguration.updated(for:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  UIListContentConfiguration.directionalLayoutMargins.getter();
  double v23 = v21;
  double v24 = v22;
  if (v21 < a3) {
    double v21 = a3;
  }
  if (v22 < a5) {
    double v22 = a5;
  }
  if (v23 != v21 || v24 != v22) {
    UIListContentConfiguration.directionalLayoutMargins.setter();
  }
  UIListContentConfiguration.textProperties.getter();
  id v25 = (id)UIListContentConfiguration.TextProperties.font.getter();
  uint64_t v26 = (void *)UICellConfigurationState.traitCollection.getter();
  id v27 = objc_msgSend(v25, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v26);

  if (v27)
  {
    if (v25 != v27)
    {
      id v28 = v27;
      UIListContentConfiguration.TextProperties.font.setter();
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
      UIListContentConfiguration.textProperties.setter();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      return;
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

double key path getter for EnvironmentValues.prominentHeaderStyling : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ProminentHeaderStylingKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>, (uint64_t)&type metadata for ProminentHeaderStylingKey, (uint64_t)&protocol witness table for ProminentHeaderStylingKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ProminentHeaderStylingKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>, (uint64_t)&type metadata for ProminentHeaderStylingKey, (uint64_t)&protocol witness table for ProminentHeaderStylingKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = v6;
  double result = *(double *)&v7;
  *(_OWORD *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 56) = v8;
  *(void *)(a2 + 64) = v9;
  *(void *)(a2 + 72) = v10;
  *(unsigned char *)(a2 + 80) = v11;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ProminentHeaderStylingKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>, (uint64_t)&type metadata for ProminentHeaderStylingKey, (uint64_t)&protocol witness table for ProminentHeaderStylingKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ProminentHeaderStylingKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_release();
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
  }
  return result;
}

uint64_t partial apply for closure #1 in PlatformItemListViewGraph.readAndUpdate(graph:)()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 8) = 1;
  return swift_bridgeObjectRetain();
}

void protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePlatformItemList:) in conformance ListCollectionViewCellBase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t outlined copy of PlatformItemList.Item.SecondaryNavigationBehavior?(uint64_t result, uint64_t a2)
{
  if (result != 1)
  {
    swift_retain();
    return outlined copy of AppIntentExecutor?(a2);
  }
  return result;
}

uint64_t UIHostingContentView.updateHostedViews()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v0;
  type metadata accessor for HostingContentViewRootModifier(255);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = *(void *)(v2 + 1632);
  uint64_t v8 = *((unsigned __int8 *)v0 + v7);
  *((unsigned char *)v0 + v7) = *(void *)((char *)v0 + *(void *)(v2 + 1664)) != 0;
  UIHostingContentView.isInList.didset(v8);
  UIHostingContentView.makeRootView()((uint64_t)v6);
  specialized _UIHostingView.rootView.setter((uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v10 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x670));
  char v11 = (void (*)(uint64_t))*v10;
  if (*v10)
  {
    uint64_t v12 = v10[1];
    outlined copy of AppIntentExecutor?(*v10);
    UIHostingContentView.updateBackgroundHostIfNeeded(_:)(v11, v12);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v11);
  }
  return result;
}

uint64_t specialized _UIHostingView.rootView.setter(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = (char *)v6 - v2;
  (*(void (**)(char *, double))(v4 + 16))((char *)v6 - v2, v1);
  CoreCoordinator.dataSource.setter((uint64_t)v3);
  v6[7] = 1;
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t CoreCoordinator.dataSource.setter(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

uint64_t UIHostingContentView.isInList.didset(uint64_t result)
{
  if (*((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x660)) != (result & 1))
  {
    uint64_t v2 = specialized _UIHostingView.viewGraph.getter();
    uint64_t result = swift_beginAccess();
    if (*(unsigned char *)(v2 + 128) == 1)
    {
      MEMORY[0x1F4188790](result);
      return static Update.ensure<A>(_:)();
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (UICellConfigurationState?, UICellConfigurationState?)()
{
  if (!lazy cache variable for type metadata for (UICellConfigurationState?, UICellConfigurationState?))
  {
    type metadata accessor for UICellConfigurationState?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UICellConfigurationState?, UICellConfigurationState?));
    }
  }
}

void type metadata accessor for PreferenceValues.Value<WeakBox<UIButton>?>(uint64_t a1)
{
}

uint64_t initializeWithCopy for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (_OWORD *)(a2 + 16);
  int v8 = *(unsigned __int8 *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    long long v9 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 40) = v9;
    (**(void (***)(uint64_t, _OWORD *))(v9 - 8))(a1 + 16, v7);
    *(unsigned char *)(a1 + 56) = 1;
  }
  else
  {
    long long v10 = v7[1];
    *(_OWORD *)(a1 + 16) = *v7;
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)v7 + 25);
  }
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (void **)(a2 + v12);
  uint64_t v15 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (!v17(v14, 1, v15))
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v37 = *(_OWORD *)(v14 + 3);
      *(_OWORD *)(v13 + 24) = v37;
      (**(void (***)(void *, const void *))(v37 - 8))(v13, v14);
      *((void *)v13 + 5) = v14[5];
      *((void *)v13 + 6) = v14[6];
      *((void *)v13 + 7) = v14[7];
      *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
      char v38 = v14[10];
      *((void *)v13 + 10) = v38;
      swift_retain();
      swift_bridgeObjectRetain();
      id v39 = v38;
LABEL_52:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      return a1;
    }
    uint64_t v106 = v16;
    uint64_t v19 = *v14;
    uint64_t v20 = v14[1];
    *(void *)uint64_t v13 = *v14;
    *((void *)v13 + 1) = v20;
    double v21 = v14[3];
    *((void *)v13 + 2) = v14[2];
    *((void *)v13 + 3) = v21;
    v13[32] = *((unsigned char *)v14 + 32);
    double v22 = v14[6];
    *((void *)v13 + 5) = v14[5];
    *((void *)v13 + 6) = v22;
    v13[56] = *((unsigned char *)v14 + 56);
    double v23 = v13 + 64;
    double v24 = v14 + 8;
    unint64_t v25 = (unint64_t)v14[23];
    id v26 = v19;
    id v27 = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v25 >> 1 == 4294967294)
    {
      long long v28 = *((_OWORD *)v14 + 13);
      *((_OWORD *)v13 + 12) = *((_OWORD *)v14 + 12);
      *((_OWORD *)v13 + 13) = v28;
      *((_OWORD *)v13 + 14) = *((_OWORD *)v14 + 14);
      *(_DWORD *)(v13 + 239) = *(_DWORD *)((char *)v14 + 239);
      long long v29 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v29;
      long long v30 = *((_OWORD *)v14 + 11);
      *((_OWORD *)v13 + 10) = *((_OWORD *)v14 + 10);
      *((_OWORD *)v13 + 11) = v30;
      long long v31 = *((_OWORD *)v14 + 5);
      *double v23 = *v24;
      *((_OWORD *)v13 + 5) = v31;
      long long v32 = *((_OWORD *)v14 + 7);
      *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
      *((_OWORD *)v13 + 7) = v32;
      double v33 = v14[32];
      if (v33)
      {
LABEL_9:
        *((void *)v13 + 31) = v14[31];
        *((void *)v13 + 32) = v33;
        char v34 = v14[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v34 >= 2) {
          id v35 = v34;
        }
        *((void *)v13 + 33) = v34;
        *((_DWORD *)v13 + 68) = *((_DWORD *)v14 + 68);
        v13[276] = *((unsigned char *)v14 + 276);
        *(_WORD *)(v13 + 277) = *(_WORD *)((char *)v14 + 277);
        char v36 = v14[36];
        *((void *)v13 + 35) = v14[35];
        *((void *)v13 + 36) = v36;
        swift_retain();
        swift_retain();
LABEL_21:
        unint64_t v51 = (unint64_t)v14[41];
        if (v51 >> 2 == 0xFFFFFFFF)
        {
          long long v52 = *(_OWORD *)(v14 + 47);
          *(_OWORD *)(v13 + 360) = *(_OWORD *)(v14 + 45);
          *(_OWORD *)(v13 + 376) = v52;
          *((void *)v13 + 49) = v14[49];
          long long v53 = *(_OWORD *)(v14 + 39);
          *(_OWORD *)(v13 + 296) = *(_OWORD *)(v14 + 37);
          *(_OWORD *)(v13 + 312) = v53;
          long long v54 = *(_OWORD *)(v14 + 43);
          *(_OWORD *)(v13 + 328) = *(_OWORD *)(v14 + 41);
          *(_OWORD *)(v13 + 344) = v54;
        }
        else
        {
          uint64_t v55 = v14[37];
          uint64_t v56 = (uint64_t)v14[38];
          uint64_t v99 = (uint64_t)v14[40];
          uint64_t v100 = (uint64_t)v14[39];
          uint64_t v57 = (uint64_t)v14[42];
          uint64_t v58 = (uint64_t)v14[43];
          uint64_t v59 = v14[44];
          uint64_t v102 = (uint64_t)v14[45];
          uint64_t v104 = (uint64_t)v14[46];
          __dsta = v14[47];
          uint64_t v110 = v14[48];
          uint64_t v112 = (uint64_t)v14[49];
          outlined copy of PlatformItemList.Item.SystemItem(v55, v56, v100, v99, v51, v57, v58, (char)v59, v102, v104, (uint64_t)__dsta, (char)v110, v112);
          *((void *)v13 + 37) = v55;
          *((void *)v13 + 38) = v56;
          *((void *)v13 + 39) = v100;
          *((void *)v13 + 40) = v99;
          *((void *)v13 + 41) = v51;
          *((void *)v13 + 42) = v57;
          *((void *)v13 + 43) = v58;
          *((void *)v13 + 44) = v59;
          *((void *)v13 + 45) = v102;
          *((void *)v13 + 46) = v104;
          *((void *)v13 + 47) = __dsta;
          *((void *)v13 + 48) = v110;
          *((void *)v13 + 49) = v112;
        }
        uint64_t v60 = v14[51];
        if (v60 == (void *)1)
        {
          long long v61 = *((_OWORD *)v14 + 28);
          *((_OWORD *)v13 + 27) = *((_OWORD *)v14 + 27);
          *((_OWORD *)v13 + 28) = v61;
          v13[464] = *((unsigned char *)v14 + 464);
          long long v62 = *((_OWORD *)v14 + 26);
          *((_OWORD *)v13 + 25) = *((_OWORD *)v14 + 25);
          *((_OWORD *)v13 + 26) = v62;
LABEL_34:
          uint64_t v68 = v14[60];
          *((void *)v13 + 59) = v14[59];
          *((void *)v13 + 60) = v68;
          *((void *)v13 + 61) = v14[61];
          v13[496] = *((unsigned char *)v14 + 496);
          uint64_t v69 = v14[63];
          swift_bridgeObjectRetain();
          if (v69)
          {
            unsigned __int8 v70 = v14[64];
            *((void *)v13 + 63) = v69;
            *((void *)v13 + 64) = v70;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 63);
          }
          *((_WORD *)v13 + 260) = *((_WORD *)v14 + 260);
          long long v71 = v14[66];
          if (v71)
          {
            *((void *)v13 + 66) = v71;
            *((void *)v13 + 67) = v14[67];
            *((void *)v13 + 68) = v14[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v13 + 33) = *((_OWORD *)v14 + 33);
            *((void *)v13 + 68) = v14[68];
          }
          long long v72 = v14[69];
          uint64_t v107 = v15;
          if (v72 == (void *)1)
          {
            *(_OWORD *)(v13 + 552) = *(_OWORD *)(v14 + 69);
            *((void *)v13 + 71) = v14[71];
          }
          else
          {
            *((void *)v13 + 69) = v72;
            uint64_t v73 = v14[70];
            swift_retain();
            if (v73)
            {
              long long v74 = v14[71];
              *((void *)v13 + 70) = v73;
              *((void *)v13 + 71) = v74;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v13 + 35) = *((_OWORD *)v14 + 35);
            }
          }
          char v75 = v14[72];
          *((void *)v13 + 72) = v75;
          *((void *)v13 + 73) = v14[73];
          *((void *)v13 + 74) = v14[74];
          *((void *)v13 + 75) = v14[75];
          *((void *)v13 + 76) = v14[76];
          *((void *)v13 + 77) = v14[77];
          *((void *)v13 + 78) = v14[78];
          *((_WORD *)v13 + 316) = *((_WORD *)v14 + 316);
          v13[634] = *((unsigned char *)v14 + 634);
          uint64_t v105 = type metadata accessor for PlatformItemList.Item();
          uint64_t v76 = *(int *)(v105 + 112);
          __dst = &v13[v76];
          uint64_t v77 = (char *)v14 + v76;
          uint64_t v78 = type metadata accessor for CommandOperation();
          uint64_t v103 = *(void *)(v78 - 8);
          uint64_t v111 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v103 + 48);
          id v79 = v75;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v111(v77, 1, v78))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(__dst, v77, *(void *)(*(void *)(v80 - 8) + 64));
            uint64_t v16 = v106;
            uint64_t v15 = v107;
            v81 = (int *)v105;
          }
          else
          {
            char *__dst = *v77;
            uint64_t v82 = *(int *)(v78 + 20);
            char v83 = v77;
            uint64_t v101 = v77;
            uint64_t v84 = &__dst[v82];
            id v85 = &v83[v82];
            uint64_t v113 = v78;
            uint64_t v86 = *(void *)&v83[v82];
            uint64_t v87 = *(void *)&v83[v82 + 8];
            char v88 = v83[v82 + 16];
            outlined copy of Text.Storage(v86, v87, v88);
            *(void *)uint64_t v84 = v86;
            *((void *)v84 + 1) = v87;
            v84[16] = v88;
            *((void *)v84 + 3) = *((void *)v85 + 3);
            uint64_t v89 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            v90 = &v84[v89];
            uint64_t v91 = &v85[v89];
            uint64_t v92 = type metadata accessor for UUID();
            uint64_t v93 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v92 - 8) + 16);
            swift_bridgeObjectRetain();
            v93(v90, v91, v92);
            uint64_t v94 = *(int *)(v113 + 24);
            uint64_t v95 = &__dst[v94];
            v96 = &v101[v94];
            if (*v96)
            {
              uint64_t v97 = v96[1];
              *(void *)uint64_t v95 = *v96;
              *((void *)v95 + 1) = v97;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
            }
            uint64_t v16 = v106;
            uint64_t v15 = v107;
            v81 = (int *)v105;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56))(__dst, 0, 1, v113);
          }
          v13[v81[29]] = *((unsigned char *)v14 + v81[29]);
          v13[v81[30]] = *((unsigned char *)v14 + v81[30]);
          v13[v81[31]] = *((unsigned char *)v14 + v81[31]);
          v13[v81[32]] = *((unsigned char *)v14 + v81[32]);
          *(void *)&v13[v81[33]] = *(void **)((char *)v14 + v81[33]);
          swift_retain();
          goto LABEL_52;
        }
        *((_DWORD *)v13 + 100) = *((_DWORD *)v14 + 100);
        v13[404] = *((unsigned char *)v14 + 404);
        if (v60)
        {
          long long v63 = v14[52];
          *((void *)v13 + 51) = v60;
          *((void *)v13 + 52) = v63;
          swift_retain();
          long long v64 = v14[53];
          if (v64) {
            goto LABEL_28;
          }
        }
        else
        {
          *(_OWORD *)(v13 + 408) = *(_OWORD *)(v14 + 51);
          long long v64 = v14[53];
          if (v64)
          {
LABEL_28:
            uint64_t v65 = v14[54];
            *((void *)v13 + 53) = v64;
            *((void *)v13 + 54) = v65;
            swift_retain();
            long long v66 = v14[55];
            if (v66)
            {
LABEL_29:
              char v67 = v14[56];
              *((void *)v13 + 55) = v66;
              *((void *)v13 + 56) = v67;
              swift_retain();
LABEL_33:
              *((void *)v13 + 57) = v14[57];
              v13[464] = *((unsigned char *)v14 + 464);
              goto LABEL_34;
            }
LABEL_32:
            *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 55);
            goto LABEL_33;
          }
        }
        *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 53);
        long long v66 = v14[55];
        if (v66) {
          goto LABEL_29;
        }
        goto LABEL_32;
      }
    }
    else
    {
      int v40 = *((unsigned __int8 *)v14 + 72);
      if (v40 == 255)
      {
        *(void *)double v23 = *(void *)v24;
        v13[72] = *((unsigned char *)v14 + 72);
      }
      else
      {
        uint64_t v41 = v14[8];
        outlined copy of GraphicsImage.Contents(v41, *((unsigned char *)v14 + 72));
        *((void *)v13 + 8) = v41;
        v13[72] = v40;
        unint64_t v25 = (unint64_t)v14[23];
      }
      *((void *)v13 + 10) = v14[10];
      *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 11);
      v13[104] = *((unsigned char *)v14 + 104);
      *(_OWORD *)(v13 + 108) = *(_OWORD *)((char *)v14 + 108);
      v13[124] = *((unsigned char *)v14 + 124);
      long long v42 = *((_OWORD *)v14 + 9);
      *((_OWORD *)v13 + 8) = *((_OWORD *)v14 + 8);
      *((_OWORD *)v13 + 9) = v42;
      *((_WORD *)v13 + 80) = *((_WORD *)v14 + 80);
      v13[162] = *((unsigned char *)v14 + 162);
      v13[163] = *((unsigned char *)v14 + 163);
      if (v25 >> 1 == 0xFFFFFFFF)
      {
        long long v43 = *(_OWORD *)(v14 + 23);
        *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 21);
        *(_OWORD *)(v13 + 184) = v43;
      }
      else
      {
        uint64_t v44 = (uint64_t)v14[21];
        uint64_t v45 = (uint64_t)v14[22];
        uint64_t v46 = v14[24];
        outlined copy of AccessibilityImageLabel(v44, v45, v25);
        *((void *)v13 + 21) = v44;
        *((void *)v13 + 22) = v45;
        *((void *)v13 + 23) = v25;
        *((void *)v13 + 24) = v46;
      }
      char v47 = v14[26];
      *((void *)v13 + 25) = v14[25];
      *((void *)v13 + 26) = v47;
      *((_WORD *)v13 + 108) = *((_WORD *)v14 + 108);
      *((_DWORD *)v13 + 55) = *((_DWORD *)v14 + 55);
      v13[224] = *((unsigned char *)v14 + 224);
      uint64_t v48 = v14[29];
      *((void *)v13 + 29) = v48;
      *((_WORD *)v13 + 120) = *((_WORD *)v14 + 120);
      v13[242] = *((unsigned char *)v14 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v49 = v48;
      double v33 = v14[32];
      if (v33) {
        goto LABEL_9;
      }
    }
    long long v50 = *(_OWORD *)(v14 + 33);
    *(_OWORD *)(v13 + 248) = *(_OWORD *)(v14 + 31);
    *(_OWORD *)(v13 + 264) = v50;
    *(_OWORD *)(v13 + 280) = *(_OWORD *)(v14 + 35);
    goto LABEL_21;
  }
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
  memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  return a1;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePlatformItemList:) in conformance UIKitBarButtonItem(uint64_t a1, uint64_t a2)
{
  return specialized UIKitBarButtonItem.hostingView<A>(_:didChangePlatformItemList:)(a2);
}

uint64_t specialized UIKitBarButtonItem.hostingView<A>(_:didChangePlatformItemList:)(uint64_t a1)
{
  UIKitBarButtonItem.updatePlatformItem(_:)(a1);
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate;
  uint64_t result = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI18UIKitBarButtonItem_menuDelegate);
  if (result)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a1, ObjectType, v5);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t destroy for SearchAttributedString(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttributedString();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

void type metadata accessor for WeakBox<UIButton>()
{
  if (!lazy cache variable for type metadata for WeakBox<UIButton>)
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIButton);
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIButton>);
    }
  }
}

void type metadata accessor for TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>(uint64_t a1)
{
}

void type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?()
{
  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, &lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog)?);
    }
  }
}

void type metadata accessor for (offset: Int, element: WeakBox<ViewResponder>)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: WeakBox<ViewResponder>))
  {
    type metadata accessor for WeakBox<ViewResponder>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: WeakBox<ViewResponder>));
    }
  }
}

unsigned __int8 *getEnumTagSinglePayload for SearchFieldPlacement.Role(unsigned __int8 *result, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9)
  {
LABEL_18:
    unsigned int v6 = *result;
    if (v6 >= 2) {
      unsigned int v7 = v6 - 1;
    }
    else {
      unsigned int v7 = 0;
    }
    if (v7 >= 7) {
      return (unsigned __int8 *)(v7 - 6);
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = result[1];
        if (!result[1]) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 2:
        int v5 = *(unsigned __int16 *)(result + 1);
        if (!*(_WORD *)(result + 1)) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v5 = *(_DWORD *)(result + 1);
        if (!v5) {
          goto LABEL_18;
        }
LABEL_16:
        uint64_t result = (unsigned __int8 *)((*result | (v5 << 8)) - 7);
        break;
      default:
        goto LABEL_18;
    }
  }
  return result;
}

uint64_t SwiftUIGlueClass()
{
  return type metadata accessor for SwiftUIGlue(0);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SharingActivityPickerPresentation.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

Swift::Void __swiftcall _UIHostingView.beginTransaction()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = *(void *)(v1 + 80);
  v3[3] = *(void *)(v1 + 88);
  v3[4] = v2;
  swift_retain();
  onMainThread(do:)();
  swift_release();

  swift_release();
}

uint64_t partial apply for closure #1 in PlatformViewChild.destroy()()
{
  return (*(uint64_t (**)(void, void))(v0[3] + 64))(v0[4], v0[5]);
}

uint64_t protocol witness for static PlatformViewRepresentable.dismantleViewProvider(_:coordinator:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static PlatformViewRepresentableAdaptor.dismantleViewProvider(_:coordinator:)(*a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t static PlatformViewRepresentableAdaptor.dismantleViewProvider(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t destroy for NavigationLinkSelectionIdentifier(uint64_t a1)
{
  swift_release();
  uint64_t result = *(void *)(a1 + 16);
  if (result != 1)
  {
    return swift_release();
  }
  return result;
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

ValueMetadata *type metadata accessor for NavigationTransitionKey()
{
  return &type metadata for NavigationTransitionKey;
}

ValueMetadata *type metadata accessor for NavigationStackContext()
{
  return &type metadata for NavigationStackContext;
}

ValueMetadata *type metadata accessor for DefaultListButtonStyle()
{
  return &type metadata for DefaultListButtonStyle;
}

void partial apply for closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(unsigned char *a1@<X8>)
{
  closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(*(unsigned char *)(v1 + 32), a1);
}

ValueMetadata *type metadata accessor for ButtonRepeatTiming()
{
  return &type metadata for ButtonRepeatTiming;
}

double @objc PlatformViewHost.alignmentRectInsets.getter()
{
  return 0.0;
}

unsigned __int8 *assignWithCopy for LazyState.Storage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 1;
    }
    else
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 0;
      swift_retain();
    }
  }
  return a1;
}

uint64_t initializeWithCopy for AccessibilityViewGraph(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  swift_retain();
  if (v4)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t partial apply for closure #2 in GeometryActionBinder.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  return (*(uint64_t (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v2 + 32))(v0 + ((v3 + v4 + v6) & ~v6), v0 + ((*(void *)(v5 + 64) + v6 + ((v3 + v4 + v6) & ~v6)) & ~v6), v1, v2);
}

uint64_t protocol witness for GeometryActionProvider.action(oldValue:newValue:) in conformance _GeometryActionModifier<A>(uint64_t a1, uint64_t a2)
{
  return specialized _GeometryActionModifier.action(oldValue:newValue:)(a2, *(void *)v2, *(void *)(v2 + 8), *(uint64_t (**)(void))(v2 + 16));
}

uint64_t specialized _GeometryActionModifier.action(oldValue:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t partial apply for closure #2 in LazyPageTabModifier.body(content:)(uint64_t a1)
{
  return closure #2 in LazyPageTabModifier.body(content:)(a1, *(unsigned __int8 *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #2 in LazyPageTabModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvidesContextMenuInteraction()
{
  return &type metadata for ProvidesContextMenuInteraction;
}

uint64_t closure #1 in View.onTest(_:handler:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, (char *)v6);
    uint64_t v6 = result;
  }
  unint64_t v9 = *(void *)(v6 + 16);
  unint64_t v8 = *(void *)(v6 + 24);
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v6);
    uint64_t v6 = result;
  }
  *(void *)(v6 + 16) = v9 + 1;
  unint64_t v10 = v6 + 16 * v9;
  *(void *)(v10 + 32) = a2;
  *(void *)(v10 + 40) = a3;
  *a1 = v6;
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
}

uint64_t closure #1 in MakeSubviewTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 20);
  uint64_t v8 = *a2;
  int v9 = v3;
  uint64_t v10 = v4;
  long long v6 = *(_OWORD *)(a2 + 5);
  long long v11 = *(_OWORD *)(a2 + 3);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a2 + 7);
  uint64_t v14 = a2[9];
  int v15 = v5;
  return a3(&v8);
}

__n128 __swift_memcpy53_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t partial apply for implicit closure #1 in static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)()
{
  return implicit closure #1 in static ToolbarContent.makeToolbarOutputs(placement:entries:inputs:)();
}

uint64_t partial apply for closure #1 in BaseModifier.SelectionStateBox.update(state:listKey:presentedValue:tag:)()
{
  return closure #1 in BaseModifier.SelectionStateBox.update(state:listKey:presentedValue:tag:)(*(void *)(v0 + 16), v0 + 24, v0 + 176, *(void *)(v0 + 224), v0 + 232);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _GeometryActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

ValueMetadata *type metadata accessor for FocusItem()
{
  return &type metadata for FocusItem;
}

uint64_t destroy for BaseModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = ((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)v5 + 2;
  }
  if (v6 == 1) {
    swift_release();
  }

  return swift_release();
}

double key path getter for EnvironmentValues.keyboardShortcut : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v6;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>, (uint64_t)&type metadata for ButtonKeyboardShortcutKey, (uint64_t)&protocol witness table for ButtonKeyboardShortcutKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t View.accessibilityAction(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityAction(_:_:)(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED493200, (uint64_t)partial apply for closure #3 in Menu.init<A>(_:content:primaryAction:), (void (*)(uint64_t *, void, void, void, void, void, uint64_t, uint64_t, uint64_t, ValueMetadata *, uint64_t, unint64_t))View.accessibilityAction<A>(_:label:image:_:));
}

Swift::Void __swiftcall UIKitNavigationController._observeScrollViewDidScroll(_:)(UIScrollView *a1)
{
  uint64_t v2 = v1;
  if ((*((unsigned char *)v1 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_isTransitioningToSize) & 1) == 0)
  {
    v8.receiver = v2;
    v8.super_class = (Class)type metadata accessor for UIKitNavigationController();
    [(UIScrollView *)&v8 _observeScrollViewDidScroll:a1];
    id v4 = objc_msgSend(v2, sel_tabBarController);
    if (v4)
    {
      uint64_t v5 = v4;
      type metadata accessor for UIKitTabBarController();
      char v6 = (void *)swift_dynamicCastClass();
      if (!v6) {
    }
      }
    else
    {
      char v6 = 0;
    }
    id v7 = v2;
    PlatformBarUpdater.callAsFunction(context:)(v2, v6);
  }
}

Swift::Void __swiftcall UIKitNavigationController._observeScrollViewGeometryAffectingContentBottomDidChange(_:)(UIScrollView *a1)
{
  uint64_t v2 = v1;
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for UIKitNavigationController();
  [(UIScrollView *)&v8 _observeScrollViewGeometryAffectingContentBottomDidChange:a1];
  id v4 = objc_msgSend(v2, sel_tabBarController);
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for UIKitTabBarController();
    char v6 = (void *)swift_dynamicCastClass();
    if (!v6) {
  }
    }
  else
  {
    char v6 = 0;
  }
  id v7 = v2;
  PlatformBarUpdater.callAsFunction(context:)(v2, v6);
}

Swift::Void __swiftcall UIKitNavigationController.viewWillLayoutSubviews()()
{
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for UIKitNavigationController();
  objc_msgSendSuper2(&v5, sel_viewWillLayoutSubviews);
  id v1 = objc_msgSend(v0, sel_tabBarController);
  if (v1)
  {
    uint64_t v2 = v1;
    type metadata accessor for UIKitTabBarController();
    uint64_t v3 = (void *)swift_dynamicCastClass();
    if (!v3) {
  }
    }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = v0;
  PlatformBarUpdater.callAsFunction(configurations:context:)(0, v0, v3);
}

uint64_t PlatformBarUpdater.callAsFunction(context:)(void *a1, void *a2)
{
  void (*v33)(void *__return_ptr, uint64_t, uint64_t);
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void *v39;
  void *v40;
  id *v41;
  uint64_t v42;
  int64_t v43;
  void v44[4];
  long long v45;
  unint64_t v46;
  unsigned char v47[40];
  unsigned char v48[40];
  _OWORD v49[3];
  _OWORD v50[2];
  char v51[8];
  uint64_t v52[3];

  id v4 = *(void **)(v2 + 56);
  char v6 = *(void **)(v2 + 64);
  objc_super v5 = (id *)(v2 + 56);
  id *v5 = a1;
  v5[1] = a2;
  id v7 = a1;
  id v8 = a2;

  int v9 = v5 - 4;
  swift_beginAccess();
  uint64_t v10 = (uint64_t)*(v5 - 4);
  uint64_t v11 = v10 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v10 + 64);
  long long v43 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v41 = v5;
  uint64_t result = swift_bridgeObjectRetain();
  char v16 = 0;
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_26;
    }
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_52;
    }
    if (v20 >= v43) {
      goto LABEL_50;
    }
    unint64_t v21 = *(void *)(v11 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v43) {
        goto LABEL_50;
      }
      unint64_t v21 = *(void *)(v11 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v43) {
          goto LABEL_50;
        }
        unint64_t v21 = *(void *)(v11 + 8 * v17);
        if (!v21)
        {
          int64_t v17 = v20 + 3;
          if (v20 + 3 >= v43) {
            goto LABEL_50;
          }
          unint64_t v21 = *(void *)(v11 + 8 * v17);
          if (!v21)
          {
            int64_t v17 = v20 + 4;
            if (v20 + 4 >= v43) {
              goto LABEL_50;
            }
            unint64_t v21 = *(void *)(v11 + 8 * v17);
            if (!v21) {
              break;
            }
          }
        }
      }
    }
LABEL_25:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_26:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v10 + 48) + 40 * v19, (uint64_t)v48);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v48, (uint64_t)v47);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)&v45);
    if (v46 >= 7)
    {
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
      LOBYTE(v23) = 0;
    }
    else
    {
      unsigned int v23 = (0x78u >> v46) & 1;
    }
    swift_beginAccess();
    double v24 = *v9;
    if (*((void *)*v9 + 2) && (uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v47), (v26 & 1) != 0))
    {
      id v27 = (_OWORD *)(v24[7] + 80 * v25);
      v49[0] = *v27;
      long long v29 = v27[2];
      long long v28 = v27[3];
      long long v30 = *(_OWORD *)((char *)v27 + 57);
      v49[1] = v27[1];
      v49[2] = v29;
      *(_OWORD *)((char *)v50 + 9) = v30;
      v50[0] = v28;
      swift_endAccess();
      outlined retain of ToolbarAppearanceConfiguration((uint64_t)v49);
      PlatformBarUpdater.scrollGeometry(edge:)(v23, &v45);
      swift_beginAccess();
      InferredToolbarState.update(edge:to:)(v23);
      swift_endAccess();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)&v45);
      switch(v46)
      {
        case 0uLL:
          if (*v41)
          {
            id v31 = *v41;
            long long v32 = v31;
            double v33 = (void (*)(void *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
            goto LABEL_41;
          }
          break;
        case 1uLL:
        case 2uLL:
        case 4uLL:
        case 6uLL:
          break;
        case 3uLL:
          if (*v41)
          {
            char v34 = objc_msgSend(*v41, sel_toolbar);
            if (v34)
            {
              long long v32 = v34;
              type metadata accessor for UIKitToolbar();
              id v31 = (id)swift_dynamicCastClass();
              if (!v31) {
                goto LABEL_42;
              }
              double v33 = (void (*)(void *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
              goto LABEL_41;
            }
          }
          break;
        case 5uLL:
          id v35 = *(void **)(v42 + 64);
          if (v35)
          {
            id v31 = v35;
            long long v32 = v31;
            double v33 = (void (*)(void *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
LABEL_41:
            specialized PlatformBarUpdater.updateBackgroundHost<A>(host:role:configuration:)((uint64_t)v31, (uint64_t)v47, (uint64_t)v49, v33);
LABEL_42:
          }
          break;
        default:
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
          break;
      }
      char v36 = MEMORY[0x1E4F417D0];
      outlined init with take of Animation?((uint64_t)&v50[1], (uint64_t)v51, &lazy cache variable for type metadata for Animation?, MEMORY[0x1E4F417D0]);
      outlined init with take of Animation?((uint64_t)v51, (uint64_t)v52, &lazy cache variable for type metadata for Animation?, v36);
      if (v52[0])
      {
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v47, (uint64_t)&v45);
        swift_beginAccess();
        char v38 = specialized Dictionary.subscript.modify(v44, (uint64_t)&v45);
        if (*(void *)(v37 + 8) == 1)
        {
          ((void (*)(void *, void))v38)(v44, 0);
          swift_endAccess();
        }
        else
        {
          *(void *)(v37 + 64) = 0;
          ((void (*)(void *, void))v38)(v44, 0);
          swift_endAccess();
          swift_release();
        }
        outlined release of ToolbarAppearanceConfiguration((uint64_t)v49);
        outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
      }
      else
      {
        outlined release of ToolbarAppearanceConfiguration((uint64_t)v49);
      }
      char v16 = 1;
    }
    else
    {
      swift_endAccess();
    }
    uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v47);
  }
  int64_t v22 = v20 + 5;
  if (v22 >= v43)
  {
LABEL_50:
    swift_release();
    id v39 = *(void **)(v42 + 56);
    int v40 = *(void **)(v42 + 64);
    *uint64_t v41 = 0;
    v41[1] = 0;

    return v16 & 1;
  }
  unint64_t v21 = *(void *)(v11 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v43) {
      goto LABEL_50;
    }
    unint64_t v21 = *(void *)(v11 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_52:
  __break(1u);
  return result;
}

void PlatformBarUpdater.callAsFunction(configurations:context:)(uint64_t a1, void *a2, void *a3)
{
  id v4 = v3;
  id v7 = (void *)v4[7];
  id v8 = (void *)v4[8];
  v4[7] = a2;
  v4[8] = a3;
  long long v28 = v4 + 7;
  id v9 = a2;
  id v10 = a3;

  if (a1)
  {
    swift_beginAccess();
    v4[3] = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized Set.formUnion<A>(_:)(v11);
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v12 = v4[3];
  uint64_t v13 = v12 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v12 + 64);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v17 = 0;
  int64_t v18 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_27;
    }
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v18) {
      goto LABEL_30;
    }
    unint64_t v22 = *(void *)(v13 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v18) {
        goto LABEL_30;
      }
      unint64_t v22 = *(void *)(v13 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v18) {
          goto LABEL_30;
        }
        unint64_t v22 = *(void *)(v13 + 8 * v17);
        if (!v22)
        {
          int64_t v17 = v21 + 3;
          if (v21 + 3 >= v18) {
            goto LABEL_30;
          }
          unint64_t v22 = *(void *)(v13 + 8 * v17);
          if (!v22)
          {
            int64_t v17 = v21 + 4;
            if (v21 + 4 >= v18) {
              goto LABEL_30;
            }
            unint64_t v22 = *(void *)(v13 + 8 * v17);
            if (!v22) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_27:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v12 + 48) + 40 * v20, (uint64_t)v31);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v31, (uint64_t)v30);
    uint64_t v24 = v4[6];
    swift_bridgeObjectRetain();
    char v25 = specialized Set.contains(_:)((uint64_t)v30, v24);
    swift_bridgeObjectRelease();
    if (v25 & 1) != 0 && (PlatformBarUpdater.updateIfNeeded(role:)((uint64_t)v30))
    {
      swift_beginAccess();
      specialized Set._Variant.remove(_:)((uint64_t)v30, (uint64_t)v29);
      swift_endAccess();
      outlined destroy of ToolbarPlacement.Role?((uint64_t)v29, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)v30);
  }
  int64_t v23 = v21 + 5;
  if (v23 >= v18)
  {
LABEL_30:
    swift_release();
    char v26 = (void *)v4[7];
    id v27 = (void *)v4[8];
    *long long v28 = 0;
    v28[1] = 0;

    return;
  }
  unint64_t v22 = *(void *)(v13 + 8 * v23);
  if (v22)
  {
    int64_t v17 = v23;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v17 >= v18) {
      goto LABEL_30;
    }
    unint64_t v22 = *(void *)(v13 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_26;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t PlatformBarUpdater.updateIfNeeded(role:)(uint64_t a1)
{
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v23);
  if (v25 >= 7)
  {
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v23);
    LOBYTE(v3) = 0;
  }
  else
  {
    unsigned int v3 = (0x78u >> v25) & 1;
  }
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  if (*(void *)(v4 + 16) && (uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(v4 + 56) + 80 * v5;
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t v8 = *(void *)(v7 + 16);
    char v20 = *(unsigned char *)(v7 + 24);
    char v21 = *(unsigned char *)v7;
    uint64_t v19 = *(void *)(v7 + 32);
    char v18 = *(unsigned char *)(v7 + 40);
    uint64_t v17 = *(void *)(v7 + 48);
    __int16 v15 = *(_WORD *)(v7 + 57);
    char v16 = *(unsigned char *)(v7 + 56);
    uint64_t v10 = *(void *)(v7 + 64);
    char v11 = *(unsigned char *)(v7 + 72);
    swift_endAccess();
    swift_retain();
    swift_retain();
    swift_retain();
    PlatformBarUpdater.scrollGeometry(edge:)(v3, &v23);
    swift_beginAccess();
    InferredToolbarState.update(edge:to:)(v3);
    swift_endAccess();
    LOBYTE(v23) = v21;
    *((void *)&v23 + 1) = v9;
    uint64_t v24 = v8;
    LOBYTE(v25) = v20;
    uint64_t v26 = v19;
    char v27 = v18;
    uint64_t v28 = v17;
    char v29 = v16;
    __int16 v30 = v15;
    uint64_t v31 = v10;
    char v32 = v11;
    PlatformBarUpdater.updateBackgroundHost(role:configuration:)(a1, &v23);
    if (v10)
    {
      outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v23);
      swift_beginAccess();
      uint64_t v13 = specialized Dictionary.subscript.modify(v22, (uint64_t)&v23);
      if (*(void *)(v12 + 8) == 1)
      {
        ((void (*)(void *, void))v13)(v22, 0);
        swift_endAccess();
      }
      else
      {
        *(void *)(v12 + 64) = 0;
        ((void (*)(void *, void))v13)(v22, 0);
        swift_endAccess();
        swift_release();
      }
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v23);
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    return 1;
  }
  else
  {
    swift_endAccess();
    return 0;
  }
}

uint64_t InferredToolbarState.update(edge:to:)(char a1)
{
  char v3 = a1 & 1;
  ScrollGeometry.visibleRect.getter();
  double v14 = v4;
  ScrollGeometry.contentSize.getter();
  double v6 = v5;
  ScrollGeometry.visibleRect.getter();
  double v8 = v14 + v7;
  if (v6 + -44.0 > v14 + v7) {
    double v8 = v6 + -44.0;
  }
  if (v6 < v8) {
    double v8 = v6;
  }
  double v9 = vabdd_f64(v8, v6) * 0.25;
  double v10 = v14 * 0.25;
  if (v14 > 44.0) {
    double v10 = 11.0;
  }
  if (v14 < 0.0) {
    double v10 = 0.0;
  }
  if ((a1 & 1) == 0) {
    double v9 = v10;
  }
  if (v9 < 0.0) {
    double v9 = 0.0;
  }
  if (v9 <= 1.0) {
    double v11 = v9;
  }
  else {
    double v11 = 1.0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, isUniquelyReferenced_nonNull_native, v11);
  *uint64_t v1 = v15;

  return swift_bridgeObjectRelease();
}

double PlatformBarUpdater.scrollGeometry(edge:)@<D0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  static ScrollGeometry.zero.getter();
  double v5 = *(void **)(v2 + 56);
  if (v5)
  {
    double v6 = &selRef_topViewController;
  }
  else
  {
    double v5 = *(void **)(v2 + 64);
    if (!v5)
    {
      id v7 = 0;
      goto LABEL_6;
    }
    double v6 = &selRef_selectedViewController;
  }
  id v7 = [v5 *v6];
LABEL_6:
  id v8 = objc_msgSend(v7, sel_contentScrollView);

  if (v8) {
    goto LABEL_7;
  }
  uint64_t v12 = *(void **)(v2 + 56);
  if (v12)
  {
    uint64_t v13 = &selRef_topViewController;
  }
  else
  {
    uint64_t v12 = *(void **)(v2 + 64);
    if (!v12) {
      goto LABEL_11;
    }
    uint64_t v13 = &selRef_selectedViewController;
  }
  id v14 = [v12 *v13];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = (a1 & 1) != 0 ? 4 : 1;
    id v8 = objc_msgSend(v14, sel_contentScrollViewForEdge_, v16);

    if (v8)
    {
LABEL_7:
      objc_msgSend(v8, sel_safeAreaInsets);
      if (v10 == 0.0 && v9 == 0.0) {
        objc_msgSend(v8, sel_contentInset);
      }
      objc_msgSend(v8, sel_contentOffset);
      objc_msgSend(v8, sel_bounds);
      ScrollGeometry.contentOffset.setter();
      objc_msgSend(v8, sel_contentSize);
      ScrollGeometry.contentSize.setter();
      ScrollGeometry.containerSize.setter();
    }
  }
LABEL_11:
  *a2 = v17;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = v20;
  a2[4] = v21;
  a2[5] = v22;
  double result = *(double *)&v23;
  a2[6] = v23;
  return result;
}

void PlatformBarUpdater.updateBackgroundHost(role:configuration:)(uint64_t a1, _OWORD *a2)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  void *v10;
  id v11;
  void *v12;
  unsigned char v13[24];
  uint64_t v14;
  _OWORD v15[3];
  _OWORD v16[2];

  long long v4 = a2[3];
  void v15[2] = a2[2];
  v16[0] = v4;
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 + 57);
  long long v5 = a2[1];
  v15[0] = *a2;
  v15[1] = v5;
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v13);
  switch(v14)
  {
    case 0:
      double v6 = *(void **)(v2 + 56);
      if (v6)
      {
        id v7 = v6;
        id v8 = v7;
        double v9 = (void (*)(void *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
        goto LABEL_11;
      }
      break;
    case 1:
    case 2:
    case 4:
    case 6:
      return;
    case 3:
      double v10 = *(void **)(v2 + 56);
      if (v10)
      {
        double v11 = objc_msgSend(v10, sel_toolbar);
        if (v11)
        {
          id v8 = v11;
          type metadata accessor for UIKitToolbar();
          id v7 = (id)swift_dynamicCastClass();
          if (!v7) {
            goto LABEL_12;
          }
          double v9 = (void (*)(void *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
          goto LABEL_11;
        }
      }
      break;
    case 5:
      uint64_t v12 = *(void **)(v2 + 64);
      if (v12)
      {
        id v7 = v12;
        id v8 = v7;
        double v9 = (void (*)(void *__return_ptr, uint64_t, uint64_t))specialized PlatformBarBackgroundHost.update(configuration:barState:);
LABEL_11:
        specialized PlatformBarUpdater.updateBackgroundHost<A>(host:role:configuration:)((uint64_t)v7, a1, (uint64_t)v15, v9);
LABEL_12:
      }
      break;
    default:
      outlined destroy of ToolbarPlacement.Role((uint64_t)v13);
      break;
  }
}

uint64_t specialized PlatformBarUpdater.updateBackgroundHost<A>(host:role:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  swift_beginAccess();
  uint64_t v9 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  a4(v17, a3, v9);
  swift_bridgeObjectRelease();
  __int16 v10 = LOBYTE(v17[0]);
  __int16 v11 = BYTE1(v17[0]);
  uint64_t result = MEMORY[0x18C119DF0](v6 + 32);
  if (result)
  {
    uint64_t v13 = result;
    LOBYTE(v17[0]) = v10;
    BYTE1(v17[0]) = v11;
    BarAppearanceBridge.didUpdate(bar:barUpdates:)(a2, (unsigned __int8 *)v17);
    outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v17);
    id v14 = (uint64_t *)(v13 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v14;
    *id v14 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10 | (v11 << 8), (uint64_t)v17, isUniquelyReferenced_nonNull_native);
    *id v14 = v16;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
    swift_endAccess();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(__int16 a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  id v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(_WORD *)(v16[7] + 2 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v18);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

void BarAppearanceBridge.didUpdate(bar:barUpdates:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a2;
  int v6 = a2[1];
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  char v7 = specialized static ToolbarPlacement.Role.== infix(_:_:)(a1, (uint64_t)v22);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
  if ((v7 & 1) == 0) {
    return;
  }
  id v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if (v11)
    {
      BOOL v12 = (unsigned __int8 *)(*(void *)(v9 + 56) + 2 * v10);
      uint64_t v13 = *v12;
      int v14 = v12[1];
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = 0;
  int v14 = 2;
LABEL_7:
  uint64_t v15 = MEMORY[0x18C119DF0](v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage + 8);
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t v16 = (void *)v15;
  if (!BarAppearanceBridge.uiHasStatusBarOpinion.getter())
  {
LABEL_15:

LABEL_16:
    if (v13 == v5) {
      goto LABEL_19;
    }
    goto LABEL_24;
  }
  if (v13 != v5) {
    goto LABEL_18;
  }
  if (v14 != 2)
  {
    if (v6 == 2 || ((v14 ^ v6) & 1) != 0) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (v6 == 2)
  {

    return;
  }
LABEL_18:
  *(void *)(swift_allocObject() + 16) = v16;
  id v17 = v16;
  onNextMainRunLoop(do:)();

  swift_release();
  if (v13 == v5)
  {
LABEL_19:
    if (v14 == 2)
    {
      if (v6 == 2) {
        return;
      }
    }
    else if (v6 != 2 && ((v14 ^ v6) & 1) == 0)
    {
      return;
    }
  }
LABEL_24:
  uint64_t v18 = v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barBackgroundViewModels;
  swift_beginAccess();
  if (*(void *)(*(void *)v18 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1), (v19 & 1) != 0))
  {
    swift_endAccess();
    uint64_t v20 = swift_allocObject();
    swift_weakInit();
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v20;
    *(unsigned char *)(v21 + 24) = v5;
    *(unsigned char *)(v21 + 25) = v6;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t specialized static ToolbarPlacement.Role.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v8);
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)&v10);
  switch(v9)
  {
    case 0:
      if (*((void *)&v11 + 1)) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 1:
      if (*((void *)&v11 + 1) == 1) {
        goto LABEL_13;
      }
      goto LABEL_17;
    case 2:
      if (*((void *)&v11 + 1) != 2) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 3:
      if (*((void *)&v11 + 1) != 3) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 4:
      if (*((void *)&v11 + 1) != 4) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 5:
      if (*((void *)&v11 + 1) != 5) {
        goto LABEL_17;
      }
      goto LABEL_13;
    case 6:
      if (*((void *)&v11 + 1) != 6) {
        goto LABEL_17;
      }
LABEL_13:
      outlined destroy of ToolbarPlacement.Role((uint64_t)v8);
      char v3 = 1;
      break;
    default:
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v8, (uint64_t)v7);
      if (*((void *)&v11 + 1) >= 7uLL)
      {
        v5[0] = v10;
        v5[1] = v11;
        uint64_t v6 = v12;
        char v3 = MEMORY[0x18C1174E0](v7, v5);
        outlined destroy of AnyHashable((uint64_t)v5);
        outlined destroy of AnyHashable((uint64_t)v7);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v8);
      }
      else
      {
        outlined destroy of AnyHashable((uint64_t)v7);
LABEL_17:
        outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
        char v3 = 0;
      }
      break;
  }
  return v3 & 1;
}

uint64_t type metadata accessor for UIKitToolbar()
{
  return self;
}

uint64_t specialized PlatformBarBackgroundHost.update(configuration:barState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  int v8 = *(unsigned __int8 *)(a1 + 24);
  swift_retain();
  uint64_t result = Transaction.animation.setter();
  unsigned int v10 = v8 - 1;
  if ((v8 - 1) < 2)
  {
    char v11 = 1;
    goto LABEL_8;
  }
  if (!*(void *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v12 & 1) == 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (*(double *)(*(void *)(a2 + 56) + 8 * result) >= 1.0) {
    char v11 = 1;
  }
  else {
    char v11 = 2;
  }
LABEL_8:
  swift_release();
  uint64_t v13 = a1 + 57;
  uint64_t v14 = MEMORY[0x1E4F3F468];
  outlined init with take of Animation?(v13, (uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E4F3F468]);
  uint64_t result = outlined init with take of Animation?((uint64_t)&v23, (uint64_t)&v24, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, v14);
  char v15 = v24;
  if (v24 == 2)
  {
LABEL_9:
    objc_msgSend(v3, sel_setTintColor_, 0, 0);
    uint64_t v16 = 0;
    char v17 = 2;
LABEL_17:
    uint64_t result = (uint64_t)objc_msgSend(v4, sel_setOverrideUserInterfaceStyle_, v16);
    *a3 = v11;
    a3[1] = v17;
    return result;
  }
  if (v10 < 2)
  {
LABEL_14:
    char v19 = self;
    id v20 = v3;
    if (v15)
    {
      id v22 = objc_msgSend(v19, sel_whiteColor, 0);
      objc_msgSend(v20, sel_setTintColor_, v22);

      char v17 = 1;
      uint64_t v16 = 2;
    }
    else
    {
      id v21 = objc_msgSend(v19, sel_blackColor, 0);
      objc_msgSend(v20, sel_setTintColor_, v21);

      char v17 = 0;
      uint64_t v16 = 1;
    }
    goto LABEL_17;
  }
  if (!*(void *)(a2 + 16)) {
    goto LABEL_20;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if (v18)
  {
    if (*(double *)(*(void *)(a2 + 56) + 8 * result) <= 0.5) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
LABEL_21:
  __break(1u);
  return result;
}

void specialized PlatformBarBackgroundHost.update(configuration:barState:)(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  int v8 = *(unsigned __int8 *)(a1 + 24);
  swift_retain();
  Transaction.animation.setter();
  unsigned int v9 = v8 - 1;
  if ((v8 - 1) < 2)
  {
    char v10 = 1;
    goto LABEL_8;
  }
  if (!*(void *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0);
  if ((v12 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(double *)(*(void *)(a2 + 56) + 8 * v11) >= 1.0) {
    char v10 = 1;
  }
  else {
    char v10 = 2;
  }
LABEL_8:
  swift_release();
  uint64_t v13 = a1 + 57;
  uint64_t v14 = MEMORY[0x1E4F3F468];
  outlined init with take of Animation?(v13, (uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E4F3F468]);
  outlined init with take of Animation?((uint64_t)&v27, (uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, v14);
  char v15 = v28;
  if (v28 != 2)
  {
    if (v9 < 2) {
      goto LABEL_14;
    }
    if (*(void *)(a2 + 16))
    {
      uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(0);
      if (v20)
      {
        if (*(double *)(*(void *)(a2 + 56) + 8 * v19) <= 0.5) {
          goto LABEL_9;
        }
LABEL_14:
        id v21 = objc_msgSend(v3, sel_navigationBar, 0);
        id v22 = self;
        if (v15)
        {
          id v16 = objc_msgSend(v22, sel_whiteColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          int v18 = 0;
          char v17 = 1;
        }
        else
        {
          id v16 = objc_msgSend(v22, sel_blackColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          int v18 = 0;
          char v17 = 0;
        }
        goto LABEL_17;
      }
LABEL_26:
      __break(1u);
      return;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_9:
  id v16 = objc_msgSend(v3, sel_navigationBar, 0);
  objc_msgSend(v16, sel_setTintColor_, 0);
  char v17 = 2;
  int v18 = 1;
LABEL_17:

  id v23 = objc_msgSend(v4, sel_navigationBar);
  char v24 = v23;
  uint64_t v25 = 1;
  if (v17) {
    uint64_t v25 = 2;
  }
  if (v18) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  objc_msgSend(v23, sel_setOverrideUserInterfaceStyle_, v26);

  *a3 = v10;
  a3[1] = v17;
}

{
  void *v3;
  void *v4;
  int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  char v17;
  int v18;
  uint64_t v19;
  char v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  uint64_t v4 = v3;
  int v8 = *(unsigned __int8 *)(a1 + 24);
  swift_retain();
  Transaction.animation.setter();
  unsigned int v9 = v8 - 1;
  if ((v8 - 1) < 2)
  {
    char v10 = 1;
    goto LABEL_8;
  }
  if (!*(void *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v12 & 1) == 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(double *)(*(void *)(a2 + 56) + 8 * v11) >= 1.0) {
    char v10 = 1;
  }
  else {
    char v10 = 2;
  }
LABEL_8:
  swift_release();
  uint64_t v13 = a1 + 57;
  uint64_t v14 = MEMORY[0x1E4F3F468];
  outlined init with take of Animation?(v13, (uint64_t)&v27, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E4F3F468]);
  outlined init with take of Animation?((uint64_t)&v27, (uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, v14);
  char v15 = v28;
  if (v28 != 2)
  {
    if (v9 < 2) {
      goto LABEL_14;
    }
    if (*(void *)(a2 + 16))
    {
      uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(1);
      if (v20)
      {
        if (*(double *)(*(void *)(a2 + 56) + 8 * v19) <= 0.5) {
          goto LABEL_9;
        }
LABEL_14:
        id v21 = objc_msgSend(v3, sel_tabBar, 0);
        id v22 = self;
        if (v15)
        {
          id v16 = objc_msgSend(v22, sel_whiteColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          int v18 = 0;
          char v17 = 1;
        }
        else
        {
          id v16 = objc_msgSend(v22, sel_blackColor);
          objc_msgSend(v21, sel_setTintColor_, v16);

          int v18 = 0;
          char v17 = 0;
        }
        goto LABEL_17;
      }
LABEL_26:
      __break(1u);
      return;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_9:
  id v16 = objc_msgSend(v3, sel_tabBar, 0);
  objc_msgSend(v16, sel_setTintColor_, 0);
  char v17 = 2;
  int v18 = 1;
LABEL_17:

  id v23 = objc_msgSend(v4, sel_tabBar);
  char v24 = v23;
  uint64_t v25 = 1;
  if (v17) {
    uint64_t v25 = 2;
  }
  if (v18) {
    uint64_t v26 = 0;
  }
  else {
    uint64_t v26 = v25;
  }
  objc_msgSend(v23, sel_setOverrideUserInterfaceStyle_, v26);

  *a3 = v10;
  a3[1] = v17;
}

uint64_t outlined init with take of Animation?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Published<Visibility>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

int64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, char a2, double a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = a1 & 1;
  int v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  int64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  int64_t v15 = v8[3];
  if (v15 >= result && (a2 & 1) != 0)
  {
LABEL_7:
    id v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(double *)(v16[7] + 8 * v10) = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    int64_t result = (int64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a2 & 1);
  int64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    int64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  id v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, v7, v16, a3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  char v1 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v1, v2);
}

{
  char v2;
  Swift::Int v3;

  Swift::Int v2 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  char v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v7 + result)) & 1) == 0)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if ((((a1 & 1) == 0) ^ *(unsigned char *)(v7 + result))) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t HostingScrollView.makeLayoutState()@<X0>(uint64_t a1@<X8>)
{
  objc_msgSend(v1, sel_adjustedContentInset);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection)) {
    double v9 = v3;
  }
  else {
    double v9 = v4;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_layoutDirection)) {
    double v10 = v4;
  }
  else {
    double v10 = v3;
  }
  objc_msgSend(v1, sel_contentOffset);
  double v12 = v11;
  double v14 = v13;
  objc_msgSend(v1, sel_adjustedContentInset);
  double v16 = v15;
  objc_msgSend(v1, sel_adjustedContentInset);
  double v18 = v14 + v17;
  uint64_t result = static EdgeInsets.zero.getter();
  *(double *)a1 = v12 + v16;
  *(double *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v6;
  *(double *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v8;
  *(double *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v20;
  *(void *)(a1 + 56) = v21;
  *(void *)(a1 + 64) = v22;
  *(void *)(a1 + 72) = v23;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x8000000000000000;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

id @objc HostingScrollView.PlatformContainer.frame.getter(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v5, *a3);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, __int16 a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = outlined init with take of ToolbarPlacement.Role(a2, a4[6] + 40 * a1);
  *(_WORD *)(a4[7] + 2 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)(*(void *)(v0 + 40), *(_DWORD *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(long long **)(v0 + 72));
}

ValueMetadata *type metadata accessor for ToolbarStorage()
{
  return &type metadata for ToolbarStorage;
}

BOOL EnvironmentValues.accessibilitySwitchControlEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(1);
}

BOOL EnvironmentValues.accessibilityVoiceOverEnabled.getter()
{
  return EnvironmentValues.isEnabled(for:)(0);
}

BOOL keypath_get_1Tm@<W0>(char a1@<W3>, unsigned char *a2@<X8>)
{
  BOOL result = EnvironmentValues.isEnabled(for:)(a1);
  *a2 = result;
  return result;
}

BOOL EnvironmentValues.isEnabled(for:)(char a1)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  int v3 = 1 << (a1 & 0xF);
  if ((a1 & 0xF0) != 0) {
    int v3 = 0;
  }
  return (v3 & (v5 ^ 0xFFFF)) == 0;
}

void type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledTechnologiesKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledTechnologiesKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnabledTechnologiesKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _BackdropGroupEffect(uint64_t a1@<X8>)
{
  *(void *)a1 = *v1;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnScrollGeometryChangeModifier<A>@<D0>(int *a1@<X0>, _DWORD *a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static OnScrollGeometryChangeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

ValueMetadata *type metadata accessor for SidebarListStyleContext()
{
  return &type metadata for SidebarListStyleContext;
}

ValueMetadata *type metadata accessor for LabelStyleConfiguration()
{
  return &type metadata for LabelStyleConfiguration;
}

ValueMetadata *type metadata accessor for SearchScopeActivation.Role()
{
  return &type metadata for SearchScopeActivation.Role;
}

uint64_t protocol witness for ViewGraphFeature.isHiddenForReuseDidChange(graph:) in conformance PlatformItemListViewGraph(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(a1 + 361) & 2) != 0)
  {
    uint64_t result = swift_beginAccess();
    if ((*(unsigned char *)(a1 + 41) & 1) == 0) {
      *(unsigned char *)(v1 + 9) = 1;
    }
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.activeContextMenu : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.activeContextMenu.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t EnvironmentValues.activeContextMenu.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>();
    lazy protocol witness table accessor for type InvertedViewInputPredicate<IsSharingPickerHost> and conformance InvertedViewInputPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveContextMenuKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>();
    lazy protocol witness table accessor for type InvertedViewInputPredicate<IsSharingPickerHost> and conformance InvertedViewInputPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveContextMenuKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v1 = 0x100000000;
  if (!v4) {
    uint64_t v1 = 0;
  }
  return v1 | v3;
}

uint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<IsSharingPickerHost> and conformance InvertedViewInputPredicate<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ActiveContextMenuKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveContextMenuKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveContextMenuKey>);
    }
  }
}

uint64_t implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)()
{
  type metadata accessor for ContextMenuModifierCore();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #2 in implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(1);

  return AGGraphCreateOffsetAttribute2();
}

uint64_t closure #2 in implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContextMenuModifierCore();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1, (uint64_t)v7, (uint64_t)&type metadata for MenuOrder, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #1 in ContextMenuModifier.body(content:)(uint64_t a1)
{
  type metadata accessor for ContextMenuModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuModifierCore();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v9 - v4;
  v9[2] = swift_getWitnessTable();
  v9[3] = &protocol witness table for ContextMenuModifierCore<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v7 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  v9[0] = WitnessTable;
  v9[1] = v7;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t ContextMenuModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v73 = a2;
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _ViewModifier_Content();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v74 = *(void *)(a1 + 24);
  uint64_t v7 = type metadata accessor for ContextMenuModifierCore();
  uint64_t v58 = (uint64_t *)v5;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>();
  uint64_t v60 = v10;
  v88[0] = &type metadata for ProvidesContextMenuInteraction;
  v88[1] = v9;
  uint64_t v65 = type metadata accessor for ModifiedContent();
  v88[2] = v65;
  unint64_t v89 = lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  unint64_t v62 = v89;
  uint64_t v11 = type metadata accessor for StaticIf();
  uint64_t v67 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v64 = (char *)&v57 - v12;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  uint64_t v69 = v11;
  uint64_t v71 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  long long v66 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v68 = (char *)&v57 - v15;
  uint64_t v57 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v16);
  double v18 = (char *)&v57 - v17;
  uint64_t v72 = v9;
  uint64_t v63 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v19);
  long long v61 = (char *)&v57 - v20;
  uint64_t v21 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v22);
  char v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = v7;
  uint64_t v59 = *(void *)(v7 - 8);
  double v26 = MEMORY[0x1F4188790](v25);
  char v28 = (char *)&v57 - v27;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v24, (uint64_t)v3 + *(int *)(a1 + 44), v6, v26);
  int v29 = *v3;
  if (!*v3) {
    goto LABEL_4;
  }
  uint64_t v30 = *((void *)v3 + 3);
  char v31 = *((unsigned char *)v3 + 32);
  outlined copy of Environment<Bool>.Content(v30, v31);
  specialized Environment.wrappedValue.getter(v30, v31, v88);
  outlined consume of Environment<Bool>.Content(v30, v31);
  LOBYTE(v30) = v88[0];
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v28, v24, v6);
  uint64_t v32 = type metadata accessor for ContextMenuModifierCore();
  *(_DWORD *)&v28[*(int *)(v32 + 36)] = v29;
  v28[*(int *)(v32 + 40)] = v30;
  double v33 = v58;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v28, v33, v75, WitnessTable);
  swift_getKeyPath();
  unint64_t v35 = *((void *)v3 + 1);
  char v36 = *((unsigned char *)v3 + 16);
  outlined copy of Environment<Bool>.Content(v35, v36);
  int v37 = specialized Environment.wrappedValue.getter(v35, v36);
  outlined consume of Environment<Bool>.Content(v35, v36);
  if (*v3)
  {
    LOBYTE(v88[0]) = *v3 == v37;
    uint64_t v86 = WitnessTable;
    uint64_t v87 = &protocol witness table for ContextMenuModifierCore<A>;
    uint64_t v38 = swift_getWitnessTable();
    id v39 = v61;
    View.environment<A>(_:_:)();
    swift_release();
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v18, v8);
    uint64_t v58 = &v57;
    MEMORY[0x1F4188790](v40);
    MEMORY[0x1F4188790](v41);
    unint64_t v42 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
    uint64_t v84 = v38;
    unint64_t v85 = v42;
    uint64_t v43 = v72;
    uint64_t v44 = swift_getWitnessTable();
    uint64_t v82 = v44;
    uint64_t v83 = MEMORY[0x1E4F40800];
    uint64_t v45 = swift_getWitnessTable();
    unint64_t v46 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    uint64_t v80 = v45;
    unint64_t v81 = v46;
    uint64_t v56 = swift_getWitnessTable();
    char v47 = v64;
    StaticIf<>.init(_:then:else:)();
    uint64_t v78 = v44;
    uint64_t v79 = v56;
    uint64_t v48 = v69;
    uint64_t v49 = swift_getWitnessTable();
    long long v50 = v66;
    View.sharingPickerHost()(v48, v49);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v47, v48);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v28, v75);
    unint64_t IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    uint64_t v76 = v49;
    unint64_t v77 = IsSharingPicker;
    uint64_t v52 = v71;
    swift_getWitnessTable();
    long long v53 = v68;
    static ViewBuilder.buildExpression<A>(_:)(v50);
    long long v54 = *(void (**)(char *, uint64_t))(v70 + 8);
    v54(v50, v52);
    static ViewBuilder.buildExpression<A>(_:)(v53);
    v54(v53, v52);
    return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v39, v43);
  }
  else
  {
LABEL_4:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ContextMenuModifierCore()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, void (*a3)(uint64_t, void)@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(uint64_t, void)@<X5>, unsigned char *a7@<X8>)
{
  uint64_t v7 = result;
  if (a2)
  {
    *a7 = result;
  }
  else
  {
    a3(result, 0);
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v15, -1, -1);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(v7, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v7;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v7 = result;
  if (a2)
  {
    *a7 = result;
  }
  else
  {
    a3(result, 0);
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v15, -1, -1);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(v7, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v7;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v7 = result;
  if (a2)
  {
    *a7 = result & 1;
  }
  else
  {
    a3(result, 0);
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v15, -1, -1);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(v7, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v7;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  uint64_t v7 = result;
  if (a2)
  {
    *a7 = result & 1;
  }
  else
  {
    a3(result, 0);
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v16 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v15, -1, -1);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a6(v7, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction()
{
  unint64_t result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction;
  if (!lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
    lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t View.sharingPickerHost()(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWOi0_(v8);
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v8, (uint64_t)v9, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  uint64_t v10 = 0;
  v6[6] = v9[6];
  v6[7] = v9[7];
  uint64_t v7 = 0;
  v6[2] = v9[2];
  v6[3] = v9[3];
  v6[4] = v9[4];
  v6[5] = v9[5];
  v6[0] = v9[0];
  v6[1] = v9[1];
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  return MEMORY[0x18C113660](v6, a1, v4, a2);
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>)
  {
    type metadata accessor for InvertedViewInputPredicate<IsSharingPickerHost>();
    lazy protocol witness table accessor for type InvertedViewInputPredicate<IsSharingPickerHost> and conformance InvertedViewInputPredicate<A>(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsSharingPickerHost> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<IsSharingPickerHost>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>);
    }
  }
}

double _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[6] = 0u;
  a1[7] = xmmword_18834FC50;
  return result;
}

uint64_t closure #2 in ContextMenuModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = a1;
  uint64_t v46 = a3;
  uint64_t v4 = type metadata accessor for ContextMenuModifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v37 - v6;
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContextMenuModifierCore();
  v37[1] = v8;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  v37[2] = v9;
  uint64_t v38 = type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v40 = (char *)v37 - v11;
  type metadata accessor for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  id v39 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v41 = (char *)v37 - v15;
  int v16 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2) {
    goto LABEL_9;
  }
  unint64_t v17 = *(void *)(a2 + 8);
  char v18 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v17, v18);
  int v19 = specialized Environment.wrappedValue.getter(v17, v18);
  outlined consume of Environment<Bool>.Content(v17, v18);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v45 = (int *)a2;
  v20(v7, a2, v4);
  if (v16 != v19)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_6;
  }
  unint64_t v21 = *((void *)v7 + 1);
  char v22 = v7[16];
  outlined copy of Environment<Bool>.Content(v21, v22);
  uint64_t v23 = specialized Environment.wrappedValue.getter(v21, v22);
  outlined consume of Environment<Bool>.Content(v21, v22);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  double v24 = 0.0;
  if ((v23 & 0x100000000) != 0) {
LABEL_6:
  }
    double v24 = 1.0;
  v55[0] = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v54 = &protocol witness table for ContextMenuModifierCore<A>;
  uint64_t v25 = swift_getWitnessTable();
  unint64_t v26 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v51 = v25;
  unint64_t v52 = v26;
  uint64_t v27 = v38;
  uint64_t v28 = swift_getWitnessTable();
  int v29 = v40;
  MEMORY[0x18C113660](v55, v27, MEMORY[0x1E4F40808], v28);
  int v30 = *v45;
  if (*v45)
  {
    uint64_t v49 = v28;
    uint64_t v50 = MEMORY[0x1E4F40800];
    uint64_t v31 = swift_getWitnessTable();
    uint64_t v32 = v39;
    View.portalGroup(kind:id:)(1, v30, v10, v31);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v10);
    unint64_t v33 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    uint64_t v47 = v31;
    unint64_t v48 = v33;
    swift_getWitnessTable();
    char v34 = v41;
    static ViewBuilder.buildExpression<A>(_:)(v32);
    unint64_t v35 = *(void (**)(char *, uint64_t))(v43 + 8);
    v35(v32, v12);
    static ViewBuilder.buildExpression<A>(_:)(v34);
    return ((uint64_t (*)(char *, uint64_t))v35)(v34, v12);
  }
LABEL_9:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_DWORD *initializeWithCopy for ContextMenuModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 27;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 27;
  unint64_t v7 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  char v10 = *(unsigned char *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v8, v10);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v10;
  unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = v5 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  LOBYTE(v9) = *(unsigned char *)(v12 + 8);
  outlined copy of Environment<Bool>.Content(v13, v9);
  *(void *)unint64_t v11 = v13;
  *(unsigned char *)(v11 + 8) = v9;
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))((*(unsigned __int8 *)(v14 + 80) + 9 + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(unsigned __int8 *)(v14 + 80) + 9 + v12) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>)
  {
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t View.portalGroup(kind:id:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  int v9 = a2;
  type metadata accessor for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>(0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, PortalGroupRendererEffect, EmptyModifier>);
  return MEMORY[0x18C113660](&v8, a3, v6, a4);
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for StaticIf();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x6564724F756E654DLL, 0xE900000000000072, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content, 0x5463696D616E7944, 0xEF657A6953657079, (void (*)(uint64_t, void))outlined consume of Environment<Bool>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD000000000000015, 0x8000000188328370, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x536C6F72746E6F43, 0xEB00000000657A69, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x686353726F6C6F43, 0xEB00000000656D65, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD000000000000014, 0x8000000188328420, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD000000000000019, 0x8000000188327DE0, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x6E656E696D6F7250, 0xEA00000000006563, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD000000000000018, 0x80000001883283E0, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content, 0xD000000000000019, 0x8000000188328390, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x694474756F79614CLL, 0xEF6E6F6974636572, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x6C7974536E6F6349, 0xE900000000000065, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD00000000000001ALL, 0x8000000188328020, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD000000000000013, 0x80000001883280C0, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD000000000000011, 0x80000001883280A0, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0xD000000000000019, 0x80000001883280E0, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, (void (*)(uint64_t, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, 0x6F72506567646142, 0xEF65636E656E696DLL, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content, a3);
}

void type metadata accessor for InvertedViewInputPredicate<IsSharingPickerHost>()
{
  if (!lazy cache variable for type metadata for InvertedViewInputPredicate<IsSharingPickerHost>)
  {
    lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost();
    unint64_t v0 = type metadata accessor for InvertedViewInputPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InvertedViewInputPredicate<IsSharingPickerHost>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost()
{
  unint64_t result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost;
  if (!lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSharingPickerHost and conformance IsSharingPickerHost);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>();
    type metadata accessor for _ViewModifier_Content<SharingPickerHostModifier>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<IsSharingPickerHost>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsSharingPickerHost and conformance IsSharingPickerHost, (uint64_t)&type metadata for IsSharingPickerHost, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>, ViewInputFlagModifier<IsSharingPickerHost>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>();
    type metadata accessor for State<SharingPickerHostModifier.Model?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
    type metadata accessor for EnvironmentPropertyKey<PresentSharingPickerKey>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F408C8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, _ValueActionModifier2<Bool>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for State<SharingPickerHostModifier.Model?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PresentSharingPickerAction?>, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PresentSharingPickerAction?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *protocol witness for ViewModifier.body(content:) in conformance SharingPickerHostModifier@<X0>(void *a1@<X8>)
{
  return SharingPickerHostModifier.body(content:)(a1);
}

void *SharingPickerHostModifier.body(content:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  long long v3 = v1[5];
  long long v4 = v1[7];
  long long v113 = v1[6];
  long long v114 = v4;
  long long v5 = v1[3];
  long long v109 = v1[2];
  long long v110 = v5;
  long long v7 = v1[3];
  long long v6 = v1[4];
  long long v8 = v6;
  long long v112 = v1[5];
  long long v111 = v6;
  long long v9 = *v1;
  long long v108 = v1[1];
  long long v107 = v9;
  long long v10 = v1[7];
  __src[6] = v113;
  __src[7] = v10;
  __src[2] = v109;
  __src[3] = v7;
  __src[5] = v3;
  __src[4] = v8;
  uint64_t v115 = *((void *)v1 + 16);
  type metadata accessor for State<SharingPickerHostModifier.Model?>(0, (unint64_t *)&lazy cache variable for type metadata for State<SharingPickerHostModifier.Model?>, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)&v117, (uint64_t)v118, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  int v41 = _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v118);
  uint64_t v11 = v119;
  lazy protocol witness table accessor for type ToBool and conformance ToBool();
  uint64_t v43 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v44 = v116;
  swift_retain();
  outlined release of Binding<SharingPickerHostModifier.Model?>((uint64_t)&v116);
  __src[6] = v113;
  __src[7] = v114;
  *(void *)&__src[8] = v115;
  __src[2] = v109;
  __src[3] = v110;
  __src[5] = v112;
  __src[4] = v111;
  __src[1] = v108;
  __src[0] = v107;
  State.projectedValue.getter();
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)&v92, (uint64_t)&v93, &lazy cache variable for type metadata for SharingPickerHostModifier.Model?, (uint64_t)&type metadata for SharingPickerHostModifier.Model);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)&v93) == 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v18 = 0;
    uint64_t v36 = 1;
  }
  else
  {
    uint64_t v18 = v106;
    uint64_t v34 = v105;
    uint64_t v35 = v104;
    uint64_t v36 = v102;
    uint64_t v37 = v103;
    uint64_t v38 = v101;
    uint64_t v39 = v94;
    uint64_t v40 = v93;
    uint64_t v12 = v95;
    uint64_t v13 = v96;
    uint64_t v14 = v97;
    uint64_t v15 = v98;
    uint64_t v16 = v99;
    uint64_t v17 = v100;
    outlined consume of AnyIdentifiableShareConfiguration?(v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  }
  BOOL v20 = v41 != 1 && v11 != 1;
  BOOL v42 = v20;
  lazy protocol witness table accessor for type ToConfiguration and conformance ToConfiguration();
  uint64_t v21 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t v22 = v91;
  swift_retain();
  outlined release of Binding<SharingPickerHostModifier.Model?>((uint64_t)&v91);
  *(void *)&long long v46 = v22;
  *((void *)&v46 + 1) = v21;
  *(void *)&long long v47 = v40;
  *((void *)&v47 + 1) = v39;
  *(void *)&long long v48 = v12;
  *((void *)&v48 + 1) = v13;
  *(void *)&long long v49 = v14;
  *((void *)&v49 + 1) = v15;
  *(void *)&long long v50 = v16;
  *((void *)&v50 + 1) = v17;
  *(void *)&long long v51 = v38;
  *((void *)&v51 + 1) = v36;
  *(void *)&long long v52 = v37;
  *((void *)&v52 + 1) = v35;
  *(void *)&long long v53 = v34;
  *((void *)&v53 + 1) = v18;
  v54[2] = v48;
  v54[3] = v49;
  v54[6] = v52;
  v54[7] = v53;
  v54[4] = v50;
  v54[5] = v51;
  v54[0] = v46;
  v54[1] = v47;
  _s7SwiftUI19SharingPickerSourceOWOi_((uint64_t)v54);
  outlined retain of Binding<AnyIdentifiableShareConfiguration?>((uint64_t)&v46);
  uint64_t v23 = static Anchor.Source<A>.bounds.getter();
  outlined init with take of SharingPickerSource((uint64_t)v54, (uint64_t)v55);
  *((void *)&v56 + 1) = v23;
  long long v64 = v55[6];
  long long v65 = v55[7];
  long long v66 = v56;
  long long v60 = v55[2];
  long long v61 = v55[3];
  long long v62 = v55[4];
  long long v63 = v55[5];
  long long v58 = v55[0];
  long long v59 = v55[1];
  *(void *)&__src[0] = v44;
  *((void *)&__src[0] + 1) = v43;
  LOBYTE(__src[1]) = v42;
  type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v80);
  LOBYTE(v71) = v80;
  uint64_t v24 = swift_allocObject();
  long long v25 = v2[7];
  *(_OWORD *)(v24 + 112) = v2[6];
  *(_OWORD *)(v24 + 128) = v25;
  *(void *)(v24 + 144) = *((void *)v2 + 16);
  long long v26 = v2[3];
  *(_OWORD *)(v24 + 48) = v2[2];
  *(_OWORD *)(v24 + 64) = v26;
  long long v27 = v2[5];
  *(_OWORD *)(v24 + 80) = v2[4];
  *(_OWORD *)(v24 + 96) = v27;
  long long v28 = v2[1];
  *(_OWORD *)(v24 + 16) = *v2;
  *(_OWORD *)(v24 + 32) = v28;
  outlined retain of SharingPickerHostModifier((uint64_t *)v2);
  type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(0, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
  lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  v57[6] = v64;
  v57[7] = v65;
  v57[8] = v66;
  v57[2] = v60;
  v57[3] = v61;
  v57[4] = v62;
  v57[5] = v63;
  v57[0] = v58;
  v57[1] = v59;
  outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>((uint64_t *)v57);
  long long v68 = __src[10];
  long long v69 = __src[11];
  uint64_t v70 = *(void *)&__src[12];
  long long v64 = __src[6];
  long long v65 = __src[7];
  long long v66 = __src[8];
  long long v67 = __src[9];
  long long v60 = __src[2];
  long long v61 = __src[3];
  long long v62 = __src[4];
  long long v63 = __src[5];
  long long v58 = __src[0];
  long long v59 = __src[1];
  uint64_t KeyPath = swift_getKeyPath();
  long long v78 = v114;
  *(void *)&long long v79 = v115;
  long long v73 = v109;
  long long v74 = v110;
  long long v76 = v112;
  long long v77 = v113;
  long long v75 = v111;
  long long v71 = v107;
  long long v72 = v108;
  outlined retain of SharingPickerHostModifier((uint64_t *)v2);
  State.projectedValue.getter();
  swift_release();
  swift_release();
  outlined release of Binding<AnyIdentifiableShareConfiguration?>((uint64_t)&v46);
  outlined release of SharingPickerHostModifier((uint64_t *)v2);
  long long v78 = v87;
  long long v79 = v88;
  long long v73 = v82;
  long long v74 = v83;
  long long v76 = v85;
  long long v77 = v86;
  long long v75 = v84;
  long long v71 = v80;
  long long v72 = v81;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v71, v30, v31, v32);
  *(void *)&long long v80 = KeyPath;
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)&v71, (uint64_t)&v80 + 8, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  __src[10] = v68;
  __src[11] = v69;
  __src[6] = v64;
  __src[7] = v65;
  __src[9] = v67;
  __src[8] = v66;
  __src[2] = v60;
  __src[3] = v61;
  __src[5] = v63;
  __src[4] = v62;
  __src[1] = v59;
  __src[0] = v58;
  *(_OWORD *)((char *)&__src[18] + 8) = v86;
  *(_OWORD *)((char *)&__src[19] + 8) = v87;
  *(_OWORD *)((char *)&__src[20] + 8) = v88;
  *(_OWORD *)((char *)&__src[16] + 8) = v84;
  *(_OWORD *)((char *)&__src[17] + 8) = v85;
  *(_OWORD *)((char *)&__src[14] + 8) = v82;
  *(_OWORD *)((char *)&__src[15] + 8) = v83;
  *(_OWORD *)((char *)&__src[12] + 8) = v80;
  *(void *)&__src[12] = v70;
  *((void *)&__src[21] + 1) = v89;
  *(_OWORD *)((char *)&__src[13] + 8) = v81;
  return memcpy(a1, __src, 0x160uLL);
}

uint64_t outlined release of Binding<SharingPickerHostModifier.Model?>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 96);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 128);
  swift_release();
  swift_release();
  outlined consume of SharingPickerHostModifier.Model?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v8);
  return a1;
}

uint64_t _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t *outlined retain of SharingPickerHostModifier(uint64_t *a1)
{
  return a1;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance EditModeScopeModifier@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  type metadata accessor for State<EditMode>(0, &lazy cache variable for type metadata for State<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41580]);
  uint64_t result = State.projectedValue.getter();
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  return result;
}

void *key path setter for EnvironmentValues.presentSharingPicker : EnvironmentValues(uint64_t a1)
{
  _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0(a1, (uint64_t)v2, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  outlined retain of PresentSharingPickerAction?(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of PresentSharingPickerAction?);
  specialized EnvironmentValues.subscript.setter(v2);
  return outlined retain of PresentSharingPickerAction?(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of PresentSharingPickerAction?);
}

void *outlined retain of PresentSharingPickerAction?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined copy of SharingPickerHostModifier.Model?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 != 1)
  {
    outlined copy of AnyIdentifiableShareConfiguration?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    return outlined copy of AppIntentExecutor?(a15);
  }
  return result;
}

void outlined copy of PresentSharingPickerAction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    outlined copy of SharingPickerHostModifier.Model?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
}

uint64_t outlined consume of SharingPickerHostModifier.Model?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 != 1)
  {
    outlined copy of AnyIdentifiableShareConfiguration?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a15);
  }
  return result;
}

void outlined consume of PresentSharingPickerAction?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    swift_release();
    swift_release();
    outlined consume of SharingPickerHostModifier.Model?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t *a1)
{
  outlined init with take of PresentSharingPickerAction?((uint64_t)a1, (uint64_t)&v4, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>);
  outlined retain of PresentSharingPickerAction?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;
  unsigned char v4[56];

  outlined init with take of PresentSharingPickerAction?((uint64_t)a1, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
  outlined retain of DialogSuppressionConfiguration?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void destroy for PresentSharingPickerAction(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 128);
  if (v2 != 1)
  {
    uint64_t v3 = *(void *)(a1 + 88);
    if (v3 != 1)
    {
      outlined consume of AnyShareConfiguration.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
      if (v3)
      {
        outlined consume of Text.Storage(*(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + 120))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 96), *(void *)(a1 + 104), *(unsigned char *)(a1 + 112));
        swift_bridgeObjectRelease();
      }
    }
    if (v2)
    {
      swift_release();
    }
  }
}

uint64_t *outlined retain of PresentSharingPickerAction?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined init with take of PresentSharingPickerAction?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for State<EditMode>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for State<EditMode>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for State<SharingPickerHostModifier.Model?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for _ContiguousArrayStorage<Any>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for _ViewModifier_Content<SharingPickerHostModifier>(255, a3, a4, a5, MEMORY[0x1E4F408E0]);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
    lazy protocol witness table accessor for type _ViewModifier_Content<SharingPickerHostModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<SharingPickerHostModifier> and conformance _ViewModifier_Content<A>, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SharingPickerHostModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier, (uint64_t)&type metadata for SharingPickerHostModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of Binding<AnyIdentifiableShareConfiguration?>(uint64_t a1)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 96);
  long long v12 = *(_OWORD *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  swift_release();
  swift_release();
  outlined consume of AnyIdentifiableShareConfiguration?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  return a1;
}

uint64_t outlined retain of Binding<AnyIdentifiableShareConfiguration?>(uint64_t a1)
{
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 96);
  long long v12 = *(_OWORD *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 112);
  uint64_t v9 = *(void *)(a1 + 120);
  swift_retain();
  swift_retain();
  outlined consume of AnyIdentifiableShareConfiguration?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ToBool and conformance ToBool()
{
  unint64_t result = lazy protocol witness table cache variable for type ToBool and conformance ToBool;
  if (!lazy protocol witness table cache variable for type ToBool and conformance ToBool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToBool and conformance ToBool);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToBool and conformance ToBool;
  if (!lazy protocol witness table cache variable for type ToBool and conformance ToBool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToBool and conformance ToBool);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToBool and conformance ToBool;
  if (!lazy protocol witness table cache variable for type ToBool and conformance ToBool)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToBool and conformance ToBool);
  }
  return result;
}

uint64_t *outlined release of SharingPickerHostModifier(uint64_t *a1)
{
  return a1;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOi_(uint64_t result)
{
  *(void *)(result + 8) &= 0xFFFFFFFFFFFFFF8uLL;
  return result;
}

unint64_t lazy protocol witness table accessor for type ToConfiguration and conformance ToConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration;
  if (!lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration;
  if (!lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration;
  if (!lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToConfiguration and conformance ToConfiguration);
  }
  return result;
}

uint64_t *outlined release of ModifiedContent<_ViewModifier_Content<SharingPickerHostModifier>, SharingActivityPickerModifier>(uint64_t *a1)
{
  return a1;
}

uint64_t destroy for SharingActivityPickerPresentation(uint64_t *a1)
{
  outlined consume of SharingPickerSource(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);

  return swift_release();
}

void outlined consume of SharingPickerSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 < 0)
  {
    swift_release();
    swift_release();
    outlined consume of AnyShareConfiguration.Storage(a5, a6, a7, a8, a9);
    outlined consume of Text?(a10, a11, a12, a13);
    outlined consume of Text?(a14, a15, a16, a17);
  }
  else
  {
    swift_release();
    swift_release();
    outlined consume of AnyIdentifiableShareConfiguration?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
  }
}

uint64_t *initializeWithCopy for SharingActivityPickerModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v15 = a2[9];
  uint64_t v16 = a2[10];
  uint64_t v17 = a2[11];
  uint64_t v18 = a2[12];
  uint64_t v19 = a2[13];
  uint64_t v20 = a2[14];
  uint64_t v21 = a2[15];
  uint64_t v22 = a2[16];
  outlined copy of SharingPickerSource(*a2, v5, v6, v7, v8, v9, v10, v11, v14, v15, v16, v17, v18, v19, v20, v21, v22);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v14;
  a1[9] = v15;
  a1[10] = v16;
  a1[11] = v17;
  a1[12] = v18;
  a1[13] = v19;
  a1[14] = v20;
  a1[15] = v21;
  uint64_t v12 = a2[17];
  a1[16] = v22;
  a1[17] = v12;
  swift_retain();
  return a1;
}

void outlined copy of SharingPickerSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 < 0)
  {
    swift_retain();
    swift_retain();
    outlined copy of AnyShareConfiguration.Storage(a5, a6, a7, a8, a9);
    outlined copy of Text?(a10, a11, a12, a13);
    outlined copy of Text?(a14, a15, a16, a17);
  }
  else
  {
    swift_retain();
    swift_retain();
    outlined consume of AnyIdentifiableShareConfiguration?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
  }
}

void outlined consume of AnyIdentifiableShareConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), void (*a16)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (a10 != 1)
  {
    a15(a2, a3, a4, a5, a6);
    a16(a7, a8, a9, a10);
    a16(a11, a12, a13, a14);
  }
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SharingPickerHostModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<SharingPickerHostModifier>(255, a2, a3, a4, MEMORY[0x1E4F408E0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<SharingPickerHostModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SharingPickerHostModifier and conformance SharingPickerHostModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingPickerHostModifier and conformance SharingPickerHostModifier;
  if (!lazy protocol witness table cache variable for type SharingPickerHostModifier and conformance SharingPickerHostModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingPickerHostModifier and conformance SharingPickerHostModifier);
  }
  return result;
}

uint64_t initializeWithCopy for LazyLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  uint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)(v12 + 112);
  long long v14 = *(_OWORD *)(v12 + 128);
  long long v15 = *(_OWORD *)(v12 + 144);
  *(unsigned char *)(v11 + 160) = *(unsigned char *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v14;
  *(_OWORD *)(v11 + 144) = v15;
  *(_OWORD *)(v11 + 112) = v13;
  long long v16 = *(_OWORD *)(v12 + 48);
  long long v17 = *(_OWORD *)(v12 + 64);
  long long v18 = *(_OWORD *)(v12 + 96);
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(v11 + 96) = v18;
  *(_OWORD *)(v11 + 48) = v16;
  *(_OWORD *)(v11 + 64) = v17;
  long long v19 = *(_OWORD *)v12;
  long long v20 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v11 + 32) = v20;
  *(_OWORD *)unint64_t v11 = v19;
  swift_retain();
  return a1;
}

uint64_t specialized LazyStack<>.place(subviews:context:cache:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v7 = a7;
  unint64_t v14 = *(void *)(a2 + 280);
  unint64_t v15 = *(void *)(a2 + 288);
  char v16 = *(unsigned char *)(a2 + 296);
  long long v17 = *(_OWORD *)(a2 + 104);
  unint64_t v18 = a7 & 0xFFFFFFFF00000000;
  long long v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)&__dst[64] = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&__dst[80] = v19;
  *(_OWORD *)&__dst[96] = *(_OWORD *)(a2 + 152);
  long long v20 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)__dst = *(_OWORD *)(a2 + 56);
  *(_OWORD *)&__dst[16] = v20;
  *(_OWORD *)&__dst[32] = *(_OWORD *)(a2 + 88);
  *(_OWORD *)&__dst[48] = v17;
  if (v16) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  }
  ScrollGeometry.visibleRect.getter();
  CGFloat v22 = v21;
  CGFloat v24 = v23;
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(a1, a2, a3, a5, a6, v18 | v7 & 1, (uint64_t)__src);
  if (!__src[17])
  {
    uint64_t v43 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)?;
    uint64_t v44 = __src;
LABEL_93:
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)v44, v43));
    return result;
  }
  uint64_t v95 = a4;
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v29 = *(void *)v99;
  long long v30 = *(_OWORD *)&v99[8];
  long long v31 = *(_OWORD *)&v99[24];
  char v32 = v99[40];
  char v33 = v99[41];
  long long v34 = v100;
  *(void *)uint64_t v102 = *(void *)v99;
  *(_OWORD *)&v102[8] = *(_OWORD *)&v99[8];
  *(_OWORD *)&v102[24] = *(_OWORD *)&v99[24];
  v102[40] = v99[40];
  v102[41] = v99[41];
  long long v103 = v100;
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v97, __src, 0x148uLL);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = v29;
  *(_OWORD *)&v99[8] = v30;
  *(_OWORD *)&v99[24] = v31;
  v99[40] = v32;
  v99[41] = v33;
  long long v100 = v34;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v35 = *(_OWORD *)&v102[24];
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  int v36 = v102[40];
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  int v37 = v102[41];
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  long long v104 = *(_OWORD *)v102;
  long long v105 = *(_OWORD *)&v102[16];
  long long v106 = *(_OWORD *)&v102[32];
  long long v107 = v103;
  uint64_t v38 = specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:)(a1, a2, a3, (uint64_t)v97, (uint64_t)&v104);
  if (v40)
  {
LABEL_92:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v97);
    uint64_t v43 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>);
    uint64_t v44 = __dst;
    goto LABEL_93;
  }
  char v41 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, v38, 0, 1, v39);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v97[38]) == 1)
  {
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)v97);
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)));
    *(unsigned char *)(v95 + 64) = 1;
    return result;
  }
  int v92 = v36;
  uint64_t v45 = v97[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v95 = v45;
  CGRect.subscript.getter();
  double v48 = v46;
  if (*(double *)&v97[34] >= *(double *)&v97[35])
  {
    double v46 = *MEMORY[0x1E4F1DB20];
    double v50 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v51 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v52 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    double v49 = v47 - v46;
    if (LOBYTE(v97[3]))
    {
      double v50 = *(double *)&v97[34];
    }
    else
    {
      double v46 = *(double *)&v97[34];
      double v50 = v48;
    }
    if (LOBYTE(v97[3])) {
      double v51 = v49;
    }
    else {
      double v51 = *(double *)&v97[35] - *(double *)&v97[34];
    }
    if (LOBYTE(v97[3])) {
      double v52 = *(double *)&v97[35] - *(double *)&v97[34];
    }
    else {
      double v52 = v49;
    }
  }
  v108.origin.x = v22;
  v108.origin.y = v24;
  v108.size.width = v26;
  v108.size.height = v28;
  *(CGRect *)(v95 + 8) = CGRectUnion(*(CGRect *)&v46, v108);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  uint64_t v53 = v105;
  *(_OWORD *)uint64_t v99 = v104;
  *(_OWORD *)&v99[16] = v105;
  *(_OWORD *)&v99[32] = v106;
  long long v100 = v107;
  *(_OWORD *)a3 = v104;
  *(void *)(a3 + 16) = v53;
  *(unsigned char *)(a3 + 24) = 0;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v102[24];
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  *(void *)(a3 + 96) = v103;
  outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyHStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  *(void *)(a3 + 104) = *((void *)&v103 + 1);
  *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)__src));
  uint64_t v54 = *(void *)(a3 + 48);
  uint64_t v55 = v97[32];
  uint64_t v56 = v97[33];
  if (v54 != *(void *)(a3 + 56)) {
    goto LABEL_24;
  }
  if (v97[33] >= v97[32])
  {
    if (v97[33] + 1 < v97[32])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v97[32] != v97[33] + 1)
    {
LABEL_24:
      if (v97[33] >= v97[32])
      {
        uint64_t v57 = v97[33] + 1;
        if (v97[33] + 1 < v97[32])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        uint64_t v54 = v97[32];
      }
      else
      {
        uint64_t v54 = v97[12];
        uint64_t v57 = v97[12];
      }
      *(void *)(a3 + 48) = v54;
      *(void *)(a3 + 56) = v57;
      double v58 = *(double *)&v97[34];
      double v59 = *(double *)&v97[35];
      if (*(double *)&v97[34] < *(double *)&v97[35])
      {
        if (*(double *)&v97[34] <= *(double *)&v97[35])
        {
LABEL_32:
          *(double *)(a3 + 64) = v58;
          *(double *)(a3 + 72) = v59;
          if (v41)
          {
            if (v56 >= v55)
            {
              uint64_t v60 = v56 + 1;
              if (v56 + 1 < v55)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v60 = v97[12];
            }
          }
          else
          {
            uint64_t v60 = 0;
          }
          *(void *)(a3 + 32) = v60;
          *(unsigned char *)(a3 + 40) = (v41 & 1) == 0;
          if (v58 < 0.01 && v59 < 0.01)
          {
            uint64_t v54 = 0;
            *(void *)(a3 + 48) = 0;
            *(void *)(a3 + 56) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      double v58 = *(double *)&v97[14];
      double v59 = *(double *)&v97[14];
      goto LABEL_32;
    }
  }
LABEL_40:
  uint64_t v93 = v55;
  uint64_t v94 = v56;
  uint64_t v61 = v97[39];
  uint64_t v62 = v97[40];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationCache.merge(_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(uint64_t *)(a3 + 112);
  if (*(void *)(result + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(result, *(void *)(a3 + 120)));
    double v64 = *(double *)&result;
    if (v65) {
      double v64 = 0.0;
    }
    double v66 = v63 + v64;
  }
  else
  {
    double v66 = 32.0;
  }
  int v67 = v92;
  double v68 = *(double *)(a3 + 64);
  uint64_t v70 = v93;
  uint64_t v69 = v94;
  if (v29 != 1)
  {
    if (!v29)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v54 == 0x8000000000000000 && v29 == -1) {
      goto LABEL_99;
    }
    v54 /= v29;
  }
  if ((v92 & 1) == 0)
  {
    if (v54)
    {
      if (v68 >= 0.01) {
        goto LABEL_66;
      }
      double v71 = v66 * (double)v54;
    }
    else
    {
      if (fabs(v68) <= 0.01) {
        goto LABEL_66;
      }
      double v71 = -v68;
    }
    double v96 = v71;
    if (fabs(v71) > 0.01)
    {
      double v72 = v68 + v71;
      double v73 = v71 + *(double *)(a3 + 72);
      if (v72 > v73)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 64) = v72;
      *(double *)(a3 + 72) = v73;
      *(double *)(v95 + 48) = v71;
      uint64_t v74 = *(void *)v95;
      uint64_t v75 = *(void *)(*(void *)v95 + 16);
      if (v75)
      {
        unint64_t v76 = 0;
        uint64_t v77 = 40;
        while (1)
        {
          *(double *)&uint64_t result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&uint64_t result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v74));
            uint64_t v74 = result;
          }
          if (v76 >= *(void *)(v74 + 16)) {
            break;
          }
          ++v76;
          long long v78 = (void (*)(void *, void))_Placement.anchorPosition.modify();
          *long long v79 = v71 + *v79;
          v78(__src, 0);
          v77 += 72;
          if (v75 == v76)
          {
            *(void *)uint64_t v95 = v74;
            uint64_t v70 = v93;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&uint64_t result = COERCE_DOUBLE(specialized LazyStack<>.log(_:)((uint64_t)&v96));
      int v67 = v92;
      uint64_t v69 = v94;
    }
  }
LABEL_66:
  double v80 = *(double *)&v97[35];
  if (*(double *)&v97[34] < *(double *)&v97[35])
  {
    if (*(double *)&v97[34] <= *(double *)&v97[35]) {
      goto LABEL_70;
    }
    __break(1u);
  }
  double v80 = *(double *)&v97[14];
LABEL_70:
  if (v69 >= v70)
  {
    uint64_t v81 = v69 + 1;
    if (v69 + 1 < v70)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v81 = v97[12];
  }
  double v82 = *(double *)(a2 + 32);
  if (v41)
  {
    double v83 = vabdd_f64(v80, v82);
    *(unsigned char *)(v95 + 40) = v83 >= 1.0;
    if (v83 >= 1.0) {
      specialized LazyStack<>.log(_:)(a2, 0);
    }
    goto LABEL_91;
  }
  if (v82 + 0.01 < v80)
  {
    *(unsigned char *)(v95 + 40) = 1;
    specialized LazyStack<>.log(_:)(a2, 0);
LABEL_91:
    specialized LazyStack<>.log(_:)((double *)a3, v95, *(double *)&v35, *((double *)&v35 + 1));
    goto LABEL_92;
  }
  __src[0] = 2 * v29;
  *(double *)&uint64_t result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v81))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v84 = (result - v81) & ~((result - v81) >> 63);
  if (v29 == 1)
  {
LABEL_84:
    double v88 = v80 + v66 * (double)v84;
    if (v88 >= v82) {
      double v89 = v82;
    }
    else {
      double v89 = v80 + v66 * (double)v84;
    }
    double v90 = v89 * 0.1;
    if ((v67 & v37) != 0) {
      double v90 = 0.01;
    }
    double v91 = vabdd_f64(v82, v88);
    *(unsigned char *)(v95 + 40) = v90 < v91;
    if (v90 < v91) {
      specialized LazyStack<>.log(_:)();
    }
    goto LABEL_91;
  }
  BOOL v85 = __OFADD__(v84, v29);
  uint64_t v86 = v84 + v29;
  if (!v85)
  {
    uint64_t v87 = v86 - 1;
    if (v87 == 0x8000000000000000 && v29 == -1) {
      goto LABEL_104;
    }
    uint64_t v84 = v87 / v29;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

{
  char v7;
  unint64_t v14;
  unint64_t v15;
  char v16;
  long long v17;
  unint64_t v18;
  long long v19;
  long long v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  uint64_t v29;
  long long v30;
  long long v31;
  char v32;
  char v33;
  long long v34;
  long long v35;
  int v36;
  int v37;
  uint64_t v38;
  double v39;
  char v40;
  char v41;
  uint64_t result;
  uint64_t (*v43)(void);
  unsigned char *v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  double v64;
  char v65;
  double v66;
  int v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (*v78)(void *, void);
  uint64_t v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  double v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  void v97[42];
  void __src[41];
  unsigned char v99[48];
  long long v100;
  unsigned char __dst[328];
  unsigned char v102[48];
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  long long v107;
  CGRect v108;

  char v7 = a7;
  unint64_t v14 = *(void *)(a2 + 280);
  unint64_t v15 = *(void *)(a2 + 288);
  char v16 = *(unsigned char *)(a2 + 296);
  long long v17 = *(_OWORD *)(a2 + 104);
  unint64_t v18 = a7 & 0xFFFFFFFF00000000;
  long long v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)&__dst[64] = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&__dst[80] = v19;
  *(_OWORD *)&__dst[96] = *(_OWORD *)(a2 + 152);
  long long v20 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)__dst = *(_OWORD *)(a2 + 56);
  *(_OWORD *)&__dst[16] = v20;
  *(_OWORD *)&__dst[32] = *(_OWORD *)(a2 + 88);
  *(_OWORD *)&__dst[48] = v17;
  if (v16) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v15, v14));
  }
  ScrollGeometry.visibleRect.getter();
  CGFloat v22 = v21;
  CGFloat v24 = v23;
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)(a1, a2, a3, a5, a6, v18 | v7 & 1, (uint64_t)__src);
  if (!__src[17])
  {
    uint64_t v43 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)?;
    uint64_t v44 = __src;
LABEL_93:
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)v44, v43));
    return result;
  }
  uint64_t v95 = a4;
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v29 = *(void *)v99;
  long long v30 = *(_OWORD *)&v99[8];
  long long v31 = *(_OWORD *)&v99[24];
  char v32 = v99[40];
  char v33 = v99[41];
  long long v34 = v100;
  *(void *)uint64_t v102 = *(void *)v99;
  *(_OWORD *)&v102[8] = *(_OWORD *)&v99[8];
  *(_OWORD *)&v102[24] = *(_OWORD *)&v99[24];
  v102[40] = v99[40];
  v102[41] = v99[41];
  long long v103 = v100;
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  memcpy(v97, __src, 0x148uLL);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = v29;
  *(_OWORD *)&v99[8] = v30;
  *(_OWORD *)&v99[24] = v31;
  v99[40] = v32;
  v99[41] = v33;
  long long v100 = v34;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  long long v35 = *(_OWORD *)&v102[24];
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  int v36 = v102[40];
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  int v37 = v102[41];
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  long long v104 = *(_OWORD *)v102;
  long long v105 = *(_OWORD *)&v102[16];
  long long v106 = *(_OWORD *)&v102[32];
  long long v107 = v103;
  uint64_t v38 = specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:)(a1, a2, a3, (uint64_t)v97, (uint64_t)&v104);
  if (v40)
  {
LABEL_92:
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v97);
    uint64_t v43 = (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>);
    uint64_t v44 = __dst;
    goto LABEL_93;
  }
  char v41 = specialized StackPlacement.place(subviews:from:position:stopping:style:)(a1, v38, 0, 1, v39);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0 || LOBYTE(v97[38]) == 1)
  {
    outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)v97);
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of ScrollableCollection?((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)));
    *(unsigned char *)(v95 + 64) = 1;
    return result;
  }
  int v92 = v36;
  uint64_t v45 = v97[31];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v95 = v45;
  CGRect.subscript.getter();
  double v48 = v46;
  if (*(double *)&v97[34] >= *(double *)&v97[35])
  {
    double v46 = *MEMORY[0x1E4F1DB20];
    double v50 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v51 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v52 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  else
  {
    double v49 = v47 - v46;
    if (LOBYTE(v97[3]))
    {
      double v50 = *(double *)&v97[34];
    }
    else
    {
      double v46 = *(double *)&v97[34];
      double v50 = v48;
    }
    if (LOBYTE(v97[3])) {
      double v51 = v49;
    }
    else {
      double v51 = *(double *)&v97[35] - *(double *)&v97[34];
    }
    if (LOBYTE(v97[3])) {
      double v52 = *(double *)&v97[35] - *(double *)&v97[34];
    }
    else {
      double v52 = v49;
    }
  }
  v108.origin.x = v22;
  v108.origin.y = v24;
  v108.size.width = v26;
  v108.size.height = v28;
  *(CGRect *)(v95 + 8) = CGRectUnion(*(CGRect *)&v46, v108);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  uint64_t v53 = v105;
  *(_OWORD *)uint64_t v99 = v104;
  *(_OWORD *)&v99[16] = v105;
  *(_OWORD *)&v99[32] = v106;
  long long v100 = v107;
  *(_OWORD *)a3 = v104;
  *(void *)(a3 + 16) = v53;
  *(unsigned char *)(a3 + 24) = 0;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v102[24];
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  *(void *)(a3 + 96) = v103;
  outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src);
  outlined init with copy of StackPlacement<LazyVStackLayout>((uint64_t)__dst, (uint64_t)__src);
  *(void *)uint64_t v99 = *(void *)v102;
  *(_OWORD *)&v99[8] = *(_OWORD *)&v102[8];
  *(_OWORD *)&v99[24] = *(_OWORD *)&v102[24];
  v99[40] = v102[40];
  v99[41] = v102[41];
  long long v100 = v103;
  *(void *)(a3 + 104) = *((void *)&v103 + 1);
  *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyVStackLayout>((uint64_t)__src));
  uint64_t v54 = *(void *)(a3 + 48);
  uint64_t v55 = v97[32];
  uint64_t v56 = v97[33];
  if (v54 != *(void *)(a3 + 56)) {
    goto LABEL_24;
  }
  if (v97[33] >= v97[32])
  {
    if (v97[33] + 1 < v97[32])
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    if (v97[32] != v97[33] + 1)
    {
LABEL_24:
      if (v97[33] >= v97[32])
      {
        uint64_t v57 = v97[33] + 1;
        if (v97[33] + 1 < v97[32])
        {
LABEL_97:
          __break(1u);
          __break(1u);
          goto LABEL_98;
        }
        uint64_t v54 = v97[32];
      }
      else
      {
        uint64_t v54 = v97[12];
        uint64_t v57 = v97[12];
      }
      *(void *)(a3 + 48) = v54;
      *(void *)(a3 + 56) = v57;
      double v58 = *(double *)&v97[34];
      double v59 = *(double *)&v97[35];
      if (*(double *)&v97[34] < *(double *)&v97[35])
      {
        if (*(double *)&v97[34] <= *(double *)&v97[35])
        {
LABEL_32:
          *(double *)(a3 + 64) = v58;
          *(double *)(a3 + 72) = v59;
          if (v41)
          {
            if (v56 >= v55)
            {
              uint64_t v60 = v56 + 1;
              if (v56 + 1 < v55)
              {
LABEL_101:
                __break(1u);
                goto LABEL_102;
              }
            }
            else
            {
              uint64_t v60 = v97[12];
            }
          }
          else
          {
            uint64_t v60 = 0;
          }
          *(void *)(a3 + 32) = v60;
          *(unsigned char *)(a3 + 40) = (v41 & 1) == 0;
          if (v58 < 0.01 && v59 < 0.01)
          {
            uint64_t v54 = 0;
            *(void *)(a3 + 48) = 0;
            *(void *)(a3 + 56) = 0;
          }
          goto LABEL_40;
        }
        __break(1u);
      }
      double v58 = *(double *)&v97[14];
      double v59 = *(double *)&v97[14];
      goto LABEL_32;
    }
  }
LABEL_40:
  uint64_t v93 = v55;
  uint64_t v94 = v56;
  uint64_t v61 = v97[39];
  uint64_t v62 = v97[40];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationCache.merge(_:)(v61, v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(uint64_t *)(a3 + 112);
  if (*(void *)(result + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(result, *(void *)(a3 + 120)));
    double v64 = *(double *)&result;
    if (v65) {
      double v64 = 0.0;
    }
    double v66 = v63 + v64;
  }
  else
  {
    double v66 = 32.0;
  }
  int v67 = v92;
  double v68 = *(double *)(a3 + 64);
  uint64_t v70 = v93;
  uint64_t v69 = v94;
  if (v29 != 1)
  {
    if (!v29)
    {
LABEL_95:
      __break(1u);
      __break(1u);
      goto LABEL_96;
    }
    if (v54 == 0x8000000000000000 && v29 == -1) {
      goto LABEL_99;
    }
    v54 /= v29;
  }
  if ((v92 & 1) == 0)
  {
    if (v54)
    {
      if (v68 >= 0.01) {
        goto LABEL_66;
      }
      double v71 = v66 * (double)v54;
    }
    else
    {
      if (fabs(v68) <= 0.01) {
        goto LABEL_66;
      }
      double v71 = -v68;
    }
    double v96 = v71;
    if (fabs(v71) > 0.01)
    {
      double v72 = v68 + v71;
      double v73 = v71 + *(double *)(a3 + 72);
      if (v72 > v73)
      {
LABEL_102:
        __break(1u);
        goto LABEL_103;
      }
      *(double *)(a3 + 64) = v72;
      *(double *)(a3 + 72) = v73;
      *(double *)(v95 + 56) = v71;
      uint64_t v74 = *(void *)v95;
      uint64_t v75 = *(void *)(*(void *)v95 + 16);
      if (v75)
      {
        unint64_t v76 = 0;
        uint64_t v77 = 40;
        while (1)
        {
          *(double *)&uint64_t result = COERCE_DOUBLE(swift_isUniquelyReferenced_nonNull_native());
          if ((result & 1) == 0)
          {
            *(double *)&uint64_t result = COERCE_DOUBLE(specialized _ArrayBuffer._consumeAndCreateNew()(v74));
            uint64_t v74 = result;
          }
          if (v76 >= *(void *)(v74 + 16)) {
            break;
          }
          ++v76;
          long long v78 = (void (*)(void *, void))_Placement.anchorPosition.modify();
          *(double *)(v79 + 8) = v71 + *(double *)(v79 + 8);
          v78(__src, 0);
          v77 += 72;
          if (v75 == v76)
          {
            *(void *)uint64_t v95 = v74;
            uint64_t v70 = v93;
            goto LABEL_65;
          }
        }
        __break(1u);
        goto LABEL_95;
      }
LABEL_65:
      *(double *)&uint64_t result = COERCE_DOUBLE(specialized LazyStack<>.log(_:)((uint64_t)&v96));
      int v67 = v92;
      uint64_t v69 = v94;
    }
  }
LABEL_66:
  double v80 = *(double *)&v97[35];
  if (*(double *)&v97[34] < *(double *)&v97[35])
  {
    if (*(double *)&v97[34] <= *(double *)&v97[35]) {
      goto LABEL_70;
    }
    __break(1u);
  }
  double v80 = *(double *)&v97[14];
LABEL_70:
  if (v69 >= v70)
  {
    uint64_t v81 = v69 + 1;
    if (v69 + 1 < v70)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
  }
  else
  {
    uint64_t v81 = v97[12];
  }
  double v82 = *(double *)(a2 + 40);
  if (v41)
  {
    double v83 = vabdd_f64(v80, v82);
    *(unsigned char *)(v95 + 40) = v83 >= 1.0;
    if (v83 >= 1.0) {
      specialized LazyStack<>.log(_:)(a2, 1);
    }
    goto LABEL_91;
  }
  if (v82 + 0.01 < v80)
  {
    *(unsigned char *)(v95 + 40) = 1;
    specialized LazyStack<>.log(_:)(a2, 1);
LABEL_91:
    specialized LazyStack<>.log(_:)((double *)a3, v95, *(double *)&v35, *((double *)&v35 + 1));
    goto LABEL_92;
  }
  __src[0] = 2 * v29;
  *(double *)&uint64_t result = COERCE_DOUBLE(_ViewList_Node.estimatedCount(style:)());
  if (__OFSUB__(result, v81))
  {
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  uint64_t v84 = (result - v81) & ~((result - v81) >> 63);
  if (v29 == 1)
  {
LABEL_84:
    double v88 = v80 + v66 * (double)v84;
    if (v88 >= v82) {
      double v89 = v82;
    }
    else {
      double v89 = v80 + v66 * (double)v84;
    }
    double v90 = v89 * 0.1;
    if ((v67 & v37) != 0) {
      double v90 = 0.01;
    }
    double v91 = vabdd_f64(v82, v88);
    *(unsigned char *)(v95 + 40) = v90 < v91;
    if (v90 < v91) {
      specialized LazyStack<>.log(_:)();
    }
    goto LABEL_91;
  }
  BOOL v85 = __OFADD__(v84, v29);
  uint64_t v86 = v84 + v29;
  if (!v85)
  {
    uint64_t v87 = v86 - 1;
    if (v87 == 0x8000000000000000 && v29 == -1) {
      goto LABEL_104;
    }
    uint64_t v84 = v87 / v29;
    goto LABEL_84;
  }
LABEL_103:
  __break(1u);
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of StackPlacement<LazyHStackLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of StackPlacement<LazyHStackLayout>(uint64_t a1)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for StackPlacement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (a1 + v4 + (v8 | 7) + 1) & ~(v8 | 7);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v8 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8, AssociatedTypeWitness);
  unint64_t v10 = ((((((((*(void *)(v7 + 56) + ((v8 + 16) & ~v8) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
          + 43) & 0xFFFFFFFFFFFFFFF8)
        + 31) & 0xFFFFFFFFFFFFFFF8)
      + 15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v11 = (void *)(((v10 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v11 >= 0xFFFFFFFFuLL)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v11 + 2));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for _CommandsOutputs()
{
  return swift_bridgeObjectRelease();
}

void type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

double LazyLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v11 = *((unsigned char *)v10 + 8);
  uint64_t v12 = v10[2];
  char v13 = *((unsigned char *)v10 + 24);
  uint64_t v30 = *v10;
  uint64_t v9 = v30;
  char v31 = v11;
  uint64_t v32 = v12;
  char v33 = v13;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, v4, v6);
  uint64_t v14 = *(int *)(a2 + 36);
  uint64_t v15 = *(void *)(v2 + *(int *)(a2 + 40));
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v21 = v4;
  uint64_t v22 = v16;
  long long v23 = *(_OWORD *)(v2 + v14);
  uint64_t v24 = v15;
  double v25 = v8;
  uint64_t v26 = v9;
  char v27 = v11;
  uint64_t v28 = v12;
  char v29 = v13;
  swift_retain();
  ViewSizeCache.get(_:makeValue:)();
  double v18 = v17;
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v4);
  return v18;
}

uint64_t initializeWithCopy for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  char v11 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = v10 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 | 7) + 1;
  uint64_t v15 = (void *)((v14 + v7) & ~(v13 | 7));
  uint64_t v16 = (void *)((unint64_t)&v8[v14] & ~(v13 | 7));
  *uint64_t v15 = *v16;
  double v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  double v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  *double v17 = *v18;
  v11(((unint64_t)v17 + v13 + 8) & ~v13, ((unint64_t)v18 + v13 + 8) & ~v13, AssociatedTypeWitness);
  uint64_t v19 = *(void *)(v12 + 48) + ((v13 + 16) & ~v13) + 7;
  long long v20 = (_OWORD *)(((unint64_t)v15 + v19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (_OWORD *)(((unint64_t)v16 + v19) & 0xFFFFFFFFFFFFFFF8);
  *long long v20 = *v21;
  uint64_t v22 = (_DWORD *)(((unint64_t)v21 + 19) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (unint64_t)v22 + 43;
  uint64_t v24 = (_DWORD *)(((unint64_t)v20 + 19) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v22;
  unint64_t v25 = ((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
  *(void *)unint64_t v25 = v27;
  unint64_t v28 = ((unint64_t)v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v28 = *(void *)v29;
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  uint64_t v30 = (void *)(((unint64_t)v24 + 43) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = (v23 & 0xFFFFFFFFFFFFFFF8) + 15;
  unint64_t v32 = (v23 & 0xFFFFFFFFFFFFFFF8) + 31;
  void *v30 = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v33 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v34 = *(void *)v31;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v31 + 8);
  *(void *)unint64_t v33 = v34;
  v32 &= 0xFFFFFFFFFFFFFFF8;
  long long v35 = (void *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v35 = *(void *)v32;
  int v36 = (void *)((v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v37 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v37 = *v36;
  unint64_t v38 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = *(void *)v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v40 < 0xFFFFFFFF)
  {
    long long v45 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
    *(_OWORD *)(v38 + 16) = v45;
    long long v46 = *(_OWORD *)(v39 + 32);
    long long v47 = *(_OWORD *)(v39 + 48);
    long long v48 = *(_OWORD *)(v39 + 64);
    *(_OWORD *)(v38 + 79) = *(_OWORD *)(v39 + 79);
    *(_OWORD *)(v38 + 48) = v47;
    *(_OWORD *)(v38 + 64) = v48;
    *(_OWORD *)(v38 + 32) = v46;
  }
  else
  {
    *(void *)unint64_t v38 = v40;
    *(_DWORD *)(v38 + 8) = *(_DWORD *)(v39 + 8);
    uint64_t v41 = *(void *)(v39 + 40);
    *(void *)(v38 + 40) = v41;
    *(void *)(v38 + 48) = *(void *)(v39 + 48);
    BOOL v42 = **(void (***)(unint64_t, unint64_t, uint64_t))(v41 - 8);
    swift_retain();
    v42(v38 + 16, v39 + 16, v41);
    *(_DWORD *)(v38 + 56) = *(_DWORD *)(v39 + 56);
    *(_DWORD *)(v38 + 60) = *(_DWORD *)(v39 + 60);
    *(void *)(v38 + 64) = *(void *)(v39 + 64);
    *(void *)(v38 + 72) = *(void *)(v39 + 72);
    int v43 = *(_DWORD *)(v39 + 80);
    *(unsigned char *)(v38 + 84) = *(unsigned char *)(v39 + 84);
    *(_DWORD *)(v38 + 80) = v43;
    int v44 = *(_DWORD *)(v39 + 91);
    *(_DWORD *)(v38 + 88) = *(_DWORD *)(v39 + 88);
    *(_DWORD *)(v38 + 91) = v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  double v49 = (void *)((v38 + 102) & 0xFFFFFFFFFFFFFFF8);
  double v50 = (void *)((v39 + 102) & 0xFFFFFFFFFFFFFFF8);
  *double v49 = *v50;
  double v51 = (_OWORD *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  double v52 = (_OWORD *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v51 = *v52;
  uint64_t v53 = (_OWORD *)(((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = (_OWORD *)(((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v53 = *v54;
  unint64_t v55 = ((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = ((unint64_t)v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v55 = *(_OWORD *)v56;
  *(unsigned char *)(v55 + 16) = *(unsigned char *)(v56 + 16);
  uint64_t v57 = (void *)(((unint64_t)v53 + 47) & 0xFFFFFFFFFFFFFFF8);
  double v58 = (void *)(((unint64_t)v54 + 47) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v57 = *v58;
  v57[1] = v58[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12)
          {
            int64_t v3 = v11 + 4;
            if (v11 + 4 >= v8) {
              goto LABEL_25;
            }
            unint64_t v12 = *(void *)(v4 + 8 * v3);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v14, *(double *)(*(void *)(a1 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned char v5[40];
  unsigned char v6[40];
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v4, (uint64_t)v5);
      specialized Set._Variant.insert(_:)((uint64_t)v6, (uint64_t)v5);
      outlined destroy of Toolbar.BarLocation((uint64_t)v6);
      v4 += 40;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unsigned char v5[48];
  unsigned char v6[48];
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of ToolbarItemPlacement.Role(v4, (uint64_t)v5);
      specialized Set._Variant.insert(_:)((uint64_t)v6, (uint64_t)v5);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v6);
      v4 += 48;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt v14[2];
  uint64_t v15;

  lazy protocol witness table accessor for type EventID and conformance EventID();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12)
          {
            int64_t v3 = v11 + 4;
            if (v11 + 4 >= v8) {
              goto LABEL_25;
            }
            unint64_t v12 = *(void *)(v4 + 8 * v3);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(v14, *(void *)(*(void *)(a1 + 48) + 16 * v10), *(void *)(*(void *)(a1 + 48) + 16 * v10 + 8));
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::UInt v14;
  uint64_t v15;

  lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v15 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12)
          {
            int64_t v3 = v11 + 4;
            if (v11 + 4 >= v8) {
              goto LABEL_25;
            }
            unint64_t v12 = *(void *)(v4 + 8 * v3);
            if (!v12) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    uint64_t result = specialized Set._Variant.insert(_:)(&v14, *(void *)(*(void *)(a1 + 48) + 8 * v10));
  }
  int64_t v13 = v11 + 5;
  if (v13 >= v8)
  {
LABEL_25:
    swift_release();
    return v15;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::UInt *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;

  uint64_t v2 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type UniqueID and conformance UniqueID();
  uint64_t result = Set.init(minimumCapacity:)();
  unint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::UInt *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (**v16)(uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  void v21[2];
  void (**v22)(char *, char *, uint64_t);
  uint64_t v23;
  unsigned int (**v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;

  uint64_t v2 = type metadata accessor for URL();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v28 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v27 = (char *)v21 - v6;
  type metadata accessor for TextSelection?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v21 - v8;
  unint64_t v10 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  unint64_t v29 = Set.init(minimumCapacity:)();
  if (v10)
  {
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    int64_t v11 = v3 + 16;
    int64_t v13 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    double v14 = *(void *)(v11 + 56);
    uint64_t v15 = v11 + 40;
    uint64_t v24 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 32);
    unint64_t v25 = v12;
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    unint64_t v23 = v14;
    unint64_t v26 = v11;
    uint64_t v16 = (void (**)(uint64_t, uint64_t))(v11 - 8);
    v21[1] = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    double v18 = (uint64_t)v27;
    double v17 = v28;
    while (1)
    {
      v25(v9, v13, v2);
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v9, 0, 1, v2);
      if ((*v24)(v9, 1, v2) == 1) {
        break;
      }
      (*v22)(v17, v9, v2);
      specialized Set._Variant.insert(_:)(v18, v17);
      (*v16)(v18, v2);
      v13 += v23;
      if (!--v10) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v9, 1, 1, v2);
  }
  return v29;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for UTType();
  int64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int64_t v8 = (char *)&v16 - v7;
  unint64_t v9 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  uint64_t result = Set.init(minimumCapacity:)();
  double v17 = result;
  if (v9)
  {
    int64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    int64_t v11 = v3 + 16;
    unint64_t v12 = v13;
    double v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v5, v14, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v5);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

uint64_t specialized LazyStack<>.log(_:)(double *a1, uint64_t a2, double a3, double a4)
{
  return specialized LazyStack<>.log(_:)(a1, a2, 0x8000000188328C80, a3, a4);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, 0x8000000188328BB0, a3, a4);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, 0x69724748797A614CLL, a3, a4);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, 0x69724756797A614CLL, a3, a4);
}

uint64_t type metadata accessor for _LazyStack_Cache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PlacementProperties()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyLayoutComputer.Engine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for StackPlacement()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout;
  if (!lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyVStackLayout and conformance LazyVStackLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone;
  if (!lazy protocol witness table cache variable for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone);
  }
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance SwipeActions.Feature()
{
  return PreferenceKeys.add(_:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in _ContentShapeModifier<A>()
{
  return &protocol witness table for _ContentShapeModifier<A>;
}

uint64_t base witness table accessor for GraphInput in RepresentablePreferredFocusableViewInput<A>()
{
  return swift_getWitnessTable();
}

uint64_t destroy for AccessibilityProxyModifier(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

ValueMetadata *type metadata accessor for ResolvedSectionStyle()
{
  return &type metadata for ResolvedSectionStyle;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance LazyPreference<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t *initializeBufferWithCopyOfBuffer for BorderedButtonColorSpec.LabelStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

uint64_t key path getter for EnvironmentValues.springLoadingBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t View.buttonBorderShape(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();

  return swift_release();
}

ValueMetadata *type metadata accessor for DisableDeferredAccessibilityAttachmentModifier()
{
  return &type metadata for DisableDeferredAccessibilityAttachmentModifier;
}

ValueMetadata *type metadata accessor for DetachDeferredAccessibilityAttachmentModifier()
{
  return &type metadata for DetachDeferredAccessibilityAttachmentModifier;
}

ValueMetadata *type metadata accessor for DetachedGeometryModifier()
{
  return &type metadata for DetachedGeometryModifier;
}

ValueMetadata *type metadata accessor for AccessibilityAttachment.Key()
{
  return &type metadata for AccessibilityAttachment.Key;
}

uint64_t partial apply for closure #2 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t partial apply for closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(a1);
}

SwiftUI::KeyEquivalent __swiftcall KeyEquivalent.init(extendedGraphemeClusterLiteral:)(SwiftUI::KeyEquivalent extendedGraphemeClusterLiteral)
{
  *uint64_t v1 = extendedGraphemeClusterLiteral;
  return extendedGraphemeClusterLiteral;
}

uint64_t partial apply for implicit closure #1 in _ViewOutputs.transformPlatformItemList(inputs:transform:)()
{
  return implicit closure #1 in _ViewOutputs.transformPlatformItemList(inputs:transform:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t getEnumTagSinglePayload for LoadingState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DE4860);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance NavigationLinkTraitValueModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[1];
  *(void *)a1 = *v1;
  *(_OWORD *)(a1 + 8) = xmmword_18834BB90;
  *(void *)(a1 + 24) = v2;
  return swift_retain();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ContentScrollViewPreferenceKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static ContentScrollViewPreferenceKey.defaultValue;

  return swift_bridgeObjectRetain();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ActiveEditMenuKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)a1[5];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  int64_t v8 = (void *)a2[5];
  if (v3 == (void *)1)
  {
    if (v8 == (void *)1) {
      return 1;
    }
    goto LABEL_5;
  }
  if (v8 == (void *)1)
  {
LABEL_5:
    uint64_t v13 = a1[4];
    uint64_t v14 = a1[2];
    uint64_t v10 = a2[1];
    uint64_t v11 = *a1;
    uint64_t v12 = a1[1];
    outlined copy of ActiveEditMenu?(*a1, v12, v14, v2, v13, v3);
    outlined copy of ActiveEditMenu?(v4, v10, v5, v6, v7, v8);
    outlined consume of ActiveEditMenu?(v11, v12, v14, v2, v13, v3);
    outlined consume of ActiveEditMenu?(v4, v10, v5, v6, v7, v8);
    return 0;
  }
  return *a1 == v4;
}

uint64_t instantiation function for generic protocol witness table for _UIHostingView<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue()(uint64_t *a1)
{
  return closure #4 in ReadDestinationsModifier.RequestsTransform.updateValue()(a1, (_OWORD *)(v1 + 16), (_OWORD *)(v1 + 64));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EditModeScopeModifier.TransformModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED434B60;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED459930;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED4647B0;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for ContentConfigurationBasedRootEnvironment();
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED45D6B0;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for SearchEnvironmentWritingModifier(0);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED462078;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED44C100;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED461878;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED462108;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED4494E0;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  int v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  long long v11;
  uint64_t v12;
  int v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  uint64_t v19;
  int v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  int v26;

  long long v4 = *(_DWORD *)(a2 + 80);
  int v11 = *(_OWORD *)(a2 + 56);
  long long v5 = *(void *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(_OWORD *)(a2 + 64);
  uint64_t v24 = *(_OWORD *)(a2 + 48);
  unint64_t v25 = v7;
  unint64_t v26 = v4;
  uint64_t v8 = *(_OWORD *)(a2 + 16);
  uint64_t v21 = *(_OWORD *)a2;
  int v22 = v8;
  unint64_t v23 = v6;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTargetModifier>, (uint64_t)&type metadata for ScrollTargetModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphInputs.scrollTargetRole.setter();
  _GraphInputs.scrollTargetRemovePreference.setter();
  uint64_t v12 = v21;
  long long v13 = DWORD2(v21);
  uint64_t v14 = v22;
  uint64_t v15 = v23 | 0x80000000000;
  long long v16 = *((void *)&v23 + 1);
  uint64_t v17 = v24;
  int v18 = v11;
  long long v19 = v5;
  long long v20 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED457578;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED47CF08[0];
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED453F50;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&unsigned char v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  int v18 = *(_OWORD *)a2;
  *(_OWORD *)long long v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>, (uint64_t)&type metadata for NavigationPresentationAdaptorModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
  PropertyList.subscript.setter();
  unint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  long long v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  long long v16 = *(void *)&v20[24];
  uint64_t v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED459968;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED450EA8;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED41DAB0;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for KeyPressModifier(0);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&unsigned char v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  int v18 = *(_OWORD *)a2;
  *(_OWORD *)long long v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, &lazy cache variable for type metadata for _GraphValue<StackDepthModifier>, (uint64_t)&type metadata for StackDepthModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>();
  _GraphInputs.subscript.setter();
  unint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  long long v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  long long v16 = *(void *)&v20[24];
  uint64_t v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED42B3B8;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED4347B8;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED4399E0;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED443BB8;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&unsigned char v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  int v18 = *(_OWORD *)a2;
  *(_OWORD *)long long v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  PropertyList.subscript.setter();
  unint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  long long v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  long long v16 = *(void *)&v20[24];
  uint64_t v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED454730;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for TabViewCustomizationModifier();
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&unsigned char v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  int v18 = *(_OWORD *)a2;
  *(_OWORD *)long long v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>, (uint64_t)&type metadata for ObservableDocumentBoxModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  PropertyList.subscript.setter();
  unint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  long long v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  long long v16 = *(void *)&v20[24];
  uint64_t v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED45D680;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&unsigned char v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  int v18 = *(_OWORD *)a2;
  *(_OWORD *)long long v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput();
  uint64_t result = PropertyList.subscript.getter();
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    PropertyList.subscript.setter();
    unint64_t v9 = v18;
    uint64_t v10 = DWORD2(v18);
    int v11 = *(void *)v19;
    uint64_t v12 = *(_OWORD *)&v19[8];
    long long v13 = *(void *)&v19[24];
    uint64_t v14 = *(void *)v20;
    uint64_t v15 = *(_OWORD *)&v20[8];
    long long v16 = *(void *)&v20[24];
    uint64_t v17 = v21;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    a3(v8, &v9);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  return result;
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED437EB8;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED43D138;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED457DD0;
  outlined retain of _ViewInputs(a2);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED45C4D8;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  uint64_t v17;
  int v18;
  long long v19;
  unsigned char v20[32];
  unsigned char v21[32];
  int v22;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v21[16] = v5;
  int v22 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v19 = *(_OWORD *)a2;
  *(_OWORD *)long long v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  uint64_t v7 = (void (__cdecl *)())off_1ED45DCA0;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _ConditionalSymbolEffectModifier(0);
  v7();
  uint64_t v10 = v19;
  int v11 = DWORD2(v19);
  uint64_t v12 = *(void *)v20;
  long long v13 = *(_OWORD *)&v20[8];
  uint64_t v14 = *(void *)&v20[24];
  uint64_t v15 = *(void *)v21;
  long long v16 = *(_OWORD *)&v21[8];
  uint64_t v17 = *(void *)&v21[24];
  int v18 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  unsigned char v19[32];
  unsigned char v20[32];
  int v21;

  long long v4 = *(_OWORD *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&unsigned char v20[16] = v5;
  uint64_t v21 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  int v18 = *(_OWORD *)a2;
  *(_OWORD *)long long v19 = v6;
  *(_OWORD *)&v19[16] = v4;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>, (uint64_t)&type metadata for _ReclaimForEachElementsViewModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  PropertyList.subscript.setter();
  unint64_t v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int v11 = *(void *)v19;
  uint64_t v12 = *(_OWORD *)&v19[8];
  long long v13 = *(void *)&v19[24];
  uint64_t v14 = *(void *)v20;
  uint64_t v15 = *(_OWORD *)&v20[8];
  long long v16 = *(void *)&v20[24];
  uint64_t v17 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EditModeScopeModifier.TransformModifier()
{
  lazy protocol witness table accessor for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier;
  if (!lazy protocol witness table cache variable for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditModeScopeModifier.TransformModifier and conformance EditModeScopeModifier.TransformModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyMatchedTransitionSourceConfiguration()
{
  return &type metadata for EmptyMatchedTransitionSourceConfiguration;
}

uint64_t initializeWithCopy for SelectionContainerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  swift_retain();
  v7(a1 + 16, v4, v6);
  return a1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SubscriptionView<A, B>(int *a1, uint64_t a2, uint64_t *a3)
{
  return static SubscriptionView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

ValueMetadata *type metadata accessor for InlinePickerStyle()
{
  return &type metadata for InlinePickerStyle;
}

ValueMetadata *type metadata accessor for PageTabViewStyle.IndexDisplayMode()
{
  return &type metadata for PageTabViewStyle.IndexDisplayMode;
}

uint64_t ResolvedScrollBehaviorModifier.TrackedEnvironment.updateValue()()
{
  AGGraphGetValue();
  char v1 = v0;
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    swift_retain();
    swift_retain();
LABEL_8:
    PropertyList.Tracker.reset()();
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  if ((v1 & 1) == 0) {
    return result;
  }
  swift_retain();
  swift_retain_n();
  char v3 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
  swift_release();
  if (v3) {
    goto LABEL_8;
  }
  swift_release();

  return swift_release();
}

uint64_t destroy for SidebarListBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  unint64_t v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
    {
LABEL_5:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
    }
  }
  else
  {
    uint64_t v10 = *v9;
    if ((unint64_t)*v9 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    if (v10 == -1) {
      goto LABEL_5;
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (((a1 + v8 + ((v6 + 16) & v7) + 7) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

uint64_t initializeWithCopy for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v8, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 9) = v7;
  unint64_t v9 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v6) = *(unsigned char *)(v10 + 9);
  unsigned __int8 v12 = *(unsigned char *)(v10 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v10, v12, v6);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v12;
  *(unsigned char *)(v9 + 9) = v6;
  unint64_t v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v10 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  LOBYTE(v6) = *(unsigned char *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v14, v6);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v6;
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v18 | 7) + 9;
  long long v20 = (void *)((v19 + v13) & ~(v18 | 7));
  uint64_t v21 = (void *)((v19 + v14) & ~(v18 | 7));
  uint64_t v22 = ~v18;
  uint64_t v23 = *(void *)(v17 + 64);
  uint64_t v24 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v17 + 84) & 0x80000000) == 0)
  {
    uint64_t v25 = *v24;
    if ((unint64_t)*v24 >= 0xFFFFFFFF) {
      LODWORD(v25) = -1;
    }
    if (v25 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *long long v20 = *v21;
    unint64_t v26 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v26 = *v24;
    uint64_t v27 = ((unint64_t)v26 + v18 + 8) & v22;
    unint64_t v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    swift_retain();
    swift_retain();
    v28(v27, ((unint64_t)v24 + v18 + 8) & v22, v16);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v17 + 48))(((unint64_t)v24 + v18 + 8) & v22)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v20, v21, ((v18 + 16) & ~v18) + v23);
  return a1;
}

uint64_t outlined assign with take of IndexPath?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexPath?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t AnyListSelection.Storage.isSelected(value:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v5 = *(void *)(*v1 + 176);
  uint64_t v6 = type metadata accessor for SelectionManagerBox();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v12 - v8;
  uint64_t v10 = (uint64_t)v1 + *(void *)(v3 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  LOBYTE(a1) = AnyNavigationLinkPresentedValue.isSelected<A>(in:)((uint64_t)v9, a1, v4, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return a1 & 1;
}

uint64_t UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 + 0x68);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = (char *)v1 + *(void *)(v2 + 256);
  swift_beginAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    char v13 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
    MEMORY[0x18C113DA0](v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    char v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 120) + 64))(v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v13 & 1;
}

void UICollectionViewListCoordinatorBase.listCollectionViewCell<A>(_:platformItemIsSelected:)(char *a1, int a2)
{
  type metadata accessor for (IndexPath?, IndexPath?)();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v118[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v118[-v10];
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = &v118[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = &v118[-v16];
  MEMORY[0x1F4188790](v18);
  long long v20 = &v118[-v19];
  MEMORY[0x1F4188790](v21);
  v150 = &v118[-v22];
  MEMORY[0x1F4188790](v23);
  v151 = &v118[-v24];
  MEMORY[0x1F4188790](v25);
  v152 = &v118[-v26];
  MEMORY[0x1F4188790](v27);
  v153 = &v118[-v28];
  uint64_t v29 = type metadata accessor for IndexPath();
  MEMORY[0x1F4188790](v29);
  MEMORY[0x1F4188790](v30);
  id v154 = a1;
  long long v35 = &a1[direct field offset for ListCollectionViewCellBase.selectionBehavior];
  uint64_t v36 = *(void *)&a1[direct field offset for ListCollectionViewCellBase.selectionBehavior + 8];
  if (v36 == 1) {
    return;
  }
  uint64_t v37 = *(void *)v35;
  if ((*(void *)v35 & 0x101) != 0x100) {
    return;
  }
  uint64_t v146 = v34;
  v135 = v11;
  int v134 = a2;
  uint64_t v144 = v33;
  uint64_t v136 = v6;
  v133 = v2;
  v132 = v17;
  v130 = v14;
  uint64_t v149 = v37;
  v131 = v20;
  v143 = &v118[-v32];
  uint64_t v147 = v31;
  uint64_t v39 = *((void *)v35 + 2);
  uint64_t v38 = *((void *)v35 + 3);
  uint64_t v41 = *((void *)v35 + 4);
  uint64_t v40 = *((void *)v35 + 5);
  uint64_t v42 = *((void *)v35 + 6);
  uint64_t v43 = *((void *)v35 + 7);
  int v44 = v35[64];
  outlined copy of AppIntentExecutor?(v36);
  outlined copy of AppIntentExecutor?(v38);
  outlined copy of AppIntentExecutor?(v40);
  id v45 = v154;
  id v46 = objc_msgSend(v154, sel__collectionView);
  if (!v46)
  {
    uint64_t v79 = v149;
    uint64_t v80 = v36;
    uint64_t v81 = v39;
    uint64_t v82 = v38;
    uint64_t v83 = v41;
    uint64_t v84 = v40;
LABEL_11:
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v79, v80, v81, v82, v83, v84);
    return;
  }
  int v145 = v44;
  uint64_t v141 = v39;
  uint64_t v137 = v36;
  uint64_t v142 = v38;
  uint64_t v138 = v41;
  uint64_t v139 = v42;
  uint64_t v140 = v43;
  id v148 = v46;
  type metadata accessor for UpdateCoalescingCollectionView(0);
  long long v47 = (char *)swift_dynamicCastClass();
  if (!v47)
  {
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v149, v137, v141, v142, v138, v40);
    id v85 = v148;

    return;
  }
  long long v48 = v47;
  v129 = v8;
  id v49 = objc_msgSend(v47, sel_indexPathForCell_, v45);
  if (!v49)
  {
    uint64_t v59 = (uint64_t)v153;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v146 + 56))(v153, 1, 1, v147);
    goto LABEL_16;
  }
  double v50 = v49;
  uint64_t v51 = v144;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  double v52 = (void *)v146;
  uint64_t v53 = v147;
  uint64_t v54 = v146 + 32;
  unint64_t v55 = *(void (**)(uint64_t, uint64_t, uint64_t))(v146 + 32);
  unint64_t v56 = v153;
  v55((uint64_t)v153, v51, v147);
  v127 = (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))v52[7];
  v128 = v52 + 7;
  v127(v56, 0, 1, v53);
  uint64_t v57 = (unsigned char *)v52[6];
  uint64_t v58 = v53;
  uint64_t v59 = (uint64_t)v56;
  if (((unsigned int (*)(unsigned char *, uint64_t, uint64_t))v57)(v56, 1, v58) == 1)
  {
LABEL_16:
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v149, v137, v141, v142, v138, v40);

    _s10Foundation9IndexPathVSgWOhTm_0(v59, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
    return;
  }
  uint64_t v126 = v40;
  uint64_t v60 = v143;
  uint64_t v61 = v59;
  uint64_t v62 = v147;
  uint64_t v122 = v54;
  v121 = v55;
  v55((uint64_t)v143, v61, v147);
  id v125 = v48;
  v153 = v57;
  double v63 = &v48[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem];
  swift_beginAccess();
  uint64_t v64 = (uint64_t)v63;
  double v66 = v152;
  char v65 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v153;
  outlined init with copy of IndexPath?(v64, (uint64_t)v152);
  int v67 = (void (*)(unsigned char *, unsigned char *, uint64_t))v52[2];
  double v68 = v151;
  v124 = v52 + 2;
  v123 = v67;
  v67(v151, v60, v62);
  v127(v68, 0, 1, v62);
  uint64_t v69 = (uint64_t)v135;
  uint64_t v70 = (uint64_t)&v135[*(int *)(v136 + 48)];
  outlined init with copy of IndexPath?((uint64_t)v66, (uint64_t)v135);
  outlined init with copy of IndexPath?((uint64_t)v68, v70);
  int v71 = v65(v69, 1, v62);
  v120 = v52 + 6;
  if (v71 == 1)
  {
    double v72 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
    double v73 = v65;
    uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
    _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v68, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
    _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v66, &lazy cache variable for type metadata for IndexPath?, v72, v74);
    int v75 = v73(v70, 1, v147);
    uint64_t v76 = v126;
    if (v75 == 1)
    {
      _s10Foundation9IndexPathVSgWOhTm_0(v69, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      uint64_t v77 = v142;
      uint64_t v78 = v141;
      (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v143, v147);
LABEL_28:

      goto LABEL_29;
    }
    goto LABEL_20;
  }
  uint64_t v86 = v150;
  outlined init with copy of IndexPath?(v69, (uint64_t)v150);
  if (v65(v70, 1, v147) == 1)
  {
    uint64_t v87 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
    double v88 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
    _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v151, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
    _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v152, &lazy cache variable for type metadata for IndexPath?, v87, v88);
    (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v86, v147);
    uint64_t v76 = v126;
LABEL_20:
    outlined destroy of (IndexPath?, IndexPath?)(v69);
    uint64_t v77 = v142;
    uint64_t v78 = v141;
    goto LABEL_21;
  }
  uint64_t v93 = v144;
  uint64_t v94 = v147;
  v121(v144, v70, v147);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  int v119 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v146 + 8);
  v95(v93, v94);
  double v96 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
  uint64_t v97 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v151, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v152, &lazy cache variable for type metadata for IndexPath?, v96, v97);
  v95((uint64_t)v86, v94);
  _s10Foundation9IndexPathVSgWOhTm_0(v69, &lazy cache variable for type metadata for IndexPath?, v96, v97);
  uint64_t v77 = v142;
  uint64_t v78 = v141;
  uint64_t v76 = v126;
  if (v119)
  {
    v95((uint64_t)v143, v147);
    goto LABEL_28;
  }
LABEL_21:
  if (objc_msgSend(v125, sel_isEditing))
  {
    (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v143, v147);
    goto LABEL_28;
  }
  if ((v134 & 1) == 0)
  {
    if (objc_msgSend(v154, sel_isSelected))
    {
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v125, sel_deselectItemAtIndexPath_animated_, isa, 0);
    }
    uint64_t v99 = (char *)v133 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v133) + 0xD8);
    swift_beginAccess();
    uint64_t v100 = (uint64_t)v132;
    uint64_t v101 = v147;
    v123(v132, v143, v147);
    v127((unsigned char *)v100, 0, 1, v101);
    uint64_t v102 = (uint64_t)v129;
    uint64_t v103 = (uint64_t)&v129[*(int *)(v136 + 48)];
    id v154 = v99;
    outlined init with copy of IndexPath?((uint64_t)v99, (uint64_t)v129);
    outlined init with copy of IndexPath?(v100, v103);
    long long v104 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v153;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v153)(v102, 1, v101) == 1)
    {
      uint64_t v105 = v146;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v149, v137, v141, v142, v138, v76);

      _s10Foundation9IndexPathVSgWOhTm_0(v100, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      (*(void (**)(unsigned char *, uint64_t))(v105 + 8))(v143, v101);
      if (v104(v103, 1, v101) == 1)
      {
        _s10Foundation9IndexPathVSgWOhTm_0(v102, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
        uint64_t v106 = v147;
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v108 = v146;
      uint64_t v109 = (uint64_t)v130;
      outlined init with copy of IndexPath?(v102, (uint64_t)v130);
      if (v104(v103, 1, v101) != 1)
      {
        uint64_t v111 = v109;
        uint64_t v112 = v144;
        v121(v144, v103, v101);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
        LODWORD(v153) = dispatch thunk of static Equatable.== infix(_:_:)();
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v149, v137, v141, v142, v138, v76);

        long long v113 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
        v113(v112, v101);
        long long v114 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
        uint64_t v115 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
        _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v132, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
        v113((uint64_t)v143, v101);
        v113(v111, v101);
        _s10Foundation9IndexPathVSgWOhTm_0(v102, &lazy cache variable for type metadata for IndexPath?, v114, v115);
        uint64_t v106 = v101;
        if ((v153 & 1) == 0) {
          return;
        }
LABEL_40:
        uint64_t v116 = (uint64_t)v131;
        v127(v131, 1, 1, v106);
        uint64_t v117 = (uint64_t)v154;
        swift_beginAccess();
        outlined assign with take of IndexPath?(v116, v117);
        swift_endAccess();
        return;
      }
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v149, v137, v141, v142, v138, v76);

      _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v132, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      long long v110 = *(void (**)(unsigned char *, uint64_t))(v108 + 8);
      v110(v143, v101);
      v110((unsigned char *)v109, v101);
    }
    outlined destroy of (IndexPath?, IndexPath?)(v102);
    return;
  }
  uint64_t v89 = (uint64_t)v131;
  double v90 = v143;
  uint64_t v91 = v147;
  v123(v131, v143, v147);
  v127((unsigned char *)v89, 0, 1, v91);
  uint64_t v92 = (uint64_t)v133 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v133) + 0xD8);
  swift_beginAccess();
  outlined assign with take of IndexPath?(v89, v92);
  swift_endAccess();
  if (objc_msgSend(v154, sel_isSelected))
  {
    (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v90, v91);

LABEL_29:
    uint64_t v79 = v149;
    uint64_t v80 = v137;
    uint64_t v81 = v78;
    uint64_t v82 = v77;
    uint64_t v83 = v138;
    uint64_t v84 = v76;
    goto LABEL_11;
  }
  Class v107 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v125, sel_selectItemAtIndexPath_animated_scrollPosition_, v107, 0, 0);

  outlined consume of PlatformItemList.Item.SelectionBehavior?(v149, v137, v78, v77, v138, v76);
  (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v90, v91);
}

uint64_t type metadata accessor for UpdateCoalescingCollectionView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UpdateCoalescingCollectionView);
}

void UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v97 = a2;
  id v91 = a1;
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v87 = v4;
  uint64_t v94 = type metadata accessor for IndexPath();
  uint64_t v96 = *(void *)(v94 - 8);
  MEMORY[0x1F4188790](v94);
  id v85 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (IndexPath?, IndexPath?)();
  uint64_t v95 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v90 = (uint64_t)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v92 = (uint64_t)&v80 - v9;
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v84 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v89 = (char *)&v80 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v86 = (uint64_t)&v80 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v93 = (uint64_t)&v80 - v17;
  uint64_t v83 = *(void *)(*(void *)(v4 + 104) - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v81 = (char *)&v80 - v19;
  uint64_t v82 = v20;
  uint64_t v21 = type metadata accessor for Binding();
  uint64_t v88 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v80 - v22;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v80 - v27;
  uint64_t v29 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v80 - v31;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v97, (uint64_t)v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    uint64_t v33 = (void *)MEMORY[0x1E4FBC8C8];
    goto LABEL_10;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v32, v28, AssociatedTypeWitness);
  uint64_t v33 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v34 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x100);
  swift_beginAccess();
  uint64_t v35 = v88;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v34, 1, v21)
    || ((*(void (**)(char *, char *, uint64_t))(v35 + 16))(v23, v34, v21),
        uint64_t v36 = v81,
        MEMORY[0x18C113DA0](v21),
        (*(void (**)(char *, uint64_t))(v35 + 8))(v23, v21),
        uint64_t v37 = v82,
        char v38 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v87 + 120) + 56))(v32, v82),
        (*(void (**)(char *, uint64_t))(v83 + 8))(v36, v37),
        (v38 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, AssociatedTypeWitness);
LABEL_10:
    uint64_t v44 = v96;
    uint64_t v43 = v97;
    uint64_t v45 = v93;
    uint64_t v46 = v94;
    uint64_t v87 = *(void *)(v96 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v87)(v93, v97, v94);
    uint64_t v88 = *(void *)(v44 + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v45, 0, 1, v46);
    long long v47 = (char *)v3 + *(void *)((*v33 & *v3) + 0xD8);
    swift_beginAccess();
    uint64_t v48 = v92;
    uint64_t v49 = v92 + *(int *)(v95 + 48);
    outlined init with copy of IndexPath?(v45, v92);
    uint64_t v50 = (uint64_t)v47;
    uint64_t v51 = v48;
    outlined init with copy of IndexPath?(v50, v49);
    double v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
    if (v52(v51, 1, v46) == 1)
    {
      _s10Foundation9IndexPathVSgWOhTm_0(v45, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      if (v52(v49, 1, v46) == 1)
      {
        uint64_t v53 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
        uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
        uint64_t v55 = v51;
LABEL_19:
        _s10Foundation9IndexPathVSgWOhTm_0(v55, &lazy cache variable for type metadata for IndexPath?, v53, v54);
        return;
      }
    }
    else
    {
      uint64_t v56 = v86;
      outlined init with copy of IndexPath?(v51, v86);
      if (v52(v49, 1, v46) != 1)
      {
        uint64_t v62 = v96;
        double v63 = v85;
        (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v85, v49, v46);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
        LODWORD(v83) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v64 = *(void (**)(char *, uint64_t))(v62 + 8);
        v64(v63, v46);
        char v65 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
        double v66 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
        _s10Foundation9IndexPathVSgWOhTm_0(v93, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
        v64((char *)v56, v94);
        int v67 = v65;
        double v68 = v66;
        uint64_t v46 = v94;
        uint64_t v43 = v97;
        _s10Foundation9IndexPathVSgWOhTm_0(v92, &lazy cache variable for type metadata for IndexPath?, v67, v68);
        if (v83) {
          return;
        }
LABEL_16:
        uint64_t v57 = (uint64_t)v89;
        ((void (*)(char *, uint64_t, uint64_t))v87)(v89, v43, v46);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v57, 0, 1, v46);
        uint64_t v58 = (uint64_t)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xE0);
        swift_beginAccess();
        uint64_t v59 = v90;
        uint64_t v60 = v90 + *(int *)(v95 + 48);
        outlined init with copy of IndexPath?(v57, v90);
        outlined init with copy of IndexPath?(v58, v60);
        if (v52(v59, 1, v46) == 1)
        {
          _s10Foundation9IndexPathVSgWOhTm_0(v57, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
          if (v52(v60, 1, v46) == 1)
          {
            uint64_t v53 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
            uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
            uint64_t v55 = v59;
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v61 = v84;
          outlined init with copy of IndexPath?(v59, v84);
          if (v52(v60, 1, v46) != 1)
          {
            uint64_t v69 = v96;
            uint64_t v70 = v85;
            (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v85, v60, v46);
            lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
            char v71 = dispatch thunk of static Equatable.== infix(_:_:)();
            double v72 = *(void (**)(char *, uint64_t))(v69 + 8);
            v72(v70, v46);
            double v73 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
            uint64_t v74 = v46;
            int v75 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
            _s10Foundation9IndexPathVSgWOhTm_0(v57, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
            v72((char *)v61, v74);
            _s10Foundation9IndexPathVSgWOhTm_0(v59, &lazy cache variable for type metadata for IndexPath?, v73, v75);
            if (v71) {
              return;
            }
            goto LABEL_26;
          }
          _s10Foundation9IndexPathVSgWOhTm_0(v57, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
          (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v61, v46);
        }
        outlined destroy of (IndexPath?, IndexPath?)(v59);
LABEL_26:
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        id v77 = objc_msgSend(v91, sel_cellForItemAtIndexPath_, isa);

        if (v77)
        {
          unsigned int v78 = objc_msgSend(v77, sel_isSelected);

          if (v78)
          {
            Class v79 = IndexPath._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v91, sel_deselectItemAtIndexPath_animated_, v79, UICollectionViewListCoordinatorBase.isAnimated.getter() & 1);
          }
        }
        return;
      }
      _s10Foundation9IndexPathVSgWOhTm_0(v93, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v56, v46);
    }
    outlined destroy of (IndexPath?, IndexPath?)(v51);
    goto LABEL_16;
  }
  Class v39 = IndexPath._bridgeToObjectiveC()().super.isa;
  id v40 = objc_msgSend(v91, sel_cellForItemAtIndexPath_, v39);

  if (!v40 || (unsigned __int8 v41 = objc_msgSend(v40, sel_isSelected), v40, (v41 & 1) == 0))
  {
    Class v42 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v91, sel_selectItemAtIndexPath_animated_scrollPosition_, v42, UICollectionViewListCoordinatorBase.isAnimated.getter() & 1, 0);
  }
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, AssociatedTypeWitness);
}

uint64_t outlined init with copy of IndexPath?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<IndexPath>(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<IndexPath>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for IndexPath();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t destroy for SelectionManagerBox(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v6 = v5 + 1;
  }
  if (v6 <= v5) {
    unint64_t v6 = *(void *)(v4 + 64);
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  unsigned int v7 = a1[v6];
  unsigned int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_17;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_17;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_17;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_17:
        int v11 = (v10 | (v8 << (8 * v6))) + 3;
        unsigned int v7 = v10 + 3;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  if (v7 == 2)
  {
LABEL_27:
    uint64_t v13 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
    return v13(a1, v3);
  }
  if (v7 == 1)
  {
    uint64_t v14 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
    if (result) {
      return result;
    }
    uint64_t v4 = v14;
    goto LABEL_27;
  }

  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of IndexPath?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s10Foundation9IndexPathVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s10Foundation9IndexPathVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s10Foundation9IndexPathVSgMaTm_1(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s10Foundation9IndexPathVSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s10Foundation9IndexPathVSgMaTm_2(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for IndexPath?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation9IndexPathVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation9IndexPathVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation9IndexPathVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation9IndexPathVSgMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of (IndexPath?, IndexPath?)(uint64_t a1)
{
  type metadata accessor for (IndexPath?, IndexPath?)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (IndexPath?, IndexPath?)()
{
  if (!lazy cache variable for type metadata for (IndexPath?, IndexPath?))
  {
    _s10Foundation9IndexPathVSgMaTm_0(255, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (IndexPath?, IndexPath?));
    }
  }
}

uint64_t SelectionManagerBox.isSelected(_:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v54 = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  double v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v51 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v10 = (char *)&v45 - v9;
  uint64_t v11 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v50 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v45 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v45 - v18;
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v23, v3, a2, v21);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    char v34 = Set.contains(_:)();
    swift_bridgeObjectRelease();
    return v34 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v35 = v52;
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v52, v23, v5);
    char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v35, v5);
    return v34 & 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v23, v8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v16, v54, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
  uint64_t v26 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v27 = v6;
  uint64_t v28 = v11;
  uint64_t v29 = v19;
  uint64_t v30 = *(void (**)(char *))(v11 + 16);
  uint64_t v48 = v29;
  v30(v10);
  uint64_t v49 = v26;
  ((void (*)(char *, char *, uint64_t))v30)(v26, v16, v8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v54 = v10;
  long long v47 = v31;
  if (v31(v10, 1, v5) != 1)
  {
    uint64_t v46 = v11;
    uint64_t v36 = v50;
    ((void (*)(char *, char *, uint64_t))v30)(v50, v54, v8);
    uint64_t v37 = v49;
    int v38 = v47(v49, 1, v5);
    Class v39 = v48;
    if (v38 != 1)
    {
      unsigned __int8 v41 = v52;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v52, v37, v5);
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      Class v42 = *(void (**)(char *, uint64_t))(v27 + 8);
      v42(v41, v5);
      uint64_t v43 = *(void (**)(char *, uint64_t))(v46 + 8);
      v43(v16, v8);
      v43(v39, v8);
      v42(v36, v5);
      v43(v54, v8);
      return v34 & 1;
    }
    uint64_t v32 = v54;
    id v40 = *(void (**)(char *, uint64_t))(v46 + 8);
    v40(v16, v8);
    v40(v39, v8);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v36, v5);
    goto LABEL_10;
  }
  uint64_t v32 = v54;
  uint64_t v33 = *(void (**)(char *, uint64_t))(v28 + 8);
  v33(v16, v8);
  v33(v48, v8);
  if (v47(v49, 1, v5) != 1)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v51 + 8))(v32, TupleTypeMetadata2);
    char v34 = 0;
    return v34 & 1;
  }
  v33(v32, v8);
  char v34 = 1;
  return v34 & 1;
}

void *initializeWithCopy for SelectionManagerBox(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = v7 + 1;
  }
  if (v8 <= v7) {
    unint64_t v9 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v9 = v8;
  }
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v9;
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_19;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_19:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v16 = 2;
LABEL_29:
    *((unsigned char *)a1 + v10) = v16;
    return a1;
  }
  if (v11 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
    char v16 = 1;
    goto LABEL_29;
  }
  *a1 = *(void *)a2;
  *((unsigned char *)a1 + v10) = 0;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v2;
  v18[1] = *(void *)(v3 + 0x60);
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  size_t v7 = (char *)v18 - v6;
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)v18 - v11;
  uint64_t v13 = (char *)v2 + *(void *)(v3 + 256);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v13, v9);
  LODWORD(v13) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v12, 1, v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v13 == 1)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v20, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    char v16 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x88);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v16, v4);
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.selectionValue(forRowAt:)(v19, v4, WitnessTable, v20);
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t ListCoreDataSource.selectionValue(forRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = a1;
  uint64_t v17 = a4;
  uint64_t v6 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v16 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v16 - v13;
  ListDiffable.rowIndex(at:)((uint64_t)&v16 - v13, (uint64_t)v10, v16, a2, v6);
  ListCoreDataSource.selectionValue(forRowAt:)((uint64_t)v14, (uint64_t)v10, a2, a3, v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t ListCoreDataSource.selectionValue(forRowAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v34 = a5;
  uint64_t v32 = a2;
  uint64_t v33 = a4;
  uint64_t v29 = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v30 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v24 - v13;
  uint64_t v16 = (char *)&v24 + *(int *)(v15 + 48) - v13;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v26 = v15;
  uint64_t v27 = v17;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16);
  uint64_t v28 = AssociatedTypeWitness;
  v18((char *)&v24 - v13, v29, AssociatedTypeWitness, v12);
  uint64_t v25 = v7;
  uint64_t v19 = *(void *)(v7 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v16, v32, v7);
  double v21 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v18)(v10, v14, AssociatedTypeWitness);
  uint64_t v22 = v25;
  v20(v21, (uint64_t)v16, v25);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(v33 + 224))(v10, v21, 1, v31);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v26);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v10, v28);
}

uint64_t ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v44 = a6;
  int v43 = a3;
  uint64_t v36 = a2;
  uint64_t v40 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = (uint64_t)&v33 - v9;
  swift_getAssociatedTypeWitness();
  uint64_t v39 = a4;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v38 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v45 = (uint64_t)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15.n128_f64[0] = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v19 = *(int *)(v18 + 48);
  uint64_t v35 = v18;
  uint64_t v20 = (char *)&v33 + v19 - v16;
  uint64_t v37 = *(void *)(v10 - 8);
  double v21 = *(void (**)(void))(v37 + 16);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v21)((char *)&v33 - v16, a1, v10, v15);
  uint64_t v22 = v11;
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v23 + 16);
  uint64_t v25 = v22;
  v24(v20, v36);
  uint64_t v26 = v45 + *(int *)(TupleTypeMetadata2 + 48);
  v21();
  uint64_t v27 = AssociatedTypeWitness;
  ((void (*)(uint64_t, char *, uint64_t))v24)(v26, v20, v25);
  uint64_t v28 = v41;
  uint64_t v47 = v39;
  uint64_t v48 = v40;
  char v49 = v43;
  uint64_t v29 = v45;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)(v45, v26, (uint64_t)partial apply for closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:), (uint64_t)v46, v39, v27, v40, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), v41, (void (*)(uint64_t, char *, uint64_t, void))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v35);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v25);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v29, v10);
  uint64_t v30 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v27) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v44, 1, 1, v27);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v28, v34);
  }
  else
  {
    uint64_t v32 = v44;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v44, v28, v27);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v27);
  }
}

void outlined consume of PlatformItemList.Item.SelectionBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a6);
  }
}

BOOL SelectionManagerBox.allowsMultipleSelection.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  BOOL v6 = (swift_getEnumCaseMultiPayload() & 7) == 0;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v6;
}

id UpdateCoalescingCollectionView.contentSize.didset(double a1, double a2)
{
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates;
  int v4 = *(_DWORD *)&v2[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates];
  BOOL v5 = __CFADD__(v4, 1);
  int v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  *(_DWORD *)&v2[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = v6;
  id result = objc_msgSend(v2, sel_contentSize);
  if (v11 != a1 || v10 != a2)
  {
    UpdateCoalescingCollectionView.invalidateStackBehaviorLayoutIfNeeded()();
    id result = (id)specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  }
  int v13 = *(_DWORD *)&v2[v3];
  BOOL v5 = v13 != 0;
  int v14 = v13 - 1;
  if (!v5) {
    goto LABEL_16;
  }
  *(_DWORD *)&v2[v3] = v14;
  if (!v14 && v2[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] == 1)
  {
    return (id)specialized UpdateCoalescingCollectionView.updateGraphState(isAnimatingScrollOverride:)();
  }
  return result;
}

Swift::Void __swiftcall UpdateCoalescingCollectionView.invalidateStackBehaviorLayoutIfNeeded()()
{
  if (v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_isLazyStackBehaviorEnabled] == 1)
  {
    uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__layoutContainer];
    if (MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__layoutContainer])) {
      goto LABEL_13;
    }
    uint64_t v2 = specialized UIView.firstAncestorWhere(_:)(v0);
    if (!v2
      || ((swift_getObjectType(), (v3 = swift_conformsToProtocol2()) != 0) ? (uint64_t v4 = v3) : (uint64_t v4 = 0),
          v3 ? (BOOL v5 = v2) : (BOOL v5 = 0),
          !v5))
    {

      uint64_t v4 = 0;
    }
    *((void *)v1 + 1) = v4;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    if (MEMORY[0x18C119DF0](v1))
    {
LABEL_13:
      uint64_t v6 = *((void *)v1 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
      swift_unknownObjectRelease();
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SpringLoadingBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t @objc closure #1 in closure #1 in _UIHostingView.rootTransform()()
{
  return ViewTransform.UnsafeBuffer.appendProjectionTransform(_:inverse:)();
}

{
  return @objc closure #1 in closure #1 in _UIHostingView.rootTransform()();
}

uint64_t storeEnumTagSinglePayload for ContentMarginProxy(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 248) = 0;
    *(void *)id result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 249) = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for NavigationEnabled(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t LazyTransaction.updateValue()()
{
  uint64_t v1 = v0;
  int v2 = *(unsigned __int8 *)(AGGraphGetValue() + 4);
  uint64_t result = *(void *)AGGraphGetValue();
  if (!v2)
  {
    swift_retain();
LABEL_6:
    Transaction.disableAnimations()();
    goto LABEL_11;
  }
  if (v2 == 1)
  {
    int v4 = *(unsigned __int8 *)(v0 + 17);
    swift_retain();
    if (v4 == 2) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  if (*(unsigned char *)(v0 + 16) == 2)
  {
    swift_retain();
  }
  else
  {
    if (!*(void *)(v0 + 8))
    {
      __break(1u);
      return result;
    }
    swift_retain();
    Transaction.addAnimationListener(_:)();
  }
LABEL_11:
  if (*(unsigned char *)(v1 + 17) == 1) {
    *(unsigned char *)(v1 + 17) = 2;
  }
  AGGraphSetOutputValue();
  uint64_t result = swift_release();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

void UIHostingViewBase.endUpdateEnvironment(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + 16);
  if (v4)
  {
    id v13 = (id)v4;
    if (MEMORY[0x18C119DF0](v1 + 24))
    {
      uint64_t v5 = *(void *)(v1 + 32);
      unsigned int v6 = *(void **)(v1 + 168);
      if (v6)
      {
        id v7 = *(id *)(v1 + 168);
      }
      else
      {
        id v7 = objc_msgSend(v13, sel_traitCollection);
        unsigned int v6 = 0;
      }
      uint64_t v14 = v2;
      uint64_t v15 = v3;
      id v8 = v6;
      GraphHost.setEnvironment(_:)();
      id v9 = objc_msgSend(v7, sel__environmentWrapper);
      if (v9)
      {
        double v10 = v9;
        type metadata accessor for EnvironmentWrapper();
        uint64_t v11 = swift_dynamicCastClass();
        if (v11) {
          int v12 = *(_DWORD *)(v11 + OBJC_IVAR___SwiftUIEnvironmentWrapper_phase);
        }
        else {
          int v12 = 0;
        }
      }
      else
      {
        int v12 = 0;
      }
      LODWORD(v14) = v12;
      UIHostingViewBase.updateGraphPhaseIfNeeded(newParentPhase:)((unsigned int *)&v14);
      uint64_t v14 = v2;
      uint64_t v15 = v3;
      *(void *)(swift_allocObject() + 24) = v5;
      swift_unknownObjectWeakInit();
      swift_retain();
      ViewGraph.updatePreferenceBridge(environment:deferredUpdate:)();
      swift_release_n();

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void UIHostingViewBase.updateGraphPhaseIfNeeded(newParentPhase:)(unsigned int *a1)
{
  uint64_t v2 = v1;
  unsigned int v3 = *a1;
  if (*(unsigned char *)(v1 + 116))
  {
    LODWORD(v24) = *a1;
    GraphHost.setPhase(_:)();
  }
  else
  {
    int v4 = *(_DWORD *)(v1 + 112);
    if ((v4 ^ v3) >= 2) {
      GraphHost.incrementPhase()();
    }
    if (((v3 ^ ((v4 & 1) == 0)) & 1) == 0)
    {
      uint64_t v5 = *(void *)(v1 + 64);
      swift_beginAccess();
      unsigned int v6 = *(void **)(v5 + 24);
      id v7 = *(void **)(v5 + 32);
      char v8 = *(unsigned char *)(v5 + 40);
      char v9 = *(unsigned char *)(v5 + 41);
      int v10 = *(_DWORD *)(v5 + 68);
      uint64_t v11 = *(void *)(v5 + 72);
      int v12 = *(_DWORD *)(v5 + 80);
      uint64_t v13 = *(void *)(v5 + 88);
      uint64_t v14 = *(void *)(v5 + 112);
      id v24 = *(id *)(v5 + 16);
      uint64_t v25 = v6;
      uint64_t v26 = v7;
      char v27 = v8;
      char v28 = v9;
      long long v29 = *(_OWORD *)(v5 + 44);
      uint64_t v30 = *(void *)(v5 + 60);
      int v31 = v10;
      uint64_t v32 = v11;
      int v33 = v12;
      uint64_t v34 = v13;
      long long v35 = *(_OWORD *)(v5 + 96);
      uint64_t v36 = v14;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      id v15 = v24;
      id v16 = v6;
      id v17 = v7;
      uint64_t v18 = (void (*)(uint64_t *, void))GraphHost.Data.phase.modify();
      *uint64_t v19 = *v19 & 0xFFFFFFFE | v3 & 1;
      v18(&v23, 0);
      id v20 = v24;
      double v21 = v25;
      uint64_t v22 = v26;
      swift_bridgeObjectRelease();
      swift_release();

      swift_release();
    }
  }
  *(_DWORD *)(v2 + 112) = v3;
  *(unsigned char *)(v2 + 116) = 0;
}

uint64_t partial apply for closure #1 in RBDrawingView.draw(in:size:)(uint64_t a1)
{
  return partial apply for closure #1 in RBDrawingView.draw(in:size:)(a1);
}

uint64_t partial apply for closure #1 in RBDrawingView.draw(in:size:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  char v3 = *(unsigned char *)(result + 48);
  uint64_t v4 = *(void *)(result + 56);
  uint64_t v5 = *(void *)(v2 + 8);
  *(unsigned char *)(result + 48) = *(unsigned char *)v2;
  *(void *)(result + 56) = v5;
  *(unsigned char *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  return result;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration()
{
  return &type metadata for SectionStyleConfiguration;
}

ValueMetadata *type metadata accessor for NavigationCommonModifier()
{
  return &type metadata for NavigationCommonModifier;
}

uint64_t protocol witness for Rule.value.getter in conformance LazyPageTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyPageTabViewStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance PPTTestCaseEnvironmentKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of PPTTestCase?((uint64_t)&static PPTTestCaseEnvironmentKey.defaultValue, a1);
}

uint64_t getEnumTagSinglePayload for ToolbarButtonHoverShape(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = a1[3];
      if (a1[3]) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3)) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = a1[1];
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t protocol witness for Projection.get(base:) in conformance AsAnySelection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return AsAnySelection.get(base:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Key : HostPreferenceKey in Alert.Presentation()
{
  return &protocol witness table for Alert.Presentation.Key;
}

_UNKNOWN **associated type witness table accessor for AlertControllerConvertible.Key : HostPreferenceKey in ActionSheet.Presentation()
{
  return &protocol witness table for ActionSheet.Presentation.Key;
}

uint64_t assignWithCopy for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(unsigned char *)(v7 + 4) = *(unsigned char *)(v8 + 4);
  return a1;
}

uint64_t initializeWithCopy for NavigationLinkSelectionIdentifier(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  unsigned int v4 = a2 + 1;
  uint64_t v5 = a2[2];
  swift_retain();
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 8) = *v4;
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)v4;
    *(void *)(a1 + 16) = v5;
    swift_retain();
  }
  *(void *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t BorderlessButtonLabelShapeStyle.apply(to:)(uint64_t a1, uint64_t a2)
{
  if (v2[2] == 1)
  {
    if ((v2[1] & 1) != 0 || *v2 != 1)
    {
      return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 32))(a1, *(void *)(a2 + 16));
    }
    else
    {
      static Color.red.getter();
      Color._apply(to:)();
      return swift_release();
    }
  }
  else
  {
    return MEMORY[0x1F40FFE48](a1, 2);
  }
}

uint64_t base witness table accessor for _AttributeBody in AnySource.IsNil<A>()
{
  return swift_getWitnessTable();
}

void @objc UIHostingController.loadView()(void *a1)
{
  id v1 = a1;
  UIHostingController.loadView()();
}

Swift::Void __swiftcall UIHostingController.loadView()()
{
  objc_msgSend(v0, sel_setView_, *(void *)&v0[direct field offset for UIHostingController.host]);
}

uint64_t partial apply for closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(uint64_t a1)
{
  return closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(a1, v1 + 16);
}

uint64_t specialized UIKitInspectorV3Bridge.updateInspectorIfNeeded(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v36 = a1;
  PreferenceValues.subscript.getter();
  uint64_t v4 = v26;
  int v5 = v27;
  uint64_t v6 = direct field offset for UIKitInspectorV3Bridge.anchorSeed;
  int v7 = *(_DWORD *)(v1 + direct field offset for UIKitInspectorV3Bridge.anchorSeed);
  BOOL v9 = v7 != -1 && v27 != -1 && v7 == v27;
  char v10 = v9;
  if (!v9)
  {
    uint64_t v11 = (void *)(v1 + direct field offset for UIKitInspectorV3Bridge.lastAnchorValues);
    swift_beginAccess();
    *uint64_t v11 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v2 + v6) = v5;
  }
  uint64_t v36 = a1;
  PreferenceValues.subscript.getter();
  uint64_t v12 = v26;
  int v13 = v27;
  uint64_t v14 = direct field offset for UIKitInspectorV3Bridge.inspectorSeed;
  int v15 = *(_DWORD *)(v2 + direct field offset for UIKitInspectorV3Bridge.inspectorSeed);
  if (v15 != -1 && v27 != -1 && v15 == v27)
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10) {
      return result;
    }
  }
  else
  {
    uint64_t v18 = (void *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
    swift_beginAccess();
    *uint64_t v18 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_DWORD *)(v2 + v14) = v13;
    if (*(void *)(v2 + direct field offset for UIKitInspectorV3Bridge.presentedVC))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      specialized Sequence.first(where:)(v12, (uint64_t)&v26);
      swift_bridgeObjectRelease();
      if (*((void *)&v27 + 1) == 1)
      {
        swift_bridgeObjectRelease();
        uint64_t result = _s2os6LoggerVSgWOhTm_0((uint64_t)&v26, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
        if (v10) {
          return result;
        }
      }
      else
      {
        int v25 = v26;
        LODWORD(v36) = v26;
        long long v40 = v31;
        long long v41 = v32;
        long long v42 = v33;
        uint64_t v43 = v34;
        v37[0] = v27;
        v37[1] = v28;
        long long v38 = v29;
        long long v39 = v30;
        uint64_t v35 = a1;
        PreferenceValues.subscript.getter();
        PreferenceValues.subscript.getter();
        specialized UIKitInspectorV3Bridge.presentNewInspector(_:id:anchors:presentationOptionsPreference:backgroundPreference:)(v37, v25, v4, &v26, v35);
        swift_bridgeObjectRelease();
        _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0((uint64_t)&v26, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4F3FD10]);
        uint64_t result = _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_0((uint64_t)&v36, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
        if (v10) {
          return result;
        }
      }
    }
  }
  uint64_t v20 = v2 + direct field offset for UIKitInspectorV3Bridge.activePresentation;
  swift_beginAccess();
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind(v20, (uint64_t)&v26);
  outlined init with copy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v26, (uint64_t)&v36);
  switch((char)v38)
  {
    case 1:
    case 3:
      goto LABEL_24;
    case 2:
      uint64_t result = outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v26);
      double v21 = *(void **)(v2 + direct field offset for UIKitInspectorV3Bridge.presentedVC);
      if (v21)
      {
        uint64_t v22 = (uint64_t *)(v2 + direct field offset for UIKitInspectorV3Bridge.lastInspectorValues);
        swift_beginAccess();
        uint64_t v23 = *v22;
        id v24 = v21;
        swift_bridgeObjectRetain();
        specialized UIKitInspectorV3Bridge.updateExistingInspector(_:values:)(v24, v23);

        uint64_t result = swift_bridgeObjectRelease();
      }
      break;
    default:
      outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v36);
LABEL_24:
      uint64_t result = outlined destroy of UIKitInspectorV3Bridge<TabItem.RootView>.PresentationKind((uint64_t)&v26);
      break;
  }
  return result;
}

uint64_t NavigationPropertiesModifier.PropertiesValue.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v18[1] = a1;
  void v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  uint64_t v7 = type metadata accessor for NavigationPropertiesModifier();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  char v10 = (void *)((char *)v18 - v9);
  NavigationPropertiesModifier.PropertiesValue.modifier.getter((uint64_t)v18 - v9);
  uint64_t v11 = *v10;
  uint64_t v12 = *(void (**)(uint64_t *, uint64_t))(v8 + 8);
  swift_retain();
  v12(v10, v7);
  uint64_t v13 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v14 = a6 + *(int *)(v13 + 24);
  AGGraphGetValue();
  uint64_t v15 = swift_bridgeObjectRetain();
  PlatformItemList.mergedContentItem.getter(v15, v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 0, 1, v16);
  *(void *)a6 = v11;
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a6 + 16) = -2;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a6, 0, 1, v13);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 368) = 0;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 369) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 369) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in TimelineView<>.UpdateFilter.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = type metadata accessor for TimelineView();
  return (*(uint64_t (**)(uint64_t))(a1 + *(int *)(v4 + 44)))(v3);
}

uint64_t partial apply for closure #1 in TimelineView<>.init(_:content:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[7], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t partial apply for closure #1 in TimelineView<>.init(_:content:)(uint64_t a1)
{
  return partial apply for closure #1 in TimelineView<>.init(_:content:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in TimelineView<>.init(_:content:));
}

{
  return partial apply for closure #1 in TimelineView<>.init(_:content:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in TimelineView<>.init(_:content:));
}

uint64_t closure #1 in TimelineView<>.init(_:content:)(uint64_t a1, void (*a2)(char *))
{
  uint64_t v12 = a2;
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  MEMORY[0x1F4188790](v3 - 8);
  int v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for TimelineView.Context();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v11 - v8;
  outlined init with copy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  TimelineView.Context.init(_:)((uint64_t)v5, (uint64_t)v9);
  v12(v9);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TimelineView.Context.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  double v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, double))(v8 + 16))(v7, a1, v5);
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  uint64_t v10 = *(int *)(v9 + 48);
  char v13 = *(unsigned char *)(a1 + *(int *)(v9 + 44));
  outlined init with copy of TimelineInvalidationAction(a1 + v10, (uint64_t)v12);
  outlined destroy of TimelineView<PeriodicTimelineSchedule, Never>.Context(a1);
  return TimelineView.Context.init(date:cadence:invalidationAction:)((uint64_t)v7, &v13, (uint64_t)v12, a2);
}

uint64_t outlined destroy of TimelineView<PeriodicTimelineSchedule, Never>.Context(uint64_t a1)
{
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for TimelineView.Context(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 44)) = *(unsigned char *)(a2 + *(int *)(a3 + 44));
  swift_weakCopyInit();
  return a1;
}

uint64_t TimelineView.Context.init(date:cadence:invalidationAction:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = *a2;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for TimelineView.Context();
  *(unsigned char *)(a4 + *(int *)(v9 + 44)) = v7;
  uint64_t v10 = a4 + *(int *)(v9 + 48);

  return outlined init with take of TimelineInvalidationAction(a3, v10);
}

uint64_t type metadata accessor for TimelineView.Context()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for ScaledClarityUIMetric(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || v8 + ((v7 + 25) & (unint64_t)~v7) + 1 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v7;
    uint64_t v13 = *(void *)a2;
    char v14 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v14);
    *(void *)a1 = v13;
    *(unsigned char *)(a1 + 8) = v14;
    unint64_t v15 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    LOBYTE(v13) = *(unsigned char *)(v16 + 24);
    outlined copy of Environment<Bool>.Content(v17, v13);
    *(void *)(v15 + 16) = v17;
    *(unsigned char *)(v15 + 24) = v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v7 + 25) & v12, (v16 + v7 + 25) & v12, v5);
    *(unsigned char *)(((v15 + v7 + 25) & v12) + v8) = *(unsigned char *)(((v16 + v7 + 25) & v12) + v8);
  }
  return a1;
}

uint64_t TimelineView<>.UpdateFilter.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v240 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v201 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  v200 = (char *)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  uint64_t v198 = v6;
  MEMORY[0x1F4188790](v6);
  v199 = (char *)&v184 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(char **)(v3 + 16);
  uint64_t v209 = *((void *)v8 - 1);
  MEMORY[0x1F4188790](v9);
  v194 = (char *)&v184 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v3 + 32);
  uint64_t v212 = v4;
  uint64_t v208 = type metadata accessor for TimelineView();
  uint64_t v193 = *(void *)(v208 - 8);
  MEMORY[0x1F4188790](v208);
  uint64_t v191 = (uint64_t)&v184 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v192 = (char *)&v184 - v14;
  uint64_t v206 = v11;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v228 = AssociatedTypeWitness;
  uint64_t v236 = swift_getAssociatedTypeWitness();
  v216 = (void *)type metadata accessor for Optional();
  uint64_t v215 = *(v216 - 1);
  MEMORY[0x1F4188790](v216);
  v190 = (char *)&v184 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  v195 = (char *)&v184 - v17;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v237 = v18;
  uint64_t v238 = v19;
  MEMORY[0x1F4188790](v18);
  v197 = (char *)&v184 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v214 = (char *)&v184 - v22;
  MEMORY[0x1F4188790](v23);
  v218 = (char *)&v184 - v24;
  MEMORY[0x1F4188790](v25);
  v184 = (char *)&v184 - v26;
  MEMORY[0x1F4188790](v27);
  v186 = (char *)&v184 - v28;
  MEMORY[0x1F4188790](v29);
  v229 = (char *)&v184 - v30;
  _s10Foundation4DateVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v31);
  v220 = (char *)&v184 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  v185 = (char *)&v184 - v34;
  MEMORY[0x1F4188790](v35);
  v189 = (char *)&v184 - v36;
  MEMORY[0x1F4188790](v37);
  v203 = (char *)&v184 - v38;
  MEMORY[0x1F4188790](v39);
  uint64_t v213 = (uint64_t)&v184 - v40;
  MEMORY[0x1F4188790](v41);
  uint64_t v230 = (uint64_t)&v184 - v42;
  type metadata accessor for (value: Date?, changed: Bool)();
  uint64_t v233 = v43;
  MEMORY[0x1F4188790](v43);
  uint64_t v202 = (uint64_t)&v184 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v45);
  uint64_t v210 = (uint64_t)&v184 - v46;
  MEMORY[0x1F4188790](v47);
  char v49 = (char *)&v184 - v48;
  MEMORY[0x1F4188790](v50);
  double v52 = (char *)&v184 - v51;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v204 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  v234 = (char *)&v184 - v54;
  uint64_t v55 = *(void *)(v3 - 8);
  double v57 = MEMORY[0x1F4188790](v56);
  uint64_t v59 = (char *)&v184 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = (char **)*(int *)(v3 + 96);
  double v60 = *(double *)((char *)v235 + v2);
  uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
  uint64_t v223 = v55 + 16;
  v222 = v61;
  ((void (*)(char *, uint64_t, uint64_t, double))v61)(v59, v2, v3, v57);
  LODWORD(v11) = *(_DWORD *)AGGraphGetValue();
  uint64_t v62 = *(void (**)(char *, uint64_t))(v55 + 8);
  v224 = v59;
  uint64_t v225 = v55 + 8;
  v221 = v62;
  v62(v59, v3);
  if (*(_DWORD *)(v2 + 48) != v11 >> 1)
  {
    double v63 = v224;
    v222(v224, v2, v3);
    unsigned int v64 = *(_DWORD *)AGGraphGetValue();
    v221(v63, v3);
    *(_DWORD *)(v2 + 48) = v64 >> 1;
    uint64_t v65 = v2 + *(int *)(v3 + 92);
    (*(void (**)(uint64_t, void *))(v215 + 8))(v65, v216);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v236 - 8) + 56))(v65, 1, 1);
    *(char **)((char *)v235 + v2) = (char *)0xFFF0000000000000;
    *(void *)(v2 + *(int *)(v3 + 100)) = 0x7FF0000000000000;
    *(unsigned char *)(v2 + 44) = 0;
  }
  uint64_t v66 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t Value = AGGraphGetValue();
  char v69 = v68;
  uint64_t v70 = *(void (**)(char *, uint64_t, char *))(v209 + 16);
  char v71 = v234;
  v207 = v8;
  uint64_t v188 = v209 + 16;
  v187 = v70;
  v70(v234, Value, v8);
  uint64_t v217 = v66;
  v71[v66] = v69 & 1;
  AGGraphGetValue();
  char v73 = v72;
  uint64_t v74 = v233;
  uint64_t v75 = *(int *)(v233 + 48);
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v81 = v238;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v238 + 56))(v52, 1, 1, v237);
    char v80 = 0;
  }
  else
  {
    uint64_t v76 = AGGraphGetValue();
    char v78 = v77;
    outlined init with copy of Date?(v76, (uint64_t)v49);
    v49[v75] = v78 & 1;
    uint64_t v79 = *(int *)(v74 + 48);
    outlined init with take of Date?((uint64_t)v49, (uint64_t)v52);
    char v80 = v49[v79];
    uint64_t v81 = v238;
  }
  int v211 = v73 & 1;
  v52[v75] = v80;
  _s10Foundation4DateVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for BLSAlwaysOnFrameSpecifier?, (uint64_t (*)(uint64_t))type metadata accessor for BLSAlwaysOnFrameSpecifier, MEMORY[0x1E4FBB718]);
  uint64_t v82 = (id *)AGGraphGetValue();
  char v84 = v83;
  id v85 = *v82;
  type metadata accessor for BLSUpdateFidelity(0);
  uint64_t v86 = (unint64_t *)AGGraphGetValue();
  char v88 = v87;
  unint64_t v196 = *v86;
  v226 = v52;
  id v219 = v85;
  uint64_t v205 = TupleTypeMetadata2;
  if ((v84 & 1) == 0 && AGGraphGetOutputValue() || (v85 != 0) == *(unsigned char *)(v2 + 44))
  {
    id v94 = v85;
    uint64_t v93 = v229;
    if ((v88 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  BOOL v89 = v85 != 0;
  uint64_t v90 = v2 + *(int *)(v3 + 92);
  id v91 = *(void (**)(uint64_t, void *))(v215 + 8);
  id v92 = v219;
  v91(v90, v216);
  id v85 = v219;
  double v52 = v226;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v236 - 8) + 56))(v90, 1, 1);
  *(unsigned char *)(v2 + 44) = v89;
  uint64_t v81 = v238;
  uint64_t v93 = v229;
  if (v88)
  {
LABEL_12:
    int v211 = 1;
    v234[v217] = 1;
  }
LABEL_13:
  uint64_t v95 = v210;
  outlined init with copy of Date?((uint64_t)v52, v210);
  uint64_t v96 = v95;
  uint64_t v97 = v230;
  outlined init with take of Date?(v96, v230);
  uint64_t v98 = v97;
  uint64_t v99 = v213;
  outlined init with copy of Date?(v98, v213);
  uint64_t v100 = v237;
  v231 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  uint64_t v232 = v81 + 48;
  if (v231(v99, 1, v237) == 1)
  {
    Date.init()();
    outlined destroy of Date?(v99);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v93, v99, v100);
  }
  Date.timeIntervalSinceReferenceDate.getter();
  double v102 = v101;
  if (v234[v217])
  {
    BOOL v103 = 1;
  }
  else
  {
    uint64_t v104 = v215;
    uint64_t v105 = v195;
    uint64_t v106 = v216;
    (*(void (**)(char *, uint64_t, void *))(v215 + 16))(v195, v2 + *(int *)(v3 + 92), v216);
    BOOL v103 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v236 - 8) + 48))(v105, 1) == 1;
    (*(void (**)(char *, void *))(v104 + 8))(v105, v106);
  }
  uint64_t v107 = v233;
  uint64_t v108 = *(int *)(v233 + 48);
  uint64_t v109 = (uint64_t)v226;
  uint64_t v110 = v202;
  outlined init with copy of Date?((uint64_t)v226, v202);
  int v111 = *(unsigned __int8 *)(v109 + v75);
  *(unsigned char *)(v110 + v108) = v111;
  uint64_t v112 = v238;
  uint64_t v213 = v3;
  if (v103)
  {
    outlined destroy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context(v110, (uint64_t (*)(void))type metadata accessor for (value: Date?, changed: Bool));
    uint64_t v113 = (uint64_t)v203;
  }
  else
  {
    uint64_t v114 = *(int *)(v107 + 48);
    uint64_t v115 = v110;
    uint64_t v116 = v210;
    outlined init with take of Date?(v115, v210);
    *(unsigned char *)(v116 + v114) = v111;
    outlined destroy of Date?(v116);
    uint64_t v113 = (uint64_t)v203;
    if (!v111) {
      goto LABEL_28;
    }
  }
  uint64_t v117 = *(int *)(v3 + 100);
  *(void *)(v2 + v117) = 0x7FF0000000000000;
  outlined init with copy of Date?(v230, v113);
  if (v231(v113, 1, v100) != 1)
  {
    outlined destroy of Date?(v113);
    *(double *)((char *)v235 + v2) = v102;
    goto LABEL_28;
  }
  uint64_t v233 = v117;
  outlined destroy of Date?(v113);
  v118 = v224;
  v222(v224, v2, v3);
  uint64_t v119 = v191;
  TimelineView<>.UpdateFilter.view.getter(v191);
  v221(v118, v3);
  v120 = v194;
  v121 = v207;
  v187(v194, v119, v207);
  (*(void (**)(uint64_t, uint64_t))(v193 + 8))(v119, v208);
  v239[0] = v85 != 0;
  (*(void (**)(char *, BOOL *, char *))(v206 + 24))(v229, v239, v121);
  (*(void (**)(char *, char *))(v209 + 8))(v120, v121);
  uint64_t v122 = v190;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v123 = v236;
  uint64_t v124 = *(void *)(v236 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(v122, 0, 1, v236);
  uint64_t v125 = v2 + *(int *)(v3 + 92);
  (*(void (**)(uint64_t, char *, void *))(v215 + 40))(v125, v122, v216);
  uint64_t v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48);
  if (v126(v125, 1, v123))
  {
    uint64_t v112 = v238;
    uint64_t v127 = (uint64_t)v189;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v238 + 56))(v189, 1, 1, v100);
LABEL_27:
    outlined destroy of Date?(v127);
    id v85 = v219;
    goto LABEL_28;
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v127 = (uint64_t)v189;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v3 = v213;
  uint64_t v112 = v238;
  if (v231(v127, 1, v100) == 1) {
    goto LABEL_27;
  }
  v216 = *(void **)(v112 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v216)(v186, v127, v237);
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v140 = v236;
  *(char **)((char *)v235 + v2) = v141;
  if (v126(v125, 1, v140))
  {
    uint64_t v142 = (uint64_t)v185;
    uint64_t v143 = v237;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v112 + 56))(v185, 1, 1, v237);
    id v85 = v219;
LABEL_58:
    (*(void (**)(char *, uint64_t))(v112 + 8))(v186, v143);
    outlined destroy of Date?(v142);
    goto LABEL_28;
  }
  uint64_t v142 = (uint64_t)v185;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v143 = v237;
  unsigned int v179 = v231(v142, 1, v237);
  id v85 = v219;
  if (v179 == 1) {
    goto LABEL_58;
  }
  v180 = v184;
  ((void (*)(char *, uint64_t, uint64_t))v216)(v184, v142, v143);
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v182 = v181;
  v183 = *(void (**)(char *, uint64_t))(v112 + 8);
  v183(v180, v143);
  v183(v186, v143);
  *(void *)(v2 + v233) = v182;
LABEL_28:
  uint64_t v128 = *(int *)(v3 + 100);
  uint64_t v233 = v128;
  if (v85)
  {
    id v129 = v85;
    char v130 = TimelineView<>.UpdateFilter.updateFromBacklightServices(frameSpecifier:)(v129, v3);

    if (v130) {
      v234[v217] = 1;
    }
  }
  else
  {
    double v131 = *(double *)(v2 + v128);
    uint64_t v132 = v236;
    if (v131 <= v102)
    {
      uint64_t v133 = v112;
      uint64_t v134 = v2 + *(int *)(v213 + 92);
      v135 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v236 - 8) + 48);
      uint64_t v136 = v237;
      while (!v135(v134, 1, v132))
      {
        swift_getAssociatedConformanceWitness();
        uint64_t v137 = (uint64_t)v220;
        dispatch thunk of IteratorProtocol.next()();
        if (v231(v137, 1, v136) == 1) {
          goto LABEL_40;
        }
        uint64_t v138 = v218;
        (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v218, v137, v136);
        *(double *)((char *)v235 + v2) = v131;
        Date.timeIntervalSinceReferenceDate.getter();
        double v131 = v139;
        (*(void (**)(char *, uint64_t))(v112 + 8))(v138, v136);
        *(double *)(v2 + v233) = v131;
        uint64_t v133 = v238;
        uint64_t v132 = v236;
        if (v102 < v131) {
          goto LABEL_41;
        }
      }
      uint64_t v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56);
      uint64_t v137 = (uint64_t)v220;
      v144(v220, 1, 1, v237);
LABEL_40:
      outlined destroy of Date?(v137);
    }
  }
LABEL_41:
  double v145 = *(double *)((char *)v235 + v2);
  if ((~*(void *)&v145 & 0x7FF0000000000000) == 0)
  {
    *(double *)((char *)v235 + v2) = v102;
    double v145 = v102;
  }
  char v146 = v211;
  if (v145 != v60) {
    char v146 = 1;
  }
  uint64_t v147 = v237;
  if ((v146 & 1) != 0 || (AGGraphCurrentAttributeWasModified() & 1) != 0 || !AGGraphGetOutputValue())
  {
    id v148 = v214;
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v149 = v238;
    v150 = v197;
    (*(void (**)(char *, char *, uint64_t))(v238 + 16))(v197, v148, v147);
    if (v196 >= 4) {
      char v151 = 2;
    }
    else {
      char v151 = 0x10202u >> (8 * v196);
    }
    uint64_t v152 = v147;
    v153 = v224;
    uint64_t v154 = v2;
    uint64_t v236 = v2;
    uint64_t v155 = v213;
    v156 = (uint64_t (*)(char *, uint64_t, uint64_t))v222;
    v222(v224, v154, v213);
    uint64_t v157 = AGGraphGetValue();
    outlined init with copy of TimelineInvalidationAction(v157, (uint64_t)v239);
    v158 = (uint64_t (*)(char *, uint64_t))v221;
    v221(v153, v155);
    v159 = *(void (**)(char *, char *, uint64_t))(v149 + 32);
    uint64_t v160 = (uint64_t)v199;
    v159(v199, v150, v152);
    uint64_t v161 = v198;
    *(unsigned char *)(v160 + *(int *)(v198 + 44)) = v151;
    outlined init with take of TimelineInvalidationAction((uint64_t)v239, v160 + *(int *)(v161 + 48));
    uint64_t v162 = v156(v153, v236, v155);
    v235 = &v184;
    MEMORY[0x1F4188790](v162);
    uint64_t v163 = v212;
    *(&v184 - 6) = v207;
    *(&v184 - 5) = (char *)v163;
    v164 = *(char **)(v155 + 40);
    *(&v184 - 4) = (char *)v206;
    *(&v184 - 3) = v164;
    *(&v184 - 2) = (char *)v236;
    *(&v184 - 1) = (char *)v160;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v166 = (uint64_t)v200;
    StatefulRule.withObservation<A>(do:)();
    v167 = v153;
    uint64_t v147 = v237;
    uint64_t v168 = v158(v167, v155);
    MEMORY[0x1F4188790](v168);
    *(&v184 - 2) = (char *)v155;
    *(&v184 - 1) = (char *)WitnessTable;
    uint64_t v2 = v236;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v166, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v184 - 4), v163, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v169);
    (*(void (**)(uint64_t, uint64_t))(v201 + 8))(v166, v163);
    (*(void (**)(char *, uint64_t))(v238 + 8))(v214, v147);
    outlined destroy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context(v160, (uint64_t (*)(void))type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context);
  }
  double v170 = *(double *)(v2 + v233);
  if (v170 < INFINITY)
  {
    double v171 = v170 - v102;
    type metadata accessor for ViewGraph();
    uint64_t v172 = MEMORY[0x18C114EE0]();
    v173 = v224;
    uint64_t v174 = v213;
    v222(v224, v2, v213);
    double v175 = *(double *)AGGraphGetValue();
    v221(v173, v174);
    double v176 = v171 + v175;
    swift_beginAccess();
    double v177 = *(double *)(v172 + 376);
    if (v176 < v177) {
      double v177 = v176;
    }
    *(double *)(v172 + 376) = v177;
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v238 + 8))(v229, v147);
  outlined destroy of Date?(v230);
  outlined destroy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context((uint64_t)v226, (uint64_t (*)(void))type metadata accessor for (value: Date?, changed: Bool));
  return (*(uint64_t (**)(char *, uint64_t))(v204 + 8))(v234, v205);
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DateComponents?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for DateComponents?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation14DateComponentsVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  type metadata accessor for Date?(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Date?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation4DateVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for TimelineView<>.UpdateFilter(uint64_t a1)
{
  uint64_t v1 = (id *)((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
             + 15) & 0xFFFFFFFFFFFFFFF8);

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80)
      + (((((unint64_t)v1 + 11) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
      + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    uint64_t v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI14ToolbarStorageV20NavigationPropertiesV_s5NeverOytTg503_s7c4UI23gh32KeyV6reduce5value9nextValueyAA14eF26V0cD0VSgz_AKyXEtFZyAJXEfU_AHSgTf1cn_n(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolbarStorage.NavigationProperties(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.NavigationProperties?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v15 = v14(v13, 1, v7);
  if (v15 == 1) {
    return v15 == 1;
  }
  _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVWObTm_0((uint64_t)v13, (uint64_t)v10, type metadata accessor for ToolbarStorage.NavigationProperties);
  uint64_t result = v14((char *)a2, 1, v7);
  if (result != 1)
  {
    if (!*(void *)a2)
    {
      *(void *)a2 = *(void *)v10;
      swift_retain();
    }
    if (*(unsigned __int8 *)(a2 + 16) == 254)
    {
      uint64_t v17 = *((void *)v10 + 1);
      *(void *)(a2 + 8) = v17;
      unsigned __int8 v18 = v10[16];
      *(unsigned char *)(a2 + 16) = v18;
      outlined copy of ToolbarStorage.NavigationProperties.Actions?(v17, v18);
    }
    uint64_t v19 = a2 + *(int *)(v7 + 24);
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOcTm_0(v19, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    uint64_t v20 = type metadata accessor for PlatformItemList.Item();
    int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v6, 1, v20);
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    if (v21 == 1) {
      outlined assign with copy of PlatformItemList.Item?((uint64_t)&v10[*(int *)(v7 + 24)], v19);
    }
    _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVSgWOhTm_0((uint64_t)v10, type metadata accessor for ToolbarStorage.NavigationProperties);
    return v15 == 1;
  }
  __break(1u);
  return result;
}

uint64_t __DictionaryDecoder.unbox(_:as:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v8);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  int v3 = swift_dynamicCast();
  char v4 = v3;
  if (v3)
  {

    uint64_t result = 0;
  }
  else
  {
    outlined init with copy of Any(a1, (uint64_t)v8);
    type metadata accessor for NSDecimal(0);
    if (swift_dynamicCast())
    {
      uint64_t result = (uint64_t)v7;
    }
    else
    {
      uint64_t result = specialized __DictionaryDecoder.unbox(_:as:)(a1);
      if (v1) {
        return result;
      }
      if (v6)
      {
        __break(1u);
        return result;
      }
      uint64_t result = MEMORY[0x18C117040](*(double *)&result);
    }
  }
  v8[0] = v4;
  return result;
}

uint64_t outlined init with take of ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI14ToolbarStorageV20NavigationPropertiesVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_DWORD *initializeWithCopy for TimelineView<>.UpdateFilter(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  int v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  char v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  char v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (void *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void **)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *v12;
  *uint64_t v11 = *v12;
  uint64_t v14 = (_DWORD *)(((unint64_t)v11 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v15 = (_DWORD *)(((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (unint64_t)v15 + 19;
  *uint64_t v14 = *v15;
  unint64_t v17 = (unint64_t)v14 + 19;
  v14[1] = v15[1];
  unint64_t v18 = ((unint64_t)v14 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
  unint64_t v20 = v17 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = v16 & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)(v17 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v24 + v20 + 4) & ~v24);
  uint64_t v26 = (const void *)((v24 + v21 + 4) & ~v24);
  uint64_t v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  id v28 = v13;
  if (v27(v26, 1, AssociatedTypeWitness))
  {
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
    if (v29) {
      size_t v31 = v30;
    }
    else {
      size_t v31 = v30 + 1;
    }
    memcpy(v25, v26, v31);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v25, v26, AssociatedTypeWitness);
    uint64_t v33 = *(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56);
    uint64_t v32 = v23 + 56;
    v33(v25, 0, 1, AssociatedTypeWitness);
    int v29 = *(_DWORD *)(v32 + 28);
    size_t v30 = *(void *)(v32 + 8);
  }
  if (v29) {
    size_t v34 = v30;
  }
  else {
    size_t v34 = v30 + 1;
  }
  uint64_t v35 = (void *)(((unint64_t)v25 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = (void *)(((unint64_t)v26 + v34 + 7) & 0xFFFFFFFFFFFFFFF8);
  void *v35 = *v36;
  unint64_t v37 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v37 = *(void *)v38;
  *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
  return a1;
}

uint64_t outlined init with take of Date?(uint64_t a1, uint64_t a2)
{
  _s10Foundation4DateVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context()
{
  if (!lazy cache variable for type metadata for TimelineView<PeriodicTimelineSchedule, Never>.Context)
  {
    type metadata accessor for PeriodicTimelineSchedule();
    _s10Foundation4DateVACSLAAWlTm_0(&lazy protocol witness table cache variable for type PeriodicTimelineSchedule and conformance PeriodicTimelineSchedule, MEMORY[0x1E4F40DB0]);
    unint64_t v0 = type metadata accessor for TimelineView.Context();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TimelineView<PeriodicTimelineSchedule, Never>.Context);
    }
  }
}

uint64_t type metadata accessor for TimelineView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for BLSUpdateFidelity(uint64_t a1)
{
}

void type metadata accessor for (value: Date?, changed: Bool)()
{
  if (!lazy cache variable for type metadata for (value: Date?, changed: Bool))
  {
    _s10Foundation4DateVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: Date?, changed: Bool));
    }
  }
}

uint64_t destroy for TimelineView.Context(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_weakDestroy();
}

__n128 initializeWithCopy for AnimatedValueKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8) + 16;
  double v57 = *(void (**)(uint64_t, uint64_t, uint64_t))v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v6)(a1, a2, v5);
  unint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(_DWORD *)(v6 + 64) & 0xF8 | 7;
  uint64_t v9 = v7 + v8 + a1;
  uint64_t v10 = v7 + v8 + a2;
  uint64_t v11 = v10 & ~v8;
  if (v7 <= 0x18) {
    uint64_t v12 = 24;
  }
  else {
    uint64_t v12 = *(void *)(v6 + 48);
  }
  char v13 = 8 * v12;
  if (v12 > 3) {
    goto LABEL_7;
  }
  unsigned int v14 = ((1 << v13) + 1) >> v13;
  if (v14 > 0xFFFC)
  {
    unsigned int v15 = *(_DWORD *)(v11 + v12);
  }
  else
  {
    if (v14 <= 0xFC)
    {
LABEL_7:
      unsigned int v15 = *(unsigned __int8 *)(v11 + v12);
      goto LABEL_10;
    }
    unsigned int v15 = *(unsigned __int16 *)(v11 + v12);
  }
LABEL_10:
  uint64_t v16 = v9 & ~v8;
  unsigned int v17 = v15 - 3;
  if (v15 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v18 = v12;
    }
    else {
      uint64_t v18 = 4;
    }
    switch(v18)
    {
      case 1:
        int v19 = *(unsigned __int8 *)v11;
        goto LABEL_19;
      case 2:
        int v19 = *(unsigned __int16 *)v11;
        goto LABEL_19;
      case 3:
        int v19 = *(unsigned __int16 *)v11 | (*(unsigned __int8 *)((v10 & ~v8) + 2) << 16);
        goto LABEL_19;
      case 4:
        int v19 = *(_DWORD *)v11;
LABEL_19:
        int v20 = (v19 | (v17 << v13)) + 3;
        unsigned int v15 = v19 + 3;
        if (v12 < 4) {
          unsigned int v15 = v20;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v21 = ~v8;
  switch(v15)
  {
    case 2u:
      v57(v9 & ~v8, v10 & ~v8, v5);
      if (v12 <= 3)
      {
        unsigned int v23 = ((1 << v13) + 1) >> v13;
        if (v23 > 0xFFFC)
        {
          int v25 = 2;
          goto LABEL_51;
        }
        if (v23 > 0xFC)
        {
          LOWORD(v25) = 2;
          goto LABEL_54;
        }
      }
      char v24 = 2;
      goto LABEL_35;
    case 1u:
      v57(v9 & ~v8, v10 & ~v8, v5);
      if (v12 > 3)
      {
LABEL_34:
        char v24 = 1;
LABEL_35:
        *(unsigned char *)(v16 + v12) = v24;
        if (v12 > 3) {
          goto LABEL_46;
        }
        goto LABEL_43;
      }
      int v25 = 1;
      unsigned int v23 = ((1 << v13) + 1) >> v13;
      if (v23 <= 0xFFFC)
      {
        if (v23 <= 0xFC) {
          goto LABEL_34;
        }
LABEL_54:
        *(_WORD *)(v16 + v12) = v25;
        goto LABEL_55;
      }
LABEL_51:
      *(_DWORD *)(v16 + v12) = v25;
      goto LABEL_55;
    case 0u:
      long long v22 = *(_OWORD *)v11;
      *(void *)((v9 & ~v8) + 0x10) = *(void *)((v10 & ~v8) + 0x10);
      *(_OWORD *)uint64_t v16 = v22;
      if (v12 > 3) {
        goto LABEL_25;
      }
      unsigned int v23 = ((1 << v13) + 1) >> v13;
      if (v23 > 0xFFFC)
      {
        *(_DWORD *)(v16 + v12) = 0;
      }
      else
      {
        if (v23 <= 0xFC)
        {
LABEL_25:
          *(unsigned char *)(v16 + v12) = 0;
          if (v12 > 3)
          {
LABEL_46:
            uint64_t v29 = 1;
            goto LABEL_57;
          }
          goto LABEL_43;
        }
        *(_WORD *)(v16 + v12) = 0;
      }
LABEL_55:
      BOOL v30 = v23 > 0xFFFC;
      uint64_t v29 = 2;
      if (v30) {
        uint64_t v29 = 4;
      }
      goto LABEL_57;
  }
  if (v12 > 3) {
    goto LABEL_41;
  }
  unsigned int v26 = ((1 << v13) + 1) >> v13;
  uint64_t v27 = 2;
  if (v26 > 0xFFFC) {
    uint64_t v27 = 4;
  }
  if (v26 <= 0xFC) {
LABEL_41:
  }
    uint64_t v27 = 1;
  memcpy((void *)(v9 & ~v8), (const void *)(v10 & ~v8), v27 + v12);
  if (v12 > 3) {
    goto LABEL_46;
  }
LABEL_43:
  unsigned int v28 = ((1 << v13) + 1) >> v13;
  uint64_t v29 = 2;
  if (v28 > 0xFFFC) {
    uint64_t v29 = 4;
  }
  if (v28 <= 0xFC) {
    goto LABEL_46;
  }
LABEL_57:
  uint64_t v31 = v29 + v12;
  uint64_t v32 = (v9 | v8) + v31;
  uint64_t v33 = (void *)(((v10 | v8) + v31) & v21);
  if (v12 > 3)
  {
LABEL_60:
    unsigned int v35 = *((unsigned __int8 *)v33 + v12);
    goto LABEL_63;
  }
  unsigned int v34 = ((1 << v13) + 1) >> v13;
  if (v34 > 0xFFFC)
  {
    unsigned int v35 = *(_DWORD *)((char *)v33 + v12);
  }
  else
  {
    if (v34 <= 0xFC) {
      goto LABEL_60;
    }
    unsigned int v35 = *(unsigned __int16 *)((char *)v33 + v12);
  }
LABEL_63:
  uint64_t v36 = (void *)(v32 & v21);
  unsigned int v37 = v35 - 3;
  if (v35 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v38 = v12;
    }
    else {
      uint64_t v38 = 4;
    }
    switch(v38)
    {
      case 1:
        int v39 = *(unsigned __int8 *)v33;
        goto LABEL_72;
      case 2:
        int v39 = *(unsigned __int16 *)v33;
        goto LABEL_72;
      case 3:
        int v39 = *(unsigned __int16 *)v33 | (*((unsigned __int8 *)v33 + 2) << 16);
        goto LABEL_72;
      case 4:
        int v39 = *(_DWORD *)v33;
LABEL_72:
        int v40 = (v39 | (v37 << v13)) + 3;
        unsigned int v35 = v39 + 3;
        if (v12 < 4) {
          unsigned int v35 = v40;
        }
        break;
      default:
        break;
    }
  }
  if (v35 == 2)
  {
    ((void (*)(void *))v57)(v36);
    if (v12 <= 3)
    {
      unsigned int v42 = ((1 << v13) + 1) >> v13;
      if (v42 > 0xFFFC)
      {
        int v43 = 2;
        goto LABEL_103;
      }
      if (v42 > 0xFC)
      {
        LOWORD(v43) = 2;
        goto LABEL_106;
      }
    }
    *((unsigned char *)v36 + v12) = 2;
    goto LABEL_93;
  }
  if (v35 == 1)
  {
    ((void (*)(void *))v57)(v36);
    if (v12 > 3)
    {
LABEL_86:
      *((unsigned char *)v36 + v12) = 1;
      goto LABEL_93;
    }
    int v43 = 1;
    unsigned int v42 = ((1 << v13) + 1) >> v13;
    if (v42 <= 0xFFFC)
    {
      if (v42 <= 0xFC) {
        goto LABEL_86;
      }
LABEL_106:
      *(_WORD *)((char *)v36 + v12) = v43;
LABEL_107:
      unsigned int v46 = v42 + 3;
      BOOL v30 = v42 > 0xFFFC;
      uint64_t v48 = 2;
      if (v30) {
        uint64_t v48 = 4;
      }
      goto LABEL_109;
    }
LABEL_103:
    *(_DWORD *)((char *)v36 + v12) = v43;
    goto LABEL_107;
  }
  if (v35)
  {
    if (v12 > 3) {
      goto LABEL_91;
    }
    unsigned int v44 = ((1 << v13) + 1) >> v13;
    uint64_t v45 = 2;
    if (v44 > 0xFFFC) {
      uint64_t v45 = 4;
    }
    if (v44 <= 0xFC) {
LABEL_91:
    }
      uint64_t v45 = 1;
    memcpy(v36, v33, v45 + v12);
    goto LABEL_93;
  }
  long long v41 = *(_OWORD *)v33;
  v36[2] = v33[2];
  *(_OWORD *)uint64_t v36 = v41;
  if (v12 > 3) {
    goto LABEL_78;
  }
  unsigned int v42 = ((1 << v13) + 1) >> v13;
  if (v42 > 0xFFFC)
  {
    *(_DWORD *)((char *)v36 + v12) = 0;
    goto LABEL_107;
  }
  if (v42 > 0xFC)
  {
    *(_WORD *)((char *)v36 + v12) = 0;
    goto LABEL_107;
  }
LABEL_78:
  *((unsigned char *)v36 + v12) = 0;
LABEL_93:
  if (v12 > 3)
  {
    unsigned int v46 = 4;
LABEL_98:
    uint64_t v48 = 1;
    goto LABEL_109;
  }
  unsigned int v47 = ((1 << v13) + 1) >> v13;
  unsigned int v46 = v47 + 3;
  uint64_t v48 = 2;
  if (v47 > 0xFFFC) {
    uint64_t v48 = 4;
  }
  if (v47 <= 0xFC) {
    goto LABEL_98;
  }
LABEL_109:
  uint64_t v49 = (v12 + v8 + v48) & v21;
  uint64_t v50 = 4;
  if (v46 < 0x10000) {
    uint64_t v50 = 2;
  }
  if (v46 < 0x100) {
    uint64_t v51 = 1;
  }
  else {
    uint64_t v51 = v50;
  }
  uint64_t v52 = v51 + v12 + v49;
  uint64_t v53 = (v16 | 7) + v52;
  unint64_t v54 = ((v11 | 7) + v52) & 0xFFFFFFFFFFFFFFF8;
  __n128 result = *(__n128 *)v54;
  long long v56 = *(_OWORD *)(v54 + 16);
  v53 &= 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v53 + 32) = *(unsigned char *)(v54 + 32);
  *(__n128 *)uint64_t v53 = result;
  *(_OWORD *)(v53 + 16) = v56;
  return result;
}

uint64_t outlined init with take of TimelineInvalidationAction(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t (*ButtonActionModifier.PlatformSelectionBehavior.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1)
{
  uint64_t v6 = type metadata accessor for ButtonActionModifier();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v19 - v11;
  ButtonActionModifier.PlatformSelectionBehavior.modifier.getter((uint64_t)&v19 - v11);
  char v13 = *(unsigned char *)AGGraphGetValue();
  char v14 = *(unsigned char *)AGGraphGetValue();
  unsigned int v15 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v15(v9, v12, v6);
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  *(unsigned char *)(v17 + 32) = v13;
  *(unsigned char *)(v17 + 33) = v14;
  v15((char *)(v17 + v16), v9, v6);
  return partial apply for closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter;
}

uint64_t initializeWithCopy for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for _ButtonGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v6 = (_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *v6;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t EnvironmentValues.buttonRepeatBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t ButtonActionModifier.PlatformSelectionBehavior.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ButtonActionModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t TimelineView<>.UpdateFilter.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TimelineView();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

void @objc _UIHostingView.didAddSubview(_:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  id v5 = a1;
  _UIHostingView.didAddSubview(_:)(v4);
}

Swift::Void __swiftcall _UIHostingView.didAddSubview(_:)(UIView *a1)
{
  int v3 = (void *)MEMORY[0x1E4FBC8C8];
  v16.receiver = v1;
  v16.super_class = (Class)type metadata accessor for _UIHostingView();
  [(UIView *)&v16 didAddSubview:a1];
  if (*((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x1D8))) {
    return;
  }
  id v4 = _UIHostingView.foreignSubviews.getter();
  objc_msgSend(v4, sel_addObject_, a1);

  static Semantics.v7.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
    return;
  }
  uint64_t v5 = 0xD000000000000018;
  if (_SwiftUIIsAppleInternalBuild())
  {
    uint64_t v6 = (void *)MEMORY[0x18C119DF0]((char *)v1 + *(void *)((*v3 & *v1) + 0xC0));
    if (!v6)
    {
      unint64_t v7 = 0xEE0077656956676ELL;
      uint64_t v5 = 0x6974736F4849555FLL;
      goto LABEL_7;
    }
  }
  unint64_t v7 = 0x8000000188341AF0;
LABEL_7:
  os_log_type_t v8 = static os_log_type_t.fault.getter();
  uint64_t v9 = static Log.runtimeIssuesLog.getter();
  swift_bridgeObjectRetain();
  if (os_log_type_enabled(v9, v8))
  {
    swift_bridgeObjectRetain_n();
    uint64_t v10 = a1;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v15 = v12;
    *(_DWORD *)uint64_t v11 = 136315650;
    swift_getObjectType();
    uint64_t v13 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1872C6000, v9, v8, "Adding '%s' as a subview of %s is not supported and may result in a broken view hierarchy. Add your view above %s in a common superview or insert it into your SwiftUI content in a UIViewRepresentable instead.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v12, -1, -1);
    MEMORY[0x18C119C60](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

void @objc _UIHostingView.willRemoveSubview(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  _UIHostingView.willRemoveSubview(_:)(v4);
}

Swift::Void __swiftcall _UIHostingView.willRemoveSubview(_:)(UIView *a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for _UIHostingView();
  [(UIView *)&v4 willRemoveSubview:a1];
  id v3 = _UIHostingView.foreignSubviews.getter();
  objc_msgSend(v3, sel_removeObject_, a1);
}

id _UIHostingView.foreignSubviews.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D0);
  uint64_t v2 = *(void **)((char *)v0 + v1);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + v1);
  }
  else
  {
    id v4 = objc_msgSend(self, sel_weakObjectsHashTable);
    id v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t storeEnumTagSinglePayload for ActionDispatcherSubscriber(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1878A64C0);
}

uint64_t initializeWithCopy for SearchOverlayView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(v2 + 40);
  LOBYTE(v2) = *(unsigned char *)(v2 + 48);
  outlined copy of Environment<Bool>.Content(v8, v2);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v2;
  return a1;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance SizeFittingLayoutComputer.Engine()
{
  return 0;
}

uint64_t initializeWithCopy for OnScrollVisibilityGeometryAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ButtonGesture(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v7;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v8 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v8;
  return a1;
}

ValueMetadata *type metadata accessor for AllowsToolbarItemBridgingModifier()
{
  return &type metadata for AllowsToolbarItemBridgingModifier;
}

ValueMetadata *type metadata accessor for IgnoreViewRespondersModifier()
{
  return &type metadata for IgnoreViewRespondersModifier;
}

ValueMetadata *type metadata accessor for SearchUnavailableContent.Description()
{
  return &type metadata for SearchUnavailableContent.Description;
}

ValueMetadata *type metadata accessor for ListAccessoryVisibility()
{
  return &type metadata for ListAccessoryVisibility;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior()
{
  return &type metadata for SpringLoadingBehavior;
}

ValueMetadata *type metadata accessor for LabelsHiddenModifier()
{
  return &type metadata for LabelsHiddenModifier;
}

ValueMetadata *type metadata accessor for TextFieldState()
{
  return &type metadata for TextFieldState;
}

uint64_t type metadata completion function for SwiftUIGlue()
{
  return swift_initClassMetadata2();
}

{
  return type metadata completion function for SwiftUIGlue();
}

uint64_t partial apply for closure #2 in IsAnimated.updateValue()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 32))(a1, *(void *)(v1 + 48));
}

uint64_t partial apply for closure #1 in CoreSheetPresentationModifier.resolve(in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CoreSheetPresentationModifier() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return closure #1 in CoreSheetPresentationModifier.resolve(in:)(a1, a2, v7, v9, v10);
}

uint64_t type metadata accessor for CoreSheetPresentationModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in CoreSheetPresentationModifier.resolve(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a3 + 8);
  outlined init with copy of SheetPreference.Value(a1, (uint64_t)v24);
  if (v10)
  {
    if (v25)
    {
      if (v25 == 1)
      {
        MEMORY[0x18C112B90](0xD00000000000008BLL, 0x80000001883315B0);
        return outlined destroy of SheetPreference.Value((uint64_t)v24);
      }
      uint64_t v23 = a2;
      swift_retain();
      outlined destroy of SheetPreference.Value(a1);
    }
    else
    {
      uint64_t v23 = a2;
      swift_retain();
      outlined destroy of SheetPreference.Value(a1);
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = *(void *)(a3 + 16);
    uint64_t v13 = *(void *)(a3 + 24);
    outlined copy of AppIntentExecutor?(v12);
    uint64_t v14 = Namespace.wrappedValue.getter();
    outlined init with copy of AnyHashable?(a3 + 40, a1 + 32);
    char v15 = *(unsigned char *)(a3 + 32);
    char v16 = *(unsigned char *)(a3 + 33);
    char v17 = *(unsigned char *)(a3 + *(int *)(type metadata accessor for CoreSheetPresentationModifier() + 60));
    *(void *)a1 = v10;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = v14;
    *(unsigned char *)(a1 + 72) = v15;
    *(unsigned char *)(a1 + 73) = v16;
    *(void *)(a1 + 80) = v23;
    *(void *)(a1 + 88) = a4;
    *(void *)(a1 + 96) = a5;
    *(unsigned char *)(a1 + 104) = v17;
    *(unsigned char *)(a1 + 105) = 1;
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  else
  {
    if (v25)
    {
      if (v25 == 1) {
        return outlined destroy of SheetPreference.Value((uint64_t)v24);
      }
      outlined destroy of SheetPreference.Value(a1);
      type metadata accessor for _ContiguousArrayStorage<(Namespace.ID, Transaction)>();
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_18834BB80;
      *(void *)(inited + 32) = Namespace.wrappedValue.getter();
      *(void *)(inited + 40) = a2;
      unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)((void *)inited);
      swift_setDeallocating();
      type metadata accessor for (Badge, Spacer)(0, &lazy cache variable for type metadata for (Namespace.ID, Transaction));
      swift_retain();
      uint64_t result = swift_arrayDestroy();
      *(void *)a1 = v22;
    }
    else
    {
      outlined destroy of SheetPreference.Value(a1);
      uint64_t v18 = v24[0];
      uint64_t v19 = Namespace.wrappedValue.getter();
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v19, isUniquelyReferenced_nonNull_native);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v18;
    }
    *(unsigned char *)(a1 + 105) = 0;
  }
  return result;
}

uint64_t outlined init with copy of SheetPreference.Value(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SheetPreference.Value(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 105);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(void *)a1 = *(void *)a2;
    unint64_t v6 = (_OWORD *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 8);
    swift_retain();
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v7;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 8) = *v6;
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v11 = (_OWORD *)(a1 + 32);
    uint64_t v12 = (_OWORD *)(a2 + 32);
    uint64_t v13 = *(void *)(a2 + 56);
    if (v13)
    {
      uint64_t v14 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v14;
      (**(void (***)(_OWORD *, _OWORD *))(v13 - 8))(v11, v12);
    }
    else
    {
      long long v15 = *(_OWORD *)(a2 + 48);
      *uint64_t v11 = *v12;
      *(_OWORD *)(a1 + 48) = v15;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
    }
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
    uint64_t v16 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(unsigned char *)(a1 + 105) = 1;
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else if (v4)
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    *(_OWORD *)(a1 + 90) = *(_OWORD *)(a2 + 90);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    long long v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 105) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t SheetBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = v3;
  uint64_t v5 = *a1;
  uint64_t v6 = *(void *)(v3 + 0x58);
  *(void *)&long long v63 = *a1;
  uint64_t v52 = *(void *)(v3 + 104);
  PreferenceValues.subscript.getter();
  uint64_t v7 = *(void *)((char *)v1 + direct field offset for SheetBridge.lastEnvironment + 8);
  swift_retain();
  swift_retain();
  type metadata accessor for PresentationHostingController<AnyView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v7)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v53 = v4;
  if ((v63 & 1) == 0)
  {
    *(void *)&long long v54 = v5;
    PreferenceValues.subscript.getter();
  }
  *(void *)&long long v63 = v5;
  uint64_t v8 = PreferenceValues.subscript.getter();
  MEMORY[0x1F4188790](v8);
  v50[2] = v2;
  swift_beginAccess();
  specialized VersionSeedTracker.didChange(_:action:)(v5, (void (*)(void *))partial apply for closure #1 in SheetBridge.preferencesDidChange(_:), (uint64_t)v50);
  swift_endAccess();
  int v9 = *(_DWORD *)((char *)v2 + direct field offset for SheetBridge.seed);
  if (v9 != -1 && v78 != -1 && v9 == v78) {
    SheetBridge.isParentPresentationFromLikeKindBridge.getter();
  }
  *(_DWORD *)((char *)v2 + direct field offset for SheetBridge.seed) = v78;
  outlined init with copy of SheetPreference.Value((uint64_t)v77, (uint64_t)&v63);
  outlined init with copy of SheetPreference.Value((uint64_t)&v63, (uint64_t)&v54);
  if (v60)
  {
    if (v60 == 1)
    {
      long long v73 = v58;
      v74[0] = *(_OWORD *)v59;
      *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)&v59[9];
      long long v69 = v54;
      long long v70 = v55;
      long long v71 = v56;
      long long v72 = v57;
      goto LABEL_15;
    }
  }
  else
  {
    outlined destroy of SheetPreference.Value((uint64_t)&v54);
  }
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  memset(v74, 0, 25);
LABEL_15:
  outlined init with take of SheetPreference?((uint64_t)&v69, (uint64_t)v75);
  outlined destroy of SheetPreference.Value((uint64_t)&v63);
  outlined init with copy of PresentationOptionsPreference?((uint64_t)v75, (uint64_t)&v54, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
  if ((void)v54)
  {
    long long v67 = v58;
    v68[0] = *(_OWORD *)v59;
    *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)&v59[9];
    long long v63 = v54;
    long long v64 = v55;
    long long v65 = v56;
    long long v66 = v57;
    uint64_t v10 = *(void *)v59;
    swift_retain();
    outlined destroy of SheetPreference((uint64_t)&v63);
  }
  else
  {
    outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)&v54, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
    uint64_t v11 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v11, (uint64_t)&v63);
    uint64_t v12 = PresentationState.presentingViewID.getter();
    LOBYTE(v11) = v13;
    outlined destroy of PresentationState((uint64_t)&v63);
    if (v11) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = SheetPreference.Value.dismissalTransaction(for:)(v12);
    }
  }
  uint64_t v14 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v14, (uint64_t)&v63);
  uint64_t v15 = PresentationState.presentingViewID.getter();
  LOBYTE(v14) = v16;
  outlined destroy of PresentationState((uint64_t)&v63);
  if ((v14 & 1) != 0
    || (uint64_t v17 = SheetPreference.Value.viewIDs.getter(),
        char v18 = specialized Set.contains(_:)(v15, v17),
        swift_bridgeObjectRelease(),
        (v18 & 1) == 0))
  {
    int v19 = 1;
    if (v10 == 1)
    {
      char v20 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    int v19 = 0;
    char v20 = 0;
    if (v10 == 1) {
      goto LABEL_27;
    }
  }
  char v20 = Transaction.disablesAnimations.getter() ^ 1;
LABEL_27:
  uint64_t v51 = v10;
  swift_beginAccess();
  PresentationState.presentationDidChange(_:animated:hasNoModifier:)((uint64_t)v75, v20 & 1, v19);
  swift_endAccess();
  uint64_t v21 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v21, (uint64_t)&v63);
  outlined init with copy of PresentationState.Base((uint64_t)&v63, (uint64_t)&v54);
  if (v62 >= 2u)
  {
    outlined destroy of PresentationState.Base((uint64_t)&v54);
    outlined destroy of PresentationState((uint64_t)&v63);
    uint64_t v26 = SheetBridge.presenter.getter();
    if (v26)
    {
      uint64_t v27 = (void *)v26;
      outlined init with copy of PresentationOptionsPreference?((uint64_t)v75, (uint64_t)&v54, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      uint64_t v28 = v51;
      if ((void)v54)
      {
        long long v67 = v58;
        v68[0] = *(_OWORD *)v59;
        *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)&v59[9];
        long long v63 = v54;
        long long v64 = v55;
        long long v65 = v56;
        long long v66 = v57;
        (*(void (**)(long long *, void *, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x228))(&v63, v27, v20 & 1);

        outlined destroy of SheetPreference((uint64_t)&v63);
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v75, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
        uint64_t v29 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3FD10];
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v77, &lazy cache variable for type metadata for PreferenceValues.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, MEMORY[0x1E4F3FD10]);
        BOOL v30 = (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>;
        uint64_t v31 = &type metadata for PresentationOptionsPreference;
        uint64_t v32 = (long long *)v76;
        uint64_t v33 = v29;
      }
      else
      {

        int v43 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v75, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
        unsigned int v44 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3FD10];
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v77, &lazy cache variable for type metadata for PreferenceValues.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, MEMORY[0x1E4F3FD10]);
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, v44);
        uint64_t v32 = &v54;
        BOOL v30 = &lazy cache variable for type metadata for SheetPreference?;
        uint64_t v31 = &type metadata for SheetPreference;
        uint64_t v33 = v43;
      }
      outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v32, v30, (uint64_t)v31, v33);
      uint64_t v41 = v28;
      return outlined consume of Transaction?(v41);
    }
    outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v75, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
    unsigned int v34 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3FD10];
    outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v77, &lazy cache variable for type metadata for PreferenceValues.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, MEMORY[0x1E4F3FD10]);
    outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, v34);
    goto LABEL_40;
  }

  outlined destroy of SheetPreference((uint64_t)&v54);
  outlined destroy of PresentationState((uint64_t)&v63);
  uint64_t v22 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState(v22, (uint64_t)&v63);
  uint64_t v23 = (unsigned char *)PresentationState.Base.presentedVC.getter();
  uint64_t result = outlined destroy of PresentationState((uint64_t)&v63);
  if (v23)
  {
    outlined init with copy of PresentationOptionsPreference?((uint64_t)v75, (uint64_t)&v63, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if (!(void)v63)
    {
      outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)&v63, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
      goto LABEL_37;
    }
    long long v58 = v67;
    *(_OWORD *)uint64_t v59 = v68[0];
    *(_OWORD *)&v59[9] = *(_OWORD *)((char *)v68 + 9);
    long long v54 = v63;
    long long v55 = v64;
    long long v56 = v65;
    long long v57 = v66;
    uint64_t v25 = v51;
    if (v51 == 1)
    {
      outlined destroy of SheetPreference((uint64_t)&v54);
LABEL_37:
      swift_beginAccess();
      PresentationState.dismiss(willPresentAgain:hasNoModifier:)(0, v19);
      swift_endAccess();
      uint64_t v35 = v53;
      if (v19) {
        v23[direct field offset for PresentationHostingController.didPresenterLoseModifierRecursively] = 1;
      }
      uint64_t v36 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = *(void *)(v35 + 80);
      *(void *)(v37 + 24) = v6;
      uint64_t v38 = v52;
      *(void *)(v37 + 32) = *(void *)(v35 + 96);
      *(void *)(v37 + 40) = v38;
      *(void *)(v37 + 48) = v23;
      *(unsigned char *)(v37 + 56) = v20 & 1;
      *(void *)(v37 + 64) = v36;
      int v39 = v23;
      swift_retain();
      onNextMainRunLoop(do:)();

      swift_release();
      outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v75, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
      int v40 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3FD10];
      outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v77, &lazy cache variable for type metadata for PreferenceValues.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, MEMORY[0x1E4F3FD10]);
      outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, v40);
      swift_release();
LABEL_40:
      uint64_t v41 = v51;
      return outlined consume of Transaction?(v41);
    }
    uint64_t v42 = (uint64_t)v2 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v42, (uint64_t)&v63);
    outlined init with copy of SheetPreference((uint64_t)&v54, (uint64_t)&v69);
    swift_retain();
    LOBYTE(v42) = PresentationState.hasIdentityMatching(_:)((uint64_t)&v69);
    outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)&v69, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
    outlined destroy of PresentationState((uint64_t)&v63);
    if (v42)
    {
      (*(void (**)(long long *, unsigned char *, uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x220))(&v54, v23, v25);
    }
    else
    {
      uint64_t v45 = SheetBridge.presenter.getter();
      if (v45)
      {
        unsigned int v46 = (void *)v45;
        outlined init with copy of SheetPreference((uint64_t)&v54, (uint64_t)&v63);
        SheetBridge.dismissAndPresentAgain(preference:presented:animated:hasNoModifier:presenter:)(&v63, v23, v20 & 1, 1, v46);
        outlined consume of Transaction?(v25);

        unsigned int v47 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)&v63, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
        outlined destroy of SheetPreference((uint64_t)&v54);
        uint64_t v48 = v47;
LABEL_48:
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v75, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, v48);
        uint64_t v49 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3FD10];
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v77, &lazy cache variable for type metadata for PreferenceValues.Value<SheetPreference.Value>, (uint64_t)&type metadata for SheetPreference.Value, MEMORY[0x1E4F3FD10]);
        outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>((uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for PreferenceValues.Value<PresentationOptionsPreference>, (uint64_t)&type metadata for PresentationOptionsPreference, v49);
        uint64_t v41 = v25;
        return outlined consume of Transaction?(v41);
      }
    }
    outlined consume of Transaction?(v25);

    outlined destroy of SheetPreference((uint64_t)&v54);
    uint64_t v48 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of PreferenceValues.Value<PresentationOptionsPreference>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for SheetPreference?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI16PreferenceValuesV5ValueVy_AA019PresentationOptionsC0VGWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for RemoteSheetContainerVCKey.Storage?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for SheetPreference?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for Data?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t SheetBridge.update(environment:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)((char *)v1 + direct field offset for SheetBridge.lastEnvironment + 8);
  swift_retain();
  swift_retain();
  type metadata accessor for PresentationHostingController<AnyView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  if (v4)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    type metadata accessor for PresentationHostingController<AnyView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, MEMORY[0x1E4F40930]);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    if (v14 != v13)
    {
      swift_retain_n();
      PropertyList.subscript.getter();
      goto LABEL_9;
    }
LABEL_16:
    uint64_t v11 = (void *)((char *)v2 + direct field offset for SheetBridge.lastEnvironment);
    *uint64_t v11 = v6;
    v11[1] = v5;
    swift_retain();
    swift_retain();
    swift_release();
    return swift_release();
  }
  type metadata accessor for PresentationHostingController<AnyView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, MEMORY[0x1E4F40930]);
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
  swift_release_n();
  if (v14 == v13) {
    goto LABEL_16;
  }
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
LABEL_9:
  uint64_t v7 = swift_release_n();
  if (v12 == 1 && ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x200))(v7) & 1) == 0)
  {
    uint64_t result = MEMORY[0x18C119DF0]((char *)v2 + direct field offset for SheetBridge.host);
    if (result)
    {
      uint64_t v10 = (void *)result;
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();

      GraphHost.removePreference<A>(_:)();
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t result = MEMORY[0x18C119DF0]((char *)v2 + direct field offset for SheetBridge.host);
    if (result)
    {
      int v9 = (void *)result;
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();

      GraphHost.addPreference<A>(_:)();
LABEL_15:
      swift_release();
      goto LABEL_16;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void type metadata accessor for PresentationHostingController<AnyView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for PresentationHostingController<AnyView>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void destroy for PresentationOptionsPreference(void *a1)
{
  swift_bridgeObjectRelease();
  if (a1[2])
  {
    swift_release();
    swift_release();
  }
  uint64_t v2 = (void *)a1[6];
  if ((unint64_t)v2 >= 3) {

  }
  if (a1[15])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 12));
  }
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  v18[0] = a1;
  PreferenceValues.subscript.getter();
  if (*v7 != -1 && v21 != -1 && *v7 == v21)
  {
    uint64_t v15 = v19;
    uint64_t v16 = v20;
  }
  else
  {
    *uint64_t v7 = v21;
    uint64_t v13 = v19;
    uint64_t v14 = v20;
    v18[0] = v19;
    v18[1] = v20;
    a6(v19, v20);
    a2(v18);
    a7(v13, v14);
    uint64_t v15 = v13;
    uint64_t v16 = v14;
  }
  return ((uint64_t (*)(uint64_t, uint64_t))a7)(v15, v16);
}

uint64_t outlined destroy of SheetPreference.Value(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SheetPreference.Value(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 105);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)result + 2;
  }
  if (v2 == 1)
  {
    swift_release();
    if (*(void *)(v1 + 8)) {
      swift_release();
    }
    if (*(void *)(v1 + 56)) {
      __swift_destroy_boxed_opaque_existential_1(v1 + 32);
    }
    swift_release();
    swift_release();
    return swift_release();
  }
  else if (!v2)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void SheetBridge.isParentPresentationFromLikeKindBridge.getter()
{
  if (MEMORY[0x18C119DF0](v0 + direct field offset for SheetBridge.host)) {
    _UIHostingView.viewController.getter();
  }
  __break(1u);
}

uint64_t outlined destroy of PresentationState(uint64_t a1)
{
  return a1;
}

void destroy for PresentationState(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 233))
  {
    case 0:
    case 1:
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      swift_release();
      swift_release();
      swift_release();
      id v2 = *(id *)(a1 + 112);
      goto LABEL_18;
    case 2:
    case 3:
    case 5:

      swift_release();
      if (*(void *)(a1 + 16)) {
        swift_release();
      }
      if (*(void *)(a1 + 64)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 40);
      }
      goto LABEL_29;
    case 4:
    case 6:
    case 9:
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      goto LABEL_29;
    case 7:
      id v2 = *(id *)a1;
LABEL_18:

      return;
    case 8:
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      if (*(void *)(a1 + 136)) {
        swift_release();
      }
      if (*(void *)(a1 + 184)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 160);
      }
LABEL_29:
      swift_release();
      swift_release();
      swift_release();
      break;
    default:
      return;
  }
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 40 * result;
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a2 + 32);
  *(void *)(a4[7] + 8 * result) = a3;
  BOOL v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  uint64_t v4 = a4[7] + 120 * result;
  uint64_t v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  BOOL v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v6;
  *(void *)(v4 + 112) = *(void *)(a3 + 112);
  uint64_t v7 = *(_OWORD *)(a3 + 96);
  uint64_t v8 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 96) = v7;
  *(_OWORD *)(v4 + 64) = v8;
  int v9 = a4[2];
  uint64_t v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  uint64_t v6;
  long long v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = a4[6] + 40 * result;
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 16) = v5;
  *(void *)(v4 + 32) = *(void *)(a2 + 32);
  BOOL v6 = a4[7] + 40 * result;
  uint64_t v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)BOOL v6 = *(_OWORD *)a3;
  *(_OWORD *)(v6 + 16) = v7;
  *(void *)(v6 + 32) = *(void *)(a3 + 32);
  uint64_t v8 = a4[2];
  int v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t outlined init with copy of PresentationState(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for PresentationState(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 233))
  {
    case 0:
      *(void *)a1 = *(void *)a2;
      uint64_t v5 = (_OWORD *)(a2 + 8);
      uint64_t v4 = *(void *)(a2 + 8);
      swift_retain();
      if (v4)
      {
        uint64_t v6 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v4;
        *(void *)(a1 + 16) = v6;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v5;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v49 = (_OWORD *)(a1 + 32);
      uint64_t v50 = (_OWORD *)(a2 + 32);
      uint64_t v51 = *(void *)(a2 + 56);
      if (v51)
      {
        uint64_t v52 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v51;
        *(void *)(a1 + 64) = v52;
        (**(void (***)(_OWORD *, _OWORD *))(v51 - 8))(v49, v50);
      }
      else
      {
        long long v85 = *(_OWORD *)(a2 + 48);
        *uint64_t v49 = *v50;
        *(_OWORD *)(a1 + 48) = v85;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v86 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v86;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v87 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v87;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(unsigned char *)(a1 + 233) = 0;
      goto LABEL_53;
    case 1:
      *(void *)a1 = *(void *)a2;
      uint64_t v15 = (_OWORD *)(a2 + 8);
      uint64_t v14 = *(void *)(a2 + 8);
      swift_retain();
      if (v14)
      {
        uint64_t v16 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v14;
        *(void *)(a1 + 16) = v16;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v15;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v53 = (_OWORD *)(a1 + 32);
      long long v54 = (_OWORD *)(a2 + 32);
      uint64_t v55 = *(void *)(a2 + 56);
      if (v55)
      {
        uint64_t v56 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v55;
        *(void *)(a1 + 64) = v56;
        (**(void (***)(_OWORD *, _OWORD *))(v55 - 8))(v53, v54);
      }
      else
      {
        long long v88 = *(_OWORD *)(a2 + 48);
        *uint64_t v53 = *v54;
        *(_OWORD *)(a1 + 48) = v88;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v89 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v89;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v87 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v87;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(unsigned char *)(a1 + 233) = 1;
LABEL_53:
      swift_retain();
      swift_retain();
      swift_retain();
      id v90 = v87;
      return a1;
    case 2:
      uint64_t v17 = *(void **)a2;
      uint64_t v18 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v18;
      uint64_t v20 = (_OWORD *)(a2 + 16);
      uint64_t v19 = *(void *)(a2 + 16);
      id v21 = v17;
      swift_retain();
      if (v19)
      {
        uint64_t v22 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v19;
        *(void *)(a1 + 24) = v22;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v20;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      long long v57 = (_OWORD *)(a1 + 40);
      long long v58 = (_OWORD *)(a2 + 40);
      uint64_t v59 = *(void *)(a2 + 64);
      if (v59)
      {
        uint64_t v60 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = v59;
        *(void *)(a1 + 72) = v60;
        (**(void (***)(_OWORD *, _OWORD *))(v59 - 8))(v57, v58);
      }
      else
      {
        long long v91 = *(_OWORD *)(a2 + 56);
        *long long v57 = *v58;
        *(_OWORD *)(a1 + 56) = v91;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      uint64_t v92 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v92;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      char v93 = 2;
      goto LABEL_74;
    case 3:
      uint64_t v23 = *(void **)a2;
      uint64_t v24 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v24;
      uint64_t v26 = (_OWORD *)(a2 + 16);
      uint64_t v25 = *(void *)(a2 + 16);
      id v27 = v23;
      swift_retain();
      if (v25)
      {
        uint64_t v28 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v25;
        *(void *)(a1 + 24) = v28;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v26;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      id v61 = (_OWORD *)(a1 + 40);
      unsigned __int8 v62 = (_OWORD *)(a2 + 40);
      uint64_t v63 = *(void *)(a2 + 64);
      if (v63)
      {
        uint64_t v64 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = v63;
        *(void *)(a1 + 72) = v64;
        (**(void (***)(_OWORD *, _OWORD *))(v63 - 8))(v61, v62);
      }
      else
      {
        long long v94 = *(_OWORD *)(a2 + 56);
        *id v61 = *v62;
        *(_OWORD *)(a1 + 56) = v94;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      uint64_t v95 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v95;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      char v93 = 3;
      goto LABEL_74;
    case 4:
      *(void *)a1 = *(void *)a2;
      BOOL v30 = (_OWORD *)(a2 + 8);
      uint64_t v29 = *(void *)(a2 + 8);
      swift_retain();
      if (v29)
      {
        uint64_t v31 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v29;
        *(void *)(a1 + 16) = v31;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v30;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      long long v65 = (_OWORD *)(a1 + 32);
      long long v66 = (_OWORD *)(a2 + 32);
      uint64_t v67 = *(void *)(a2 + 56);
      if (v67)
      {
        uint64_t v68 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v67;
        *(void *)(a1 + 64) = v68;
        (**(void (***)(_OWORD *, _OWORD *))(v67 - 8))(v65, v66);
      }
      else
      {
        long long v96 = *(_OWORD *)(a2 + 48);
        _OWORD *v65 = *v66;
        *(_OWORD *)(a1 + 48) = v96;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v97 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v97;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v93 = 4;
      goto LABEL_74;
    case 5:
      uint64_t v32 = *(void **)a2;
      uint64_t v33 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v33;
      uint64_t v35 = (_OWORD *)(a2 + 16);
      uint64_t v34 = *(void *)(a2 + 16);
      id v36 = v32;
      swift_retain();
      if (v34)
      {
        uint64_t v37 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v34;
        *(void *)(a1 + 24) = v37;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v35;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      long long v69 = (_OWORD *)(a1 + 40);
      long long v70 = (_OWORD *)(a2 + 40);
      uint64_t v71 = *(void *)(a2 + 64);
      if (v71)
      {
        uint64_t v72 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = v71;
        *(void *)(a1 + 72) = v72;
        (**(void (***)(_OWORD *, _OWORD *))(v71 - 8))(v69, v70);
      }
      else
      {
        long long v98 = *(_OWORD *)(a2 + 56);
        *long long v69 = *v70;
        *(_OWORD *)(a1 + 56) = v98;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      uint64_t v99 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v99;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      char v93 = 5;
      goto LABEL_74;
    case 6:
      *(void *)a1 = *(void *)a2;
      int v39 = (_OWORD *)(a2 + 8);
      uint64_t v38 = *(void *)(a2 + 8);
      swift_retain();
      if (v38)
      {
        uint64_t v40 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v38;
        *(void *)(a1 + 16) = v40;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v39;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      long long v73 = (_OWORD *)(a1 + 32);
      uint64_t v74 = (_OWORD *)(a2 + 32);
      uint64_t v75 = *(void *)(a2 + 56);
      if (v75)
      {
        uint64_t v76 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v75;
        *(void *)(a1 + 64) = v76;
        (**(void (***)(_OWORD *, _OWORD *))(v75 - 8))(v73, v74);
      }
      else
      {
        long long v100 = *(_OWORD *)(a2 + 48);
        *long long v73 = *v74;
        *(_OWORD *)(a1 + 48) = v100;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v101 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v101;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v93 = 6;
      goto LABEL_74;
    case 7:
      uint64_t v41 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 233) = 7;
      id v42 = v41;
      return a1;
    case 8:
      *(void *)a1 = *(void *)a2;
      unsigned int v44 = (_OWORD *)(a2 + 8);
      uint64_t v43 = *(void *)(a2 + 8);
      swift_retain();
      if (v43)
      {
        uint64_t v45 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v43;
        *(void *)(a1 + 16) = v45;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v44;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      char v77 = (_OWORD *)(a1 + 32);
      int v78 = (_OWORD *)(a2 + 32);
      uint64_t v79 = *(void *)(a2 + 56);
      if (v79)
      {
        uint64_t v80 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v79;
        *(void *)(a1 + 64) = v80;
        (**(void (***)(_OWORD *, _OWORD *))(v79 - 8))(v77, v78);
      }
      else
      {
        long long v102 = *(_OWORD *)(a2 + 48);
        _OWORD *v77 = *v78;
        *(_OWORD *)(a1 + 48) = v102;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      uint64_t v103 = *(void *)(a2 + 136);
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v104 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v104;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      uint64_t v105 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v105;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_retain();
      swift_retain();
      swift_retain();
      id v106 = v105;
      swift_retain();
      if (v103)
      {
        uint64_t v107 = *(void *)(a2 + 144);
        *(void *)(a1 + 136) = v103;
        *(void *)(a1 + 144) = v107;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      }
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      uint64_t v110 = (_OWORD *)(a1 + 160);
      int v111 = (_OWORD *)(a2 + 160);
      uint64_t v112 = *(void *)(a2 + 184);
      if (v112)
      {
        uint64_t v113 = *(void *)(a2 + 192);
        *(void *)(a1 + 184) = v112;
        *(void *)(a1 + 192) = v113;
        (**(void (***)(_OWORD *, _OWORD *))(v112 - 8))(v110, v111);
      }
      else
      {
        long long v114 = *(_OWORD *)(a2 + 176);
        *uint64_t v110 = *v111;
        *(_OWORD *)(a1 + 176) = v114;
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
      }
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      uint64_t v115 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v115;
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      char v93 = 8;
      goto LABEL_74;
    case 9:
      *(void *)a1 = *(void *)a2;
      unsigned int v47 = (_OWORD *)(a2 + 8);
      uint64_t v46 = *(void *)(a2 + 8);
      swift_retain();
      if (v46)
      {
        uint64_t v48 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v46;
        *(void *)(a1 + 16) = v48;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v47;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v81 = (_OWORD *)(a1 + 32);
      uint64_t v82 = (_OWORD *)(a2 + 32);
      uint64_t v83 = *(void *)(a2 + 56);
      if (v83)
      {
        uint64_t v84 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v83;
        *(void *)(a1 + 64) = v84;
        (**(void (***)(_OWORD *, _OWORD *))(v83 - 8))(v81, v82);
      }
      else
      {
        long long v108 = *(_OWORD *)(a2 + 48);
        _OWORD *v81 = *v82;
        *(_OWORD *)(a1 + 48) = v108;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v109 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v109;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v93 = 9;
LABEL_74:
      *(unsigned char *)(a1 + 233) = v93;
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    default:
      long long v7 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v7;
      *(_OWORD *)(a1 + 218) = *(_OWORD *)(a2 + 218);
      long long v8 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v8;
      long long v9 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v9;
      long long v10 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v10;
      long long v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v13;
      break;
  }
  return a1;
}

uint64_t partial apply for closure #1 in SheetBridge.preferencesDidChange(_:)(void *a1)
{
  return closure #1 in SheetBridge.preferencesDidChange(_:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in SheetBridge.preferencesDidChange(_:)(void *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = a1[1];
  }
  else {
    uint64_t v4 = 0;
  }
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(*a1, a1[1]);
  uint64_t v5 = (void *)(a2 + direct field offset for SheetBridge.interactiveDismissHandler);
  uint64_t v6 = *(void *)(a2 + direct field offset for SheetBridge.interactiveDismissHandler);
  void *v5 = v3;
  v5[1] = v4;

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  long long v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  unsigned char v21[40];

  uint64_t v4 = (void **)v3;
  long long v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  unsigned char v21[40];

  uint64_t v4 = (void **)v3;
  long long v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  long long v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 72 * v10;
    return outlined assign with take of NavigationState.StackContent.PositionedView(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  long long v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 120 * v10;
    return outlined assign with take of OrnamentPresentation(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  unsigned char v21[40];

  uint64_t v4 = (void **)v3;
  long long v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  _OWORD v21[8];

  uint64_t v4 = (void **)v3;
  long long v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, v21, a1, v16);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

uint64_t outlined destroy of SheetPreference(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SheetPreference(uint64_t a1)
{
  swift_release();
  if (*(void *)(a1 + 8)) {
    swift_release();
  }
  if (*(void *)(a1 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t outlined init with copy of PresentationOptionsPreference?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for SheetPreference?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t PresentationState.presentingViewID.getter()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)&v5);
  if (v12 != 1 && v12)
  {
    outlined destroy of PresentationState.Base((uint64_t)&v5);
    return 0;
  }
  else
  {

    v3[4] = v9;
    v4[0] = v10[0];
    *(_OWORD *)((char *)v4 + 9) = *(_OWORD *)((char *)v10 + 9);
    v3[0] = v5;
    v3[1] = v6;
    v3[2] = v7;
    v3[3] = v8;
    uint64_t v1 = *((void *)&v6 + 1);
    outlined destroy of SheetPreference((uint64_t)v3);
  }
  return v1;
}

uint64_t outlined init with copy of PresentationState.Base(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for PresentationState.Base(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 233);
  if (v4 >= 0xA) {
    unsigned int v4 = *(_DWORD *)a2 + 10;
  }
  switch(v4)
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      long long v6 = (_OWORD *)(a2 + 8);
      uint64_t v5 = *(void *)(a2 + 8);
      swift_retain();
      if (v5)
      {
        uint64_t v7 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v5;
        *(void *)(a1 + 16) = v7;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v6;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v50 = (_OWORD *)(a1 + 32);
      uint64_t v51 = (_OWORD *)(a2 + 32);
      uint64_t v52 = *(void *)(a2 + 56);
      if (v52)
      {
        uint64_t v53 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v52;
        *(void *)(a1 + 64) = v53;
        (**(void (***)(_OWORD *, _OWORD *))(v52 - 8))(v50, v51);
      }
      else
      {
        long long v86 = *(_OWORD *)(a2 + 48);
        *uint64_t v50 = *v51;
        *(_OWORD *)(a1 + 48) = v86;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v87 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v87;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v88 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v88;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(unsigned char *)(a1 + 233) = 0;
      goto LABEL_55;
    case 1u:
      *(void *)a1 = *(void *)a2;
      uint64_t v16 = (_OWORD *)(a2 + 8);
      uint64_t v15 = *(void *)(a2 + 8);
      swift_retain();
      if (v15)
      {
        uint64_t v17 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v15;
        *(void *)(a1 + 16) = v17;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v16;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      long long v54 = (_OWORD *)(a1 + 32);
      uint64_t v55 = (_OWORD *)(a2 + 32);
      uint64_t v56 = *(void *)(a2 + 56);
      if (v56)
      {
        uint64_t v57 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v56;
        *(void *)(a1 + 64) = v57;
        (**(void (***)(_OWORD *, _OWORD *))(v56 - 8))(v54, v55);
      }
      else
      {
        long long v89 = *(_OWORD *)(a2 + 48);
        *long long v54 = *v55;
        *(_OWORD *)(a1 + 48) = v89;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v90 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v90;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v88 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v88;
      *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
      *(unsigned char *)(a1 + 233) = 1;
LABEL_55:
      swift_retain();
      swift_retain();
      swift_retain();
      id v91 = v88;
      return a1;
    case 2u:
      uint64_t v18 = *(void **)a2;
      uint64_t v19 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v19;
      id v21 = (_OWORD *)(a2 + 16);
      uint64_t v20 = *(void *)(a2 + 16);
      id v22 = v18;
      swift_retain();
      if (v20)
      {
        uint64_t v23 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v23;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v21;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      long long v58 = (_OWORD *)(a1 + 40);
      uint64_t v59 = (_OWORD *)(a2 + 40);
      uint64_t v60 = *(void *)(a2 + 64);
      if (v60)
      {
        uint64_t v61 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = v60;
        *(void *)(a1 + 72) = v61;
        (**(void (***)(_OWORD *, _OWORD *))(v60 - 8))(v58, v59);
      }
      else
      {
        long long v92 = *(_OWORD *)(a2 + 56);
        *long long v58 = *v59;
        *(_OWORD *)(a1 + 56) = v92;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      uint64_t v93 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v93;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      char v94 = 2;
      goto LABEL_76;
    case 3u:
      uint64_t v24 = *(void **)a2;
      uint64_t v25 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v25;
      id v27 = (_OWORD *)(a2 + 16);
      uint64_t v26 = *(void *)(a2 + 16);
      id v28 = v24;
      swift_retain();
      if (v26)
      {
        uint64_t v29 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v26;
        *(void *)(a1 + 24) = v29;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v27;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      unsigned __int8 v62 = (_OWORD *)(a1 + 40);
      uint64_t v63 = (_OWORD *)(a2 + 40);
      uint64_t v64 = *(void *)(a2 + 64);
      if (v64)
      {
        uint64_t v65 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = v64;
        *(void *)(a1 + 72) = v65;
        (**(void (***)(_OWORD *, _OWORD *))(v64 - 8))(v62, v63);
      }
      else
      {
        long long v95 = *(_OWORD *)(a2 + 56);
        *unsigned __int8 v62 = *v63;
        *(_OWORD *)(a1 + 56) = v95;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      uint64_t v96 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v96;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      char v94 = 3;
      goto LABEL_76;
    case 4u:
      *(void *)a1 = *(void *)a2;
      uint64_t v31 = (_OWORD *)(a2 + 8);
      uint64_t v30 = *(void *)(a2 + 8);
      swift_retain();
      if (v30)
      {
        uint64_t v32 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v30;
        *(void *)(a1 + 16) = v32;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v31;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      long long v66 = (_OWORD *)(a1 + 32);
      uint64_t v67 = (_OWORD *)(a2 + 32);
      uint64_t v68 = *(void *)(a2 + 56);
      if (v68)
      {
        uint64_t v69 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v68;
        *(void *)(a1 + 64) = v69;
        (**(void (***)(_OWORD *, _OWORD *))(v68 - 8))(v66, v67);
      }
      else
      {
        long long v97 = *(_OWORD *)(a2 + 48);
        *long long v66 = *v67;
        *(_OWORD *)(a1 + 48) = v97;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v98 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v98;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v94 = 4;
      goto LABEL_76;
    case 5u:
      uint64_t v33 = *(void **)a2;
      uint64_t v34 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v34;
      id v36 = (_OWORD *)(a2 + 16);
      uint64_t v35 = *(void *)(a2 + 16);
      id v37 = v33;
      swift_retain();
      if (v35)
      {
        uint64_t v38 = *(void *)(a2 + 24);
        *(void *)(a1 + 16) = v35;
        *(void *)(a1 + 24) = v38;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *v36;
      }
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      long long v70 = (_OWORD *)(a1 + 40);
      uint64_t v71 = (_OWORD *)(a2 + 40);
      uint64_t v72 = *(void *)(a2 + 64);
      if (v72)
      {
        uint64_t v73 = *(void *)(a2 + 72);
        *(void *)(a1 + 64) = v72;
        *(void *)(a1 + 72) = v73;
        (**(void (***)(_OWORD *, _OWORD *))(v72 - 8))(v70, v71);
      }
      else
      {
        long long v99 = *(_OWORD *)(a2 + 56);
        *long long v70 = *v71;
        *(_OWORD *)(a1 + 56) = v99;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
      }
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      uint64_t v100 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v100;
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      char v94 = 5;
      goto LABEL_76;
    case 6u:
      *(void *)a1 = *(void *)a2;
      uint64_t v40 = (_OWORD *)(a2 + 8);
      uint64_t v39 = *(void *)(a2 + 8);
      swift_retain();
      if (v39)
      {
        uint64_t v41 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v39;
        *(void *)(a1 + 16) = v41;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v40;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v74 = (_OWORD *)(a1 + 32);
      uint64_t v75 = (_OWORD *)(a2 + 32);
      uint64_t v76 = *(void *)(a2 + 56);
      if (v76)
      {
        uint64_t v77 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v76;
        *(void *)(a1 + 64) = v77;
        (**(void (***)(_OWORD *, _OWORD *))(v76 - 8))(v74, v75);
      }
      else
      {
        long long v101 = *(_OWORD *)(a2 + 48);
        *uint64_t v74 = *v75;
        *(_OWORD *)(a1 + 48) = v101;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v102 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v102;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v94 = 6;
      goto LABEL_76;
    case 7u:
      id v42 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 233) = 7;
      id v43 = v42;
      return a1;
    case 8u:
      *(void *)a1 = *(void *)a2;
      uint64_t v45 = (_OWORD *)(a2 + 8);
      uint64_t v44 = *(void *)(a2 + 8);
      swift_retain();
      if (v44)
      {
        uint64_t v46 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v44;
        *(void *)(a1 + 16) = v46;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v45;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      int v78 = (_OWORD *)(a1 + 32);
      uint64_t v79 = (_OWORD *)(a2 + 32);
      uint64_t v80 = *(void *)(a2 + 56);
      if (v80)
      {
        uint64_t v81 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v80;
        *(void *)(a1 + 64) = v81;
        (**(void (***)(_OWORD *, _OWORD *))(v80 - 8))(v78, v79);
      }
      else
      {
        long long v103 = *(_OWORD *)(a2 + 48);
        _OWORD *v78 = *v79;
        *(_OWORD *)(a1 + 48) = v103;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      uint64_t v104 = *(void *)(a2 + 136);
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v105 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v105;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      id v106 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v106;
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_retain();
      swift_retain();
      swift_retain();
      id v107 = v106;
      swift_retain();
      if (v104)
      {
        uint64_t v108 = *(void *)(a2 + 144);
        *(void *)(a1 + 136) = v104;
        *(void *)(a1 + 144) = v108;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      }
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      int v111 = (_OWORD *)(a1 + 160);
      uint64_t v112 = (_OWORD *)(a2 + 160);
      uint64_t v113 = *(void *)(a2 + 184);
      if (v113)
      {
        uint64_t v114 = *(void *)(a2 + 192);
        *(void *)(a1 + 184) = v113;
        *(void *)(a1 + 192) = v114;
        (**(void (***)(_OWORD *, _OWORD *))(v113 - 8))(v111, v112);
      }
      else
      {
        long long v115 = *(_OWORD *)(a2 + 176);
        *int v111 = *v112;
        *(_OWORD *)(a1 + 176) = v115;
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
      }
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      uint64_t v116 = *(void *)(a2 + 216);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = v116;
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
      char v94 = 8;
      goto LABEL_76;
    case 9u:
      *(void *)a1 = *(void *)a2;
      uint64_t v48 = (_OWORD *)(a2 + 8);
      uint64_t v47 = *(void *)(a2 + 8);
      swift_retain();
      if (v47)
      {
        uint64_t v49 = *(void *)(a2 + 16);
        *(void *)(a1 + 8) = v47;
        *(void *)(a1 + 16) = v49;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *v48;
      }
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v82 = (_OWORD *)(a1 + 32);
      uint64_t v83 = (_OWORD *)(a2 + 32);
      uint64_t v84 = *(void *)(a2 + 56);
      if (v84)
      {
        uint64_t v85 = *(void *)(a2 + 64);
        *(void *)(a1 + 56) = v84;
        *(void *)(a1 + 64) = v85;
        (**(void (***)(_OWORD *, _OWORD *))(v84 - 8))(v82, v83);
      }
      else
      {
        long long v109 = *(_OWORD *)(a2 + 48);
        *uint64_t v82 = *v83;
        *(_OWORD *)(a1 + 48) = v109;
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
      }
      *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
      uint64_t v110 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v110;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      char v94 = 9;
LABEL_76:
      *(unsigned char *)(a1 + 233) = v94;
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    default:
      long long v8 = *(_OWORD *)(a2 + 208);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 208) = v8;
      *(_OWORD *)(a1 + 218) = *(_OWORD *)(a2 + 218);
      long long v9 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v9;
      long long v10 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v10;
      long long v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      long long v12 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v12;
      long long v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      long long v14 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v14;
      break;
  }
  return a1;
}

uint64_t outlined destroy of PresentationState.Base(uint64_t a1)
{
  return a1;
}

void destroy for PresentationState.Base(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 233);
  if (v2 >= 0xA) {
    unsigned int v2 = *(_DWORD *)a1 + 10;
  }
  switch(v2)
  {
    case 0u:
    case 1u:
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      swift_release();
      swift_release();
      swift_release();
      id v3 = *(id *)(a1 + 112);
      goto LABEL_20;
    case 2u:
    case 3u:
    case 5u:

      swift_release();
      if (*(void *)(a1 + 16)) {
        swift_release();
      }
      if (*(void *)(a1 + 64)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 40);
      }
      goto LABEL_31;
    case 4u:
    case 6u:
    case 9u:
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      goto LABEL_31;
    case 7u:
      id v3 = *(id *)a1;
LABEL_20:

      return;
    case 8u:
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      swift_release();
      swift_release();
      swift_release();

      swift_release();
      if (*(void *)(a1 + 136)) {
        swift_release();
      }
      if (*(void *)(a1 + 184)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 160);
      }
LABEL_31:
      swift_release();
      swift_release();
      swift_release();
      break;
    default:
      return;
  }
}

void type metadata accessor for _ContiguousArrayStorage<(Namespace.ID, Transaction)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Namespace.ID, Transaction)>)
  {
    type metadata accessor for (Badge, Spacer)(255, &lazy cache variable for type metadata for (Namespace.ID, Transaction));
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Namespace.ID, Transaction)>);
    }
  }
}

uint64_t partial apply for closure #1 in View.navigationTitlePreferenceTransform(adding:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in View.navigationTitlePreferenceTransform(adding:)(a1, a2, v2 + 16);
}

uint64_t closure #1 in View.navigationTitlePreferenceTransform(adding:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (v6 == 1)
    {
      char v7 = *(unsigned char *)(a3 + 56);
      uint64_t v8 = *(void *)(a3 + 48);
      uint64_t v9 = *(unsigned __int8 *)(a3 + 40);
      uint64_t v10 = *(void *)(a3 + 32);
      long long v11 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v11;
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v7;
      uint64_t result = (uint64_t)outlined retain of NavigationTitleStorage((uint64_t *)a3);
      if (*(void *)(a1 + 24) == 1) {
        return result;
      }
LABEL_16:
      uint64_t v18 = *(void *)(a1 + 32);
      swift_retain();
      uint64_t result = outlined consume of Transaction?(v18);
      *(void *)(a1 + 32) = a2;
      return result;
    }
    int v16 = *(unsigned __int8 *)(a1 + 40);
    if (v16 == 5) {
      goto LABEL_8;
    }
    if (*(void *)(a1 + 48)) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v13 = *(void *)a3;
    uint64_t v14 = *(void *)(a3 + 8);
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    outlined copy of Text?(*(void *)a3, v14, v15, v6);
    int v16 = *(unsigned __int8 *)(a1 + 40);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v6;
    if (v16 == 5) {
LABEL_8:
    }
      LOBYTE(v16) = *(unsigned char *)(a3 + 40);
  }
  *(unsigned char *)(a1 + 40) = v16;
  uint64_t result = *(void *)(a1 + 48);
  if (!result) {
    uint64_t result = swift_retain();
  }
  *(void *)(a1 + 48) = result;
  int v17 = *(unsigned __int8 *)(a1 + 56);
  if (v17 == 3) {
    LOBYTE(v17) = *(unsigned char *)(a3 + 56);
  }
  *(unsigned char *)(a1 + 56) = v17;
  if (v6 != 1) {
    goto LABEL_16;
  }
  return result;
}

void partial apply for closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:)(a1, *(void *)(v1 + 16));
}

void closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = (uint64_t (**)())(a2 + direct field offset for AVKitCaptureButtonBridge.dispatch);
    uint64_t v7 = *(void *)(a2 + direct field offset for AVKitCaptureButtonBridge.dispatch);
    *uint64_t v6 = _s7SwiftUI27AVKitPressableCaptureButtonVAC5PhaseOytIegnnr_AcEIegnn_TRTA_0;
    v6[1] = (uint64_t (*)())v5;
    swift_retain();
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v3, v4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
    if (!*(void *)(a2 + direct field offset for AVKitCaptureButtonBridge.interaction)) {
      AVKitCaptureButtonBridge.attachInteraction()();
    }
    swift_release();
  }
  else
  {
    AVKitCaptureButtonBridge.removeInteraction()();
  }
}

void AVKitCaptureButtonBridge.removeInteraction()()
{
  uint64_t v1 = direct field offset for AVKitCaptureButtonBridge.interaction;
  uint64_t v2 = *(void *)(v0 + direct field offset for AVKitCaptureButtonBridge.interaction);
  if (v2)
  {
    uint64_t v3 = (void *)MEMORY[0x18C119DF0](v0 + direct field offset for AVKitCaptureButtonBridge.host);
    if (v3)
    {
      uint64_t v4 = v3;
      objc_msgSend(v3, sel_removeInteraction_, v2);

      uint64_t v5 = *(void **)(v0 + v1);
      *(void *)(v0 + v1) = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t PresentationState.presentationDidChange(_:animated:hasNoModifier:)(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  outlined init with copy of PresentationState.Base(v4, (uint64_t)v29);
  if (v39 == 8)
  {
    id v10 = v31;
    long long v27 = v37;
    v28[0] = *(_OWORD *)v38;
    *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)&v38[9];
    long long v23 = v33;
    long long v24 = v34;
    long long v25 = v35;
    long long v26 = v36;
    outlined init with copy of SheetPreference?(a1, (uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
    if (*(void *)&v15[0])
    {
      v21[4] = v15[4];
      v22[0] = v16[0];
      *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v16 + 9);
      v21[0] = v15[0];
      v21[1] = v15[1];
      v21[2] = v15[2];
      v21[3] = v15[3];
      outlined init with copy of SheetPreference((uint64_t)v21, (uint64_t)v15);
      id v17 = v10;
      LOBYTE(v18) = a2 & 1;
      outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)&v19);
      char v20 = 8;
      id v11 = v10;
      PresentationState.base.willset((uint64_t)v15);
      outlined assign with take of PresentationState.Base((uint64_t)v15, v4);

      outlined destroy of SheetPreference((uint64_t)v21);
    }
    else
    {
      _ss11AnyHashableVSgWOhTm_3((uint64_t)v15, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference);
      if (a3 & 1) != 0 && (static SemanticFeature.isEnabled.getter())
      {
        outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)v15);
        char v20 = 4;
      }
      else
      {
        *(void *)&v15[0] = v10;
        outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)v15 + 8);
        char v20 = 2;
        id v10 = v10;
      }
      PresentationState.base.willset((uint64_t)v15);
      outlined assign with take of PresentationState.Base((uint64_t)v15, v4);
    }
    outlined destroy of SheetPreference((uint64_t)&v23);
    uint64_t v13 = v29;
  }
  else
  {
    if (v39) {
      return outlined destroy of PresentationState.Base((uint64_t)v29);
    }
    id v8 = v31;
    int v9 = v32;
    long long v27 = v29[4];
    v28[0] = v30[0];
    *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)v30 + 9);
    long long v23 = v29[0];
    long long v24 = v29[1];
    long long v25 = v29[2];
    long long v26 = v29[3];
    if ((objc_msgSend(v31, sel_isBeingPresented) & 1) != 0
      || (objc_msgSend(v8, sel_isBeingDismissed) & 1) != 0)
    {
    }
    else
    {
      outlined init with copy of SheetPreference((uint64_t)&v23, (uint64_t)v15);
      id v17 = v8;
      int v18 = v9;
      char v20 = 1;
      id v14 = v8;
      PresentationState.base.willset((uint64_t)v15);
      outlined assign with take of PresentationState.Base((uint64_t)v15, v4);
    }
    uint64_t v13 = &v23;
  }
  return outlined destroy of SheetPreference((uint64_t)v13);
}

uint64_t outlined init with take of SheetPreference?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SheetPreference?(0, &lazy cache variable for type metadata for SheetPreference?, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PresentationHostingController()
{
  return __swift_instantiateGenericMetadata();
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    return 0;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t destroy for MinorProperties(uint64_t a1)
{
  unint64_t v1 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  Swift::Int v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (v1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

uint64_t destroy for NavigationSplitViewStyleConfiguration()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for EditMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<EmptyHoverEffect, HoverEffect>(255, a2, MEMORY[0x1E4F3FCB0], a3, MEMORY[0x1E4F3FBA0]);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.defaultHoverEffect : EnvironmentValues@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for ModifiedContent<EmptyHoverEffect, HoverEffect>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultHoverEffectKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultHoverEffectKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for ModifiedContent<EmptyHoverEffect, HoverEffect>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultHoverEffectKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultHoverEffectKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void type metadata accessor for ModifiedContent<EmptyHoverEffect, HoverEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect;
  if (!lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect;
  if (!lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverContainerEffect and conformance HoverContainerEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect;
  if (!lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect;
  if (!lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffect and conformance HoverEffect);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)()
{
  return implicit closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)();
}

uint64_t getEnumTag for NavigationLinkButtonStyle.Payload(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + v3;
  unint64_t v5 = ((((((((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  uint64_t v6 = a1[v5];
  int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_12;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v10 = (v9 | (v7 << (8 * v5))) + 2;
        LODWORD(v6) = v9 + 2;
        if (v5 >= 4) {
          uint64_t v6 = v6;
        }
        else {
          uint64_t v6 = v10;
        }
        break;
      default:
        return v6;
    }
  }
  return v6;
}

_UNKNOWN **base witness table accessor for ViewModifier in MatchedTransitionSourceSourceMarkingEffect()
{
  return &protocol witness table for MatchedTransitionSourceSourceMarkingEffect;
}

uint64_t type metadata completion function for SwiftUIGlue2()
{
  return type metadata completion function for SwiftUIGlue();
}

double closure #1 in ScrollViewLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  char v12 = a2 & 1;
  char v13 = a4 & 1;
  _ProposedSize.inset(by:)();
  v20[1] = a6;
  uint64_t v21 = v25;
  char v22 = v26;
  uint64_t v23 = v27;
  char v24 = v28;
  v20[0] = a5;
  uint64_t v14 = specialized static ScrollViewUtilities.sizeThatFits(in:contentComputer:axes:)((uint64_t)&v21, v20, a7);
  if (v15)
  {
    uint64_t v25 = a1;
    char v26 = v12;
    uint64_t v27 = a3;
    char v28 = v13;
    *(void *)&double v16 = *(_OWORD *)&_ProposedSize.fixingUnspecifiedDimensions()();
  }
  else
  {
    double v16 = *(double *)&v14;
  }
  EdgeInsets.horizontal.getter();
  double v18 = v16 + v17;
  EdgeInsets.vertical.getter();
  return v18;
}

uint64_t specialized static ScrollViewUtilities.sizeThatFits(in:contentComputer:axes:)(uint64_t a1, void *a2, char a3)
{
  if (!a3) {
    return 0;
  }
  if (!*a2) {
    static LayoutComputer.defaultValue.getter();
  }
  swift_retain();
  if ((Axis.Set.contains(_:)() & 1) == 0) {
    _ProposedSize.width.getter();
  }
  if ((Axis.Set.contains(_:)() & 1) == 0) {
    _ProposedSize.height.getter();
  }
  _ProposedSize.init(width:height:)();
  LayoutComputer.sizeThatFits(_:)();
  uint64_t v5 = v4;
  swift_release();
  uint64_t v6 = _ProposedSize.width.getter();
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = v6;
    if (Axis.Set.contains(_:)()) {
      uint64_t v5 = v8;
    }
  }
  _ProposedSize.height.getter();
  if ((v9 & 1) == 0) {
    Axis.Set.contains(_:)();
  }
  return v5;
}

void @objc _UIHostingView.tintColorDidChange()(void *a1)
{
  id v1 = a1;
  _UIHostingView.tintColorDidChange()();
}

Swift::Void __swiftcall _UIHostingView.tintColorDidChange()()
{
  uint64_t v0 = _UIHostingView.base.getter();
  if (MEMORY[0x18C119DF0](v0 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
}

uint64_t closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = static HorizontalAlignment.listRowSeparatorLeading.getter();
  uint64_t v9 = swift_allocObject();
  long long v10 = a2[5];
  *(_OWORD *)(v9 + 80) = a2[4];
  *(_OWORD *)(v9 + 96) = v10;
  *(_OWORD *)(v9 + 106) = *(_OWORD *)((char *)a2 + 90);
  long long v11 = a2[1];
  *(_OWORD *)(v9 + 16) = *a2;
  *(_OWORD *)(v9 + 32) = v11;
  long long v12 = a2[3];
  *(_OWORD *)(v9 + 48) = a2[2];
  *(_OWORD *)(v9 + 64) = v12;
  *(unsigned char *)(v9 + 122) = a3;
  outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>(a1, (uint64_t)a4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  a4[14] = v8;
  a4[15] = partial apply for closure #1 in closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  a4[16] = v9;

  return outlined retain of ListLabelStyle.Implementation((uint64_t)a2);
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance AlignmentModifiedLayoutComputer.Engine(uint64_t a1, uint64_t *a2)
{
  return AlignmentModifiedLayoutComputer.Engine.explicitAlignment(_:at:)(a1, a2);
}

uint64_t AlignmentModifiedLayoutComputer.Engine.explicitAlignment(_:at:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  if (*v2 != a1) {
    return LayoutComputer.explicitAlignment(_:at:)();
  }
  char v7 = (double (*)(void *))v2[1];
  uint64_t v8 = v2[4];
  v11[0] = v2[3];
  v11[1] = v8;
  _OWORD v11[2] = v4;
  v11[3] = v3;
  v11[4] = v6;
  v11[5] = v5;
  swift_retain();
  double v9 = v7(v11);
  swift_release();
  return *(void *)&v9;
}

uint64_t partial apply for closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(uint64_t a1)
{
  return closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, *(unsigned char *)(v1 + 16));
}

uint64_t closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(uint64_t a1, char a2)
{
  if (a2) {
    uint64_t v2 = static VerticalAlignment.firstTextLineCenter.getter();
  }
  else {
    uint64_t v2 = static VerticalAlignment.center.getter();
  }
  return MEMORY[0x18C10E980](v2);
}

double partial apply for closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(uint64_t a1)
{
  return closure #1 in closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, v1 + 16, *(unsigned char *)(v1 + 122));
}

double closure #1 in closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(uint64_t a1, uint64_t a2, char a3)
{
  type metadata accessor for ScaledMetric<CGFloat>();
  ScaledMetric.wrappedValue.getter();
  uint64_t v5 = *(void *)(a2 + 64);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 72);
  int v7 = *(unsigned __int8 *)(a2 + 73);
  outlined retain of ListLabelStyle.Implementation(a2);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7);
  double v8 = COERCE_DOUBLE(specialized Environment.wrappedValue.getter(v5, v6 | (v7 << 8)));
  char v10 = v9;
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
  outlined release of ListLabelStyle.Implementation(a2);
  if (v10) {
    double v11 = 10.0;
  }
  else {
    double v11 = v8;
  }
  uint64_t v12 = static HorizontalAlignment.leadingText.getter();
  MEMORY[0x18C10E990](v12);
  double v14 = v16 + v11;
  if ((a3 & 1) == 0) {
    double v14 = 0.0;
  }
  return v13 - v14;
}

void type metadata accessor for ScaledMetric<CGFloat>()
{
  if (!lazy cache variable for type metadata for ScaledMetric<CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    unint64_t v0 = type metadata accessor for ScaledMetric();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>);
    }
  }
}

uint64_t ListLabelStyle.Implementation.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[5];
  long long v38 = v1[4];
  v39[0] = v3;
  *(_OWORD *)((char *)v39 + 10) = *(long long *)((char *)v1 + 90);
  long long v4 = v1[1];
  long long v34 = *v1;
  long long v35 = v4;
  long long v5 = v1[3];
  long long v36 = v1[2];
  long long v37 = v5;
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  if (one-time initialization token for listLabelIconAlignment != -1) {
    swift_once();
  }
  uint64_t v33 = static VerticalAlignment.listLabelIconAlignment;
  uint64_t v32 = static HorizontalAlignment.leading.getter();
  uint64_t v6 = v38;
  uint64_t v7 = BYTE8(v38);
  int v8 = BYTE9(v38);
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  uint64_t v9 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  char v11 = v10;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  outlined release of ListLabelStyle.Implementation((uint64_t)&v34);
  uint64_t v12 = 0x4024000000000000;
  if ((v11 & 1) == 0) {
    uint64_t v12 = v9;
  }
  uint64_t v31 = v12;
  double v13 = (_OWORD *)swift_allocObject();
  long long v14 = v39[0];
  v13[5] = v38;
  v13[6] = v14;
  *(_OWORD *)((char *)v13 + 106) = *(_OWORD *)((char *)v39 + 10);
  long long v15 = v35;
  v13[1] = v34;
  v13[2] = v15;
  long long v16 = v37;
  v13[3] = v36;
  v13[4] = v16;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = swift_getKeyPath();
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  uint64_t v18 = static VerticalAlignment.firstTextLineCenter.getter();
  uint64_t v19 = static HorizontalAlignment.leading.getter();
  outlined retain of ListLabelStyle.Implementation((uint64_t)&v34);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  uint64_t v20 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  char v22 = v21;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  outlined release of ListLabelStyle.Implementation((uint64_t)&v34);
  if (v22) {
    uint64_t v23 = 0x4024000000000000;
  }
  else {
    uint64_t v23 = v20;
  }
  char v24 = (_OWORD *)swift_allocObject();
  long long v25 = v39[0];
  v24[5] = v38;
  v24[6] = v25;
  *(_OWORD *)((char *)v24 + 106) = *(_OWORD *)((char *)v39 + 10);
  long long v26 = v35;
  v24[1] = v34;
  v24[2] = v26;
  long long v27 = v37;
  v24[3] = v36;
  v24[4] = v27;
  uint64_t v28 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = partial apply for closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  *(void *)(a1 + 8) = v13;
  *(void *)(a1 + 16) = v32;
  *(void *)(a1 + 24) = v33;
  *(void *)(a1 + 32) = v31;
  *(_WORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = KeyPath;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v17;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = partial apply for closure #1 in ListLabelStyle.Implementation.preV6Layout.getter;
  *(void *)(a1 + 88) = v24;
  *(void *)(a1 + 96) = v19;
  *(void *)(a1 + 104) = v18;
  *(void *)(a1 + 112) = v23;
  *(_WORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = v28;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = result;
  *(unsigned char *)(a1 + 152) = 0;
  return result;
}

uint64_t outlined retain of ListLabelStyle.Implementation(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 73);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  char v14 = *(unsigned char *)(a1 + 105);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 72);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 104);
  outlined copy of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<CGFloat?>.Content(v6, v10, v7);
  outlined copy of Environment<Bool>.Content(v8, v9);
  outlined copy of Environment<ListItemTint?>.Content(v13, v12, v14);
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x100) == 0)
  {
    swift_retain();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    char v5 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v10 = v8;
      *(_DWORD *)char v7 = 136315138;
      uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000188328100, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v8, -1, -1);
      MEMORY[0x18C119C60](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<CGFloat?>.Content(a1, a2, 0);
    swift_release();
    swift_release();
    return v11;
  }
  return a1;
}

{
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if ((a2 & 0x10000) != 0)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    char v5 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v10 = v8;
      *(_DWORD *)char v7 = 136315138;
      uint64_t v11 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001883282A0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v8, -1, -1);
      MEMORY[0x18C119C60](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Color?>.Content(a1, a2);
    swift_release();
    swift_release();
    return v11;
  }
  return a1;
}

uint64_t closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(char a1@<W0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  long long v7 = a2[2];
  *(_OWORD *)(v6 + 72) = a2[3];
  long long v8 = a2[5];
  *(_OWORD *)(v6 + 88) = a2[4];
  *(_OWORD *)(v6 + 104) = v8;
  *(_OWORD *)(v6 + 114) = *(_OWORD *)((char *)a2 + 90);
  long long v9 = a2[1];
  *(_OWORD *)(v6 + 24) = *a2;
  *(_OWORD *)(v6 + 40) = v9;
  char v10 = a1 & 1;
  *(unsigned char *)(v6 + 16) = a1;
  *(_OWORD *)(v6 + 56) = v7;
  outlined retain of ListLabelStyle.Implementation((uint64_t)a2);
  type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>(0);
  lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>);
  Group.init<A, B>(subviews:transform:)();
  if (one-time initialization token for listLabelIconAlignment != -1) {
    swift_once();
  }
  uint64_t v11 = static VerticalAlignment.listLabelIconAlignment;
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = v10;
  outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v14, (uint64_t)a3, (uint64_t (*)(void))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>);
  a3[10] = v11;
  a3[11] = partial apply for closure #2 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter;
  a3[12] = v12;
  return outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>);
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)(255, a3, a4);
    unint64_t v5 = type metadata accessor for TupleView();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>(uint64_t a1)
{
}

uint64_t closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = SubviewsCollection.endIndex.getter();
  if (v6)
  {
    char v33 = a1;
    uint64_t v35 = v6;
    v39[0] = static VerticalAlignment.center.getter();
    v39[1] = 0;
    char v40 = 1;
    uint64_t v7 = *(void *)(a2 + 96);
    uint64_t v8 = *(unsigned __int8 *)(a2 + 104);
    int v9 = *(unsigned __int8 *)(a2 + 105);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<ListItemTint?>.Content(v7, v8, v9);
    specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8), (uint64_t)&v41);
    outlined consume of Environment<ListItemTint?>.Content(v7, v8, v9);
    uint64_t v10 = v41;
    if ((void)v41 == 1)
    {
      static Color.accentColor.getter();
    }
    else
    {
      static Color.secondary.getter();
      if (v10) {
        swift_release();
      }
    }
    outlined release of ListLabelStyle.Implementation(a2);
    type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(0, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, MEMORY[0x1E4F415B8]);
    lazy protocol witness table accessor for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>();
    View.defaultForegroundColor(_:)();
    swift_release();
    uint64_t v12 = *((void *)&v41 + 1);
    uint64_t v17 = v41;
    uint64_t v13 = v42[0];
    uint64_t v14 = *(void *)&v42[8];
    uint64_t v18 = *(void *)&v42[16];
    uint64_t v19 = *(void *)(a2 + 80);
    char v20 = *(unsigned char *)(a2 + 88);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<Bool>.Content(v19, v20);
    specialized Environment.wrappedValue.getter(v19, v20, v39);
    outlined consume of Environment<Bool>.Content(v19, v20);
    if (LOBYTE(v39[0]) > 8u)
    {
      outlined release of ListLabelStyle.Implementation(a2);
      uint64_t v22 = 0;
    }
    else
    {
      outlined copy of Environment<Bool>.Content(v19, v20);
      specialized Environment.wrappedValue.getter(v19, v20, v39);
      outlined consume of Environment<Bool>.Content(v19, v20);
      unsigned int v21 = LOBYTE(v39[0]);
      outlined release of ListLabelStyle.Implementation(a2);
      if (v21 >= 7) {
        uint64_t v22 = 1;
      }
      else {
        uint64_t v22 = 2;
      }
    }
    uint64_t KeyPath = swift_getKeyPath();
    long long v23 = *(_OWORD *)(a2 + 16);
    long long v41 = *(_OWORD *)a2;
    *(_OWORD *)id v42 = v23;
    *(_OWORD *)&v42[9] = *(_OWORD *)(a2 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v32 = v45;
    uint64_t v37 = v47;
    uint64_t v38 = v44;
    uint64_t v36 = v48;
    uint64_t v30 = v49;
    uint64_t v31 = v46;
    uint64_t v11 = v17;
    uint64_t v15 = v18;
    uint64_t v6 = v35;
    uint64_t v16 = v22;
    a1 = v33;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t KeyPath = 0;
    uint64_t v16 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v36 = 0;
    uint64_t v30 = 0;
  }
  char v24 = (v6 != 0) & a1;
  uint64_t v25 = swift_allocObject();
  long long v26 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v25 + 72) = *(_OWORD *)(a2 + 48);
  long long v27 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v25 + 88) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v25 + 104) = v27;
  *(_OWORD *)(v25 + 114) = *(_OWORD *)(a2 + 90);
  long long v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v25 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v25 + 40) = v28;
  *(unsigned char *)(v25 + 16) = v24;
  *(_OWORD *)(v25 + 56) = v26;
  outlined retain of ListLabelStyle.Implementation(a2);
  type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>(0);
  lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)> and conformance TupleView<A>, type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>);
  Group.init<A, B>(subviews:transform:)();
  long long v41 = (unint64_t)static HorizontalAlignment.leading.getter();
  v42[0] = 1;
  outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v43, (uint64_t)&v42[8], (uint64_t (*)(void))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>);
  outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)&v41, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v13;
  a3[3] = v14;
  a3[4] = v15;
  a3[5] = KeyPath;
  a3[6] = v16;
  a3[7] = v38;
  a3[8] = v32;
  a3[9] = v31;
  a3[10] = v37;
  a3[11] = v36;
  a3[12] = v30;
  outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v39, (uint64_t)(a3 + 13), (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v11, v12, v13, v14);
  outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)&v41, (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>);
  outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
  return outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v11, v12, v13, v14);
}

uint64_t outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined release of ListLabelStyle.Implementation(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 73);
  uint64_t v8 = *(void *)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  char v14 = *(unsigned char *)(a1 + 105);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 72);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 104);
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<CGFloat?>.Content(v6, v10, v7);
  outlined consume of Environment<Bool>.Content(v8, v9);
  outlined consume of Environment<ListItemTint?>.Content(v13, v12, v14);
  return a1;
}

void type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    a3(255);
    a4(255);
    lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
    unint64_t v7 = type metadata accessor for StaticIf();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>(uint64_t a1)
{
}

void type metadata accessor for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>()
{
  if (!lazy cache variable for type metadata for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)
  {
    type metadata accessor for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>();
    lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>> and conformance LabelGroup<A>, (void (*)(uint64_t))type metadata accessor for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    _s7SwiftUI5ColorVSgMaTm_1(255, &lazy cache variable for type metadata for Subview?, MEMORY[0x1E4F41708], MEMORY[0x1E4FBB718]);
    _s7SwiftUI5ColorVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>(uint64_t a1)
{
}

void type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(255, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>);
  }
  return result;
}

uint64_t outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v35 = a1;
  if (SubviewsCollection.endIndex.getter())
  {
    _VariadicView_Children.subscript.getter();
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    memset(v40, 0, sizeof(v40));
  }
  if (a2)
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    long long v54 = *(_OWORD *)a3;
    v55[0] = v6;
    *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)(a3 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    uint64_t v7 = *(void *)(a3 + 64);
    uint64_t v8 = *(unsigned __int8 *)(a3 + 72);
    int v9 = *(unsigned __int8 *)(a3 + 73);
    outlined retain of ListLabelStyle.Implementation(a3);
    outlined copy of Environment<CGFloat?>.Content(v7, v8, v9);
    specialized Environment.wrappedValue.getter(v7, v8 | (v9 << 8));
    outlined consume of Environment<CGFloat?>.Content(v7, v8, v9);
    outlined release of ListLabelStyle.Implementation(a3);
  }
  _s7SwiftUI5ColorVSgMaTm_1(0, &lazy cache variable for type metadata for Subview?, MEMORY[0x1E4F41708], MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type Subview? and conformance <A> A?();
  View.bodyHeadOutdent(_:)();
  outlined destroy of Subview?((uint64_t)v40);
  type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
  long long v34 = &v30;
  MEMORY[0x1F4188790](v10);
  uint64_t v31 = (_OWORD *)a3;
  int v33 = a2;
  type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>();
  type metadata accessor for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>(0);
  lazy protocol witness table accessor for type ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  View.staticIf<A, B>(_:trueModifier:)();
  outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)&v54, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  v55[11] = v50;
  v55[12] = v51;
  v55[13] = v52;
  uint64_t v56 = v53;
  v55[7] = v46;
  _OWORD v55[8] = v47;
  v55[9] = v48;
  v55[10] = v49;
  v55[3] = v42;
  v55[4] = v43;
  v55[5] = v44;
  v55[6] = v45;
  long long v54 = v40[0];
  v55[0] = v40[1];
  v55[1] = v40[2];
  double v55[2] = v41;
  outlined init with copy of SubviewsCollection(v35, (uint64_t)v40);
  uint64_t v11 = SubviewsCollection.endIndex.getter();
  uint64_t result = SubviewsCollection.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = SubviewsCollection.endIndex.getter();
  if (v11 < 0 || result < v11) {
    goto LABEL_18;
  }
  if (v11)
  {
    uint64_t result = SubviewsCollection.endIndex.getter();
    char v13 = v33;
    if (result < 1)
    {
LABEL_20:
      __break(1u);
      return result;
    }
    outlined init with copy of SubviewsCollection((uint64_t)v40, (uint64_t)&v37);
    uint64_t v14 = 1;
  }
  else
  {
    outlined init with copy of SubviewsCollection((uint64_t)v40, (uint64_t)&v37);
    uint64_t v14 = SubviewsCollection.endIndex.getter();
    char v13 = v33;
  }
  outlined destroy of SubviewsCollection((uint64_t)&v37);
  uint64_t result = SubviewsCollection.endIndex.getter();
  if (result < v14)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v15 = result;
  outlined init with copy of SubviewsCollection((uint64_t)v40, (uint64_t)v38);
  *(void *)&long long v37 = v14;
  *((void *)&v37 + 1) = v15;
  outlined destroy of SubviewsCollection((uint64_t)v40);
  if (v13)
  {
    uint64_t v16 = (uint64_t)v31;
    long long v17 = v31[1];
    v40[0] = *v31;
    v40[1] = v17;
    *(_OWORD *)((char *)&v40[1] + 9) = *(_OWORD *)((char *)v31 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    uint64_t v18 = *(void *)(v16 + 64);
    uint64_t v19 = *(unsigned __int8 *)(v16 + 72);
    int v20 = *(unsigned __int8 *)(v16 + 73);
    outlined retain of ListLabelStyle.Implementation(v16);
    outlined copy of Environment<CGFloat?>.Content(v18, v19, v20);
    specialized Environment.wrappedValue.getter(v18, v19 | (v20 << 8));
    outlined consume of Environment<CGFloat?>.Content(v18, v19, v20);
    outlined release of ListLabelStyle.Implementation(v16);
  }
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  outlined init with copy of SubviewsCollectionSlice((uint64_t)&v37, (uint64_t)v40);
  BYTE8(v42) = 2;
  *(void *)&long long v43 = v22;
  *((void *)&v43 + 1) = v24;
  *(void *)&long long v44 = v26;
  *((void *)&v44 + 1) = v28;
  LOBYTE(v45) = 0;
  outlined destroy of SubviewsCollectionSlice((uint64_t)&v37);
  v38[4] = v43;
  v38[5] = v44;
  long long v37 = v40[0];
  v38[0] = v40[1];
  v38[1] = v40[2];
  char v39 = v45;
  v38[2] = v41;
  v38[3] = v42;
  outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)&v54, (uint64_t)v40, (uint64_t (*)(void))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
  outlined init with copy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)&v37, (uint64_t)v36);
  uint64_t v29 = v32;
  outlined init with copy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v40, v32, (uint64_t (*)(void))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
  outlined init with copy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)v36, v29 + 248);
  outlined destroy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)&v37);
  outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)&v54, (uint64_t (*)(void))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
  outlined destroy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>((uint64_t)v36);
  return outlined destroy of Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>);
}

uint64_t outlined destroy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>(uint64_t a1)
{
  type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(0, &lazy cache variable for type metadata for ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t key path getter for EnvironmentValues.listItemTint : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(0, &lazy cache variable for type metadata for ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Subview? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Subview? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Subview? and conformance <A> A?)
  {
    _s7SwiftUI5ColorVSgMaTm_1(255, &lazy cache variable for type metadata for Subview?, MEMORY[0x1E4F41708], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>()
{
  if (!lazy cache variable for type metadata for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>)
  {
    type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>, MEMORY[0x1E4F406D0], MEMORY[0x1E4F406C8], MEMORY[0x1E4F40C60]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for InvertedViewInputPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>();
    lazy protocol witness table accessor for type Subview? and conformance <A> A?();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of Subview?(uint64_t a1)
{
  _s7SwiftUI5ColorVSgMaTm_1(0, &lazy cache variable for type metadata for Subview?, MEMORY[0x1E4F41708], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Color?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5ColorVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5ColorVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5ColorVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t closure #1 in closure #1 in closure #1 in closure #3 in closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *a1;
  uint64_t v5 = a1[1];
  if (result == v5)
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
  }
  else
  {
    if (result >= v5)
    {
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
    _VariadicView_Children.subscript.getter();
  }
  uint64_t v6 = MEMORY[0x1E4F41708];
  uint64_t v7 = MEMORY[0x1E4FBB718];
  _s7SwiftUI5ColorVSgMaTm_2(0, &lazy cache variable for type metadata for Subview?, MEMORY[0x1E4F41708], MEMORY[0x1E4FBB718]);
  lazy protocol witness table accessor for type Subview? and conformance <A> A?();
  View.bodyHeadOutdent(_:)();
  outlined destroy of Subview?((uint64_t)&v25, (uint64_t)&lazy cache variable for type metadata for Subview?, v6, v7, (uint64_t (*)(void))_s7SwiftUI5ColorVSgMaTm_2);
  EdgeInsets.init(_all:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  outlined init with copy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v34, (uint64_t)&v25, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  LOBYTE(v32) = 2;
  *((void *)&v32 + 1) = v9;
  *(void *)int v33 = v11;
  *(void *)&v33[8] = v13;
  *(void *)&v33[16] = v15;
  v33[24] = 0;
  outlined destroy of _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  v34[6] = v31;
  v34[7] = v32;
  v35[0] = *(_OWORD *)v33;
  *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)&v33[9];
  v34[2] = v27;
  v34[3] = v28;
  v34[4] = v29;
  v34[5] = v30;
  v34[0] = v25;
  v34[1] = v26;
  uint64_t result = outlined init with copy of SubviewsCollectionSlice((uint64_t)a1, (uint64_t)&v22);
  long long v16 = v22;
  if (*((uint64_t *)&v22 + 1) < (uint64_t)v22)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (__OFSUB__(*((void *)&v22 + 1), (void)v22))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (*((void *)&v22 + 1) == (void)v22)
  {
    uint64_t v17 = 0;
LABEL_12:
    outlined init with copy of SubviewsCollectionSlice((uint64_t)&v22, (uint64_t)&v25);
    if (*((void *)&v16 + 1) == (void)v16) {
      uint64_t v18 = *((void *)&v25 + 1);
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t result = outlined destroy of SubviewsCollectionSlice((uint64_t)&v25);
    uint64_t v19 = *((void *)&v22 + 1);
    if (*((uint64_t *)&v22 + 1) >= v18)
    {
      outlined init with copy of SubviewsCollection((uint64_t)v23, (uint64_t)&v26);
      *(void *)&long long v25 = v18;
      *((void *)&v25 + 1) = v19;
      outlined destroy of SubviewsCollectionSlice((uint64_t)&v22);
      v23[1] = v27;
      v23[2] = v28;
      uint64_t v24 = v29;
      long long v22 = v25;
      v23[0] = v26;
      outlined init with copy of ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>((uint64_t)v34, (uint64_t)&v25);
      outlined init with copy of SubviewsCollectionSlice((uint64_t)&v22, (uint64_t)v21);
      outlined init with copy of ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>((uint64_t)&v25, a2);
      outlined init with copy of SubviewsCollectionSlice((uint64_t)v21, a2 + 160);
      outlined destroy of SubviewsCollectionSlice((uint64_t)&v22);
      uint64_t v20 = MEMORY[0x1E4F3FA80];
      outlined destroy of Subview?((uint64_t)v34, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (uint64_t)type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, MEMORY[0x1E4F3FA80], (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>);
      outlined destroy of SubviewsCollectionSlice((uint64_t)v21);
      return outlined destroy of Subview?((uint64_t)&v25, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (uint64_t)type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>);
    }
    goto LABEL_19;
  }
  uint64_t v17 = v22 + 1;
  if (!__OFADD__((void)v22, 1))
  {
    if (v17 < (uint64_t)v22 || *((uint64_t *)&v22 + 1) < v17) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of SubviewsCollectionSlice(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SubviewsCollectionSlice(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Subview?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t closure #2 in LeadingTrailingLabeledContentStyle_Phone._Body.body.getter(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SubviewsCollection(a1, (uint64_t)v26);
  uint64_t v4 = SubviewsCollection.endIndex.getter();
  outlined init with copy of SubviewsCollection((uint64_t)v26, (uint64_t)&v43);
  Swift::Int v5 = 0;
  if (v4)
  {
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      long long v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      outlined destroy of SubviewsCollection((uint64_t)&v43);
      v30[0] = *((void *)&v36 + 1);
      ContainerValues.subscript.getter();
      int v6 = v28;
      uint64_t result = outlined destroy of Subview((uint64_t)&v31);
      if (v6 == 2 || (v6 & 1) != 0) {
        break;
      }
      Swift::Int v5 = SubviewsCollection.index(after:)(v5);
      uint64_t v8 = SubviewsCollection.endIndex.getter();
      outlined init with copy of SubviewsCollection((uint64_t)v26, (uint64_t)&v43);
      if (v5 == v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t result = outlined destroy of SubviewsCollection((uint64_t)&v43);
  }
  if (v5 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of SubviewsCollection((uint64_t)v26, (uint64_t)&v45);
    uint64_t v43 = 0;
    Swift::Int v44 = v5;
    outlined destroy of SubviewsCollection((uint64_t)v26);
    outlined init with copy of SubviewsCollection(a1, (uint64_t)v26);
    uint64_t v9 = SubviewsCollection.endIndex.getter();
    outlined init with copy of SubviewsCollection((uint64_t)v26, (uint64_t)v30);
    Swift::Int v10 = 0;
    if (v9)
    {
      while (1)
      {
        _VariadicView_Children.subscript.getter();
        long long v33 = v39;
        long long v34 = v40;
        long long v35 = v41;
        long long v36 = v42;
        long long v31 = v37;
        long long v32 = v38;
        outlined destroy of SubviewsCollection((uint64_t)v30);
        uint64_t v28 = *((void *)&v36 + 1);
        ContainerValues.subscript.getter();
        int v11 = v29;
        outlined destroy of Subview((uint64_t)&v31);
        if (v11 == 2 || (v11 & 1) != 0) {
          break;
        }
        Swift::Int v10 = SubviewsCollection.index(after:)(v10);
        uint64_t v12 = SubviewsCollection.endIndex.getter();
        outlined init with copy of SubviewsCollection((uint64_t)v26, (uint64_t)v30);
        if (v10 == v12) {
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      outlined destroy of SubviewsCollection((uint64_t)v30);
    }
    uint64_t result = SubviewsCollection.endIndex.getter();
    if (result >= v10)
    {
      uint64_t v13 = result;
      outlined init with copy of SubviewsCollection((uint64_t)v26, (uint64_t)&v38);
      *(void *)&long long v37 = v10;
      *((void *)&v37 + 1) = v13;
      outlined destroy of SubviewsCollection((uint64_t)v26);
      BOOL v14 = v43 != v44;
      uint64_t v15 = *(void *)(a2 + 88);
      char v16 = *(unsigned char *)(a2 + 96);
      outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
      outlined copy of Environment<Bool>.Content(v15, v16);
      char v17 = specialized Environment.wrappedValue.getter(v15, v16);
      outlined consume of Environment<Bool>.Content(v15, v16);
      outlined release of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
      outlined init with copy of SubviewsCollectionSlice((uint64_t)&v37, (uint64_t)&v31);
      outlined init with copy of SubviewsCollectionSlice((uint64_t)&v43, (uint64_t)v26);
      uint64_t v18 = swift_allocObject();
      long long v19 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(v18 + 88) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(v18 + 104) = v19;
      *(_OWORD *)(v18 + 120) = *(_OWORD *)(a2 + 96);
      long long v20 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)a2;
      *(_OWORD *)(v18 + 40) = v20;
      long long v21 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(v18 + 56) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(v18 + 72) = v21;
      long long v22 = v34;
      *(_OWORD *)(v18 + 176) = v33;
      *(_OWORD *)(v18 + 192) = v22;
      long long v23 = v32;
      *(_OWORD *)(v18 + 144) = v31;
      *(_OWORD *)(v18 + 160) = v23;
      long long v24 = v26[0];
      *(_OWORD *)(v18 + 232) = v26[1];
      long long v25 = v26[3];
      *(_OWORD *)(v18 + 248) = v26[2];
      *(_OWORD *)(v18 + 264) = v25;
      *(unsigned char *)(v18 + 16) = v14;
      *(unsigned char *)(v18 + 136) = *(unsigned char *)(a2 + 112);
      *(unsigned char *)(v18 + 137) = v17 & v14;
      *(void *)(v18 + 208) = v35;
      *(void *)(v18 + 280) = v27;
      *(_OWORD *)(v18 + 216) = v24;
      outlined retain of LeadingTrailingLabeledContentStyle_Phone._Body(a2);
      type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>();
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>();
      Group.init<A, B>(subviews:transform:)();
      outlined destroy of SubviewsCollectionSlice((uint64_t)&v37);
      return outlined destroy of SubviewsCollectionSlice((uint64_t)&v43);
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of SubviewsCollection(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SubviewsCollection(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Subview(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
    type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>(255);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?> and conformance _OverlayModifier<A>, type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(a4, a5);
    unint64_t v8 = type metadata accessor for GroupElementsOfContent();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>(uint64_t a1)
{
}

void type metadata accessor for AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>>()
{
  if (!lazy cache variable for type metadata for AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>>)
  {
    type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>(255);
    lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>> and conformance <A> Group<A>, type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>, (void (*)(void))lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>> and conformance GroupElementsOfContent<A, B>);
    unint64_t v0 = type metadata accessor for AccessibilityAdaptiveStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>(uint64_t a1)
{
}

void type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>()
{
  if (!lazy cache variable for type metadata for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>)
  {
    type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>(255);
    lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)> and conformance TupleView<A>, type metadata accessor for TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>);
    unint64_t v0 = type metadata accessor for GroupElementsOfContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>);
    }
  }
}

void type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>(uint64_t a1)
{
}

void type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>(uint64_t a1)
{
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    _s7SwiftUI5ColorVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>);
    }
  }
}

void type metadata accessor for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>()
{
  if (!lazy cache variable for type metadata for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>)
  {
    type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>(255);
    lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>, type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>, (void (*)(void))lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>> and conformance GroupElementsOfContent<A, B>);
    unint64_t v0 = type metadata accessor for LabelGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>);
    }
  }
}

void type metadata accessor for (StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)()
{
  if (!lazy cache variable for type metadata for (StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>))
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>(255);
    type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(255, &lazy cache variable for type metadata for ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>, MEMORY[0x1E4F40CC8], MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>));
    }
  }
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>(uint64_t a1)
{
}

void type metadata accessor for AccessibilityAdaptiveStack<ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>>()
{
  if (!lazy cache variable for type metadata for AccessibilityAdaptiveStack<ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>>)
  {
    type metadata accessor for ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>, (void (*)(void))lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>> and conformance <A> Group<A>);
    unint64_t v0 = type metadata accessor for AccessibilityAdaptiveStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityAdaptiveStack<ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, _AlignmentWritingModifier>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>> and conformance <A> Group<A>()
{
  return lazy protocol witness table accessor for type Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>> and conformance <A> Group<A>(&lazy protocol witness table cache variable for type Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>> and conformance <A> Group<A>, type metadata accessor for Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>>, (void (*)(void))lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>> and conformance GroupElementsOfContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for GaugeStyleConfiguration.CurrentValueLabel?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for GaugeStyleConfiguration.CurrentValueLabel?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>> and conformance GroupElementsOfContent<A, B>()
{
  return lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>> and conformance GroupElementsOfContent<A, B>, (void (*)(uint64_t))type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>);
}

uint64_t lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>> and conformance GroupElementsOfContent<A, B>()
{
  return lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>> and conformance GroupElementsOfContent<A, B>, type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>);
}

uint64_t lazy protocol witness table accessor for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>> and conformance GroupElementsOfContent<A, B>()
{
  return lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>> and conformance GroupElementsOfContent<A, B>, type metadata accessor for GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, VStack<LabelGroup<Group<GroupElementsOfContent<LabelStyleConfiguration.Title, TupleView<(StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>>, ModifiedContent<SubviewsCollectionSlice, _PaddingLayout>)>>>>>)>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>)
  {
    type metadata accessor for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>();
    _s7SwiftUI5ColorVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(255, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, MEMORY[0x1E4F415B8]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Color?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>);
    lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>();
    lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>();
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, MEMORY[0x1E4F417E0], MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>)
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA41ListLabeledContentPrefersHorizontalLayoutVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout, MEMORY[0x1E4F417E0], MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

uint64_t ScrollView.scrollDisabled(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 36) + 40) = a1 ^ 1;
  return result;
}

uint64_t initializeWithCopy for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
  long long v9 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = v9;
  *(unsigned char *)(v7 + 40) = *(unsigned char *)(v8 + 40);
  uint64_t v10 = *(void *)(v8 + 48);
  if (v10)
  {
    uint64_t v11 = *(void *)(v8 + 56);
    *(void *)(v7 + 48) = v10;
    *(void *)(v7 + 56) = v11;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
  }
  swift_unknownObjectWeakCopyInit();
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  uint64_t v12 = *(void *)(v8 + 80);
  if (v12)
  {
    uint64_t v13 = *(void *)(v8 + 88);
    *(void *)(v7 + 80) = v12;
    *(void *)(v7 + 88) = v13;
    *(void *)(v7 + 96) = *(void *)(v8 + 96);
    swift_retain();
  }
  else
  {
    long long v14 = *(_OWORD *)(v8 + 80);
    *(void *)(v7 + 96) = *(void *)(v8 + 96);
    *(_OWORD *)(v7 + 80) = v14;
  }
  *(void *)(v7 + 104) = *(void *)(v8 + 104);
  *(void *)(v7 + 112) = *(void *)(v8 + 112);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t objectdestroy_6Tm()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for FocusGroupIdentifier()
{
  return &type metadata for FocusGroupIdentifier;
}

ValueMetadata *type metadata accessor for AnyNavigationPath()
{
  return &type metadata for AnyNavigationPath;
}

ValueMetadata *type metadata accessor for SheetPreference.InspectorKey()
{
  return &type metadata for SheetPreference.InspectorKey;
}

ValueMetadata *type metadata accessor for PopoverPresentation()
{
  return &type metadata for PopoverPresentation;
}

uint64_t initializeWithTake for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 17 + a1) & ~v6;
  uint64_t v8 = (v6 + 17 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  uint64_t v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (long long *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = *v11;
  long long v13 = v11[2];
  v10[1] = v11[1];
  _OWORD v10[2] = v13;
  *uint64_t v10 = v12;
  unint64_t v14 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = v16;
  unint64_t v17 = ((unint64_t)v10 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v11 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  unint64_t v19 = ((unint64_t)v10 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v11 + 87) & 0xFFFFFFFFFFFFFFF8;
  int v21 = *(void *)(v20 + 8);
  if (*(void *)(v20 + 8) >= 0xFFFFFFFFuLL) {
    int v21 = -1;
  }
  if (v21 - 1 < 0)
  {
    unint64_t v19 = swift_weakTakeInit();
    *(_OWORD *)(v19 + 8) = *(_OWORD *)(v20 + 8);
  }
  else
  {
    long long v22 = *(_OWORD *)v20;
    *(void *)(v19 + 16) = *(void *)(v20 + 16);
    *(_OWORD *)unint64_t v19 = v22;
  }
  *(unsigned char *)(v19 + 24) = *(unsigned char *)(v20 + 24);
  *(void *)(((unint64_t)v10 + 119) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 119) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t type metadata completion function for BaseModifier.Transform()
{
  uint64_t result = type metadata accessor for BaseModifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in BoundNavigationPathDetector.updateValue()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in BoundNavigationPathDetector.updateValue()(a1);
}

uint64_t closure #1 in BoundNavigationPathDetector.updateValue()@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  AGGraphGetValue();
  swift_retain();
  char v2 = dispatch thunk of AnyLocation.update()();
  uint64_t result = swift_release();
  *(unsigned char *)(a1 + 8) = v2 & 1;
  return result;
}

id partial apply for closure #1 in closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)()
{
  return closure #1 in closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(*(long long **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

id closure #1 in closure #1 in NavigationSplitSidebarStateMachine.splitViewController(_:willChangeTo:visibilityEngine:)(long long *a1, void *a2, uint64_t a3)
{
  long long v7 = *a1;
  int v8 = *((_DWORD *)a1 + 4);
  outlined init with take of NavigationSplitViewVisibility?((uint64_t)&v8 + 2, (uint64_t)&v10 + 2);
  id result = (id)outlined init with take of NavigationSplitViewVisibility?((uint64_t)&v10 + 2, (uint64_t)&v10 + 4);
  if (BYTE5(v10) << 8 == 512)
  {
    id result = objc_msgSend(a2, sel_isCollapsed);
    if (!result)
    {
      outlined retain of CompositeNavigationSplitViewVisibility((uint64_t)&v7);
      type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationSplitVisibility>, (uint64_t)&type metadata for AnyNavigationSplitVisibility, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v10);
      uint64_t v6 = 0;
      if ((unint64_t)(a3 - 2) <= 4) {
        uint64_t v6 = qword_1883B4D08[a3 - 2];
      }
      AnyNavigationSplitVisibility.Kind.adoptingVisibleLeadingColumnCount(_:)(v6, &v9);
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (id)outlined release of CompositeNavigationSplitViewVisibility((uint64_t)&v7);
    }
  }
  return result;
}

uint64_t outlined init with take of NavigationSplitViewVisibility?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for NavigationSplitViewVisibility?, (uint64_t)&type metadata for NavigationSplitViewVisibility, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of CompositeNavigationSplitViewVisibility(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of CompositeNavigationSplitViewVisibility(uint64_t a1)
{
  return a1;
}

uint64_t AnyNavigationSplitVisibility.Kind.adoptingVisibleLeadingColumnCount(_:)@<X0>(uint64_t result@<X0>, __int16 *a2@<X8>)
{
  unsigned int v3 = *v2;
  switch(v3 >> 14)
  {
    case 1u:
      BOOL v6 = result == 0;
      __int16 v5 = 16386;
      __int16 v7 = 0x4000;
      goto LABEL_15;
    case 2u:
      if (result == 1) {
        __int16 v5 = -32767;
      }
      else {
        __int16 v5 = -32766;
      }
      BOOL v6 = result == 0;
      __int16 v7 = 0x8000;
LABEL_15:
      if (v6) {
        __int16 v5 = v7;
      }
      *a2 = v5;
      break;
    case 3u:
      if (v3 == 49152) {
        __int16 v8 = -16384;
      }
      else {
        __int16 v8 = -16383;
      }
      *a2 = v8;
      break;
    default:
      if (result) {
        __int16 v4 = 1;
      }
      else {
        __int16 v4 = 2;
      }
      *a2 = v4;
      break;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(_DWORD *a1@<X8>)
{
  return partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter(a1);
}

{
  uint64_t v1;

  return specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter(*(void *)(v1 + 16), a1);
}

uint64_t specialized closure #1 in _NavigationSplitReader.PreparedColumn.columnSeeds.getter@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  __int16 v4 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  uint64_t result = outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v15, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, v4);
  if (v16 != 1)
  {
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t result = outlined destroy of NavigationAuthority((uint64_t)v15);
    if (Strong)
    {
      uint64_t v8 = *(void *)(Strong + 176);
      swift_retain();
      swift_release();
      Swift::UInt v9 = *(void *)AGGraphGetValue();
      Swift::UInt v10 = *(void *)AGGraphGetValue();
      swift_getKeyPath();
      lazy protocol witness table accessor for type PlatformViewChild<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewChild<A>(&lazy protocol witness table cache variable for type NavigationSelectionHost and conformance NavigationSelectionHost, (void (*)(uint64_t))type metadata accessor for NavigationSelectionHost);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v11 = *(void *)(v8 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      if (*(void *)(v11 + 16))
      {
        unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v9, *(unsigned char *)(a1 + 8), v10);
        if (v13)
        {
          int v14 = *(_DWORD *)(*(void *)(v11 + 56) + 4 * v12);
          uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
          *a2 = v14;
          return result;
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
    int v14 = 0;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t implicit closure #1 in static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)(unint64_t a1, int a2, uint64_t a3, uint64_t a4, long long *a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a2;
  type metadata accessor for UpdateViewDestinationRequestProcessor();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  *(void *)&long long v19 = a3;
  *((void *)&v19 + 1) = a4;
  long long v9 = a5[3];
  *(_OWORD *)&v28[16] = a5[2];
  long long v29 = v9;
  long long v30 = a5[4];
  int v31 = *((_DWORD *)a5 + 20);
  long long v10 = a5[1];
  long long v27 = *a5;
  *(_OWORD *)uint64_t v28 = v10;
  outlined copy of Text.LineStyle?(a3, a4);
  int v11 = _ViewInputs.viewPhase.getter();
  UpdateViewDestinationRequestProcessor.PreferenceDebouncer.init(seeds:modifier:viewListID:phase:)(a1, (uint64_t *)&v19, v11, (uint64_t)&v27);
  long long v19 = v27;
  uint64_t v20 = *(void *)v28;
  long long v21 = *(_OWORD *)&v28[8];
  uint64_t v22 = *(void *)&v28[24];
  int v23 = v29;
  char v24 = BYTE4(v29);
  uint64_t v25 = *((void *)&v29 + 1);
  int v26 = v30;
  uint64_t updated = type metadata accessor for UpdateViewDestinationRequestProcessor.PreferenceDebouncer();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v19, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_16, (uint64_t)v16, updated, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  outlined consume of Text.LineStyle?(v21, *((uint64_t *)&v21 + 1));
  return v15;
}

double UpdateViewDestinationRequestProcessor.PreferenceDebouncer.init(seeds:modifier:viewListID:phase:)@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v4 = a1;
  unint64_t v6 = HIDWORD(a1);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  UpdateCycleDetector.init()();
  type metadata accessor for Optional();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  type metadata accessor for UpdateViewDestinationRequestProcessor();
  int v10 = AGGraphCreateOffsetAttribute2();
  int v11 = AGGraphCreateOffsetAttribute2();
  *(_DWORD *)a4 = v4;
  *(_DWORD *)(a4 + 4) = v6;
  *(_DWORD *)(a4 + 8) = OffsetAttribute2;
  *(_DWORD *)(a4 + 12) = v10;
  *(_DWORD *)(a4 + 16) = v11;
  *(_DWORD *)(a4 + 20) = a3;
  *(void *)(a4 + 24) = v7;
  *(void *)(a4 + 32) = v8;
  *(void *)(a4 + 40) = v14;
  *(_DWORD *)(a4 + 48) = v15;
  *(unsigned char *)(a4 + 52) = v16;
  double result = NAN;
  *(void *)(a4 + 56) = -1;
  *(_DWORD *)(a4 + 64) = 0;
  return result;
}

uint64_t PrimitiveButtonStyleContainerModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for ButtonStyleModifier();
  uint64_t v42 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  long long v38 = (char *)&v33 - v7;
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for _ViewModifier_Content();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  long long v34 = (char *)&v33 - v10;
  uint64_t v36 = type metadata accessor for ButtonStyleWriter();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v33 = (char *)&v33 - v12;
  type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic, (uint64_t)&type metadata for ButtonMenuStyle.Automatic, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CustomButtonMenuStyleWriter);
  uint64_t v35 = v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v33 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v43, v3, v18);
  long long v21 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v22 = v38;
  v21(v38, v6, v3);
  uint64_t WitnessTable = swift_getWitnessTable();
  char v24 = v34;
  uint64_t v25 = v22;
  int v26 = v22;
  uint64_t v27 = v37;
  MEMORY[0x18C113660](v25, v8, v37, WitnessTable);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v27);
  uint64_t v49 = WitnessTable;
  long long v50 = &protocol witness table for ButtonStyleModifier<A>;
  uint64_t v28 = swift_getWitnessTable();
  long long v29 = v33;
  MEMORY[0x18C113660](v28, v9, v36, v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v24, v9);
  uint64_t v47 = v28;
  long long v48 = &protocol witness table for ButtonStyleWriter<A>;
  uint64_t v30 = swift_getWitnessTable();
  MEMORY[0x18C113660](v30, v11, v35, v30);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v11);
  uint64_t v45 = v30;
  long long v46 = &protocol witness table for CustomButtonMenuStyleWriter<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  int v31 = *(void (**)(char *, uint64_t))(v39 + 8);
  v31(v16, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v31)(v20, v14);
}

uint64_t BaseModifier.Transform.isDisabled.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v27 - v8;
  uint64_t v11 = *(void *)(v10 + 16);
  int v12 = *(unsigned __int8 *)(v2 + *(int *)(type metadata accessor for BaseModifier() + 52));
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v13(v9, v2, a1);
  if (v12 == 1)
  {
    uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v9, a1);
    v13(v6, v2, a1);
    v14(v6, a1);
    return 1;
  }
  outlined init with copy of NavigationAuthority?((uint64_t)&v9[*(int *)(a1 + 44)], (uint64_t)&v30);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v4 + 8);
  v15(v9, a1);
  uint64_t v16 = v31;
  outlined destroy of NavigationAuthority?((uint64_t)&v30);
  v13(v6, v2, a1);
  if (v16 == 1)
  {
    v15(v6, a1);
    return 1;
  }
  BOOL v18 = BaseModifier.Transform.isKeyless.getter(a1);
  v15(v6, a1);
  if (v18) {
    return 1;
  }
  type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for Never?, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB718]);
  if (v11 != v19)
  {
    uint64_t v20 = v2 + *(int *)(a1 + 56);
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v23 = *(unsigned __int8 *)(v20 + 16);
    int v24 = *(unsigned __int8 *)(v20 + 17);
    outlined copy of Environment<Binding<EditMode>?>.Content(*(void *)v20, v22, v23, *(unsigned char *)(v20 + 17));
    specialized Environment.wrappedValue.getter(v21, v22, v23 | (v24 << 8), (uint64_t)&v30);
    outlined consume of Environment<Binding<Visibility>?>.Content(v21, v22, v23, v24);
    uint64_t v25 = v31;
    if (v31)
    {
      uint64_t v26 = v30;
      v27[0] = v30;
      v27[1] = v31;
      char v28 = v32;
      type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v29);
      outlined consume of Binding<NavigationSplitViewColumn>?(v26, v25);
      if (v29) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t outlined consume of Environment<Binding<Visibility>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return outlined consume of Binding<NavigationSplitViewColumn>?(a1, a2);
  }
  else {
    return swift_release();
  }
}

{
  uint64_t v4;

  if (a4) {
    return outlined consume of Binding<NavigationSplitViewColumn>?(a1, a2);
  }
  return swift_release();
}

uint64_t destroy for BaseModifier.Transform(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  swift_release();
  unint64_t v5 = (((a1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)v5 + 2;
  }
  if (v6 == 1) {
    swift_release();
  }
  swift_release();
  unint64_t v7 = (((a1 + ((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
      + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(((v7 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  if ((int)v8 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  swift_release();
  unint64_t v9 = (((v7 + 87) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Binding<Visibility>?>.Content(*(void *)v9, *(void *)(v9 + 8), *(unsigned __int8 *)(v9 + 16), *(unsigned char *)(v9 + 17));
  unint64_t v10 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 8);

  return outlined consume of Environment<Bool?>.Content(v11, v12);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t vars8;

  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  swift_release();
  double result = swift_release();
  unsigned int v6 = *(void *)(((((((((((v4 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 31) & 0xFFFFFFFFFFFFFFF8)
                   + 55) & 0xFFFFFFFFFFFFFFF8)
                 + 8);
  if (v6 >= 0xFFFFFFFF) {
    LODWORD(v6) = -1;
  }
  if ((int)v6 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined destroy of NavigationAuthority?(uint64_t a1)
{
  type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of NavigationAuthority?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for NavigationState.StackContent.Key?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of NavigationAuthority(uint64_t a1)
{
  return a1;
}

uint64_t destroy for NavigationAuthority()
{
  swift_weakDestroy();
  swift_release();

  return swift_release();
}

BOOL BaseModifier.Transform.isKeyless.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](a1);
  unint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(unsigned __int8 *)(v6 + *(int *)(v3 + 36) + 8);
  (*(void (**)(char *))(v2 + 16))(v5);
  BOOL v8 = v7 == 6 && *(void *)&v5[*(int *)(a1 + 40) + 40] == 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v8;
}

uint64_t BaseModifier.Transform.body(content:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v92 = a3;
  uint64_t v91 = *((void *)a2 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v89 = v6;
  uint64_t v90 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v10 = type metadata accessor for NavigationLinkButtonStyle();
  uint64_t v77 = *(void (***)(uint64_t, uint64_t))(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v74 = (uint64_t)&v71 - v11;
  swift_getWitnessTable();
  uint64_t v72 = type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v75 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v71 - v13;
  uint64_t v15 = MEMORY[0x1E4FBB390];
  type metadata accessor for NavigationState.ListKey?(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v78 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  BOOL v18 = (void (**)(uint64_t, uint64_t))((char *)&v71 - v17);
  uint64_t v88 = v8;
  type metadata accessor for UpdateViewDestinationViewModifier();
  uint64_t v93 = v9;
  uint64_t v19 = v15;
  type metadata accessor for UpdateViewDestinationRequestProcessor();
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v80 = v16;
  uint64_t v82 = v20;
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v85 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v83 = (uint64_t)&v71 - v22;
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v87 = v21;
  uint64_t v86 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86);
  uint64_t v79 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v81 = (char *)&v71 - v25;
  uint64_t v26 = v74;
  BaseModifier.Transform.style.getter((uint64_t)a2, v74);
  uint64_t v27 = v72;
  uint64_t v28 = swift_getWitnessTable();
  View.buttonStyle<A>(_:)(v26, v27, v10, v28);
  v77[1](v26, v10);
  BaseModifier.Transform.isDisabled.getter((uint64_t)a2);
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v104 = v28;
  uint64_t v105 = v29;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v77 = v18;
  uint64_t v31 = v30;
  View.disabled(_:)();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v14, v12);
  uint64_t v32 = v4 + a2[13];
  char v33 = *(unsigned char *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  char v102 = v33;
  uint64_t v103 = v34;
  type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, v19, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  uint64_t v35 = v4 + a2[10];
  uint64_t v36 = *(void *)(v35 + 40);
  uint64_t v76 = v106;
  LODWORD(v75) = v108;
  uint64_t WitnessTable = v107;
  if (v36 == 1)
  {
    uint64_t v37 = v4 + a2[9];
    uint64_t v38 = *(unsigned __int8 *)(v37 + 8);
    uint64_t v39 = v31;
    if (v38 == 6)
    {
      uint64_t v40 = 0;
      uint64_t v38 = 0;
      uint64_t v36 = 0;
      long long v41 = 0uLL;
      uint64_t v42 = 0x1FFFFFFFELL;
    }
    else
    {
      uint64_t v42 = 0;
      uint64_t v36 = 0;
      uint64_t v40 = *(void *)v37;
      long long v41 = *(unint64_t *)(v37 + 16);
    }
  }
  else
  {
    uint64_t v43 = *(void *)(v35 + 32);
    long long v41 = *(_OWORD *)(v35 + 16);
    uint64_t v44 = v35;
    uint64_t v40 = *(void *)v35;
    uint64_t v38 = *(void *)(v44 + 8);
    uint64_t v42 = v43 & 1 | 0x4000000000000000;
    uint64_t v39 = v31;
  }
  uint64_t v106 = v40;
  uint64_t v107 = v38;
  long long v108 = v41;
  uint64_t v109 = v42;
  uint64_t v110 = v36;
  uint64_t v45 = v93;
  uint64_t v46 = v88;
  uint64_t v47 = type metadata accessor for BaseModifier();
  uint64_t v48 = *(void *)(v4 + *(int *)(v47 + 44));
  char v49 = *(unsigned char *)(v4 + *(int *)(v47 + 48));
  uint64_t v50 = v4 + a2[11];
  unsigned __int8 v51 = *(unsigned char *)(v4 + a2[12]);
  uint64_t v52 = _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4F41280]);
  uint64_t v100 = v39;
  uint64_t v101 = v52;
  uint64_t v74 = MEMORY[0x1E4F3FBC0];
  uint64_t v53 = v80;
  uint64_t v54 = swift_getWitnessTable();
  uint64_t v70 = v50;
  unsigned __int8 v69 = (v49 & 1) == 0;
  uint64_t v55 = v83;
  uint64_t v56 = v77;
  View.updateViewDestinations<A>(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)(v76, WitnessTable, v75, v4, (uint64_t)&v106, 0, 1, v48, v83, v69, v70, v51, 1, v53, v45, v54);
  swift_release();
  swift_release();
  (*(void (**)(void, uint64_t))(v78 + 8))(v56, v53);
  uint64_t v57 = v91;
  long long v58 = v90;
  (*(void (**)(char *, uint64_t, int *))(v91 + 16))(v90, v4, a2);
  unint64_t v59 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v93;
  *(void *)(v60 + 24) = v46;
  (*(void (**)(unint64_t, char *, int *))(v57 + 32))(v60 + v59, v58, a2);
  uint64_t v98 = &protocol witness table for UpdateViewDestinationViewModifier<A>;
  long long v99 = &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v96 = v54;
  uint64_t v97 = v61;
  uint64_t v62 = v87;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = v79;
  View.transformPlatformItemSelectionBehavior(_:)((uint64_t)partial apply for closure #1 in BaseModifier.Transform.body(content:), v60, v62, v63);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v55, v62);
  uint64_t v94 = v63;
  long long v95 = &protocol witness table for PlatformItemListTransformModifier<A>;
  uint64_t v65 = v86;
  swift_getWitnessTable();
  long long v66 = v81;
  static ViewBuilder.buildExpression<A>(_:)(v64);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v84 + 8);
  v67(v64, v65);
  static ViewBuilder.buildExpression<A>(_:)(v66);
  return ((uint64_t (*)(char *, uint64_t))v67)(v66, v65);
}

uint64_t destroy for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1) {
    swift_release();
  }
  uint64_t result = swift_release();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (a1 + (v8 | 7) + 18) & ~(v8 | 7);
  uint64_t v10 = v8 + 17;
  uint64_t v11 = *(void *)(v7 + 64);
  unint64_t v12 = ((v8 + 17) & ~v8) + v11;
  uint64_t v13 = v11 + 7;
  unint64_t v14 = ((((((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v14 <= v12) {
    unint64_t v14 = v12;
  }
  unsigned int v15 = *(unsigned __int8 *)(v9 + v14);
  if (v15 <= 1)
  {
    if (v15 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
      uint64_t result = swift_release();
      if (*(void *)(((((v13 + v9) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        uint64_t result = swift_release();
      }
      unint64_t v16 = *(void *)(((((v13 + v9) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((int)v16 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      uint64_t v17 = ~v8;
      uint64_t v19 = *(void *)(v6 - 8);
      swift_release();
      swift_release();
      BOOL v18 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
      return v18((v10 + v9) & v17, v6);
    }
  }
  return result;
}

uint64_t outlined init with take of NavigationAuthority?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _GraphValue<Namespace.ID>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWObTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWObTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for NavigationState.ListKey?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWObTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for NavigationState.ListKey?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t View.buttonStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  unsigned int v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

void type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<Bool> and conformance External<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<Bool>(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_1(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NavigationState.ListKey?(255, a2, MEMORY[0x1E4FBB390], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.transformPlatformItemSelectionBehavior(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = swift_retain();
  View.transformPlatformItemList<A>(_:_:)(v9, (uint64_t)partial apply for closure #1 in View.transformPlatformItemSelectionBehavior(_:), v8, a3, (uint64_t)&type metadata for SelectionPlatformItemListFlags, a4);

  return swift_release();
}

uint64_t View.transformPlatformItemList<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v8 = type metadata accessor for PlatformItemListTransformModifier();
  swift_retain();
  MEMORY[0x18C113660](v10, a4, v8, a6);
  return swift_release();
}

uint64_t View.updateViewDestinations<A>(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v49 = a6;
  uint64_t v50 = a8;
  uint64_t v47 = a5;
  uint64_t v37 = a4;
  int v40 = a3;
  uint64_t v38 = a2;
  uint64_t v56 = a9;
  int v43 = a12;
  int v44 = a10;
  uint64_t v55 = a14;
  uint64_t v39 = a11;
  int v45 = a7 & 1;
  uint64_t v54 = a16;
  uint64_t updated = type metadata accessor for UpdateViewDestinationRequestProcessor();
  uint64_t v53 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v52 = (uint64_t)&v36 - v18;
  uint64_t v19 = *(void *)(a15 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for UpdateViewDestinationViewModifier();
  uint64_t v51 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v24 = (char *)&v36 - v23;
  uint64_t v46 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v46 - 8);
  double v25 = MEMORY[0x1F4188790](v46);
  uint64_t v27 = (char *)&v36 - v26;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16);
  v36(v22, a4, a15, v25);
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(v39, (uint64_t)v58, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  uint64_t v28 = v38;
  char v29 = v40;
  uint64_t v30 = v50;
  UpdateViewDestinationViewModifier.init(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)(a1, v38, v40, (uint64_t)v22, v47, v49, v45, v50, (uint64_t)v24, v44, (uint64_t)v58, v43, a13, a15);
  v58[0] = a1;
  v58[1] = v28;
  char v59 = v29;
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(a13);
  type metadata accessor for NavigationAuthority?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v57);
  LOBYTE(v58[0]) = v57;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v22, v37, a15);
  uint64_t v31 = v52;
  UpdateViewDestinationRequestProcessor.init(presentationData:destination:linkID:)((uint64_t)v58, (uint64_t)v22, v30, a15, v52);
  uint64_t v33 = updated;
  uint64_t v32 = v42;
  MEMORY[0x18C10D370](v31, v42, updated, &protocol witness table for UpdateViewDestinationViewModifier<A>);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v31, v33);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v24, v32);
  uint64_t v34 = v46;
  MEMORY[0x18C113660](v27, v55, v46, v54);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v27, v34);
}

unint64_t destroy for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(((v7 + 87) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v8 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  if ((int)v8 - 1 < 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  unint64_t result = *(void *)((v7 + 119) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v10) = -1;
  if (result < 0xFFFFFFFF) {
    uint64_t v10 = *(void *)((v7 + 119) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((int)v10 - 1 < 0)
  {
    return swift_release();
  }
  return result;
}

uint64_t UpdateViewDestinationRequestProcessor.init(presentationData:destination:linkID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t updated = type metadata accessor for UpdateViewDestinationRequestProcessor();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(updated + 44), a2, a4);
  *(void *)(a5 + *(int *)(updated + 48)) = a3;
  return result;
}

uint64_t type metadata accessor for UpdateViewDestinationRequestProcessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithTake for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v11 = *(unsigned __int8 *)(v10 + 17);
  if (v11 >= 2) {
    unsigned int v11 = *(_DWORD *)v10 + 2;
  }
  if (v11 == 1)
  {
    long long v12 = *(_OWORD *)v10;
    *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
    *(_OWORD *)unint64_t v9 = v12;
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  *(unsigned char *)(v9 + 17) = v13;
  unint64_t v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(v14 + 9) = *(unsigned char *)(v15 + 9);
  unint64_t v16 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v17 = (a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (a2 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v18;
  *(void *)(v17 + 16) = *(void *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = v19;
  uint64_t v20 = (_OWORD *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (long long *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v22 = *v21;
  long long v23 = v21[2];
  v20[1] = v21[1];
  void v20[2] = v23;
  *uint64_t v20 = v22;
  unint64_t v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v26 = *(void *)(v25 + 8);
  if (*(void *)(v25 + 8) >= 0xFFFFFFFFuLL) {
    int v26 = -1;
  }
  if (v26 - 1 < 0)
  {
    unint64_t v24 = swift_weakTakeInit();
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
  }
  else
  {
    long long v27 = *(_OWORD *)v25;
    *(void *)(v24 + 16) = *(void *)(v25 + 16);
    *(_OWORD *)unint64_t v24 = v27;
  }
  *(unsigned char *)(v24 + 24) = *(unsigned char *)(v25 + 24);
  uint64_t v28 = (_OWORD *)(((unint64_t)v20 + 87) & 0xFFFFFFFFFFFFFFF8);
  char v29 = (_OWORD *)(((unint64_t)v21 + 87) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v29;
  unint64_t v30 = ((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = ((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  long long v32 = *(_OWORD *)v31;
  *(_WORD *)(v30 + 16) = *(_WORD *)(v31 + 16);
  *(_OWORD *)unint64_t v30 = v32;
  unint64_t v33 = (v30 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v31 + 25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v35 = *(void *)v34;
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  *(void *)unint64_t v33 = v35;
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  long long *v20;
  long long v21;
  long long v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  long long v26;
  unint64_t v27;
  unint64_t v28;

  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v11 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  long long v12 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  char v13 = (void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  *char v13 = *v12;
  unint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v14;
  unint64_t v16 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = *(void *)(v17 + 16);
  *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  *(void *)(v16 + 16) = v18;
  long long v19 = (_OWORD *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (long long *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = v20[2];
  long long v22 = *v20;
  v19[1] = v20[1];
  v19[2] = v21;
  *long long v19 = v22;
  long long v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = *(void *)(v24 + 8);
  if (*(void *)(v24 + 8) >= 0xFFFFFFFFuLL) {
    unint64_t v25 = -1;
  }
  if (v25 - 1 < 0)
  {
    long long v23 = swift_weakTakeInit();
    *(_OWORD *)(v23 + 8) = *(_OWORD *)(v24 + 8);
  }
  else
  {
    int v26 = *(_OWORD *)v24;
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
    *(_OWORD *)long long v23 = v26;
  }
  long long v27 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = (v24 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)long long v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  return a1;
}

uint64_t BaseModifier.Transform.style.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v33 = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v9 + 24);
  unint64_t v10 = (int *)type metadata accessor for BaseModifier();
  uint64_t v11 = v3 + v10[10];
  if (*(unsigned char *)(v11 + 17) == 1)
  {
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    int v29 = *(unsigned char *)(v11 + 16) & 1;
    uint64_t v31 = v12;
    swift_retain();
    uint64_t v32 = v13;
    swift_retain();
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v29 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, v5);
  uint64_t v14 = *(void *)(v3 + v10[9]);
  uint64_t v15 = v10[12];
  uint64_t v28 = *(void *)(v3 + v10[11]);
  int v27 = *(unsigned __int8 *)(v3 + v15);
  outlined init with copy of NavigationAuthority?(v3 + *(int *)(a1 + 44), (uint64_t)v39);
  _s7SwiftUI19NavigationAuthorityVSgWObTm_2(v3 + *(int *)(a1 + 40), (uint64_t)v40, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  unint64_t v16 = (long long *)(v3 + *(int *)(a1 + 36));
  long long v26 = *v16;
  unint64_t v17 = *((void *)v16 + 2);
  unint64_t v18 = (char *)(v3 + *(int *)(a1 + 52));
  char v19 = *v18;
  uint64_t v20 = *((void *)v18 + 1);
  char v34 = v19;
  uint64_t v35 = v20;
  type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  swift_retain();
  State.projectedValue.getter();
  uint64_t v21 = v36;
  uint64_t v22 = v37;
  char v23 = v38;
  char v24 = BaseModifier.Transform.selectionPopsSubsequentColumn.getter(a1);
  return NavigationLinkButtonStyle.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:isPresentingViewDestinationView:selectionPopsSubsequentColumn:)((uint64_t)v8, v14, v28, (v27 & 1) == 0, v31, v32, v29, (uint64_t)v39, v33, (uint64_t)v40, v26, *((unint64_t *)&v26 + 1), v17, v21, v22, v23, v24 & 1, v5);
}

uint64_t type metadata accessor for BaseModifier()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t UpdateViewDestinationViewModifier.init(isPresented:destination:key:kind:id:shouldTargetSourceColumn:navigationAuthority:isExtractingDestinations:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  uint64_t updated = (int *)type metadata accessor for UpdateViewDestinationViewModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(a9 + updated[9], a4, a14);
  outlined init with take of NavigationRequest.KeyKind?(a5, a9 + updated[10], &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  uint64_t v21 = a9 + updated[11];
  *(void *)uint64_t v21 = a6;
  *(unsigned char *)(v21 + 8) = a7 & 1;
  *(void *)(a9 + updated[12]) = a8;
  *(unsigned char *)(a9 + updated[13]) = a10;
  uint64_t result = outlined init with take of NavigationRequest.KeyKind?(a11, a9 + updated[14], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(unsigned char *)(a9 + updated[15]) = a12;
  *(void *)(a9 + updated[16]) = a13;
  return result;
}

uint64_t type metadata accessor for UpdateViewDestinationViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithTake for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))(((unint64_t)v7 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for OptionalFormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

_OWORD *initializeWithTake for ContentListItemNavigationLinkStyle(_OWORD *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v6 + 17) & (unint64_t)~v6) + v7)
    unint64_t v8 = ((v6 + 17) & ~v6) + v7;
  else {
    unint64_t v8 = ((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
  }
       + 24;
  unsigned int v9 = __src[v8];
  if (v9 > 1)
  {
    memcpy(__dst, __src, v8 + 1);
  }
  else if (v9 == 1)
  {
    (*(void (**)(_OWORD *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    uint64_t v10 = (void *)(((unint64_t)__dst + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v13;
    *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
    unint64_t v14 = ((unint64_t)v10 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8;
    long long v16 = *(_OWORD *)v15;
    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
    *(_OWORD *)unint64_t v14 = v16;
    unint64_t v17 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
    int v19 = *(void *)(v18 + 8);
    if (*(void *)(v18 + 8) >= 0xFFFFFFFFuLL) {
      int v19 = -1;
    }
    if (v19 - 1 < 0)
    {
      unint64_t v17 = swift_weakTakeInit();
      *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
    }
    else
    {
      long long v20 = *(_OWORD *)v18;
      *(void *)(v17 + 16) = *(void *)(v18 + 16);
      *(_OWORD *)unint64_t v17 = v20;
    }
    uint64_t v21 = (_OWORD *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (long long *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
    long long v23 = *v22;
    long long v24 = v22[2];
    v21[1] = v22[1];
    v21[2] = v24;
    *uint64_t v21 = v23;
    unint64_t v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
    long long v27 = *(_OWORD *)v26;
    *(void *)(v25 + 16) = *(void *)(v26 + 16);
    *(_OWORD *)unint64_t v25 = v27;
    *((unsigned char *)__dst + v8) = 1;
  }
  else
  {
    char *__dst = *(_OWORD *)__src;
    *((unsigned char *)__dst + 16) = __src[16];
    (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)__dst + v6 + 17) & ~v6, (unint64_t)&__src[v6 + 17] & ~v6);
    *((unsigned char *)__dst + v8) = 0;
  }
  return __dst;
}

uint64_t initializeWithTake for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 17) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 18;
  unsigned int v9 = (_OWORD *)((v8 + a1) & ~(v7 | 7));
  uint64_t v10 = (long long *)((v8 + a2) & ~(v7 | 7));
  uint64_t v11 = *(void *)(v6 + 64);
  unint64_t v12 = ((v7 + 17) & ~v7) + v11;
  uint64_t v13 = v11 + 7;
  unint64_t v14 = ((((((((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v14 <= v12) {
    unint64_t v15 = v12;
  }
  else {
    unint64_t v15 = v14;
  }
  unsigned int v16 = *((unsigned __int8 *)v10 + v15);
  if (v16 > 1)
  {
    memcpy(v9, v10, v15 + 1);
  }
  else if (v16 == 1)
  {
    (*(void (**)(_OWORD *, long long *))(v6 + 32))(v9, v10);
    unint64_t v17 = (void *)(((unint64_t)v9 + v13) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v18 = (void *)(((unint64_t)v10 + v13) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v17 = *v18;
    unint64_t v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = ((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
    unint64_t v21 = ((unint64_t)v17 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = ((unint64_t)v18 + 31) & 0xFFFFFFFFFFFFFFF8;
    long long v23 = *(_OWORD *)v22;
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v23;
    unint64_t v24 = ((unint64_t)v17 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
    int v26 = *(void *)(v25 + 8);
    if (*(void *)(v25 + 8) >= 0xFFFFFFFFuLL) {
      int v26 = -1;
    }
    if (v26 - 1 < 0)
    {
      unint64_t v24 = swift_weakTakeInit();
      *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
    }
    else
    {
      long long v27 = *(_OWORD *)v25;
      *(void *)(v24 + 16) = *(void *)(v25 + 16);
      *(_OWORD *)unint64_t v24 = v27;
    }
    int v29 = (_OWORD *)((v24 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = (long long *)((v25 + 31) & 0xFFFFFFFFFFFFFFF8);
    long long v31 = *v30;
    long long v32 = v30[2];
    v29[1] = v30[1];
    v29[2] = v32;
    _OWORD *v29 = v31;
    unint64_t v33 = ((unint64_t)v29 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v34 = ((unint64_t)v30 + 55) & 0xFFFFFFFFFFFFFFF8;
    long long v35 = *(_OWORD *)v34;
    *(void *)(v33 + 16) = *(void *)(v34 + 16);
    *(_OWORD *)unint64_t v33 = v35;
    *((unsigned char *)v9 + v15) = 1;
  }
  else
  {
    long long v28 = *v10;
    *(unsigned char *)(((v8 + a1) & ~(v7 | 7)) + 0x10) = *(unsigned char *)(((v8 + a2) & ~(v7 | 7)) + 0x10);
    *unsigned int v9 = v28;
    (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v9 + v7 + 17) & ~v7, ((unint64_t)v10 + v7 + 17) & ~v7);
    *((unsigned char *)v9 + v15) = 0;
  }
  *((unsigned char *)v9 + v15 + 1) = *((unsigned char *)v10 + v15 + 1);
  return a1;
}

uint64_t initializeWithTake for NavigationSplitRepresentable(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 179) = *(_OWORD *)(a2 + 179);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  uint64_t v8 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v8;
  long long v9 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v9;
  uint64_t v10 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v10;
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  uint64_t v11 = *(void *)(a2 + 320);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(void *)(a1 + 320) = v11;
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  long long v12 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v12;
  return a1;
}

uint64_t initializeWithTake for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 108) = *(void *)(a2 + 108);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v4 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v4;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  return a1;
}

uint64_t ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(char a1, double a2, double a3)
{
  int v5 = a1 & 1;
  AGGraphGetValue();
  if ((Axis.Set.contains(_:)() & 1) == 0) {
    return 0;
  }
  uint64_t Value = AGGraphGetValue();
  if (*(void *)(Value + 24))
  {
    MEMORY[0x1F4188790](Value);
    Attribute.syncMainIfReferences<A>(do:)();
    return v9;
  }
  else
  {
    if (v5) {
      double v8 = a3;
    }
    else {
      double v8 = a2;
    }
    return *(void *)&v8;
  }
}

uint64_t base witness table accessor for _AttributeBody in IsAnimated<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue()()
{
  return closure #1 in NavigationItemAdaptorModifier.MakeAdaptor.updateValue()();
}

void partial apply for closure #2 in SwiftUISearchController.enqueueIsActiveUpdate(_:)()
{
  closure #2 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(v0);
}

Swift::Void __swiftcall _CALayerView.updatePlatformLayer(_:)(CALayer a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = swift_dynamicCastUnknownClassUnconditional();
  v2(v3);
}

void *type metadata accessor for ResolvedScrollBehaviorModifier()
{
  return &unk_1ED459C38;
}

uint64_t initializeWithCopy for DragSnapshotResponderFilter(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t SceneBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  v9[0] = *a1;
  uint64_t v2 = v9[0];
  SceneBridge.userActivityPreferencesDidChange(_:)(v9);
  uint64_t v11 = v2;
  PreferenceValues.subscript.getter();
  uint64_t v3 = v9[0];
  unint64_t v4 = v9[1];
  if ((*(unsigned char *)(v1 + 132) & 1) != 0
    || ((int v5 = *(_DWORD *)(v1 + 128), v10 != -1) ? (v6 = v5 == -1) : (v6 = 1), !v6 ? (v7 = v10 == v5) : (v7 = 0), !v7))
  {
    *(_DWORD *)(v1 + 128) = v10;
    *(unsigned char *)(v1 + 132) = 0;
    SceneBridge.setActivationConditions(_:)(v3, v4);
  }
  outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v3);
  swift_beginAccess();
  swift_retain();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 48), v1);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 72), v1);
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 76), v1);
  swift_endAccess();
  return swift_release();
}

uint64_t outlined consume of (preferring: Set<String>, allowing: Set<String>)?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UITraitOverrides();
  MEMORY[0x1F4188790](v6);
  double v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1;
  PreferenceValues.subscript.getter();
  if (*a2 == -1 || v16 == -1 || *a2 != v16)
  {
    *a2 = v16;
    int v11 = v15;
    uint64_t v12 = MEMORY[0x18C119DF0](a3 + 32);
    if (v12)
    {
      uint64_t v13 = (void *)v12;
      if (v11 == 2)
      {
        type metadata accessor for UITraitUserInterfaceStyle();
        MEMORY[0x18C116660]();
        UITraitOverrides.remove(_:)();
      }
      else
      {
        MEMORY[0x18C116660]();
        UIMutableTraits.userInterfaceStyle.setter();
      }
      MEMORY[0x18C116670](v8);
    }
  }
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v19 = a1;
  uint64_t result = PreferenceValues.subscript.getter();
  if (*a2 != -1 && v25 != -1 && *a2 == v25) {
    return outlined consume of NavigationTitleStorage?(v20, v21, v22, v23, v24);
  }
  *a2 = v25;
  uint64_t v8 = v23;
  if (v23 == 1) {
    return result;
  }
  uint64_t v9 = v20;
  uint64_t v10 = v21;
  char v11 = v22;
  uint64_t v12 = v24;
  uint64_t v13 = MEMORY[0x18C119DF0](a3 + 32);
  if (!v13) {
    return outlined consume of NavigationTitleStorage?(v20, v21, v22, v23, v24);
  }
  uint64_t v14 = (void *)v13;
  outlined copy of Text?(v20, v21, v22, v23);
  outlined copy of Transaction?(v24);
  swift_retain();
  outlined copy of Text?(v20, v21, v22, v23);
  outlined copy of Transaction?(v24);
  swift_retain();
  id v15 = objc_msgSend(v14, sel_traitCollection);
  UITraitCollection.baseEnvironment.getter(&v19);

  id v16 = v14;
  if (v8)
  {
    uint64_t v17 = Text.resolveString(in:with:idiom:)();
    unint64_t v18 = (void *)MEMORY[0x18C115780](v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v18 = 0;
  }
  objc_msgSend(v14, sel_setTitle_, v18);

  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v9, v10, v11, v8, v12);
  outlined consume of NavigationTitleStorage?(v9, v10, v11, v8, v12);
  outlined consume of Text?(v9, v10, v11, v8);
  outlined consume of Transaction?(v12);
  return swift_release();
}

{
  uint64_t v8;
  uint64_t v9;
  int v10;

  PreferenceValues.subscript.getter();
  if (*a2 == -1 || v10 == -1 || *a2 != v10)
  {
    *a2 = v10;
    *(void *)(a3 + 56) = v8;
    *(void *)(a3 + 64) = v9;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void SceneBridge.userActivityPreferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v57 = *a1;
  PreferenceValues.subscript.getter();
  uint64_t v3 = v53;
  uint64_t v4 = v54;
  uint64_t v5 = v55;
  if ((*(unsigned char *)(v2 + 124) & 1) == 0 && v56 != -1)
  {
    int v6 = *(_DWORD *)(v2 + 120);
    if (v6 != -1 && v56 == v6)
    {
      outlined consume of FocusStore?(v53, v54);
      return;
    }
  }
  *(_DWORD *)(v2 + 120) = v56;
  *(unsigned char *)(v2 + 124) = 0;
  if (v4)
  {
    if (*(void *)(v5 + 16))
    {
      uint64_t v8 = *(void **)(v2 + 112);
      if (v8)
      {
        uint64_t v9 = *(char **)(v2 + 112);
      }
      else
      {
        uint64_t v20 = (objc_class *)type metadata accessor for UserActivityTrackingInfo();
        uint64_t v21 = (char *)objc_allocWithZone(v20);
        *(void *)&v21[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity] = 0;
        uint64_t v22 = OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_handlers;
        *(void *)&v21[v22] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
        swift_weakInit();
        swift_weakAssign();
        uint64_t v23 = (uint64_t *)&v21[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_activityType];
        *uint64_t v23 = v3;
        v23[1] = v4;
        v52.receiver = v21;
        v52.super_class = v20;
        swift_bridgeObjectRetain();
        uint64_t v9 = (char *)objc_msgSendSuper2(&v52, sel_init);
      }
      uint64_t v24 = OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity;
      int v25 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_userActivity];
      if (v25)
      {
        id v26 = v8;
        id v27 = objc_msgSend(v25, sel_activityType);
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;

        if (v28 == v3 && v4 == v30)
        {
          swift_bridgeObjectRelease();
LABEL_28:
          uint64_t v49 = *(void **)&v9[v24];
          if (v49) {
            objc_msgSend(v49, sel_setNeedsSave_, 1);
          }
          swift_bridgeObjectRelease();
LABEL_33:
          uint64_t v51 = &v9[OBJC_IVAR____TtC7SwiftUI24UserActivityTrackingInfo_handlers];
          swift_beginAccess();
          *(void *)uint64_t v51 = v5;

          swift_bridgeObjectRelease();
          return;
        }
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v32) {
          goto LABEL_28;
        }
      }
      else
      {
        id v33 = v8;
      }
      id v34 = objc_allocWithZone(MEMORY[0x1E4F29230]);
      swift_bridgeObjectRetain();
      long long v35 = (void *)MEMORY[0x18C115780](v3, v4);
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v34, sel_initWithActivityType_, v35);

      objc_msgSend(v36, sel_becomeCurrent);
      id v37 = v36;
      UserActivityTrackingInfo.userActivity.setter(v36);
      char v38 = *(void **)(v2 + 112);
      *(void *)(v2 + 112) = v9;
      uint64_t v39 = v9;

      int v40 = *(void **)(v2 + 112);
      type metadata accessor for UserActivityTrackingInfo?(0, v41, v42);
      uint64_t v44 = v43;
      uint64_t v56 = v43;
      uint64_t v53 = (uint64_t)v40;
      id v45 = v40;
      SceneBridge.publishEvent(event:type:identifier:)((uint64_t)&v53, v44, 0xD000000000000018, 0x800000018835FB00);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);

      uint64_t v46 = *(void **)&v9[v24];
      uint64_t v47 = (void *)MEMORY[0x18C119DF0](v2 + 40);
      if (v47)
      {
        uint64_t v48 = v47;
        objc_msgSend(v47, sel_setUserActivity_, v46);
      }
      else
      {
        uint64_t v48 = *(void **)(v2 + 80);
        *(void *)(v2 + 80) = v46;
        id v50 = v46;
      }
      swift_bridgeObjectRelease();

      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = 0;

  char v11 = *(void **)(v2 + 112);
  type metadata accessor for UserActivityTrackingInfo?(0, v12, v13);
  uint64_t v15 = v14;
  uint64_t v56 = v14;
  uint64_t v53 = (uint64_t)v11;
  id v16 = v11;
  SceneBridge.publishEvent(event:type:identifier:)((uint64_t)&v53, v15, 0xD000000000000018, 0x800000018835FB00);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
  uint64_t v17 = (void *)MEMORY[0x18C119DF0](v2 + 40);
  if (v17)
  {
    unint64_t v18 = v17;
    objc_msgSend(v17, sel_setUserActivity_, 0);
  }
  else
  {
    uint64_t v19 = *(void **)(v2 + 80);
    *(void *)(v2 + 80) = 0;
  }
}

void type metadata accessor for _ContiguousArrayStorage<CVarArg>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for CVarArg(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_1(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for CVarArg(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCys7CVarArg_pGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for UserActivityTrackingInfo?(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for UserActivityTrackingInfo()
{
  return self;
}

void SceneBridge.setActivationConditions(_:)(unint64_t a1, unint64_t a2)
{
  if (a1 || *(void *)(v2 + 96))
  {
    uint64_t v5 = (void *)MEMORY[0x18C119DF0](v2 + 32);
    if (v5)
    {
      id v20 = v5;
      id v6 = objc_msgSend(v5, sel_activationConditions);
      id v21 = v6;
      if (!a1)
      {
        objc_msgSend(v20, sel_setActivationConditions_, v6);

        uint64_t v13 = v21;
        goto LABEL_19;
      }
      if (*(void *)(v2 + 96)
        && (uint64_t v7 = swift_bridgeObjectRetain(),
            char v8 = specialized static Set.== infix(_:_:)(v7, a1),
            swift_bridgeObjectRelease(),
            (v8 & 1) != 0))
      {
        int v9 = 0;
      }
      else
      {
        id v10 = specialized SceneBridge.buildActivationConditions(_:)(a1);
        objc_msgSend(v21, sel_setPrefersToActivateForTargetContentIdentifierPredicate_, v10);

        int v9 = 1;
      }
      if (*(void *)(v2 + 96)
        && (uint64_t v11 = swift_bridgeObjectRetain(),
            char v12 = specialized static Set.== infix(_:_:)(v11, a2),
            swift_bridgeObjectRelease(),
            (v12 & 1) != 0))
      {
        if (!v9)
        {

          uint64_t v13 = v20;
LABEL_19:

          return;
        }
      }
      else
      {
        id v14 = specialized SceneBridge.buildActivationConditions(_:)(a2);
        objc_msgSend(v21, sel_setCanActivateForTargetContentIdentifierPredicate_, v14);
      }
      id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B78]), sel_init);
      id v16 = objc_msgSend(v21, sel_prefersToActivateForTargetContentIdentifierPredicate);
      objc_msgSend(v15, sel_setPrefersToActivateForTargetContentIdentifierPredicate_, v16);

      id v17 = objc_msgSend(v21, sel_canActivateForTargetContentIdentifierPredicate);
      objc_msgSend(v15, sel_setCanActivateForTargetContentIdentifierPredicate_, v17);

      id v18 = v20;
      objc_msgSend(v18, sel_setActivationConditions_, v15);

      uint64_t v19 = *(void *)(v2 + 96);
      *(void *)(v2 + 96) = a1;
      *(void *)(v2 + 104) = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of (preferring: Set<String>, allowing: Set<String>)?(v19);
    }
  }
}

uint64_t SceneBridge.publishEvent(event:type:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (static SceneBridge._devNullSceneBridge) {
    BOOL v8 = static SceneBridge._devNullSceneBridge == v4;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    AnyHashable.init<A>(_:)();
    swift_beginAccess();
    uint64_t v9 = *(void *)(v4 + 16);
    if (*(void *)(v9 + 16) && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15), (v11 & 1) != 0))
    {
      uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
      swift_endAccess();
      swift_bridgeObjectRetain();
      outlined destroy of AnyHashable((uint64_t)v15);
      swift_bridgeObjectRetain();
      AnyHashable.init<A>(_:)();
      if (*(void *)(v12 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
        if (v13)
        {
          swift_retain();
          swift_bridgeObjectRelease();
          outlined destroy of AnyHashable((uint64_t)v15);
          PassthroughSubject.send(_:)();
          swift_release();
          return 1;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
    }
    outlined destroy of AnyHashable((uint64_t)v15);
  }
  SceneBridge.enqueueUnpublishedEvent(_:for:)(a1, a3, a4);
  return 0;
}

uint64_t SceneBridge.enqueueUnpublishedEvent(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v7 = (uint64_t *)(v3 + 168);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v3 + 168);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_endAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      specialized Array.append<A>(contentsOf:)(v11);
      uint64_t v12 = v19;
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_6:
  outlined init with copy of Any(a1, (uint64_t)v18);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
  }
  unint64_t v14 = *((void *)v12 + 2);
  unint64_t v13 = *((void *)v12 + 3);
  if (v14 >= v13 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
  }
  *((void *)v12 + 2) = v14 + 1;
  outlined init with take of Any(v18, &v12[32 * v14 + 32]);
  uint64_t v19 = v12;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v7;
  *uint64_t v7 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v7 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t FocusBridge.__deallocating_deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of FocusItem?(v0 + 88);
  swift_weakDestroy();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall _UIHostingView.updateFocusedItem()()
{
  v2[11] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 64);
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 361) & 0x20) != 0)
  {
    swift_retain();
    _UIHostingView.focusedItem.getter((uint64_t)v2);
    ViewGraph.setFocusedItem(_:)();
    swift_release();
    outlined destroy of FocusItem?((uint64_t)v2);
  }
}

_DWORD *ViewGraph.setFocusedItem(_:)()
{
  uint64_t result = (_DWORD *)swift_beginAccess();
  if ((*(unsigned char *)(v0 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    uint64_t result = (_DWORD *)ViewGraph.subscript.getter();
    if (result)
    {
      if (*result != *MEMORY[0x1E4F4E7A0])
      {
        type metadata accessor for External<AccessibilityFocusStore>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
        uint64_t result = (_DWORD *)AGGraphSetValue();
        if (result)
        {
          swift_beginAccess();
          uint64_t result = (_DWORD *)MEMORY[0x18C119DF0](v0 + 200);
          if (result)
          {
            uint64_t v2 = *(void *)(v0 + 208);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
            return (_DWORD *)swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

uint64_t _UIHostingView.focusedItem.getter@<X0>(uint64_t a1@<X8>)
{
  specialized _UIHostingView.focusBridge.getter();
  swift_retain();
  FocusBridge.focusedItem.getter(a1);

  return swift_release();
}

void *AccessibilityViewGraph.update(graph:)(void *result)
{
  void (*v26)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  double v29;
  void v30[2];
  long long v31;
  long long v32;
  void v33[2];
  long long v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v2 = v1;
  uint64_t v3 = result;
  id v36 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4)
  {
    uint64_t v6 = *(void *)(v1 + 48);
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (ViewGraph.subscript.getter())
    {
      *(void *)&id v34 = v5;
      *((void *)&v34 + 1) = v4;
      long long v35 = v6;
      if (AGGraphSetValue())
      {
        swift_beginAccess();
        if (MEMORY[0x18C119DF0](v3 + 25))
        {
          uint64_t v7 = v3[26];
          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 16))(ObjectType);
          swift_unknownObjectRelease();
        }
      }
    }
    outlined consume of FocusStore?(v5, v4);
    uint64_t result = (void *)outlined consume of FocusStore?(v5, v4);
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    *(void *)(v1 + 48) = 0;
  }
  if (*(unsigned char *)(v1 + 56) == 1)
  {
    swift_beginAccess();
    if (v3[45])
    {
      swift_beginAccess();
      uint64_t result = (void *)MEMORY[0x18C119DF0](v3 + 25);
      if (!result) {
        goto LABEL_28;
      }
      uint64_t v9 = v3[26];
      uint64_t v10 = swift_getObjectType();
      uint64_t v11 = type metadata accessor for EventBindingSource(0, &lazy cache variable for type metadata for ViewRendererHost);
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(&v34, v11, v11, v10, v9);
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!(void)v34) {
        goto LABEL_28;
      }
      char v32 = v34;
      if (static AccessibilityFocus.accessibilityFocusNeedsUpdate == 1)
      {
        if (one-time initialization token for lastFocus != -1) {
          swift_once();
        }
        static AccessibilityFocus.lastFocus = specialized static AccessibilityFocus.resolvePlatformFocus()();
        uint64_t result = (void *)swift_bridgeObjectRelease();
        static AccessibilityFocus.accessibilityFocusNeedsUpdate = 0;
      }
      if (one-time initialization token for lastFocus != -1) {
        uint64_t result = (void *)swift_once();
      }
      *(double *)&long long v12 = MEMORY[0x1F4188790](result);
      long long v31 = v12;
      uint64_t v13 = swift_bridgeObjectRetain();
      uint64_t v14 = specialized _NativeDictionary.filter(_:)(v13, (uint64_t (*)(uint64_t, unsigned char *))partial apply for closure #1 in AccessibilityFocus.filtered(for:), (uint64_t)v30);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
      if (!ViewGraph.subscript.getter()
        || (*(void *)&id v34 = v14, (AGGraphSetValue() & 1) == 0)
        || !MEMORY[0x18C119DF0](v3 + 25))
      {
        swift_unknownObjectRelease();
        uint64_t result = (void *)swift_release();
        goto LABEL_28;
      }
      uint64_t v15 = v3[26];
      uint64_t v16 = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v15 + 8) + 16))(v16);
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      uint64_t v17 = MEMORY[0x1E4FBC860];
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      swift_bridgeObjectRelease();
      unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(v17);
      lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
      if (!ViewGraph.subscript.getter()
        || (*(void *)&id v34 = v18, (AGGraphSetValue() & 1) == 0)
        || (swift_beginAccess(), !MEMORY[0x18C119DF0](v3 + 25)))
      {
        uint64_t result = (void *)swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      uint64_t v19 = v3[26];
      uint64_t v20 = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v19 + 8) + 16))(v20);
      swift_bridgeObjectRelease();
    }
    uint64_t result = (void *)swift_unknownObjectRelease();
LABEL_28:
    *(unsigned char *)(v2 + 56) = 0;
  }
  if (*(unsigned char *)(v2 + 24) == 1)
  {
    uint64_t result = (void *)AGGraphGetWeakValue();
    if (result)
    {
      uint64_t v21 = result[1];
      if (*(void *)(v2 + 16) != v21)
      {
        uint64_t v22 = *result;
        *(void *)(v2 + 16) = v21;
        *(unsigned char *)(v2 + 24) = 0;
        swift_beginAccess();
        uint64_t result = (void *)MEMORY[0x18C119DF0](v3 + 25);
        if (result)
        {
          uint64_t v23 = v3[26];
          uint64_t v24 = swift_getObjectType();
          uint64_t v25 = type metadata accessor for EventBindingSource(0, &lazy cache variable for type metadata for AccessibilityHost);
          id v26 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16);
          swift_bridgeObjectRetain();
          v26(v33, v25, v25, v24, v23);
          swift_unknownObjectRelease();
          if (v33[0])
          {
            id v27 = v33[1];
            uint64_t v28 = swift_getObjectType();
            uint64_t v29 = MEMORY[0x1F4188790](v28);
            v30[0] = v2;
            v30[1] = v22;
            *(void *)&long long v31 = v21;
            (*(void (**)(uint64_t (*)(), double))(v27 + 8))(partial apply for closure #1 in AccessibilityViewGraph.postUpdate(graph:list:), v29);
            swift_bridgeObjectRelease();
            return (void *)swift_unknownObjectRelease();
          }
          else
          {
            return (void *)swift_bridgeObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusViewGraph and conformance FocusViewGraph;
  if (!lazy protocol witness table cache variable for type FocusViewGraph and conformance FocusViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusViewGraph and conformance FocusViewGraph);
  }
  return result;
}

uint64_t outlined consume of FocusStore?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for External<AccessibilityFocusStore>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<AccessibilityFocusStore> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<AccessibilityFocusStore>(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t FocusBridge.focusedItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 88;
  swift_beginAccess();
  outlined init with copy of FocusItem?(v1 + 88, (uint64_t)v8);
  if (*((void *)&v9 + 1)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v10 == 1;
  }
  if (v4)
  {
    outlined destroy of FocusItem?((uint64_t)v8);
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v8, (uint64_t)v12);
    if (FocusItem.isExpired.getter())
    {
      long long v9 = 0u;
      memset(v8, 0, sizeof(v8));
      uint64_t v10 = 1;
      int v11 = 0;
      outlined init with copy of FocusItem?(v3, (uint64_t)v7);
      swift_beginAccess();
      outlined assign with copy of FocusItem?((uint64_t)v8, v3);
      swift_endAccess();
      outlined init with copy of FocusItem?(v3, (uint64_t)v6);
      FocusBridge.didChangeFocusItem(from:to:)((uint64_t)v7, (uint64_t)v6);
      outlined destroy of FocusItem?((uint64_t)v6);
      outlined destroy of FocusItem?((uint64_t)v8);
      outlined destroy of FocusItem?((uint64_t)v7);
    }
    outlined destroy of FocusItem((uint64_t)v12);
  }
  return outlined init with copy of FocusItem?(v3, a1);
}

uint64_t outlined destroy of FocusItem?(uint64_t a1)
{
  type metadata accessor for FocusItem?(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for FocusItem?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of FocusItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for FocusItem?()
{
  if (!lazy cache variable for type metadata for FocusItem?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?);
    }
  }
}

void type metadata accessor for External<FocusItem?>()
{
  if (!lazy cache variable for type metadata for External<FocusItem?>)
  {
    type metadata accessor for External<AccessibilityFocusStore>(255, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<FocusItem?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type External<FocusItem?> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<FocusItem?> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<FocusItem?> and conformance External<A>)
  {
    type metadata accessor for External<FocusItem?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<FocusItem?> and conformance External<A>);
  }
  return result;
}

uint64_t outlined destroy of FocusItem(uint64_t a1)
{
  return a1;
}

uint64_t destroy for FocusItem(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 == 2 || v1 == 1)
  {
    swift_unknownObjectWeakDestroy();
  }
  else if (!*(unsigned char *)(a1 + 32))
  {
    swift_release();
  }

  return swift_weakDestroy();
}

BOOL FocusItem.isExpired.getter()
{
  outlined init with copy of FocusItem.Base(v0, (uint64_t)v6);
  if (v7)
  {
    if (v7 == 1)
    {
      outlined init with take of WeakBox<UIFocusItem>((uint64_t)v6, (uint64_t)&v5);
      uint64_t v1 = MEMORY[0x18C119DF0](&v5);
      outlined destroy of WeakBox<UIFocusItem>((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
      BOOL v2 = v1 == 0;
      if (v1) {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      outlined init with take of WeakBox<UIView>((uint64_t)v6, (uint64_t)&v5);
      uint64_t v3 = (void *)MEMORY[0x18C119DF0](&v5);
      outlined destroy of WeakBox<UIView>((uint64_t)&v5);
      BOOL v2 = v3 == 0;
      if (v3) {
    }
      }
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

uint64_t AlignmentModifiedLayoutComputer.updateValue()()
{
  AGGraphGetValue();
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    swift_retain();
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
    swift_retain();
  }
  lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer();
  lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine();
  StatefulRule<>.update<A>(to:)();
  swift_release();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer and conformance AlignmentModifiedLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AlignmentModifiedLayoutComputer.Engine and conformance AlignmentModifiedLayoutComputer.Engine);
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ScrollEnvironmentPropertiesKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of ScrollEnvironmentProperties((uint64_t)&static ScrollEnvironmentPropertiesKey.defaultValue, a1);
}

char *static UIViewPlatformViewDefinition.makeDrawingView(options:)(uint64_t a1)
{
  char v1 = *(unsigned char *)a1;
  int v2 = *(_DWORD *)(a1 + 4);
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  char v5 = *(unsigned char *)(a1 + 16);
  if ((v4 & 1) != 0 && objc_msgSend(self, sel_isSupported))
  {
    v25[0] = v1;
    int v26 = v2;
    char v27 = v3;
    int v28 = v4;
    char v29 = v5;
    id v6 = objc_allocWithZone((Class)type metadata accessor for RBDrawingView());
    char v7 = RBDrawingView.init(options:)(v25);
    uint64_t v8 = (unint64_t *)&lazy protocol witness table cache variable for type RBDrawingView and conformance RBDrawingView;
    long long v9 = type metadata accessor for RBDrawingView;
  }
  else
  {
    uint64_t v10 = (objc_class *)type metadata accessor for CGDrawingView();
    int v11 = (char *)objc_allocWithZone(v10);
    long long v12 = &v11[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options];
    *long long v12 = v1;
    *((_DWORD *)v12 + 1) = v2;
    v12[8] = v3;
    *((_DWORD *)v12 + 3) = v4;
    v12[16] = v5;
    v30.receiver = v11;
    v30.super_class = v10;
    uint64_t v13 = (char *)objc_msgSendSuper2(&v30, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    uint64_t v14 = &v13[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options];
    uint64_t v15 = (*(_DWORD *)&v13[OBJC_IVAR____TtC7SwiftUI13CGDrawingView_options + 12] >> 1) & 1;
    char v7 = v13;
    objc_msgSend(v7, sel_setOpaque_, v15);
    id v16 = objc_msgSend(v7, sel_layer);
    int v17 = *((_DWORD *)v14 + 1);
    char v18 = v14[8];
    int v19 = *((_DWORD *)v14 + 3);
    char v20 = v14[16];
    v25[0] = *v14;
    int v26 = v17;
    char v27 = v18;
    int v28 = v19;
    char v29 = v20;
    uint64_t v21 = (void *)PlatformDrawableOptions.caLayerContentsFormat.getter();
    objc_msgSend(v16, sel_setContentsFormat_, v21);

    uint64_t v8 = (unint64_t *)&lazy protocol witness table cache variable for type CGDrawingView and conformance CGDrawingView;
    long long v9 = type metadata accessor for CGDrawingView;
  }
  lazy protocol witness table accessor for type CGDrawingView and conformance CGDrawingView(v8, (void (*)(uint64_t))v9);
  objc_msgSend(v7, sel_setContentMode_, 9);
  uint64_t v22 = v7;
  objc_msgSend(v22, sel_setAutoresizesSubviews_, 0);
  objc_msgSend(v22, sel__setFocusInteractionEnabled_, 0);
  id v23 = objc_msgSend(v22, sel_layer);
  objc_msgSend(v23, sel_setAnchorPoint_, 0.0, 0.0);

  return v22;
}

uint64_t lazy protocol witness table accessor for type CGDrawingView and conformance CGDrawingView(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CGDrawingView()
{
  return self;
}

uint64_t type metadata accessor for RBDrawingView()
{
  return self;
}

char *RBDrawingView.init(options:)(char *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v4 = *a1;
  int v5 = *((_DWORD *)a1 + 1);
  char v6 = a1[8];
  int v7 = *((_DWORD *)a1 + 3);
  char v8 = a1[16];
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state;
  uint64_t v10 = v1;
  PlatformDrawableContent.init()();
  v22[1] = v28;
  _OWORD v22[2] = v29;
  uint64_t v23 = v30;
  char v24 = v31;
  char v25 = 3;
  uint64_t v26 = 0;
  AtomicBox.init(wrappedValue:)();
  *(void *)&v1[v9] = v27;
  int v11 = &v10[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options];
  *int v11 = v4;
  *((_DWORD *)v11 + 1) = v5;
  v11[8] = v6;
  *((_DWORD *)v11 + 3) = v7;
  v11[16] = v8;

  v22[0].receiver = v10;
  v22[0].super_class = ObjectType;
  long long v12 = (char *)-[objc_super initWithFrame:](v22, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v13 = &v12[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options];
  uint64_t v14 = (*(_DWORD *)&v12[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12] >> 1) & 1;
  uint64_t v15 = v12;
  objc_msgSend(v15, sel_setOpaque_, v14);
  int v16 = *((_DWORD *)v13 + 1);
  char v17 = v13[8];
  int v18 = *((_DWORD *)v13 + 3);
  char v19 = v13[16];
  LOBYTE(v28.receiver) = *v13;
  HIDWORD(v28.receiver) = v16;
  LOBYTE(v28.super_class) = v17;
  HIDWORD(v28.super_class) = v18;
  LOBYTE(v29.receiver) = v19;
  id v20 = objc_msgSend(v15, sel_layer);
  PlatformDrawableOptions.update(rbLayer:)();

  v15[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = (v13[12] & 0x10) != 0;
  return v15;
}

id RenderBoxView.init(frame:)(double a1, double a2, double a3, double a4)
{
  v4[OBJC_IVAR____TtC7SwiftUI13RenderBoxView_rendersFirstFrameAsynchronously] = 0;
  v13.receiver = v4;
  v13.super_class = (Class)type metadata accessor for RenderBoxView();
  id v9 = objc_msgSendSuper2(&v13, sel_initWithFrame_, a1, a2, a3, a4);
  id v10 = objc_msgSend(v9, sel_layer);
  objc_msgSend(v10, sel_setDelegate_, v9);
  id v11 = v10;
  objc_msgSend(v11, sel_setOpaque_, objc_msgSend(v9, sel_isOpaque));

  return v9;
}

uint64_t type metadata accessor for RenderBoxView()
{
  return self;
}

ValueMetadata *type metadata accessor for ListContentStyling()
{
  return &type metadata for ListContentStyling;
}

ValueMetadata *type metadata accessor for CaptureViewRespondersModifier()
{
  return &type metadata for CaptureViewRespondersModifier;
}

uint64_t closure #2 in ButtonBehavior.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for VStack();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  long long v12 = &v15[-v11];
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a1;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  objc_super v13 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v12, v6);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFA0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF60]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF78]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF80]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF88]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBF98]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFA8]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFB0]);
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, MEMORY[0x1E4FBBFC0]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

{
  return a4() & 0x1FF;
}

{
  return a4() & 0x1FFFF;
}

{
  unint64_t v4;

  uint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t static _CALayerView._makeView(view:inputs:)()
{
  return static RendererLeafView.makeLeafView(view:inputs:)();
}

uint64_t type metadata accessor for _CALayerView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ViewTraitCollection.deleteInteraction.getter@<X0>(void *a1@<X8>)
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v11 & 1) != 0
    || (ViewTraitCollection.value<A>(for:defaultValue:)(), (int v2 = ViewTraitCollection.onDelete.getter()) == 0))
  {
    uint64_t v6 = type metadata accessor for DeleteInteraction();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
  else
  {
    uint64_t v4 = (uint64_t)v2;
    uint64_t v5 = v3;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_retain();
    uint64_t v7 = type metadata accessor for DeleteInteraction();
    uint64_t v8 = (void *)((char *)a1 + *(int *)(v7 + 24));
    *a1 = v10;
    IndexSet.init(integer:)();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    uint64_t *v8 = v4;
    v8[1] = v5;
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
  }
}

uint64_t (*ViewTraitCollection.onDelete.getter())()
{
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v0 = swift_allocObject();
    *(void *)(v0 + 16) = v2;
    *(void *)(v0 + 24) = v3;
    return partial apply for thunk for @escaping @callee_guaranteed (@inout UISplitViewControllerProxy) -> (@out ());
  }
  else
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DeleteInteraction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F23664);
}

uint64_t DividerShape.layoutDirectionBehavior.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t initializeWithCopy for UpdateFocusableViewResponder(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListPadding(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[65]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance _CoordinateSpaceModifier<A>(_DWORD *a1, uint64_t a2)
{
  return static _CoordinateSpaceModifier._makeViewInputs(modifier:inputs:)(a1, a2);
}

ValueMetadata *type metadata accessor for _DraggingModifier()
{
  return &type metadata for _DraggingModifier;
}

uint64_t storeEnumTagSinglePayload for FocusItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 60) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      *(void *)(result + 48) = 1;
      return result;
    }
    *(unsigned char *)(result + 60) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void storeEnumTagSinglePayload for _ContentShapeKindModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = (v9 & 0xFFFFFFFFFFFFFFF8) + 16;
  if ((v9 & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 <= v8)
  {
    switch(v14)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_33;
        }
        break;
      case 3:
LABEL_40:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if (v7 < 0xFE)
          {
            a1[v9] = a2 + 1;
          }
          else
          {
            uint64_t v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
        }
        break;
    }
  }
  else
  {
    if ((v9 & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if ((v9 & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, (v9 & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LabelStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

_WORD *assignWithCopy for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  int v5 = a1;
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 | 7) + 2;
  unsigned int v11 = (unsigned __int8 *)(((unint64_t)v5 + v10) & ~(v9 | 7));
  int v12 = (unsigned __int8 *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  if (v11 != v12)
  {
    uint64_t v13 = v6;
    uint64_t v55 = *(void *)(v7 + 64);
    uint64_t v14 = ((v9 + 75) & ~v9) + v55;
    if ((unint64_t)(v14 + 1) > 0x30) {
      uint64_t v15 = v14 + 1;
    }
    else {
      uint64_t v15 = 48;
    }
    unsigned int v16 = v11[v15];
    unsigned int v17 = v16 - 3;
    if (v16 >= 3)
    {
      if (v15 <= 3) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *v11;
          goto LABEL_17;
        case 2:
          int v19 = *(unsigned __int16 *)v11;
          goto LABEL_17;
        case 3:
          int v19 = *(unsigned __int16 *)v11 | (v11[2] << 16);
          goto LABEL_17;
        case 4:
          int v19 = *(_DWORD *)v11;
LABEL_17:
          int v21 = (v19 | (v17 << (8 * v15))) + 3;
          unsigned int v16 = v19 + 3;
          if (v15 < 4) {
            unsigned int v16 = v21;
          }
          break;
        default:
          break;
      }
    }
    if (v16 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v11, *((void *)v11 + 1), v11[16]);
    }
    else if (v16 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v11, *((void *)v11 + 1), *((void *)v11 + 2), *((void *)v11 + 3), *((_WORD *)v11 + 16), v11[34]);
      unint64_t v22 = (unint64_t)(v11 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v22, *(void *)(v22 + 8), *(void *)(v22 + 16), *(void *)(v22 + 24), *(_WORD *)(v22 + 32), *(unsigned char *)(v22 + 34));
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((v9 + v22 + 35) & ~v9, v13);
      goto LABEL_24;
    }
    swift_release();
LABEL_24:
    unsigned int v23 = v12[v15];
    unsigned int v24 = v23 - 3;
    if (v23 >= 3)
    {
      if (v15 <= 3) {
        uint64_t v25 = v15;
      }
      else {
        uint64_t v25 = 4;
      }
      switch(v25)
      {
        case 1:
          int v26 = *v12;
          goto LABEL_33;
        case 2:
          int v26 = *(unsigned __int16 *)v12;
          goto LABEL_33;
        case 3:
          int v26 = *(unsigned __int16 *)v12 | (v12[2] << 16);
          goto LABEL_33;
        case 4:
          int v26 = *(_DWORD *)v12;
LABEL_33:
          int v27 = (v26 | (v24 << (8 * v15))) + 3;
          unsigned int v23 = v26 + 3;
          if (v15 < 4) {
            unsigned int v23 = v27;
          }
          break;
        default:
          break;
      }
    }
    if (v23 == 2)
    {
      uint64_t v40 = *(void *)v12;
      uint64_t v41 = *((void *)v12 + 1);
      char v42 = v12[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v12, v41, v42);
      *(void *)unsigned int v11 = v40;
      *((void *)v11 + 1) = v41;
      v11[16] = v42;
      uint64_t v43 = (void *)*((void *)v12 + 3);
      *((void *)v11 + 3) = v43;
      uint64_t v44 = *((void *)v12 + 5);
      *((void *)v11 + 4) = *((void *)v12 + 4);
      *((void *)v11 + 5) = v44;
      v11[v15] = 2;
      id v45 = v43;
    }
    else
    {
      if (v23 == 1)
      {
        uint64_t v51 = v8;
        uint64_t v52 = v13;
        uint64_t v53 = a3;
        uint64_t v28 = *(void *)v12;
        uint64_t v29 = *((void *)v12 + 1);
        uint64_t v54 = v5;
        uint64_t v30 = *((void *)v12 + 2);
        uint64_t v31 = *((void *)v12 + 3);
        char v32 = v12[34];
        __int16 v33 = *((_WORD *)v12 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v12, v29, v30, v31, v33, v32);
        *(void *)unsigned int v11 = v28;
        *((void *)v11 + 1) = v29;
        *((void *)v11 + 2) = v30;
        *((void *)v11 + 3) = v31;
        *((_WORD *)v11 + 16) = v33;
        v11[34] = v32;
        unint64_t v34 = (unint64_t)(v11 + 42) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v35 = (unint64_t)(v12 + 42) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v36 = *(void *)v35;
        uint64_t v37 = *(void *)(v35 + 8);
        uint64_t v38 = *(void *)(v35 + 16);
        uint64_t v39 = *(void *)(v35 + 24);
        char v49 = *(unsigned char *)(v35 + 34);
        __int16 v50 = *(_WORD *)(v35 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v35, v37, v38, v39, v50, v49);
        *(void *)unint64_t v34 = v36;
        *(void *)(v34 + 8) = v37;
        *(void *)(v34 + 16) = v38;
        *(void *)(v34 + 24) = v39;
        a3 = v53;
        int v5 = v54;
        *(_WORD *)(v34 + 32) = v50;
        *(unsigned char *)(v34 + 34) = v49;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v51 + 16))((v9 + 35 + v34) & ~v9, (v9 + 35 + v35) & ~v9, v52);
        *(unsigned char *)(v55 + ((v9 + 35 + v34) & ~v9)) = *(unsigned char *)(v55 + ((v9 + 35 + v35) & ~v9));
        v11[v15] = 1;
        goto LABEL_41;
      }
      uint64_t v46 = *((void *)v12 + 1);
      *(void *)unsigned int v11 = *(void *)v12;
      *((void *)v11 + 1) = v46;
      v11[v15] = 0;
    }
    swift_retain();
    goto LABEL_41;
  }
  uint64_t v20 = ((v9 + 75) & ~v9) + *(void *)(v7 + 64);
  if ((unint64_t)(v20 + 1) > 0x30) {
    uint64_t v15 = v20 + 1;
  }
  else {
    uint64_t v15 = 48;
  }
LABEL_41:
  uint64_t v47 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v47 + 24))((unint64_t)&v11[v15 + 1 + *(unsigned __int8 *)(v47 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v47 + 80), (unint64_t)&v12[v15 + 1 + *(unsigned __int8 *)(v47 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
  return v5;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedLabelStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedLabelStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedLabelStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelStyle and conformance ResolvedLabelStyle);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey(&one-time initialization token for defaultValue, (uint64_t)static SearchContentKey.defaultValue, a1);
}

uint64_t initializeWithTake for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
  long long v9 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = v9;
  *(unsigned char *)(v7 + 40) = *(unsigned char *)(v8 + 40);
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(v8 + 48);
  swift_unknownObjectWeakTakeInit();
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  long long v10 = *(_OWORD *)(v8 + 80);
  *(void *)(v7 + 96) = *(void *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = v10;
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v8 + 104);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in CustomHoverEffectPrimitiveViewModifier<A>.MakeRootContext()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LazyLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

uint64_t View.accessibilityRemoveTraits(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return View.accessibilityAddTraits(_:)(a1, a2, a3, MEMORY[0x1E4F41178]);
}

uint64_t partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)()
{
  return partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t))closure #1 in _TaskModifier.InnerModifier.body(content:));
}

uint64_t type metadata accessor for ContentUnavailableView()
{
  return swift_getGenericMetadata();
}

uint64_t key path getter for EnvironmentValues.interactionActivityTag : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.interactionActivityTag.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t EnvironmentValues.interactionActivityTag.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<String?> and conformance _EnvironmentKeyTransformModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<String?> and conformance _EnvironmentKeyTransformModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<UserInteractionActivityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<String?> and conformance _EnvironmentKeyTransformModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedDivider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedDivider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedDivider and conformance ResolvedDivider()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider;
  if (!lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider;
  if (!lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedDivider and conformance ResolvedDivider);
  }
  return result;
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarButtonHoverShape()
{
  return &type metadata for ToolbarButtonHoverShape;
}

void *type metadata accessor for ScrollIndicatorFlashOnAppearModifier()
{
  return &unk_1ED462430;
}

ValueMetadata *type metadata accessor for FocusStoreList()
{
  return &type metadata for FocusStoreList;
}

uint64_t assignWithTake for OptionalFormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for BorderlessButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 25);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 25) = v6;
  outlined consume of Environment<KeyboardShortcut?>.Content(v7, v8, v9, v11, v10);
  char v12 = *(unsigned char *)(a2 + 40);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  char v15 = *(unsigned char *)(a2 + 56);
  uint64_t v16 = *(void *)(a1 + 48);
  char v17 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v15;
  outlined consume of Environment<Bool>.Content(v16, v17);
  return a1;
}

uint64_t assignWithTake for PlainButtonStyleBase(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for BorderedButtonStyle_Phone(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 40);
  char v8 = *(unsigned char *)(a2 + 41);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 41);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 41) = v8;
  outlined consume of Environment<CGFloat?>.Content(v9, v11, v10);
  char v12 = *(unsigned char *)(a2 + 56);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v12;
  outlined consume of Environment<Bool?>.Content(v13, v14);
  char v15 = *(unsigned char *)(a2 + 72);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v17 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v15;
  outlined consume of Environment<Color?>.Content(v16, v17);
  return a1;
}

uint64_t partial apply for closure #2 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableKeyboardTrackingElement()
{
  return &protocol witness table for EnableKeyboardTrackingElement;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EditModeScopeModifier.TransformModifier()
{
  return &protocol witness table for EditModeScopeModifier.TransformModifier;
}

uint64_t one-time initialization function for defaultValue(uint64_t a1)
{
  return one-time initialization function for defaultValue(a1, (uint64_t)&static SheetPreference.Key.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static SearchKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static NavigationPropertiesKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t)&static SheetPreference.InspectorKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, static SearchContentKey.defaultValue);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(void))type metadata accessor for URL?, static EnvironmentValues.FileDialogDefaultDirectoryKey.defaultValue, MEMORY[0x1E4F276F0]);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>?, static EnvironmentValues.FileDialogURLEnabledKey.defaultValue, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?, static WidgetAuxiliaryViewMetadata.Key.defaultValue, type metadata accessor for WidgetAuxiliaryViewMetadata);
}

{
  return one-time initialization function for defaultValue(a1, (uint64_t (*)(void))type metadata accessor for URL?, static WidgetAuxiliaryURLPreferenceKey.defaultValue, MEMORY[0x1E4F276F0]);
}

{
  return one-time initialization function for defaultValue(a1, static NavigationPropertiesContentKey.defaultValue);
}

_WORD *initializeWithCopy for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  char v7 = (char *)a1 + v6;
  char v8 = (char *)a2 + v6;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v25 = *(void *)v8;
    uint64_t v26 = *((void *)v8 + 1);
    char v27 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v26, v27);
    *(void *)char v7 = v25;
    *((void *)v7 + 1) = v26;
    v7[16] = v27;
    uint64_t v28 = *((void *)v8 + 5);
    long long v29 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v29;
    *((void *)v7 + 5) = v28;
    id v30 = (id)v29;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v31 = *((void *)v8 + 1);
    *(void *)char v7 = *(void *)v8;
    *((void *)v7 + 1) = v31;
    goto LABEL_6;
  }
  char v49 = a3;
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v13 = *((void *)v8 + 2);
  uint64_t v12 = *((void *)v8 + 3);
  char v14 = v8[34];
  __int16 v15 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v8, v11, v13, v12, v15, v14);
  *(void *)char v7 = v10;
  *((void *)v7 + 1) = v11;
  *((void *)v7 + 2) = v13;
  *((void *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v15;
  v7[34] = v14;
  uint64_t v16 = *((void *)v8 + 5);
  uint64_t v17 = *((void *)v8 + 6);
  uint64_t v18 = *((void *)v8 + 7);
  uint64_t v19 = *((void *)v8 + 8);
  LOBYTE(v11) = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v13, v11);
  *((void *)v7 + 5) = v16;
  *((void *)v7 + 6) = v17;
  *((void *)v7 + 7) = v18;
  *((void *)v7 + 8) = v19;
  *((_WORD *)v7 + 36) = v13;
  v7[74] = v11;
  a3 = v49;
  uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
  int v21 = &v7[v20];
  unint64_t v22 = &v8[v20];
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
  v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = a3[5];
  __int16 v33 = (char *)a1 + v32;
  unint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *((void *)v34 + 1);
  uint64_t v37 = *((void *)v34 + 2);
  uint64_t v38 = *((void *)v34 + 3);
  char v39 = v34[32];
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)v34, v36, v37, v38, v39);
  *(void *)__int16 v33 = v35;
  *((void *)v33 + 1) = v36;
  *((void *)v33 + 2) = v37;
  *((void *)v33 + 3) = v38;
  v33[32] = v39;
  uint64_t v40 = a3[6];
  uint64_t v41 = (char *)a1 + v40;
  char v42 = (char *)a2 + v40;
  uint64_t v43 = *(void *)v42;
  LOBYTE(v36) = v42[8];
  outlined copy of Environment<Bool>.Content(*(void *)v42, v36);
  *(void *)uint64_t v41 = v43;
  v41[8] = v36;
  uint64_t v44 = a3[7];
  id v45 = (char *)a1 + v44;
  uint64_t v46 = (char *)a2 + v44;
  uint64_t v47 = *(void *)v46;
  LOBYTE(v43) = v46[8];
  outlined copy of Environment<Bool>.Content(*(void *)v46, v43);
  *(void *)id v45 = v47;
  v45[8] = v43;
  return a1;
}

void type metadata accessor for BadgedView<_ViewModifier_Content<BadgeModifier>>()
{
  if (!lazy cache variable for type metadata for BadgedView<_ViewModifier_Content<BadgeModifier>>)
  {
    type metadata accessor for _ViewModifier_Content<BadgeModifier>();
    lazy protocol witness table accessor for type BadgedView<_ViewModifier_Content<BadgeModifier>> and conformance BadgedView<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<BadgeModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<BadgeModifier>);
    unint64_t v0 = type metadata accessor for BadgedView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BadgedView<_ViewModifier_Content<BadgeModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type BadgedView<_ViewModifier_Content<BadgeModifier>> and conformance BadgedView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for PlatformSearchFieldStyle.Implementation()
{
  uint64_t result = type metadata accessor for SearchFieldConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t SearchFieldStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t destroy for ToolbarSearchFieldStyle.Implementation(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SearchFieldState(0) + 36) + v5;
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v9 = a1 + *(int *)(v8 + 24);
  int v10 = *(unsigned __int8 *)(v9 + 8);
  if (v10 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v9, v10 & 1);
  }
  outlined consume of Text.Storage(*(void *)(a1 + *(int *)(v8 + 32)), *(void *)(a1 + *(int *)(v8 + 32) + 8), *(unsigned char *)(a1 + *(int *)(v8 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + a2[5]), *(unsigned __int8 *)(a1 + a2[5] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + a2[6]), *(unsigned __int8 *)(a1 + a2[6] + 8));
  uint64_t v11 = (uint64_t *)(a1 + a2[8]);
  uint64_t v12 = *v11;
  uint64_t v13 = *((unsigned __int8 *)v11 + 8);

  return outlined consume of Environment<Bool?>.Content(v12, v13);
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ())(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t closure #1 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 8) = a2;
  return result;
}

uint64_t partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 + 32);
  a2();

  return closure #1 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, v4);
}

uint64_t partial apply for closure #1 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1)
{
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 8) = v1;
  return result;
}

uint64_t _s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0RzlufcyAA06UpdateeF033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVzXEfU_TA_0(uint64_t a1)
{
  return closure #1 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, v1);
}

uint64_t partial apply for closure #1 in UpdateSubviewTransition.visit<A>(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 32) + 8);
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 8) = v3;
  return result;
}

uint64_t partial apply for closure #6 in LazyLayoutViewCache.item(data:)(uint64_t a1)
{
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 24) = v1;
  return result;
}

uint64_t closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)partial apply(uint64_t a1)
{
  return partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, (void (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout);
}

{
  return partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, (void (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout);
}

{
  return partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, (void (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout);
}

{
  return partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, (void (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout);
}

{
  return partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, (void (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout);
}

unint64_t lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout;
  if (!lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyHStackLayout and conformance LazyHStackLayout);
  }
  return result;
}

void partial apply for closure #1 in SearchToolbarItem.SearchTransform.value.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SearchFieldConfiguration(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in SearchToolbarItem.SearchTransform.value.getter(a1, *(unsigned char *)(v1 + 16), v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v6), *(void *)(v1 + v6 + 8), v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8), v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 95) & 0xFFFFFFFFFFFFFFF8) + 88), v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 191) & 0xFFFFFFFFFFFFFFF8));
}

void closure #1 in SearchToolbarItem.SearchTransform.value.getter(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v52 = a7;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    uint64_t v50 = a8;
    uint64_t v51 = a4;
    uint64_t v47 = v21;
    uint64_t v48 = a10;
    int v45 = a9;
    outlined destroy of ToolbarStorage.SearchItem?(a1);
    uint64_t v46 = a3;
    uint64_t v44 = v19;
    outlined init with copy of Binding<SearchFieldState>(a3, (uint64_t)v19);
    uint64_t v49 = a1;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
    swift_bridgeObjectRetain();
    uint64_t v24 = a5;
    swift_retain_n();
    if (a6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
      swift_release();
      uint64_t v42 = v53;
      int v43 = v54;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchSuggestionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
      swift_release();
      uint64_t v42 = v53;
      int v43 = v54;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchSuggestionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchSuggestionsKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    uint64_t v25 = a6;
    uint64_t v26 = v53;
    char v27 = v54;
    uint64_t v28 = v46 + *(int *)(type metadata accessor for SearchFieldConfiguration(0) + 32);
    uint64_t v30 = *(void *)(v28 + 8);
    uint64_t v41 = *(void *)v28;
    uint64_t v29 = v41;
    char v31 = *(unsigned char *)(v28 + 16);
    uint64_t v46 = *(void *)(v28 + 24);
    uint64_t v32 = v46;
    outlined init with take of Binding<SearchFieldState>((uint64_t)v44, (uint64_t)v23);
    *(void *)&v23[v20[5]] = v51;
    __int16 v33 = &v23[v20[6]];
    *(void *)__int16 v33 = v42;
    v33[8] = v43;
    unint64_t v34 = &v23[v20[7]];
    *(void *)unint64_t v34 = v26;
    _OWORD v34[8] = v27;
    uint64_t v35 = &v23[v20[8]];
    *(void *)uint64_t v35 = v29;
    *((void *)v35 + 1) = v30;
    v35[16] = v31;
    *((void *)v35 + 3) = v32;
    uint64_t v36 = &v23[v20[9]];
    *(void *)uint64_t v36 = v24;
    *((void *)v36 + 1) = v25;
    uint64_t v37 = v52;
    outlined init with take of BoundInputsView?(v52, (uint64_t)&v23[v20[10]], (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
    uint64_t v38 = v50;
    outlined init with take of BoundInputsView?(v50, (uint64_t)&v23[v20[11]], (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
    v23[v20[12]] = v45;
    uint64_t v39 = v48;
    outlined init with take of BoundInputsView?(v48, (uint64_t)&v23[v20[13]], (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
    uint64_t v40 = v49;
    outlined init with take of BoundInputsView?((uint64_t)v23, v49, type metadata accessor for ToolbarStorage.SearchItem);
    (*(void (**)(uint64_t, void, uint64_t, int *))(v47 + 56))(v40, 0, 1, v20);
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v41, v30, v31);
    swift_bridgeObjectRetain();
    outlined retain of BoundInputsView?(v37);
    outlined retain of BoundInputsView?(v38);
    outlined retain of BoundInputsView?(v39);
  }
}

uint64_t outlined init with copy of Binding<SearchFieldState>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<SearchFocusContext?>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SearchFocusContext?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with take of Binding<SearchFieldState>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void (*SearchToolbarItem.SearchTransform.value.getter(unint64_t a1))(uint64_t a1)
{
  unint64_t v47 = HIDWORD(a1);
  uint64_t v1 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (unsigned __int8 *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v5 = v4 - 8;
  unint64_t v44 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v44 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int v10 = (char *)&v43 - v9;
  uint64_t v11 = (int *)type metadata accessor for SearchToolbarItem();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of SearchFieldConfiguration(Value, (uint64_t)v10);
  uint64_t v13 = AGGraphGetValue();
  uint64_t v14 = v11[6];
  int v46 = *(unsigned __int8 *)(v13 + v11[5]);
  outlined init with take of BoundInputsView?(v13 + v14, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
  uint64_t v15 = AGGraphGetValue();
  outlined init with take of BoundInputsView?(v15 + v11[7], (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
  uint64_t v16 = AGGraphGetValue();
  uint64_t v17 = v11[9];
  int v45 = *(unsigned __int8 *)(v16 + v11[8]);
  outlined init with take of BoundInputsView?(v16 + v17, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
  outlined retain of BoundInputsView?((uint64_t)v52);
  outlined retain of BoundInputsView?((uint64_t)v51);
  outlined retain of BoundInputsView?((uint64_t)v50);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v19 = v18;
  MEMORY[0x18C113DA0]();
  outlined destroy of SearchFieldState((uint64_t)v3);
  uint64_t v20 = &v10[*(int *)(v5 + 32)];
  unsigned __int8 v21 = v20[8];
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = *(void *)v20;
    if (!AGGraphGetWeakValue()) {
      outlined consume of PlatformItemCollection?(v22, v21);
    }
  }
  MEMORY[0x18C113DA0](v19);
  int v23 = *v3;
  outlined destroy of SearchFieldState((uint64_t)v3);
  if (v23 != 2)
  {
    if (*(void *)(AGGraphGetValue() + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      uint64_t v43 = v6;
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      swift_retain_n();
      swift_retain_n();
      uint64_t v6 = v43;
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LazySearchScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<LazySearchScopesKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release();
    uint64_t v24 = v48;
    int v25 = v49;
    swift_release();
    swift_release();
    if (v25 != 255 && ((v25 & 1) != 0 || !AGGraphGetWeakValue())) {
      outlined consume of PlatformItemCollection?(v24, v25);
    }
  }
  uint64_t v26 = (uint64_t *)AGGraphGetValue();
  uint64_t v27 = *v26;
  int v28 = v20[8];
  unint64_t v47 = v26[1];
  if (v28 == 255)
  {
    swift_retain();
    swift_retain();
    uint64_t v43 = 0;
    unint64_t v33 = v44;
    uint64_t v32 = v27;
  }
  else
  {
    uint64_t v29 = *(void *)v20;
    if (v28)
    {
      swift_retain();
      uint64_t v32 = v27;
      swift_retain();
      uint64_t v31 = v29;
      outlined copy of PlatformItemCollection?(v29, v28);
    }
    else
    {
      Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
      if (WeakValue)
      {
        uint64_t v31 = *WeakValue;
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v32 = v27;
        swift_retain();
        outlined consume of PlatformItemCollection?(v29, v28);
      }
      else
      {
        swift_retain();
        uint64_t v32 = v27;
        swift_retain();
        outlined consume of PlatformItemCollection?(v29, v28);
        uint64_t v31 = MEMORY[0x1E4FBC860];
      }
    }
    unint64_t v33 = v44;
    uint64_t v43 = v31;
  }
  outlined init with take of BoundInputsView?((uint64_t)v10, (uint64_t)v7, type metadata accessor for SearchFieldConfiguration);
  unint64_t v34 = (*(unsigned __int8 *)(v33 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  unint64_t v35 = (v6 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v37 + 95) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v38 = swift_allocObject();
  *(unsigned char *)(v38 + 16) = v46;
  outlined init with take of BoundInputsView?((uint64_t)v7, v38 + v34, type metadata accessor for SearchFieldConfiguration);
  *(void *)(v38 + v35) = v43;
  uint64_t v39 = (void *)(v38 + v36);
  unint64_t v40 = v47;
  *uint64_t v39 = v32;
  v39[1] = v40;
  outlined init with take of BoundInputsView?((uint64_t)v50, v38 + v37, (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
  unint64_t v41 = v38 + v44;
  outlined init with take of BoundInputsView?((uint64_t)v51, v38 + v44, (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
  *(unsigned char *)(v41 + 88) = v45;
  outlined init with take of BoundInputsView?((uint64_t)v52, v38 + ((v37 + 191) & 0xFFFFFFFFFFFFFFF8), (uint64_t (*)(void))type metadata accessor for BoundInputsView?);
  return partial apply for closure #1 in SearchToolbarItem.SearchTransform.value.getter;
}

uint64_t outlined init with take of PlatformItem.PrimaryContent?(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  type metadata accessor for AccessibilityValueStorage?(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of BoundInputsView?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for BoundInputsView?()
{
  if (!lazy cache variable for type metadata for BoundInputsView?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for BoundInputsView?);
    }
  }
}

uint64_t outlined retain of BoundInputsView?(uint64_t a1)
{
  return a1;
}

id outlined copy of BoundInputsView?(id result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return a5;
  }
  return result;
}

void *initializeWithCopy for ToolbarSearchFieldStyle.Implementation(void *a1, void *a2, int *a3)
{
  uint64_t v43 = a2[1];
  *a1 = *a2;
  a1[1] = v43;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v15 = v9[11];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v19 = v18[6];
  uint64_t v20 = (char *)a1 + v19;
  unsigned __int8 v21 = (char *)a2 + v19;
  int v22 = v21[8];
  if (v22 == 255)
  {
    *(void *)uint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
  }
  else
  {
    char v23 = v22 & 1;
    uint64_t v24 = *(void *)v21;
    outlined copy of PlatformItemCollection.Storage(*(void *)v21, v22 & 1);
    *(void *)uint64_t v20 = v24;
    v20[8] = v23;
  }
  *((unsigned char *)a1 + v18[7]) = *((unsigned char *)a2 + v18[7]);
  uint64_t v25 = v18[8];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)((char *)a2 + v25);
  uint64_t v29 = *(void *)((char *)a2 + v25 + 8);
  char v30 = *((unsigned char *)a2 + v25 + 16);
  outlined copy of Text.Storage(v28, v29, v30);
  *(void *)uint64_t v26 = v28;
  *((void *)v26 + 1) = v29;
  v26[16] = v30;
  *((void *)v26 + 3) = *((void *)v27 + 3);
  uint64_t v31 = a3[5];
  uint64_t v32 = (char *)a1 + v31;
  unint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = *(void *)v33;
  LOBYTE(v29) = v33[8];
  swift_bridgeObjectRetain();
  outlined copy of Environment<Bool>.Content(v34, v29);
  *(void *)uint64_t v32 = v34;
  v32[8] = v29;
  uint64_t v35 = a3[6];
  unint64_t v36 = (char *)a1 + v35;
  unint64_t v37 = (char *)a2 + v35;
  uint64_t v38 = *(void *)v37;
  LOBYTE(v29) = v37[8];
  outlined copy of Environment<Bool>.Content(*(void *)v37, v29);
  *(void *)unint64_t v36 = v38;
  v36[8] = v29;
  uint64_t v39 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  unint64_t v40 = (char *)a1 + v39;
  uint64_t v41 = *(void *)((char *)a2 + v39);
  LOBYTE(v29) = *((unsigned char *)a2 + v39 + 8);
  outlined copy of Environment<Bool>.Content(v41, v29);
  *(void *)unint64_t v40 = v41;
  v40[8] = v29;
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

uint64_t type metadata accessor for SearchFieldConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for SearchFieldConfiguration);
}

uint64_t outlined destroy of SearchFieldState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SearchToolbarItem()
{
  uint64_t result = type metadata singleton initialization cache for SearchToolbarItem;
  if (!type metadata singleton initialization cache for SearchToolbarItem) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #1 in UIKitToolbarStrategy.updateSearch()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v85 = a3;
  uint64_t v4 = type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v84 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1E4FBB718];
  type metadata accessor for ToolbarStorage.SearchItem?(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v81 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v82 = (uint64_t)&v78 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v89 = (char *)&v78 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v83 = (uint64_t)&v78 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v88 = (char *)&v78 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v78 - v19;
  MEMORY[0x1F4188790](v21);
  char v23 = (char *)&v78 - v22;
  uint64_t v24 = a1 + direct field offset for ToolbarBridge.searchItem;
  swift_beginAccess();
  uint64_t v25 = v24;
  uint64_t v26 = (uint64_t)v23;
  outlined init with copy of Toolbar.UpdateContext?(v25, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, v7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  outlined init with copy of Toolbar.UpdateContext?((uint64_t)v23, (uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, v7, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t v80 = v5;
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  uint64_t v90 = v4;
  int v28 = v27(v20, 1, v4);
  outlined destroy of Toolbar.UpdateContext?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, v7, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  id v29 = 0;
  if (v28 != 1)
  {
    char v30 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 48);
    if (v30)
    {
      id v29 = *(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 48);
    }
    else
    {
      id v29 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SwiftUISearchController(0)), sel_init);
      char v30 = 0;
    }
    id v31 = v30;
  }
  uint64_t v32 = a1 + direct field offset for ToolbarBridge.platformVended;
  unint64_t v33 = (char *)*(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  id v34 = objc_msgSend(v33, sel_searchController);
  objc_msgSend(v33, sel_setSearchController_, v29);
  uint64_t v35 = (char *)v34;
  unint64_t v36 = (char *)objc_msgSend(v33, sel_searchController);
  unint64_t v37 = v36;
  uint64_t v86 = v32;
  if (v35)
  {

    uint64_t v38 = v88;
    uint64_t v39 = (uint64_t)v89;
    if (v37)
    {

      BOOL v40 = v35 != v37;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  uint64_t v38 = v88;
  uint64_t v39 = (uint64_t)v89;
  if (v36)
  {

LABEL_11:
    BOOL v40 = 1;
    goto LABEL_13;
  }
  BOOL v40 = 0;
LABEL_13:
  outlined init with copy of Toolbar.UpdateContext?(v26, (uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  int v41 = v27(v38, 1, v90);
  uint64_t v87 = v26;
  if (v41 == 1)
  {
    outlined destroy of Toolbar.UpdateContext?((uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    BOOL v42 = 1;
  }
  else
  {
    LODWORD(v78) = v40;
    if (*(void *)&v38[*(int *)(v90 + 36) + 8])
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    BOOL v42 = (v94 & 1) == 0 || v94 - 2 < 6;
    _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v88, type metadata accessor for ToolbarStorage.SearchItem);
    uint64_t v26 = v87;
    BOOL v40 = (int)v78;
    uint64_t v39 = (uint64_t)v89;
  }
  objc_msgSend(v33, sel_setHidesSearchBarWhenScrolling_, v42, v78);
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    uint64_t v44 = v83;
    outlined init with copy of Toolbar.UpdateContext?(v26, v83, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
    if (v27((char *)v44, 1, v90) == 1)
    {
      outlined destroy of Toolbar.UpdateContext?(v44, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    }
    else
    {
      uint64_t v78 = v27;
      uint64_t v88 = v35;
      uint64_t v45 = *(void *)(v44 + *(int *)(v90 + 36) + 8);
      swift_retain();
      swift_retain();
      _s7SwiftUI16SearchFieldStateVWOhTm_2(v44, type metadata accessor for ToolbarStorage.SearchItem);
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey);
      swift_retain();
      if (v45)
      {
        swift_retain_n();
        swift_retain();
        PropertyList.Tracker.value<A>(_:for:)();
      }
      else
      {
        swift_retain();
        swift_retain();
        PropertyList.subscript.getter();
      }
      swift_release_n();
      swift_release_n();
      uint64_t v26 = v87;
      uint64_t v35 = v88;
      uint64_t v27 = v78;
      uint64_t v39 = (uint64_t)v89;
      uint64_t v46 = 0;
      switch((char)v94)
      {
        case 2:
        case 3:
          goto LABEL_34;
        case 4:
          uint64_t v46 = 3;
          goto LABEL_34;
        case 5:
        case 7:
          break;
        default:
          uint64_t v46 = 2;
LABEL_34:
          objc_msgSend(v33, sel_setPreferredSearchBarPlacement_, v46);
          break;
      }
    }
  }
  unint64_t v47 = *(void **)(v86 + 48);
  *(void *)(v86 + 48) = v29;
  id v48 = v29;

  outlined init with copy of Toolbar.UpdateContext?(v26, v39, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  if (v27((char *)v39, 1, v90) == 1)
  {
    outlined destroy of Toolbar.UpdateContext?(v26, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);

    uint64_t v26 = v39;
LABEL_45:
    uint64_t v71 = v85;
LABEL_46:
    uint64_t result = outlined destroy of Toolbar.UpdateContext?(v26, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    *uint64_t v71 = v40;
    return result;
  }
  uint64_t v49 = v84;
  outlined init with take of ToolbarStorage.SearchItem(v39, v84, type metadata accessor for ToolbarStorage.SearchItem);
  if (!v29)
  {

    _s7SwiftUI16SearchFieldStateVWOhTm_2(v49, type metadata accessor for ToolbarStorage.SearchItem);
    goto LABEL_45;
  }
  uint64_t v88 = v35;
  uint64_t v89 = v33;
  uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
  uint64_t v51 = v82;
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_0(v49, v82, type metadata accessor for ToolbarStorage.SearchItem);
  uint64_t v52 = v90;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56))(v51, 0, 1, v90);
  uint64_t v53 = v49;
  uint64_t v54 = (uint64_t)v48 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
  swift_beginAccess();
  id v55 = v48;
  outlined assign with copy of ToolbarStorage.SearchItem?(v51, v54);
  swift_endAccess();
  uint64_t v56 = v54;
  uint64_t v57 = v81;
  outlined init with copy of Toolbar.UpdateContext?(v56, v81, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t result = v50(v57, 1, v52);
  if (result != 1)
  {
    SwiftUISearchController.update(to:)(v57);
    _s7SwiftUI16SearchFieldStateVWOhTm_2(v57, type metadata accessor for ToolbarStorage.SearchItem);
    outlined destroy of Toolbar.UpdateContext?(v51, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    char v59 = (void *)MEMORY[0x18C119DF0](v79 + 64);
    swift_unknownObjectWeakAssign();

    id v60 = objc_msgSend(v55, sel_searchBar);
    id v61 = objc_msgSend(v60, sel_searchTextField);

    uint64_t v62 = v53 + *(int *)(v90 + 32);
    uint64_t v64 = *(void *)v62;
    uint64_t v63 = *(void *)(v62 + 8);
    char v65 = *(unsigned char *)(v62 + 16);
    uint64_t v66 = *(void *)(v62 + 24);
    uint64_t v67 = (uint64_t *)(v53 + *(int *)(v90 + 36));
    uint64_t v68 = *v67;
    uint64_t v69 = v67[1];
    uint64_t v94 = *v67;
    uint64_t v95 = v69;
    outlined copy of Text.Storage(v64, v63, v65);
    swift_retain();
    uint64_t v90 = v66;
    swift_bridgeObjectRetain();
    swift_retain();
    char v70 = EnvironmentValues.accessibilityEnabled.getter();
    uint64_t v71 = v85;
    if ((v70 & 1) != 0 && (uint64_t v72 = Text.storedAccessibilityLabel.getter(), v75))
    {
      uint64_t v86 = v74 & 1;
      uint64_t v94 = v68;
      uint64_t v95 = v69;
      uint64_t v92 = 0;
      uint64_t v93 = 0;
      char v91 = v74 & 1;
      uint64_t v81 = v72;
      uint64_t v82 = v73;
      uint64_t v83 = v75;
      uint64_t v76 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
      LODWORD(v78) = v40;
      uint64_t v77 = (void *)MEMORY[0x18C115780](v76);
      LOBYTE(v40) = (_BYTE)v78;
      swift_bridgeObjectRelease();
      objc_msgSend(v61, sel_setAccessibilityLabel_, v77);

      outlined consume of Text.Storage(v81, v82, v86);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    outlined consume of Text.Storage(v64, v63, v65);
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    _s7SwiftUI16SearchFieldStateVWOhTm_2(v84, type metadata accessor for ToolbarStorage.SearchItem);
    uint64_t v26 = v87;
    goto LABEL_46;
  }
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.SearchItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DD1E5C);
}

uint64_t outlined destroy of SearchFieldState(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOhTm_3(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOhTm_4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOhTm_5(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for SearchFieldState(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t type metadata accessor for ToolbarStorage.SearchItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.SearchItem);
}

uint64_t outlined destroy of Toolbar.UpdateContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for ToolbarStorage.Entry.ID?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t destroy for ToolbarStorage.SearchItem(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SearchFieldState(0) + 36) + v5;
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[6];
  int v9 = *(unsigned __int8 *)(v8 + 8);
  if (v9 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v8, v9 & 1);
  }
  uint64_t v10 = a1 + a2[7];
  int v11 = *(unsigned __int8 *)(v10 + 8);
  if (v11 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v10, v11 & 1);
  }
  outlined consume of Text.Storage(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8), *(unsigned char *)(a1 + a2[8] + 16));
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  uint64_t v13 = a1 + a2[10];
  if (*(void *)v13)
  {

    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v14 = a1 + a2[11];
  if (*(void *)v14)
  {

    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1 + a2[13];
  if (*(void *)v15)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for ToolbarStorage.SearchItem(void *a1, void *a2, int *a3)
{
  uint64_t v70 = a2[1];
  *a1 = *a2;
  a1[1] = v70;
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  int v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  int v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  uint64_t v15 = v13;
  uint64_t v16 = a1;
  v14(v11, v12, v15);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v17 = v9[11];
  uint64_t v18 = &v7[v17];
  uint64_t v19 = &v8[v17];
  v18[4] = v19[4];
  uint64_t v20 = a3[5];
  uint64_t v21 = a3[6];
  uint64_t v22 = *(void *)((char *)a2 + v20);
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(void *)((char *)a1 + v20) = v22;
  char v23 = (char *)a1 + v21;
  uint64_t v24 = (char *)a2 + v21;
  int v25 = *((unsigned __int8 *)a2 + v21 + 8);
  swift_bridgeObjectRetain();
  if (v25 == 255)
  {
    *(void *)char v23 = *(void *)v24;
    v23[8] = v24[8];
  }
  else
  {
    char v26 = v25 & 1;
    uint64_t v27 = *(void *)v24;
    outlined copy of PlatformItemCollection.Storage(v27, v26);
    *(void *)char v23 = v27;
    v23[8] = v26;
  }
  uint64_t v28 = a3[7];
  id v29 = (char *)v16 + v28;
  char v30 = (char *)a2 + v28;
  int v31 = v30[8];
  if (v31 == 255)
  {
    *(void *)id v29 = *(void *)v30;
    v29[8] = v30[8];
  }
  else
  {
    char v32 = v31 & 1;
    uint64_t v33 = *(void *)v30;
    outlined copy of PlatformItemCollection.Storage(*(void *)v30, v31 & 1);
    *(void *)id v29 = v33;
    v29[8] = v32;
  }
  uint64_t v34 = a3[8];
  uint64_t v35 = (char *)v16 + v34;
  unint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = *(void *)((char *)a2 + v34);
  uint64_t v38 = *(void *)((char *)a2 + v34 + 8);
  char v39 = *((unsigned char *)a2 + v34 + 16);
  outlined copy of Text.Storage(v37, v38, v39);
  *(void *)uint64_t v35 = v37;
  *((void *)v35 + 1) = v38;
  v35[16] = v39;
  *((void *)v35 + 3) = *((void *)v36 + 3);
  uint64_t v40 = a3[9];
  uint64_t v41 = a3[10];
  BOOL v42 = (void *)((char *)v16 + v40);
  uint64_t v43 = (void *)((char *)a2 + v40);
  uint64_t v44 = v43[1];
  *BOOL v42 = *v43;
  v42[1] = v44;
  uint64_t v45 = (char *)v16 + v41;
  uint64_t v46 = (char *)a2 + v41;
  uint64_t v47 = *(void *)((char *)a2 + v41);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v47)
  {
    uint64_t v48 = *((void *)v46 + 1);
    *(void *)uint64_t v45 = v47;
    *((void *)v45 + 1) = v48;
    *((_DWORD *)v45 + 4) = *((_DWORD *)v46 + 4);
    uint64_t v49 = (void *)*((void *)v46 + 4);
    *((void *)v45 + 3) = *((void *)v46 + 3);
    *((void *)v45 + 4) = v49;
    *((void *)v45 + 5) = *((void *)v46 + 5);
    *((_DWORD *)v45 + 12) = *((_DWORD *)v46 + 12);
    *((void *)v45 + 7) = *((void *)v46 + 7);
    *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
    *((void *)v45 + 10) = *((void *)v46 + 10);
    id v50 = v49;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v51 = *((_OWORD *)v46 + 3);
    *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
    *((_OWORD *)v45 + 3) = v51;
    *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
    *((void *)v45 + 10) = *((void *)v46 + 10);
    long long v52 = *((_OWORD *)v46 + 1);
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    *((_OWORD *)v45 + 1) = v52;
  }
  uint64_t v53 = a3[11];
  uint64_t v54 = (char *)v16 + v53;
  id v55 = (char *)a2 + v53;
  if (*(void *)v55)
  {
    uint64_t v56 = *((void *)v55 + 1);
    *(void *)uint64_t v54 = *(void *)v55;
    *((void *)v54 + 1) = v56;
    *((_DWORD *)v54 + 4) = *((_DWORD *)v55 + 4);
    uint64_t v57 = (void *)*((void *)v55 + 4);
    *((void *)v54 + 3) = *((void *)v55 + 3);
    *((void *)v54 + 4) = v57;
    *((void *)v54 + 5) = *((void *)v55 + 5);
    *((_DWORD *)v54 + 12) = *((_DWORD *)v55 + 12);
    *((void *)v54 + 7) = *((void *)v55 + 7);
    *((_OWORD *)v54 + 4) = *((_OWORD *)v55 + 4);
    *((void *)v54 + 10) = *((void *)v55 + 10);
    id v58 = v57;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v59 = *((_OWORD *)v55 + 3);
    *((_OWORD *)v54 + 2) = *((_OWORD *)v55 + 2);
    *((_OWORD *)v54 + 3) = v59;
    *((_OWORD *)v54 + 4) = *((_OWORD *)v55 + 4);
    *((void *)v54 + 10) = *((void *)v55 + 10);
    long long v60 = *((_OWORD *)v55 + 1);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *((_OWORD *)v54 + 1) = v60;
  }
  uint64_t v61 = a3[13];
  *((unsigned char *)v16 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  uint64_t v62 = (char *)v16 + v61;
  uint64_t v63 = (char *)a2 + v61;
  if (*(void *)v63)
  {
    uint64_t v64 = *((void *)v63 + 1);
    *(void *)uint64_t v62 = *(void *)v63;
    *((void *)v62 + 1) = v64;
    *((_DWORD *)v62 + 4) = *((_DWORD *)v63 + 4);
    char v65 = (void *)*((void *)v63 + 4);
    *((void *)v62 + 3) = *((void *)v63 + 3);
    *((void *)v62 + 4) = v65;
    *((void *)v62 + 5) = *((void *)v63 + 5);
    *((_DWORD *)v62 + 12) = *((_DWORD *)v63 + 12);
    *((void *)v62 + 7) = *((void *)v63 + 7);
    *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
    *((void *)v62 + 10) = *((void *)v63 + 10);
    id v66 = v65;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v67 = *((_OWORD *)v63 + 3);
    *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
    *((_OWORD *)v62 + 3) = v67;
    *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
    *((void *)v62 + 10) = *((void *)v63 + 10);
    long long v68 = *((_OWORD *)v63 + 1);
    *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
    *((_OWORD *)v62 + 1) = v68;
  }
  return v16;
}

uint64_t type metadata accessor for SearchFieldState(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchFieldState);
}

void type metadata accessor for WeakBox<ViewResponder>(uint64_t a1)
{
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_1(a1, (uint64_t)v7, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_1(a2, (uint64_t)v9, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  if (!v8)
  {
    if (!v10)
    {
      outlined destroy of SearchFocusContext?((uint64_t)v7, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
      return 1;
    }
LABEL_7:
    outlined destroy of (Toolbar.UpdateContext?, Toolbar.UpdateContext?)((uint64_t)v7, &lazy cache variable for type metadata for (Toolbar.UpdateContext?, Toolbar.UpdateContext?), &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    return 0;
  }
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_1((uint64_t)v7, (uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  if (!v10)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v6);
    goto LABEL_7;
  }
  outlined init with take of Toolbar.UpdateContext((uint64_t)v9, (uint64_t)v5);
  BOOL v3 = specialized static Toolbar.UpdateContext.== infix(_:_:)((uint64_t)v6, (uint64_t)v5);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v5);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v6);
  outlined destroy of SearchFocusContext?((uint64_t)v7, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  return v3;
}

{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v13;
  uint64_t v14;
  void v15[4];
  unsigned __int8 v16;
  void v17[4];
  unsigned __int8 v18;
  unsigned char v19[32];
  unsigned __int8 v20;
  unsigned char v21[48];

  outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v17);
  uint64_t v5 = v17[0];
  uint64_t v4 = v17[1];
  uint64_t v13 = v17[3];
  uint64_t v14 = v17[2];
  uint64_t v6 = v18;
  outlined init with take of TableColumnCustomizationID?(a1, (uint64_t)v15);
  uint64_t v8 = v15[0];
  uint64_t v7 = v15[1];
  int v9 = v15[2];
  uint64_t v10 = v15[3];
  int v11 = v16;
  outlined init with take of TableColumnCustomizationID?(a1, (uint64_t)v21);
  if (v21[32] != 255)
  {
    outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v19);
    if (v20 != 255)
    {
      if (v11)
      {
        if ((v6 & 1) == 0 || (v8 != v5 || v7 != v4) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
        if (v9 == v14 && v10 == v13) {
          return 1;
        }
      }
      else
      {
        if (v6) {
          return 0;
        }
        if (v8 == v5 && v7 == v4) {
          return 1;
        }
      }
      return (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0;
    }
LABEL_9:
    outlined retain of TableColumnCustomizationID?(a1);
    outlined retain of TableColumnCustomizationID?(a2);
    outlined consume of TableColumnCustomizationID?(v8, v7, v9, v10, v11);
    outlined consume of TableColumnCustomizationID?(v5, v4, v14, v13, v6);
    return 0;
  }
  outlined init with take of TableColumnCustomizationID?(a2, (uint64_t)v19);
  if (v20 != 255) {
    goto LABEL_9;
  }
  return 1;
}

uint64_t outlined init with copy of Toolbar.UpdateContext?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for ToolbarStorage.Entry.ID?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI16KeyboardShortcutVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for KeyboardShortcut?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI16KeyboardShortcutVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of SearchFocusContext?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI16KeyboardShortcutVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for WeakBox<FocusBridge>(uint64_t a1)
{
}

uint64_t destroy for SearchFieldConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SearchFieldState(0) + 36) + v5;
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(v8 + 8);
  if (v9 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v8, v9 & 1);
  }
  outlined consume of Text.Storage(*(void *)(a1 + *(int *)(a2 + 32)), *(void *)(a1 + *(int *)(a2 + 32) + 8), *(unsigned char *)(a1 + *(int *)(a2 + 32) + 16));

  return swift_bridgeObjectRelease();
}

uint64_t destroy for ToolbarItemGroup(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 40) == 1) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t destroy for ResolvedSearchFieldStyle(uint64_t a1)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v3 = *(int *)(v2 + 32);
  uint64_t v4 = a1 + *(int *)(type metadata accessor for SearchFieldState(0) + 36) + v3;
  uint64_t v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v7 = a1 + *(int *)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v7 + 8);
  if (v8 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v7, v8 & 1);
  }
  outlined consume of Text.Storage(*(void *)(a1 + *(int *)(v6 + 32)), *(void *)(a1 + *(int *)(v6 + 32) + 8), *(unsigned char *)(a1 + *(int *)(v6 + 32) + 16));

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of SearchFieldConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.SearchItem?(uint64_t a1)
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1)
{
  return specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1);
}

uint64_t specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = _ViewOutputs.layoutComputer.getter();
  uint64_t result = swift_endAccess();
  int v4 = *MEMORY[0x1E4F4E7A0];
  if ((v2 & 0x100000000) == 0) {
    int v4 = v2;
  }
  *(_DWORD *)(a1 + 40) = v4;
  return result;
}

uint64_t outlined init with take of ToolbarStorage.SearchItem(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for UIKitSearchBarAdaptor(uint64_t a1)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = v3 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v7 = a1 + *(int *)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v7 + 8);
  if (v8 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v7, v8 & 1);
  }
  outlined consume of Text.Storage(*(void *)(a1 + *(int *)(v6 + 32)), *(void *)(a1 + *(int *)(v6 + 32) + 8), *(unsigned char *)(a1 + *(int *)(v6 + 32) + 16));

  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #6 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t result = _ViewOutputs.subscript.getter();
  int v3 = *MEMORY[0x1E4F4E7A0];
  if ((result & 0x100000000) == 0) {
    int v3 = result;
  }
  *(_DWORD *)(a1 + 12) = v3;
  return result;
}

void partial apply for closure #12 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1)
{
  closure #12 in static SystemScrollView._makeView(view:inputs:)(a1, *(void ***)(v1 + 16));
}

void closure #12 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    __break(1u);
  }
  type metadata accessor for HostingScrollView();
  type metadata accessor for External<CGSize>(0, &lazy cache variable for type metadata for External<HostingScrollView>, (uint64_t (*)(uint64_t))type metadata accessor for HostingScrollView, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<HostingScrollView> and conformance External<A>(&lazy protocol witness table cache variable for type External<HostingScrollView> and conformance External<A>, &lazy cache variable for type metadata for External<HostingScrollView>, (uint64_t (*)(uint64_t))type metadata accessor for HostingScrollView);
  id v4 = v2;
  int v5 = Attribute.init<A>(body:value:flags:update:)();

  *(_DWORD *)(a1 + 16) = v5;
}

uint64_t lazy protocol witness table accessor for type External<HostingScrollView> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<CGSize>(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

_DWORD *partial apply for closure #10 in static SystemScrollView._makeView(view:inputs:)(_DWORD *result)
{
  _DWORD *result = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t partial apply for closure #7 in static SystemScrollView._makeView(view:inputs:)(uint64_t result)
{
  *(_DWORD *)(result + 16) = *(_DWORD *)(v1 + 16);
  return result;
}

uint64_t partial apply for closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ButtonActionModifier() - 8);
  char v4 = *(unsigned char *)(v1 + 32);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 34) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  char v6 = *(unsigned char *)(v1 + 33);

  return closure #1 in ButtonActionModifier.PlatformSelectionBehavior.value.getter(a1, v4, v6, v5);
}

uint64_t outlined assign with copy of ToolbarStorage.SearchItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.SearchItem?(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(a1, *(unsigned __int8 *)(v1 + 32) | ((unint64_t)*(unsigned int *)(v1 + 36) << 32), *(unsigned __int8 *)(v1 + 40) | ((unint64_t)*(unsigned int *)(v1 + 44) << 32));
}

uint64_t closure #2 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = a3;
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = HIDWORD(a3);
  v14[0] = a2 & 1;
  int v15 = HIDWORD(a2);
  uint64_t v6 = type metadata accessor for ScrollBehaviorModifier.LayoutRoleFilter();
  uint64_t v20 = v6;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = WitnessTable;
  type metadata accessor for [ScrollableCollection](0, &lazy cache variable for type metadata for Attribute<[ScrollableCollection]>, (uint64_t (*)(uint64_t))type metadata accessor for [ScrollableCollection], MEMORY[0x1E4F4E740]);
  uint64_t v9 = v8;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v19, v6, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v10);
  type metadata accessor for ScrollBehaviorModifier.ScrollBehaviorProvider();
  *(_DWORD *)(a1 + 4) = v13;
  v14[0] = v3 & 1;
  int v15 = v5;
  uint64_t v17 = v6;
  uint64_t v18 = WitnessTable;
  uint64_t result = _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v16, v6, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v11);
  *(_DWORD *)(a1 + 8) = v13;
  return result;
}

uint64_t type metadata accessor for ScrollBehaviorModifier.ScrollBehaviorProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ScrollBehaviorModifier.LayoutRoleFilter()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>()
{
  if (!lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>)
  {
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(255, &lazy cache variable for type metadata for TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for TupleToolbarContent);
    unint64_t v0 = type metadata accessor for ToolbarModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>);
    }
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(a1, *(uint64_t (**)(void))(v1 + 32));
}

uint64_t _sxIegn_xytIegnr_SQRzlTRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

uint64_t partial apply for closure #2 in static PrimitiveSelectionContainerModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t result = _ViewOutputs.subscript.getter();
  int v3 = *MEMORY[0x1E4F4E7A0];
  if ((result & 0x100000000) == 0) {
    int v3 = result;
  }
  *(_DWORD *)(a1 + 4) = v3;
  return result;
}

uint64_t type metadata accessor for SwiftUISearchController(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SwiftUISearchController);
}

uint64_t partial apply for closure #2 in static ContainerBackgroundRendererModifier._makeView(modifier:inputs:body:)(uint64_t result)
{
  *(_DWORD *)(result + 8) = *(_DWORD *)(v1 + 32);
  return result;
}

int *protocol witness for SearchFieldStyle.makeBody(configuration:) in conformance ToolbarSearchFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SearchFieldConfiguration(a1, (uint64_t)v6, type metadata accessor for SearchFieldConfiguration);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v6, a2, type metadata accessor for SearchFieldConfiguration);
  uint64_t result = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v11 = a2 + result[5];
  *(void *)uint64_t v11 = KeyPath;
  *(unsigned char *)(v11 + 8) = 0;
  uint64_t v12 = a2 + result[6];
  *(void *)uint64_t v12 = v8;
  *(unsigned char *)(v12 + 8) = 0;
  *(unsigned char *)(a2 + result[7]) = 0;
  uint64_t v13 = a2 + result[8];
  *(void *)uint64_t v13 = v9;
  *(unsigned char *)(v13 + 8) = 0;
  *(unsigned char *)(a2 + result[9]) = 0;
  return result;
}

uint64_t partial apply for closure #3 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

{
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in Coordinator.menuWillShow(interaction:)()
{
  return swift_unknownObjectWeakAssign();
}

_WORD *assignWithCopy for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v5 = *(int *)(v4 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)a1 + v5, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v25 = *(void *)v7;
      uint64_t v26 = *((void *)v7 + 1);
      char v27 = v7[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v7, v26, v27);
      *(void *)uint64_t v6 = v25;
      *((void *)v6 + 1) = v26;
      v6[16] = v27;
      uint64_t v28 = (void *)*((void *)v7 + 3);
      *((void *)v6 + 3) = v28;
      uint64_t v29 = *((void *)v7 + 5);
      *((void *)v6 + 4) = *((void *)v7 + 4);
      *((void *)v6 + 5) = v29;
      id v30 = v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v9 = *(void *)v7;
        uint64_t v10 = *((void *)v7 + 1);
        uint64_t v11 = *((void *)v7 + 2);
        uint64_t v12 = *((void *)v7 + 3);
        char v13 = v7[34];
        __int16 v14 = *((_WORD *)v7 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v7, v10, v11, v12, v14, v13);
        *(void *)uint64_t v6 = v9;
        *((void *)v6 + 1) = v10;
        *((void *)v6 + 2) = v11;
        *((void *)v6 + 3) = v12;
        *((_WORD *)v6 + 16) = v14;
        v6[34] = v13;
        uint64_t v15 = *((void *)v7 + 5);
        uint64_t v16 = *((void *)v7 + 6);
        uint64_t v17 = *((void *)v7 + 7);
        uint64_t v18 = *((void *)v7 + 8);
        LOBYTE(v12) = v7[74];
        __int16 v19 = *((_WORD *)v7 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v19, v12);
        *((void *)v6 + 5) = v15;
        *((void *)v6 + 6) = v16;
        *((void *)v6 + 7) = v17;
        *((void *)v6 + 8) = v18;
        *((_WORD *)v6 + 36) = v19;
        v6[74] = v12;
        uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v21 = &v6[v20];
        uint64_t v22 = &v7[v20];
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v31 = *((void *)v7 + 1);
      *(void *)uint64_t v6 = *(void *)v7;
      *((void *)v6 + 1) = v31;
    }
    swift_retain();
    goto LABEL_8;
  }
  return a1;
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Data>>, &lazy cache variable for type metadata for PropertyListTransform<Data>, MEMORY[0x1E4F277C0]);
  uint64_t result = swift_allocObject();
  *a5 = a3;
  a5[1] = a4;
  a5[2] = 0;
  a5[3] = 0;
  a5[4] = a1;
  a5[5] = a2;
  a5[6] = 0;
  a5[7] = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<String>>, &lazy cache variable for type metadata for PropertyListTransform<String>, MEMORY[0x1E4FBB1A0]);
  uint64_t result = swift_allocObject();
  *a5 = a3;
  a5[1] = a4;
  a5[2] = 0;
  a5[3] = 0;
  a5[4] = a1;
  a5[5] = a2;
  a5[6] = 0;
  a5[7] = result;
  return result;
}

void type metadata accessor for TransformBox<PropertyListTransform<Bool>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for PropertyListTransform<Bool>(255, a3, a4, (uint64_t (*)(void, uint64_t))type metadata accessor for PropertyListTransform);
    unint64_t v5 = type metadata accessor for TransformBox();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance HelpStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

BOOL static CoreSheetPresentationModifier._tracksEnvironmentDependencies.getter()
{
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

uint64_t base witness table accessor for CustomCombineIdentifierConvertible in ActionDispatcherSubscriber<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = *a1;
  if (*a4 != -1) {
    swift_once();
  }
  uint64_t v9 = *a5;
  swift_bridgeObjectRetain();
  char v10 = a6(v8, v9);
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t getEnumTagSinglePayload for Label(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

_DWORD *initializeWithCopy for LazyTransition(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  unsigned int v6 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 8) & ~v9;
  unint64_t v11 = (v9 + 8 + (v4 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  swift_retain();
  v8(v10, v11, v7);
  return a1;
}

uint64_t partial apply for closure #2 in NavigationSplitCoordinator.updateSplitViewController(_:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:navigationEventHandlers:columnVisibility:sidebar:content:detail:parameters:splitViewControllerProxyStorage:)()
{
  return closure #2 in NavigationSplitCoordinator.updateSplitViewController(_:environment:transaction:seeds:wantsTransparentBackgroundWhenCollapsed:containerWantsTransparentBackground:navigationEventHandlers:columnVisibility:sidebar:content:detail:parameters:splitViewControllerProxyStorage:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

uint64_t protocol witness for Rule.value.getter in conformance _TabViewValue<A, B>.Init2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _TabViewValue.Init2.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 32), a2);
}

uint64_t type metadata accessor for AnyFallbackDelegateBox()
{
  return self;
}

void *type metadata accessor for ActionsModifier()
{
  return &unk_1ED418F28;
}

ValueMetadata *type metadata accessor for AnyNavigationLinkPresentedValue()
{
  return &type metadata for AnyNavigationLinkPresentedValue;
}

ValueMetadata *type metadata accessor for FoundationProgressView()
{
  return &type metadata for FoundationProgressView;
}

ValueMetadata *type metadata accessor for FormPresentationSizing()
{
  return &type metadata for FormPresentationSizing;
}

ValueMetadata *type metadata accessor for _BackdropGroupEffect()
{
  return &type metadata for _BackdropGroupEffect;
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance PlatformViewChild<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static PlatformViewChild.willRemove(attribute:)(a1, a2, a3, MEMORY[0x1E4F3FD00]);
}

uint64_t protocol witness for static InvalidatableAttribute.willInvalidate(attribute:) in conformance PlatformViewChild<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static PlatformViewChild.willRemove(attribute:)(a1, a2, a3, MEMORY[0x1E4F3FCF8]);
}

uint64_t static PlatformViewChild.willRemove(attribute:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  AGGraphGetAttributeInfo();
  uint64_t v5 = swift_retain();
  a4(v5);

  return swift_release();
}

uint64_t type metadata completion function for LazyState.Storage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

double key path getter for EnvironmentValues.editMode : EnvironmentValues@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized FloatingPoint.isAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  if ((~*(void *)&a3 & 0x7FF0000000000000) == 0 || (~*(void *)&a1 & 0x7FF0000000000000) == 0) {
    return specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)();
  }
  double v5 = fabs(a3);
  double v6 = fabs(a1);
  if (v5 <= v6) {
    double v5 = v6;
  }
  if (v5 <= 2.22507386e-308) {
    double v5 = 2.22507386e-308;
  }
  return vabdd_f64(a3, a1) < v5 * a2;
}

uint64_t protocol witness for ColorProvider.apply(color:to:) in conformance EmphasizedGroupBackgroundColorProvider()
{
  return ColorProvider._apply(color:to:)();
}

uint64_t UIHostingViewDebugLayer.name.getter()
{
  unint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v3 = objc_msgSend(v0, sel_delegate);
  if (v3)
  {
    id v4 = v3;
    swift_getObjectType();
    uint64_t v5 = swift_conformsToProtocol2();
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v5) {
      id v7 = v4;
    }
    else {
      id v7 = 0;
    }
    if (v7)
    {
      uint64_t v8 = swift_getObjectType();
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 32))(v8, v6);
      uint64_t v11 = v10;
      swift_unknownObjectRelease();
      if (v11) {
        return v9;
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  v15.receiver = v1;
  v15.super_class = ObjectType;
  id v12 = objc_msgSendSuper2(&v15, sel_name);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = v12;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v9;
}

uint64_t _UIHostingView.debugName.getter()
{
  unint64_t v1 = v0;
  swift_getObjectType();
  id v2 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  id v3 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x8000000188327A80);
  id v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  if (v4)
  {
    uint64_t v5 = (void *)MEMORY[0x18C115780](0xD000000000000019, 0x8000000188342270);
    id v6 = objc_msgSend(v4, sel_stringForKey_, v5);

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  String.lowercased()();
  swift_bridgeObjectRelease();
  uint64_t v7 = 0;
  while (1)
  {
    Swift::String_optional v9 = String.Iterator.next()();
    if (!v9.value._object) {
      break;
    }
    if (v9.value._countAndFlagsBits == 42 && v9.value._object == (void *)0xE100000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v7 = -1;
    }
    else if (v9.value._countAndFlagsBits == 117 && v9.value._object == (void *)0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      v7 |= 1uLL;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        v7 |= 1uLL;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
  uint64_t v10 = _typeName(_:qualified:)();
  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18834BB80;
  *(void *)(v11 + 56) = type metadata accessor for _UIHostingView();
  *(void *)(v11 + 64) = swift_getWitnessTable();
  *(void *)(v11 + 32) = v1;
  id v12 = v1;
  uint64_t v13 = String.init(format:_:)();
  objc_super v15 = v14;
  v16._countAndFlagsBits = 10272;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v13;
  v17._object = v15;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = UIHostingViewDebugOptions.debugRepresentation<A>(for:)((uint64_t)v12, v7);
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t assignWithCopy for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  char v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_retain();
  swift_release();
  v7[1] = v8[1];
  v7[2] = v8[2];
  v7[3] = v8[3];
  return a1;
}

unsigned char *initializeWithCopy for SearchCustomScopeBarModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 2] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t initializeWithCopy for ContentShapeResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v5 = *(void **)(a2 + 112);
  uint64_t v4 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v5;
  *(void *)(a1 + 120) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityRepresentationModifier<A>@<X0>(uint64_t a1@<X1>, void (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 16), a4);
}

_UNKNOWN **base witness table accessor for ViewModifier in PortalGroupRendererEffect()
{
  return &protocol witness table for PortalGroupRendererEffect;
}

uint64_t type metadata completion function for UIKitSensoryFeedbackCache()
{
  return swift_initClassMetadata2();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedLabelGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedLabelGroupStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle;
  if (!lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle);
  }
  return result;
}

unsigned char *initializeWithCopy for RelationshipModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  *(void *)((*(void *)(v5 + 48) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in LazyTransition<A>()
{
  return swift_getWitnessTable();
}

uint64_t initializeWithTake for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectWeakTakeInit();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 120 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 120 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t storeEnumTagSinglePayload for LoadingState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DE494C);
}

uint64_t static ResolvedButtonStyleBody._makeViewList(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *a1;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v23 = a2[7];
  uint64_t v25 = a2[6];
  int v10 = *((_DWORD *)a2 + 16);
  uint64_t v11 = a2[9];
  char v12 = *((unsigned char *)a2 + 80);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v13 = v41;
  uint64_t v14 = v42;
  char v15 = v43;
  int v16 = HIDWORD(v43);
  uint64_t v41 = v6;
  LODWORD(v42) = v7;
  long long v44 = *(_OWORD *)(a2 + 3);
  uint64_t v43 = v8;
  uint64_t v45 = v9;
  *(void *)&long long v46 = v25;
  *((void *)&v46 + 1) = v23;
  int v47 = v10;
  uint64_t v48 = v11;
  char v49 = v12;
  int v20 = v16;
  int v21 = v5;
  int v37 = v5;
  uint64_t v22 = v14;
  uint64_t v24 = v13;
  uint64_t v27 = v13;
  uint64_t v28 = v14;
  char v26 = v15;
  LOBYTE(v29) = v15;
  HIDWORD(v29) = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)((uint64_t)v36, (uint64_t)&v38, (uint64_t)&v37, (uint64_t)&v41, (uint64_t)&v27, a3);
  uint64_t v18 = v38;
  uint64_t v19 = v39;
  LOBYTE(v5) = v40;
  swift_getAssociatedTypeWitness();
  uint64_t v27 = v41;
  LODWORD(v28) = v42;
  uint64_t v29 = v43;
  long long v30 = v44;
  uint64_t v31 = v45;
  long long v32 = v46;
  int v33 = v47;
  uint64_t v34 = v48;
  char v35 = v49;
  swift_getAssociatedConformanceWitness();
  static View.makeDebuggableViewList(view:inputs:)();
  if ((v5 & 1) == 0)
  {
    uint64_t v38 = v18;
    uint64_t v39 = v19;
    int v37 = v21;
    uint64_t v27 = v24;
    uint64_t v28 = v22;
    LOBYTE(v29) = v26;
    HIDWORD(v29) = v20;
    type metadata accessor for ResolvedButtonStyleBody();
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return outlined consume of DynamicPropertyCache.Fields.Layout();
}

uint64_t static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(71);
    v8._object = (void *)0x8000000188335070;
    v8._countAndFlagsBits = 0xD000000000000039;
    String.append(_:)(v8);
    v9._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 0x6C63206120736920;
    v10._object = (void *)0xEC0000002E737361;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for ResolvedButtonStyleBody();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(a6 - 8) + 64)) {
      closure #1 in static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)(1, a6);
    }
    AGGraphCreateOffsetAttribute2();
    _GraphValue.value.getter();
    _GraphValue.init(_:)();
    type metadata accessor for ResolvedButtonStyleBody.StyleBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  return result;
}

uint64_t closure #1 in static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for ResolvedButtonStyleBody();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t ResolvedButtonStyleBody.StyleBodyAccessor.updateBody(of:changed:)(uint64_t a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ResolvedButtonStyleBody();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v19 - v12;
  uint64_t Value = AGGraphGetValue();
  char v16 = v15;
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, Value, v10);
  if (a2 & 1) != 0 || (v16)
  {
    v19[3] = a3;
    MEMORY[0x1F4188790](v17);
    *(void *)&v19[-8] = a4;
    *(void *)&v19[-6] = a5;
    *(void *)&v19[-4] = a1;
    *(void *)&v19[-2] = v13;
    type metadata accessor for ResolvedButtonStyleBody.StyleBodyAccessor();
    swift_getWitnessTable();
    BodyAccessor.setBody(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t type metadata accessor for ResolvedButtonStyleBody.StyleBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance CustomProgressView<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration.Sidebar()
{
  return &type metadata for NavigationSplitViewStyleConfiguration.Sidebar;
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration.Content()
{
  return &type metadata for NavigationSplitViewStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for NavigationSplitViewStyleConfiguration.Detail()
{
  return &type metadata for NavigationSplitViewStyleConfiguration.Detail;
}

ValueMetadata *type metadata accessor for LabeledContentStyleConfiguration()
{
  return &type metadata for LabeledContentStyleConfiguration;
}

ValueMetadata *type metadata accessor for SharingPickerHostModifier()
{
  return &type metadata for SharingPickerHostModifier;
}

ValueMetadata *type metadata accessor for SectionActionsTraitKey()
{
  return &type metadata for SectionActionsTraitKey;
}

ValueMetadata *type metadata accessor for PlainListStyleContext()
{
  return &type metadata for PlainListStyleContext;
}

ValueMetadata *type metadata accessor for InsetListStyleContext()
{
  return &type metadata for InsetListStyleContext;
}

ValueMetadata *type metadata accessor for IsSharingPickerHost()
{
  return &type metadata for IsSharingPickerHost;
}

ValueMetadata *type metadata accessor for ListStackBehavior()
{
  return &type metadata for ListStackBehavior;
}

ValueMetadata *type metadata accessor for SearchAdjustment()
{
  return &type metadata for SearchAdjustment;
}

ValueMetadata *type metadata accessor for AnyNavigationSplitVisibility()
{
  return &type metadata for AnyNavigationSplitVisibility;
}

ValueMetadata *type metadata accessor for ActionSheet.Presentation.Key()
{
  return &type metadata for ActionSheet.Presentation.Key;
}

uint64_t partial apply for closure #1 in MatchedTransitionSourceModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in MatchedTransitionSourceModifier.body(content:)(a1);
}

uint64_t UIKitStatusBarBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return $defer #1 <A>() in UIKitStatusBarBridge.preferencesDidChange(_:)();
  }
  swift_bridgeObjectRetain();
  char v6 = 0;
  uint64_t v7 = v5 - 1;
  Swift::String v8 = (int *)(v4 + 48);
  while ((v6 & 1) != 0)
  {
    if (!v7) {
      goto LABEL_13;
    }
    char v6 = 1;
LABEL_5:
    --v7;
    v8 += 6;
  }
  int v10 = *v8;
  uint64_t v19 = v3;
  PreferenceValues.seed<A>(for:)(&v18);
  if (v10 == -1 || (int v11 = v18, v18 == -1))
  {
    if (!v7)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    BOOL v9 = 0;
    goto LABEL_4;
  }
  BOOL v9 = v10 == v18;
  if (v7)
  {
LABEL_4:
    char v6 = !v9;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  if (v10 != v11)
  {
LABEL_14:
    uint64_t v18 = v3;
    PreferenceValues.subscript.getter();
    char v12 = v19;
    int v13 = v19;
    int v14 = BYTE1(v19) & 1;
    uint64_t v18 = v3;
    PreferenceValues.subscript.getter();
    if (v13 == 2) {
      Swift::Bool v15 = 0;
    }
    else {
      Swift::Bool v15 = v14;
    }
    *(unsigned char *)(v2 + 17) = v19;
    char v16 = v12 & 1;
    if (v13 == 2) {
      char v16 = 2;
    }
    *(unsigned char *)(v2 + 16) = v16;
    UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(v15, 0);
  }
  return $defer #1 <A>() in UIKitStatusBarBridge.preferencesDidChange(_:)();
}

uint64_t $defer #1 <A>() in UIKitStatusBarBridge.preferencesDidChange(_:)()
{
  return swift_endAccess();
}

Swift::Void __swiftcall UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(Swift::Bool isAnimated, Swift::Bool shouldDefer)
{
  if (MEMORY[0x18C119DF0](v2 + 40, shouldDefer))
  {
    swift_allocObject();
    _UIHostingView.viewController.getter();
  }
  __break(1u);
}

BOOL closure #1 in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  uint64_t v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, sel_setNeedsStatusBarAppearanceUpdate);
  }
  return v3 == 0;
}

uint64_t BarAppearanceBridge.preferencesDidChange(_:updateContext:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  outlined init with copy of BarAppearanceBridge.UpdateContext(a2, (uint64_t)&v28);
  uint64_t v5 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)&v28, v5);
  swift_endAccess();
  uint64_t v6 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker;
  swift_beginAccess();
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(*(void *)v6 + 16);
  if (!v8)
  {
LABEL_17:
    Swift::Bool v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates);
LABEL_18:
    uint64_t v25 = *v15;
    *(void *)&v27[0] = v4;
    swift_beginAccess();
    VersionSeedSetTracker.updateSeeds(to:)();
    swift_endAccess();
    if ((*(unsigned char *)v15 & 2) != 0) {
      BarAppearanceBridge.platformUpdateNavigationAdaptor()();
    }
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    swift_beginAccess();
    outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)&v28, v5);
    swift_endAccess();
    *Swift::Bool v15 = 0;
    return v25;
  }
  swift_bridgeObjectRetain();
  char v9 = 0;
  uint64_t v10 = v8 - 1;
  int v11 = (int *)(v7 + 48);
  while ((v9 & 1) != 0)
  {
    if (!v10) {
      goto LABEL_13;
    }
    char v9 = 1;
LABEL_5:
    --v10;
    v11 += 6;
  }
  int v13 = *v11;
  *(void *)&long long v28 = v4;
  PreferenceValues.seed<A>(for:)(v27);
  if (v13 == -1 || (int v14 = v27[0], LODWORD(v27[0]) == -1))
  {
    if (!v10)
    {
LABEL_13:
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    BOOL v12 = 0;
    goto LABEL_4;
  }
  BOOL v12 = v13 == LODWORD(v27[0]);
  if (v10)
  {
LABEL_4:
    char v9 = !v12;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  if (v13 == v14) {
    goto LABEL_17;
  }
LABEL_14:
  Swift::Bool v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates);
  *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) |= 2uLL;
  *(void *)&v27[0] = v4;
  PreferenceValues.subscript.getter();
  uint64_t v16 = v31;
  char v17 = BYTE8(v31);
  uint64_t v18 = v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage;
  uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage);
  uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 8);
  uint64_t v21 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 16);
  uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 24);
  uint64_t v23 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 32);
  long long v24 = v29;
  *(_OWORD *)uint64_t v18 = v28;
  *(_OWORD *)(v18 + 16) = v24;
  *(_OWORD *)(v18 + 32) = v30;
  *(void *)(v18 + 48) = v16;
  *(unsigned char *)(v18 + 56) = v17;
  outlined consume of NavigationTitleStorage?(v19, v20, v21, v22, v23);
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v5, (uint64_t)v27);
  if (*(void *)&v27[0])
  {
    outlined init with take of BarAppearanceBridge.UpdateContext(v27, (uint64_t)&v28);
    closure #1 in BarAppearanceBridge.updateNavigationBar(updating:preferences:)((void **)&v28, v3, v4);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v28);
    *(void *)&long long v28 = v4;
    BarAppearanceBridge.updateConfigurations(_:)((uint64_t *)&v28);
    BarAppearanceBridge.updateBarsToConfiguration()();
    goto LABEL_18;
  }
  outlined destroy of ToolbarPlacement.Role?((uint64_t)v27, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t VersionSeedSetTracker.updateSeeds(to:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = (char *)v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v4 = 0;
    for (unint64_t i = 0; i != v2; ++i)
    {
      PreferenceValues.seed<A>(for:)(&v7);
      if (i >= *((void *)v3 + 2))
      {
        __break(1u);
        goto LABEL_9;
      }
      *(_DWORD *)&v3[v4 + 48] = v7;
      v4 += 24;
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v0 = (uint64_t)v3;
  }
  return result;
}

uint64_t PreferenceValues.seed<A>(for:)@<X0>(_DWORD *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for PreferenceValues.Value();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  v8[1] = *v1;
  PreferenceValues.subscript.getter();
  *a1 = *(_DWORD *)&v6[*(int *)(v3 + 28)];
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t destroy for ToolbarStorage(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t outlined assign with take of BarAppearanceBridge.UpdateContext?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Published<Visibility>(0, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ToolbarPlacement.Role?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for Published<Visibility>(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of BarAppearanceBridge.UpdateContext?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Published<Visibility>(0, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Published<Visibility>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t destroy for NavigationTitleStorage(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 32) != 1) {
    swift_release();
  }

  return swift_release();
}

uint64_t outlined init with copy of BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for BarAppearanceBridge.UpdateContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  unint64_t v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 16);
  int v7 = (_OWORD *)(a2 + 16);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 24);
  id v9 = v4;
  id v10 = v5;
  if (v8 == 2)
  {
    *uint64_t v6 = *v7;
    *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v7 + 9);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  }
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v11 = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t BarAppearanceBridge.updateBarsToConfiguration()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v2 + 16))
  {
    type metadata accessor for Published<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 16) = xmmword_188382660;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    *(_OWORD *)(v4 + 80) = 0u;
    *(void *)(v4 + 96) = 5;
    *(_OWORD *)(v4 + 104) = 0u;
    *(_OWORD *)(v4 + 120) = 0u;
    *(void *)(v4 + 136) = 3;
    *(_OWORD *)(v4 + 144) = 0u;
    *(_OWORD *)(v4 + 160) = 0u;
    *(_OWORD *)(v4 + 176) = xmmword_188382670;
    uint64_t v5 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
    uint64_t v57 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates;
    uint64_t v58 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    uint64_t v59 = v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
    swift_beginAccess();
    for (uint64_t i = 32; i != 192; i += 40)
    {
      outlined init with copy of ToolbarPlacement.Role(v4 + i, (uint64_t)v75);
      uint64_t v7 = *(void *)(v1 + v5);
      swift_bridgeObjectRetain();
      char v8 = specialized Set.contains(_:)((uint64_t)v75, v7);
      swift_bridgeObjectRelease();
      if (v8)
      {
        v63[0] = 0;
        long long v61 = 0u;
        long long v62 = 0u;
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v75, (uint64_t)&v64);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)&v61, (uint64_t)&v67);
        switch((uint64_t)v66)
        {
          case 0:
            uint64_t v9 = *((void *)&v68 + 1);
            swift_bridgeObjectRetain();
            if (v9) {
              goto LABEL_25;
            }
            goto LABEL_28;
          case 1:
            uint64_t v13 = *((void *)&v68 + 1);
            swift_bridgeObjectRetain();
            if (v13 == 1) {
              goto LABEL_28;
            }
            goto LABEL_25;
          case 2:
            uint64_t v11 = *((void *)&v68 + 1);
            swift_bridgeObjectRetain();
            if (v11 == 2) {
              goto LABEL_28;
            }
            goto LABEL_25;
          case 3:
            uint64_t v12 = *((void *)&v68 + 1);
            swift_bridgeObjectRetain();
            if (v12 == 3) {
              goto LABEL_28;
            }
            goto LABEL_25;
          case 4:
            uint64_t v10 = *((void *)&v68 + 1);
            swift_bridgeObjectRetain();
            if (v10 == 4) {
              goto LABEL_28;
            }
            goto LABEL_25;
          case 5:
            uint64_t v14 = *((void *)&v68 + 1);
            swift_bridgeObjectRetain();
            if (v14 == 5) {
              goto LABEL_28;
            }
            goto LABEL_25;
          case 6:
            uint64_t v15 = *((void *)&v68 + 1);
            swift_bridgeObjectRetain();
            if (v15 != 6) {
              goto LABEL_25;
            }
            goto LABEL_28;
          default:
            outlined init with copy of ToolbarPlacement.Role((uint64_t)&v64, (uint64_t)v73);
            if (*((void *)&v68 + 1) < 7uLL)
            {
              swift_bridgeObjectRetain();
              outlined destroy of AnyHashable((uint64_t)v73);
LABEL_25:
              outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)&v64);
              goto LABEL_26;
            }
            long long v70 = v67;
            long long v71 = v68;
            uint64_t v72 = v69;
            swift_bridgeObjectRetain();
            char v18 = MEMORY[0x18C1174E0](v73, &v70);
            outlined destroy of AnyHashable((uint64_t)&v70);
            outlined destroy of AnyHashable((uint64_t)v73);
            if ((v18 & 1) == 0)
            {
              outlined destroy of ToolbarPlacement.Role((uint64_t)&v64);
LABEL_26:
              outlined destroy of ToolbarPlacement.Role((uint64_t)&v61);
              uint64_t v16 = swift_allocObject();
              *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
              outlined init with copy of ToolbarPlacement.Role((uint64_t)v75, v16 + 32);
              uint64_t v17 = specialized Set.init(_nonEmptyArrayLiteral:)(v16);
              swift_setDeallocating();
              goto LABEL_29;
            }
LABEL_28:
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v64);
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v61);
            uint64_t v19 = (_OWORD *)swift_allocObject();
            v19[1] = xmmword_18834BB70;
            v19[3] = 0u;
            _DWORD v19[4] = 0u;
            v19[2] = 0u;
            v19[5] = 0u;
            v19[6] = xmmword_188382680;
            uint64_t v17 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)v19);
            swift_setDeallocating();
LABEL_29:
            swift_arrayDestroy();
            swift_deallocClassInstance();
            swift_bridgeObjectRelease();
            if (*(void *)(v17 + 16))
            {
              outlined init with copy of ToolbarPlacement.Role((uint64_t)v75, (uint64_t)v73);
              switch(v74)
              {
                case 0:
                  if (*(unsigned char *)(v1 + v58) != 1) {
                    goto LABEL_40;
                  }
                  outlined init with copy of BarAppearanceBridge.UpdateContext?(v59, (uint64_t)&v64);
                  if ((void)v64)
                  {
                    outlined init with copy of HostingControllerOverrides((uint64_t)&v65, (uint64_t)&v61);
                    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v64);
                    id v20 = (id)MEMORY[0x18C119DF0](v63);
                    outlined destroy of HostingControllerOverrides((uint64_t)&v61);
                    if (v20) {
                      goto LABEL_45;
                    }
                  }
                  else
                  {
                    outlined destroy of ToolbarPlacement.Role?((uint64_t)&v64, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
                  }
                  outlined init with copy of BarAppearanceBridge.UpdateContext?(v59, (uint64_t)&v64);
                  if (!(void)v64)
                  {
                    outlined destroy of ToolbarPlacement.Role?((uint64_t)&v64, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
                    goto LABEL_40;
                  }
                  uint64_t v21 = *((void *)&v64 + 1);
                  id v20 = *((id *)&v64 + 1);
                  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v64);
                  if (!v21) {
                    goto LABEL_40;
                  }
LABEL_45:
                  unsigned __int8 v22 = BarAppearanceBridge.updateNavigationAppearances(navigationController:)(v20);
                  outlined init with copy of BarAppearanceBridge.UpdateContext?(v59, (uint64_t)&v61);
                  if (!(void)v61)
                  {
LABEL_105:
                    outlined destroy of ToolbarPlacement.Role?((uint64_t)&v61, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
                    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
                    __break(1u);
                    return result;
                  }
                  outlined init with take of BarAppearanceBridge.UpdateContext(&v61, (uint64_t)&v64);
                  closure #1 in BarAppearanceBridge.updateNavigationVisibilities(navigationController:)(v20, (void **)&v64, v1, (char *)&v61);
                  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v64);

                  if ((v61 & v22 & 1) == 0) {
                    goto LABEL_40;
                  }
LABEL_47:
                  swift_beginAccess();
                  specialized Set._subtract<A>(_:)(v17);
                  swift_endAccess();
                  swift_bridgeObjectRelease();
                  v63[0] = 0;
                  long long v61 = 0u;
                  long long v62 = 0u;
                  outlined init with copy of ToolbarPlacement.Role((uint64_t)v75, (uint64_t)&v64);
                  outlined init with copy of ToolbarPlacement.Role((uint64_t)&v61, (uint64_t)&v67);
                  switch((uint64_t)v66)
                  {
                    case 0:
                      if (*((void *)&v68 + 1)) {
                        goto LABEL_4;
                      }
                      goto LABEL_64;
                    case 1:
                      if (*((void *)&v68 + 1) == 1) {
                        goto LABEL_64;
                      }
                      goto LABEL_4;
                    case 2:
                      if (*((void *)&v68 + 1) == 2) {
                        goto LABEL_64;
                      }
                      goto LABEL_4;
                    case 3:
                      if (*((void *)&v68 + 1) == 3) {
                        goto LABEL_64;
                      }
                      goto LABEL_4;
                    case 4:
                      if (*((void *)&v68 + 1) == 4) {
                        goto LABEL_64;
                      }
                      goto LABEL_4;
                    case 5:
                      if (*((void *)&v68 + 1) == 5) {
                        goto LABEL_64;
                      }
                      goto LABEL_4;
                    case 6:
                      if (*((void *)&v68 + 1) == 6) {
                        goto LABEL_64;
                      }
                      goto LABEL_4;
                    default:
                      outlined init with copy of ToolbarPlacement.Role((uint64_t)&v64, (uint64_t)v73);
                      if (*((void *)&v68 + 1) < 7uLL)
                      {
                        outlined destroy of AnyHashable((uint64_t)v73);
LABEL_4:
                        outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)&v64);
                        goto LABEL_5;
                      }
                      long long v70 = v67;
                      long long v71 = v68;
                      uint64_t v72 = v69;
                      char v23 = MEMORY[0x18C1174E0](v73, &v70);
                      outlined destroy of AnyHashable((uint64_t)&v70);
                      outlined destroy of AnyHashable((uint64_t)v73);
                      if ((v23 & 1) == 0)
                      {
                        outlined destroy of ToolbarPlacement.Role((uint64_t)&v64);
LABEL_5:
                        outlined destroy of ToolbarPlacement.Role((uint64_t)&v61);
                        goto LABEL_6;
                      }
LABEL_64:
                      outlined destroy of ToolbarPlacement.Role((uint64_t)&v64);
                      outlined destroy of ToolbarPlacement.Role((uint64_t)&v61);
                      outlined destroy of ToolbarPlacement.Role((uint64_t)v75);
                      *(void *)(v1 + v57) |= 2uLL;
                      break;
                  }
                  break;
                case 3:
                  if (BarAppearanceBridge.updateBottomBarConfiguration()()) {
                    goto LABEL_47;
                  }
                  goto LABEL_40;
                case 5:
                  if (BarAppearanceBridge.updateTabBarConfiguration()()) {
                    goto LABEL_47;
                  }
                  goto LABEL_40;
                case 6:
                  goto LABEL_40;
                default:
                  outlined destroy of ToolbarPlacement.Role((uint64_t)v73);
                  goto LABEL_40;
              }
            }
            else
            {
LABEL_40:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v75);
              swift_bridgeObjectRelease();
            }
            break;
        }
      }
      else
      {
LABEL_6:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v75);
      }
    }
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v24 = swift_bridgeObjectRetain();
    uint64_t v25 = specialized Sequence.compactMap<A>(_:)(v24);
    swift_bridgeObjectRelease();
    uint64_t v26 = *(void *)(v25 + 16);
    if (v26)
    {
      uint64_t v27 = v25 + 32;
      long long v60 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
      swift_beginAccess();
      uint64_t v29 = v58;
      uint64_t v28 = v59;
      while (2)
      {
        outlined init with copy of AnyHashable(v27, (uint64_t)v75);
        outlined init with copy of AnyHashable((uint64_t)v75, (uint64_t)v73);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v73, (uint64_t)&v70);
        switch(*((void *)&v71 + 1))
        {
          case 0:
            if (*(unsigned char *)(v1 + v29) != 1) {
              goto LABEL_69;
            }
            outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v64);
            if ((void)v64)
            {
              outlined init with copy of HostingControllerOverrides((uint64_t)&v65, (uint64_t)&v61);
              outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v64);
              id v30 = (id)MEMORY[0x18C119DF0](v63);
              outlined destroy of HostingControllerOverrides((uint64_t)&v61);
              if (v30)
              {
LABEL_92:
                char v46 = BarAppearanceBridge.updateNavigationAppearances(navigationController:)(v30);
                outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v61);
                if (!(void)v61) {
                  goto LABEL_105;
                }
                outlined init with take of BarAppearanceBridge.UpdateContext(&v61, (uint64_t)&v64);
                closure #1 in BarAppearanceBridge.updateNavigationVisibilities(navigationController:)(v30, (void **)&v64, v1, (char *)&v61);
                outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v64);

                char v31 = v61 & v46;
                goto LABEL_94;
              }
            }
            else
            {
              outlined destroy of ToolbarPlacement.Role?((uint64_t)&v64, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
            }
            outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v64);
            if (!(void)v64) {
              goto LABEL_96;
            }
            uint64_t v45 = *((void *)&v64 + 1);
            id v30 = *((id *)&v64 + 1);
            outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v64);
            if (!v45) {
              goto LABEL_69;
            }
            goto LABEL_92;
          case 3:
            char v31 = BarAppearanceBridge.updateBottomBarConfiguration()();
LABEL_94:
            outlined destroy of ToolbarPlacement.Role((uint64_t)v73);
            if (v31) {
              goto LABEL_95;
            }
            goto LABEL_70;
          case 5:
            outlined init with copy of BarAppearanceBridge.UpdateContext?(v28, (uint64_t)&v64);
            if (!(void)v64)
            {
LABEL_96:
              outlined destroy of ToolbarPlacement.Role?((uint64_t)&v64, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
              goto LABEL_69;
            }
            id v32 = (id)v64;
            outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v64);
            id v33 = objc_msgSend(v32, sel_tabBarController);
            if (!v33)
            {

              goto LABEL_69;
            }
            uint64_t v34 = v33;
            uint64_t v35 = *v60;
            uint64_t v65 = 0;
            long long v64 = 0uLL;
            long long v66 = xmmword_18835ED10;
            if (!*(void *)(v35 + 16)) {
              goto LABEL_98;
            }
            swift_bridgeObjectRetain();
            uint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v64);
            if ((v37 & 1) == 0)
            {
              swift_bridgeObjectRelease();
LABEL_98:
              outlined destroy of ToolbarPlacement.Role((uint64_t)&v64);

LABEL_69:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v73);
              goto LABEL_70;
            }
            uint64_t v56 = v25;
            uint64_t v38 = (unsigned __int8 *)(*(void *)(v35 + 56) + 80 * v36);
            int v39 = *v38;
            uint64_t v40 = *((void *)v38 + 1);
            uint64_t v41 = *((void *)v38 + 2);
            unsigned __int8 v55 = v38[24];
            uint64_t v54 = *((void *)v38 + 4);
            unsigned __int8 v53 = v38[40];
            uint64_t v52 = *((void *)v38 + 6);
            __int16 v50 = *(_WORD *)(v38 + 57);
            unsigned __int8 v51 = v38[56];
            uint64_t v42 = *((void *)v38 + 8);
            unsigned __int8 v49 = v38[72];
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v64);
            LOBYTE(v64) = v39;
            *((void *)&v64 + 1) = v40;
            uint64_t v65 = v41;
            LOBYTE(v66) = v55;
            *((void *)&v66 + 1) = v54;
            LOBYTE(v67) = v53;
            *((void *)&v67 + 1) = v52;
            LOBYTE(v68) = v51;
            *(_WORD *)((char *)&v68 + 1) = v50;
            *((void *)&v68 + 1) = v42;
            LOBYTE(v69) = v49;
            BarAppearanceBridge.updateTabBarAppearance(_:tabBarController:)(&v64, v34);
            if (v42) {
              double v43 = 0.3;
            }
            else {
              double v43 = 0.0;
            }
            if (v39 == 2)
            {
              if (v42) {
                int v44 = 7;
              }
              else {
                int v44 = 0;
              }
            }
            else if (v42)
            {
              int v44 = 3;
            }
            else
            {
              int v44 = 0;
            }
            uint64_t v47 = swift_allocObject();
            *(void *)(v47 + 16) = v34;
            *(_DWORD *)(v47 + 24) = v44;
            *(double *)(v47 + 32) = v43;
            id v48 = v34;
            onNextMainRunLoop(do:)();
            uint64_t v29 = v58;
            uint64_t v28 = v59;
            uint64_t v25 = v56;
            swift_release();
            swift_release();
            swift_release();

            swift_release();
            outlined destroy of ToolbarPlacement.Role((uint64_t)v73);
LABEL_95:
            outlined init with copy of AnyHashable((uint64_t)v75, (uint64_t)&v61);
            swift_beginAccess();
            specialized Set._Variant.remove(_:)((uint64_t)&v61, (uint64_t)&v64);
            swift_endAccess();
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v61);
            outlined destroy of ToolbarPlacement.Role?((uint64_t)&v64, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
LABEL_70:
            outlined destroy of AnyHashable((uint64_t)v75);
            v27 += 40;
            if (!--v26) {
              return swift_bridgeObjectRelease();
            }
            continue;
          case 6:
            goto LABEL_69;
          default:
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v70);
            goto LABEL_69;
        }
      }
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(uint64_t a1)
{
  type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)()
{
  if (!lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
    }
  }
}

Swift::Void __swiftcall BarAppearanceBridge.platformUpdateNavigationAdaptor()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)v5);
  if (!v5[0]) {
    goto LABEL_7;
  }
  id v2 = v5[0];
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v5);
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)v5);
  if (!v5[0])
  {

LABEL_7:
    outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v5, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return;
  }
  uint64_t v3 = v5[9];
  swift_bridgeObjectRetain();
  uint64_t updated = outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v5);
  if (v3[2])
  {
    MEMORY[0x1F4188790](updated);
    static Update.ensure<A>(_:)();
  }

  swift_bridgeObjectRelease();
}

uint64_t BarAppearanceBridge.updateConfigurations(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v39 = *a1;
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext);
  swift_beginAccess();
  if (!*v3)
  {
    type metadata accessor for Published<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBBE00]);
    uint64_t v7 = 7;
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_188382650;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(void *)(v6 + 96) = 2;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(void *)(v6 + 136) = 3;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(void *)(v6 + 176) = 4;
    *(_OWORD *)(v6 + 184) = 0u;
    *(_OWORD *)(v6 + 200) = 0u;
    *(void *)(v6 + 216) = 5;
    *(_OWORD *)(v6 + 224) = 0u;
    *(_OWORD *)(v6 + 240) = 0u;
    *(void *)(v6 + 256) = 6;
    *(_OWORD *)(v6 + 264) = 0u;
    *(_OWORD *)(v6 + 280) = 0u;
    *(void *)(v6 + 296) = 1;
    *(void *)(v6 + 304) = 0;
    goto LABEL_5;
  }
  outlined init with copy of BarAppearanceBridge.UpdateContext((uint64_t)v3, (uint64_t)&v51);
  type metadata accessor for Published<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_188382650;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(void *)(v4 + 96) = 2;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(void *)(v4 + 136) = 3;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(void *)(v4 + 176) = 4;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(void *)(v4 + 216) = 5;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(void *)(v4 + 256) = 6;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(void *)(v4 + 296) = 1;
  *(void *)(v4 + 304) = 0;
  *(void *)&long long v66 = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v5);
  uint64_t v6 = v66;
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v51);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
LABEL_5:
    uint64_t v8 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
    double v43 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
    uint64_t v36 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars);
    uint64_t v9 = v6 + 32;
    uint64_t v37 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
    uint64_t v38 = v1;
    do
    {
      outlined init with copy of ToolbarPlacement.Role(v9, (uint64_t)v65);
      uint64_t v10 = *(void *)(v2 + v8);
      swift_bridgeObjectRetain();
      char v11 = specialized Set.contains(_:)((uint64_t)v65, v10);
      swift_bridgeObjectRelease();
      if (v11)
      {
        *(void *)&v47[0] = v39;
        PreferenceValues.configuration(toolbarPlacement:)((uint64_t)v65, (uint64_t)&v51);
        long long v68 = v53;
        v69[0] = v54[0];
        *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)((char *)v54 + 9);
        long long v66 = v51;
        long long v67 = v52;
        uint64_t v45 = v51;
        uint64_t v12 = v52;
        uint64_t v44 = BYTE8(v52);
        uint64_t v13 = v53;
        uint64_t v41 = *((void *)&v51 + 1);
        uint64_t v42 = BYTE8(v53);
        uint64_t v40 = *(void *)&v54[0];
        uint64_t v14 = BYTE8(v54[0]);
        uint64_t v15 = BYTE9(v54[0]);
        uint64_t v16 = BYTE10(v54[0]);
        uint64_t v17 = *(void *)&v54[1];
        char v18 = BYTE8(v54[1]);
        swift_beginAccess();
        uint64_t v19 = *v43;
        if (!*(void *)(*v43 + 16)
          || (uint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v65), (v21 & 1) == 0))
        {
          swift_endAccess();
          long long v51 = xmmword_18834BB90;
          long long v52 = 0u;
          long long v53 = 0u;
          memset(v54, 0, 25);
          uint64_t v55 = v45;
          uint64_t v56 = v41;
          uint64_t v57 = v12;
          uint64_t v58 = v44;
          uint64_t v59 = v13;
          uint64_t v60 = v42;
          uint64_t v61 = v40;
          uint64_t v62 = v14 | (v15 << 8) | (v16 << 16);
          uint64_t v63 = v17;
          char v64 = v18;
          outlined retain of ToolbarAppearanceConfiguration((uint64_t)&v66);
          outlined release of (ToolbarAppearanceConfiguration?, ToolbarAppearanceConfiguration?)((uint64_t *)&v51);
          uint64_t v31 = 0;
          uint64_t v46 = 1;
LABEL_14:
          uint64_t v8 = v37;
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v65, (uint64_t)&v51);
          swift_beginAccess();
          outlined retain of ToolbarAppearanceConfiguration((uint64_t)&v66);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v50 = *v43;
          *double v43 = 0x8000000000000000;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v66, (uint64_t)&v51, isUniquelyReferenced_nonNull_native);
          *double v43 = v50;
          swift_bridgeObjectRelease();
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v51);
          swift_endAccess();
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v65, (uint64_t)v47);
          swift_beginAccess();
          char v33 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v49 = *v36;
          *uint64_t v36 = 0x8000000000000000;
          specialized _NativeSet.update(with:isUnique:)((uint64_t)v47, v33, (uint64_t)&v51);
          *uint64_t v36 = v49;
          swift_bridgeObjectRelease();
          swift_endAccess();
          outlined consume of ToolbarAppearanceConfiguration?(v31, v46);
          outlined release of ToolbarAppearanceConfiguration((uint64_t)&v66);
          outlined destroy of ToolbarPlacement.Role?((uint64_t)&v51, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
          outlined destroy of ToolbarPlacement.Role((uint64_t)v65);
          uint64_t v2 = v38;
          goto LABEL_7;
        }
        unsigned __int8 v22 = (unsigned __int8 *)(*(void *)(v19 + 56) + 80 * v20);
        uint64_t v23 = *v22;
        uint64_t v24 = *((void *)v22 + 2);
        uint64_t v46 = *((void *)v22 + 1);
        uint64_t v25 = v22[24];
        uint64_t v26 = *((void *)v22 + 4);
        uint64_t v27 = v22[40];
        uint64_t v28 = *((void *)v22 + 6);
        uint64_t v35 = *((void *)v22 + 8);
        unsigned __int8 v29 = v22[72];
        unint64_t v30 = v22[56] | ((unint64_t)v22[57] << 8) | ((unint64_t)v22[58] << 16);
        swift_endAccess();
        *(void *)&long long v51 = v23;
        *((void *)&v51 + 1) = v46;
        *(void *)&long long v52 = v24;
        *((void *)&v52 + 1) = v25;
        *(void *)&long long v53 = v26;
        *((void *)&v53 + 1) = v27;
        *(void *)&v54[0] = v28;
        *((void *)&v54[0] + 1) = v30;
        *(void *)&v54[1] = v35;
        BYTE8(v54[1]) = v29;
        v47[2] = v68;
        v48[0] = v69[0];
        *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)((char *)v69 + 9);
        v47[0] = v66;
        v47[1] = v67;
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        LOBYTE(v26) = specialized static ToolbarAppearanceConfiguration.== infix(_:_:)((double *)&v51, (double *)v47);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if ((v26 & 1) == 0)
        {
          uint64_t v31 = v23;
          goto LABEL_14;
        }
        outlined destroy of ToolbarPlacement.Role((uint64_t)v65);
        swift_release();
        swift_release();
        swift_release();
        outlined release of ToolbarAppearanceConfiguration((uint64_t)&v66);
        uint64_t v8 = v37;
        uint64_t v2 = v38;
      }
      else
      {
        outlined destroy of ToolbarPlacement.Role((uint64_t)v65);
      }
LABEL_7:
      v9 += 40;
      --v7;
    }
    while (v7);
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined retain of ToolbarAppearanceConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ToolbarAppearanceConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = v16[7] + 80 * v10;

  return outlined assign with take of ToolbarAppearanceConfiguration((uint64_t)a1, v17);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  _OWORD *v17;
  long long v18;
  char v19;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = (_OWORD *)(v16[7] + 48 * v10);
      char v18 = a1[1];
      *uint64_t v17 = *a1;
      v17[1] = v18;
      v17[2] = a1[2];
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t PreferenceValues.configuration(toolbarPlacement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v8);
  switch(v9)
  {
    case 0:
      memset(v7, 0, sizeof(v7));
      specialized PreferenceValues.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 1:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_18834FC50;
      specialized PreferenceValues.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 2:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_18838AA10;
      specialized PreferenceValues.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 3:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_188382680;
      specialized PreferenceValues.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 4:
      *(unsigned char *)a2 = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 1;
      *(void *)(a2 + 48) = 0;
      *(unsigned char *)(a2 + 56) = 1;
      *(_WORD *)(a2 + 57) = 2;
      *(void *)(a2 + 64) = 0;
      *(unsigned char *)(a2 + 72) = 0;
      *(_DWORD *)(a2 + 76) = -1;
      goto LABEL_8;
    case 5:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_18835ED10;
      specialized PreferenceValues.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      goto LABEL_11;
    case 6:
      memset(v7, 0, 24);
      *(_OWORD *)&v7[24] = xmmword_188382670;
      specialized PreferenceValues.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
LABEL_11:
      uint64_t result = outlined destroy of ToolbarPlacement.Role?((uint64_t)v7);
      break;
    default:
      outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v7);
      specialized PreferenceValues.configurationValue<A>(key:placement:)((uint64_t)v7, v5, a2);
      outlined destroy of ToolbarPlacement.Role?((uint64_t)v7);
LABEL_8:
      uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v8);
      break;
  }
  return result;
}

uint64_t outlined destroy of ToolbarPlacement.Role?(uint64_t a1)
{
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = outlined init with take of ToolbarPlacement.Role(a2, a4[6] + 40 * a1);
  uint64_t v8 = (_OWORD *)(a4[7] + 80 * a1);
  *(_OWORD *)((char *)v8 + 57) = *(_OWORD *)((char *)a3 + 57);
  long long v9 = a3[3];
  void v8[2] = a3[2];
  v8[3] = v9;
  long long v10 = a3[1];
  _OWORD *v8 = *a3;
  v8[1] = v10;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _OWORD *v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  long long v9 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t result = outlined init with take of (key: String, value: Any)?(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, type metadata accessor for DisplayList.HostedViewState.Key);
  uint64_t v11 = (_OWORD *)(a4[7] + 176 * a1);
  BOOL v12 = a3[1];
  *uint64_t v11 = *a3;
  v11[1] = v12;
  uint64_t v13 = a3[5];
  v11[4] = a3[4];
  v11[5] = v13;
  char v14 = a3[3];
  _OWORD v11[2] = a3[2];
  v11[3] = v14;
  uint64_t v15 = a3[10];
  uint64_t v16 = a3[8];
  v11[9] = a3[9];
  v11[10] = v15;
  uint64_t v17 = a3[7];
  void v11[6] = a3[6];
  v11[7] = v17;
  v11[8] = v16;
  char v18 = a4[2];
  uint64_t v19 = __OFADD__(v18, 1);
  char v20 = v18 + 1;
  if (v19) {
    __break(1u);
  }
  else {
    a4[2] = v20;
  }
  return result;
}

uint64_t *outlined release of (ToolbarAppearanceConfiguration?, ToolbarAppearanceConfiguration?)(uint64_t *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v4 = a1[10];
  outlined consume of ToolbarAppearanceConfiguration?(*a1, a1[1]);
  outlined consume of ToolbarAppearanceConfiguration?(v4, v2);
  return a1;
}

uint64_t outlined consume of ToolbarAppearanceConfiguration?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized static ToolbarAppearanceConfiguration.== infix(_:_:)(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  int v2 = *((unsigned __int8 *)a1 + 24);
  double v3 = a1[4];
  char v43 = *((unsigned char *)a1 + 40);
  double v4 = a1[6];
  unsigned __int8 v5 = *((unsigned char *)a1 + 56);
  int v6 = *((unsigned __int8 *)a1 + 57);
  int v7 = *((unsigned __int8 *)a1 + 58);
  int v8 = *((unsigned __int8 *)a1 + 72);
  int v9 = *((unsigned __int8 *)a2 + 24);
  double v10 = a2[4];
  unsigned int v11 = *((unsigned __int8 *)a2 + 40);
  double v12 = a2[6];
  int v13 = *((unsigned __int8 *)a2 + 56);
  int v14 = *((unsigned __int8 *)a2 + 57);
  int v15 = *((unsigned __int8 *)a2 + 58);
  int v16 = *((unsigned __int8 *)a2 + 72);
  uint64_t v17 = *((void *)a2 + 1);
  uint64_t v18 = *((void *)a2 + 2);
  uint64_t v19 = *((void *)a1 + 1);
  uint64_t v20 = *((void *)a1 + 2);
  if (v20)
  {
    if (!v18) {
      return 0;
    }
    if (v20 != v18)
    {
      int v33 = *((unsigned __int8 *)a1 + 58);
      uint64_t v34 = *((void *)a1 + 1);
      uint64_t v35 = *((void *)a2 + 1);
      int v37 = *((unsigned __int8 *)a2 + 72);
      int v39 = *((unsigned __int8 *)a1 + 72);
      unsigned int v41 = *((unsigned __int8 *)a2 + 40);
      swift_retain();
      swift_retain();
      char v21 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      uint64_t result = 0;
      if ((v21 & 1) == 0) {
        return result;
      }
      int v8 = v39;
      unsigned int v11 = v41;
      int v16 = v37;
      uint64_t v19 = v34;
      uint64_t v17 = v35;
      int v7 = v33;
      if (v2 != v9) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else
  {
    if (v18) {
      return 0;
    }
    int v40 = *((unsigned __int8 *)a1 + 72);
    unsigned int v42 = *((unsigned __int8 *)a2 + 40);
    int v38 = *((unsigned __int8 *)a2 + 72);
    uint64_t v23 = *((void *)a2 + 1);
    uint64_t v24 = *((void *)a1 + 1);
    int v36 = *((unsigned __int8 *)a2 + 58);
    int v25 = *((unsigned __int8 *)a1 + 58);
    swift_retain();
    swift_retain();
    int v7 = v25;
    int v15 = v36;
    uint64_t v19 = v24;
    uint64_t v17 = v23;
    int v16 = v38;
    int v8 = v40;
    unsigned int v11 = v42;
  }
  if (v2 != v9) {
    return 0;
  }
LABEL_11:
  if (v5)
  {
    if (!v13) {
      return 0;
    }
  }
  else
  {
    if (v4 == v12) {
      char v26 = v13;
    }
    else {
      char v26 = 1;
    }
    if (v26) {
      return 0;
    }
  }
  if (v6 == 2)
  {
    uint64_t result = 0;
    if (v14 != 2) {
      return result;
    }
  }
  else
  {
    uint64_t result = 0;
    if (v14 == 2 || ((v14 ^ v6) & 1) != 0) {
      return result;
    }
  }
  if (v7 != v15) {
    return result;
  }
  if (!v19)
  {
    if (!v17)
    {
      unsigned int v30 = v11;
      int v31 = v8;
      swift_retain();
      swift_retain();
      int v8 = v31;
      unsigned int v11 = v30;
      goto LABEL_33;
    }
    return 0;
  }
  if (!v17) {
    return 0;
  }
  if (v19 != v17)
  {
    unsigned int v27 = v11;
    int v28 = v8;
    swift_retain();
    swift_retain();
    int v29 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
    swift_release();
    swift_release();
    unsigned int v11 = v27;
    if ((v29 ^ 1) & 1 | (v28 != v16) | v43 & 1) {
      return v27 & ~(v29 ^ 1 | (v28 != v16));
    }
    return (v3 == v10) & ~v11;
  }
LABEL_33:
  char v32 = v43;
  if (v8 == v16)
  {
    uint64_t result = v11;
  }
  else
  {
    char v32 = 1;
    uint64_t result = 0;
  }
  if ((v32 & 1) == 0) {
    return (v3 == v10) & ~v11;
  }
  return result;
}

uint64_t specialized PreferenceValues.configurationValue<A>(key:placement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v35 = a2;
  PreferenceValues.subscript.getter();
  uint64_t v5 = v32;
  int v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    int v31 = v6;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 56) + 80 * v7;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        LOBYTE(v26) = *(unsigned char *)v9;
        BYTE4(v26) = *(unsigned char *)(v9 + 24);
        uint64_t v30 = *(void *)(v9 + 48);
        char v21 = *(unsigned char *)(v9 + 40);
        char v22 = *(unsigned char *)(v9 + 56);
        char v23 = *(unsigned char *)(v9 + 57);
        LOBYTE(v29) = *(unsigned char *)(v9 + 72);
        BYTE4(v29) = *(unsigned char *)(v9 + 58);
        uint64_t v27 = *(void *)(v9 + 32);
        uint64_t v28 = *(void *)(v9 + 64);
        swift_retain();
        uint64_t v24 = v11;
        swift_retain();
        uint64_t v25 = v10;
        swift_retain();
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        char v22 = 1;
        char v23 = 2;
        char v21 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v27;
      char v16 = v26;
      char v13 = BYTE4(v26);
      uint64_t v15 = v24;
      uint64_t v14 = v25;
      char v18 = v22;
      char v17 = v23;
      char v19 = v21;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v12 = 0;
      uint64_t v28 = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      char v17 = 2;
      char v18 = 1;
      char v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v30;
    *(unsigned char *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 57) = v17;
    *(unsigned char *)(a3 + 58) = BYTE4(v29);
    *(void *)(a3 + 64) = v28;
    *(unsigned char *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v35 = a2;
  PreferenceValues.subscript.getter();
  uint64_t v5 = v32;
  int v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    int v31 = v6;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 56) + 80 * v7;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        LOBYTE(v26) = *(unsigned char *)v9;
        BYTE4(v26) = *(unsigned char *)(v9 + 24);
        uint64_t v30 = *(void *)(v9 + 48);
        char v21 = *(unsigned char *)(v9 + 40);
        char v22 = *(unsigned char *)(v9 + 56);
        char v23 = *(unsigned char *)(v9 + 57);
        LOBYTE(v29) = *(unsigned char *)(v9 + 72);
        BYTE4(v29) = *(unsigned char *)(v9 + 58);
        uint64_t v27 = *(void *)(v9 + 32);
        uint64_t v28 = *(void *)(v9 + 64);
        swift_retain();
        uint64_t v24 = v11;
        swift_retain();
        uint64_t v25 = v10;
        swift_retain();
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        char v22 = 1;
        char v23 = 2;
        char v21 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v27;
      char v16 = v26;
      char v13 = BYTE4(v26);
      uint64_t v15 = v24;
      uint64_t v14 = v25;
      char v18 = v22;
      char v17 = v23;
      char v19 = v21;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v12 = 0;
      uint64_t v28 = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      char v17 = 2;
      char v18 = 1;
      char v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v30;
    *(unsigned char *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 57) = v17;
    *(unsigned char *)(a3 + 58) = BYTE4(v29);
    *(void *)(a3 + 64) = v28;
    *(unsigned char *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v35 = a2;
  PreferenceValues.subscript.getter();
  uint64_t v5 = v32;
  int v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    int v31 = v6;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 56) + 80 * v7;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        LOBYTE(v26) = *(unsigned char *)v9;
        BYTE4(v26) = *(unsigned char *)(v9 + 24);
        uint64_t v30 = *(void *)(v9 + 48);
        char v21 = *(unsigned char *)(v9 + 40);
        char v22 = *(unsigned char *)(v9 + 56);
        char v23 = *(unsigned char *)(v9 + 57);
        LOBYTE(v29) = *(unsigned char *)(v9 + 72);
        BYTE4(v29) = *(unsigned char *)(v9 + 58);
        uint64_t v27 = *(void *)(v9 + 32);
        uint64_t v28 = *(void *)(v9 + 64);
        swift_retain();
        uint64_t v24 = v11;
        swift_retain();
        uint64_t v25 = v10;
        swift_retain();
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        char v22 = 1;
        char v23 = 2;
        char v21 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v27;
      char v16 = v26;
      char v13 = BYTE4(v26);
      uint64_t v15 = v24;
      uint64_t v14 = v25;
      char v18 = v22;
      char v17 = v23;
      char v19 = v21;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v12 = 0;
      uint64_t v28 = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      char v17 = 2;
      char v18 = 1;
      char v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v30;
    *(unsigned char *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 57) = v17;
    *(unsigned char *)(a3 + 58) = BYTE4(v29);
    *(void *)(a3 + 64) = v28;
    *(unsigned char *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v35 = a2;
  PreferenceValues.subscript.getter();
  uint64_t v5 = v32;
  int v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    int v31 = v6;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 56) + 80 * v7;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        LOBYTE(v26) = *(unsigned char *)v9;
        BYTE4(v26) = *(unsigned char *)(v9 + 24);
        uint64_t v30 = *(void *)(v9 + 48);
        char v21 = *(unsigned char *)(v9 + 40);
        char v22 = *(unsigned char *)(v9 + 56);
        char v23 = *(unsigned char *)(v9 + 57);
        LOBYTE(v29) = *(unsigned char *)(v9 + 72);
        BYTE4(v29) = *(unsigned char *)(v9 + 58);
        uint64_t v27 = *(void *)(v9 + 32);
        uint64_t v28 = *(void *)(v9 + 64);
        swift_retain();
        uint64_t v24 = v11;
        swift_retain();
        uint64_t v25 = v10;
        swift_retain();
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        char v22 = 1;
        char v23 = 2;
        char v21 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v27;
      char v16 = v26;
      char v13 = BYTE4(v26);
      uint64_t v15 = v24;
      uint64_t v14 = v25;
      char v18 = v22;
      char v17 = v23;
      char v19 = v21;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v12 = 0;
      uint64_t v28 = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      char v17 = 2;
      char v18 = 1;
      char v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v30;
    *(unsigned char *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 57) = v17;
    *(unsigned char *)(a3 + 58) = BYTE4(v29);
    *(void *)(a3 + 64) = v28;
    *(unsigned char *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v35 = a2;
  PreferenceValues.subscript.getter();
  uint64_t v5 = v32;
  int v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    int v31 = v6;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 56) + 80 * v7;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        LOBYTE(v26) = *(unsigned char *)v9;
        BYTE4(v26) = *(unsigned char *)(v9 + 24);
        uint64_t v30 = *(void *)(v9 + 48);
        char v21 = *(unsigned char *)(v9 + 40);
        char v22 = *(unsigned char *)(v9 + 56);
        char v23 = *(unsigned char *)(v9 + 57);
        LOBYTE(v29) = *(unsigned char *)(v9 + 72);
        BYTE4(v29) = *(unsigned char *)(v9 + 58);
        uint64_t v27 = *(void *)(v9 + 32);
        uint64_t v28 = *(void *)(v9 + 64);
        swift_retain();
        uint64_t v24 = v11;
        swift_retain();
        uint64_t v25 = v10;
        swift_retain();
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        char v22 = 1;
        char v23 = 2;
        char v21 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v27;
      char v16 = v26;
      char v13 = BYTE4(v26);
      uint64_t v15 = v24;
      uint64_t v14 = v25;
      char v18 = v22;
      char v17 = v23;
      char v19 = v21;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v12 = 0;
      uint64_t v28 = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      char v17 = 2;
      char v18 = 1;
      char v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v30;
    *(unsigned char *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 57) = v17;
    *(unsigned char *)(a3 + 58) = BYTE4(v29);
    *(void *)(a3 + 64) = v28;
    *(unsigned char *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v35 = a2;
  PreferenceValues.subscript.getter();
  uint64_t v5 = v32;
  int v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    int v31 = v6;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 56) + 80 * v7;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        LOBYTE(v26) = *(unsigned char *)v9;
        BYTE4(v26) = *(unsigned char *)(v9 + 24);
        uint64_t v30 = *(void *)(v9 + 48);
        char v21 = *(unsigned char *)(v9 + 40);
        char v22 = *(unsigned char *)(v9 + 56);
        char v23 = *(unsigned char *)(v9 + 57);
        LOBYTE(v29) = *(unsigned char *)(v9 + 72);
        BYTE4(v29) = *(unsigned char *)(v9 + 58);
        uint64_t v27 = *(void *)(v9 + 32);
        uint64_t v28 = *(void *)(v9 + 64);
        swift_retain();
        uint64_t v24 = v11;
        swift_retain();
        uint64_t v25 = v10;
        swift_retain();
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        char v22 = 1;
        char v23 = 2;
        char v21 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v27;
      char v16 = v26;
      char v13 = BYTE4(v26);
      uint64_t v15 = v24;
      uint64_t v14 = v25;
      char v18 = v22;
      char v17 = v23;
      char v19 = v21;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v12 = 0;
      uint64_t v28 = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      char v17 = 2;
      char v18 = 1;
      char v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v30;
    *(unsigned char *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 57) = v17;
    *(unsigned char *)(a3 + 58) = BYTE4(v29);
    *(void *)(a3 + 64) = v28;
    *(unsigned char *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t result;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v35 = a2;
  PreferenceValues.subscript.getter();
  uint64_t v5 = v32;
  int v6 = v33;
  outlined init with copy of ToolbarPlacement.Role?(a1, (uint64_t)&v32);
  if (v34 == 7)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    int v31 = v6;
    if (*(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if (v8)
      {
        uint64_t v9 = *(void *)(v5 + 56) + 80 * v7;
        uint64_t v11 = *(void *)(v9 + 8);
        uint64_t v10 = *(void *)(v9 + 16);
        LOBYTE(v26) = *(unsigned char *)v9;
        BYTE4(v26) = *(unsigned char *)(v9 + 24);
        uint64_t v30 = *(void *)(v9 + 48);
        char v21 = *(unsigned char *)(v9 + 40);
        char v22 = *(unsigned char *)(v9 + 56);
        char v23 = *(unsigned char *)(v9 + 57);
        LOBYTE(v29) = *(unsigned char *)(v9 + 72);
        BYTE4(v29) = *(unsigned char *)(v9 + 58);
        uint64_t v27 = *(void *)(v9 + 32);
        uint64_t v28 = *(void *)(v9 + 64);
        swift_retain();
        uint64_t v24 = v11;
        swift_retain();
        uint64_t v25 = v10;
        swift_retain();
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v24 = 0;
        char v22 = 1;
        char v23 = 2;
        char v21 = 1;
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = v27;
      char v16 = v26;
      char v13 = BYTE4(v26);
      uint64_t v15 = v24;
      uint64_t v14 = v25;
      char v18 = v22;
      char v17 = v23;
      char v19 = v21;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v12 = 0;
      uint64_t v28 = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      char v16 = 0;
      char v17 = 2;
      char v18 = 1;
      char v19 = 1;
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)a3 = v16;
    *(void *)(a3 + 8) = v15;
    *(void *)(a3 + 16) = v14;
    *(unsigned char *)(a3 + 24) = v13;
    *(void *)(a3 + 32) = v12;
    *(unsigned char *)(a3 + 40) = v19;
    *(void *)(a3 + 48) = v30;
    *(unsigned char *)(a3 + 56) = v18;
    *(unsigned char *)(a3 + 57) = v17;
    *(unsigned char *)(a3 + 58) = BYTE4(v29);
    *(void *)(a3 + 64) = v28;
    *(unsigned char *)(a3 + 72) = v29;
    *(_DWORD *)(a3 + 76) = v31;
  }
  return result;
}

uint64_t outlined init with copy of ToolbarPlacement.Role?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v5) {
    goto LABEL_31;
  }
LABEL_6:
  int64_t v10 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v10 < v6)
    {
      unint64_t v11 = *(void *)(v2 + 8 * v10);
      ++v8;
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 2;
      if (v10 + 2 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11) {
        goto LABEL_21;
      }
      int64_t v8 = v10 + 3;
      if (v10 + 3 >= v6) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v8);
      if (v11)
      {
LABEL_21:
        unint64_t v5 = (v11 - 1) & v11;
        for (unint64_t i = __clz(__rbit64(v11)) + (v8 << 6); ; unint64_t i = v19 | (v8 << 6))
        {
          outlined init with copy of ToolbarPlacement.Role(*(void *)(a1 + 48) + 40 * i, (uint64_t)v27);
          outlined init with take of ToolbarPlacement.Role((uint64_t)v27, (uint64_t)v26);
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v26, (uint64_t)&v20);
          if (*((void *)&v21 + 1) >= 7uLL)
          {
            long long v23 = v20;
            long long v24 = v21;
            uint64_t v25 = v22;
          }
          else
          {
            uint64_t v25 = 0;
            long long v23 = 0u;
            long long v24 = 0u;
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v20);
          }
          outlined destroy of ToolbarPlacement.Role((uint64_t)v26);
          if (*((void *)&v24 + 1))
          {
            long long v20 = v23;
            long long v21 = v24;
            uint64_t v22 = v25;
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
              uint64_t v9 = result;
            }
            unint64_t v15 = *(void *)(v9 + 16);
            unint64_t v14 = *(void *)(v9 + 24);
            if (v15 >= v14 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v9);
              uint64_t v9 = result;
            }
            *(void *)(v9 + 16) = v15 + 1;
            unint64_t v16 = v9 + 40 * v15;
            long long v17 = v20;
            long long v18 = v21;
            *(void *)(v16 + 64) = v22;
            *(_OWORD *)(v16 + 32) = v17;
            *(_OWORD *)(v16 + 48) = v18;
            if (!v5) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t result = outlined destroy of ToolbarPlacement.Role?((uint64_t)&v23, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
            if (!v5) {
              goto LABEL_6;
            }
          }
LABEL_31:
          unint64_t v19 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      int64_t v12 = v10 + 4;
      if (v12 < v6)
      {
        unint64_t v11 = *(void *)(v2 + 8 * v12);
        if (v11)
        {
          int64_t v8 = v12;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v8 = v12 + 1;
          if (__OFADD__(v12, 1)) {
            goto LABEL_34;
          }
          if (v8 >= v6) {
            break;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v8);
          ++v12;
          if (v11) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_32:
    swift_release();
    return v9;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      unint64_t v5 = swift_release();
      if (v6)
      {
        MEMORY[0x18C115B40](v5);
        if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      swift_getKeyPath();
      swift_getAtKeyPath();
      unint64_t v5 = swift_release();
      if (v6)
      {
        MEMORY[0x18C115B40](v5);
        if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v7;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.labelsVisibility : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.labelsVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.labelsVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<LabelsVisibilityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<LabelsVisibilityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<LabelsVisibilityKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<LabelsVisibilityKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t implicit closure #1 in static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  type metadata accessor for UpdateViewDestinationViewModifier();
  type metadata accessor for _GraphValue();
  int v5 = _GraphValue.value.getter();
  outlined copy of Text.LineStyle?(a2, a3);
  int v18 = v5;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = AGCreateWeakAttribute();
  int v22 = 0;
  char v23 = 1;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  char v28 = -1;
  uint64_t updated = type metadata accessor for UpdateViewDestinationViewModifier.RequestWriter();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v18, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_16, (uint64_t)v15, updated, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  long long v8 = v24;
  long long v9 = v25;
  long long v10 = v26;
  long long v11 = v27;
  unsigned __int8 v12 = v28;
  outlined consume of Text.LineStyle?(v19, v20);
  outlined consume of NavigationRequest.Action?(v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v10, *((uint64_t *)&v10 + 1), v11, *((uint64_t *)&v11 + 1), v12);
  return v14;
}

void type metadata accessor for Attribute<(_:)>()
{
  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)(255, &lazy cache variable for type metadata for (_:));
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Attribute<(_:)>)
  {
    type metadata accessor for (_:)();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<(_:)>);
    }
  }
}

uint64_t static BaseModifier._makeView(modifier:inputs:body:)()
{
  unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for _GraphValue<BaseModifier>, (uint64_t)&unk_1ED410DE8, MEMORY[0x1E4F3F590]);
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<NavigationLinkPresentedValue?>(0, &lazy cache variable for type metadata for _GraphValue<NavigationLinkPresentedValue?>, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  uint64_t v1 = MEMORY[0x1E4FBB390];
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v1, v0);
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationSelectionTag and conformance NavigationSelectionTag();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for _GraphValue<BaseModifier>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, v1, v6);
  type metadata accessor for _GraphValue<NavigationLinkPresentedValue?>(0, &lazy cache variable for type metadata for External<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, v1, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<Bool?> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  unint64_t v2 = AGCreateWeakAttribute();
  LODWORD(v1) = v2;
  unint64_t v3 = HIDWORD(v2);
  type metadata accessor for BaseModifier.SelectionStateBox();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  *(unsigned char *)(v4 + 32) = 2;
  *(_DWORD *)(v4 + 16) = v1;
  *(_DWORD *)(v4 + 20) = v3;
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114840]();
  swift_weakAssign();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type BaseModifier.Child and conformance BaseModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier();
  static ViewModifier.makeView(modifier:inputs:body:)();
  return swift_release();
}

{
  uint64_t (*v0)(void, uint64_t);

  lazy protocol witness table accessor for type NavigationAuthority.StackKeyViewInputKey and conformance NavigationAuthority.StackKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  lazy protocol witness table accessor for type NavigationAuthority.ListKeyViewInputKey and conformance NavigationAuthority.ListKeyViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  type metadata accessor for BaseModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type IsExtractingNavigationDestinations and conformance IsExtractingNavigationDestinations();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
  _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, v0);
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for BaseModifier.Transform();
  type metadata accessor for BaseModifier.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs);
  }
  return result;
}

void type metadata accessor for _GraphValue<NavigationLinkPresentedValue?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for _GraphValue<BaseModifier>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t BaseModifier.SelectionObserver.updateValue()()
{
  int Attribute = AGWeakAttributeGetAttribute();
  int v2 = *MEMORY[0x1E4F4E7A0];
  if (Attribute == *MEMORY[0x1E4F4E7A0])
  {
    char v3 = 0;
  }
  else
  {
    AGGraphGetValue();
    char v3 = v4 & 1;
  }
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v7 = v6;
  uint64_t v8 = *Value;
  if (*(_DWORD *)(v0 + 36) == v2)
  {
    *(void *)&long long v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    swift_retain();
    int v9 = 0;
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBB960];
    type metadata accessor for _GraphValue<BaseModifier>(0, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    uint64_t v11 = AGGraphGetValue();
    char v13 = v12;
    outlined init with copy of NavigationAuthority?(v11, (uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v10);
    BYTE8(v35) = v13 & 1;
    outlined init with take of NavigationState?((uint64_t)v34, (uint64_t)&v46, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v10);
    int v9 = BYTE8(v35);
    swift_retain();
  }
  BYTE8(v48) = v9;
  outlined init with take of NavigationState?((uint64_t)&v46, (uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    goto LABEL_12;
  }
  outlined init with copy of NavigationAuthority?(WeakValue, (uint64_t)v43, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (v44 == 1)
  {
    swift_release();
    outlined destroy of NavigationAuthority?((uint64_t)v43, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
    return outlined destroy of NavigationAuthority?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  }
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of NavigationAuthority((uint64_t)v43);
  if (!Strong
    || (swift_beginAccess(),
        outlined init with take of NavigationState?(Strong + 16, (uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?), swift_release(), outlined init with take of NavigationState?((uint64_t)v33, (uint64_t)v34, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v34) == 1))
  {
LABEL_12:
    swift_release();
    return outlined destroy of NavigationAuthority?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  }
  long long v52 = v39;
  long long v53 = v40;
  long long v54 = v41;
  __int16 v55 = v42;
  long long v48 = v35;
  long long v49 = v36;
  long long v50 = v37;
  long long v51 = v38;
  long long v46 = v34[0];
  long long v47 = v34[1];
  type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
  uint64_t v17 = AGGraphGetWeakValue();
  if (v17
    && (uint64_t v18 = *(void *)(v17 + 40), v18 != 1)
    && ((uint64_t v19 = *(void *)v17,
         uint64_t v20 = *(void *)(v17 + 8),
         char v21 = v3 | v7,
         uint64_t v22 = *(void *)(v17 + 16),
         uint64_t v23 = *(void *)(v17 + 24),
         (v21 & 1) != 0)
     || v9))
  {
    char v24 = *(unsigned char *)(v17 + 32) & 1;
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    outlined init with copy of NavigationAuthority?((uint64_t)v45, (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    uint64_t v26 = swift_allocObject();
    long long v27 = v53;
    *(_OWORD *)(v26 + 120) = v52;
    *(_OWORD *)(v26 + 136) = v27;
    *(_OWORD *)(v26 + 152) = v54;
    long long v28 = v49;
    *(_OWORD *)(v26 + 56) = v48;
    *(_OWORD *)(v26 + 72) = v28;
    long long v29 = v51;
    *(_OWORD *)(v26 + 88) = v50;
    *(_OWORD *)(v26 + 104) = v29;
    long long v30 = v47;
    *(_OWORD *)(v26 + 24) = v46;
    *(void *)(v26 + 16) = v25;
    *(_WORD *)(v26 + 168) = v55;
    *(_OWORD *)(v26 + 40) = v30;
    *(void *)(v26 + 176) = v19;
    *(void *)(v26 + 184) = v20;
    *(void *)(v26 + 192) = v22;
    *(void *)(v26 + 200) = v23;
    *(unsigned char *)(v26 + 208) = v24;
    *(void *)(v26 + 216) = v18;
    *(void *)(v26 + 224) = v8;
    uint64_t v31 = MEMORY[0x1E4FBB960];
    outlined init with take of NavigationState?((uint64_t)v32, v26 + 232, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    swift_retain();
    outlined retain of NavigationState?((uint64_t)v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of NavigationAuthority?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v31);
    return outlined retain of NavigationState?((uint64_t)v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
  }
  else
  {
    outlined destroy of NavigationAuthority?((uint64_t)v45, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    outlined retain of NavigationState?((uint64_t)v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    return swift_release();
  }
}

uint64_t outlined destroy of NavigationAuthority?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for _GraphValue<BaseModifier>(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for Binding<AnyNavigationSplitVisibility>(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOhTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOhTm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t BaseModifier.Child.value.getter@<X0>(char *a1@<X8>)
{
  int Attribute = AGWeakAttributeGetAttribute();
  int v3 = *MEMORY[0x1E4F4E7A0];
  if (Attribute == *MEMORY[0x1E4F4E7A0])
  {
    char v4 = 2;
  }
  else
  {
    type metadata accessor for _GraphValue<BaseModifier>(0, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB718]);
    char v4 = *(unsigned char *)AGGraphGetValue();
  }
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != v3) {
    uint64_t result = AGGraphRegisterDependency();
  }
  if ((v4 & 1) == 0)
  {
    type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);
    uint64_t result = AGGraphGetWeakValue();
    if (result)
    {
      uint64_t v6 = *(unsigned __int8 *)(result + 16);
      if (*(void *)(result + 40) != 1 && v6 != 6)
      {
        Swift::UInt v8 = *(void *)(result + 8);
        Swift::UInt v9 = *(void *)(result + 24);
        type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
        uint64_t result = AGGraphGetWeakValue();
        if (result)
        {
          outlined init with copy of NavigationAuthority?(result, (uint64_t)v15, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
          if (v16 == 1)
          {
            uint64_t result = outlined destroy of NavigationAuthority?((uint64_t)v15, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
          }
          else
          {
            uint64_t Strong = swift_weakLoadStrong();
            uint64_t result = outlined destroy of NavigationAuthority((uint64_t)v15);
            if (Strong)
            {
              swift_beginAccess();
              outlined init with take of NavigationState?(Strong + 16, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
              outlined retain of NavigationState?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
              swift_release();
              outlined init with take of NavigationState?((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
              uint64_t result = getEnumTag for AccessibilityActionCategory.Category((uint64_t)v14);
              if (result != 1)
              {
                type metadata accessor for _GraphValue<BaseModifier>(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]);
                if (*(void *)AGGraphGetValue())
                {
                  uint64_t v11 = swift_retain();
                  char v12 = NavigationState.isSelected(_:in:)(v11, v8, v6, v9);
                  swift_release();
                  uint64_t result = outlined retain of NavigationState?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
                  if (v12) {
                    char v4 = 1;
                  }
                }
                else
                {
                  uint64_t result = outlined retain of NavigationState?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
                }
              }
            }
          }
        }
      }
    }
  }
  *a1 = v4;
  return result;
}

uint64_t outlined init with take of NavigationState?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _GraphValue<BaseModifier>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI15NavigationStateVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _GraphValue<_NavigationStackStyleConfiguration.Item>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _GraphValue<BaseModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined retain of NavigationState?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v4 = *(_WORD *)(a1 + 144);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v4);
  return a1;
}

void type metadata accessor for _GraphValue<_NavigationStackStyleConfiguration.Item>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined copy of NavigationSplitViewState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 != 1)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(a2, a3);
    outlined copy of AppIntentExecutor?(a5);
    return outlined copy of Binding<NavigationSplitViewColumn>?(a7, a8);
  }
  return result;
}

void outlined copy of NavigationState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a4)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    outlined copy of NavigationListState?(a5, a6);
    outlined copy of NavigationSplitViewState?(a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

void outlined consume of NavigationSplitViewState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3 != 1)
  {
    outlined consume of Binding<NavigationSplitViewColumn>?(a2, a3);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a5);
    outlined consume of Binding<NavigationSplitViewColumn>?(a7, a8);
  }
}

uint64_t outlined consume of NavigationColumnState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
  {
    outlined consume of NavigationListState?(a6, a7);
    outlined consume of Binding<AnyNavigationPath>?(a12, a13);
    outlined consume of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void outlined consume of NavigationState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined consume of NavigationListState?(a5, a6);
    outlined consume of NavigationSplitViewState?(a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

uint64_t *outlined release of NavigationColumnState(uint64_t *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[16];
  uint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[18];
  uint64_t v9 = a1[20];
  uint64_t v10 = a1[19];
  uint64_t v8 = a1[21];
  outlined consume of NavigationListState?(a1[5], a1[6]);
  outlined consume of Binding<AnyNavigationPath>?(v2, v3);
  outlined consume of NavigationColumnState.ColumnContent(v12, v11, v4, v5, v6, v10, v9, v8);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined consume of NavigationListState?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of NavigationColumnState.ColumnContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 < 0)
  {
    return outlined consume of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
  }
  else
  {
    outlined consume of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t outlined consume of NavigationColumnState.ReplacedRoot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((~a1 & 0xF000000000000007) != 0) {
    return outlined consume of NavigationColumnState.ReplacedRoot(a1, a2, a3, a4);
  }
  return a1;
}

uint64_t outlined consume of Binding<AnyNavigationPath>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t NavigationState.isSelected(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 == 6)
  {
    uint64_t v6 = v2 + 4;
    uint64_t v7 = v2[5];
    if (!v7)
    {
LABEL_10:
      char v16 = 0;
      return v16 & 1;
    }
  }
  else
  {
    uint64_t v8 = v2[3];
    if (!*(void *)(v8 + 16)) {
      goto LABEL_10;
    }
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a2 + 8), v5, *(void *)(a2 + 24));
    if ((v10 & 1) == 0) {
      goto LABEL_10;
    }
    uint64_t v11 = *(void *)(v8 + 56) + 304 * v9;
    uint64_t v6 = (uint64_t *)(v11 + 40);
    uint64_t v7 = *(void *)(v11 + 48);
    if (!v7) {
      goto LABEL_10;
    }
  }
  if (!*(void *)(v7 + 16)) {
    goto LABEL_10;
  }
  uint64_t v12 = *v6;
  specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v13 & 1) == 0) {
    goto LABEL_10;
  }
  outlined copy of NavigationListState?(v12, v7);
  type metadata accessor for Binding<NavigationSplitViewColumn>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, MEMORY[0x1E4F41638]);
  uint64_t v15 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v18, v15);
  char v16 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 104))(a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationListState?(v12, v7);
  return v16 & 1;
}

uint64_t UpdateViewDestinationViewModifier.authorityIsPresenting.getter(int *a1)
{
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(v1 + a1[14], (uint64_t)v38, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  if (v39 == 1)
  {
    outlined destroy of UpdateViewDestinationRequest?((uint64_t)v38, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
    return 0;
  }
  else
  {
    outlined init with take of NavigationAuthority((uint64_t)v38, (uint64_t)v40);
    uint64_t v4 = (Swift::UInt *)(v1 + a1[10]);
    Swift::UInt v5 = v4[4];
    if (v5 >> 1 == 0xFFFFFFFF)
    {
      outlined destroy of NavigationAuthority((uint64_t)v40);
      return 0;
    }
    else
    {
      Swift::UInt v6 = *v4;
      Swift::UInt v7 = v4[1];
      Swift::UInt v9 = v4[2];
      Swift::UInt v8 = v4[3];
      uint64_t v10 = *(void *)(v1 + a1[12]);
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        swift_beginAccess();
        outlined init with take of NavigationRequest.KeyKind?(Strong + 16, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
        outlined retain of NavigationState?((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?);
        swift_release();
        outlined init with take of NavigationRequest.KeyKind?((uint64_t)v37, (uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
        if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v38) != 1)
        {
          Swift::UInt v11 = v5 >> 62;
          Swift::UInt v12 = v6;
          unsigned __int8 v13 = v7;
          Swift::UInt v14 = v9;
          if (!v11 || v11 == 1 && (v6 = v7, unsigned __int8 v13 = v9, v14 = v8, v9 != 6))
          {
            unsigned __int8 v33 = v11;
            Swift::UInt v34 = v8;
            char v16 = &type metadata for NavigationState;
            for (unint64_t i = (unint64_t *)&lazy cache variable for type metadata for NavigationState?; ; unint64_t i = v18)
            {
              uint64_t v18 = i;
              uint64_t v19 = v16;
              outlined init with take of NavigationRequest.KeyKind?((uint64_t)v37, (uint64_t)v35, i, (uint64_t)v16);
              uint64_t v20 = v36;
              if (!*(void *)(v36 + 16)) {
                break;
              }
              unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v13, v14);
              if ((v22 & 1) == 0) {
                break;
              }
              uint64_t v23 = (void *)(*(void *)(v20 + 56) + 304 * v21);
              uint64_t v24 = v23[14];
              uint64_t v25 = v23[18];
              if ((v23[21] & 0x8000000000000000) != 0)
              {
                if (v24 < 0 && (v24 & 0xF000000000000007) != 0xF000000000000007 && v25 == v10) {
                  goto LABEL_43;
                }
              }
              else
              {
                uint64_t v26 = v23[22];
                if (v24 < 0 && (v24 & 0xF000000000000007) != 0xF000000000000007 && v25 == v10) {
                  goto LABEL_43;
                }
                uint64_t v28 = *(void *)(v26 + 16);
                if (v28)
                {
                  long long v29 = (uint64_t *)(v26 + 64);
                  while (1)
                  {
                    uint64_t v30 = *v29;
                    v29 += 7;
                    if (v30 == v10) {
                      break;
                    }
                    if (!--v28) {
                      goto LABEL_34;
                    }
                  }
LABEL_43:
                  outlined retain of NavigationState?((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
                  uint64_t Strong = 1;
                  goto LABEL_12;
                }
              }
LABEL_34:
              uint64_t v32 = v33;
              if (v33)
              {
                if (v33 != 1) {
                  break;
                }
                uint64_t v32 = v9;
                Swift::UInt v6 = v7;
                if (v9 == 6) {
                  break;
                }
              }
              else
              {
                Swift::UInt v6 = v12;
                Swift::UInt v34 = v9;
              }
              unsigned __int8 v13 = 2;
              switch(v32)
              {
                case 1:
                  break;
                case 2:
                case 3:
                case 4:
                case 5:
                  goto LABEL_10;
                default:
                  if (v34 == 3) {
                    unsigned __int8 v13 = 1;
                  }
                  else {
                    unsigned __int8 v13 = 2;
                  }
                  break;
              }
              Swift::UInt v7 = v13;
              Swift::UInt v9 = v34;
              Swift::UInt v14 = v34;
              Swift::UInt v12 = v6;
              unsigned __int8 v33 = 0;
              Swift::UInt v34 = 0;
              char v16 = v19;
            }
          }
LABEL_10:
          outlined retain of NavigationState?((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
        }
        uint64_t Strong = 0;
      }
LABEL_12:
      outlined destroy of NavigationAuthority((uint64_t)v40);
    }
  }
  return Strong;
}

uint64_t outlined init with take of NavigationAuthority(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 initializeWithTake for NavigationAuthority(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_weakTakeInit();
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

uint64_t NavigationState.isSelected(_:in:)(uint64_t a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4)
{
  uint64_t v5 = *(void *)(v4 + 24);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_9;
  }
  Swift::UInt v6 = a4;
  unsigned __int8 v7 = a3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  if ((v11 & 1) == 0) {
    goto LABEL_9;
  }
  Swift::UInt v35 = a2;
  memcpy(__dst, (const void *)(*(void *)(v5 + 56) + 304 * v10), 0x12BuLL);
  uint64_t v12 = __dst[21];
  uint64_t v41 = a1;
  if (__dst[21] < 0)
  {
    outlined retain of NavigationColumnState(__dst);
LABEL_7:
    if (v7 - 2 >= 4)
    {
      if (v7) {
        unsigned __int8 v24 = 2;
      }
      else {
        unsigned __int8 v24 = v6 == 3 ? 1 : 2;
      }
      if (*(void *)(v5 + 16))
      {
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v35, v24, v6);
        if (v26)
        {
          memcpy(v43, (const void *)(*(void *)(v5 + 56) + 304 * v25), 0x12BuLL);
          uint64_t v28 = v43[14];
          uint64_t v27 = v43[15];
          uint64_t v29 = v43[16];
          uint64_t v30 = v43[17];
          uint64_t v31 = v43[18];
          uint64_t v32 = v43[19];
          uint64_t v33 = v43[20];
          uint64_t v34 = v43[21];
          if (v43[21] < 0)
          {
            if ((v43[14] & 0xF000000000000007) == 0xF000000000000007)
            {
              outlined retain of NavigationColumnState(v43);
              outlined consume of NavigationColumnState.ColumnContent(v28, v27, v29, v30, v31, v32, v33, v34);
LABEL_26:
              char v22 = 0;
              goto LABEL_27;
            }
          }
          else if ((v43[14] & 0xF000000000000007) == 0xF000000000000007)
          {
LABEL_25:
            outlined retain of NavigationColumnState(v43);
            goto LABEL_26;
          }
          if ((v43[14] & 0x8000000000000000) == 0)
          {
            long long v40 = *(uint64_t (**)(uint64_t))(*(void *)v43[14] + 176);
            uint64_t v42 = v43[15];
            outlined retain of NavigationColumnState(v43);
            outlined copy of NavigationColumnState.ColumnContent(v28, v27, v29, v30, v31, v32, v33, v34);
            swift_retain();
            char v22 = v40(v41);
            swift_release();
            outlined consume of NavigationColumnState.ColumnContent(v28, v42, v29, v30, v31, v32, v33, v34);
LABEL_27:
            outlined release of NavigationColumnState(__dst);
            outlined release of NavigationColumnState(v43);
            return v22 & 1;
          }
          goto LABEL_25;
        }
      }
    }
    outlined release of NavigationColumnState(__dst);
LABEL_9:
    char v22 = 0;
    return v22 & 1;
  }
  Swift::UInt v39 = v6;
  uint64_t v13 = __dst[20];
  uint64_t v14 = __dst[19];
  uint64_t v15 = __dst[18];
  uint64_t v16 = __dst[17];
  uint64_t v17 = __dst[16];
  uint64_t v18 = __dst[15];
  unsigned __int8 v38 = v7;
  uint64_t v19 = __dst[14];
  uint64_t v37 = __dst[21];
  outlined copy of NavigationColumnState.ColumnContent(__dst[14], __dst[15], __dst[16], __dst[17], __dst[18], __dst[19], __dst[20], __dst[21]);
  uint64_t v36 = v14;
  outlined copy of NavigationColumnState.ColumnContent(v19, v18, v17, v16, v15, v14, v13, v12);
  outlined retain of NavigationColumnState(__dst);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ReplacedRoot?(v19, v18, v17, v16);
  char v20 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 184))(v37);
  swift_release();
  Swift::UInt v6 = v39;
  uint64_t v21 = v19;
  unsigned __int8 v7 = v38;
  outlined consume of NavigationColumnState.ColumnContent(v21, v18, v17, v16, v15, v36, v13, v37);
  if ((v20 & 1) == 0) {
    goto LABEL_7;
  }
  outlined release of NavigationColumnState(__dst);
  char v22 = 1;
  return v22 & 1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt a1, unsigned __int8 a2, Swift::UInt a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Swift::Int v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, a3, v6);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t result = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v8 = ~v6;
    do
    {
      uint64_t v9 = *(void *)(v4 + 48) + 24 * result;
      uint64_t v10 = *(void *)v9;
      int v11 = *(unsigned __int8 *)(v9 + 8);
      uint64_t v12 = *(void *)(v9 + 16);
      if (v10 == a1 && v11 == a2 && v12 == a3) {
        break;
      }
      unint64_t result = (result + 1) & v8;
    }
    while (((*(void *)(v4 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v51 = *(void *)(a1 + 16);
  uint64_t v56 = v4;
  uint64_t updated = type metadata accessor for UpdateViewDestinationViewModifier();
  uint64_t v6 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v8 = (char *)&v45 - v7;
  LODWORD(v7) = *(_DWORD *)v1;
  uint64_t v9 = *(void *)(v1 + 16);
  int v11 = *(_DWORD *)(v1 + 32);
  char v12 = *(unsigned char *)(v1 + 36);
  char v13 = *(unsigned char *)(v1 + 104);
  *((void *)&v106 + 1) = *(void *)(v1 + 8);
  uint64_t v10 = *((void *)&v106 + 1);
  *(void *)&long long v107 = v9;
  *((void *)&v107 + 1) = *(void *)(v1 + 24);
  LODWORD(v106) = v7;
  LODWORD(v108[0]) = v11;
  BYTE4(v108[0]) = v12;
  *(_OWORD *)&v108[1] = *(_OWORD *)(v1 + 40);
  *(_OWORD *)&v108[3] = *(_OWORD *)(v1 + 56);
  long long v109 = *(_OWORD *)(v1 + 72);
  long long v110 = *(_OWORD *)(v1 + 88);
  LOBYTE(v111) = v13;
  uint64_t v50 = a1;
  UpdateViewDestinationViewModifier.RequestWriter.modifier.getter((uint64_t)v8);
  *(void *)&long long v106 = v10;
  *((void *)&v106 + 1) = v9;
  UpdateViewDestinationViewModifier.request(viewListID:)((uint64_t)&v106, updated, (uint64_t)v105);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, updated);
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1((uint64_t)v105, (uint64_t)&v90, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  if (v104 >> 1 != 4294967294)
  {
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)&v92, (uint64_t)v80, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    outlined release of NavigationRequest?(v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationRequest?);
    outlined destroy of UpdateViewDestinationRequest((uint64_t)&v90);
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)v80, (uint64_t)&v81, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)&v81) == 1) {
      goto LABEL_4;
    }
    uint64_t v48 = v82;
    uint64_t v49 = v81;
    uint64_t v23 = v83;
    uint64_t v24 = v84;
    uint64_t v25 = v85;
    uint64_t v26 = v87;
    uint64_t v46 = v88;
    uint64_t v47 = v86;
    int v27 = v89;
    outlined copy of NavigationRequest.Action(v81, v82, v83, v84, v85, v86, v87, v88, v89);
    outlined release of NavigationRequest?(v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationRequest?);
    uint64_t v14 = *(void *)(v1 + 40);
    uint64_t v28 = *(void *)(v1 + 48);
    uint64_t v30 = *(void *)(v1 + 56);
    uint64_t v29 = *(void *)(v1 + 64);
    uint64_t v31 = *(void *)(v1 + 72);
    uint64_t v32 = *(void *)(v1 + 80);
    uint64_t v33 = *(void *)(v1 + 88);
    uint64_t v34 = *(void *)(v1 + 96);
    LODWORD(v1) = *(unsigned __int8 *)(v1 + 104);
    v69[0] = v49;
    v69[1] = v48;
    v69[2] = v23;
    _OWORD v69[3] = v24;
    v69[4] = v25;
    uint64_t v15 = v28;
    v69[5] = v47;
    v69[6] = v26;
    uint64_t v17 = v30;
    v69[7] = v46;
    char v70 = v27;
    uint64_t v71 = v14;
    uint64_t v72 = v28;
    uint64_t v73 = v30;
    uint64_t v74 = v29;
    uint64_t v75 = v31;
    uint64_t v76 = v32;
    uint64_t v77 = v33;
    uint64_t v78 = v34;
    char v79 = v1;
    uint64_t v54 = v31;
    *(void *)&long long v55 = v29;
    uint64_t v52 = v33;
    uint64_t v53 = v32;
    if (v27 == 13)
    {
      if (v1 == 13)
      {
LABEL_8:
        uint64_t v51 = v30;
        uint64_t v22 = v34;
        outlined copy of NavigationRequest.Action(v14, v28, v30, v29, v31, v32, v33, v34, v1);
        outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)((uint64_t)v69);
        int v35 = *(_DWORD *)(v2 + 32);
        char v36 = *(unsigned char *)(v2 + 36);
        Weakuint64_t Value = (int *)AGGraphGetWeakValue();
        if (WeakValue) {
          int v38 = *WeakValue;
        }
        else {
          int v38 = 0;
        }
        if (v36)
        {
          if (WeakValue)
          {
LABEL_25:
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v57 = 0u;
            long long v58 = 0u;
            uint64_t v65 = 0x1FFFFFFFCLL;
            uint64_t v66 = 0;
            uint64_t v67 = 0;
            uint64_t v68 = 0;
            goto LABEL_26;
          }
        }
        else if (!WeakValue || v35 != v38)
        {
          goto LABEL_25;
        }
        _s7SwiftUI19NavigationAuthorityVSgWOcTm_1((uint64_t)v105, (uint64_t)&v57, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
LABEL_26:
        uint64_t v17 = v51;
        outlined init with take of NavigationRequest.KeyKind?((uint64_t)&v57, (uint64_t)&v106, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
        goto LABEL_17;
      }
    }
    else
    {
      if (v27 != 18)
      {
        uint64_t v22 = v34;
        outlined copy of NavigationRequest.Action?(v14, v28, v30, v29, v31, v32, v33, v34, v1);
LABEL_15:
        outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)((uint64_t)v69);
        goto LABEL_16;
      }
      if (v1 == 18) {
        goto LABEL_8;
      }
    }
    uint64_t v22 = v34;
    if (v1 != 255) {
      outlined copy of NavigationRequest.Action(v14, v28, v30, v29, v31, v32, v33, v34, v1);
    }
    goto LABEL_15;
  }
  outlined destroy of UpdateViewDestinationRequest?((uint64_t)&v90, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
LABEL_4:
  uint64_t v14 = *(void *)(v1 + 40);
  uint64_t v15 = *(void *)(v1 + 48);
  uint64_t v17 = *(void *)(v1 + 56);
  uint64_t v16 = *(void *)(v1 + 64);
  uint64_t v18 = *(void *)(v1 + 72);
  uint64_t v19 = *(void *)(v1 + 80);
  uint64_t v20 = *(void *)(v1 + 88);
  uint64_t v21 = *(void *)(v1 + 96);
  LOBYTE(v1) = *(unsigned char *)(v1 + 104);
  long long v106 = 0u;
  long long v107 = 0u;
  memset(v108, 0, 32);
  LOBYTE(v108[4]) = -1;
  *(void *)&long long v109 = v14;
  *((void *)&v109 + 1) = v15;
  *(void *)&long long v110 = v17;
  *((void *)&v110 + 1) = v16;
  uint64_t v111 = v18;
  uint64_t v112 = v19;
  uint64_t v113 = v20;
  uint64_t v114 = v21;
  char v115 = v1;
  uint64_t v54 = v18;
  *(void *)&long long v55 = v16;
  uint64_t v52 = v20;
  uint64_t v53 = v19;
  uint64_t v22 = v21;
  outlined copy of NavigationRequest.Action?(v14, v15, v17, v16, v18, v19, v20, v21, v1);
  outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)((uint64_t)&v106);
LABEL_16:
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1((uint64_t)v105, (uint64_t)&v106, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
LABEL_17:
  int v39 = *(_DWORD *)v2;
  int v40 = *(_DWORD *)(v2 + 32);
  char v41 = *(unsigned char *)(v2 + 36);
  long long v91 = *(_OWORD *)(v2 + 8);
  uint64_t v92 = *(void *)(v2 + 24);
  int v90 = v39;
  int v93 = v40;
  char v94 = v41;
  uint64_t v95 = v14;
  uint64_t v96 = v15;
  uint64_t v97 = v17;
  uint64_t v98 = v55;
  uint64_t v99 = v54;
  uint64_t v100 = v53;
  uint64_t v101 = v52;
  uint64_t v102 = v22;
  char v103 = v1;
  UpdateViewDestinationViewModifier.RequestWriter.selectionIdentifier.getter(&v57);
  long long v55 = v57;
  long long v42 = v58;
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1((uint64_t)&v106, (uint64_t)&v90, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = v55;
  *(_OWORD *)(v43 + 32) = v42;
  outlined init with take of NavigationRequest.KeyKind?((uint64_t)&v90, v43 + 48, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  *(void *)&long long v57 = partial apply for closure #1 in UpdateViewDestinationViewModifier.RequestWriter.updateValue();
  *((void *)&v57 + 1) = v43;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  swift_release();
  $defer #2 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(v2, (uint64_t)v105);
  $defer #1 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(v2);
  outlined destroy of UpdateViewDestinationRequest?((uint64_t)v105, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  return outlined destroy of UpdateViewDestinationRequest?((uint64_t)&v106, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
}

uint64_t initializeWithCopy for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  swift_retain();
  swift_retain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  char v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  char v13 = (long long *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  long long v14 = *v13;
  long long v15 = v13[2];
  v12[1] = v13[1];
  v12[2] = v15;
  *char v12 = v14;
  unint64_t v16 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v13 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = ((unint64_t)v12 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v13 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = *(void *)(v22 + 8);
  if (v23 >= 0xFFFFFFFF) {
    LODWORD(v23) = -1;
  }
  if ((int)v23 - 1 < 0)
  {
    swift_weakCopyInit();
    *(void *)(v21 + 8) = *(void *)(v22 + 8);
    *(void *)(v21 + 16) = *(void *)(v22 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v24 = *(_OWORD *)v22;
    *(void *)(v21 + 16) = *(void *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v24;
  }
  *(unsigned char *)(v21 + 24) = *(unsigned char *)(v22 + 24);
  unint64_t v25 = *(void *)(((unint64_t)v13 + 119) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v26) = -1;
  if (v25 < 0xFFFFFFFF) {
    uint64_t v26 = *(void *)(((unint64_t)v13 + 119) & 0xFFFFFFFFFFFFFFF8);
  }
  if ((int)v26 - 1 < 0) {
    unint64_t v25 = swift_retain();
  }
  *(void *)(((unint64_t)v12 + 119) & 0xFFFFFFFFFFFFFFF8) = v25;
  return a1;
}

uint64_t outlined init with copy of NavigationAuthority?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _GraphValue<BaseModifier>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for NavigationAuthority?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOcTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOcTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI19NavigationAuthorityVSgWOcTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with take of NavigationRequest.KeyKind?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for NavigationAuthority?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Binding<AnyNavigationPath>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for NavigationAuthority?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for Binding<AnyNavigationSplitVisibility>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of UpdateViewDestinationRequest?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for NavigationAuthority?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t UpdateViewDestinationViewModifier.RequestWriter.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t updated = type metadata accessor for UpdateViewDestinationViewModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 16);

  return v4(a1, Value, updated);
}

uint64_t outlined release of (NavigationRequest.Action?, NavigationRequest.Action?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 136);
  outlined consume of NavigationRequest.Action?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of NavigationRequest.Action?(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

void UpdateViewDestinationViewModifier.request(viewListID:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v17 = (char *)&v49 - v16;
  if (*(unsigned char *)(v3 + *(int *)(v18 + 68))) {
    goto LABEL_8;
  }
  uint64_t v54 = v15;
  uint64_t v55 = v14;
  uint64_t v57 = *(void *)(v3 + *(int *)(a2 + 48));
  MEMORY[0x1F4188790](v13);
  uint64_t v56 = *(void *)(a2 + 24);
  uint64_t v58 = v19;
  uint64_t v59 = v20;
  outlined copy of Text.LineStyle?(v20, v19);
  static Update.dispatchImmediately<A>(_:)();
  int v21 = v76[31];
  char v22 = UpdateViewDestinationViewModifier.authorityIsPresenting.getter((int *)a2);
  uint64_t v23 = v3 + *(int *)(a2 + 44);
  int v24 = *(unsigned __int8 *)(v23 + 8);
  if (v22)
  {
    if ((v21 | v24))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + *(int *)(a2 + 36), v7);
      outlined init with take of NavigationRequest.KeyKind?(v3 + *(int *)(a2 + 40), (uint64_t)v75, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
      uint64_t v60 = 0;
      uint64_t v61 = v59;
      uint64_t v62 = v58;
      uint64_t v63 = v57;
      char v25 = *(unsigned char *)(v3 + *(int *)(a2 + 52));
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(v3 + *(int *)(a2 + 56), (uint64_t)v76, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      UpdateViewDestinationRequest.init<A>(updateDestination:key:identifier:shouldTargetSourceColumn:navigationAuthority:)((uint64_t)v11, (uint64_t)v75, &v60, v25, (uint64_t)v76, v7, a3);
    }
    else
    {
      uint64_t v26 = (uint64_t *)(v3 + *(int *)(a2 + 40));
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      uint64_t v29 = v26[2];
      uint64_t v30 = v26[3];
      unint64_t v31 = v26[4];
      uint64_t v32 = v26[5];
      _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(v3 + *(int *)(a2 + 56), (uint64_t)v76, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
      *(_OWORD *)a3 = xmmword_18834BB90;
      *(void *)(a3 + 16) = 0;
      if (v31 >> 1 == 0xFFFFFFFF)
      {
        outlined consume of Text.LineStyle?(v59, v58);
        _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)&v60);
      }
      else
      {
        uint64_t v55 = v28;
        uint64_t v56 = v30;
        uint64_t v40 = v58;
        uint64_t v41 = v59;
        outlined copy of Text.LineStyle?(v59, v58);
        swift_retain();
        uint64_t v42 = v32;
        uint64_t v43 = v29;
        uint64_t v44 = v27;
        char v45 = Transaction.disablesAnimations.getter();
        swift_release();
        outlined consume of Text.LineStyle?(v41, v40);
        uint64_t v60 = 0;
        uint64_t v61 = v41;
        uint64_t v62 = v40;
        uint64_t v63 = v57;
        long long v64 = 0u;
        long long v65 = 0u;
        char v66 = 19;
        uint64_t v67 = v44;
        uint64_t v68 = v55;
        uint64_t v69 = v43;
        uint64_t v70 = v56;
        unint64_t v71 = v31;
        uint64_t v72 = v42;
        char v73 = v45 & 1;
        uint64_t v74 = 0;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v60, v46, v47, v48);
      }
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)&v60, (uint64_t)v75, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined init with take of NavigationRequest.KeyKind?((uint64_t)v75, a3 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
      outlined assign with take of NavigationAuthority?((uint64_t)v76, a3);
    }
    return;
  }
  if (!v21 || (v24 & 1) != 0)
  {
    outlined consume of Text.LineStyle?(v59, v58);
LABEL_8:
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 128) = 0x1FFFFFFFCLL;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    *(void *)(a3 + 152) = 0;
    return;
  }
  uint64_t v53 = *(void *)v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v17, v3 + *(int *)(a2 + 36), v7);
  outlined init with take of NavigationRequest.KeyKind?(v3 + *(int *)(a2 + 40), (uint64_t)v75, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  uint64_t v33 = v59;
  uint64_t v60 = 0;
  uint64_t v61 = v59;
  uint64_t v34 = v58;
  uint64_t v62 = v58;
  uint64_t v63 = v57;
  uint64_t v57 = *(void *)v3;
  uint64_t v52 = *(void *)(v3 + 8);
  int v51 = *(unsigned __int8 *)(v3 + 16);
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(v3 + *(int *)(a2 + 56), (uint64_t)v76, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  uint64_t v35 = *(void *)(v3 + *(int *)(a2 + 64));
  uint64_t v36 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v54, v3, a2);
  uint64_t v37 = v35;
  if (v35 == 1) {
    uint64_t v37 = swift_retain();
  }
  uint64_t v50 = v37;
  outlined copy of Text.LineStyle?(v33, v34);
  uint64_t v38 = v57;
  swift_retain();
  uint64_t v39 = v52;
  swift_retain();
  outlined copy of Transaction?(v35);
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v36, a2);
  UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)((uint64_t)v17, (uint64_t)v75, v53, (uint64_t)&v60, v38, v39, v51, a3, (uint64_t)v76, v50, v7);
  outlined consume of Text.LineStyle?(v59, v34);
}

uint64_t UpdateViewDestinationViewModifier.RequestWriter.selectionIdentifier.getter@<X0>(void *a1@<X8>)
{
  uint64_t updated = type metadata accessor for UpdateViewDestinationViewModifier();
  uint64_t v4 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = *((void *)v1 + 1);
  uint64_t v8 = *((void *)v1 + 2);
  int v9 = v1[8];
  char v10 = *((unsigned char *)v1 + 36);
  char v11 = *((unsigned char *)v1 + 104);
  int v14 = *v1;
  uint64_t v15 = v7;
  uint64_t v16 = v8;
  uint64_t v17 = *((void *)v1 + 3);
  int v18 = v9;
  char v19 = v10;
  long long v20 = *(_OWORD *)(v1 + 10);
  long long v21 = *(_OWORD *)(v1 + 14);
  long long v22 = *(_OWORD *)(v1 + 18);
  long long v23 = *(_OWORD *)(v1 + 22);
  char v24 = v11;
  UpdateViewDestinationViewModifier.RequestWriter.modifier.getter((uint64_t)&v14 - v5);
  uint64_t v12 = *(void *)&v6[*(int *)(updated + 48)];
  outlined copy of Text.LineStyle?(v7, v8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, updated);
  *a1 = 0;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v12;
  return result;
}

uint64_t outlined copy of Text.LineStyle?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t closure #1 in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(a6, (uint64_t)v11, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  swift_retain();
  outlined copy of Text.LineStyle?(a3, a4);
  return specialized Dictionary.subscript.setter((uint64_t)v11, a2, a3, a4, a5);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 128) >> 1 == 4294967294)
  {
    _sypSgWOhTm_1(a1, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, a4, a5, (uint64_t)v13);
    swift_release();
    outlined consume of Text.LineStyle?(a3, a4);
    return _sypSgWOhTm_1((uint64_t)v13, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  }
  else
  {
    outlined init with take of UpdateViewDestinationRequest(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    uint64_t *v5 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    return outlined consume of Text.LineStyle?(a3, a4);
  }
}

uint64_t outlined consume of Text.LineStyle?(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_release();
  }
  return result;
}

int *$defer #1 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1)
{
  type metadata accessor for UpdateViewDestinationViewModifier.RequestWriter();
  uint64_t result = (int *)AGGraphGetWeakValue();
  if (result) {
    int v3 = *result;
  }
  else {
    int v3 = 0;
  }
  *(_DWORD *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 36) = result == 0;
  return result;
}

uint64_t type metadata accessor for UpdateViewDestinationViewModifier.RequestWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t $defer #2 <A>() in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI19NavigationAuthorityVSgWOcTm_1(a2, (uint64_t)v32, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  if (v33[13] >> 1 == 4294967294)
  {
    outlined destroy of UpdateViewDestinationRequest?((uint64_t)v32, &lazy cache variable for type metadata for UpdateViewDestinationRequest?, (uint64_t)&type metadata for UpdateViewDestinationRequest);
  }
  else
  {
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)v33, (uint64_t)v22, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    outlined release of NavigationRequest?(v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationRequest?);
    outlined destroy of UpdateViewDestinationRequest((uint64_t)v32);
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)v22, (uint64_t)&v23, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)&v23) != 1)
    {
      uint64_t v3 = v23;
      uint64_t v4 = v24;
      uint64_t v5 = v25;
      uint64_t v6 = v26;
      uint64_t v7 = v27;
      uint64_t v8 = v28;
      uint64_t v9 = v29;
      uint64_t v10 = v30;
      char v11 = v31;
      outlined copy of NavigationRequest.Action(v23, v24, v25, v26, v27, v28, v29, v30, v31);
      outlined release of NavigationRequest?(v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationRequest?);
      goto LABEL_6;
    }
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = -1;
LABEL_6:
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 96);
  unsigned __int8 v20 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v10;
  *(unsigned char *)(a1 + 104) = v11;
  return outlined consume of NavigationRequest.Action?(v12, v13, v14, v15, v16, v17, v18, v19, v20);
}

unint64_t lazy protocol witness table accessor for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier;
  if (!lazy protocol witness table cache variable for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemNavigationSelectionStyleModifier and conformance PlatformItemNavigationSelectionStyleModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSelectionTag and conformance NavigationSelectionTag()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag;
  if (!lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag;
  if (!lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSelectionTag and conformance NavigationSelectionTag);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BaseModifier.Child and conformance BaseModifier.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type BaseModifier.Child and conformance BaseModifier.Child;
  if (!lazy protocol witness table cache variable for type BaseModifier.Child and conformance BaseModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseModifier.Child and conformance BaseModifier.Child);
  }
  return result;
}

uint64_t type metadata accessor for BaseModifier.SelectionStateBox()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver()
{
  unint64_t result = lazy protocol witness table cache variable for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver;
  if (!lazy protocol witness table cache variable for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BaseModifier.SelectionObserver and conformance BaseModifier.SelectionObserver);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type External<Bool?> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<Bool?> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<Bool?> and conformance External<A>)
  {
    type metadata accessor for _GraphValue<NavigationLinkPresentedValue?>(255, &lazy cache variable for type metadata for External<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<Bool?> and conformance External<A>);
  }
  return result;
}

void destructiveInjectEnumTag for NavigationLinkButtonStyle.Payload(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (a2 > 1)
  {
    uint64_t v8 = *(void *)(v4 + 64);
    size_t v9 = ((*(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v8;
    unint64_t v10 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
        + 24;
    if (v10 <= v9) {
      size_t v11 = v9;
    }
    else {
      size_t v11 = v10;
    }
    unsigned int v12 = a2 - 2;
    if (v11 < 4)
    {
      unsigned int v13 = v12 >> (8 * v11);
      int v14 = v12 & ~(-1 << (8 * v11));
      a1[v11] = v13 + 2;
      bzero(a1, v11);
      if (v11 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if (v11 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
    else
    {
      a1[v11] = 2;
      bzero(a1, v11);
      *(_DWORD *)a1 = v12;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 64);
    unint64_t v6 = ((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
    unint64_t v7 = ((*(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + v5;
    if (v6 > v7) {
      unint64_t v7 = v6;
    }
    a1[v7] = a2;
  }
}

__n128 GridItem.init(_:spacing:alignment:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, __n128 *a7@<X8>)
{
  unsigned __int8 v7 = a1[1].n128_u8[0];
  __n128 result = *a1;
  *a7 = *a1;
  a7[1].n128_u8[0] = v7;
  a7[1].n128_u64[1] = a2;
  a7[2].n128_u8[0] = a3 & 1;
  a7[2].n128_u64[1] = a4;
  a7[3].n128_u64[0] = a5;
  a7[3].n128_u8[8] = a6 & 1;
  return result;
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance TabView<A, B>.TransformEnvironment(uint64_t a1, uint64_t a2)
{
  return specialized static TabView.TransformEnvironment.makeEnvironment(modifier:environment:)(a2);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PrimitiveButtonStyleContainerModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.scrollClipDisabled(_:)(char a1)
{
  return View.scrollIndicatorsAlwaysOverlayContent(_:)(a1);
}

uint64_t initializeWithCopy for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v5;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80) & 0xF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 | v14 | 7;
  uint64_t v16 = (v15 + 161 + a1) & ~v15;
  uint64_t v17 = (v15 + 161 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v16, v17, v10);
  uint64_t v18 = *(void *)(v11 + 64) + 7;
  uint64_t v19 = (void *)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  unsigned __int8 v20 = (void **)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = *v20;
  *uint64_t v19 = *v20;
  uint64_t v22 = ((unint64_t)v19 + v14 + 8) & ~v14;
  uint64_t v23 = ((unint64_t)v20 + v14 + 8) & ~v14;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  id v25 = v21;
  v24(v22, v23, AssociatedTypeWitness);
  unint64_t v26 = *(void *)(v13 + 64) + ((v14 + 8 + (v18 & 0xFFFFFFFFFFFFFFF8)) & ~v14) + 3;
  uint64_t v27 = (_DWORD *)((v26 + v16) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v28 = (_DWORD *)((v26 + v17) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v27 = *v28;
  *(_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

ValueMetadata *type metadata accessor for PresentSharingPickerAction()
{
  return &type metadata for PresentSharingPickerAction;
}

uint64_t SwiftUIGlue2.transformingEquivalentAttributes(_:)@<X0>(uint64_t a1@<X8>)
{
  return AttributedString.transformingUIKitAttributedForSwiftUI()(a1);
}

uint64_t getEnumTag for AnyNavigationSplitVisibility.Kind(unsigned __int16 *a1)
{
  unsigned int v1 = *a1;
  unsigned int v2 = v1 >> 14;
  unsigned int v3 = (v1 & 3 | (4 * ((v1 >> 8) & 1))) + 3;
  if (v2 == 3) {
    return v3;
  }
  else {
    return v2;
  }
}

uint64_t initializeWithCopy for HelpView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  outlined copy of Text.Storage(*(void *)v8, v10, v11);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PrimitiveTargetVisibilityModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  return static PrimitiveTargetVisibilityModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ReadDestinationsModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static ReadDestinationsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t partial apply for implicit closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ReadDestinationsModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in AppGraph.extendedLaunchTestName()()
{
  return closure #1 in AppGraph.extendedLaunchTestName()();
}

uint64_t closure #1 in AppGraph.extendedLaunchTestName()()
{
  return GraphHost.preferenceValue<A>(_:)();
}

uint64_t storeEnumTagSinglePayload for AGWeakAttribute.__Unnamed_struct__details(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ButtonInteractionPhase()
{
  return &type metadata for ButtonInteractionPhase;
}

uint64_t specialized static ScrollViewLayoutComputer.Engine.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    goto LABEL_10;
  }
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v2 = *((void *)a2 + 5);
  if ((static EdgeInsets.== infix(_:_:)() & 1) == 0) {
    goto LABEL_10;
  }
  if (!(void)v5)
  {
    if (!v2)
    {
      char v3 = 1;
      return v3 & 1;
    }
    goto LABEL_9;
  }
  if (!v2)
  {
    swift_retain();
LABEL_9:
    swift_release();
LABEL_10:
    char v3 = 0;
    return v3 & 1;
  }
  swift_retain_n();
  char v3 = static LayoutComputer.== infix(_:_:)();
  swift_release();
  swift_release();
  return v3 & 1;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.HostingControllerManagedBarsKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static EnvironmentValues.HostingControllerManagedBarsKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t initializeWithCopy for AccessibilityProxyModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(unsigned __int8 *)(v8 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(unsigned __int8 *)(v8 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.WindowToolbarConfigurationKey@<D0>(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 773;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = xmmword_1883BE5B0;
  *(unsigned char *)(a1 + 24) = -4;
  return result;
}

ValueMetadata *type metadata accessor for NavigationRequest()
{
  return &type metadata for NavigationRequest;
}

ValueMetadata *type metadata accessor for ListHasLazyStackBehaviorInScrollableAxisModifier()
{
  return &type metadata for ListHasLazyStackBehaviorInScrollableAxisModifier;
}

ValueMetadata *type metadata accessor for AutomaticTextFieldLabelDisplayMode()
{
  return &type metadata for AutomaticTextFieldLabelDisplayMode;
}

ValueMetadata *type metadata accessor for NavigationStackViewPosition()
{
  return &type metadata for NavigationStackViewPosition;
}

ValueMetadata *type metadata accessor for ToggleStyleConfiguration()
{
  return &type metadata for ToggleStyleConfiguration;
}

ValueMetadata *type metadata accessor for IsSearchAllowedPredicate()
{
  return &type metadata for IsSearchAllowedPredicate;
}

ValueMetadata *type metadata accessor for HelpStyleConfiguration.Content()
{
  return &type metadata for HelpStyleConfiguration.Content;
}

ValueMetadata *type metadata accessor for LazyContainerModifier()
{
  return &type metadata for LazyContainerModifier;
}

void partial apply for closure #1 in UIHostingContentView.setupSizeInvalidationHandler(_:)(double *a1, double *a2)
{
  closure #1 in UIHostingContentView.setupSizeInvalidationHandler(_:)(a1, a2, *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(uint64_t (**)(uint64_t))(v2 + 32), *(void **)(v2 + 40));
}

ValueMetadata *type metadata accessor for PopoverPresentation.Key()
{
  return &type metadata for PopoverPresentation.Key;
}

ValueMetadata *type metadata accessor for _PositionLayout()
{
  return &type metadata for _PositionLayout;
}

void *type metadata accessor for Fix_53164375()
{
  return &unk_1ED411460;
}

uint64_t assignWithCopy for ScrollViewLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  long long v10 = *(_OWORD *)(a2 + 168);
  long long v11 = *(_OWORD *)(a2 + 184);
  long long v12 = *(_OWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v12;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 168) = v10;
  return a1;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void protocol witness for ViewGraphRenderObserver.didRender() in conformance _UIHostingView<A>()
{
}

Swift::Void __swiftcall _UIHostingView.didRender()()
{
}

void sub_18739F420(void *a1)
{
  if (a1)
  {
    UIHostingController.didRender()();
  }
}

Swift::Void __swiftcall UIHostingController.didRender()()
{
  uint64_t v0 = specialized UIHostingController.contentScrollViewBridge.getter();
  if (v0)
  {
    uint64_t v1 = v0;
    if (*(void *)(v0 + 40))
    {
      uint64_t v2 = MEMORY[0x18C119DF0](v0 + 16);
      if (v2)
      {
        id v7 = (id)v2;
        swift_retain();
        uint64_t v3 = swift_bridgeObjectRetain();
        long long v4 = (void *)UIKitContentScrollViewBridge.findBestCandidates(in:)(v3);
        long long v6 = v5;
        swift_bridgeObjectRelease();
        if (v4 != (void *)1)
        {
          *(void *)(v1 + 40) = 0;
          swift_bridgeObjectRelease();
          update #1 (edge:) in UIKitContentScrollViewBridge.update()(4, v7, v1, v4, v6);
          update #1 (edge:) in UIKitContentScrollViewBridge.update()(1, v7, v1, v4, v6);
          outlined consume of UIKitContentScrollViewBridge.Candidates?(v4, v6);
        }
        swift_release();
      }
    }
  }
}

uint64_t BarAppearanceBridge.preferencesDidChange<A>(_:hostingController:)(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(a2, v7);
  uint64_t v6 = v2;
  if (BarAppearanceBridge.preferencesDidChange(_:updateContext:)(&v6, (uint64_t)v7))
  {
    uint64_t v3 = (void *)specialized UIHostingController.host.getter();
    LOWORD(v6) = 2;
    type metadata accessor for _UIHostingView();
    id v4 = v3;
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  swift_unknownObjectWeakAssign();
  return outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v7);
}

void BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4FBC860];
  a2[9] = MEMORY[0x1E4FBC860];
  a2[10] = v3;
  *a2 = a1;
  a2[1] = 0;
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_navigationController);
  if (!v5)
  {
    UIHostingController.overrides.getter((uint64_t)v20);
    id v5 = (id)MEMORY[0x18C119DF0](&v21);
    outlined destroy of HostingControllerOverrides((uint64_t)v20);
  }
  id v6 = objc_msgSend(v4, sel_splitViewController);
  id v7 = v6;
  if (v6)
  {
    id v8 = v6;
    if (v5) {
      goto LABEL_5;
    }
LABEL_12:

LABEL_16:
    id v9 = 0;
    goto LABEL_17;
  }
  UIHostingController.overrides.getter((uint64_t)v20);
  id v9 = (id)MEMORY[0x18C119DF0](&v22);
  outlined destroy of HostingControllerOverrides((uint64_t)v20);
  if (!v9)
  {
    id v7 = 0;
    goto LABEL_17;
  }
  id v7 = v9;
  id v16 = 0;
  if (!v5) {
    goto LABEL_12;
  }
LABEL_5:
  id v9 = objc_msgSend(v5, sel_parentViewController);
  if (!v9)
  {

    goto LABEL_17;
  }
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {

    goto LABEL_16;
  }
  id v11 = (id)v10;
  id v12 = v9;
  id v9 = objc_msgSend(v11, sel_parentViewController);
  if (v9)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    id v13 = v7;
    id v14 = v9;
    char v15 = static NSObject.== infix(_:_:)();

    if (v15)
    {
      id v9 = (id)a2[1];
      goto LABEL_18;
    }

    id v9 = (id)a2[1];
  }
  else
  {
  }
LABEL_17:
  id v11 = v5;
LABEL_18:

  a2[1] = v11;
  UIHostingController.overrides.getter((uint64_t)(a2 + 2));
  uint64_t v17 = (char *)specialized UIHostingController.toolbarBridge.getter();
  if (v17)
  {
    uint64_t v18 = *(void *)&v17[direct field offset for ToolbarBridge.navigationAdaptor];
    uint64_t v19 = v17;
    swift_bridgeObjectRetain();

    swift_bridgeObjectRelease();
    a2[9] = v18;
  }
  else
  {
  }
}

uint64_t UIHostingController.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v15 = *a1;
  uint64_t v3 = v15;
  ModernNavigationBridge.preferencesDidChange(_:)(&v15);
  uint64_t v15 = v3;
  UIKitDialogBridge.preferencesDidChange(_:)(&v15);
  uint64_t v15 = v3;
  FileImportExportBridge.preferencesDidChange(_:)(&v15);
  id v4 = (void *)specialized UIHostingController.keyboardShortcutBridge.getter();
  if (v4 && *((unsigned char *)v4 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences) == 1)
  {
    id v5 = v4;
    PreferenceValues.subscript.getter();
    int v6 = v16;
    id v7 = &v5[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings];
    *(void *)id v7 = v15;
    *((_DWORD *)v7 + 2) = v6;

    swift_bridgeObjectRelease();
  }
  uint64_t v15 = v3;
  UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)(&v15);
  uint64_t v15 = v3;
  UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)(&v15);
  if (specialized UIHostingController.navigationBridge.getter())
  {
    uint64_t v15 = v3;
    swift_retain();
    UIKitNavigationBridge.preferencesDidChange(_:)();
    swift_release();
  }
  if (specialized UIHostingController.contentScrollViewBridge.getter())
  {
    uint64_t v15 = v3;
    swift_retain();
    UIKitContentScrollViewBridge.preferencesDidChange(_:)(&v15);
    swift_release();
  }
  id v8 = (void *)specialized UIHostingController.toolbarBridge.getter();
  if (v8)
  {
    uint64_t v15 = v3;
    id v9 = v8;
    ToolbarBridge.preferencesDidChange<A>(_:hostingController:)(&v15, v2);
  }
  uint64_t v10 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v10)
  {
    uint64_t v15 = v3;
    id v11 = v10;
    BarAppearanceBridge.preferencesDidChange<A>(_:hostingController:)(&v15, v2);
  }
  id v12 = (void *)specialized UIHostingController.inspectorBridgeV5.getter();
  if (v12)
  {
    uint64_t v15 = v3;
    id v13 = v12;
    SheetBridge.preferencesDidChange(_:)(&v15);
  }
  if (specialized UIHostingController.alwaysOnBridge.getter())
  {
    uint64_t v15 = v3;
    swift_retain();
    AlwaysOnBridge.preferencesDidChange(_:)();
    swift_release();
  }
  uint64_t v15 = v3;
  return ContainerBackgroundBridge.preferencesDidChange(_:)(&v15);
}

void UIHostingController._update(environment:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (specialized UIHostingController.alwaysOnBridge.getter())
  {
    swift_retain();
    AlwaysOnBridge.update(environment:)((long long *)a1);
    swift_release();
  }
  uint64_t v4 = *(void *)&v1[direct field offset for UIHostingController.dialogBridge];
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(v4 + 88) = *(void *)a1;
  *(void *)(v4 + 96) = v5;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  if (specialized UIHostingController.navigationBridge.getter())
  {
    swift_retain();
    UIKitNavigationBridge.update(environment:)((uint64_t *)a1);
    swift_release();
  }
  int v6 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v6)
  {
    id v7 = v6;
    BarAppearanceBridge.update(environment:)((void *)a1);
  }
  if (specialized UIHostingController.contentScrollViewBridge.getter())
  {
    swift_retain();
    UIKitContentScrollViewBridge.update(environment:)(a1);
    swift_release();
  }
  if (specialized UIHostingController.testBridge.getter())
  {
    swift_retain();
    PPTTestBridge.update(environment:)(a1);
    swift_release();
  }
  id v8 = v2;
  WithCurrentHostingControllerAction.init<A>(_:)(v8, (uint64_t)v14);
  outlined init with copy of WithCurrentHostingControllerAction((uint64_t)v14, (uint64_t)v15);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>, (uint64_t)&type metadata for EnvironmentValues.WithCurrentHostingControllerKey, (uint64_t)&protocol witness table for EnvironmentValues.WithCurrentHostingControllerKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>, (uint64_t)&type metadata for EnvironmentValues.WithCurrentHostingControllerKey, (uint64_t)&protocol witness table for EnvironmentValues.WithCurrentHostingControllerKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of WithCurrentHostingControllerAction((uint64_t)v14);
  ContainerBackgroundBridge.update(environment:)(a1);
  uint64_t v9 = *(void *)(a1 + 8);
  v14[0] = *(void *)a1;
  v14[1] = v9;
  swift_retain();
  swift_retain();
  UIHostingController.persistentSystemOverlaysEnvironmentDidChange(environment:)((uint64_t)v14);
  swift_release();
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarBridge<UIKitToolbarStrategy>, (uint64_t)&type metadata for UIKitToolbarStrategy, (uint64_t)&protocol witness table for UIKitToolbarStrategy, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
  uint64_t v10 = (void *)specialized UIHostingController.toolbarBridge.getter();
  id v11 = v10;
  static ToolbarBridge.update<A>(environment:toolbarBridge:hostingController:)((uint64_t *)a1, v10, v8);

  id v12 = (void *)specialized UIHostingController.inspectorBridgeV5.getter();
  if (v12)
  {
    id v13 = v12;
    UIKitInspectorBridgeV5.update(environment:)((uint64_t *)a1);
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized UIHostingController.navigationBridge.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.navigationBridge);
}

uint64_t specialized UIHostingController.contentScrollViewBridge.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.contentScrollViewBridge);
}

uint64_t specialized UIHostingController.alwaysOnBridge.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.alwaysOnBridge);
}

uint64_t specialized UIHostingController.inspectorBridgeV5.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.inspectorBridgeV5);
}

void @objc UIHostingController.viewWillLayoutSubviews()(void *a1)
{
  id v1 = a1;
  UIHostingController.viewWillLayoutSubviews()();
}

Swift::Void __swiftcall UIHostingController.viewWillLayoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for UIHostingController();
  objc_msgSendSuper2(&v1, sel_viewWillLayoutSubviews);
  UIHostingController._viewWillLayoutSubviews()();
}

void UIHostingController.layoutToolbarIfNeeded()()
{
  uint64_t v1 = specialized UIHostingController.toolbarBridge.getter();
  if (!v1) {
    return;
  }
  uint64_t v2 = *(void **)(v1 + direct field offset for ToolbarBridge.platformVended + 32);
  if (!v2) {
    return;
  }
  id v37 = v2;
  id v3 = objc_msgSend(v37, sel_items);
  if (!v3) {
    goto LABEL_18;
  }
  uint64_t v4 = v3;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_18:
    id v35 = objc_msgSend(v37, sel_superview);
    double v24 = 0.0;
    if (v35)
    {

      objc_msgSend(v37, sel_removeFromSuperview);
    }
    goto LABEL_20;
  }
  id v7 = objc_msgSend(v37, sel_superview);
  if (!v7)
  {
    id v8 = objc_msgSend(v0, sel_view);
    if (!v8)
    {
LABEL_29:
      __break(1u);
      return;
    }
    id v7 = v8;
    objc_msgSend(v8, sel_addSubview_, v37);
  }

  id v9 = objc_msgSend(v0, sel_view);
  if (!v9)
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v10 = v9;
  objc_msgSend(v9, sel_safeAreaInsets);
  double v12 = v11;

  objc_msgSend(v0, sel_additionalSafeAreaInsets);
  if (v12 - v13 < 0.0) {
    double v14 = 0.0;
  }
  else {
    double v14 = v12 - v13;
  }
  id v15 = objc_msgSend(v0, sel_view);
  if (!v15) {
    goto LABEL_27;
  }
  int v16 = v15;
  objc_msgSend(v15, sel_bounds);
  double v18 = v17;
  double v20 = v19;

  objc_msgSend(v37, sel_sizeThatFits_, v18, v20);
  double v22 = v21;
  double v24 = v23;
  id v25 = objc_msgSend(v0, sel_view);
  if (!v25)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  unint64_t v26 = v25;
  objc_msgSend(v25, sel_bounds);
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  CGFloat v32 = v31;
  CGFloat v34 = v33;

  v39.origin.x = v28;
  v39.origin.y = v30;
  v39.size.width = v32;
  v39.size.height = v34;
  objc_msgSend(v37, sel_setFrame_, 0.0, CGRectGetMaxY(v39) - v24 - v14, v22, v24);
LABEL_20:
  objc_msgSend(v0, sel_additionalSafeAreaInsets);
  if (v36 != v24)
  {
    objc_msgSend(v0, sel_additionalSafeAreaInsets);
    objc_msgSend(v0, sel_setAdditionalSafeAreaInsets_);
  }
}

uint64_t specialized UIHostingController.toolbarBridge.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.toolbarBridge);
}

void WithCurrentHostingControllerAction.init<A>(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  outlined init with take of WeakBox<UIViewController>((uint64_t)v4, a2);
}

uint64_t outlined init with take of WeakBox<UIViewController>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIViewController>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<UIViewController>()
{
  if (!lazy cache variable for type metadata for WeakBox<UIViewController>)
  {
    type metadata accessor for UIViewController();
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIViewController>);
    }
  }
}

uint64_t outlined destroy of WithCurrentHostingControllerAction(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of WithCurrentHostingControllerAction(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ContainerBackgroundBridge.update(environment:)(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 137);
  uint64_t v3 = *(void *)(a1 + 8);
  _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v2 == 5)
  {
    if (v8 == 5) {
      goto LABEL_19;
    }
LABEL_9:
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (v7[2] == 5) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = ContainerBackgroundKind.Builtin.versionSeedTracker.getter();
    }
    *(void *)(v1 + 48) = v4;
    swift_release();
    _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v3)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    unsigned __int8 v5 = *(unsigned char *)(v1 + 137);
    *(unsigned char *)(v1 + 137) = v7[1];
    v7[0] = v5;
    ContainerBackgroundBridge.hostsBackgroundPlacement.didset(v7);
    goto LABEL_19;
  }
  if (v8 == 5 || v2 != v8) {
    goto LABEL_9;
  }
LABEL_19:
  _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<CompositeNavigationSplitViewVisibility.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>, (uint64_t)&type metadata for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, (uint64_t)&protocol witness table for ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t UIHostingController.persistentSystemOverlaysEnvironmentDidChange(environment:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  int v2 = v6;
  uint64_t result = UIHostingController.persistentSystemOverlays.getter(&v5);
  if (result == 3 || v2 != result)
  {
    *(unsigned char *)(v1 + direct field offset for UIHostingController.persistentSystemOverlays + 2) = v2;
    uint64_t result = UIHostingController.persistentSystemOverlays.getter(&v4);
    if (HIBYTE(v4) << 8 == 512) {
      UIHostingController.updateHomeIndicator(animated:)();
    }
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePersistentSystemOverlaysKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t PPTTestBridge.update(environment:)(uint64_t result)
{
  if (*(unsigned char *)(v1 + 32) == 1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = result;
    if (*(void *)(result + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    uint64_t v5 = v7[0];
    uint64_t v4 = v7[1];
    unint64_t result = outlined destroy of PPTTestCase?((uint64_t)v7);
    if (!v5 && v4 == 1)
    {
      *(unsigned char *)(v2 + 32) = 0;
      swift_beginAccess();
      outlined init with copy of PPTTestCase?(v2 + 40, (uint64_t)v7);
      outlined init with copy of PPTTestCase?((uint64_t)v7, (uint64_t)v6);
      type metadata accessor for EnvironmentPropertyKey<PPTTestCaseEnvironmentKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<PPTTestCaseEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (*(void *)(v3 + 8))
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      return outlined destroy of PPTTestCase?((uint64_t)v7);
    }
  }
  return result;
}

uint64_t specialized UIHostingController.keyboardShortcutBridge.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.keyboardShortcutBridge);
}

uint64_t UIKitContentScrollViewBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v24 = *a1;
  PreferenceValues.subscript.getter();
  uint64_t v3 = v22;
  int v4 = v23;
  int v5 = *(_DWORD *)(v1 + 24);
  if (v5 == -1 || v23 == -1 || v5 != v23)
  {
    unsigned __int8 v8 = (void *)MEMORY[0x18C119DF0](v1 + 16);
    if (v8)
    {

      uint64_t v9 = *(void *)(v22 + 16);
      if (v9)
      {
        uint64_t v10 = v22 + 32;
        swift_bridgeObjectRetain();
        do
        {
          outlined init with copy of ContentScrollViewBox(v10, (uint64_t)&v22);
          double v11 = (void *)MEMORY[0x18C119DF0](&v22);
          if (v11)
          {
            double v12 = v11;
            objc_msgSend(v11, sel_frame);
            v26.origin.x = 0.0;
            v26.origin.y = 0.0;
            v26.size.width = 0.0;
            v26.size.height = 0.0;
            BOOL v13 = CGRectEqualToRect(v25, v26);

            outlined destroy of ContentScrollViewBox((uint64_t)&v22);
            if (v13)
            {
              swift_bridgeObjectRelease();
              int v14 = 0;
              goto LABEL_18;
            }
          }
          else
          {
            outlined destroy of ContentScrollViewBox((uint64_t)&v22);
          }
          v10 += 48;
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease();
      }
      int v14 = 1;
LABEL_18:
      *(void *)(v1 + 40) = v3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v14)
      {
        if (*(void *)(v1 + 40))
        {
          uint64_t v15 = MEMORY[0x18C119DF0](v1 + 16);
          if (v15)
          {
            int v16 = (void *)v15;
            uint64_t v17 = swift_bridgeObjectRetain();
            double v18 = (void *)UIKitContentScrollViewBridge.findBestCandidates(in:)(v17);
            double v20 = v19;
            swift_bridgeObjectRelease();
            if (v18 != (void *)1)
            {
              *(void *)(v2 + 40) = 0;
              swift_bridgeObjectRelease();
              update #1 (edge:) in UIKitContentScrollViewBridge.update()(4, v16, v2, v18, v20);
              update #1 (edge:) in UIKitContentScrollViewBridge.update()(1, v16, v2, v18, v20);
              outlined consume of UIKitContentScrollViewBridge.Candidates?(v18, v20);
            }
          }
        }
      }
    }
  }
  *(_DWORD *)(v2 + 24) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t ContainerBackgroundBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  v14[0] = *a1;
  uint64_t result = PreferenceValues.seed.getter();
  if (v13 && *(unsigned char *)(v1 + 137) != 5)
  {
    uint64_t v4 = *(void *)(v1 + 48);
    if (v4)
    {
      v14[0] = v2;
      uint64_t v5 = swift_allocObject();
      swift_weakInit();
      unsigned __int8 v6 = *(void (**)(void *, void *(*)(uint64_t), uint64_t))(*(void *)v4 + 80);
      swift_retain();
      v6(v14, partial apply for closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:), v5);
      swift_release();
      swift_release();
    }
    unsigned __int8 v8 = ContainerBackgroundBridge.transparentBackgroundSeedTracker.modify();
    if (*(unsigned char *)(v7 + 4))
    {
      return ((uint64_t (*)(void *, void))v8)(v14, 0);
    }
    else
    {
      uint64_t v9 = (_DWORD *)v7;
      swift_weakInit();
      uint64_t v10 = v2;
      PreferenceValues.subscript.getter();
      if (*v9 == -1 || v12 == -1 || *v9 != v12)
      {
        *uint64_t v9 = v12;
        LOBYTE(v10) = v11;
        specialized closure #2 in ContainerBackgroundBridge.preferencesDidChange(_:)((unsigned __int8 *)&v10);
      }
      ((void (*)(void *, void))v8)(v14, 0);
      return swift_weakDestroy();
    }
  }
  return result;
}

uint64_t ModernNavigationBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  swift_beginAccess();
  v31[0] = v3;
  PreferenceValues.subscript.getter();
  int v4 = *(_DWORD *)(v2 + 16);
  if (v4 != -1 && v33 != -1 && v4 == v33)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  *(_DWORD *)(v2 + 16) = v33;
  uint64_t v7 = v32;
  uint64_t v8 = v32 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v32 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v32 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18)
        {
          int64_t v14 = v17 + 3;
          if (v17 + 3 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = *(void *)(v8 + 8 * v14);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_30:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_31:
    outlined init with copy of UpdateViewDestinationRequest(*(void *)(v7 + 56) + 160 * v16, (uint64_t)v31);
    outlined init with take of UpdateViewDestinationRequest((uint64_t)v31, (uint64_t)v29);
    outlined init with copy of NavigationAuthority?((uint64_t)v29, (uint64_t)v26);
    if (v27 == 1)
    {
      outlined destroy of NavigationAuthority?((uint64_t)v26);
    }
    else
    {
      outlined init with take of NavigationAuthority((uint64_t)v26, (uint64_t)v28);
      outlined init with take of NavigationRequest?((uint64_t)&v30, (uint64_t)v23);
      outlined init with take of NavigationRequest?((uint64_t)v23, (uint64_t)v24);
      if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v24) == 1)
      {
        outlined destroy of NavigationAuthority((uint64_t)v28);
      }
      else
      {
        v20[6] = v24[6];
        v20[7] = v24[7];
        uint64_t v21 = v25;
        void v20[2] = v24[2];
        v20[3] = v24[3];
        v20[4] = v24[4];
        v20[5] = v24[5];
        v20[0] = v24[0];
        v20[1] = v24[1];
        outlined init with take of NavigationRequest?((uint64_t)v23, (uint64_t)v22);
        outlined retain of NavigationRequest((uint64_t)v22);
        NavigationAuthority.enqueueRequest(_:)(v20);
        outlined destroy of NavigationAuthority((uint64_t)v28);
        outlined release of NavigationRequest?((uint64_t)v23);
      }
    }
    uint64_t result = outlined destroy of UpdateViewDestinationRequest((uint64_t)v29);
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v12)
  {
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_30;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_30;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t FileImportExportBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned __int8 v6 = &v24[-v5];
  type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
  uint64_t v11 = *(void *)(updated - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](updated);
  int v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = &v24[-v15];
  uint64_t v25 = *a1;
  swift_beginAccess();
  FileImportExportBridge.PresentationState.update(preferences:)(&v25, (uint64_t)v9);
  swift_endAccess();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, updated) == 1)
  {
    int64_t v17 = (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?;
    uint64_t v18 = (uint64_t)v9;
  }
  else
  {
    outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v9, (uint64_t)v16, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    static TaskPriority.userInitiated.getter();
    uint64_t v19 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 0, 1, v19);
    outlined init with copy of FileImportExportBridge.PresentationState((uint64_t)v16, (uint64_t)v13, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = v2;
    outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v13, (uint64_t)v21 + v20, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    id v22 = v2;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)async function pointer to partial apply for closure #1 in FileImportExportBridge.preferencesDidChange(_:), (uint64_t)v21);
    swift_release();
    int64_t v17 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect;
    uint64_t v18 = (uint64_t)v16;
  }
  return outlined destroy of FileImportExportBridge.Presentation(v18, v17);
}

uint64_t UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = specialized UIHostingController.screenEdgesSystemGestureSeedTracker.getter();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (int *)(v2 + 48);
    uint64_t result = swift_bridgeObjectRetain();
    char v6 = 0;
    uint64_t v7 = 1;
    while (1)
    {
      if (v6)
      {
        if (v3 == v7) {
          goto LABEL_13;
        }
        char v6 = 1;
      }
      else
      {
        int v10 = *v4;
        uint64_t v13 = v1;
        uint64_t result = PreferenceValues.seed<A>(for:)(&v12);
        if (v10 == -1 || (int v11 = v12, v12 == -1))
        {
          if (v3 == v7)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            goto LABEL_14;
          }
          BOOL v8 = 0;
        }
        else
        {
          BOOL v8 = v10 == v12;
          if (v3 == v7)
          {
            swift_bridgeObjectRelease();
            if (v10 != v11)
            {
LABEL_14:
              uint64_t v12 = v1;
              PreferenceValues.subscript.getter();
              UIHostingController.deferredEdges.setter(v13 | (BYTE1(v13) << 8));
              uint64_t v12 = v1;
              PreferenceValues.subscript.getter();
              UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.setter(v13);
              specialized UIHostingController.host.getter();
              _UIHostingView.viewController.getter();
            }
            break;
          }
        }
        char v6 = !v8;
      }
      v4 += 6;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
        return result;
      }
    }
  }

  return $defer #1 <A>() in UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)();
}

uint64_t UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = specialized UIHostingController.persistentSystemOverlaysSeedTracker.getter();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    char v6 = (int *)(v4 + 48);
    uint64_t result = swift_bridgeObjectRetain();
    char v8 = 0;
    uint64_t v9 = 1;
    while (1)
    {
      if (v8)
      {
        if (v5 == v9) {
          goto LABEL_13;
        }
        char v8 = 1;
      }
      else
      {
        int v12 = *v6;
        uint64_t v15 = v3;
        uint64_t result = PreferenceValues.seed<A>(for:)(&v14);
        if (v12 == -1 || (int v13 = v14, v14 == -1))
        {
          if (v5 == v9)
          {
LABEL_13:
            swift_bridgeObjectRelease();
            goto LABEL_14;
          }
          BOOL v10 = 0;
        }
        else
        {
          BOOL v10 = v12 == v14;
          if (v5 == v9)
          {
            swift_bridgeObjectRelease();
            if (v12 != v13)
            {
LABEL_14:
              uint64_t v14 = v3;
              PreferenceValues.subscript.getter();
              *(_WORD *)(v2 + direct field offset for UIHostingController.persistentSystemOverlays) = v15;
              UIHostingController.persistentSystemOverlays.getter(&v15);
              uint64_t v14 = v3;
              PreferenceValues.subscript.getter();
              UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.setter(v15);
              UIHostingController.updateHomeIndicator(animated:)();
            }
            break;
          }
        }
        char v8 = !v10;
      }
      v6 += 6;
      if (__OFADD__(v9++, 1))
      {
        __break(1u);
        return result;
      }
    }
  }

  return $defer #1 <A>() in UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)();
}

uint64_t specialized UIHostingController.screenEdgesSystemGestureSeedTracker.getter()
{
  uint64_t v1 = v0 + direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t specialized UIHostingController.persistentSystemOverlaysSeedTracker.getter()
{
  uint64_t v1 = v0 + direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t UIKitDialogBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  *(void *)&long long v49 = *a1;
  PreferenceValues.subscript.getter();
  uint64_t v4 = v65;
  int v5 = *(_DWORD *)(v1 + 56);
  if (v5 == -1 || DWORD2(v65) == -1 || v5 != DWORD2(v65))
  {
    *(_DWORD *)(v1 + 56) = DWORD2(v65);
    if (*(unsigned char *)(v1 + 44))
    {
      if (*(unsigned char *)(v1 + 44) == 1)
      {
        Swift::UInt32 v8 = *(_DWORD *)(v1 + 40);
        uint64_t v9 = swift_bridgeObjectRetain();
        UIKitDialogBridge.updateExistingDialog(allDialogs:id:)(v9, v8);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = swift_bridgeObjectRetain();
        specialized Sequence.first(where:)(v13, &v49);
        swift_bridgeObjectRelease();
        if (*((void *)&v50 + 1))
        {
          int v14 = v49;
          LODWORD(v65) = v49;
          outlined init with take of ConfirmationDialog((uint64_t)&v49 + 8, (uint64_t)&v65 + 8);
          UIKitDialogBridge.showNewDialog(_:id:)((uint64_t)&v65 + 8, v14);
          outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
        }
        else
        {
          _s7SwiftUI16PlatformItemListV0D0VWOhTm_2((uint64_t)&v49, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?);
        }
      }
    }
    else
    {
      uint64_t v10 = swift_bridgeObjectRetain();
      unint64_t v11 = specialized Dictionary.optimisticFilter(_:)(v10);
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
      if (v12) {
        MEMORY[0x18C112B90](0xD000000000000067, 0x8000000188340A90);
      }
    }
  }
  *(void *)&long long v49 = v3;
  uint64_t result = PreferenceValues.subscript.getter();
  uint64_t v16 = v65;
  int v17 = *(_DWORD *)(v2 + 72);
  if (v17 != -1 && DWORD2(v65) != -1 && v17 == DWORD2(v65)) {
    goto LABEL_50;
  }
  *(_DWORD *)(v2 + 72) = DWORD2(v65);
  if (!*(unsigned char *)(v2 + 44))
  {
    Swift::UInt32 v21 = *(_DWORD *)(v2 + 40);
    uint64_t v22 = swift_bridgeObjectRetain();
    UIKitDialogBridge.updateExistingAlert(allAlerts:id:)(v22, v21);
    swift_bridgeObjectRelease();
LABEL_50:
    swift_beginAccess();
    *(void *)(v2 + 80) = v16;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v2 + 64) = v4;
    return swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v2 + 44) == 1)
  {
    uint64_t v18 = swift_bridgeObjectRetain();
    unint64_t v19 = specialized Dictionary.optimisticFilter(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v19 + 16);
    swift_bridgeObjectRelease();
    if (v20) {
      MEMORY[0x18C112B90](0xD000000000000067, 0x8000000188340A20);
    }
    goto LABEL_50;
  }
  int64_t v23 = 0;
  uint64_t v24 = v16 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & *(void *)(v16 + 64);
  int64_t v28 = (unint64_t)(v25 + 63) >> 6;
  while (v27)
  {
    unint64_t v29 = __clz(__rbit64(v27));
    v27 &= v27 - 1;
    unint64_t v30 = v29 | (v23 << 6);
LABEL_28:
    int v31 = *(_DWORD *)(*(void *)(v16 + 48) + 4 * v30);
    uint64_t v32 = *(void *)(v16 + 56) + 248 * v30;
    long long v34 = *(_OWORD *)(v32 + 32);
    long long v33 = *(_OWORD *)(v32 + 48);
    long long v35 = *(_OWORD *)v32;
    long long v66 = *(_OWORD *)(v32 + 16);
    long long v67 = v34;
    long long v65 = v35;
    long long v36 = *(_OWORD *)(v32 + 112);
    long long v38 = *(_OWORD *)(v32 + 64);
    long long v37 = *(_OWORD *)(v32 + 80);
    long long v71 = *(_OWORD *)(v32 + 96);
    long long v72 = v36;
    long long v69 = v38;
    long long v70 = v37;
    long long v39 = *(_OWORD *)(v32 + 176);
    long long v41 = *(_OWORD *)(v32 + 128);
    long long v40 = *(_OWORD *)(v32 + 144);
    long long v75 = *(_OWORD *)(v32 + 160);
    long long v76 = v39;
    long long v73 = v41;
    long long v74 = v40;
    long long v43 = *(_OWORD *)(v32 + 208);
    long long v42 = *(_OWORD *)(v32 + 224);
    long long v44 = *(_OWORD *)(v32 + 192);
    uint64_t v80 = *(void *)(v32 + 240);
    long long v78 = v43;
    long long v79 = v42;
    long long v77 = v44;
    long long v68 = v33;
    if (v65)
    {
      swift_bridgeObjectRetain();
      outlined retain of AlertStorage(&v65);
      swift_release();
      long long v61 = v77;
      long long v62 = v78;
      long long v63 = v79;
      uint64_t v64 = v80;
      long long v57 = v73;
      long long v58 = v74;
      long long v59 = v75;
      long long v60 = v76;
      long long v53 = v69;
      long long v54 = v70;
      long long v55 = v71;
      long long v56 = v72;
      long long v49 = v65;
      long long v50 = v66;
      long long v51 = v67;
      long long v52 = v68;
      UIKitDialogBridge.showNewAlert(_:id:)((uint64_t)&v49, v31);
      outlined release of AlertStorage(&v65);
      goto LABEL_50;
    }
  }
  if (__OFADD__(v23++, 1))
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v23 >= v28) {
    goto LABEL_50;
  }
  unint64_t v46 = *(void *)(v24 + 8 * v23);
  if (v46)
  {
LABEL_44:
    unint64_t v48 = __clz(__rbit64(v46));
    unint64_t v27 = (v46 - 1) & v46;
    unint64_t v30 = v48 + (v23 << 6);
    goto LABEL_28;
  }
  int64_t v47 = v23 + 1;
  if (v23 + 1 >= v28) {
    goto LABEL_50;
  }
  unint64_t v46 = *(void *)(v24 + 8 * v47);
  if (v46) {
    goto LABEL_43;
  }
  int64_t v47 = v23 + 2;
  if (v23 + 2 >= v28) {
    goto LABEL_50;
  }
  unint64_t v46 = *(void *)(v24 + 8 * v47);
  if (v46) {
    goto LABEL_43;
  }
  int64_t v47 = v23 + 3;
  if (v23 + 3 >= v28) {
    goto LABEL_50;
  }
  unint64_t v46 = *(void *)(v24 + 8 * v47);
  if (v46) {
    goto LABEL_43;
  }
  int64_t v47 = v23 + 4;
  if (v23 + 4 >= v28) {
    goto LABEL_50;
  }
  unint64_t v46 = *(void *)(v24 + 8 * v47);
  if (v46) {
    goto LABEL_43;
  }
  int64_t v47 = v23 + 5;
  if (v23 + 5 >= v28) {
    goto LABEL_50;
  }
  unint64_t v46 = *(void *)(v24 + 8 * v47);
  if (v46)
  {
LABEL_43:
    int64_t v23 = v47;
    goto LABEL_44;
  }
  while (1)
  {
    int64_t v23 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v23 >= v28) {
      goto LABEL_50;
    }
    unint64_t v46 = *(void *)(v24 + 8 * v23);
    ++v47;
    if (v46) {
      goto LABEL_44;
    }
  }
LABEL_52:
  __break(1u);
  return result;
}

uint64_t $defer #1 <A>() in UIHostingController.screenEdgesSystemGesturePreferencesDidChange(_:)()
{
  return swift_endAccess();
}

uint64_t $defer #1 <A>() in UIHostingController.persistentSystemOverlaysPreferencesDidChange(_:)()
{
  return swift_endAccess();
}

uint64_t UIKitInspectorBridgeV5.update(environment:)(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return SheetBridge.update(environment:)(a1);
}

uint64_t UIKitContentScrollViewBridge.update(environment:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t result = EnvironmentValues.pixelLength.getter();
  *(void *)(v1 + 48) = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    }
  }
}

uint64_t UIHostingController._persistentSystemOverlays.getter()
{
  UIHostingController.persistentSystemOverlays.getter(&v2);
  uint64_t result = v2;
  if ((v2 & 0xFF00) == 0x200)
  {
    LODWORD(result) = UIHostingController.persistentSystemOverlays.getter(&v1);
    if (result == 3) {
      return 0;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t UIHostingController.persistentSystemOverlays.getter(_WORD *a1)
{
  uint64_t v2 = v1 + direct field offset for UIHostingController.persistentSystemOverlays;
  *a1 = *(_WORD *)(v1 + direct field offset for UIHostingController.persistentSystemOverlays);
  return *(unsigned __int8 *)(v2 + 2);
}

uint64_t AlwaysOnBridge.update(environment:)(long long *a1)
{
  uint64_t v3 = *((void *)a1 + 1);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(void *)&long long v6 = v6 | 0x20;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  if (AlwaysOnBridge.isActiveHost.getter())
  {
    *(void *)&long long v6 = *(void *)(v1 + 32);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    id v4 = (id)v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

      swift_release();
      swift_release();
    }
    else
    {
    }
    swift_release();
  }
  swift_weakInit();
  outlined init with copy of TimelineInvalidationAction((uint64_t)&v6, (uint64_t)v7);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*((void *)a1 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of weak AnyGestureResponder?((uint64_t)&v6);
  long long v6 = *a1;
  uint64_t result = EnvironmentValues.isLuminanceReduced.getter();
  *(unsigned char *)(v1 + 40) = result & 1;
  return result;
}

uint64_t outlined init with copy of TimelineInvalidationAction(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of weak AnyGestureResponder?(uint64_t a1)
{
  return a1;
}

uint64_t AlwaysOnBridge.isActiveHost.getter()
{
  uint64_t v1 = v0;
  uint64_t result = MEMORY[0x18C119DF0](v0 + 16);
  if (!result) {
    goto LABEL_23;
  }
  uint64_t v3 = (void *)result;
  id v4 = (id)specialized UIHostingController.host.getter();

  id v5 = objc_msgSend(v4, sel_window);
  if (!v5 || (id v6 = objc_msgSend(v5, sel_windowScene), v5, !v6))
  {
    char v18 = 0;
    return v18 & 1;
  }
  id v7 = objc_msgSend(v6, sel_windows);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIWindow);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v22 = MEMORY[0x1E4FBC860];
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v9 = result;
    if (result) {
      goto LABEL_6;
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    unint64_t v19 = MEMORY[0x1E4FBC860];
LABEL_20:
    char v18 = specialized Sequence.contains(where:)((uint64_t (*)(id *))partial apply for closure #2 in AlwaysOnBridge.isActiveHost.getter, v1, v19);
    swift_bridgeObjectRelease();

    return v18 & 1;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_19;
  }
LABEL_6:
  if (v9 >= 1)
  {
    id v20 = v6;
    uint64_t v21 = v1;
    uint64_t v10 = 0;
    unint64_t v11 = MEMORY[0x1E4FBC860];
    do
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v13 = (id)MEMORY[0x18C117680](v10, v8);
      }
      else {
        id v13 = *(id *)(v8 + 8 * v10 + 32);
      }
      int v14 = v13;
      id v15 = objc_msgSend(v13, sel_rootViewController, v20, v21);
      if (v15
        && (uint64_t v16 = v15,
            id v17 = objc_msgSend(v15, sel__effectiveControllersForAlwaysOnTimelines),
            v16,
            v17))
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver();
        unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        int v14 = v17;
      }
      else
      {
        unint64_t v12 = v11;
      }

      ++v10;
      specialized Array.append<A>(contentsOf:)(v12);
    }
    while (v9 != v10);
    swift_bridgeObjectRelease_n();
    unint64_t v19 = v22;
    id v6 = v20;
    uint64_t v1 = v21;
    goto LABEL_20;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

unint64_t type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver()
{
  unint64_t result = lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver;
  if (!lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver);
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:), (void (*)(void))type metadata accessor for [UIView]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    id v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v5 = v20 + v3;
    if (!__OFADD__(v20, v3)) {
      goto LABEL_5;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v5 = v4 + v3;
  if (__OFADD__(v4, v3)) {
    goto LABEL_26;
  }
LABEL_5:
  id v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  unint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    unint64_t v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5) {
    uint64_t v10 = v5;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = MEMORY[0x18C117690](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v11;
  uint64_t v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  unint64_t v12 = *(void *)(v9 + 16);
  id v13 = (*(void *)(v9 + 24) >> 1) - v12;
  unint64_t result = specialized Array._copyContents(initializing:)(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    type metadata accessor for [NavigationPath_ItemBoxBase](0, &lazy cache variable for type metadata for [DateSequenceTimeline], (uint64_t (*)(uint64_t))type metadata accessor for DateSequenceTimeline, MEMORY[0x1E4FBB320]);
    goto LABEL_20;
  }
  uint64_t v16 = v15;
  if (v15 >= 1)
  {
    id v17 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    char v18 = __OFADD__(v17, v15);
    unint64_t v19 = v17 + v15;
    if (v18)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  swift_bridgeObjectRelease();
  if (v16 == v13) {
    goto LABEL_28;
  }
LABEL_20:

  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:), (void (*)(void))type metadata accessor for [UIBarButtonItem]);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    id v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    id v5 = v20 + v3;
    if (!__OFADD__(v20, v3)) {
      goto LABEL_5;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id v5 = v4 + v3;
  if (__OFADD__(v4, v3)) {
    goto LABEL_26;
  }
LABEL_5:
  id v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v6;
  unint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    unint64_t v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5) {
    uint64_t v10 = v5;
  }
  swift_bridgeObjectRetain();
  unint64_t v11 = MEMORY[0x18C117690](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *uint64_t v1 = v11;
  uint64_t v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  unint64_t v12 = *(void *)(v9 + 16);
  id v13 = (*(void *)(v9 + 24) >> 1) - v12;
  unint64_t result = specialized Array._copyContents(initializing:)(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    type metadata accessor for [UIResponder & _UIGestureRecognizerContainer]();
    goto LABEL_20;
  }
  uint64_t v16 = v15;
  if (v15 >= 1)
  {
    id v17 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    char v18 = __OFADD__(v17, v15);
    unint64_t v19 = v17 + v15;
    if (v18)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  swift_bridgeObjectRelease();
  if (v16 == v13) {
    goto LABEL_28;
  }
LABEL_20:

  return specialized Array._endMutation()();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:), (void (*)(void))type metadata accessor for [NSLayoutConstraint]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v6;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = MEMORY[0x18C117690](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t vars8;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v6;
  uint64_t v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_27;
  }
  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain();
    unint64_t v6 = MEMORY[0x18C117690](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIViewController & _UIBacklightEnvironmentObserver]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [UIViewController & _UIBacklightEnvironmentObserver] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIViewController & _UIBacklightEnvironmentObserver]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController & _UIBacklightEnvironmentObserver, (uint64_t)&protocolRef__UIBacklightEnvironmentObserver, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NavigationPath_ItemBoxBase](0, &lazy cache variable for type metadata for [NavigationDestinationResolverBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A](&lazy protocol witness table cache variable for type [NavigationDestinationResolverBase] and conformance [A], &lazy cache variable for type metadata for [NavigationDestinationResolverBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            swift_retain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NavigationDestinationResolverBase();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIView]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [UIView] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIView]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  void (*v13[4])(id *);

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NavigationPath_ItemBoxBase](0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A](&lazy protocol witness table cache variable for type [AccessibilityNode] and conformance [A], (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(void (**)(id *), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for AccessibilityNode();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NavigationPath_ItemBoxBase](0, &lazy cache variable for type metadata for [NavigationPath_ItemBoxBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase, MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A](&lazy protocol witness table cache variable for type [NavigationPath_ItemBoxBase] and conformance [A], &lazy cache variable for type metadata for [NavigationPath_ItemBoxBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            swift_retain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NavigationPath_ItemBoxBase();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIMenuElement]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [UIMenuElement] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIMenuElement]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NSObject & PlatformAccessibilityElementProtocol]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [NSObject & PlatformAccessibilityElementProtocol] and conformance [A], (void (*)(uint64_t))type metadata accessor for [NSObject & PlatformAccessibilityElementProtocol]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(0, (unint64_t *)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol, (uint64_t)&protocolRef__TtP7SwiftUI36PlatformAccessibilityElementProtocol_, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIViewController]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [UIViewController] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIViewController]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NavigationPath_ItemBoxBase](0, &lazy cache variable for type metadata for [LazyLayoutCacheItem], (uint64_t (*)(uint64_t))type metadata accessor for LazyLayoutCacheItem, MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [LazyLayoutCacheItem] and conformance [A], &lazy cache variable for type metadata for [LazyLayoutCacheItem], (uint64_t (*)(uint64_t))type metadata accessor for LazyLayoutCacheItem);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            swift_retain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for LazyLayoutCacheItem();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIFocusEnvironment]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [UIFocusEnvironment] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIFocusEnvironment]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NavigationPath_ItemBoxBase](0, &lazy cache variable for type metadata for [DateSequenceTimeline], (uint64_t (*)(uint64_t))type metadata accessor for DateSequenceTimeline, MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type [AccessibilityNode] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DateSequenceTimeline] and conformance [A], &lazy cache variable for type metadata for [DateSequenceTimeline], (uint64_t (*)(uint64_t))type metadata accessor for DateSequenceTimeline);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for DateSequenceTimeline();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIFocusItem]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [UIFocusItem] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIFocusItem]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIBarButtonItem]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [UIBarButtonItem] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIBarButtonItem]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIResponder & _UIGestureRecognizerContainer]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [UIResponder & _UIGestureRecognizerContainer] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIResponder & _UIGestureRecognizerContainer]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(0, &lazy cache variable for type metadata for UIResponder & _UIGestureRecognizerContainer, (uint64_t)&protocolRef__UIGestureRecognizerContainer, &lazy cache variable for type metadata for UIResponder);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [UIAccessibilityLocationDescriptor]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [UIAccessibilityLocationDescriptor] and conformance [A], (void (*)(uint64_t))type metadata accessor for [UIAccessibilityLocationDescriptor]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  id *v11;
  id v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [NSLayoutConstraint]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [NSLayoutConstraint] and conformance [A], (void (*)(uint64_t))type metadata accessor for [NSLayoutConstraint]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSLayoutConstraint);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [_UISceneSettingsDiffAction]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [_UISceneSettingsDiffAction] and conformance [A], (void (*)(uint64_t))type metadata accessor for [_UISceneSettingsDiffAction]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneSettingsDiffAction);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t (*v10)();
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13[4])();

  uint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          type metadata accessor for [_UISceneBSActionHandler]();
          lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](&lazy protocol witness table cache variable for type [_UISceneBSActionHandler] and conformance [A], (void (*)(uint64_t))type metadata accessor for [_UISceneBSActionHandler]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t (**)(), void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        type metadata accessor for _UISceneBSActionHandler(0, &lazy cache variable for type metadata for _UISceneBSActionHandler);
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void CoalescingAdjacentDuplicates.subscript.read(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8))(v1, *a1);

  free(v1);
}

void destroy for ForEach<>.PreferenceTransform.Item(id *a1)
{
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x18C117680](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for NotificationFeedbackImplementation;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = MEMORY[0x18C117680](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for ScrollOverlayLayout;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = MEMORY[0x18C117680](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = swift_retain();
LABEL_5:
    *uint64_t v3 = v4;
    return destroy for NavigationDestinationModifier.SeededResolver;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = MEMORY[0x18C117680](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  uint64_t v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = MEMORY[0x18C117680](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = swift_unknownObjectRetain();
LABEL_5:
    *uint64_t v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    uint64_t v3 = a3 + 32 * a2;
    id v4 = *(void *)(v3 + 40);
    uint64_t v5 = *(unsigned char *)(v3 + 48);
    unint64_t v6 = *(void *)(v3 + 56);
    *(void *)uint64_t result = *(void *)(v3 + 32);
    *((void *)result + 1) = v4;
    *((unsigned char *)result + 16) = v5;
    *((void *)result + 3) = v6;
    swift_retain();
    return destroy for NavigationDestinationModifier.SeededResolver;
  }
  __break(1u);
  return result;
}

uint64_t lazy protocol witness table accessor for type [NSLayoutConstraint] and conformance [A](unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v6 - 4, a3) : *(id *)(a3 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v15 = v7;
      char v10 = a1(&v15);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v12 & 1;
      }
      char v11 = v10;

      if (v11)
      {
        swift_bridgeObjectRelease();
        char v12 = 1;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  char v12 = 0;
  return v12 & 1;
}

void *partial apply for closure #2 in AlwaysOnBridge.isActiveHost.getter(void **a1)
{
  uint64_t v2 = *a1;
  uint64_t result = (void *)MEMORY[0x18C119DF0](v1 + 16);
  if (result)
  {
    id v4 = result;

    return (void *)(v2 == v4);
  }
  return result;
}

uint64_t AlwaysOnBridge.preferencesDidChange(_:)()
{
  PreferenceValues.subscript.getter();
  if (v6 == -1 || ((int v1 = *(_DWORD *)(v0 + 44), v1 != -1) ? (v2 = v6 == v1) : (v2 = 0), !v2))
  {
    *(_DWORD *)(v0 + 44) = v6;
    uint64_t v3 = *(uint64_t **)(v0 + 48);
    *(void *)(v0 + 48) = v5;
    AlwaysOnBridge.timelineRegistrations.didset(v3);
  }
  return swift_bridgeObjectRelease();
}

void UIHostingController.updateHomeIndicator(animated:)()
{
}

void sub_1873A3424(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t aBlock, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (v22)
  {
    int64_t v23 = self;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = a1;
    v28[4] = partial apply for closure #1 in setNeedsHomeIndicatorUpdate #1 <A>(from:animated:) in UIHostingController.updateHomeIndicator(animated:);
    v28[5] = v24;
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 1107296256;
    _OWORD v28[2] = thunk for @escaping @callee_guaranteed () -> ();
    v28[3] = &block_descriptor_53;
    uint64_t v25 = _Block_copy(v28);
    id v26 = a1;
    swift_release();
    objc_msgSend(v23, sel_animateWithDuration_animations_, v25, 0.3);
    _Block_release(v25);
  }
  else
  {
    objc_msgSend(a1, sel_setNeedsUpdateOfHomeIndicatorAutoHidden);
  }
}

uint64_t (*ContainerBackgroundBridge.transparentBackgroundSeedTracker.modify())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t ContainerBackground.ConcreteVersionSeedTracker.didChange(_:action:)(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v6 = *a1;
  swift_beginAccess();
  type metadata accessor for VersionSeedTracker();
  VersionSeedTracker.didChange(_:action:)(&v6, a2, a3);
  return swift_endAccess();
}

uint64_t type metadata accessor for VersionSeedTracker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t VersionSeedTracker.didChange(_:action:)(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  id v4 = v3;
  v17[1] = a3;
  char v18 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = type metadata accessor for PreferenceValues.Value();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v17 - v12;
  uint64_t v19 = *a1;
  PreferenceValues.subscript.getter();
  int v14 = *(_DWORD *)&v13[*(int *)(v10 + 28)];
  if (*v4 == -1 || (v14 != -1 ? (BOOL v15 = *v4 == v14) : (BOOL v15 = 0), !v15))
  {
    _DWORD *v4 = v14;
    (*(void (**)(char *, char *))(*(void *)(*(void *)(v10 + 16) - 8) + 16))(v9, v13);
    v18(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t UIHostingController.deferredEdges.setter(uint64_t result)
{
  BOOL v2 = (unsigned char *)(v1 + direct field offset for UIHostingController.deferredEdges);
  *BOOL v2 = result;
  v2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController) = result;
  return result;
}

uint64_t UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController.setter(uint64_t result)
{
  *(unsigned char *)(v1 + direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController) = result;
  return result;
}

uint64_t UIKitContentScrollViewBridge.findBestCandidates(in:)(uint64_t a1)
{
  uint64_t v71 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v71 - 8);
  double v4 = MEMORY[0x1F4188790](v71);
  long long v70 = (char *)v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = v1;
  uint64_t v6 = (void *)MEMORY[0x18C119DF0](v1 + 16, v4);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  id v8 = objc_msgSend(v6, sel_view);

  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {

    return 0;
  }
  long long v69 = &v86;
  unsigned int v68 = *MEMORY[0x1E4FBBEB0];
  long long v67 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 104);
  long long v66 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  int v10 = 0;
  id v11 = 0;
  uint64_t v12 = 0;
  v64[1] = a1;
  uint64_t v13 = a1 + 48 * v9 - 16;
  id v65 = v8;
  do
  {
    outlined init with copy of ContentScrollViewBox(v13, (uint64_t)v85);
    uint64_t v14 = MEMORY[0x18C119DF0](v85);
    if (!v14)
    {
      outlined destroy of ContentScrollViewBox((uint64_t)v85);
      goto LABEL_6;
    }
    BOOL v15 = (void *)v14;
    id v16 = (id)MEMORY[0x18C119DF0](v69);
    if (!v16) {
      id v16 = v15;
    }
    objc_msgSend(v16, sel_bounds);
    double v18 = v17;
    double v20 = v19;
    double v22 = v21;
    double v24 = v23;
    id v25 = v16;
    id v26 = objc_msgSend(v25, sel_superview);
    unint64_t v27 = v26;
    if (v22 == 0.0)
    {
      BOOL v28 = v24 != 0.0 || v26 == 0;
      id v29 = v25;
      if (!v28)
      {
        id v29 = v26;

        objc_msgSend(v29, sel_bounds);
        double v18 = v30;
        double v20 = v31;
        double v22 = v32;
        double v24 = v33;
      }
    }
    else
    {
      id v29 = v25;
    }
    unsigned int v34 = objc_msgSend(v25, sel_isDescendantOfView_, v8);
    uint64_t v83 = v12;
    int v82 = v10;
    uint64_t v80 = v9;
    id v81 = v11;
    id v78 = v15;
    uint64_t v79 = v13;
    id v76 = v27;
    id v77 = v25;
    id v75 = v29;
    if (v34)
    {
      objc_msgSend(v8, sel_convertRect_fromCoordinateSpace_, v29, v18, v20, v22, v24);
      double v18 = v35;
      double v20 = v36;
      double v22 = v37;
      double v24 = v38;
    }
    long long v39 = v8;
    BOOL v74 = v22 != 0.0;
    BOOL v73 = v24 != 0.0;
    uint64_t v40 = v72;
    double v41 = *(double *)(v72 + 48);
    double v84 = v20 + v41 * 0.5;
    long long v42 = *v67;
    uint64_t v43 = (uint64_t)v70;
    uint64_t v44 = v68;
    uint64_t v45 = v71;
    (*v67)((uint64_t)v70, v68, v71);
    specialized FloatingPoint.round(_:toMultipleOf:)(v43, v41);
    unint64_t v46 = *v66;
    (*v66)(v43, v45);
    double v47 = v84;
    v88.origin.x = v18;
    v88.origin.y = v20;
    v88.size.width = v22;
    v88.size.height = v24;
    CGFloat MaxY = CGRectGetMaxY(v88);
    double v49 = *(double *)(v40 + 48);
    double v84 = MaxY + v49 * 0.5;
    v42(v43, v44, v45);
    specialized FloatingPoint.round(_:toMultipleOf:)(v43, v49);
    v46(v43, v45);
    double v50 = v84;
    objc_msgSend(v39, sel_bounds);
    CGFloat MinY = CGRectGetMinY(v89);
    double v52 = *(double *)(v40 + 48);
    double v84 = MinY + v52 * 0.5;
    v42(v43, v44, v45);
    specialized FloatingPoint.round(_:toMultipleOf:)(v43, v52);
    v46(v43, v45);
    double v53 = v84;
    objc_msgSend(v39, sel_bounds);
    CGFloat v54 = CGRectGetMaxY(v90);
    double v55 = *(double *)(v40 + 48);
    double v84 = v54 + v55 * 0.5;
    v42(v43, v44, v45);
    specialized FloatingPoint.round(_:toMultipleOf:)(v43, v55);
    v46(v43, v45);
    BOOL v56 = v73;
    BOOL v57 = v74;

    double v58 = v84;
    uint64_t v12 = v83;
    int v59 = v82;
    uint64_t v9 = v80;
    long long v60 = v81;
    id v11 = v78;
    uint64_t v13 = v79;
    if (!v83)
    {
      if ((v87 & 1) != 0 || v47 <= v53)
      {
        id v61 = v78;
        uint64_t v12 = v11;
      }
      else
      {
        uint64_t v12 = 0;
      }
    }
    int v10 = v59 | v57 | v56;
    if (v60)
    {
      outlined destroy of ContentScrollViewBox((uint64_t)v85);

      id v11 = v60;
      id v8 = v65;
    }
    else
    {
      char v62 = v87;
      outlined destroy of ContentScrollViewBox((uint64_t)v85);
      id v8 = v65;
      if ((v62 & 1) == 0 && v58 > v50)
      {

        id v11 = 0;
        goto LABEL_6;
      }
    }
    if (v12) {
      break;
    }
LABEL_6:
    v13 -= 48;
    --v9;
  }
  while (v9);

  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {

    return 1;
  }
  return (uint64_t)v12;
}

void outlined consume of UIKitContentScrollViewBridge.Candidates?(void *a1, void *a2)
{
  if (a1 != (void *)1)
  {
  }
}

void *partial apply for closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:)(uint64_t a1)
{
  return closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:)(a1);
}

void *closure #1 in ContainerBackgroundBridge.preferencesDidChange(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v1 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  swift_beginAccess();
  uint64_t result = (void *)swift_weakLoadStrong();
  if (result)
  {
    id v8 = result;
    uint64_t v9 = result[10];
    unint64_t v10 = result[11];
    uint64_t v11 = result[12];
    uint64_t v12 = result[13];
    result[10] = v2;
    result[11] = v1;
    result[12] = v3;
    result[13] = v5;
    result[14] = v4;
    result[15] = v6;
    uint64_t v23 = v2;
    uint64_t v24 = v9;
    unint64_t v13 = v1;
    outlined copy of ContainerBackgroundValue.Content(v2, v1);
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of ContainerBackgroundValue?(v24, v10, v11, v12);
    if (v8[13] == 1 || (v8[11] & 0x8000000000000000) != 0)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = v8[10];
      swift_retain();
    }
    ContainerBackgroundBridge.updateBackground(from:)(v14);
    swift_release();
    uint64_t v15 = MEMORY[0x18C119DF0](v8 + 8);
    if (v15
      && (id v16 = (void *)v15,
          uint64_t v17 = v8[9],
          uint64_t v18 = swift_getObjectType(),
          unint64_t v19 = type metadata accessor for ContainerBackgroundHost(),
          (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t))(*(void *)(v17 + 8) + 16))(v25, v19, v19, v18), v16, v25[0]))
    {
      uint64_t v20 = v25[1];
      if (v13 >> 62 == 1)
      {
        outlined copy of ContainerBackgroundValue.Content(v23, v13);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v21 = ShapeStyle.fallbackColor(in:level:)();
        swift_release();
        outlined consume of ContainerBackgroundValue.Content(v23, v13);
        swift_release();
        swift_release();
        swift_release();
        if (v21)
        {
          type metadata accessor for UIColor();
          uint64_t v21 = (uint64_t)UIColor.init(_:)(v21);
        }
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v21, ObjectType, v20);
      swift_release();
      return (void *)swift_unknownObjectRelease();
    }
    else
    {
      return (void *)swift_release();
    }
  }
  return result;
}

void ContainerBackgroundBridge.updateBackground(from:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (a1)
  {
    if (*(unsigned char *)(v1 + 40) == 1)
    {
      swift_retain();
      static Edge.Set.all.getter();
      _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
      lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
      swift_retain();
      uint64_t v3 = AnyView.init<A>(_:)();
      uint64_t v4 = *(void **)(v1 + 128);
      uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
      if (v4)
      {
        uint64_t v6 = v4;
        static Transaction.current.getter();
        uint64_t v7 = (void *)((char *)v6 + *(void *)((*v5 & *v6) + 0x60));
        swift_beginAccess();
        *uint64_t v7 = v3;
        swift_retain();
        swift_release();
        swift_allocObject();
        swift_unknownObjectWeakInit();
        swift_retain();
        swift_retain();
        default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
        GraphHost.asyncTransaction(_:id:_:)();
        swift_release();
        swift_release_n();
        swift_release();
      }
      else
      {
        _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
        id v11 = objc_allocWithZone(v10);
        uint64_t v6 = (void *)specialized _UIHostingView.init(rootView:)(v3);
      }
      uint64_t v12 = *(void *)(v2 + 104);
      if (v12 == 1)
      {
        char v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 1;
      }
      else
      {
        uint64_t v16 = *(unsigned __int8 *)(v2 + 96);
        char v13 = v16 & 1;
        uint64_t v18 = *(void *)(v2 + 80);
        unint64_t v17 = *(void *)(v2 + 88);
        unint64_t v19 = ((unint64_t)*(unsigned int *)(v2 + 97) << 8) | ((unint64_t)(*(unsigned __int16 *)(v2 + 101) | (*(unsigned __int8 *)(v2 + 103) << 16)) << 40) | v16;
        outlined copy of ContainerBackgroundValue.Content(v18, v17);
        swift_retain();
        swift_retain();
        swift_retain();
        outlined consume of ContainerBackgroundValue?(v18, v17, v19, v12);
        uint64_t v15 = *(void *)(v2 + 104);
        if (v15 == 1)
        {
          uint64_t v14 = 0;
        }
        else
        {
          uint64_t v14 = *(void *)(v2 + 112);
          unint64_t v21 = *(void *)(v2 + 88);
          uint64_t v20 = *(void *)(v2 + 96);
          uint64_t v22 = *(void *)(v2 + 80);
          outlined copy of ContainerBackgroundValue?(v22, v21, v20, *(void *)(v2 + 104));
          swift_retain();
          swift_retain();
          outlined consume of ContainerBackgroundValue?(v22, v21, v20, v15);
        }
        uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
      }
      uint64_t v23 = *(void *)((char *)v6 + *(void *)((*v5 & *v6) + 0x68));
      uint64_t v24 = *(void *)(v23 + 152);
      *(void *)(v23 + 152) = v15;
      *(void *)(v23 + 160) = v14;
      outlined consume of EnvironmentValues?(v24);
      if (MEMORY[0x18C119DF0](v23 + 24))
      {
        swift_getObjectType();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        swift_unknownObjectRelease();
      }
      id v25 = *(void **)(v2 + 128);
      *(void *)(v2 + 128) = v6;
      char v26 = *(unsigned char *)(v2 + 136);
      *(unsigned char *)(v2 + 136) = v13;
      unint64_t v27 = v6;
      ContainerBackgroundBridge.background.didset(v25, v26);
      swift_release();
      swift_release();
    }
  }
  else
  {
    id v8 = *(void **)(v1 + 128);
    if (v8)
    {
      *(void *)(v1 + 128) = 0;
      char v9 = *(unsigned char *)(v1 + 136);
      *(unsigned char *)(v1 + 136) = 0;
      id v28 = v8;
      ContainerBackgroundBridge.background.didset(v8, v9);
    }
  }
}

unsigned __int8 *ContainerBackgroundBridge.hostsBackgroundPlacement.didset(unsigned __int8 *result)
{
  uint64_t v2 = v1;
  int v3 = *result;
  int v4 = *(unsigned __int8 *)(v1 + 137);
  if (v3 == 5)
  {
    if (v4 == 5) {
      return result;
    }
LABEL_8:
    uint64_t v6 = (void *)MEMORY[0x18C119DF0](v1 + 64);
    if (v6)
    {
      uint64_t v7 = *(void *)(v1 + 72);
      uint64_t ObjectType = swift_getObjectType();
      char v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 16);
      id v10 = v6;
      uint64_t v11 = v9(ObjectType, v7);

      if (*(unsigned char *)(v1 + 137) != 5) {
        ContainerBackgroundKind.Builtin.addPreference(to:)(v11);
      }
      swift_release();
      int v12 = *(unsigned __int8 *)(v1 + 137);
      uint64_t v13 = swift_getObjectType();
      id v14 = v10;
      v9(v13, v7);

      if (v12 == 5)
      {
        GraphHost.removePreference<A>(_:)();
        swift_release();
LABEL_14:
        uint64_t v15 = *(void *)(v1 + 80);
        unint64_t v16 = *(void *)(v1 + 88);
        uint64_t v17 = *(void *)(v1 + 96);
        uint64_t v18 = *(void *)(v1 + 104);
        *(void *)(v1 + 80) = 0;
        *(void *)(v1 + 88) = 0;
        *(void *)(v1 + 96) = 0;
        *(void *)(v1 + 104) = 1;
        *(void *)(v1 + 112) = 0;
        *(void *)(v1 + 120) = 0;
        outlined consume of ContainerBackgroundValue?(v15, v16, v17, v18);
        uint64_t v19 = 0;
        if (*(void *)(v1 + 104) != 1)
        {
          if ((*(void *)(v1 + 88) & 0x8000000000000000) != 0)
          {
            uint64_t v19 = 0;
          }
          else
          {
            uint64_t v19 = *(void *)(v1 + 80);
            swift_retain();
          }
        }
        ContainerBackgroundBridge.updateBackground(from:)(v19);

        swift_release();
        char v20 = 1;
        uint64_t result = (unsigned __int8 *)swift_beginAccess();
        *(_DWORD *)(v2 + 56) = 0;
        goto LABEL_21;
      }
      GraphHost.addPreference<A>(_:)();
      swift_release();
    }
    else if (*(unsigned char *)(v1 + 137) == 5)
    {
      goto LABEL_14;
    }
    uint64_t result = (unsigned __int8 *)swift_beginAccess();
    char v20 = 0;
    *(_DWORD *)(v2 + 56) = -1;
LABEL_21:
    *(unsigned char *)(v2 + 60) = v20;
    return result;
  }
  if (v4 == 5 || v3 != v4) {
    goto LABEL_8;
  }
  return result;
}

uint64_t UIKitNavigationBridge.preferencesDidChange(_:)()
{
  PreferenceValues.subscript.getter();
  UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)((uint64_t)&v1);
  return swift_bridgeObjectRelease();
}

uint64_t UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != -1 && ((int v4 = *(_DWORD *)(v1 + 136), v4 != -1) ? (v5 = v3 == v4) : (v5 = 0), v5))
  {
    *(_DWORD *)(v1 + 136) = v3;
    *(void *)(v1 + 144) = v2;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess();
    uint64_t v6 = *(void *)(v1 + 48);
    if (v6) {
      uint64_t v7 = *(void *)(v1 + 32);
    }
    else {
      uint64_t v7 = 0;
    }
    char v9 = v6 == 0;
    swift_bridgeObjectRetain();
    nextNavigationDestination(activePresentationID:destinations:)(v7, v9, v2, (uint64_t)v17);
    if (v19 == 255)
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)v17, &lazy cache variable for type metadata for NavigationDestinationPresentation?);
      outlined init with copy of BridgedPresentation?(v1 + 32, (uint64_t)v15);
      uint64_t v10 = v16;
      outlined destroy of AccessibilityValueStorage?((uint64_t)v15, &lazy cache variable for type metadata for BridgedPresentation?);
      if (v10)
      {
        uint64_t v11 = static Transaction.current.getter();
        popCurrentView #1 <A>(transaction:) in UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(v11, v1);
        swift_release();
      }
    }
    else
    {
      outlined init with take of NavigationDestinationPresentation((uint64_t)v17, (uint64_t)v15);
      outlined init with copy of NavigationDestinationPresentation((uint64_t)v15, (uint64_t)v17);
      if (v19)
      {
        popCurrentView #1 <A>(transaction:) in UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(*((uint64_t *)&v17[0] + 1), v1);
        swift_release();
      }
      else
      {
        v13[2] = v17[2];
        v13[3] = v17[3];
        v13[4] = v17[4];
        uint64_t v14 = v18;
        v13[0] = v17[0];
        v13[1] = v17[1];
        swift_retain();
        char v12 = Transaction.disablesAnimations.getter();
        swift_release();
        UIKitNavigationBridge.updatePresentedContent(_:animated:)((uint64_t)v13, (v12 & 1) == 0);
        outlined destroy of NavigationDestinationContent((uint64_t)v13);
      }
      outlined destroy of NavigationDestinationPresentation((uint64_t)v15);
    }
    *(_DWORD *)(v1 + 136) = v3;
    *(void *)(v1 + 144) = v2;
    return swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for UIViewController & _UIBacklightEnvironmentObserver(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for NSObject(255, a4);
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t nextNavigationDestination(activePresentationID:destinations:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (!*(void *)(a3 + 16))
  {
LABEL_14:
    *(void *)(a4 + 80) = 0;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
    *(unsigned char *)(a4 + 88) = -1;
    return result;
  }
  uint64_t v6 = result;
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized _NativeDictionary.filter(_:)(v7);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0
    || !*(void *)(v8 + 16)
    || (uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v10 & 1) == 0))
  {
    uint64_t v12 = swift_retain();
    specialized Collection.first.getter(v12, (uint64_t)v14);
    swift_release();
    if (v15[88] != 255)
    {
      outlined init with take of NavigationDestinationPresentation((uint64_t)v15, (uint64_t)v17);
      uint64_t v13 = *(void *)(v8 + 16);
      swift_release();
      if (v13 != 1) {
        MEMORY[0x18C112B90](0xD00000000000004ELL, 0x8000000188344C90);
      }
      outlined init with take of NavigationDestinationPresentation((uint64_t)v17, (uint64_t)v15);
      uint64_t v11 = v15;
      goto LABEL_12;
    }
    swift_release();
    uint64_t result = outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)?((uint64_t)v14);
    goto LABEL_14;
  }
  outlined init with copy of NavigationDestinationPresentation(*(void *)(v8 + 56) + 96 * v9, (uint64_t)v16);
  outlined init with take of NavigationDestinationPresentation((uint64_t)v16, (uint64_t)v14);
  if (*(void *)(v8 + 16) != 2)
  {
    swift_release();
    uint64_t v11 = v14;
    goto LABEL_12;
  }
  specialized Sequence.first(where:)(v8, v6, (uint64_t)v16);
  uint64_t result = swift_release();
  if (v17[88] != 255)
  {
    outlined destroy of NavigationDestinationPresentation((uint64_t)v14);
    uint64_t v11 = v17;
LABEL_12:
    outlined init with take of NavigationDestinationPresentation((uint64_t)v11, (uint64_t)v18);
    return outlined init with take of NavigationDestinationPresentation((uint64_t)v18, a4);
  }
  __break(1u);
  return result;
}

uint64_t outlined init with copy of BridgedPresentation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for BridgedPresentation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    int v14 = *(_DWORD *)(*(void *)(a1 + 48) + 4 * i);
    outlined init with copy of ConfirmationDialog(*(void *)(a1 + 56) + 184 * i, (uint64_t)&v21);
    int v20 = v14;
    outlined init with take of AlertStorage?((uint64_t)&v20, (uint64_t)&v18, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    outlined init with copy of ConfirmationDialog((uint64_t)&v19, (uint64_t)v17);
    int v15 = v17[0];
    outlined destroy of ConfirmationDialog((uint64_t)v17);
    if (v15 == 1)
    {
      swift_release();
      return outlined init with take of AlertStorage?((uint64_t)&v18, (uint64_t)a2, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    }
    uint64_t result = outlined destroy of (key: ViewIdentity, value: ConfirmationDialog)((uint64_t)&v18, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t (*)(void, uint64_t, ValueMetadata *))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog));
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v22) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v22) {
        goto LABEL_25;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v22) {
          goto LABEL_25;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v22) {
            goto LABEL_25;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v22)
  {
LABEL_25:
    uint64_t result = swift_release();
    *(_OWORD *)((char *)a2 + 169) = 0u;
    a2[9] = 0u;
    a2[10] = 0u;
    a2[7] = 0u;
    a2[8] = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    return result;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v22) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Void __swiftcall AlwaysOnBridge.invalidate(for:)(Swift::String a1)
{
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + 16);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = (id)specialized UIHostingController.host.getter();

    id v7 = objc_msgSend(v6, sel_window);
    if (v7)
    {
      id v8 = objc_msgSend(v7, sel_windowScene);

      if (v8)
      {
        id v9 = objc_msgSend(v8, sel__backlightSceneEnvironment);

        if (v9)
        {
          char v10 = (void *)MEMORY[0x18C115780](countAndFlagsBits, object);
          objc_msgSend(v9, sel_invalidateAllTimelinesForReason_, v10);

          swift_unknownObjectRelease();
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

unsigned __int8 *getEnumTagSinglePayload for ButtonInteractionPhase(unsigned __int8 *result, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE)
  {
LABEL_18:
    unsigned int v6 = *result;
    BOOL v7 = v6 >= 2;
    unsigned int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
    if (!v7) {
      unsigned int v8 = -1;
    }
    if (v8 + 1 >= 2) {
      return (unsigned __int8 *)v8;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v2 = a2 + 65282;
    if (a2 + 65282 <= 0xFFFEFFFF) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 4;
    }
    if (v2 < 0xFF0000) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x10000) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = result[2];
        if (!result[2]) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 2:
        int v5 = *((unsigned __int16 *)result + 1);
        if (!*((_WORD *)result + 1)) {
          goto LABEL_18;
        }
        goto LABEL_16;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v5 = *(_DWORD *)(result + 2);
        if (!v5) {
          goto LABEL_18;
        }
LABEL_16:
        uint64_t result = (unsigned __int8 *)((*(unsigned __int16 *)result | (v5 << 16)) - 65282);
        break;
      default:
        goto LABEL_18;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentShapeModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

BOOL protocol witness for ViewGraphFeature.allowsAsyncUpdate(graph:) in conformance PlatformItemListViewGraph(uint64_t a1)
{
  BOOL v3 = *(unsigned char *)(v1 + 8) != 1
    || (swift_beginAccess(), (*(unsigned char *)(a1 + 361) & 2) == 0)
    || WeakAttribute.allowsAsyncUpdate()();
  return v3;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollTargetModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  unsigned __int8 v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *(void *)(a2 + 72);
  char v4 = *(unsigned char *)(a2 + 80);
  int v5 = *(_DWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v26 = *(_OWORD *)(a2 + 48);
  long long v27 = v8;
  char v28 = v4;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v23 = *(_OWORD *)a2;
  long long v24 = v9;
  long long v25 = v7;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTargetModifier>, (uint64_t)&type metadata for ScrollTargetModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphInputs.scrollTargetRole.setter();
  _GraphInputs.scrollTargetRemovePreference.setter();
  uint64_t v13 = v23;
  int v14 = DWORD2(v23);
  long long v15 = v24;
  uint64_t v16 = v25 | 0x80000000000;
  uint64_t v17 = *((void *)&v25 + 1);
  uint64_t v18 = v26;
  uint64_t v19 = v6;
  int v20 = v5;
  uint64_t v21 = v3;
  char v22 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v10, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED459930;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED462078;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED44C100;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED4347B8;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED4494E0;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  long long v18;
  unsigned char v19[32];
  long long v20;
  long long v21;
  char v22;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  int v20 = *(_OWORD *)(a2 + 48);
  uint64_t v21 = v5;
  char v22 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&unsigned char v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type IncludesStyledText and conformance IncludesStyledText();
  PropertyList.subscript.setter();
  long long v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int64_t v11 = *(void *)v19;
  unint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  int v14 = v20;
  long long v15 = v21;
  uint64_t v16 = *((void *)&v21 + 1);
  uint64_t v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED457578;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  long long v18;
  unsigned char v19[32];
  long long v20;
  long long v21;
  char v22;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  int v20 = *(_OWORD *)(a2 + 48);
  uint64_t v21 = v5;
  char v22 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&unsigned char v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, &lazy cache variable for type metadata for _GraphValue<StackDepthModifier>, (uint64_t)&type metadata for StackDepthModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.DepthKey and conformance NavigationAuthority.DepthKey();
  lazy protocol witness table accessor for type Attribute<Int> and conformance Attribute<A>();
  _GraphInputs.subscript.setter();
  long long v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int64_t v11 = *(void *)v19;
  unint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  int v14 = v20;
  long long v15 = v21;
  uint64_t v16 = *((void *)&v21 + 1);
  uint64_t v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED450EA8;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED47CF08[0];
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED42B3B8;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  long long v18;
  unsigned char v19[32];
  long long v20;
  long long v21;
  char v22;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  int v20 = *(_OWORD *)(a2 + 48);
  uint64_t v21 = v5;
  char v22 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&unsigned char v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>, (uint64_t)&type metadata for NavigationPresentationAdaptorModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
  PropertyList.subscript.setter();
  long long v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int64_t v11 = *(void *)v19;
  unint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  int v14 = v20;
  long long v15 = v21;
  uint64_t v16 = *((void *)&v21 + 1);
  uint64_t v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED4399E0;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED443BB8;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED45D680;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED453F50;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  long long v18;
  unsigned char v19[32];
  long long v20;
  long long v21;
  char v22;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  int v20 = *(_OWORD *)(a2 + 48);
  uint64_t v21 = v5;
  char v22 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&unsigned char v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput();
  uint64_t result = PropertyList.subscript.getter();
  if (__OFADD__(v9, 1))
  {
    __break(1u);
  }
  else
  {
    PropertyList.subscript.setter();
    long long v9 = v18;
    uint64_t v10 = DWORD2(v18);
    int64_t v11 = *(void *)v19;
    unint64_t v12 = *(_OWORD *)&v19[8];
    uint64_t v13 = *(void *)&v19[24];
    int v14 = v20;
    long long v15 = v21;
    uint64_t v16 = *((void *)&v21 + 1);
    uint64_t v17 = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    long long v8 = swift_bridgeObjectRetain();
    a3(v8, &v9);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  return result;
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  long long v18;
  unsigned char v19[32];
  long long v20;
  long long v21;
  char v22;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  int v20 = *(_OWORD *)(a2 + 48);
  uint64_t v21 = v5;
  char v22 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&unsigned char v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>, (uint64_t)&type metadata for ObservableDocumentBoxModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  PropertyList.subscript.setter();
  long long v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int64_t v11 = *(void *)v19;
  unint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  int v14 = v20;
  long long v15 = v21;
  uint64_t v16 = *((void *)&v21 + 1);
  uint64_t v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED45D6B0;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for SearchEnvironmentWritingModifier(0);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED459968;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED434B60;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED462108;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED41DAB0;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for KeyPressModifier(0);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED4647B0;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for ContentConfigurationBasedRootEnvironment();
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED461878;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED454730;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for TabViewCustomizationModifier();
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED437EB8;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED43D138;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED457DD0;
  outlined retain of _ViewListInputs(a2);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED45C4D8;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _IndefiniteSymbolEffectModifier(0);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  void (__cdecl *v7)();
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  int v16;
  uint64_t v17;
  char v18;
  long long v19;
  unsigned char v20[32];
  long long v21;
  long long v22;
  char v23;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  uint64_t v21 = *(_OWORD *)(a2 + 48);
  char v22 = v5;
  long long v23 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v19 = *(_OWORD *)a2;
  *(_OWORD *)int v20 = v6;
  *(_OWORD *)&unsigned char v20[16] = v4;
  long long v7 = (void (__cdecl *)())off_1ED45DCA0;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _ConditionalSymbolEffectModifier(0);
  v7();
  uint64_t v10 = v19;
  int64_t v11 = DWORD2(v19);
  unint64_t v12 = *(void *)v20;
  uint64_t v13 = *(_OWORD *)&v20[8];
  int v14 = *(void *)&v20[24];
  long long v15 = v21;
  uint64_t v16 = v22;
  uint64_t v17 = *((void *)&v22 + 1);
  uint64_t v18 = v23;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  long long v14;
  int v15;
  uint64_t v16;
  char v17;
  long long v18;
  unsigned char v19[32];
  long long v20;
  long long v21;
  char v22;

  char v4 = *(_OWORD *)(a2 + 32);
  int v5 = *(_OWORD *)(a2 + 64);
  int v20 = *(_OWORD *)(a2 + 48);
  uint64_t v21 = v5;
  char v22 = *(unsigned char *)(a2 + 80);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  uint64_t v18 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v19 = v6;
  *(_OWORD *)&unsigned char v19[16] = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>, (uint64_t)&type metadata for _ReclaimForEachElementsViewModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  AGCreateWeakAttribute();
  PropertyList.subscript.setter();
  long long v9 = v18;
  uint64_t v10 = DWORD2(v18);
  int64_t v11 = *(void *)v19;
  unint64_t v12 = *(_OWORD *)&v19[8];
  uint64_t v13 = *(void *)&v19[24];
  int v14 = v20;
  long long v15 = v21;
  uint64_t v16 = *((void *)&v21 + 1);
  uint64_t v17 = v22;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v7 = swift_bridgeObjectRetain();
  a3(v7, &v9);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabelStyleConfiguration.Icon(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.Footer(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t specialized static ViewAlias._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Footer> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SectionStyleConfiguration.Footer, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.RawContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SectionStyleConfiguration.RawContent, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Icon> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for LabelStyleConfiguration.Icon, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ButtonStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ButtonStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<PrimitiveButtonStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for PrimitiveButtonStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<HelpStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for HelpStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabelGroupStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for LabelGroupStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (void (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_NavigationStackStyleConfiguration.Root> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (void (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for _NavigationStackStyleConfiguration.Root, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for NavigationSplitViewStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Sidebar> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for NavigationSplitViewStyleConfiguration.Sidebar, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Detail> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for NavigationSplitViewStyleConfiguration.Detail, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Header> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SectionStyleConfiguration.Header, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Title> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for LabelStyleConfiguration.Title, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for LabeledContentStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for LabeledContentStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Actions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SectionStyleConfiguration.Actions, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ToggleStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ToggleStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (void (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ListStyleContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (void (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ListStyleContent, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Suggestions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SearchFieldConfiguration.Suggestions, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for EnvironmentValues.SearchField, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for GaugeStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchSuggestions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for EnvironmentValues.SearchSuggestions, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomScopeBar> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for EnvironmentValues.SearchCustomScopeBar, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.TextInputSuggestions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for EnvironmentValues.TextInputSuggestions, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomAccessory> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for EnvironmentValues.SearchCustomAccessory, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (void (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<AccessoryBarContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (void (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for AccessoryBarContent, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_TextFieldStyleLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for _TextFieldStyleLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_DatePickerStyleLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for _DatePickerStyleLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Footer> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for FormStyleConfiguration.Footer, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for FormStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for MenuStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for MenuStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (void (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<PreviewModifierContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (void (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for PreviewModifierContent, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MarkedValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for GaugeStyleConfiguration.MarkedValueLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for GaugeStyleConfiguration.CurrentValueLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for GaugeStyleConfiguration.MaximumValueLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for GaugeStyleConfiguration.MinimumValueLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (void (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<OutlineSubgroupChildren> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (void (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for OutlineSubgroupChildren, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<TokenFieldConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for TokenFieldConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (void (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ResolvedRadioGroupPicker.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (void (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ResolvedRadioGroupPicker.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SearchFieldConfiguration.Scopes, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Control> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SearchFieldConfiguration.Control, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SliderStyleConfiguration.MaximumValueLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SliderStyleConfiguration.MinimumValueLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for SliderStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<UIKitButtonConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for UIKitButtonConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<StepperStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for StepperStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for GroupBoxStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for GroupBoxStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<BadgeViewStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for BadgeViewStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<DatePickerStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for DatePickerStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ListRowHeightTemplateContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ListRowHeightTemplateContent, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ColorPickerStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ColorPickerStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for _MenuButtonStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for _MenuButtonStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ControlGroupStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ControlGroupStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ProgressViewStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for DisclosureGroupStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for DisclosureGroupStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t RowHeightTemplate;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ListFirstRowHeightTemplateContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  RowHeightTemplate = lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for ListFirstRowHeightTemplateContent, RowHeightTemplate, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<MultiDatePickerStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for MultiDatePickerStyleConfiguration.Label, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v11;
  long long v12;
  long long v13;
  unsigned __int8 v15;
  long long v16;
  unsigned char v17[32];
  long long v18;
  long long v19;
  char v20;
  uint64_t v21;
  long long v22;
  unsigned char v23[32];
  long long v24;
  long long v25;
  char v26;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 32);
  long long v24 = v3;
  long long v25 = *(_OWORD *)(a2 + 64);
  char v26 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)long long v23 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  outlined retain of _ViewListInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_NavigationViewStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!(void)v16)
  {
    uint64_t v21 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v16 + 48);
  uint64_t v7 = *(void *)(v16 + 16);
  uint64_t v6 = *(void *)(v16 + 24);
  uint64_t v8 = *(void *)(v16 + 32);
  uint64_t v9 = *(unsigned int *)(v16 + 40);
  unsigned __int8 v15 = *(unsigned char *)(v16 + 44);
  swift_retain();
  swift_release();
  uint64_t v21 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 32);
    long long v18 = v12;
    long long v19 = *(_OWORD *)(a2 + 64);
    char v20 = *(unsigned char *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 16);
    long long v16 = *(_OWORD *)a2;
    *(_OWORD *)uint64_t v17 = v13;
    static _ViewListOutputs.emptyViewList(inputs:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  _GraphInputs.resetCurrentStyleableView()();
  *(void *)&long long v16 = v22;
  DWORD2(v16) = DWORD2(v22);
  *(void *)uint64_t v17 = *(void *)v23;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v23[8];
  *(void *)&v17[24] = *(void *)&v23[24];
  long long v18 = v24;
  LODWORD(v19) = v25;
  *((void *)&v19 + 1) = *((void *)&v25 + 1);
  char v20 = v26;
  uint64_t v10 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, long long *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 16);
  unint64_t v11 = lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content();
  LOBYTE(v21) = v15;
  v10(&v21, v7, v6, v8, v9 | ((unint64_t)v15 << 32), &v16, &type metadata for _NavigationViewStyleConfiguration.Content, v11, v7, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.RawContent(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PrimitiveButtonStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  }
  return result;
}

void type metadata accessor for SourceInput<ListStyleContent>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for SourceInput();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SourceInput<ListStyleContent>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of _ViewListInputs(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for static AnySourceFormula.makeViewList<A>(view:source:inputs:) in conformance SourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return static SourceFormula.makeViewList<A>(view:source:inputs:)(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32));
}

uint64_t static SourceFormula.makeViewList<A>(view:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0]) {
    return static _ViewListOutputs.emptyViewList(inputs:)();
  }
  if ((a5 & 0x100000000) != 0)
  {
    _GraphValue.init(_:)();
  }
  else
  {
    type metadata accessor for Optional();
    _GraphValue.init(_:)();
    swift_getWitnessTable();
  }
  return static View.makeDebuggableViewList(view:inputs:)();
}

uint64_t HelpView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content();
  uint64_t v6 = *(void *)(a1 + 24);
  char v28 = &type metadata for HelpStyleConfiguration.Content;
  uint64_t v29 = v4;
  unint64_t v30 = v5;
  uint64_t v31 = v6;
  type metadata accessor for StaticSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)v21 - v12;
  uint64_t v14 = v2 + *(int *)(a1 + 36);
  uint64_t v15 = *(void *)(v14 + 8);
  char v16 = *(unsigned char *)(v14 + 16);
  uint64_t v17 = *(void *)(v14 + 24);
  char v28 = *(ValueMetadata **)v14;
  uint64_t v29 = v15;
  LOBYTE(v30) = v16;
  uint64_t v31 = v17;
  uint64_t v23 = v4;
  uint64_t v24 = v6;
  uint64_t v25 = v2;
  outlined copy of Text.Storage((uint64_t)v28, v15, v16);
  unint64_t v18 = lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle();
  swift_bridgeObjectRetain();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for HelpStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in HelpView.body.getter, (uint64_t)v22, (uint64_t)&unk_1ED4248F0, (uint64_t)&type metadata for HelpStyleConfiguration.Content, v4, v18);
  outlined consume of Text.Storage((uint64_t)v28, v29, v30);
  swift_bridgeObjectRelease();
  unint64_t v26 = v18;
  long long v27 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  long long v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, v7);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance HelpStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  }
  return result;
}

uint64_t LabelGroup.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v24 = &type metadata for LabelGroupStyleConfiguration.Content;
  uint64_t v25 = v4;
  unint64_t v26 = v5;
  uint64_t v27 = v6;
  type metadata accessor for StaticSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)v17 - v12;
  uint64_t v19 = v4;
  uint64_t v20 = v6;
  uint64_t v21 = v2;
  unint64_t v14 = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for LabelGroupStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in LabelGroup.body.getter, (uint64_t)v18, (uint64_t)&type metadata for ResolvedLabelGroupStyle, (uint64_t)&type metadata for LabelGroupStyleConfiguration.Content, v4, v14);
  unint64_t v22 = v14;
  uint64_t v23 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabelGroupStyleConfiguration.Content(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions;
  if (!lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _NavigationStackStyleConfiguration.Root(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter(uint64_t a1)
{
  outlined init with copy of NavigationAuthority(v1 + 24, (uint64_t)v15);
  Swift::UInt v3 = *(void *)v1;
  Swift::UInt v4 = *(void *)(v1 + 16);
  unint64_t v5 = (unsigned int *)(v1 + *(int *)(a1 + 44));
  uint64_t v6 = *v5;
  unsigned __int8 v7 = *(unsigned char *)(v1 + 8);
  LOBYTE(v16) = *((unsigned char *)v5 + 4);
  _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)((uint64_t)v15, v3, v7, v4, v6 | ((unint64_t)v16 << 32), (uint64_t)&v16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = v8;
  uint64_t v14 = v1;
  unint64_t v9 = lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle();
  lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root();
  swift_bridgeObjectRetain();
  swift_retain();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, (void (*)(double))partial apply for closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter, (uint64_t)v11, (uint64_t)&type metadata for ResolvedNavigationStackStyle, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Root, v12, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root;
  if (!lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle;
  if (!lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedNavigationStackStyle and conformance ResolvedNavigationStackStyle);
  }
  return result;
}

uint64_t _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)@<X0>(uint64_t a1@<X0>, Swift::UInt a2@<X1>, unsigned __int8 a3@<W2>, Swift::UInt a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong
    && (uint64_t v13 = Strong + 16,
        swift_beginAccess(),
        _s7SwiftUI15NavigationStateVSgWObTm_0(v13, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?), swift_release(), _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v22, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v23) != 1))
  {
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v22, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState);
    v27[6] = v19[6];
    v27[7] = v19[7];
    v27[8] = v19[8];
    __int16 v28 = v20;
    void v27[2] = v19[2];
    v27[3] = v19[3];
    v27[4] = v19[4];
    long long v27[5] = v19[5];
    v27[0] = v19[0];
    v27[1] = v19[1];
    NavigationState.stackContent(for:)(a2, a3, a4, (uint64_t)v25);
    outlined retain of NavigationState?((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v25, (uint64_t)v21, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v21, (uint64_t)v24, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v24) != 1)
    {
      _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v21, (uint64_t)v27, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
      goto LABEL_8;
    }
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v21, (uint64_t)v26, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v24);
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v24, (uint64_t)v26, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v26, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.StackContent?);
  v25[0] = a2;
  if (a3 == 4) {
    unsigned __int8 v14 = 0;
  }
  else {
    unsigned __int8 v14 = a3;
  }
  LOBYTE(v25[1]) = v14;
  void v25[2] = a4;
  _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(v25);
  outlined init with take of NavigationState.Base(v25, v27);
LABEL_8:
  outlined init with take of NavigationState.Base(v27, v24);
  v24[49] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v24[50] = 0;
  v24[51] = &outlined read-only object #0 of _NavigationStackStyleConfiguration.init(authority:context:structureSeed:);
  uint64_t v15 = memcpy(v25, v24, sizeof(v25));
  MEMORY[0x1F4188790](v15);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  uint64_t v16 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH01_hJ18StyleConfigurationV4RootVAH13EmptyModifierVGG_AR4ItemVs5NeverOTB505_sSi7f4UI15hi3V12jk27V14PositionedViewVAA01_cE18mn2V4r32VIgynr_Si6offset_AG7elementtAKs5S11OIegnrzr_TRSiAL0yZ0VAZIgynr_Tf1cn_nTf4ng_n(v25, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:));
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v24);
  outlined init with take of NavigationAuthority(a1, (uint64_t)v21);
  uint64_t v17 = swift_allocObject();
  uint64_t result = outlined init with take of NavigationAuthority((uint64_t)v21, v17 + 16);
  *(void *)(v17 + 40) = a2;
  *(unsigned char *)(v17 + 48) = a3;
  *(void *)(v17 + 56) = a4;
  *(void *)a6 = a2;
  *(unsigned char *)(a6 + 8) = a3;
  *(void *)(a6 + 16) = a4;
  *(void *)(a6 + 24) = v16;
  *(void *)(a6 + 32) = partial apply for closure #2 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:);
  *(void *)(a6 + 40) = v17;
  *(_DWORD *)(a6 + 48) = a5;
  *(unsigned char *)(a6 + 52) = BYTE4(a5) & 1;
  return result;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH01_hJ18StyleConfigurationV4RootVAH13EmptyModifierVGG_AR4ItemVs5NeverOTB505_sSi7f4UI15hi3V12jk27V14PositionedViewVAA01_cE18mn2V4r32VIgynr_Si6offset_AG7elementtAKs5S11OIegnrzr_TRSiAL0yZ0VAZIgynr_Tf1cn_nTf4ng_n(const void *a1, void (*a2)(long long *__return_ptr, uint64_t))
{
  uint64_t v71 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v3 = v71;
  memcpy(__dst, a1, sizeof(__dst));
  memcpy(__src, a1, sizeof(__src));
  outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)a1);
  unint64_t v58 = specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter();
  unint64_t v6 = v5;
  int v7 = v4;
  int v9 = v8 & 1;
  v84[392] = v8 & 1;
  unsigned __int8 v69 = v8 & 1;
  if ((v8 & 1) != 0 && v4 > 1u)
  {
LABEL_3:
    memcpy(v59, __src, 0x1A0uLL);
    outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v59);
    return v3;
  }
  else
  {
    uint64_t v11 = 0;
    while (1)
    {
      memcpy(v73, __src, sizeof(v73));
      outlined init with take of NavigationState.Base(v73, v83);
      outlined init with take of NavigationState.Base(v83, v84);
      int v12 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v84);
      unint64_t v56 = v6;
      int v85 = v7;
      uint64_t v57 = v11;
      int v86 = v9;
      if (v12)
      {
        if (v12 == 1)
        {
          uint64_t v13 = (const void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v84);
          memcpy(v59, v13, 0x188uLL);
          memcpy(v79, v13, 0x12BuLL);
          uint64_t v52 = *(void *)&v59[19];
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v73);
          _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v83, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          outlined consume of ResolvedNavigationDestinations?(v52);
          unint64_t v14 = v58;
          char v15 = v86;
          if (v86 & 1 | (v58 != 0)) {
            goto LABEL_33;
          }
          uint64_t v16 = v6;
          char v17 = v85;
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(0, 0, v6, v85, (uint64_t)v79, 0, (uint64_t *)&v60);
          outlined release of NavigationColumnState((uint64_t *)v59);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v73);
        }
        else
        {
          uint64_t v29 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v84);
          uint64_t v30 = *(void *)v29;
          uint64_t v31 = *(void *)(v29 + 8);
          uint64_t v33 = *(void *)(v29 + 16);
          uint64_t v32 = *(void *)(v29 + 24);
          uint64_t v35 = *(void *)(v29 + 32);
          uint64_t v34 = *(void *)(v29 + 40);
          uint64_t v36 = *(void *)(v29 + 48);
          uint64_t v37 = *(void *)(v29 + 56);
          uint64_t v38 = *(void *)(v29 + 64);
          unsigned __int16 v39 = *(_WORD *)(v29 + 72);
          v81[0] = v31;
          v81[1] = v33;
          v81[2] = v32;
          v81[3] = v35;
          v81[4] = v34;
          v81[5] = v36;
          v81[6] = v37;
          v81[7] = v38;
          unsigned __int16 v82 = v39;
          if (v86) {
            goto LABEL_32;
          }
          unint64_t v14 = v58;
          if ((v58 & 0x8000000000000000) != 0) {
            goto LABEL_29;
          }
          if (*(void *)(v30 + 16) < v58) {
            goto LABEL_30;
          }
          unsigned __int16 v49 = v39;
          uint64_t v50 = v38;
          uint64_t v51 = v37;
          uint64_t v54 = v36;
          outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v73);
          _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)v83, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
          uint64_t v40 = swift_bridgeObjectRetain();
          double v41 = (char *)specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v40, (uint64_t)v81, 0, (2 * v58) | 1);
          swift_bridgeObjectRelease();
          if (v58 >= *(void *)(v30 + 16)) {
            goto LABEL_31;
          }
          memcpy(v80, (const void *)(v30 + 304 * v58 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v80);
          swift_bridgeObjectRelease();
          uint64_t v16 = v56;
          uint64_t v48 = v34;
          char v17 = v85;
          specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)(v58, 0, v56, v85, (uint64_t)v80, v41, (uint64_t *)&v60);
          outlined copy of NavigationSplitViewState?(v31, v33, v32, v35, v48, v54, v51, v50, v49, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          outlined release of NavigationColumnState(v80);
          outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v73);
          char v15 = v86;
        }
      }
      else
      {
        uint64_t v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v84);
        uint64_t v19 = *(void *)v18;
        uint64_t v20 = *(unsigned __int8 *)(v18 + 8);
        unint64_t v21 = *(void *)(v18 + 16);
        uint64_t v22 = v73[51];
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v73);
        uint64_t v23 = static HorizontalAlignment.center.getter();
        if (!*(void *)(v22 + 16)) {
          goto LABEL_28;
        }
        uint64_t v24 = v23;
        v74[0] = 0;
        v74[1] = v19;
        char v75 = v20;
        unint64_t v76 = v21;
        uint64_t v77 = 0;
        BOOL v78 = v20 == 3;
        uint64_t v25 = (void (*)(void *))v73[49];
        char v26 = v20 >= 3 ? 3 : v20;
        char v53 = v26;
        uint64_t v27 = swift_allocObject();
        *(unsigned char *)(v27 + 16) = 1;
        v25(v74);
        v59[0] = (unint64_t)v24;
        LOBYTE(v59[1]) = 1;
        *((void *)&v59[1] + 1) = 0;
        *(void *)&v59[2] = v19;
        *((void *)&v59[2] + 1) = v20;
        v59[3] = v21;
        LOBYTE(v59[4]) = v20 == 3;
        uint64_t v16 = v6;
        BYTE1(v59[4]) = 1;
        *((void *)&v59[4] + 1) = closure #1 in View.readNavigationDestinations<A>(position:isActive:reader:)partial apply;
        *(void *)&v59[5] = v27;
        char v17 = v85;
        char v15 = v86;
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>();
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>();
        uint64_t v28 = AnyView.init<A>(_:)();
        *((void *)&v61[2] + 1) = 0;
        *(_OWORD *)((char *)v61 + 8) = 0u;
        *(_OWORD *)((char *)&v61[1] + 8) = 0u;
        char v62 = 2;
        outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v73);
        *(void *)&long long v60 = v28;
        BYTE8(v60) = v53;
        *(void *)&v61[0] = 0;
        unint64_t v14 = v58;
      }
      uint64_t v42 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(v14, v15 & 1, v16, v17);
      unsigned __int8 v69 = v45 & 1;
      *(long long *)((char *)&v59[2] + 8) = v61[1];
      *(long long *)((char *)&v59[3] + 8) = v61[2];
      BYTE8(v59[4]) = v62;
      *(long long *)((char *)v59 + 8) = v60;
      *(long long *)((char *)&v59[1] + 8) = v61[0];
      if (__OFADD__(v57, 1)) {
        break;
      }
      unint64_t v6 = v43;
      int v7 = v44;
      unint64_t v58 = v42;
      long long v66 = *(long long *)((char *)&v59[2] + 8);
      long long v67 = *(long long *)((char *)&v59[3] + 8);
      char v68 = BYTE8(v59[4]);
      long long v64 = *(long long *)((char *)v59 + 8);
      long long v65 = *(long long *)((char *)&v59[1] + 8);
      uint64_t v63 = v57;
      a2(v59, v57);
      outlined destroy of (offset: Int, element: NavigationState.StackContent.PositionedView)((uint64_t)&v63, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: NavigationState.StackContent.PositionedView));
      uint64_t v3 = v71;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v71;
      }
      unint64_t v47 = *(void *)(v3 + 16);
      unint64_t v46 = *(void *)(v3 + 24);
      if (v47 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v46 > 1), v47 + 1, 1);
        uint64_t v3 = v71;
      }
      *(void *)(v3 + 16) = v47 + 1;
      outlined init with take of _NavigationStackStyleConfiguration.Item(v59, v3 + (v47 << 7) + 32);
      int v9 = v69;
      uint64_t v11 = v57 + 1;
      if (v69 == 1 && v7 > 1u) {
        goto LABEL_3;
      }
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<ViewResponder>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<ViewResponder>, type metadata accessor for WeakBox<ViewResponder>);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<[Text]>, (unint64_t *)&lazy cache variable for type metadata for [Text], MEMORY[0x1E4F41420]);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<[AnyAccessibilityAction]>, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<URLSessionBackgroundTask>>, (unint64_t *)&lazy cache variable for type metadata for BackgroundTaskEntry<URLSessionBackgroundTask>, (uint64_t)&type metadata for URLSessionBackgroundTask, (uint64_t)&protocol witness table for URLSessionBackgroundTask);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>>, &lazy cache variable for type metadata for BackgroundTaskEntry<UnidentifiedURLSessionBackgroundTask>, (uint64_t)&type metadata for UnidentifiedURLSessionBackgroundTask, (uint64_t)&protocol witness table for UnidentifiedURLSessionBackgroundTask);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<AccessibilityNode>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<AccessibilityNode>, type metadata accessor for WeakBox<AccessibilityNode>);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

{
  void **v3;
  void *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_NavigationStackStyleConfiguration.Item>, (uint64_t)&type metadata for _NavigationStackStyleConfiguration.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 95;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 7);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 < a4 || v10 + 4 >= &a4[16 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(String, Any)>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (Badge, Spacer)(0, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<()>, (uint64_t (*)(uint64_t))type metadata accessor for (), MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ()();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(offset: Int, element: AccessibilityNode)>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (offset: Int, element: ToolbarStorage.Item)(0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: AccessibilityNode), (void (*)(uint64_t))type metadata accessor for AccessibilityNode);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<HitTestTrace<ResponderBasedHitTestTracing>>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[11 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 88 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(0, (unint64_t *)&lazy cache variable for type metadata for HitTestTrace<ResponderBasedHitTestTracing>, (uint64_t)&type metadata for ResponderBasedHitTestTracing, (uint64_t)&protocol witness table for ResponderBasedHitTestTracing, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for HitTestTrace);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: String?, value: String)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: String?, value: String), MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (key: String?, value: String)();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WheelPickerRow<AnyHashable, Subview>>, (uint64_t (*)(uint64_t))type metadata accessor for WheelPickerRow<AnyHashable, Subview>, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[18 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 144 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for WheelPickerRow<AnyHashable, Subview>();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<String?>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<([Text], [AnyAccessibilityAction])>, (uint64_t (*)(uint64_t))type metadata accessor for ([Text], [AnyAccessibilityAction]), MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ([Text], [AnyAccessibilityAction])();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformListCell & UIFocusItem>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformListCell & UIFocusItem, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for PlatformListCell & UIFocusItem();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<SliderMark<Double>>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for SliderMark<Double>, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SliderMark);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[CGRect]>, (uint64_t (*)(uint64_t))type metadata accessor for [CGRect], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for [CGRect](0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<UIKitProxyFocusItem>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[2 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UIViewController, TabEntry)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIViewController, TabEntry), MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    void v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 280);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[35 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 280 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (UIViewController, TabEntry)();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<BackgroundTaskEntry<AppRefreshBackgroundTask>>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(0, &lazy cache variable for type metadata for BackgroundTaskEntry<AppRefreshBackgroundTask>, (uint64_t)&type metadata for AppRefreshBackgroundTask, (uint64_t)&protocol witness table for AppRefreshBackgroundTask, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(name: String, value: String)>();
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    void v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[4 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)(0, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t outlined destroy of (offset: Int, element: NavigationState.StackContent.PositionedView)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (offset: Int, element: NavigationState.StackContent.PositionedView)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: NavigationState.StackContent.PositionedView))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: NavigationState.StackContent.PositionedView));
    }
  }
}

uint64_t partial apply for closure #1 in _NavigationStackStyleConfiguration.init(authority:context:structureSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  char v8 = *(unsigned char *)(v3 + 24);
  uint64_t v9 = *(void *)(v3 + 32);
  outlined init with copy of NavigationAuthority(*(void *)(v3 + 40), a3 + 24);
  uint64_t result = outlined init with copy of NavigationStackViewSource(a2 + 24, a3 + 56);
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v9;
  *(void *)(a3 + 48) = a1;
  *(void *)(a3 + 104) = v7;
  *(unsigned char *)(a3 + 112) = v8;
  *(void *)(a3 + 120) = v9;
  return result;
}

uint64_t outlined init with take of _NavigationStackStyleConfiguration.Item(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  *(void *)(a2 + 16) = *((void *)a1 + 2);
  *(_OWORD *)a2 = v4;
  swift_weakTakeInit();
  *(_OWORD *)(a2 + 32) = a1[2];
  long long v5 = a1[7];
  long long v7 = a1[4];
  long long v6 = a1[5];
  *(_OWORD *)(a2 + 96) = a1[6];
  *(_OWORD *)(a2 + 112) = v5;
  *(_OWORD *)(a2 + 64) = v7;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = a1[3];
  return a2;
}

uint64_t outlined init with copy of NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for NavigationStackViewSource(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 40);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(void *)a1 = *(void *)a2;
    long long v6 = (_OWORD *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 16);
    swift_retain();
    if (v7 == 1)
    {
      *(_OWORD *)(a1 + 8) = *v6;
    }
    else
    {
      *(void *)(a1 + 8) = *(void *)v6;
      *(void *)(a1 + 16) = v7;
      swift_retain();
    }
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v4)
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.view(at:state:baseDepth:)@<X0>(int64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11 = *(void *)(a5 + 16);
  unsigned int v12 = *(unsigned __int8 *)(a5 + 24);
  uint64_t v13 = *(void *)(a5 + 32);
  uint64_t v14 = *(void *)(a5 + 168);
  if (a4)
  {
    if (a4 == 1)
    {
      uint64_t v112 = a7;
      if ((v14 & 0x8000000000000000) == 0)
      {
        uint64_t v110 = v13;
        uint64_t v111 = v7;
        uint64_t v15 = *(void *)(a5 + 176);
        uint64_t v16 = *(uint64_t (**)(uint64_t))(*(void *)v14 + 88);
        uint64_t v17 = swift_retain();
        uint64_t v18 = v16(v17);
        uint64_t v19 = v18 + 1;
        if (!__OFADD__(v18, 1))
        {
          uint64_t v20 = v19 + a3;
          if (!__OFADD__(v19, a3))
          {
            if ((a3 & 0x8000000000000000) == 0)
            {
              if (*(void *)(v15 + 16) > a3)
              {
                unint64_t v21 = &a6[v20];
                if (!__OFADD__(a6, v20))
                {
                  uint64_t v22 = (void *)(v15 + 56 * a3);
                  uint64_t v23 = v22[4];
                  *(void *)&long long v134 = v20;
                  *((void *)&v134 + 1) = v11;
                  LOBYTE(v135) = v12;
                  *((void *)&v135 + 1) = v110;
                  *(void *)&long long v136 = v21;
                  BYTE8(v136) = 1;
                  uint64_t v24 = v111[49];
                  uint64_t v25 = v111[50];
                  char v26 = *(uint64_t (**)(long long *, uint64_t, uint64_t, void, void))(*(void *)v23 + 104);
                  swift_retain();
                  uint64_t v111 = (void *)v26(&v134, v24, v25, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3F738]);
                  swift_release();
                  if (v12 >= 3) {
                    int v27 = 3;
                  }
                  else {
                    int v27 = v12;
                  }
                  LODWORD(v110) = v27;
                  uint64_t v28 = v22[5];
                  uint64_t v29 = v22[6];
                  uint64_t v30 = v22[7];
                  uint64_t v31 = v22[8];
                  swift_retain();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v29, v30);
                  swift_retain();
                  swift_release();
                  swift_retain();
                  outlined copy of Text.LineStyle?(v29, v30);
                  swift_release();
                  swift_release();
                  outlined consume of Text.LineStyle?(v29, v30);
                  uint64_t result = swift_release();
                  uint64_t v33 = v112;
                  v112[4] = v29;
                  v33[5] = v30;
                  v33[6] = v31;
                  *((unsigned char *)v33 + 64) = 1;
                  uint64_t *v33 = (uint64_t)v111;
                  *((unsigned char *)v33 + 8) = v110;
                  v33[2] = v20;
                  v33[3] = v28;
                  return result;
                }
                goto LABEL_58;
              }
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
LABEL_56:
            __break(1u);
            goto LABEL_57;
          }
          goto LABEL_54;
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
      goto LABEL_65;
    }
    uint64_t v52 = *(void *)(a5 + 112);
    uint64_t v51 = *(void *)(a5 + 120);
    char v53 = *(uint64_t **)(a5 + 128);
    uint64_t v54 = *(void *)(a5 + 136);
    uint64_t v55 = *(void *)(a5 + 144);
    uint64_t v56 = *(void *)(a5 + 160);
    if (v14 < 0)
    {
      if ((v52 & 0xF000000000000007) == 0xF000000000000007)
      {
        if (a2)
        {
LABEL_62:
          __break(1u);
          goto LABEL_65;
        }
        uint64_t v57 = (uint64_t)a6;
        uint64_t v58 = *(void *)(a5 + 16);
        unsigned __int8 v59 = *(unsigned char *)(a5 + 24);
        uint64_t v60 = *(void *)(a5 + 32);
LABEL_27:
        return specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)(a1, v57, v58, v59, v60, (uint64_t)a7);
      }
      if (v52 < 0)
      {
        uint64_t v88 = *(void *)(a5 + 112);
        uint64_t v89 = *(void *)(a5 + 120);
        uint64_t v90 = *(void *)(a5 + 128);
        uint64_t v111 = *(void **)(a5 + 136);
        uint64_t v112 = v53;
        uint64_t v106 = v56;
        uint64_t v109 = v55;
        uint64_t v110 = v51;
        outlined copy of NavigationColumnState.ReplacedRoot?(v88, v89, v90, v54);
        goto LABEL_47;
      }
    }
    else
    {
      if ((v52 & 0xF000000000000007) == 0xF000000000000007)
      {
        if (a2)
        {
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        uint64_t v57 = (uint64_t)a6;
        uint64_t v58 = *(void *)(a5 + 16);
        unsigned __int8 v59 = *(unsigned char *)(a5 + 24);
        uint64_t v60 = *(void *)(a5 + 32);
        goto LABEL_27;
      }
      if (v52 < 0)
      {
        uint64_t v61 = *(void *)(a5 + 112);
        uint64_t v62 = *(void *)(a5 + 120);
        uint64_t v63 = *(void *)(a5 + 128);
        uint64_t v111 = *(void **)(a5 + 136);
        uint64_t v112 = v53;
        uint64_t v106 = v56;
        uint64_t v109 = v55;
        uint64_t v110 = v51;
        outlined copy of NavigationColumnState.ReplacedRoot(v61, v62, v63, v54);
LABEL_47:
        *(void *)&long long v134 = 0;
        *((void *)&v134 + 1) = v11;
        LOBYTE(v135) = v12;
        *((void *)&v135 + 1) = v13;
        *(void *)&long long v136 = a6;
        BYTE8(v136) = v14 >= 0;
        uint64_t v91 = swift_allocObject();
        memcpy((void *)(v91 + 16), v7, 0x1A0uLL);
        *(void *)(v91 + 432) = v11;
        *(unsigned char *)(v91 + 440) = v12;
        *(void *)(v91 + 448) = v13;
        uint64_t v92 = *(uint64_t (**)(long long *, uint64_t (*)(), uint64_t, uint64_t, unint64_t))(*(void *)(v52 & 0x7FFFFFFFFFFFFFFFLL) + 104);
        outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
        type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(0, &lazy cache variable for type metadata for ModifiedContent<EmptyModifier, ReplacedRootDismissModifier>, MEMORY[0x1E4F3F740], (uint64_t)&type metadata for ReplacedRootDismissModifier, MEMORY[0x1E4F3FBA0]);
        uint64_t v94 = v93;
        unint64_t v95 = lazy protocol witness table accessor for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
        uint64_t v96 = v92(&v134, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v91, v94, v95);
        swift_release();
        if (v12 >= 3) {
          char v97 = 3;
        }
        else {
          char v97 = v12;
        }
        uint64_t v98 = v110;
        swift_retain();
        uint64_t v99 = (uint64_t)v111;
        outlined copy of Text.LineStyle?((uint64_t)v112, (uint64_t)v111);
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?((uint64_t)v112, (uint64_t)v111);
        uint64_t result = swift_release();
        a7[4] = (uint64_t)v112;
        a7[5] = v99;
        a7[6] = v109;
        *((unsigned char *)a7 + 64) = 1;
        *a7 = v96;
        *((unsigned char *)a7 + 8) = v97;
        a7[3] = v98;
        goto LABEL_51;
      }
    }
    if (a2)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    outlined init with take of NavigationState.Base(v7, v124);
    outlined init with take of NavigationState.Base(v124, &v134);
    int v64 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)&v134);
    long long v107 = (uint64_t (*)(void, void, void, void, void, void))a6;
    uint64_t v108 = v52;
    if (v64 == 1)
    {
      uint64_t v65 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v134);
      uint64_t v109 = *(void *)(v65 + 304);
      if (!v109 || a1) {
        goto LABEL_65;
      }
      uint64_t v66 = *(void *)(v65 + 384);
      uint64_t v68 = *(void *)(v65 + 344);
      uint64_t v67 = *(void *)(v65 + 352);
      int v101 = *(unsigned __int8 *)(v65 + 376);
      uint64_t v69 = *(void *)(v65 + 360);
      uint64_t v102 = *(void *)(v65 + 368);
      uint64_t v103 = *(void *)(v65 + 328);
      uint64_t v104 = v66;
      long long v70 = *(uint64_t **)(v65 + 320);
      uint64_t v111 = *(void **)(v65 + 336);
      uint64_t v112 = v70;
      uint64_t v110 = *(void *)(v65 + 312);
      uint64_t v106 = v67;
      swift_retain();
      uint64_t v105 = v69;
      swift_retain();
    }
    else
    {
      if (v64 != 2)
      {
        _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v134);
        goto LABEL_65;
      }
      uint64_t v71 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)&v134);
      if (a1 <= 0)
      {
LABEL_65:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      if ((unint64_t)(a1 - 1) >= *(void *)(*(void *)v71 + 16))
      {
LABEL_59:
        __break(1u);
        goto LABEL_60;
      }
      uint64_t v72 = *(void *)v71 + 304 * (a1 - 1);
      uint64_t v74 = *(void *)(v72 + 224);
      uint64_t v73 = *(void *)(v72 + 232);
      uint64_t v112 = *(uint64_t **)(v72 + 240);
      uint64_t v75 = *(void *)(v72 + 248);
      uint64_t v76 = *(void *)(v72 + 256);
      uint64_t v77 = *(void *)(v72 + 264);
      uint64_t v110 = v73;
      uint64_t v111 = (void *)v76;
      uint64_t v78 = *(void *)(v72 + 272);
      uint64_t v79 = *(void *)(v72 + 280);
      uint64_t v102 = *(void *)(v72 + 288);
      uint64_t v103 = v75;
      int v101 = *(unsigned __int8 *)(v72 + 296);
      uint64_t v104 = *(void *)(v72 + 304);
      uint64_t v106 = v78;
      swift_retain();
      uint64_t v105 = v79;
      swift_retain();
      uint64_t v109 = v74;
      uint64_t v68 = v77;
    }
    swift_bridgeObjectRetain();
    uint64_t v80 = v110;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v100 = v68;
    swift_retain();
    uint64_t v81 = swift_allocObject();
    memcpy((void *)(v81 + 16), v7, 0x1A0uLL);
    *(void *)(v81 + 432) = v11;
    *(unsigned char *)(v81 + 440) = v12;
    *(void *)(v81 + 448) = v13;
    v129[0] = 0;
    v129[1] = v11;
    char v130 = v12;
    uint64_t v131 = v13;
    uint64_t v132 = v107;
    BOOL v133 = v14 >= 0;
    uint64_t v113 = v109;
    uint64_t v114 = v80;
    char v115 = v112;
    uint64_t v116 = v103;
    uint64_t v117 = (uint64_t)v111;
    uint64_t v118 = v68;
    uint64_t v119 = v106;
    uint64_t v120 = v105;
    uint64_t v121 = v102;
    char v122 = v101;
    uint64_t v123 = v104;
    long long v107 = *(uint64_t (**)(void, void, void, void, void, void))(*(void *)v108 + 168);
    outlined retain of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v7);
    type metadata accessor for ReadDestinationsModifier<ResolvedNavigationDestinations>(0, &lazy cache variable for type metadata for ModifiedContent<EmptyModifier, ReplacedRootDismissModifier>, MEMORY[0x1E4F3F740], (uint64_t)&type metadata for ReplacedRootDismissModifier, MEMORY[0x1E4F3FBA0]);
    uint64_t v83 = v82;
    unint64_t v84 = lazy protocol witness table accessor for type ModifiedContent<EmptyModifier, ReplacedRootDismissModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    uint64_t v85 = v107(&v113, partial apply for specialized closure #1 in NavigationState.StackContent.Views.ViewsSequence.replacedRootModifier(key:), v81, v129, v83, v84);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v86 = swift_bridgeObjectRelease();
    if (v12 >= 3) {
      char v87 = 3;
    }
    else {
      char v87 = v12;
    }
    (*(void (**)(uint64_t))(*(void *)v108 + 96))(v86);
    uint64_t result = swift_release();
    *((unsigned char *)a7 + 64) = 0;
    *a7 = v85;
    *((unsigned char *)a7 + 8) = v87;
LABEL_51:
    a7[2] = 0;
    return result;
  }
  uint64_t v112 = a7;
  if (v14 < 0) {
    goto LABEL_65;
  }
  long long v34 = *(_OWORD *)(a5 + 240);
  long long v136 = *(_OWORD *)(a5 + 224);
  long long v137 = v34;
  long long v138 = *(_OWORD *)(a5 + 256);
  uint64_t v139 = *(void *)(a5 + 272);
  long long v35 = *(_OWORD *)(a5 + 208);
  long long v134 = *(_OWORD *)(a5 + 192);
  long long v135 = v35;
  uint64_t v36 = a3 + 1;
  if (__OFADD__(a3, 1)) {
    goto LABEL_53;
  }
  if (__OFADD__(a6, v36))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v37 = v7[49];
  uint64_t v38 = v7[50];
  uint64_t v113 = a3 + 1;
  uint64_t v114 = v11;
  LOBYTE(v115) = v12;
  uint64_t v116 = v13;
  uint64_t v117 = (uint64_t)&a6[v36];
  LOBYTE(v118) = 1;
  long long v39 = *(_OWORD *)(a5 + 224);
  long long v40 = *(_OWORD *)(a5 + 256);
  long long v126 = *(_OWORD *)(a5 + 240);
  long long v127 = v40;
  uint64_t v128 = *(void *)(a5 + 272);
  long long v41 = *(_OWORD *)(a5 + 208);
  v124[0] = *(_OWORD *)(a5 + 192);
  v124[1] = v41;
  long long v125 = v39;
  uint64_t v42 = *(uint64_t (**)(void *, _OWORD *, uint64_t, uint64_t, unint64_t, uint64_t *, void, void))(*(void *)v14 + 152);
  swift_retain();
  outlined retain of ResolvedNavigationDestinations((uint64_t)&v134);
  uint64_t v43 = v42(v129, v124, v37, v38, a3, &v113, MEMORY[0x1E4F3F740], MEMORY[0x1E4F3F738]);
  outlined release of ResolvedNavigationDestinations((uint64_t)&v134);
  if (v12 >= 3) {
    char v44 = 3;
  }
  else {
    char v44 = v12;
  }
  char v45 = __swift_project_boxed_opaque_existential_1(v129, v131);
  double v46 = MEMORY[0x1F4188790](v45);
  (*(void (**)(char *, double))(v48 + 16))((char *)&v100 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0), v46);
  AnyHashable.init<A>(_:)();
  swift_release();
  BYTE8(v125) = 0;
  unsigned __int16 v49 = v112;
  *uint64_t v112 = v43;
  *((unsigned char *)v49 + 8) = v44;
  v49[2] = v36;
  outlined init with take of NavigationStackViewSource((uint64_t)v124, (uint64_t)(v49 + 3));
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v129);
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.nonReplacedRoot(stateIndex:baseDepth:key:isStacked:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v13 = *(void *)(v6 + 408);
  uint64_t result = static HorizontalAlignment.center.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(v13 + 16) <= a1)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  char v15 = a4;
  v18[0] = 0;
  v18[1] = a3;
  unsigned __int8 v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a2;
  BOOL v22 = a4 == 3;
  uint64_t v16 = *(void (**)(void *))(v6 + 392);
  if (a4 >= 3u) {
    char v15 = 3;
  }
  char v17 = v15;
  *(unsigned char *)(swift_allocObject() + 16) = 1;
  v16(v18);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>();
  uint64_t result = AnyView.init<A>(_:)();
  *(void *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(unsigned char *)(a6 + 64) = 2;
  *(void *)a6 = result;
  *(unsigned char *)(a6 + 8) = v17;
  *(void *)(a6 + 16) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21[2];
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;

  uint64_t v13 = *(void *)(v6 + 408);
  uint64_t result = static HorizontalAlignment.center.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(v13 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  char v15 = result;
  outlined init with copy of _VariadicView_Children(v13 + 56 * a1 + 32, (uint64_t)&v20);
  v18[0] = v15;
  v18[1] = 0;
  unsigned __int8 v19 = 1;
  v21[0] = 0;
  v21[1] = a3;
  BOOL v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a2;
  uint64_t v25 = a4 == 3;
  if (a4 >= 3u) {
    uint64_t v16 = 3;
  }
  else {
    uint64_t v16 = a4;
  }
  char v17 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v18, v21, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v6 + 392));
  uint64_t result = outlined destroy of _VariadicView.Tree<_VStackLayout, _VariadicView_Children>((uint64_t)v18);
  *(void *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(unsigned char *)(a6 + 64) = 2;
  *(void *)a6 = v17;
  *(unsigned char *)(a6 + 8) = v16;
  *(void *)(a6 + 16) = 0;
  return result;
}

{
  uint64_t v6;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void v18[2];
  char v19;
  uint64_t v20;
  uint64_t v21[2];
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;

  uint64_t v13 = *(void *)(v6 + 408);
  uint64_t result = static HorizontalAlignment.center.getter();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(void *)(v13 + 16) <= a1)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  char v15 = result;
  outlined init with copy of ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(v13 + 96 * a1 + 32, (uint64_t)&v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
  v18[0] = v15;
  v18[1] = 0;
  unsigned __int8 v19 = 1;
  v21[0] = 0;
  v21[1] = a3;
  BOOL v22 = a4;
  uint64_t v23 = a5;
  uint64_t v24 = a2;
  uint64_t v25 = a4 == 3;
  if (a4 >= 3u) {
    uint64_t v16 = 3;
  }
  else {
    uint64_t v16 = a4;
  }
  char v17 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v18, v21, *(void (**)(void *__return_ptr, uint64_t *))(v6 + 392));
  uint64_t result = outlined destroy of (offset: Int, element: NavigationState.StackContent.PositionedView)((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>);
  *(void *)(a6 + 56) = 0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(unsigned char *)(a6 + 64) = 2;
  *(void *)a6 = v17;
  *(unsigned char *)(a6 + 8) = v16;
  *(void *)(a6 + 16) = 0;
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _NavigationStackStyleConfiguration.Root>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, EmptyModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  }
  return result;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t getEnumTagSinglePayload for BorderedButtonColorSpec.LabelStyle(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>)
  {
    type metadata accessor for _ViewModifier_Content<DropDestinationModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DropDestinationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier, (uint64_t)&type metadata for DropDestinationModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IdentifiedDropOntoTraitKey>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<DropDestinationModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t PresentationHostingController.update(_:)(uint64_t a1)
{
  PresentationHostingController.presentationKind.getter(&v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  specialized EnvironmentValues.wantsContainerBackgroundPlacement<A>(for:)();
  specialized UIHostingController.host.getter();
  LOBYTE(v4) = _UIHostingView.wantsTransparentBackground.getter();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  long long v4 = *(_OWORD *)a1;
  if (EnvironmentValues.isVisionEnabled.getter())
  {
    long long v4 = 0uLL;
    EnvironmentValues.backgroundInfo.setter();
    long long v4 = xmmword_188368AE0;
    EnvironmentValues.backgroundMaterial.setter();
  }
  return UIHostingController.update(_:)(a1);
}

void PresentationHostingController.presentationKind.getter(unsigned char *a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_viewIfLoaded);
  if (!v3 || (long long v4 = v3, v5 = objc_msgSend(v3, sel_superview), v4, !v5))
  {
LABEL_10:
    LOBYTE(v12) = 0;
    goto LABEL_11;
  }

  id v6 = objc_msgSend(v1, sel_traitCollection);
  id v7 = objc_msgSend(v6, sel__presentationSemanticContext);

  id v8 = objc_msgSend(v1, sel_activePresentationController);
  uint64_t v9 = v8;
  if (v8)
  {
    id v10 = objc_msgSend(v8, sel_presentationStyle);

    unint64_t v11 = (unint64_t)v10 - 1;
    if (v7 != (id)3) {
      goto LABEL_5;
    }
LABEL_13:
    LOBYTE(v12) = 1;
    goto LABEL_11;
  }
  unint64_t v11 = -1;
  if (v7 == (id)3) {
    goto LABEL_13;
  }
LABEL_5:
  if (v7 == (id)2)
  {
    LOBYTE(v12) = 2;
    goto LABEL_11;
  }
  if (v7 != (id)1 || !v9 || v11 >= 8) {
    goto LABEL_10;
  }
  unint64_t v12 = 0x400000300000303uLL >> (8 * v11);
LABEL_11:
  *a1 = v12;
}

uint64_t specialized EnvironmentValues.wantsContainerBackgroundPlacement<A>(for:)()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void @objc _UIHostingView.traitCollectionDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  v9.is_nil = (char)v6;
  id v7 = v6;
  v9.value.super.Class isa = (Class)a3;
  _UIHostingView.traitCollectionDidChange(_:)(v9);
}

Swift::Void __swiftcall _UIHostingView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  uint64_t v2 = v1;
  Class isa = a1.value.super.isa;
  long long v4 = (void *)MEMORY[0x1E4FBC8C8];
  _UIHostingView.updateBackgroundColor()();
  if ((_UIHostingView.shouldDisableUIKitAnimations.getter() & 1) != 0
    && (static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    uint64_t v5 = static Transaction.currentUIViewTransaction(canDisableAnimations:)(1);
    if (v5 != 1)
    {
      uint64_t v6 = v5;
      uint64_t v7 = MEMORY[0x18C119DF0]((char *)v1 + *(void *)((*v4 & *v1) + 0xC0));
      if (v7)
      {
        id v8 = (void *)v7;
        uint64_t v9 = specialized UIHostingController.alwaysOnBridge.getter();
        outlined copy of Transaction?(v6);
        swift_retain();

        if (v9)
        {
          AlwaysOnBridge.configureTransaction(_:)();
          swift_release();
        }
      }
      else
      {
        swift_retain();
      }
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      swift_release();
      swift_release();
      outlined consume of Transaction?(v6);
      swift_release();
    }
  }
  id v10 = objc_msgSend(v2, sel_traitCollection);
  id v11 = objc_msgSend(v10, sel_userInterfaceIdiom);

  if (!isa || v11 != [(objc_class *)isa userInterfaceIdiom]) {
    _UIHostingView.updateEventBridge()();
  }
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

Swift::Void __swiftcall _UIHostingView.updateBackgroundColor()()
{
  if ((_UIHostingView.appliesContainerBackgroundFallbackColor.getter() & 1) == 0
    || (uint64_t v1 = specialized _UIHostingView.containerBackgroundFallbackColor.getter()) == 0)
  {
    _UIHostingView.viewController.getter();
  }
  uint64_t v2 = v1;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for _UIHostingView();
  objc_msgSendSuper2(&v3, sel_setBackgroundColor_, v2);
}

uint64_t static Transaction.currentUIViewTransaction(canDisableAnimations:)(char a1)
{
  if ((a1 & 1) != 0 && (objc_msgSend(self, sel_areAnimationsEnabled) & 1) == 0)
  {
    Transaction.disablesAnimations.setter();
    return 0;
  }
  else
  {
    uint64_t v1 = self;
    if (objc_msgSend(v1, sel__isInAnimationBlockWithAnimationsEnabled)
      && (objc_msgSend(v1, sel__currentAnimationDuration),
          static Animation.uiViewAnimation(curve:duration:)((uint64_t)objc_msgSend(v1, sel__currentAnimationCurve))))
    {
      swift_retain();
      uint64_t v2 = Transaction.init(animation:)();
      id v3 = (id)_CATransactionCompletionItem();
      if (v3)
      {
        long long v4 = v3;
        *(void *)(swift_allocObject() + 16) = v3;
        id v5 = v4;
        Transaction.addAnimationListener(allFinished:)();

        swift_release();
      }
      swift_release();
    }
    else
    {
      return 1;
    }
  }
  return v2;
}

BOOL _UIHostingView.wantsTransparentBackground.getter()
{
  return *(_DWORD *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88)) != 0;
}

uint64_t setBackground #1 <A>(_:) in _UIHostingView.updateBackgroundColor()(uint64_t a1, void *a2)
{
  uint64_t result = DeprecatedAlertBridge.isShown.getter();
  if ((result & 1) == 0)
  {
    v5.receiver = a2;
    v5.super_class = (Class)type metadata accessor for _UIHostingView();
    return (uint64_t)objc_msgSendSuper2(&v5, sel_setBackgroundColor_, a1);
  }
  return result;
}

uint64_t DeprecatedAlertBridge.isShown.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78));
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedSectionStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedSectionStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle;
  if (!lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedSectionStyle and conformance ResolvedSectionStyle);
  }
  return result;
}

uint64_t UnsupportedDisplayList.value.getter()
{
  DisplayList.Version.init(forUpdate:)();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C114450]();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4F3FCB8];
  *(void *)(v0 + 40) = MEMORY[0x1E4F3FCC8];
  *(void *)(v0 + 48) = v1;
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  return DisplayList.init(_:)();
}

uint64_t type metadata completion function for ListTableViewCell()
{
  uint64_t result = type metadata accessor for CellConfiguration();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for CellConfiguration()
{
  uint64_t result = type metadata singleton initialization cache for CellConfiguration;
  if (!type metadata singleton initialization cache for CellConfiguration) {
    return swift_getSingletonMetadata();
  }
  return result;
}

__n128 __swift_memcpy178_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_WORD *)(a1 + 176) = *((_WORD *)a2 + 88);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t type metadata completion function for DeprecatedAlertBridge()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t FocusState.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return FocusState.getValue(forReading:)(1, a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityLabeledContentContentModifier<A>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static AccessibilityLabeledContentContentModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), a5);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSNotificationName(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyVGrid<A>()
{
  return static LazyVGrid._makeView(view:inputs:)();
}

uint64_t one-time initialization function for UIKitHostContainerCoordinateSpace()
{
  return CoordinateSpace.ID.init()();
}

_UNKNOWN **base witness table accessor for ViewModifier in PrimitiveTargetVisibilityModifier<A>()
{
  return &protocol witness table for PrimitiveTargetVisibilityModifier<A>;
}

ValueMetadata *type metadata accessor for TimelineInvalidationAction()
{
  return &type metadata for TimelineInvalidationAction;
}

_UNKNOWN **base witness table accessor for ViewModifier in FocusStateBindingModifier<A>()
{
  return &protocol witness table for FocusStateBindingModifier<A>;
}

ValueMetadata *type metadata accessor for NavigationTitleStorage()
{
  return &type metadata for NavigationTitleStorage;
}

_UNKNOWN **base witness table accessor for ViewModifier in AlertTransformModifier<A>()
{
  return &protocol witness table for AlertTransformModifier<A>;
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance AccessibilityListStyle.Body<A>.AccessibilityList<A1>()
{
  return MEMORY[0x1F40FF800]();
}

ValueMetadata *type metadata accessor for AnyShareConfiguration()
{
  return &type metadata for AnyShareConfiguration;
}

void static ScrollInputBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ContextMenuModifier<A>()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in ListBatchUpdates<A>()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t type metadata completion function for SidebarListBody()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance SidebarListBody<A, B>.TableViewRoot()
{
  return MEMORY[0x1F40FD010]();
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance ListStyleInput(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

_UNKNOWN **base witness table accessor for View in ViewThatFits<A>()
{
  return &protocol witness table for ViewThatFits<A>;
}

uint64_t type metadata completion function for _ListValue.Init1()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double SwiftUIGlue.defaultSpacing.getter()
{
  return 8.0;
}

uint64_t type metadata completion function for TooltipBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for SheetBridge()
{
  return swift_initClassMetadata2();
}

uint64_t @objc EditMenuBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  outlined consume of EditMenuPresentation?(*(void *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation), *(void *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 8), *(void *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 16), *(void *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24));
  uint64_t v2 = *(void *)(a1 + direct field offset for EditMenuBridge.presentedMenu);
  uint64_t v3 = *(void *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 8);
  uint64_t v4 = *(void *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 16);
  uint64_t v5 = *(void *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 24);
  uint64_t v6 = *(void *)(a1 + direct field offset for EditMenuBridge.presentedMenu + 32);
  long long v7 = *(void **)(a1 + direct field offset for EditMenuBridge.presentedMenu + 40);

  return outlined consume of ActiveEditMenu?(v2, v3, v4, v5, v6, v7);
}

void *EditMenuBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  *(void *)&v27[0] = *a1;
  PreferenceValues.subscript.getter();
  if (v21 != -1)
  {
    int v4 = *(_DWORD *)(v1 + direct field offset for EditMenuBridge.editMenuPresentationSeed);
    if (v4 != -1 && v21 == v4) {
      return outlined release of PreferenceValues.Value<EditMenuPresentation?>(v20, (void (*)(void, void, void, void, void, void))outlined consume of EditMenuPresentation?);
    }
  }
  uint64_t v6 = v1 + direct field offset for EditMenuBridge.host;
  uint64_t result = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for EditMenuBridge.host);
  if (result)
  {
    id v8 = result;
    uint64_t ObjectType = swift_getObjectType();

    if (((*(uint64_t (**)(void))(ObjectType + 1208))() & 1) == 0 && v20[3])
    {
      if (!swift_retain())
      {
        *(void *)&long long v24 = v3;
        PreferenceValues.subscript.getter();
        char v15 = (void *)MEMORY[0x18C119DF0](v2 + direct field offset for EditMenuBridge.listCell);
        if (v15)
        {
          uint64_t v16 = v15;
          if (LOBYTE(v27[0]))
          {
            id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1758]), sel_initWithDelegate_, v15);
            objc_msgSend(v16, sel_addInteraction_, v17);
          }
          else
          {
          }
        }
        goto LABEL_23;
      }
      swift_release();
    }
    outlined init with take of ActiveEditMenu?((uint64_t)v20, (uint64_t)v23, &lazy cache variable for type metadata for EditMenuPresentation?, (uint64_t)&type metadata for EditMenuPresentation);
    outlined init with take of ActiveEditMenu?((uint64_t)v23, (uint64_t)&v24, &lazy cache variable for type metadata for EditMenuPresentation?, (uint64_t)&type metadata for EditMenuPresentation);
    if (*((void *)&v25 + 1))
    {
      v27[1] = v25;
      long long v28 = v26;
      v27[0] = v24;
      v22[0] = v24;
      v22[1] = v25;
      _OWORD v22[2] = v26;
      uint64_t v29 = v25;
      long long v18 = v25;
      char v19 = v26;
      outlined release of PreferenceValues.Value<EditMenuPresentation?>(v20, (void (*)(void, void, void, void, void, void))outlined copy of EditMenuPresentation?);
      type metadata accessor for ActiveEditMenu?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v30);
      if (v30 == 1)
      {
        EditMenuBridge.presentMenu(_:)((unsigned int *)v22);
        outlined init with take of EditMenuPresentation.Kind((uint64_t)v27 + 8, (uint64_t)&v30);
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v29);
        swift_release();
        *(void *)&long long v18 = *((void *)&v28 + 1);
        outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v18);
LABEL_23:
        *(_DWORD *)(v2 + direct field offset for EditMenuBridge.editMenuPresentationSeed) = v21;
        return outlined release of PreferenceValues.Value<EditMenuPresentation?>(v20, (void (*)(void, void, void, void, void, void))outlined consume of EditMenuPresentation?);
      }
      outlined init with take of EditMenuPresentation.Kind((uint64_t)v27 + 8, (uint64_t)&v30);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v30);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v29);
      swift_release();
      *(void *)&long long v18 = *((void *)&v28 + 1);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v18);
    }
    long long v10 = *(void **)(v2 + direct field offset for EditMenuBridge.interaction);
    if (!v10) {
      goto LABEL_23;
    }
    objc_msgSend(v10, sel_dismissMenu);
    uint64_t v11 = direct field offset for EditMenuBridge.interaction;
    uint64_t v12 = *(void *)(v2 + direct field offset for EditMenuBridge.interaction);
    if (!v12) {
      goto LABEL_23;
    }
    uint64_t result = (void *)MEMORY[0x18C119DF0](v6);
    if (result)
    {
      uint64_t v13 = result;
      objc_msgSend(result, sel_removeInteraction_, v12);

      uint64_t v14 = *(void **)(v2 + v11);
      *(void *)(v2 + v11) = 0;

      goto LABEL_23;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *outlined release of PreferenceValues.Value<EditMenuPresentation?>(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of EditMenuPresentation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for DropPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t storeEnumTagSinglePayload for AnyStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer;
  if (!lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer)
  {
    type metadata accessor for HostingScrollView.PlatformContainer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer;
  if (!lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer)
  {
    type metadata accessor for HostingScrollView.PlatformContainer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer);
  }
  return result;
}

uint64_t partial apply for closure #2 in PopoverPresentationModifier.PopoverModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  type metadata accessor for PopoverPresentationModifier.PopoverModifier();

  return closure #2 in PopoverPresentationModifier.PopoverModifier.body(content:)(a1, a2);
}

uint64_t closure #2 in PopoverPresentationModifier.PopoverModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)a2;
  int v7 = v3;
  uint64_t v4 = type metadata accessor for PopoverPresentationModifier.PopoverModifier();
  return PopoverPresentationModifier.PopoverModifier.addAnchorGeometryIfNeeded(presentations:anchorGeometry:)(a1, &v6, v4);
}

uint64_t PopoverPresentationModifier.PopoverModifier.addAnchorGeometryIfNeeded(presentations:anchorGeometry:)(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  int v11 = *((_DWORD *)a2 + 2);
  if (*(void *)(v3 + *(int *)(a3 + 56) + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  if (v12[0])
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(a3 + 24) + 32))(*(void *)(a3 + 16));
    if (result)
    {
      uint64_t v8 = *a1;
      unint64_t v9 = *(void *)(*a1 + 16);
      if (v9)
      {
        uint64_t v10 = 120 * v9 - 120;
        outlined init with copy of PopoverPresentation(v8 + v10 + 32, (uint64_t)v12);
        uint64_t v13 = v6;
        int v14 = v11;
        char v15 = 0;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        *a1 = v8;
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v8);
          uint64_t v8 = result;
          *a1 = result;
        }
        if (v9 > *(void *)(v8 + 16))
        {
          __break(1u);
        }
        else
        {
          outlined assign with copy of PopoverPresentation((uint64_t)v12, v8 + v10 + 32);
          return outlined destroy of PopoverPresentation((uint64_t)v12);
        }
      }
    }
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroy_15Tm()
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(void *)(type metadata accessor for PopoverPresentationModifier.PopoverModifier() - 8);
  return closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(a1, a2, v3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v7, v8, a3);
}

uint64_t closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  void (*v20)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned char v48[22];
  void v49[5];
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  _OWORD v56[3];

  uint64_t v12 = (int *)type metadata accessor for PopoverPresentationModifier.PopoverModifier();
  uint64_t v13 = a3 + v12[9];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5);
  if (result)
  {
    long long v40 = result;
    long long v39 = PopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(result, v15, (uint64_t)v12);
    uint64_t v16 = (char *)(a3 + v12[11]);
    uint64_t v37 = v16[1];
    uint64_t v38 = *v16;
    uint64_t v17 = a6(v13, a4, a5);
    long long v35 = v18;
    uint64_t v36 = v17;
    long long v34 = *(unsigned char *)(a3 + v12[12]);
    long long v41 = a1;
    int v19 = PopoverPresentationModifier.PopoverModifier.viewID.getter();
    uint64_t v20 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 48);
    swift_retain();
    v20(v49, a4, a5);
    int v21 = (uint64_t *)(a3 + v12[14]);
    BOOL v22 = *v21;
    uint64_t v23 = v21[1];
    LOBYTE(v20) = *(unsigned char *)(a3 + v12[15]);
    *(_DWORD *)&v48[16] = 0;
    char v45 = 0u;
    double v46 = 0u;
    *(void *)&v48[8] = 0;
    *(void *)&uint64_t v47 = 0;
    v48[20] = 1;
    *(void *)&uint64_t v42 = v39;
    BYTE8(v42) = v38;
    BYTE9(v42) = v37;
    *(void *)&uint64_t v43 = a2;
    *((void *)&v43 + 1) = v36;
    *(void *)&char v44 = v35;
    BYTE8(v44) = v34;
    HIDWORD(v44) = v19;
    swift_retain();
    swift_retain();
    outlined assign with take of AnyHashable?((uint64_t)v49, (uint64_t)&v45);
    *((void *)&v47 + 1) = v22;
    *(_OWORD *)uint64_t v48 = v23;
    *(_DWORD *)&v48[16] = 0;
    v48[20] = 1;
    v48[21] = (_BYTE)v20;
    uint64_t v50 = v42;
    uint64_t v51 = v43;
    uint64_t v52 = v44;
    char v53 = v45;
    uint64_t v54 = v46;
    uint64_t v55 = v47;
    v56[0] = v23;
    *(void *)((char *)v56 + 14) = *(void *)&v48[14];
    long long v24 = *v41;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
    }
    long long v26 = *((void *)v24 + 2);
    long long v25 = *((void *)v24 + 3);
    if (v26 >= v25 >> 1) {
      long long v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1, v24);
    }
    *((void *)v24 + 2) = v26 + 1;
    int v27 = &v24[120 * v26];
    long long v28 = v50;
    uint64_t v29 = v51;
    uint64_t v30 = v53;
    *((_OWORD *)v27 + 4) = v52;
    *((_OWORD *)v27 + 5) = v30;
    *((_OWORD *)v27 + 2) = v28;
    *((_OWORD *)v27 + 3) = v29;
    uint64_t v31 = v54;
    uint64_t v32 = v55;
    uint64_t v33 = v56[0];
    *(void *)(v27 + 142) = *(void *)((char *)v56 + 14);
    *((_OWORD *)v27 + 7) = v32;
    *((_OWORD *)v27 + 8) = v33;
    *((_OWORD *)v27 + 6) = v31;
    uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v40);
    *long long v41 = v24;
  }
  return result;
}

uint64_t PopoverConditionalStateProvider.popoverContent.getter()
{
  if ((PopoverConditionalStateProvider.isPresented.getter() & 1) == 0) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t CoreSheetPresentationModifier.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v10 = v34;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v35 = AssociatedTypeWitness;
  uint64_t v36 = v17;
  double v18 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v20 = (char *)&v30 - v19;
  uint64_t v21 = *a1;
  uint64_t v31 = a1[1];
  uint64_t v32 = v21;
  uint64_t v22 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v33 + *(int *)(a2 + 56), v9, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v22, a2);
  unint64_t v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v24 = (v6 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v9;
  *(void *)(v25 + 24) = v15;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v25 + v23, v7, a2);
  long long v26 = (void *)(v25 + v24);
  uint64_t v27 = v31;
  *long long v26 = v32;
  v26[1] = v27;
  (*(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 24))(partial apply for closure #1 in CoreSheetPresentationModifier.resolve(in:), v25, v9, v15);
  swift_retain();
  swift_retain();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v9);
  uint64_t v28 = v35;
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  ViewModifier.requiring<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v20, v28);
}

void *initializeWithCopy for CoreSheetPresentationModifier(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = *(void *)v9;
  swift_retain();
  if (v10 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *(void *)(v9 + 8);
    *(void *)unint64_t v8 = v10;
    *(void *)(v8 + 8) = v11;
    swift_retain();
  }
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  *(unsigned char *)(v8 + 17) = *(unsigned char *)(v9 + 17);
  unint64_t v12 = (v8 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = *(void *)(v13 + 24);
  if (v14 < 0xFFFFFFFF)
  {
    long long v15 = *(_OWORD *)v13;
    long long v16 = *(_OWORD *)(v13 + 16);
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    *(_OWORD *)unint64_t v12 = v15;
    *(_OWORD *)(v12 + 16) = v16;
  }
  else
  {
    *(void *)(v12 + 24) = v14;
    *(void *)(v12 + 32) = *(void *)(v13 + 32);
    (**(void (***)(unint64_t, unint64_t))(v14 - 8))(v12, v13);
  }
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v18 = v17 + 16;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (v12 + v19 + 40) & ~v19;
  uint64_t v21 = (v13 + v19 + 40) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v20, v21);
  *(unsigned char *)(v20 + *(void *)(v18 + 48)) = *(unsigned char *)(v21 + *(void *)(v18 + 48));
  return a1;
}

uint64_t PopoverPresentationModifier.resolve(in:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v32 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void *)(v11 + 24);
  uint64_t v12 = type metadata accessor for PopoverPresentationModifier.PopoverModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  double v14 = MEMORY[0x1F4188790](v12);
  long long v16 = (char *)&v29 - v15;
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, v4, v7, v14);
  uint64_t v19 = *(int *)(a2 + 40);
  uint64_t v20 = v4 + *(int *)(a2 + 36);
  uint64_t v22 = *(void *)(v20 + 8);
  char v23 = *(unsigned char *)(v20 + 16);
  v34[0] = *(void *)v20;
  uint64_t v21 = v34[0];
  v34[1] = v22;
  char v35 = v23;
  uint64_t v24 = v4 + v19;
  LOWORD(v19) = *(unsigned __int8 *)(v4 + v19);
  LOWORD(v24) = *(unsigned __int8 *)(v24 + 1);
  char v25 = *(unsigned char *)(v4 + *(int *)(a2 + 44));
  char v26 = *(unsigned char *)(v4 + *(int *)(a2 + 48));
  v33[0] = v17;
  v33[1] = v18;
  PopoverPresentationModifier.PopoverModifier.init(viewID:provider:attachmentAnchor:arrowEdges:isDetachable:keyType:environment:attachmentBehavior:)(0, (uint64_t)v10, v34, v19 | ((_WORD)v24 << 8), v25, v26, v33, *(unsigned char *)(v4 + *(int *)(a2 + 52)), v16, v7);
  outlined copy of Environment<CGFloat?>.Content(v21, v22, v23);
  swift_retain();
  swift_retain();
  uint64_t v27 = v30;
  swift_getWitnessTable();
  lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate();
  ViewModifier.requiring<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v16, v27);
}

unint64_t lazy protocol witness table accessor for type AllowPresentationPredicate and conformance AllowPresentationPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type AllowPresentationPredicate and conformance AllowPresentationPredicate;
  if (!lazy protocol witness table cache variable for type AllowPresentationPredicate and conformance AllowPresentationPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowPresentationPredicate and conformance AllowPresentationPredicate);
  }
  return result;
}

uint64_t type metadata accessor for PopoverPresentationModifier.PopoverModifier()
{
  return __swift_instantiateGenericMetadata();
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t protocol witness for SheetAnchorProvider.preferenceTransformModifier(for:) in conformance NullSheetAnchor<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return NullSheetAnchor.preferenceTransformModifier(for:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t NullSheetAnchor.preferenceTransformModifier(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, a2, a3, a4);
  a5[1] = v6;

  return swift_retain();
}

uint64_t AppSceneDelegate.rootModifier.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneBridge)
    && *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues))
  {
    uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataValue;
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x1E4FBB960];
    outlined init with copy of RootEnvironmentModifier?(v3, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    outlined init with copy of RootEnvironmentModifier?((uint64_t)v12, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
    char v5 = *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_scenePhase);
    uint64_t v6 = v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID;
    uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
    uint64_t v8 = *(void *)(v6 + 8);
    unsigned __int8 v9 = *(unsigned char *)(v6 + 16);
    swift_weakInit();
    swift_weakInit();
    swift_weakInit();
    outlined init with take of AnyHashable?((uint64_t)v11, a1 + 24, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
    *(unsigned char *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v8;
    *(unsigned char *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = 0;
    outlined copy of SceneID?(v7, v8, v9);
    return outlined destroy of RootEnvironmentModifier?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v4);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t outlined init with copy of RootEnvironmentModifier?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _ss11AnyHashableVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t ScrollViewDisplayList.value.getter()
{
  int v1 = *(_DWORD *)(v0 + 12);
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = type metadata accessor for HostingScrollView.PlatformContainer();
  uint64_t v4 = *(void **)AGGraphGetValue();
  v2[5] = v3;
  v2[6] = lazy protocol witness table accessor for type HostingScrollView.PlatformContainer and conformance HostingScrollView.PlatformContainer();
  v2[2] = v4;
  if (v1 == *MEMORY[0x1E4F4E7A0])
  {
    id v5 = v4;
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    id v6 = v4;
    swift_bridgeObjectRetain();
  }
  type metadata accessor for CGRect(0);
  AGGraphGetValue();
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  return DisplayList.init(_:)();
}

uint64_t PopoverPresentationModifier.PopoverModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v60 = a3;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  *(void *)&long long v54 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, MEMORY[0x1E4F40E00]);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v10 = lazy protocol witness table accessor for type _AnchorTransformModifier<CGRect?, PopoverPresentation.Key> and conformance _AnchorTransformModifier<A, B>();
  uint64_t v81 = WitnessTable;
  unint64_t v82 = v10;
  uint64_t v11 = swift_getWitnessTable();
  uint64_t v61 = v8;
  *(void *)&long long v78 = v8;
  *((void *)&v78 + 1) = &type metadata for PopoverPresentation.Key;
  uint64_t v59 = v11;
  uint64_t v79 = v11;
  uint64_t v80 = &protocol witness table for PopoverPresentation.Key;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v13 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v52 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v51 = (char *)v47 - v16;
  type metadata accessor for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>(255, &lazy cache variable for type metadata for EmptyAnchorTraitTransformModifier<CGRect?, TabPopoverPresentationsKey>, (uint64_t)&type metadata for TabPopoverPresentationsKey, (uint64_t)&protocol witness table for TabPopoverPresentationsKey, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))type metadata accessor for EmptyAnchorTraitTransformModifier);
  uint64_t v18 = v17;
  *(void *)&long long v55 = v7;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v56 = OpaqueTypeMetadata2;
  uint64_t v62 = v19;
  uint64_t v58 = type metadata accessor for _ConditionalContent();
  uint64_t v57 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v63 = (char *)v47 - v20;
  if (*(unsigned char *)(v3 + *(int *)(a2 + 52)) == 1)
  {
    PopoverPresentationModifier.PopoverModifier.anchor.getter(a2);
    type metadata accessor for CGRect(0);
    Anchor.Source.init<A>(_:)();
    uint64_t v48 = v3;
    unsigned __int16 v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v50 = v13;
    uint64_t v21 = v54;
    v49(v54, v3, a2);
    uint64_t v22 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v53 = WitnessTable;
    uint64_t v23 = (v22 + 32) & ~v22;
    v47[1] = v23 + v6;
    v47[0] = v22 | 7;
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = *(void *)(a2 + 16);
    uint64_t v26 = *(void *)(a2 + 24);
    *(void *)(v24 + 16) = v25;
    *(void *)(v24 + 24) = v26;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    v27(v24 + v23, v21, a2);
    type metadata accessor for CGRect?();
    View.transformAnchorPreference<A, B>(key:value:transform:)();
    swift_release();
    swift_release();
    long long v76 = v78;
    uint64_t v77 = v79;
    v49(v21, v48, a2);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v25;
    *(void *)(v28 + 24) = v26;
    v27(v28 + v23, v21, a2);
    uint64_t v29 = swift_checkMetadataState();
    uint64_t v30 = (uint64_t)v52;
    uint64_t v31 = v59;
    View.transformAnchorGeometry<A>(key:transform:)();
    swift_release();
    swift_release();
    swift_release();
    *(void *)&long long v78 = v29;
    *((void *)&v78 + 1) = &type metadata for PopoverPresentation.Key;
    uint64_t v79 = v31;
    uint64_t v80 = &protocol witness table for PopoverPresentation.Key;
    swift_getOpaqueTypeConformance2();
    uint64_t v32 = v51;
    uint64_t v33 = v56;
    static ViewBuilder.buildExpression<A>(_:)(v30);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v34(v30, v33);
    static ViewBuilder.buildExpression<A>(_:)(v32);
    uint64_t v35 = v53;
    uint64_t v64 = v53;
    uint64_t v65 = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
    swift_getWitnessTable();
    uint64_t v36 = v61;
    static ViewBuilder.buildEither<A, B>(first:)(v30, v33);
    v34(v30, v33);
    v34((uint64_t)v32, v33);
  }
  else
  {
    PopoverPresentationModifier.PopoverModifier.anchor.getter(a2);
    type metadata accessor for CGRect(0);
    uint64_t v37 = Anchor.Source.init<A>(_:)();
    uint64_t v38 = v54;
    (*(void (**)(void, uint64_t, uint64_t))(v5 + 16))(v54, v3, a2);
    unint64_t v39 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = *(_OWORD *)(a2 + 16);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v40 + v39, v38, a2);
    *(void *)&long long v76 = v37;
    *((void *)&v76 + 1) = partial apply for closure #3 in PopoverPresentationModifier.PopoverModifier.body(content:);
    uint64_t v77 = v40;
    MEMORY[0x18C113660](&v78, &v76, v55, v18, WitnessTable);
    swift_release();
    swift_release();
    long long v55 = v78;
    long long v74 = v78;
    uint64_t v75 = v79;
    uint64_t v72 = WitnessTable;
    uint64_t v73 = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
    uint64_t v41 = v62;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(&v74);
    swift_release();
    swift_release();
    long long v55 = v76;
    long long v78 = v76;
    uint64_t v79 = v77;
    static ViewBuilder.buildExpression<A>(_:)(&v78);
    long long v54 = v74;
    long long v70 = v74;
    uint64_t v71 = v75;
    uint64_t v36 = v61;
    *(void *)&long long v78 = v61;
    *((void *)&v78 + 1) = &type metadata for PopoverPresentation.Key;
    uint64_t v31 = v59;
    uint64_t v79 = v59;
    uint64_t v80 = &protocol witness table for PopoverPresentation.Key;
    swift_getOpaqueTypeConformance2();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v70, v56, v41);
    swift_release();
    swift_release();
    uint64_t v35 = WitnessTable;
    swift_release();
    swift_release();
  }
  *(void *)&long long v78 = v36;
  *((void *)&v78 + 1) = &type metadata for PopoverPresentation.Key;
  uint64_t v79 = v31;
  uint64_t v80 = &protocol witness table for PopoverPresentation.Key;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v68 = v35;
  uint64_t v69 = &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v66 = OpaqueTypeConformance2;
  uint64_t v67 = v43;
  uint64_t v44 = v58;
  swift_getWitnessTable();
  char v45 = v63;
  static ViewBuilder.buildExpression<A>(_:)(v63);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v45, v44);
}

void type metadata accessor for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for CGRect?();
    unint64_t v11 = a5(a1, v10, a3, a4);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t static ViewBuilder.buildEither<A, B>(first:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _ConditionalContent.Storage();
  double v5 = MEMORY[0x1F4188790](v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v8 - v6, a1, a2, v5);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent<>.init(storage:)();
}

void type metadata accessor for CGRect?()
{
  if (!lazy cache variable for type metadata for CGRect?)
  {
    type metadata accessor for CGRect(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGRect?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _AnchorTransformModifier<CGRect?, PopoverPresentation.Key> and conformance _AnchorTransformModifier<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnchorTransformModifier<CGRect?, PopoverPresentation.Key> and conformance _AnchorTransformModifier<A, B>;
  if (!lazy protocol witness table cache variable for type _AnchorTransformModifier<CGRect?, PopoverPresentation.Key> and conformance _AnchorTransformModifier<A, B>)
  {
    type metadata accessor for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>(255, &lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, PopoverPresentation.Key>, (uint64_t)&type metadata for PopoverPresentation.Key, (uint64_t)&protocol witness table for PopoverPresentation.Key, MEMORY[0x1E4F40E00]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnchorTransformModifier<CGRect?, PopoverPresentation.Key> and conformance _AnchorTransformModifier<A, B>);
  }
  return result;
}

uint64_t PopoverPresentationModifier.PopoverModifier.anchor.getter(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))(*(void *)(a1 + 16)) & 1) == 0) {
    return 0;
  }
  if (*(unsigned char *)(v1 + *(int *)(a1 + 40) + 16)) {
    return static Anchor.Source<A>.unitPoint(_:)();
  }
  return swift_retain();
}

uint64_t PopoverConditionalStateProvider.isPresented.getter()
{
  _ss11AnyHashableVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

void type metadata accessor for AnyHashable?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss11AnyHashableVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss11AnyHashableVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for HostingScrollView.PlatformContainer()
{
  return self;
}

BOOL PopoverItemStateProvider.isPresented.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - v5;
  ItemSheetPresentationModifier.item.getter(a1, MEMORY[0x1E4F41620]);
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v6, 1, v2) != 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t ItemSheetPresentationModifier.item.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Binding();

  return a2(v2);
}

uint64_t outlined destroy of RootEnvironmentModifier?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _ss11AnyHashableVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t ItemSheetPresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v89 = a3;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v87 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v88 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = *(void *)(*(void *)(v7 + 16) - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v64 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = *(void *)(v10 + 40);
  uint64_t v11 = v90;
  uint64_t v13 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v63 = (char *)&v63 - v14;
  uint64_t v76 = *(void *)(a2 - 8);
  uint64_t v81 = *(void *)(v76 + 64);
  MEMORY[0x1F4188790](v15);
  long long v74 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v18 = v5;
  uint64_t v67 = v5;
  uint64_t v19 = type metadata accessor for CoreSheetPresentationModifier();
  uint64_t v85 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v82 = (uint64_t)&v63 - v20;
  swift_getWitnessTable();
  uint64_t v78 = type metadata accessor for _ViewModifier_Content();
  uint64_t v86 = v19;
  uint64_t v84 = type metadata accessor for ModifiedContent();
  uint64_t v83 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  uint64_t v79 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v80 = (char *)&v63 - v23;
  uint64_t v68 = v13;
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  long long v70 = (char *)&v63 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v63 - v28;
  uint64_t v69 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F41620];
  ItemSheetPresentationModifier.item.getter(a2, MEMORY[0x1E4F41620]);
  uint64_t v30 = *(void *)(a2 + 24);
  uint64_t v92 = v13;
  uint64_t v93 = v30;
  uint64_t v94 = v18;
  uint64_t v95 = v11;
  uint64_t v96 = *(void *)(a2 + 48);
  uint64_t v31 = v96;
  uint64_t v97 = v17;
  uint64_t v98 = v3;
  uint64_t v32 = v3;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ItemSheetPresentationModifier.body(content:), (uint64_t)v91, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v33, (uint64_t)&v103);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v73 = v24;
  uint64_t v72 = v25 + 8;
  uint64_t v71 = v34;
  v34(v29, v24);
  uint64_t v75 = v103;
  uint64_t v35 = v76;
  uint64_t v36 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v74, v32, a2);
  uint64_t v37 = v35;
  unint64_t v38 = (*(unsigned __int8 *)(v35 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v39 = (char *)swift_allocObject();
  uint64_t v40 = v68;
  *((void *)v39 + 2) = v68;
  *((void *)v39 + 3) = v30;
  uint64_t v41 = v67;
  uint64_t v42 = v90;
  *((void *)v39 + 4) = v67;
  *((void *)v39 + 5) = v42;
  *((void *)v39 + 6) = v31;
  *((void *)v39 + 7) = v17;
  uint64_t v81 = v17;
  uint64_t v43 = v36;
  uint64_t v44 = v70;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v39[v38], v43, a2);
  uint64_t v45 = *(int *)(a2 + 80);
  LODWORD(v76) = *(unsigned __int8 *)(v32 + *(int *)(a2 + 76));
  int v46 = *(unsigned __int8 *)(v32 + v45);
  ItemSheetPresentationModifier.item.getter(a2, v69);
  uint64_t v47 = v77;
  uint64_t v48 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v44, 1, v40))
  {
    v71(v44, v73);
    uint64_t v102 = 0;
    memset(v101, 0, sizeof(v101));
  }
  else
  {
    unsigned __int16 v49 = v64;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v64, v44, v40);
    v71(v44, v73);
    LODWORD(v74) = v46;
    uint64_t v50 = v63;
    dispatch thunk of Identifiable.id.getter();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v48);
    uint64_t v51 = AssociatedTypeWitness;
    swift_getAssociatedConformanceWitness();
    _convertToAnyHashable<A>(_:)();
    LOBYTE(v46) = (_BYTE)v74;
    (*(void (**)(char *, uint64_t))(v65 + 8))(v50, v51);
  }
  uint64_t v52 = (uint64_t)v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v88, v32 + *(int *)(a2 + 84), v41);
  uint64_t v53 = v82;
  CoreSheetPresentationModifier.init(content:onDismiss:placement:drawsBackground:itemID:anchorProvider:activeInspector:)(v75, (uint64_t)partial apply for closure #2 in ItemSheetPresentationModifier.body(content:), (uint64_t)v39, v76, v46, (uint64_t)v101, v52, 2, v82, v41);
  uint64_t v54 = v78;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v56 = v79;
  uint64_t v57 = v54;
  uint64_t v58 = v86;
  MEMORY[0x18C113660](v53, v57, v86, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v53, v58);
  uint64_t v99 = WitnessTable;
  uint64_t v100 = &protocol witness table for CoreSheetPresentationModifier<A>;
  uint64_t v59 = v84;
  swift_getWitnessTable();
  uint64_t v60 = v80;
  static ViewBuilder.buildExpression<A>(_:)(v56);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v83 + 8);
  v61(v56, v59);
  static ViewBuilder.buildExpression<A>(_:)(v60);
  return ((uint64_t (*)(char *, uint64_t))v61)(v60, v59);
}

void *initializeWithCopy for ItemSheetPresentationModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    uint64_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = *(void *)(v8 + 64);
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    uint64_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v10, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    uint64_t v14 = *(void *)(v16 + 8);
  }
  uint64_t v18 = v14 + ((v9 + 16) & ~v9);
  if (!v13) {
    ++v18;
  }
  unint64_t v19 = ((unint64_t)a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v20 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v21 = *(void *)(v20 + 8);
    *(void *)unint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = v21;
    swift_retain();
  }
  unint64_t v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)(v23 + 8);
  *(void *)unint64_t v22 = *(void *)v23;
  *(void *)(v22 + 8) = v24;
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(unsigned char *)(v22 + 17) = *(unsigned char *)(v23 + 17);
  uint64_t v25 = *(void *)(a3 + 32);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16);
  uint64_t v27 = *(unsigned __int8 *)(*(void *)(v25 - 8) + 80);
  uint64_t v28 = (v27 + 18 + v22) & ~v27;
  uint64_t v29 = (v27 + 18 + v23) & ~v27;
  swift_retain();
  v26(v28, v29, v25);
  return a1;
}

uint64_t SheetPresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v64 = a3;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v61 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v63 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v51 = v10;
  uint64_t v52 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = *(void *)(v11 + 40);
  uint64_t v12 = type metadata accessor for CoreSheetPresentationModifier();
  uint64_t v60 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v57 = (uint64_t)v49 - v13;
  swift_getWitnessTable();
  uint64_t v53 = type metadata accessor for _ViewModifier_Content();
  uint64_t v62 = v12;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v14 - 8);
  uint64_t v59 = v14;
  MEMORY[0x1F4188790](v14);
  long long v55 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v56 = (char *)v49 - v17;
  uint64_t v18 = *(void *)(a2 + 16);
  uint64_t v65 = *(void *)(a2 + 32);
  uint64_t v66 = v18;
  uint64_t v19 = type metadata accessor for SheetContent();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  unint64_t v22 = (char *)v49 - v21;
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>();
  uint64_t v23 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v49 - v24;
  uint64_t v26 = 0;
  if (SheetPresentationModifier.isPresented.getter())
  {
    closure #1 in SheetPresentationModifier.body(content:)(v4, v66);
    v49[1] = swift_getKeyPath();
    v49[3] = v23;
    uint64_t v27 = *(void *)v4;
    v49[2] = v25;
    char v28 = *(unsigned char *)(v4 + 16);
    lazy protocol witness table accessor for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented();
    uint64_t v50 = v6;
    swift_retain();
    swift_retain();
    uint64_t v29 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    swift_release();
    *(void *)&long long v72 = v27;
    *((void *)&v72 + 1) = v29;
    LOBYTE(v73) = v28;
    uint64_t WitnessTable = swift_getWitnessTable();
    View.environment<A>(_:_:)();
    swift_release();
    swift_release();
    uint64_t v6 = v50;
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    uint64_t v31 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>);
    uint64_t v68 = WitnessTable;
    uint64_t v69 = v31;
    swift_getWitnessTable();
    uint64_t v26 = AnyView.init<A>(_:)();
  }
  uint64_t v32 = v54;
  uint64_t v33 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, v4, a2);
  unint64_t v34 = (*(unsigned __int8 *)(v32 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = (char *)swift_allocObject();
  uint64_t v36 = v67;
  *((void *)v35 + 2) = v66;
  *((void *)v35 + 3) = v6;
  *((void *)v35 + 4) = v65;
  *((void *)v35 + 5) = v36;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v35[v34], v33, a2);
  LOBYTE(v34) = *(unsigned char *)(v4 + 57);
  LOBYTE(v32) = *(unsigned char *)(v4 + 56);
  uint64_t v74 = 0;
  long long v72 = 0u;
  long long v73 = 0u;
  uint64_t v37 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v63, v4 + *(int *)(a2 + 68), v6);
  char v38 = *(unsigned char *)(v4 + *(int *)(a2 + 72));
  uint64_t v39 = v57;
  CoreSheetPresentationModifier.init(content:onDismiss:placement:drawsBackground:itemID:anchorProvider:activeInspector:)(v26, (uint64_t)partial apply for closure #2 in SheetPresentationModifier.body(content:), (uint64_t)v35, v32, v34, (uint64_t)&v72, v37, v38, v57, v6);
  uint64_t v40 = v53;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = v55;
  uint64_t v43 = v40;
  uint64_t v44 = v62;
  MEMORY[0x18C113660](v39, v43, v62, v41);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v39, v44);
  uint64_t v70 = v41;
  uint64_t v71 = &protocol witness table for CoreSheetPresentationModifier<A>;
  uint64_t v45 = v59;
  swift_getWitnessTable();
  int v46 = v56;
  static ViewBuilder.buildExpression<A>(_:)(v42);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v58 + 8);
  v47(v42, v45);
  static ViewBuilder.buildExpression<A>(_:)(v46);
  return ((uint64_t (*)(char *, uint64_t))v47)(v46, v45);
}

uint64_t initializeWithCopy for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v9 = *v8;
  swift_retain();
  swift_retain();
  if (v9 < 0xFFFFFFFF)
  {
    *uint64_t v6 = *(_OWORD *)v8;
  }
  else
  {
    unint64_t v10 = v8[1];
    *(void *)uint64_t v6 = v9;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v10;
    swift_retain();
  }
  unint64_t v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(v12 + 8);
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(v11 + 17) = *(unsigned char *)(v12 + 17);
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  uint64_t v17 = v15 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 + 18 + v11) & ~v18;
  uint64_t v20 = (v18 + 18 + v12) & ~v18;
  swift_retain();
  v16(v19, v20, v14);
  *(unsigned char *)(*(void *)(v17 + 48) + v19) = *(unsigned char *)(*(void *)(v17 + 48) + v20);
  return a1;
}

uint64_t destroy for CoreSheetPresentationModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = (void *)((v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v4 >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  unint64_t v5 = ((unint64_t)v4 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v5 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(v5);
  }
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t CoreSheetPresentationModifier.init(content:onDismiss:placement:drawsBackground:itemID:anchorProvider:activeInspector:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = a1;
  *(void *)(a9 + 16) = a2;
  *(void *)(a9 + 24) = a3;
  *(unsigned char *)(a9 + 32) = a4;
  *(unsigned char *)(a9 + 33) = a5;
  _ss11AnyHashableVSgWObTm_0(a6, a9 + 40, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<PresentationMode>);
  uint64_t v13 = type metadata accessor for CoreSheetPresentationModifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(a9 + *(int *)(v13 + 56), a7, a10);
  *(unsigned char *)(a9 + *(int *)(v13 + 60)) = a8;
  return result;
}

uint64_t outlined init with take of AnyHashable?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _ss11AnyHashableVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _ss11AnyHashableVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t _ss11AnyHashableVSgWObTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for _ContiguousArrayStorage<AppPreview>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t _ss11AnyHashableVSgWObTm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for Binding<PresentationMode>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>)
  {
    type metadata accessor for Binding<PresentationMode>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>);
    }
  }
}

uint64_t SheetPresentationModifier.isPresented.getter()
{
  type metadata accessor for Binding<PresentationMode>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

uint64_t type metadata accessor for SheetContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EmptyAnchorTraitTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in SheetPresentationModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  unint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(void))(v7 + 40))();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  unint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, a2);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, a2);
}

unint64_t lazy protocol witness table accessor for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented;
  if (!lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented;
  if (!lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented;
  if (!lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

{
  return associated type witness table accessor for View.Body : View in NavigationSplitView<A, B, C>();
}

void *assignWithCopy for _AlignmentWritingModifier(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t View.accessibilityShowsLargeContentViewer<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityShowsLargeContentViewer<A>(_:largeContentView:)(2, a1, a2, a3, a4, a5);
}

uint64_t specialized static FocusStoreList.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      return 1;
    }
    uint64_t v5 = 0;
    goto LABEL_11;
  }
  uint64_t v4 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  do
  {
    outlined init with copy of FocusStoreList.Item(v4, (uint64_t)v10);
    if (v10[0] > v5) {
      uint64_t v5 = v10[0];
    }
    outlined destroy of FocusStoreList.Item((uint64_t)v10);
    v4 += 72;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
LABEL_11:
    uint64_t v7 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    do
    {
      outlined init with copy of FocusStoreList.Item(v7, (uint64_t)v10);
      if (v10[0] > v8) {
        uint64_t v8 = v10[0];
      }
      outlined destroy of FocusStoreList.Item((uint64_t)v10);
      v7 += 72;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v5 == v8;
  }
  return !v5;
}

uint64_t EnvironmentValues.scenePhase.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    AGGraphInvalidateValue();
    id v1 = (id)AGGraphGetAttributeGraph();
    uint64_t v2 = AGGraphRef.viewGraph()();

    swift_beginAccess();
    uint64_t v3 = MEMORY[0x18C119DF0](v2 + 200);
    uint64_t v4 = *(void *)(v2 + 208);
    uint64_t result = swift_release();
    if (v3)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v4 + 8) + 16))(ObjectType);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t FocusState.init<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Optional();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for FocusState();
  *(void *)(a2 + *(int *)(v4 + 36)) = 0;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  v5(a2, 1, 1, a1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(a2 + *(int *)(v4 + 40), 1, 1, a1);
}

uint64_t FocusState.Box.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v3[1];
  HIDWORD(v27) = v10 == 0;
  uint64_t v12 = v10;
  uint64_t v28 = *(void *)(v11 + 24);
  if (!v10)
  {
    uint64_t v13 = type metadata accessor for FocusState();
    if (*(void *)(a1 + *(int *)(v13 + 36))
      && (type metadata accessor for FocusStoreLocation(), (uint64_t v14 = swift_dynamicCastClass()) != 0))
    {
      uint64_t v12 = v14;
      swift_retain();
    }
    else
    {
      type metadata accessor for FocusStoreLocation();
      type metadata accessor for GraphHost();
      uint64_t v15 = MEMORY[0x18C114840]();
      uint64_t v12 = specialized FocusStoreLocation.__allocating_init(host:resetValue:)(v15, a1 + *(int *)(v13 + 40));
      swift_release();
    }
    v4[1] = v12;
  }
  uint64_t v16 = *v4;
  FocusState.Box.store.getter(*v4, &v32);
  uint64_t v17 = v33;
  if (v33)
  {
    unint64_t v18 = v34;
    int v19 = v32;
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    int v19 = 0;
  }
  *(_DWORD *)(v12 + 16) = v19;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  FocusState.Box.focusedItem.getter(v16, (uint64_t)v29);
  if (v30 == 1 && v31 == 1)
  {
    uint64_t result = outlined destroy of FocusItem??((uint64_t)v29);
    int v21 = 0;
  }
  else
  {
    outlined init with take of FocusItem?((uint64_t)v29, (uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<FocusStoreList>);
    if (v35 || v36 != 1)
    {
      int v21 = v37;
      uint64_t result = outlined destroy of FocusItem((uint64_t)&v32);
    }
    else
    {
      uint64_t result = _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)&v32, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
      int v21 = 0;
    }
  }
  *(_DWORD *)(v12 + *(void *)(class metadata base offset for FocusStoreLocation + *(void *)v12 + 40)) = v21;
  if (!v4[1])
  {
    __break(1u);
    goto LABEL_28;
  }
  BOOL v22 = FocusStoreLocation.update()(v9);
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 24))(a1, v9, v6);
  uint64_t v23 = v4[1];
  if (!v23)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v24 = *(int *)(type metadata accessor for FocusState() + 36);
  swift_retain();
  swift_release();
  *(void *)(a1 + v24) = v23;
  if (*MEMORY[0x1E4F4E7A0] == *(_DWORD *)v4 || (uint64_t result = AGGraphGetValue(), (v25 & 1) != 0))
  {
    swift_weakInit();
    specialized closure #1 in FocusState.Box.update(property:phase:)();
    uint64_t result = swift_weakDestroy();
  }
  if (!v22)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v26 = BYTE4(v27);
    return v26 & 1;
  }
  if (v4[1])
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v26 = (v10 == 0) | FocusStoreLocation.wasRead.getter();
    return v26 & 1;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for FocusState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t FocusState.Box.store.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == result)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v4 = *(void *)(Value + 8);
    uint64_t v5 = *(void *)(Value + 16);
    *(_DWORD *)a2 = *(_DWORD *)Value;
    a2[1] = v4;
    a2[2] = v5;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_0(a2, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
  if (!(void)v22) {
    return _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_1((uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
  }
  v25[0] = v20;
  v25[1] = v21;
  v25[3] = v23;
  char v25[4] = v24;
  void v25[2] = v22;
  uint64_t v9 = v20;
  long long v10 = v23;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))v24;
  swift_retain();
  swift_retain();
  uint64_t v12 = v11(a4, a5);
  uint64_t v14 = v13;
  swift_release();
  *(void *)&long long v20 = a3;
  *((void *)&v20 + 1) = v9;
  long long v21 = v10;
  *(void *)&long long v22 = v12;
  *((void *)&v22 + 1) = v14;
  swift_weakInit();
  swift_weakInit();
  LOBYTE(v24) = 0;
  uint64_t v15 = *(void *)(*(void *)a1 + 16);
  outlined init with copy of FocusStoreList.Item((uint64_t)&v20, (uint64_t)v19);
  uint64_t v16 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBB08];
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_0((uint64_t)v19, (uint64_t)v18, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, MEMORY[0x1E4FBBB08]);
  specialized Array.replaceSubrange<A>(_:with:)(v15, v15, (uint64_t)v18);
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_1((uint64_t)v19, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, v16);
  outlined destroy of FocusStoreList.Item((uint64_t)&v20);
  return outlined destroy of SearchFocusContext((uint64_t)v25);
}

uint64_t outlined destroy of CollectionOfOne<FocusStoreList.Item>(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for CollectionOfOne<FocusStoreList.Item>(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for Attribute<FocusStoreList>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  _s7SwiftUI5StateVySbGMaTm_2(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void FocusState.Box.focusedItem.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(int64x2_t *)(a2 + 40) = vdupq_n_s64(1uLL);
    *(_DWORD *)(a2 + 56) = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    type metadata accessor for Attribute<FocusStoreList>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of CollectionOfOne<FocusStoreList.Item>(Value, a2, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, v3);
  }
}

uint64_t outlined init with copy of CollectionOfOne<FocusStoreList.Item>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for Attribute<FocusStoreList>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  _s7SwiftUI5StateVySbGMaTm_2(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, ValueMetadata *))
{
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Attribute<FocusStoreList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t specialized closure #1 in FocusState.Box.update(property:phase:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    FocusStoreLocation.performDeferredUpdate()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall FocusStoreLocation.performDeferredUpdate()()
{
  id v1 = (uint64_t *)(*v0 + class metadata base offset for FocusStoreLocation);
  uint64_t v2 = *v1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v20 - v9;
  uint64_t v21 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = (char *)v0 + v1[6];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, v14, v4);
  uint64_t v15 = *(void *)(TupleTypeMetadata2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {
    long long v20 = v7;
    int v16 = *(_DWORD *)&v10[*(int *)(TupleTypeMetadata2 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v13, v10, v2);
    if (v16 != -1)
    {
      int v17 = *(_DWORD *)((char *)v0 + *(void *)(class metadata base offset for FocusStoreLocation + *v0 + 40));
      BOOL v18 = v16 != v17 || v17 == -1;
      if (!v18 || v16 == 0)
      {
        static Transaction.current.getter();
        specialized FocusStoreLocation.set(_:transaction:)((uint64_t)v13);
        swift_release();
        (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v2);
        return;
      }
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v2);
    uint64_t v7 = v20;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v7, 1, 1, TupleTypeMetadata2);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(v14, v7, v4);
  swift_endAccess();
}

void type metadata accessor for CollectionOfOne<FocusStoreList.Item>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for CollectionOfOne();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for FocusStoreList.Item);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t FocusStore.makeStoreContent(_:)(uint64_t result)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(result + 16);
  if (!v3)
  {
    *id v1 = 0;
    return result;
  }
  uint64_t v4 = result + 32;
  swift_bridgeObjectRetain();
  unint64_t v5 = 0;
  uint64_t v6 = v4;
  uint64_t v7 = v3;
  do
  {
    outlined init with copy of FocusStoreList.Item(v6, (uint64_t)&v35);
    if (v35 > (uint64_t)v5) {
      unint64_t v5 = v35;
    }
    outlined destroy of FocusStoreList.Item((uint64_t)&v35);
    v6 += 72;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease();
  if (HIDWORD(v5)) {
    goto LABEL_39;
  }
  *uint64_t v2 = v5;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of FocusStoreList.Item(v4, (uint64_t)&v35);
    uint64_t v8 = v36;
    uint64_t v9 = *((void *)v2 + 2);
    if (!*(void *)(v9 + 16) || (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v36), (v11 & 1) == 0))
    {
      uint64_t v12 = 0;
      uint64_t v34 = 0;
      uint64_t v13 = v37;
      if (!v37) {
        goto LABEL_16;
      }
LABEL_15:
      swift_retain();
      v13(&v34);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v13);
      uint64_t v12 = v34;
      goto LABEL_16;
    }
    uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
    uint64_t v34 = v12;
    swift_retain();
    uint64_t v13 = v37;
    if (v37) {
      goto LABEL_15;
    }
LABEL_16:
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = (void *)*((void *)v2 + 2);
    uint64_t v15 = v33;
    *((void *)v2 + 2) = 0x8000000000000000;
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    uint64_t v18 = v15[2];
    BOOL v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      break;
    }
    char v21 = v16;
    if (v15[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v20, isUniquelyReferenced_nonNull_native);
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_38;
      }
      unint64_t v17 = v22;
    }
    long long v24 = v33;
    if (v21)
    {
      uint64_t v25 = v33[7];
      swift_release();
      *(void *)(v25 + 8 * v17) = v12;
    }
    else
    {
      v33[(v17 >> 6) + 8] |= 1 << v17;
      *(void *)(v24[6] + 8 * v17) = v8;
      *(void *)(v24[7] + 8 * v17) = v12;
      uint64_t v26 = v24[2];
      BOOL v27 = __OFADD__(v26, 1);
      uint64_t v28 = v26 + 1;
      if (v27) {
        goto LABEL_37;
      }
      v24[2] = v28;
    }
    *((void *)v2 + 2) = v24;
    swift_bridgeObjectRelease();
    if ((v38 & 1) != 0 && swift_weakLoadStrong())
    {
      type metadata accessor for ViewResponder();
      if (swift_dynamicCastClass())
      {
        swift_weakInit();
        swift_weakAssign();
        outlined init with take of Binding<SearchFieldState>((uint64_t)v32, (uint64_t)&v33, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
        uint64_t v29 = (void *)*((void *)v2 + 1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
        }
        unint64_t v31 = v29[2];
        unint64_t v30 = v29[3];
        if (v31 >= v30 >> 1) {
          uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
        }
        v29[2] = v31 + 1;
        outlined init with take of Binding<SearchFieldState>((uint64_t)&v33, (uint64_t)&v29[v31 + 4], (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
        swift_release();
        *((void *)v2 + 1) = v29;
      }
      else
      {
        swift_release();
      }
    }
    swift_release();
    outlined destroy of FocusStoreList.Item((uint64_t)&v35);
    v4 += 72;
    if (!--v3) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t RootViewDelegate.hostingView<A>(_:didChangePreferences:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v5 = *a2;
  specialized RootViewDelegate.updateAppFocus<A>(view:)();
  swift_beginAccess();
  specialized VersionSeedTracker.didChange(_:action:)(v5, (uint64_t (*)(uint64_t *))partial apply for closure #1 in RootViewDelegate.hostingView<A>(_:didChangePreferences:));
  swift_endAccess();
  uint64_t result = MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t ObjectType = swift_getObjectType();
    v9[0] = v5;
    (*(void (**)(void *, uint64_t *, void, void, uint64_t, uint64_t))(v7 + 32))(a1, v9, *(void *)(v4 + 80), *(void *)(v4 + 88), ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v7 = a1;
  uint64_t result = PreferenceValues.subscript.getter();
  if (*v2 == -1 || v9 == -1 || *v2 != v9)
  {
    *uint64_t v2 = v9;
    LOBYTE(v7) = v8;
    return a2(&v7);
  }
  return result;
}

uint64_t specialized RootViewDelegate.updateAppFocus<A>(view:)()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  _UIHostingView.focusedValues.getter((uint64_t)&v27);
  uint64_t v0 = v27;
  int v1 = HIDWORD(v28);
  int v24 = HIDWORD(v28);
  char v25 = v28;
  if (static AppGraph.shared)
  {
    int v2 = *(_DWORD *)(AGGraphGetValue() + 12);
    BOOL v5 = v2 == -1 || v1 == -1 || v2 != v1;
  }
  else
  {
    swift_retain();
    BOOL v5 = 1;
    outlined consume of Transaction?(1);
    outlined consume of Transaction?(v0);
  }
  uint64_t v6 = specialized _UIHostingView.focusBridge.getter();
  uint64_t v7 = *(unsigned int *)(v6 + 48);
  uint64_t v8 = *(void *)(v6 + 56);
  uint64_t v9 = *(void *)(v6 + 64);
  if (static AppGraph.shared)
  {
    int v10 = *(_DWORD *)AGGraphGetValue();
    BOOL v13 = v10 == -1 || v7 == -1 || v10 != v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined consume of FocusStore?(0, 0);
    outlined consume of FocusStore?(v7, v8);
    BOOL v13 = 1;
  }
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  if (v28)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if ((v5 || v13) && v26 == 2)
  {
    if (static AppGraph.shared)
    {
      uint64_t v27 = v0;
      LOBYTE(v28) = v25;
      HIDWORD(v28) = v24;
      swift_retain();
      char v14 = AGGraphSetValue();
      LODWORD(v27) = v7;
      uint64_t v28 = v8;
      uint64_t v29 = v9;
      int v15 = AGGraphSetValue();
      if ((v14 & 1) != 0 || v15)
      {
        swift_retain();
        AppGraph.graphDidChange()();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    id v17 = objc_msgSend(self, sel_sharedApplication);
    id v18 = objc_msgSend(v17, sel_delegate);

    if (v18)
    {
      type metadata accessor for AppDelegate();
      uint64_t v19 = swift_dynamicCastClass();
      if (v19 && (uint64_t v20 = *(void **)(v19 + OBJC_IVAR____TtC7SwiftUI11AppDelegate_mainMenuController)) != 0)
      {
        char v21 = self;
        id v22 = v20;
        id v23 = objc_msgSend(v21, sel_mainSystem);
        objc_msgSend(v23, sel_setNeedsRebuild);

        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

Swift::Void __swiftcall _UIHostingView.updateFocusedValues()()
{
  uint64_t v1 = *(void *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 64);
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 361) & 0x20) != 0)
  {
    _UIHostingView.focusedValues.getter((uint64_t)&v2);
    swift_retain();
    ViewGraph.setFocusedValues(_:)();
    swift_release();
    swift_release();
  }
}

void FocusBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = FocusBridge.host.getter();
  if (v4)
  {
    uint64_t v6 = (void *)v4;
    uint64_t v7 = v5;
    uint64_t v81 = v3;
    PreferenceValues.subscript.getter();
    uint64_t v8 = v79;
    uint64_t v9 = *(void *)(v79 + 16);
    if (v9)
    {
      uint64_t v10 = v79 + 32;
      swift_bridgeObjectRetain();
      uint64_t v11 = 0;
      do
      {
        outlined init with copy of FocusStoreList.Item(v10, (uint64_t)&v79);
        if (v79 > v11) {
          uint64_t v11 = v79;
        }
        outlined destroy of FocusStoreList.Item((uint64_t)&v79);
        v10 += 72;
        --v9;
      }
      while (v9);
      if (HIDWORD(v11)) {
        goto LABEL_71;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      LODWORD(v11) = 0;
    }
    swift_bridgeObjectRelease();
    int v12 = *(_DWORD *)(v2 + 48);
    if (v12 != -1 && (v11 != -1 ? (BOOL v13 = v12 == v11) : (BOOL v13 = 0), v13))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v14 = (void *)MEMORY[0x1E4FBC860];
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v7 + 8) + 48))(ObjectType);
      swift_release();
      LODWORD(v79) = 0;
      *(void *)&long long v80 = v14;
      *((void *)&v80 + 1) = specialized Dictionary.init(dictionaryLiteral:)(v14);
      FocusStore.makeStoreContent(_:)(v8);
      swift_bridgeObjectRelease();
      long long v16 = v80;
      *(_DWORD *)(v2 + 48) = v79;
      *(_OWORD *)(v2 + 56) = v16;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v17 = (void *)FocusBridge.host.getter();
      if (v17)
      {
        swift_getObjectType();
        LOWORD(v79) = 64;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      }
    }
    uint64_t v81 = v3;
    PreferenceValues.subscript.getter();
    uint64_t v18 = v79;
    unint64_t v19 = *(void *)(v79 + 16);
    if (v19)
    {
      if (v19 >= 5)
      {
        uint64_t v22 = *(void *)(v79 + 16) & 3;
        if ((v19 & 3) == 0) {
          uint64_t v22 = 4;
        }
        unint64_t v20 = v19 - v22;
        id v23 = (const double *)(v79 + 96);
        int64x2_t v24 = 0uLL;
        unint64_t v25 = v20;
        int64x2_t v26 = 0uLL;
        do
        {
          uint64_t v27 = v23 - 8;
          unsigned long long v28 = (unsigned __int128)vld4q_f64(v27);
          unsigned long long v29 = (unsigned __int128)vld4q_f64(v23);
          int64x2_t v24 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v28, v24), (int8x16_t)v28, (int8x16_t)v24);
          int64x2_t v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v29, v26), (int8x16_t)v29, (int8x16_t)v26);
          v23 += 16;
          v25 -= 4;
        }
        while (v25);
        int8x16_t v30 = vbslq_s8((int8x16_t)vcgtq_s64(v24, v26), (int8x16_t)v24, (int8x16_t)v26);
        uint64_t v31 = vextq_s8(v30, v30, 8uLL).u64[0];
        int8x8_t v21 = vbsl_s8((int8x8_t)vcgtd_s64(v30.i64[0], v31), *(int8x8_t *)v30.i8, (int8x8_t)v31);
      }
      else
      {
        unint64_t v20 = 0;
        int8x8_t v21 = 0;
      }
      unint64_t v32 = v19 - v20;
      uint64_t v33 = (int8x8_t *)(v79 + 32 * v20 + 32);
      do
      {
        int8x8_t v35 = *v33;
        v33 += 4;
        int8x8_t v34 = v35;
        if (*(void *)&v35 > *(void *)&v21) {
          int8x8_t v21 = v34;
        }
        --v32;
      }
      while (v32);
      if (HIDWORD(*(void *)&v21)) {
        goto LABEL_71;
      }
    }
    else
    {
      v21.i32[0] = 0;
    }
    uint64_t v36 = swift_getObjectType();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 24))(&v79, v36, v7);
    int v37 = DWORD1(v80);
    swift_release();
    if (v37 != -1 && v21.i32[0] != -1 && v37 == v21.i32[0])
    {
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
    uint64_t v79 = 0;
    LOBYTE(v80) = 0;
    unint64_t v38 = *(void *)(v18 + 16);
    if (!v38)
    {
      swift_bridgeObjectRelease();
      int v41 = 0;
      char v42 = 0;
      uint64_t v43 = 0;
LABEL_53:
      uint64_t v79 = v43;
      LOBYTE(v80) = v42;
      DWORD1(v80) = v41;
      uint64_t v58 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 32);
      swift_retain();
      v58(&v79, v36, v7);
      ViewRendererHost.isRootHost.getter();
      swift_release();
LABEL_54:
      uint64_t v81 = v3;
      PreferenceValues.subscript.getter();
      uint64_t v59 = v79;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v7 + 48))(&v79, v36, v7);
      uint64_t v60 = v79;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v61 = *(void *)(v59 + 16);
      if (v61)
      {
        if (v61 >= 5)
        {
          uint64_t v64 = *(void *)(v59 + 16) & 3;
          if ((v61 & 3) == 0) {
            uint64_t v64 = 4;
          }
          unint64_t v62 = v61 - v64;
          uint64_t v65 = (uint64_t *)(v59 + 144);
          int64x2_t v66 = 0uLL;
          unint64_t v67 = v62;
          int64x2_t v68 = 0uLL;
          do
          {
            uint64_t v69 = v65 + 7;
            v70.i64[0] = *(v65 - 14);
            v70.i64[1] = *(v65 - 7);
            uint64_t v71 = *v65;
            v65 += 28;
            v72.i64[0] = v71;
            v72.i64[1] = *v69;
            int64x2_t v66 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v70, v66), (int8x16_t)v70, (int8x16_t)v66);
            int64x2_t v68 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v72, v68), (int8x16_t)v72, (int8x16_t)v68);
            v67 -= 4;
          }
          while (v67);
          int8x16_t v73 = vbslq_s8((int8x16_t)vcgtq_s64(v66, v68), (int8x16_t)v66, (int8x16_t)v68);
          uint64_t v74 = vextq_s8(v73, v73, 8uLL).u64[0];
          int8x8_t v63 = vbsl_s8((int8x8_t)vcgtd_s64(v73.i64[0], v74), *(int8x8_t *)v73.i8, (int8x8_t)v74);
        }
        else
        {
          unint64_t v62 = 0;
          int8x8_t v63 = 0;
        }
        unint64_t v75 = v61 - v62;
        uint64_t v76 = (int8x8_t *)(v59 + 56 * v62 + 32);
        do
        {
          int8x8_t v78 = *v76;
          v76 += 7;
          int8x8_t v77 = v78;
          if (*(void *)&v78 > *(void *)&v63) {
            int8x8_t v63 = v77;
          }
          --v75;
        }
        while (v75);
        if (v60 == *(void *)&v63) {
          goto LABEL_69;
        }
      }
      else if (!v60)
      {
LABEL_69:

        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v79 = 0;
      *(void *)&long long v80 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      *((void *)&v80 + 1) = MEMORY[0x1E4FBC868];
      AccessibilityFocusStore.makeStoreContent(_:)(v59);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 56))(&v79, v36, v7);

      return;
    }
    if (v38 >= 5)
    {
      uint64_t v44 = *(void *)(v18 + 16) & 3;
      if ((v38 & 3) == 0) {
        uint64_t v44 = 4;
      }
      unint64_t v39 = v38 - v44;
      uint64_t v45 = (const double *)(v18 + 96);
      int64x2_t v46 = 0uLL;
      unint64_t v47 = v39;
      int64x2_t v48 = 0uLL;
      do
      {
        unsigned __int16 v49 = v45 - 8;
        unsigned long long v50 = (unsigned __int128)vld4q_f64(v49);
        unsigned long long v51 = (unsigned __int128)vld4q_f64(v45);
        int64x2_t v46 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v50, v46), (int8x16_t)v50, (int8x16_t)v46);
        int64x2_t v48 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64((int64x2_t)v51, v48), (int8x16_t)v51, (int8x16_t)v48);
        v45 += 16;
        v47 -= 4;
      }
      while (v47);
      int8x16_t v52 = vbslq_s8((int8x16_t)vcgtq_s64(v46, v48), (int8x16_t)v46, (int8x16_t)v48);
      uint64_t v53 = vextq_s8(v52, v52, 8uLL).u64[0];
      int8x8_t v40 = vbsl_s8((int8x8_t)vcgtd_s64(v52.i64[0], v53), *(int8x8_t *)v52.i8, (int8x8_t)v53);
    }
    else
    {
      unint64_t v39 = 0;
      int8x8_t v40 = 0;
    }
    unint64_t v54 = v38 - v39;
    uint64_t v55 = 32 * v39 + 32;
    do
    {
      if (*(void *)(v18 + v55) > *(void *)&v40) {
        int8x8_t v40 = *(int8x8_t *)(v18 + v55);
      }
      v55 += 32;
      --v54;
    }
    while (v54);
    if (!HIDWORD(*(void *)&v40))
    {
      DWORD1(v80) = v40.i32[0];
      swift_bridgeObjectRetain();
      uint64_t v56 = v18 + 56;
      do
      {
        uint64_t v57 = *(void (**)(uint64_t *))(v56 - 8);
        swift_retain();
        v57(&v79);
        swift_release();
        v56 += 32;
        --v38;
      }
      while (v38);
      swift_bridgeObjectRelease_n();
      uint64_t v43 = v79;
      char v42 = v80;
      int v41 = DWORD1(v80);
      goto LABEL_53;
    }
LABEL_71:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t _UIHostingView.focusedValues.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A8);
  uint64_t v3 = *(void *)v2;
  char v4 = v2[8];
  LODWORD(v2) = *((_DWORD *)v2 + 3);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v2;
  return swift_retain();
}

uint64_t ViewGraph.setFocusedValues(_:)()
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(v0 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    uint64_t result = ViewGraph.subscript.getter();
    if (result)
    {
      uint64_t result = *(unsigned int *)(result + 4);
      if (result != *MEMORY[0x1E4F4E7A0])
      {
        uint64_t result = AGGraphSetValue();
        if (result)
        {
          swift_beginAccess();
          uint64_t result = MEMORY[0x18C119DF0](v0 + 200);
          if (result)
          {
            uint64_t v2 = *(void *)(v0 + 208);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
            return swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateFocusStore()()
{
  uint64_t v1 = *(void *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 64);
  swift_beginAccess();
  if ((*(unsigned char *)(v1 + 361) & 0x20) != 0)
  {
    specialized _UIHostingView.focusBridge.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ViewGraph.setFocusStore(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t ViewGraph.setFocusStore(_:)()
{
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(v0 + 361) & 0x20) != 0)
  {
    lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
    uint64_t result = ViewGraph.subscript.getter();
    if (result)
    {
      uint64_t result = *(unsigned int *)(result + 8);
      if (result != *MEMORY[0x1E4F4E7A0])
      {
        uint64_t result = AGGraphSetValue();
        if (result)
        {
          swift_beginAccess();
          uint64_t result = MEMORY[0x18C119DF0](v0 + 200);
          if (result)
          {
            uint64_t v2 = *(void *)(v0 + 208);
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t))(*(void *)(v2 + 8) + 16))(ObjectType);
            return swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  return result;
}

void protocol witness for GraphDelegate.graphDidChange() in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  ViewRendererHost.graphDidChange()();
}

uint64_t key path getter for EnvironmentValues.scenePhase : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>);
    }
  }
}

uint64_t outlined init with copy of FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for FocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  swift_weakCopyInit();
  swift_weakCopyInit();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t outlined destroy of FocusStoreList.Item(uint64_t a1)
{
  return a1;
}

uint64_t destroy for FocusStoreList.Item(uint64_t a1)
{
  swift_release();
  if (*(void *)(a1 + 32)) {
    swift_release();
  }
  swift_weakDestroy();

  return swift_weakDestroy();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey>, (uint64_t)&type metadata for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t)&protocol witness table for EnvironmentValues.SceneKeyboardShortcutsKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SceneID and conformance SceneID()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneID and conformance SceneID;
  if (!lazy protocol witness table cache variable for type SceneID and conformance SceneID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneID and conformance SceneID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneID and conformance SceneID;
  if (!lazy protocol witness table cache variable for type SceneID and conformance SceneID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneID and conformance SceneID);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, PropertyList>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, PropertyList>);
    }
  }
}

uint64_t partial apply for closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1[2] - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(a1, v1[4], v1[5], (uint64_t)v1 + v3, *(uint64_t *)((char *)v1 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)), v1[2], v1[3]);
}

uint64_t closure #1 in FocusStoreUpdateAction.init<A>(value:responder:bridge:focusScopes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v18[0] = a4;
  v18[1] = a1;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  int v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FocusStore.Entry();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14 - 8);
  long long v16 = (char *)v18 - v15;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      (*(void (**)(char *, void, uint64_t))(v10 + 16))(v12, v18[0], a6);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      FocusStore.Entry.init(value:focusScopes:responder:bridge:)((uint64_t)v12, a5, a6, a7, (uint64_t)v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v16, 0, 1, v13);
      type metadata accessor for FocusStore.Key();
      swift_getWitnessTable();
      PropertyList.subscript.setter();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t FocusStore.Entry.init(value:focusScopes:responder:bridge:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v17 = a5;
  uint64_t v18 = a2;
  uint64_t v19 = a4;
  uint64_t v7 = type metadata accessor for FocusStore.Entry.Target();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v14, a1, a3, v12);
  type metadata accessor for ViewResponder();
  if (swift_dynamicCastClass()) {
    swift_retain();
  }
  swift_weakInit();
  swift_weakAssign();
  swift_release();
  outlined init with take of Binding<SearchFieldState>((uint64_t)v20, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for WeakBox<ViewResponder>);
  swift_weakInit();
  uint64_t v15 = swift_weakAssign();
  outlined init with take of Binding<SearchFieldState>(v15, (uint64_t)(v9 + 8), (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a3);
  swift_storeEnumTagMultiPayload();
  return FocusStore.Entry.init(value:focusScopes:target:)((uint64_t)v14, v18, (uint64_t)v9, a3, v17);
}

void *initializeWithTake for FocusStore.Entry.Target(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v6 = *(int *)(v5 + 32);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    *uint64_t v7 = *((unsigned char *)a2 + v6);
    v7[1] = *((unsigned char *)a2 + v6 + 1);
    *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
    unsigned char v7[8] = *((unsigned char *)a2 + v6 + 8);
    *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
    uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v10 = v9[9];
    uint64_t v11 = &v7[v10];
    double v12 = &v8[v10];
    uint64_t v13 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    v7[v9[10]] = v8[v9[10]];
    uint64_t v14 = v9[11];
    uint64_t v15 = &v7[v14];
    long long v16 = &v8[v14];
    v15[4] = v16[4];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  }
  else
  {
    swift_weakTakeInit();
    swift_weakTakeInit();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t FocusStore.Entry.init(value:focusScopes:target:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for FocusStore.Entry();
  *(void *)(a5 + *(int *)(v8 + 36)) = a2;
  uint64_t v9 = a5 + *(int *)(v8 + 40);
  uint64_t v10 = type metadata accessor for FocusStore.Entry.Target();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);

  return v11(v9, a3, v10);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v14 = (void *)swift_allocObject();
    int64_t v15 = _swift_stdlib_malloc_size_0(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 25;
    }
    void v14[2] = v12;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v9)
  {
    if (v14 < a4 || v14 + 4 >= &a4[v12 + 4])
    {
      a7(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v14 != a4)
    {
      a7(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v14;
}

{
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int64_t v15;
  uint64_t v16;

  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v14 = (void *)swift_allocObject();
    int64_t v15 = _swift_stdlib_malloc_size_0(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 25;
    }
    void v14[2] = v12;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v9)
  {
    if (v14 != a4 || v14 + 4 >= &a4[v12 + 4]) {
      memmove(v14 + 4, a4 + 4, 8 * v12);
    }
    a4[2] = 0;
  }
  else
  {
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v14;
}

{
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  size_t v15;

  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v14 = (void *)swift_allocObject();
    int64_t v15 = _swift_stdlib_malloc_size_0(v14);
    void v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 72);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v9)
  {
    if (v14 != a4 || v14 + 4 >= &a4[9 * v12 + 4]) {
      memmove(v14 + 4, a4 + 4, 72 * v12);
    }
    a4[2] = 0;
  }
  else
  {
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v14;
}

{
  char v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int64_t v15;
  uint64_t v16;

  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v14 = (void *)swift_allocObject();
    int64_t v15 = _swift_stdlib_malloc_size_0(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 1;
    }
    void v14[2] = v12;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v9)
  {
    if (v14 != a4 || v14 + 4 >= &a4[4 * v12 + 4]) {
      memmove(v14 + 4, a4 + 4, 32 * v12);
    }
    a4[2] = 0;
  }
  else
  {
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t FocusState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized SceneStorage.wrappedValue.setter(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

uint64_t specialized SceneStorage.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + *(int *)(a2 + 36))) {
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return result;
}

uint64_t specialized FocusStoreLocation.set(_:transaction:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + class metadata base offset for FocusStoreLocation);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v1 + 5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (char *)&v20 - v9;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v22 = result;
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    uint64_t v13 = (char *)v1 + *(void *)(class metadata base offset for FocusStoreLocation + *v1 + 32);
    uint64_t v21 = v3;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, a1, v4);
    v14(v7, (uint64_t)v13, v4);
    uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v16 = (v15 + 40) & ~v15;
    uint64_t v17 = (v6 + v15 + v16) & ~v15;
    uint64_t v18 = (char *)swift_allocObject();
    *((void *)v18 + 2) = v4;
    *((void *)v18 + 3) = *(void *)(class metadata base offset for FocusStoreLocation + v21 + 8);
    *((void *)v18 + 4) = v12;
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v19(&v18[v16], v10, v4);
    v19(&v18[v17], v7, v4);
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void partial apply for closure #1 in RootViewDelegate.hostingView<A>(_:didChangePreferences:)(char *a1)
{
  char v1 = *a1;
  _UIHostingView.colorScheme.setter(&v1);
}

uint64_t FocusStoreLocation.wasRead.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)(class metadata base offset for FocusStoreLocation + *v0 + 72));
}

uint64_t specialized FocusStoreLocation.__allocating_init(host:resetValue:)(uint64_t a1, uint64_t a2)
{
  return specialized FocusStoreLocation.init(host:resetValue:)(a1, a2);
}

uint64_t specialized FocusStoreLocation.init(host:resetValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *((_DWORD *)v2 + 4) = 0;
  v2[3] = v5;
  v2[4] = v6;
  swift_weakInit();
  *(_DWORD *)((char *)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 40)) = 0;
  uint64_t v7 = (uint64_t)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 48);
  uint64_t v8 = *(void *)(v4 + class metadata base offset for FocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v7, 1, 1, TupleTypeMetadata2);
  uint64_t v10 = (uint64_t)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 56);
  uint64_t v11 = type metadata accessor for FocusStore.Entry();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_DWORD *)((char *)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 64)) = 0;
  *((unsigned char *)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 72)) = 0;
  swift_weakAssign();
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))((uint64_t)v2 + *(void *)(class metadata base offset for FocusStoreLocation + *v2 + 32), a2, v8);

  return MEMORY[0x1F40FD348](v12);
}

void @objc PlatformViewHost.layoutSubviews()(void *a1)
{
  id v1 = a1;
  PlatformViewHost.layoutSubviews()();
}

Swift::Void __swiftcall PlatformViewHost.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  PlatformViewHost.layoutHostedView()();
}

void PlatformViewHost.layoutHostedView()()
{
  objc_super v1 = v0;
  LODWORD(v5.receiver) = -1;
  if (isLinkedOnOrAfter(_:)())
  {
    LOBYTE(v2) = 0;
  }
  else
  {
    lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
    int v2 = static UserDefaultKeyedFeature.isEnabled.getter() ^ 1;
  }
  v5.receiver = v0;
  v5.super_class = (Class)swift_getObjectType();
  id v3 = objc_msgSendSuper2(&v5, sel_hostedView);
  if (v3)
  {
    uint64_t v4 = v3;
    if (v2 & 1 | ((objc_msgSend(v3, sel__wantsConstraintBasedLayout) & 1) == 0))
    {
      objc_msgSend(v1, sel_bounds);
      if (CGRectGetWidth(v6) != 0.0)
      {
        objc_msgSend(v1, sel_bounds);
        if (CGRectGetHeight(v7) != 0.0)
        {
          objc_msgSend(v1, sel_bounds);
          objc_msgSend(v4, sel_frameForAlignmentRect_);
          objc_msgSend(v4, sel_setFrame_);
        }
      }
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t key path getter for EnvironmentValues.labelIconToTitleSpacing : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.labelIconToTitleSpacing.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t View.coordinateSpace(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of NamedCoordinateSpace(a1, (uint64_t)v6);
  MEMORY[0x18C113660](v6, a2, &type metadata for CoordinateSpaceNameModifier, a3);
  return outlined destroy of CoordinateSpaceNameModifier((uint64_t)v6);
}

uint64_t outlined destroy of CoordinateSpaceNameModifier(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t outlined init with copy of NamedCoordinateSpace(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in LazyLayoutComputer.Engine.sizeThatFits(_:)@<X0>(double *a1@<X8>)
{
  return closure #1 in closure #1 in LazyLayoutComputer.Engine.sizeThatFits(_:)(*(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), *(void *)(v1 + 80), *(unsigned __int8 *)(v1 + 88), a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _LazyLayoutViewCache.withMutableCacheState<A, B>(type:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v21 = a2;
  uint64_t v22 = a5;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)v6;
  uint64_t v11 = *(void *)(*(void *)v6 + 328);
  uint64_t v12 = *(void *)(*(void *)v6 + 320);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v20 - v15;
  uint64_t v17 = v6 + *(void *)(v10 + 344);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, AssociatedTypeWitness);
  uint64_t v24 = v12;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = v11;
  uint64_t v28 = a1;
  uint64_t v29 = v21;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v16, (uint64_t)partial apply for closure #1 in View.actionSheet<A>(item:content:), (uint64_t)v23, AssociatedTypeWitness, MEMORY[0x1E4FBC248], a4, MEMORY[0x1E4FBC278], v18);
  $defer #1 <A><A1, B1>() in _LazyLayoutViewCache.withMutableCacheState<A, B>(type:_:)(v6, (uint64_t)v16);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
}

uint64_t closure #1 in closure #1 in LazyLayoutComputer.Engine.sizeThatFits(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, double *a9@<X8>, uint64_t a10, uint64_t a11)
{
  LODWORD(v36) = a8;
  uint64_t v33 = a7;
  uint64_t v38 = a4;
  int v13 = a3;
  unsigned int v14 = a2;
  unint64_t v39 = a9;
  uint64_t v35 = a11;
  uint64_t v37 = a10;
  unint64_t v16 = HIDWORD(a2);
  unint64_t v34 = HIDWORD(a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v20 = (char *)&v32 - v19;
  v47[0] = v14;
  v47[1] = v16;
  void v47[2] = v13;
  int v21 = SizeAndSpacingContext.context.getter();
  LazyLayoutViewCache.subviews(context:)(v21, (uint64_t)v47);
  unint64_t v42 = a5;
  LOBYTE(v43) = a6 & 1;
  uint64_t v45 = v33;
  char v46 = v36 & 1;
  uint64_t v36 = ProposedViewSize.init(_:)();
  char v23 = v22;
  uint64_t v33 = v24;
  LOBYTE(a5) = v25;
  unint64_t v42 = __PAIR64__(v16, v14);
  int v43 = v13;
  int v44 = v34;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v26 = *(double (**)(uint64_t))(v35 + 48);
  char v41 = v23 & 1;
  char v40 = a5 & 1;
  double v27 = v26(v36);
  uint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
  uint64_t result = outlined destroy of _LazyLayout_Subviews((uint64_t)v47);
  uint64_t v31 = v39;
  *unint64_t v39 = v27;
  *((void *)v31 + 1) = v29;
  return result;
}

uint64_t LazyLayoutViewCache.subviews(context:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    GraphHost.graph.getter();
    TransactionID.init(graph:)();
    swift_release();
    uint64_t Strong = v11;
  }
  swift_beginAccess();
  if (*(void *)(v3 + 184) != Strong)
  {
    *(void *)(v3 + 184) = Strong;
    ++*(_DWORD *)(v3 + 192);
  }
  int v7 = *(_DWORD *)(v3 + 136);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Inputuint64_t Value = AGGraphGetInputValue();
  outlined init with copy of TableColumnList(InputValue, a2 + 16);
  *(_DWORD *)(a2 + 56) = v7;
  *(unsigned char *)(a2 + 60) = 0;
  *(unsigned char *)(a2 + 101) = 0;
  swift_retain();
  uint64_t result = _ViewList_SublistTransform.init()();
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = a1;
  *(void *)(a2 + 104) = v10;
  *(_DWORD *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 116) = 1;
  *(_WORD *)(a2 + 117) = 0;
  return result;
}

uint64_t type metadata accessor for CVarArg(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t destroy for _LazyStack_Cache(unsigned __int16 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = ~v5;
  uint64_t v7 = ((v5 + 16) & ~v5) + *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84))
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v3 + 48))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & v6, *(unsigned int *)(v3 + 84), AssociatedTypeWitness))
    {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_18;
  }
  int v8 = (*((unsigned __int8 *)a1 + v7) - 1) << (8 * v7);
  if (v7 > 3) {
    int v8 = 0;
  }
  if (v7)
  {
    int v9 = v7 <= 3 ? ((v5 + 16) & ~v5) + *(_DWORD *)(v3 + 64) : 4;
    switch(v9)
    {
      case 2:
        int v10 = *a1;
        break;
      case 3:
        int v10 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v10 = *(_DWORD *)a1;
        break;
      default:
        int v10 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v10 = 0;
  }
  if ((v10 | v8) == 0xFFFFFFFF) {
LABEL_18:
  }
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & v6, AssociatedTypeWitness);
LABEL_19:
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _LazyLayoutViewCache.copyCacheState<A>(type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v9[2] = *(void *)(*v2 + 320);
  uint64_t v9[3] = a2;
  void v9[4] = *(void *)(v4 + 328);
  uint64_t v5 = (uint64_t)v2 + *(void *)(v4 + 344);
  swift_beginAccess();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)partial apply for closure #1 in _LazyLayoutViewCache.copyCacheState<A>(type:), (uint64_t)v9, AssociatedTypeWitness, MEMORY[0x1E4FBC248], a2, MEMORY[0x1E4FBC278], v7);
  return swift_endAccess();
}

uint64_t _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  unsigned int v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t partial apply for closure #1 in _LazyLayoutViewCache.copyCacheState<A>(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v2 + 24) - 8) + 16))(a2, a1);
}

void *initializeWithCopy for _LazyStack_Cache(void *a1, unsigned __int16 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = ((v8 + 16) & ~v8) + *(void *)(v5 + 64);
  if (!v7)
  {
    if (!*((unsigned char *)a2 + v10)) {
      goto LABEL_22;
    }
    int v11 = (*((unsigned __int8 *)a2 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v11 = 0;
    }
    if (v10)
    {
      int v12 = v10 <= 3 ? ((v8 + 16) & ~v8) + *(_DWORD *)(v5 + 64) : 4;
      switch(v12)
      {
        case 2:
          int v13 = *a2;
          break;
        case 3:
          int v13 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v13 = *(_DWORD *)a2;
          break;
        default:
          int v13 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v13 = 0;
    }
    if ((v13 | v11) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v7) {
      size_t v14 = v10;
    }
    else {
      size_t v14 = v10 + 1;
    }
    memcpy(a1, a2, v14);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v5 + 48))(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v9, *(unsigned int *)(v5 + 84), AssociatedTypeWitness))
  {
    goto LABEL_18;
  }
LABEL_22:
  *a1 = *(void *)a2;
  uint64_t v15 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v16 + v8 + 8) & v9, AssociatedTypeWitness);
  if (!v7) {
    *((unsigned char *)a1 + v10) = 0;
  }
LABEL_24:
  if (v7) {
    uint64_t v17 = v10;
  }
  else {
    uint64_t v17 = v10 + 1;
  }
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  unint64_t v20 = (unint64_t)(v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = v22;
  char v23 = (_OWORD *)((unint64_t)(v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (_OWORD *)((unint64_t)(v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v23 = *v24;
  char v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v25 = *v26;
  double v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  *double v27 = *v28;
  uint64_t v29 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v29 = *v30;
  uint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v31 = *v32;
  uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v33 = *v34;
  v33[1] = v34[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of _LazyLayout_Subviews(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _LazyLayout_Subviews(uint64_t a1)
{
  swift_release();
  switch(*(unsigned char *)(a1 + 101))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
      break;
    case 1:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      goto LABEL_5;
    case 2:
      goto LABEL_5;
    case 3:
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of _LazyLayout_Subviews.Node(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _LazyLayout_Subviews.Node(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 119);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v6;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 119) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    int v7 = (void *)(a2 + 16);
    uint64_t v8 = *(unsigned __int8 *)(a2 + 101);
    swift_retain();
    switch(v8)
    {
      case 1:
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        long long v12 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 72) = v12;
        uint64_t v13 = v12;
        size_t v14 = **(void (***)(uint64_t, uint64_t, uint64_t))(v12 - 8);
        swift_bridgeObjectRetain();
        v14(a1 + 48, a2 + 48, v13);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
        char v10 = 1;
        goto LABEL_10;
      case 2:
        *(void *)(a1 + 16) = *v7;
        char v10 = 2;
LABEL_10:
        *(unsigned char *)(a1 + 101) = v10;
        goto LABEL_11;
      case 3:
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        uint64_t v11 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = v11;
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(unsigned char *)(a1 + 101) = 3;
        swift_bridgeObjectRetain();
LABEL_11:
        swift_bridgeObjectRetain();
        break;
      default:
        long long v9 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 40) = v9;
        (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 16, a2 + 16);
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
        *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
        *(unsigned char *)(a1 + 101) = 0;
        break;
    }
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
    *(unsigned char *)(a1 + 119) = 0;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in PlatformViewChild.updateValue()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _DynamicPropertyBuffer.update(container:phase:)();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #1 in View.actionSheet<A>(item:content:)()
{
  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t $defer #1 <A><A1, B1>() in _LazyLayoutViewCache.withMutableCacheState<A, B>(type:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v11 - v7, a2, AssociatedTypeWitness, v6);
  uint64_t v9 = a1 + *(void *)(*(void *)a1 + 344);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v9, v8, AssociatedTypeWitness);
  return swift_endAccess();
}

unsigned __int16 *assignWithTake for _LazyStack_Cache(unsigned __int16 *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = ((v7 + 16) & ~v7) + *(void *)(v5 + 64);
  uint64_t v47 = ~v7;
  if (!v6)
  {
    char v13 = 8 * v9;
    if (*((unsigned char *)a1 + v9))
    {
      int v14 = (*((unsigned __int8 *)a1 + v9) - 1) << v13;
      if (v9 > 3) {
        int v14 = 0;
      }
      if (v9)
      {
        int v15 = v9 <= 3 ? ((v7 + 16) & ~v7) + *(_DWORD *)(v5 + 64) : 4;
        switch(v15)
        {
          case 2:
            int v16 = *a1;
            break;
          case 3:
            int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v16 = *(_DWORD *)a1;
            break;
          default:
            int v16 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v16 = 0;
      }
      if ((v16 | v14) != 0xFFFFFFFF)
      {
        if (!a2[v9]) {
          goto LABEL_54;
        }
        int v17 = (a2[v9] - 1) << v13;
        if (v9 > 3) {
          int v17 = 0;
        }
        if (v9)
        {
          int v18 = v9 <= 3 ? ((v7 + 16) & ~v7) + *(_DWORD *)(v5 + 64) : 4;
          switch(v18)
          {
            case 2:
              int v19 = *(unsigned __int16 *)a2;
              break;
            case 3:
              int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              break;
            case 4:
              int v19 = *(_DWORD *)a2;
              break;
            default:
              int v19 = *a2;
              break;
          }
        }
        else
        {
          int v19 = 0;
        }
        if ((v19 | v17) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
LABEL_45:
        if (v6) {
          size_t v23 = v9;
        }
        else {
          size_t v23 = v9 + 1;
        }
        memcpy(a1, a2, v23);
        goto LABEL_56;
      }
    }
    if (!a2[v9])
    {
LABEL_49:
      *(void *)a1 = *(void *)a2;
      uint64_t v24 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      char v25 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v24 = *v25;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)v24 + v7 + 8) & v8, ((unint64_t)v25 + v7 + 8) & v8, AssociatedTypeWitness);
      goto LABEL_56;
    }
    int v20 = (a2[v9] - 1) << v13;
    if (v9 > 3) {
      int v20 = 0;
    }
    if (v9)
    {
      if (v9 <= 3) {
        int v21 = ((v7 + 16) & ~v7) + *(_DWORD *)(v5 + 64);
      }
      else {
        int v21 = 4;
      }
      switch(v21)
      {
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          break;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          break;
        case 4:
          int v22 = *(_DWORD *)a2;
          break;
        default:
          int v22 = *a2;
          break;
      }
    }
    else
    {
      int v22 = 0;
    }
    int v12 = (v22 | v20) + 1;
LABEL_43:
    uint64_t v8 = ~v7;
    if (v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v47, AssociatedTypeWitness);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  char v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
  int v11 = v10(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & v8, v6, AssociatedTypeWitness);
  int v12 = v10((((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7, v6, AssociatedTypeWitness);
  if (!v11) {
    goto LABEL_43;
  }
  if (v12) {
    goto LABEL_45;
  }
LABEL_54:
  *(void *)a1 = *(void *)a2;
  uint64_t v26 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  double v27 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v26 = *v27;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v26 + v7 + 8) & v47, ((unint64_t)v27 + v7 + 8) & v47, AssociatedTypeWitness);
  if (!v6) {
    *((unsigned char *)a1 + v9) = 0;
  }
LABEL_56:
  if (v6) {
    uint64_t v28 = v9;
  }
  else {
    uint64_t v28 = v9 + 1;
  }
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = &a2[v28];
  unint64_t v31 = (unint64_t)(v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (unint64_t)(v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v31 = v33;
  unint64_t v34 = (void *)((unint64_t)(v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (void *)((unint64_t)(v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  v34[1] = v35[1];
  uint64_t v36 = (void *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v37 = (void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  uint64_t v38 = (void *)(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v38 = *v39;
  v38[1] = v39[1];
  char v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v40 = *v41;
  unint64_t v42 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v43 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v42 = *v43;
  int v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = (void *)(((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v44 = *v45;
  swift_bridgeObjectRelease();
  v44[1] = v45[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyHStackLayout(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, void, uint64_t))specialized LazyStack<>.sizeThatFits(proposedSize:subviews:context:cache:));
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyVStackLayout(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, void, uint64_t))
{
  return a10(a1, a2 & 1, a3);
}

uint64_t partial apply for specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(uint64_t a1)
{
  return specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyHStackLayout, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyVStackLayout, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))specialized FixedSizeLazyLayout<>.place(subviews:context:cache:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t))specialized FixedSizeLazyLayout<>.place(subviews:context:cache:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyHGridLayout, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

{
  uint64_t *v1;

  return specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(a1, v1[2], v1[3], v1[4], (uint64_t)&type metadata for LazyVGridLayout, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

uint64_t specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v10 = *(void *)Value;
  uint64_t v11 = *(void *)(Value + 8);
  unsigned __int8 v12 = *(unsigned char *)(Value + 16);
  uint64_t v13 = *(unsigned int *)(Value + 20);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    int v15 = result;
    AGGraphGetValue();
    swift_retain();
    LazyLayoutViewCache.subviews(context:)(v15, (uint64_t)v17);
    swift_release();
    a6(v17, a3, a1, a4, v10, v11, v12 | (unint64_t)(v13 << 32));
    return outlined destroy of _LazyLayout_Subviews((uint64_t)v17);
  }
  return result;
}

uint64_t outlined destroy of StackPlacement<LazyVStackLayout>(uint64_t a1)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of StackPlacement<LazyVStackLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for StackPlacement);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized LazyStack<>.log(_:)(double *a1, uint64_t a2, unint64_t a3, double a4, double a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    unint64_t v36 = a3;
    uint64_t v37 = a2;
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    uint64_t v38 = v11;
    uint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    v16._uint64_t countAndFlagsBits = 0x28646563616C70;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);
    double v40 = a5;
    double v41 = a4;
    v39._uint64_t countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v17._uint64_t countAndFlagsBits = 3026478;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0x203E2D2029;
    v18._object = (void *)0xE500000000000000;
    String.append(_:)(v18);
    double v19 = a1[6];
    double v40 = a1[7];
    double v41 = v19;
    v39._uint64_t countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v20._uint64_t countAndFlagsBits = 3943982;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 8236;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    double v22 = a1[8];
    double v40 = a1[9];
    double v41 = v22;
    v39._uint64_t countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v23._uint64_t countAndFlagsBits = 3026478;
    v23._object = (void *)0xE300000000000000;
    String.append(_:)(v23);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0x696C61766E69202CLL;
    v24._object = (void *)0xEB00000000203A64;
    String.append(_:)(v24);
    if (*(unsigned char *)(v37 + 40)) {
      uint64_t v25 = 1702195828;
    }
    else {
      uint64_t v25 = 0x65736C6166;
    }
    if (*(unsigned char *)(v37 + 40)) {
      unint64_t v26 = 0xE400000000000000;
    }
    else {
      unint64_t v26 = 0xE500000000000000;
    }
    unint64_t v27 = v26;
    String.append(_:)(*(Swift::String *)&v25);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    uint64_t v30 = v42;
    unint64_t v29 = v43;
    swift_bridgeObjectRetain();
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v42 = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      v39._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, v36, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      v39._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v31, v32, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v34, -1, -1);
      MEMORY[0x18C119C60](v33, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v13, v10);
  }
  return result;
}

uint64_t specialized LazyStack<>.resolvedPlacerProperties(subviews:context:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v7 = a6;
  unint64_t v14 = a6 & 0xFFFFFFFF00000000;
  specialized LazyStack<>.placer(subviews:context:cache:)(a2, a3, a4, a5, a6 & 0xFFFFFFFF00000001, (uint64_t)&v59);
  if (!(void)v65)
  {
    uint64_t result = outlined destroy of StackPlacement<LazyVStackLayout>?((uint64_t)&v59, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>?, &lazy cache variable for type metadata for StackPlacement<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
    *(void *)(a7 + 384) = 0;
    *(_OWORD *)(a7 + 352) = 0u;
    *(_OWORD *)(a7 + 368) = 0u;
    *(_OWORD *)(a7 + 320) = 0u;
    *(_OWORD *)(a7 + 336) = 0u;
    *(_OWORD *)(a7 + 288) = 0u;
    *(_OWORD *)(a7 + 304) = 0u;
    *(_OWORD *)(a7 + 256) = 0u;
    *(_OWORD *)(a7 + 272) = 0u;
    *(_OWORD *)(a7 + 224) = 0u;
    *(_OWORD *)(a7 + 240) = 0u;
    *(_OWORD *)(a7 + 192) = 0u;
    *(_OWORD *)(a7 + 208) = 0u;
    *(_OWORD *)(a7 + 160) = 0u;
    *(_OWORD *)(a7 + 176) = 0u;
    *(_OWORD *)(a7 + 128) = 0u;
    *(_OWORD *)(a7 + 144) = 0u;
    *(_OWORD *)(a7 + 96) = 0u;
    *(_OWORD *)(a7 + 112) = 0u;
    *(_OWORD *)(a7 + 64) = 0u;
    *(_OWORD *)(a7 + 80) = 0u;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    return result;
  }
  long long v93 = v59;
  long long v94 = v60;
  long long v15 = v61;
  long long v17 = v62;
  uint64_t v16 = *(void *)v63;
  long long v85 = v69;
  long long v86 = v70;
  long long v87 = v71;
  long long v88 = v72;
  long long v81 = v65;
  long long v82 = v66;
  long long v83 = v67;
  long long v84 = v68;
  long long v77 = *(_OWORD *)&v63[8];
  long long v78 = *(_OWORD *)&v63[24];
  long long v79 = *(_OWORD *)&v63[40];
  long long v80 = v64;
  long long v89 = v73;
  long long v90 = v74;
  long long v91 = v75;
  long long v92 = v76;
  long long v18 = *(_OWORD *)(a2 + 104);
  long long v19 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)int8x8_t v63 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)&v63[16] = v19;
  *(_OWORD *)&v63[32] = *(_OWORD *)(a2 + 152);
  long long v20 = *(_OWORD *)(a2 + 72);
  long long v59 = *(_OWORD *)(a2 + 56);
  long long v60 = v20;
  long long v61 = *(_OWORD *)(a2 + 88);
  long long v62 = v18;
  ScrollGeometry.visibleRect.getter();
  double v22 = v21;
  uint64_t result = *(unsigned int *)(a2 + 12);
  double v24 = 0.0;
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v26 = Value[1];
    long long v59 = *Value;
    long long v60 = v26;
    uint64_t result = MEMORY[0x18C114450]();
    double v24 = v27;
  }
  double v29 = *(double *)(a3 + 96);
  double v28 = *(double *)(a3 + 104);
  if (v29 <= 0.0 || v22 <= 0.0)
  {
    BOOL v31 = 0;
    if (v28 > 0.0 && v24 > 0.0) {
LABEL_13:
    }
      BOOL v31 = vabdd_f64(v28, v24) >= 0.01;
  }
  else
  {
    double v30 = vabdd_f64(v29, v22);
    if (v28 > 0.0 && v24 > 0.0)
    {
      if (v30 >= 0.01) {
        goto LABEL_19;
      }
      goto LABEL_13;
    }
    if (v30 >= 0.01)
    {
LABEL_19:
      uint64_t v32 = *(void *)(a3 + 112);
      LOBYTE(v31) = 1;
LABEL_20:
      BOOL v53 = v31;
      char v55 = v7;
      uint64_t v36 = *(void *)(a3 + 120);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      uint64_t v56 = specialized Set.init<A>(_:)(v32);
      uint64_t v54 = a5;
      uint64_t v37 = MEMORY[0x1E4FBC860];
      uint64_t v38 = a4;
      unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 112) = v39;
      unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      uint64_t v57 = v36;
      swift_bridgeObjectRelease();
      *(void *)(a3 + 120) = v40;
      *(void *)&long long v59 = 0;
      uint64_t v58 = 0;
      uint64_t v35 = v15;
      specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v59, &v58, v15, a1, a3, v38, v54, v14 | v55 & 1, *((double *)&v15 + 1), *(double *)&v17);
      specialized LazyStack<>.log(_:)((_OWORD *)a3);
      uint64_t v41 = swift_bridgeObjectRetain();
      uint64_t v42 = specialized Set.init<A>(_:)(v41);
      unsigned __int8 v43 = specialized Set.isSubset(of:)(v56, v42);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v33 = v43 ^ 1;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v43 ^ 1))
      {
        BOOL v34 = v53;
      }
      else
      {
        BOOL v34 = 0;
        *(void *)(a3 + 112) = v32;
        *(void *)(a3 + 120) = v57;
      }
      goto LABEL_23;
    }
    BOOL v31 = 0;
  }
  uint64_t v32 = *(void *)(a3 + 112);
  if (!*(void *)(v32 + 16) || v31) {
    goto LABEL_20;
  }
  char v33 = 0;
  BOOL v34 = 0;
  uint64_t v35 = v15;
LABEL_23:
  *(void *)(a7 + 328) = v35;
  *(void *)(a7 + 336) = *((void *)&v15 + 1);
  *(_OWORD *)(a7 + 344) = v17;
  *(void *)(a7 + 360) = v16;
  *(unsigned char *)(a7 + 368) = v34;
  *(unsigned char *)(a7 + 369) = v33 & 1;
  *(double *)(a7 + 376) = v22;
  *(double *)(a7 + 384) = v24;
  long long v44 = v94;
  *(_OWORD *)a7 = v93;
  *(_OWORD *)(a7 + 16) = v44;
  *(void *)(a7 + 32) = v35;
  *(void *)(a7 + 40) = *((void *)&v15 + 1);
  *(_OWORD *)(a7 + 48) = v17;
  *(void *)(a7 + 64) = v16;
  long long v45 = v90;
  *(_OWORD *)(a7 + 264) = v89;
  *(_OWORD *)(a7 + 280) = v45;
  long long v46 = v92;
  *(_OWORD *)(a7 + 296) = v91;
  *(_OWORD *)(a7 + 312) = v46;
  long long v47 = v86;
  *(_OWORD *)(a7 + 200) = v85;
  *(_OWORD *)(a7 + 216) = v47;
  long long v48 = v88;
  *(_OWORD *)(a7 + 232) = v87;
  *(_OWORD *)(a7 + 248) = v48;
  long long v49 = v82;
  *(_OWORD *)(a7 + 136) = v81;
  *(_OWORD *)(a7 + 152) = v49;
  long long v50 = v84;
  *(_OWORD *)(a7 + 168) = v83;
  *(_OWORD *)(a7 + 184) = v50;
  long long v51 = v78;
  *(_OWORD *)(a7 + 72) = v77;
  *(_OWORD *)(a7 + 88) = v51;
  long long v52 = v80;
  *(_OWORD *)(a7 + 104) = v79;
  *(_OWORD *)(a7 + 120) = v52;
  return result;
}

uint64_t specialized LazyStack<>.placer(subviews:context:cache:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v12 = *(void *)(a1 + 280);
  unint64_t v13 = *(void *)(a1 + 288);
  char v14 = *(unsigned char *)(a1 + 296);
  long long v15 = *(_OWORD *)(a1 + 104);
  long long v16 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v32[16] = v16;
  long long v33 = *(_OWORD *)(a1 + 152);
  long long v17 = *(_OWORD *)(a1 + 72);
  long long v28 = *(_OWORD *)(a1 + 56);
  long long v29 = v17;
  long long v30 = *(_OWORD *)(a1 + 88);
  long long v31 = v15;
  if (v14) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v13, v12));
  }
  ScrollGeometry.visibleRect.getter();
  uint64_t result = CGRect.subscript.getter();
  double v21 = v20;
  if (v19 > 0.0) {
    double v22 = v19;
  }
  else {
    double v22 = 0.0;
  }
  if (v22 >= v20)
  {
    specialized LazyStack<>.log(_:)(v19, v20);
LABEL_14:
    uint64_t result = specialized _LazyStack_Cache.reset()();
    *(void *)(a6 + 320) = 0;
    *(_OWORD *)(a6 + 288) = 0u;
    *(_OWORD *)(a6 + 304) = 0u;
    *(_OWORD *)(a6 + 256) = 0u;
    *(_OWORD *)(a6 + 272) = 0u;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return result;
  }
  if (v22 > v20)
  {
    __break(1u);
    return result;
  }
  double v23 = *(double *)(a1 + 32);
  if (v23 <= 0.0 || *(double *)(a1 + 40) <= 0.0)
  {
    specialized LazyStack<>.log(_:)(v22, v20);
    goto LABEL_14;
  }
  if ((*(unsigned char *)(a2 + 24) & 1) != 0
    || *(void *)a2 != 1
    || v23 != *(double *)(a2 + 8)
    || v23 != *(double *)(a2 + 16))
  {
    specialized _LazyStack_Cache.reset()();
  }
  int v24 = *(_DWORD *)(a1 + 48);
  long long v31 = 0u;
  memset(v32, 0, 31);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(v25);
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a4;
  *(unsigned char *)(a6 + 16) = a5 & 1;
  *(_DWORD *)(a6 + 20) = HIDWORD(a5);
  *(void *)(a6 + 32) = 1;
  *(double *)(a6 + 40) = v23;
  *(double *)(a6 + 48) = v23;
  *(unsigned char *)(a6 + 24) = 1;
  *(double *)(a6 + 56) = v22;
  *(double *)(a6 + 64) = v21;
  *(_DWORD *)(a6 + 72) = v24;
  *(void *)(a6 + 80) = 0;
  *(unsigned char *)(a6 + 88) = 1;
  *(void *)(a6 + 96) = 0;
  *(unsigned char *)(a6 + 104) = 0;
  *(void *)(a6 + 112) = 0;
  *(void *)(a6 + 120) = 0;
  *(unsigned char *)(a6 + 128) = 1;
  *(void *)(a6 + 136) = v25;
  *(void *)(a6 + 144) = 0;
  uint64_t result = outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v28, a6 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview);
  *(void *)(a6 + 248) = v25;
  *(_OWORD *)(a6 + 256) = xmmword_188357300;
  *(_OWORD *)(a6 + 272) = xmmword_188357310;
  *(_OWORD *)(a6 + 288) = xmmword_188357310;
  *(unsigned char *)(a6 + 304) = 0;
  *(void *)(a6 + 312) = v26;
  *(void *)(a6 + 320) = v27;
  return result;
}

{
  unint64_t v12;
  unint64_t v13;
  char v14;
  long long v15;
  long long v16;
  long long v17;
  uint64_t result;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[32];
  long long v33;

  unint64_t v12 = *(void *)(a1 + 280);
  unint64_t v13 = *(void *)(a1 + 288);
  char v14 = *(unsigned char *)(a1 + 296);
  long long v15 = *(_OWORD *)(a1 + 104);
  long long v16 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)&v32[16] = v16;
  long long v33 = *(_OWORD *)(a1 + 152);
  long long v17 = *(_OWORD *)(a1 + 72);
  long long v28 = *(_OWORD *)(a1 + 56);
  long long v29 = v17;
  long long v30 = *(_OWORD *)(a1 + 88);
  long long v31 = v15;
  if (v14) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v13, v12));
  }
  ScrollGeometry.visibleRect.getter();
  uint64_t result = CGRect.subscript.getter();
  double v21 = v20;
  if (v19 > 0.0) {
    double v22 = v19;
  }
  else {
    double v22 = 0.0;
  }
  if (v22 >= v20)
  {
    specialized LazyStack<>.log(_:)(v19, v20);
LABEL_14:
    uint64_t result = specialized _LazyStack_Cache.reset()();
    *(void *)(a6 + 320) = 0;
    *(_OWORD *)(a6 + 288) = 0u;
    *(_OWORD *)(a6 + 304) = 0u;
    *(_OWORD *)(a6 + 256) = 0u;
    *(_OWORD *)(a6 + 272) = 0u;
    *(_OWORD *)(a6 + 224) = 0u;
    *(_OWORD *)(a6 + 240) = 0u;
    *(_OWORD *)(a6 + 192) = 0u;
    *(_OWORD *)(a6 + 208) = 0u;
    *(_OWORD *)(a6 + 160) = 0u;
    *(_OWORD *)(a6 + 176) = 0u;
    *(_OWORD *)(a6 + 128) = 0u;
    *(_OWORD *)(a6 + 144) = 0u;
    *(_OWORD *)(a6 + 96) = 0u;
    *(_OWORD *)(a6 + 112) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return result;
  }
  if (v22 > v20)
  {
    __break(1u);
    return result;
  }
  double v23 = *(double *)(a1 + 40);
  if (v23 <= 0.0 || *(double *)(a1 + 32) <= 0.0)
  {
    specialized LazyStack<>.log(_:)(v22, v20);
    goto LABEL_14;
  }
  if ((*(unsigned char *)(a2 + 24) & 1) != 0
    || *(void *)a2 != 1
    || v23 != *(double *)(a2 + 8)
    || v23 != *(double *)(a2 + 16))
  {
    specialized _LazyStack_Cache.reset()();
  }
  int v24 = *(_DWORD *)(a1 + 48);
  long long v31 = 0u;
  memset(v32, 0, 31);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  unint64_t v26 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(v25);
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a4;
  *(unsigned char *)(a6 + 16) = a5 & 1;
  *(_DWORD *)(a6 + 20) = HIDWORD(a5);
  *(void *)(a6 + 32) = 1;
  *(double *)(a6 + 40) = v23;
  *(double *)(a6 + 48) = v23;
  *(unsigned char *)(a6 + 24) = 0;
  *(double *)(a6 + 56) = v22;
  *(double *)(a6 + 64) = v21;
  *(_DWORD *)(a6 + 72) = v24;
  *(void *)(a6 + 80) = 0;
  *(unsigned char *)(a6 + 88) = 1;
  *(void *)(a6 + 96) = 0;
  *(unsigned char *)(a6 + 104) = 0;
  *(void *)(a6 + 112) = 0;
  *(void *)(a6 + 120) = 0;
  *(unsigned char *)(a6 + 128) = 1;
  *(void *)(a6 + 136) = v25;
  *(void *)(a6 + 144) = 0;
  uint64_t result = outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v28, a6 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview);
  *(void *)(a6 + 248) = v25;
  *(_OWORD *)(a6 + 256) = xmmword_188357300;
  *(_OWORD *)(a6 + 272) = xmmword_188357310;
  *(_OWORD *)(a6 + 288) = xmmword_188357310;
  *(unsigned char *)(a6 + 304) = 0;
  *(void *)(a6 + 312) = v26;
  *(void *)(a6 + 320) = v27;
  return result;
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyVStackLayout(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, void, uint64_t))specialized LazyStack<>.sizeThatFits(proposedSize:subviews:context:cache:));
}

uint64_t outlined destroy of StackPlacement<LazyVStackLayout>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(void), uint64_t a5)
{
  type metadata accessor for StackPlacement<LazyVGridLayout>?(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t specialized LazyStack<>.log(_:)(double a1, double a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v10._uint64_t countAndFlagsBits = 0x28646563616C70;
    v10._object = (void *)0xE700000000000000;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0x5D5B203E2D2029;
    v12._object = (void *)0xE700000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000188328BB0, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v10._uint64_t countAndFlagsBits = 0x28646563616C70;
    v10._object = (void *)0xE700000000000000;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0x5D5B203E2D2029;
    v12._object = (void *)0xE700000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000188328C80, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v10._object = (void *)0x800000018832F080;
    v10._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x69724748797A614CLL, 0xEF74756F79614C64, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v10._uint64_t countAndFlagsBits = 0x28646563616C70;
    v10._object = (void *)0xE700000000000000;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0x5D5B203E2D2029;
    v12._object = (void *)0xE700000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x69724748797A614CLL, 0xEF74756F79614C64, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v10._object = (void *)0x800000018832F080;
    v10._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x69724756797A614CLL, 0xEF74756F79614C64, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v10._uint64_t countAndFlagsBits = 0x28646563616C70;
    v10._object = (void *)0xE700000000000000;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0x5D5B203E2D2029;
    v12._object = (void *)0xE700000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x69724756797A614CLL, 0xEF74756F79614C64, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v10._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v10._object = (void *)0x800000018832F080;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000188328C80, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  double v23;
  double v24;
  uint64_t v25;
  unint64_t v26;

  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v10._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v10._object = (void *)0x800000018832F080;
    String.append(_:)(v10);
    double v23 = a2;
    double v24 = a1;
    v22._uint64_t countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v11._uint64_t countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    String.append(_:)(v12);
    uint64_t v14 = v25;
    unint64_t v13 = v26;
    swift_bridgeObjectRetain();
    long long v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = v14;
      uint64_t v18 = v17;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x8000000188328BB0, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      v22._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v15, v16, "%s: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v19, -1, -1);
      MEMORY[0x18C119C60](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t specialized LazyStack<>.resolveIndexAndPosition(subviews:context:cache:placer:properties:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v188 = a4;
  uint64_t v191 = a1;
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  Swift::String v11 = (char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 216);
  uint64_t v13 = *(void *)(a2 + 224);
  double v14 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v16 = Value[1];
    long long v214 = *Value;
    long long v215 = v16;
    MEMORY[0x18C114450]();
    double v14 = v17;
  }
  uint64_t v18 = *(void *)a5;
  double v20 = *(double *)(a5 + 8);
  double v19 = *(double *)(a5 + 16);
  uint64_t v21 = *(void *)(a3 + 112);
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    double v24 = COERCE_DOUBLE(EstimationCache.average.getter(*(void *)(a3 + 112), *(void *)(a3 + 120)));
    if (v25) {
      double v24 = 0.0;
    }
    double v26 = v23 + v24;
    uint64_t v22 = *(void *)(v21 + 16);
  }
  else
  {
    double v26 = 32.0;
  }
  unint64_t v190 = 2 * v18;
  double v187 = v26;
  BOOL v28 = v26 <= 0.0 || v22 == 0;
  BOOL v189 = v28;
  *(void *)&long long v214 = *(void *)a2;
  DWORD2(v214) = *(_DWORD *)(a2 + 8);
  double v29 = *(double *)(a5 + 32);
  double v192 = *(double *)(a5 + 24);
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  if ((*(unsigned char *)(a3 + 24) & 1) != 0
    || v18 != *(void *)a3
    || v20 != *(double *)(a3 + 8)
    || v19 != *(double *)(a3 + 16)
    || (*(unsigned char *)(a5 + 40) & 1) != 0)
  {
    goto LABEL_15;
  }
  uint64_t v184 = a2;
  uint64_t v178 = v18;
  uint64_t v180 = v13;
  uint64_t v181 = v12;
  double v40 = *(double *)v212;
  uint64_t v38 = *(void *)(a3 + 48);
  uint64_t v41 = *(void *)(a3 + 64);
  uint64_t v42 = *MEMORY[0x1E4FBBEA0];
  unsigned __int8 v43 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v43(v11, v42, v8);
  *(void *)&long long v214 = v41;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v40);
  double v44 = *(double *)&v214;
  long long v45 = *(void (**)(char *, uint64_t))(v9 + 8);
  v45(v11, v8);
  uint64_t v179 = a3;
  uint64_t v46 = *(void *)(a3 + 72);
  v43(v11, v42, v8);
  *(void *)&long long v214 = v46;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v40);
  double v47 = *(double *)&v214;
  v45(v11, v8);
  if (v44 > v47) {
    goto LABEL_205;
  }
  uint64_t v18 = v178;
  a3 = v179;
  a2 = v184;
  if (v44 <= v192
    && (v29 <= v47 || v192 <= v47
                   && (*(unsigned char *)(v179 + 40) & 1) == 0
                   && *(void *)(v179 + 32) == *(void *)(v179 + 56)))
  {
    return v38;
  }
  double v48 = *(double *)(v179 + 72);
  double v49 = v192 - v48;
  double v50 = v14 + v14;
  if (v192 - v48 + 0.01 > 0.0 && v49 < v50) {
    return *(void *)(v179 + 56);
  }
  double v54 = *(double *)(v179 + 64);
  double v55 = v192 - v54;
  if (v192 - v54 + 0.01 > 0.0 && v55 < v50) {
    return *(void *)(v179 + 48);
  }
  if (v55 >= 0.0)
  {
    double v56 = v192 - v48;
  }
  else
  {
    double v56 = v192 - v54;
    if (v49 < 0.0)
    {
      if (v55 > v49) {
        double v56 = v192 - v54;
      }
      else {
        double v56 = v192 - v48;
      }
    }
  }
  if (v56 >= 0.0 || v14 * 3.0 <= -v56)
  {
    if (!v189) {
      goto LABEL_173;
    }
    goto LABEL_15;
  }
  if (v189) {
    goto LABEL_15;
  }
  uint64_t v58 = *(void *)(v179 + 48);
  uint64_t v57 = *(void *)(v179 + 56);
  uint64_t v59 = v57 - v58;
  if (__OFSUB__(v57, v58)) {
    goto LABEL_227;
  }
  double v60 = ceil(v14 / v187);
  if ((~*(void *)&v60 & 0x7FF0000000000000) == 0)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  if (v60 <= -9.22337204e18)
  {
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }
  if (v60 >= 9.22337204e18)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }
  uint64_t v182 = 0;
  if (v59 <= (uint64_t)v60) {
    uint64_t v59 = (uint64_t)v60;
  }
  uint64_t v166 = v59;
  if (v55 >= 0.0) {
    uint64_t v61 = v57;
  }
  else {
    uint64_t v61 = v58;
  }
  if (v55 >= 0.0) {
    double v54 = v48;
  }
  double v164 = v54;
  double v62 = v192 + 0.01;
  int8x8_t v63 = (char **)(v188 + 136);
  double v170 = &v213;
  uint64_t v174 = &v215;
  double v175 = (char **)(v188 + 136);
  uint64_t v64 = 2;
  uint64_t v165 = v61;
  do
  {
    uint64_t v65 = v64 * v166;
    if ((unsigned __int128)(v64 * (__int128)v166) >> 64 != (v64 * v166) >> 63) {
      goto LABEL_212;
    }
    uint64_t v169 = v64;
    uint64_t v66 = v61 - v65;
    if (__OFSUB__(v61, v65))
    {
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
    v220[0] = 0;
    uint64_t v67 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v66 & ~(v66 >> 63), v61, v191, v190, v220);
    uint64_t v68 = v188;
    uint64_t v177 = *(void *)(v67 + 16);
    if (!v177)
    {
LABEL_166:
      swift_bridgeObjectRelease();
      goto LABEL_168;
    }
    uint64_t v167 = v66;
    char v69 = v220[0];
    specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v61, 0, 1, 1, v164);
    __int16 v219 = 0;
    char v218 = 0;
    uint64_t v70 = v67;
    uint64_t v71 = v177;
    if (v69)
    {
      uint64_t v72 = *(void *)(v68 + 32);
      uint64_t v73 = *(void *)(v68 + 96);
      BOOL v52 = __OFSUB__(v73, v72);
      uint64_t v74 = v73 - v72;
      if (v52) {
        goto LABEL_225;
      }
      *(void *)(v68 + 96) = v74;
      char v218 = 1;
    }
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v75 = 0;
    uint64_t v76 = 8 * v71 + 24;
    long long v77 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v183 = v70;
    while (1)
    {
      uint64_t v185 = v76;
      uint64_t v186 = v75;
      *int8x8_t v63 = *(char **)(v70 + v76);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v78 = v186;
      if (v186 == 1)
      {
        LOBYTE(v219) = 1;
        if (!*((void *)*v63 + 2)) {
          goto LABEL_119;
        }
        uint64_t v86 = *(void *)(v68 + 144);
        if (!v86) {
          goto LABEL_232;
        }
        double v176 = *v63;
        if (!*(void *)(v86 + 16)) {
          goto LABEL_206;
        }
        outlined init with copy of _LazyLayout_Subview(v86 + 32, (uint64_t)&v214);
        if ((v216 & 1) != 0 || v217 == 1)
        {
          long long v87 = v176;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v214);
          outlined init with copy of _LazyLayout_Subview(v86 + 32, (uint64_t)&v214);
          swift_bridgeObjectRelease();
          LODWORD(v173) = *(unsigned __int8 *)(v68 + 24);
          ProposedViewSize.init(_:in:by:)();
          if (!*((void *)v87 + 2)) {
            goto LABEL_209;
          }
          char v90 = v88;
          char v91 = v89;
          outlined init with copy of _LazyLayout_Subview((uint64_t)(v87 + 32), (uint64_t)v212);
          swift_bridgeObjectRelease();
          uint64_t v172 = *(void *)(v68 + 8);
          LODWORD(v171) = *(unsigned __int8 *)(v68 + 16);
          LODWORD(v176) = DWORD2(v214);
          uint64_t v92 = LazyLayoutViewCache.item(data:)((uint64_t)v174);
          uint64_t v93 = *(void *)(v92 + 32);
          swift_bridgeObjectRetain();
          uint64_t v94 = *(void *)(v92 + 40);
          swift_release();
          *(void *)&long long v207 = v93;
          *((void *)&v207 + 1) = v94;
          _ViewOutputs.layoutComputer.getter();
          swift_bridgeObjectRelease();
          LayoutProxy.init(context:layoutComputer:)();
          double v205 = *(double *)&v193;
          int v206 = DWORD2(v193);
          LOBYTE(v207) = v90 & 1;
          LOBYTE(v198) = v91 & 1;
          _ProposedSize.init(_:)();
          *(void *)&long long v198 = v207;
          BYTE8(v198) = BYTE8(v207);
          *(void *)&long long v199 = v208;
          BYTE8(v199) = BYTE8(v208);
          char v95 = v173;
          LayoutProxy.lengthThatFits(_:in:)();
          double v97 = v96;
          outlined init with copy of AccessibilityScrollableContext?((uint64_t)v212, (uint64_t)&v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          if ((void)v207)
          {
            long long v200 = v209;
            long long v201 = v210;
            v202[0] = v211[0];
            *(_OWORD *)((char *)v202 + 15) = *(_OWORD *)((char *)v211 + 15);
            long long v198 = v207;
            long long v199 = v208;
            char v98 = v95;
            uint64_t v99 = v182;
            closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v198, v172, v171, v98, (uint64_t)&v214, (double *)&v193);
            uint64_t v182 = v99;
            outlined destroy of _LazyLayout_Subview((uint64_t)&v198);
            double v100 = *(double *)&v193;
          }
          else
          {
            double v100 = 0.0;
          }
          a2 = v184;
          int8x8_t v63 = v175;
          long long v77 = (void *)MEMORY[0x1E4FBC860];
          uint64_t v71 = v177;
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v212, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          outlined destroy of _LazyLayout_Subview((uint64_t)&v214);
          uint64_t v68 = v188;
          if (v218)
          {
LABEL_122:
            double v116 = *(double *)(v68 + 112) - v97;
            *(double *)(v68 + 112) = v116;
            uint64_t v117 = *(void *)(v68 + 96);
            if (v117)
            {
              double v116 = v116 - v100;
              *(double *)(v68 + 112) = v116;
            }
            goto LABEL_139;
          }
        }
        else
        {
          uint64_t v120 = v176;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v214);
          if (!*(void *)(v86 + 16)) {
            goto LABEL_215;
          }
          uint64_t v171 = *(void *)(v68 + 8);
          int v168 = *(unsigned __int8 *)(v68 + 16);
          outlined init with copy of _LazyLayout_Subview(v86 + 32, (uint64_t)v212);
          uint64_t v121 = ProposedViewSize.init(_:in:by:)();
          uint64_t v172 = v124;
          uint64_t v173 = v121;
          if (!*((void *)v120 + 2)) {
            goto LABEL_216;
          }
          char v125 = v122;
          char v126 = v123;
          outlined init with copy of _LazyLayout_Subview((uint64_t)(v120 + 32), (uint64_t)&v207);
          uint64_t v127 = LazyLayoutViewCache.item(data:)((uint64_t)v170);
          uint64_t v128 = *(void *)(v127 + 32);
          swift_bridgeObjectRetain();
          uint64_t v129 = *(void *)(v127 + 40);
          swift_release();
          *(void *)&long long v198 = v128;
          *((void *)&v198 + 1) = v129;
          _ViewOutputs.layoutComputer.getter();
          swift_bridgeObjectRelease();
          LayoutProxy.init(context:layoutComputer:)();
          double v203 = v205;
          int v204 = v206;
          LOBYTE(v198) = v125 & 1;
          LOBYTE(v193) = v126 & 1;
          _ProposedSize.init(_:)();
          *(void *)&long long v193 = v198;
          BYTE8(v193) = BYTE8(v198);
          *(void *)&long long v194 = v199;
          BYTE8(v194) = BYTE8(v199);
          LayoutProxy.lengthThatFits(_:in:)();
          double v97 = v130;
          outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v207, (uint64_t)&v198, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          if ((void)v198)
          {
            long long v195 = v200;
            long long v196 = v201;
            v197[0] = v202[0];
            *(_OWORD *)((char *)v197 + 15) = *(_OWORD *)((char *)v202 + 15);
            long long v193 = v198;
            long long v194 = v199;
            uint64_t v131 = v182;
            closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v193, v171, v168, 1, (uint64_t)v212, &v205);
            uint64_t v182 = v131;
            outlined destroy of _LazyLayout_Subview((uint64_t)&v193);
            double v100 = v205;
          }
          else
          {
            double v100 = 0.0;
          }
          a2 = v184;
          int8x8_t v63 = v175;
          long long v77 = (void *)MEMORY[0x1E4FBC860];
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          outlined destroy of _LazyLayout_Subview((uint64_t)v212);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v68 = v188;
          uint64_t v71 = v177;
          if (v218) {
            goto LABEL_122;
          }
        }
        uint64_t v117 = *(void *)(v68 + 96);
        double v116 = *(double *)(v68 + 112);
LABEL_139:
        if (v100 + v116 <= *(double *)(v68 + 56)) {
          goto LABEL_151;
        }
        uint64_t v144 = *(void *)(v68 + 32);
        BOOL v52 = __OFSUB__(v117, v144);
        uint64_t v145 = v117 - v144;
        if (v52) {
          goto LABEL_210;
        }
        goto LABEL_148;
      }
      if (!v186)
      {
        uint64_t v79 = *(void *)(v68 + 136);
        if (*(void *)(v68 + 144)) {
          long long v80 = *(void **)(v68 + 144);
        }
        else {
          long long v80 = v77;
        }
        *(void *)(v68 + 136) = v80;
        *(void *)(v68 + 144) = v79;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        long long v82 = *(char **)(v68 + 136);
        if (isUniquelyReferenced_nonNull_native)
        {
          int64_t v83 = *((void *)v82 + 2);
          char v84 = swift_isUniquelyReferenced_nonNull_native();
          *int8x8_t v63 = v82;
          if ((v84 & 1) == 0)
          {
            long long v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 1, v82);
            *int8x8_t v63 = v82;
          }
          swift_arrayDestroy();
          if (v83)
          {
            uint64_t v85 = *((void *)v82 + 2) - v83;
            if (v85 < 0) {
              goto LABEL_234;
            }
            memmove(v82 + 32, &v82[96 * v83 + 32], 96 * v85);
            *((void *)v82 + 2) = v85;
          }
          *int8x8_t v63 = v82;
          a2 = v184;
        }
        else
        {
LABEL_157:
          if (*((void *)v82 + 3) >= 2uLL)
          {
            type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00]);
            long long v77 = (void *)swift_allocObject();
            size_t v150 = _swift_stdlib_malloc_size(v77);
            v77[2] = 0;
            v77[3] = 2 * ((uint64_t)(v150 - 32) / 96);
          }
          *int8x8_t v63 = (char *)v77;
          swift_bridgeObjectRelease();
        }
        long long v77 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_161;
      }
      char v218 = 1;
      if (!*((void *)*v63 + 2))
      {
LABEL_119:
        uint64_t v70 = v183;
        goto LABEL_162;
      }
      uint64_t v101 = *(void *)(v68 + 144);
      if (!v101) {
        goto LABEL_233;
      }
      double v176 = *v63;
      if (!*(void *)(v101 + 16)) {
        goto LABEL_207;
      }
      outlined init with copy of _LazyLayout_Subview(v101 + 32, (uint64_t)&v214);
      if ((v216 & 1) != 0 || v217 == 1)
      {
        uint64_t v102 = v176;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)&v214);
        outlined init with copy of _LazyLayout_Subview(v101 + 32, (uint64_t)&v214);
        swift_bridgeObjectRelease();
        LODWORD(v173) = *(unsigned __int8 *)(v68 + 24);
        ProposedViewSize.init(_:in:by:)();
        if (!*((void *)v102 + 2)) {
          goto LABEL_208;
        }
        char v105 = v103;
        char v106 = v104;
        outlined init with copy of _LazyLayout_Subview((uint64_t)(v102 + 32), (uint64_t)v212);
        swift_bridgeObjectRelease();
        uint64_t v172 = *(void *)(v68 + 8);
        LODWORD(v171) = *(unsigned __int8 *)(v68 + 16);
        LODWORD(v176) = DWORD2(v214);
        uint64_t v107 = LazyLayoutViewCache.item(data:)((uint64_t)v174);
        uint64_t v108 = *(void *)(v107 + 32);
        swift_bridgeObjectRetain();
        uint64_t v109 = *(void *)(v107 + 40);
        swift_release();
        *(void *)&long long v207 = v108;
        *((void *)&v207 + 1) = v109;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        double v205 = *(double *)&v193;
        int v206 = DWORD2(v193);
        LOBYTE(v207) = v105 & 1;
        LOBYTE(v198) = v106 & 1;
        _ProposedSize.init(_:)();
        *(void *)&long long v198 = v207;
        BYTE8(v198) = BYTE8(v207);
        *(void *)&long long v199 = v208;
        BYTE8(v199) = BYTE8(v208);
        char v110 = v173;
        LayoutProxy.lengthThatFits(_:in:)();
        double v112 = v111;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)v212, (uint64_t)&v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        if ((void)v207)
        {
          long long v200 = v209;
          long long v201 = v210;
          v202[0] = v211[0];
          *(_OWORD *)((char *)v202 + 15) = *(_OWORD *)((char *)v211 + 15);
          long long v198 = v207;
          long long v199 = v208;
          char v113 = v110;
          uint64_t v114 = v182;
          closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v198, v172, v171, v113, (uint64_t)&v214, (double *)&v193);
          uint64_t v182 = v114;
          outlined destroy of _LazyLayout_Subview((uint64_t)&v198);
          double v115 = *(double *)&v193;
        }
        else
        {
          double v115 = 0.0;
        }
        a2 = v184;
        int8x8_t v63 = v175;
        long long v77 = (void *)MEMORY[0x1E4FBC860];
        uint64_t v71 = v177;
        outlined destroy of AccessibilityScrollableContext?((uint64_t)v212, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        outlined destroy of _LazyLayout_Subview((uint64_t)&v214);
        uint64_t v68 = v188;
        if (v218) {
          goto LABEL_126;
        }
      }
      else
      {
        uint64_t v132 = v176;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)&v214);
        if (!*(void *)(v101 + 16)) {
          goto LABEL_214;
        }
        uint64_t v171 = *(void *)(v68 + 8);
        int v168 = *(unsigned __int8 *)(v68 + 16);
        outlined init with copy of _LazyLayout_Subview(v101 + 32, (uint64_t)v212);
        uint64_t v133 = ProposedViewSize.init(_:in:by:)();
        uint64_t v172 = v136;
        uint64_t v173 = v133;
        if (!*((void *)v132 + 2)) {
          goto LABEL_217;
        }
        char v137 = v134;
        char v138 = v135;
        outlined init with copy of _LazyLayout_Subview((uint64_t)(v132 + 32), (uint64_t)&v207);
        uint64_t v139 = LazyLayoutViewCache.item(data:)((uint64_t)v170);
        uint64_t v140 = *(void *)(v139 + 32);
        swift_bridgeObjectRetain();
        uint64_t v141 = *(void *)(v139 + 40);
        swift_release();
        *(void *)&long long v198 = v140;
        *((void *)&v198 + 1) = v141;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        double v203 = v205;
        int v204 = v206;
        LOBYTE(v198) = v137 & 1;
        LOBYTE(v193) = v138 & 1;
        _ProposedSize.init(_:)();
        *(void *)&long long v193 = v198;
        BYTE8(v193) = BYTE8(v198);
        *(void *)&long long v194 = v199;
        BYTE8(v194) = BYTE8(v199);
        LayoutProxy.lengthThatFits(_:in:)();
        double v112 = v142;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v207, (uint64_t)&v198, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        if ((void)v198)
        {
          long long v195 = v200;
          long long v196 = v201;
          v197[0] = v202[0];
          *(_OWORD *)((char *)v197 + 15) = *(_OWORD *)((char *)v202 + 15);
          long long v193 = v198;
          long long v194 = v199;
          uint64_t v143 = v182;
          closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v193, v171, v168, 1, (uint64_t)v212, &v205);
          uint64_t v182 = v143;
          outlined destroy of _LazyLayout_Subview((uint64_t)&v193);
          double v115 = v205;
        }
        else
        {
          double v115 = 0.0;
        }
        a2 = v184;
        int8x8_t v63 = v175;
        long long v77 = (void *)MEMORY[0x1E4FBC860];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        outlined destroy of _LazyLayout_Subview((uint64_t)v212);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v68 = v188;
        uint64_t v71 = v177;
        if (v218)
        {
LABEL_126:
          double v118 = *(double *)(v68 + 112) - v112;
          *(double *)(v68 + 112) = v118;
          uint64_t v119 = *(void *)(v68 + 96);
          if (v119)
          {
            double v118 = v118 - v115;
            *(double *)(v68 + 112) = v118;
          }
          goto LABEL_146;
        }
      }
      uint64_t v119 = *(void *)(v68 + 96);
      double v118 = *(double *)(v68 + 112);
LABEL_146:
      if (v115 + v118 <= *(double *)(v68 + 56))
      {
LABEL_151:
        HIBYTE(v219) = 1;
        goto LABEL_152;
      }
      uint64_t v146 = *(void *)(v68 + 32);
      BOOL v52 = __OFSUB__(v119, v146);
      uint64_t v145 = v119 - v146;
      if (v52) {
        goto LABEL_211;
      }
LABEL_148:
      if (v219 == 1 && (v145 & 0x8000000000000000) == 0) {
        *(void *)(v68 + 96) = v145;
      }
LABEL_152:
      uint64_t v147 = *(void *)(v68 + 136);
      if (*(void *)(v68 + 144)) {
        id v148 = *(void **)(v68 + 144);
      }
      else {
        id v148 = v77;
      }
      *(void *)(v68 + 136) = v148;
      *(void *)(v68 + 144) = v147;
      int v149 = swift_isUniquelyReferenced_nonNull_native();
      long long v82 = *(char **)(v68 + 136);
      if (!v149) {
        goto LABEL_157;
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v82 + 2));
LABEL_161:
      uint64_t v70 = v183;
      uint64_t v78 = v186;
LABEL_162:
      if (HIBYTE(v219) == 1) {
        break;
      }
      if (__OFADD__(v78, 1)) {
        goto LABEL_202;
      }
      uint64_t v75 = v78 + 1;
      uint64_t v76 = v185 - 8;
      if (v71 == v75)
      {
        uint64_t v66 = v167;
        LODWORD(v186) = v167 < 1;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        LOBYTE(v219) = 1;
        swift_beginAccess();
        char v218 = 1;
        specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v186, (uint64_t *)v68, &v218, 0, (unsigned char *)&v219 + 1, &v219);
        goto LABEL_166;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v66 = v167;
LABEL_168:
    if (*(double *)(v68 + 112) <= v62) {
      return *(void *)(v68 + 96);
    }
    if (v66 <= 0) {
      break;
    }
    uint64_t v64 = 2 * v169;
    uint64_t v61 = v165;
  }
  while (v169 < 8);
LABEL_173:
  *(void *)&long long v214 = v190;
  uint64_t v151 = _ViewList_Node.estimatedCount(style:)();
  if (v18 == 1) {
    goto LABEL_178;
  }
  if (!v18) {
    goto LABEL_226;
  }
  if (v151 != 0x8000000000000000 || v18 != -1)
  {
    v151 /= v18;
LABEL_178:
    uint64_t v152 = v151 - 1;
    if (!__OFSUB__(v151, 1))
    {
      double v153 = *(double *)(a3 + 64);
      double v154 = round((v192 - v153) / v187);
      if ((~*(void *)&v154 & 0x7FF0000000000000) != 0)
      {
        if (v154 > -9.22337204e18)
        {
          if (v154 < 9.22337204e18)
          {
            uint64_t v155 = v152 & ~(v152 >> 63);
            uint64_t v156 = v155 * v18;
            if ((unsigned __int128)(v155 * (__int128)v18) >> 64 == (v155 * v18) >> 63)
            {
              if (v152 >= (uint64_t)v154) {
                uint64_t v152 = (uint64_t)v154;
              }
              uint64_t v157 = v152 & ~(v152 >> 63);
              uint64_t v158 = v157 * v18;
              if ((unsigned __int128)(v157 * (__int128)v18) >> 64 == (v157 * v18) >> 63)
              {
                uint64_t v159 = *(void *)(a3 + 48);
                BOOL v52 = __OFADD__(v159, v158);
                uint64_t v160 = v159 + v158;
                if (!v52)
                {
                  double v161 = v153 + v187 * (double)v157;
                  BOOL v162 = v161 + 0.01 < 0.0 || v161 + -0.01 > v192;
                  if (!v162)
                  {
                    uint64_t v163 = v160 & ~(v160 >> 63);
                    if (v156 >= v163) {
                      return v163;
                    }
                    else {
                      return v156;
                    }
                  }
LABEL_15:
                  *(void *)&long long v214 = v190;
                  uint64_t v30 = _ViewList_Node.estimatedCount(style:)();
                  if (v18 != 1)
                  {
                    if (v18)
                    {
                      if (v30 != 0x8000000000000000 || v18 != -1)
                      {
                        v30 /= v18;
                        goto LABEL_20;
                      }
LABEL_203:
                      __break(1u);
LABEL_204:
                      __break(1u);
LABEL_205:
                      __break(1u);
LABEL_206:
                      __break(1u);
LABEL_207:
                      __break(1u);
LABEL_208:
                      __break(1u);
LABEL_209:
                      __break(1u);
LABEL_210:
                      __break(1u);
LABEL_211:
                      __break(1u);
LABEL_212:
                      __break(1u);
                      goto LABEL_213;
                    }
LABEL_201:
                    __break(1u);
LABEL_202:
                    __break(1u);
                    goto LABEL_203;
                  }
LABEL_20:
                  double v31 = *(double *)(a2 + 40);
                  double v32 = v192 / v31;
                  BOOL v162 = v31 <= 0.0;
                  double v33 = 0.0;
                  if (v162) {
                    double v32 = 0.0;
                  }
                  if (v32 >= 0.0) {
                    double v33 = v32;
                  }
                  if (v32 >= 1.0) {
                    double v33 = 1.0;
                  }
                  if (__OFSUB__(v30, 1))
                  {
                    __break(1u);
                  }
                  else
                  {
                    uint64_t v34 = (v30 - 1) & ~((v30 - 1) >> 63);
                    uint64_t v35 = v34 * v18;
                    if ((unsigned __int128)(v34 * (__int128)v18) >> 64 == (v34 * v18) >> 63)
                    {
                      double v36 = v33 * (double)v30 + 0.5;
                      if ((~*(void *)&v36 & 0x7FF0000000000000) != 0)
                      {
                        if (v36 > -9.22337204e18)
                        {
                          if (v36 < 9.22337204e18)
                          {
                            uint64_t v37 = (uint64_t)v36 * v18;
                            if ((unsigned __int128)((uint64_t)v36 * (__int128)v18) >> 64 == v37 >> 63)
                            {
                              if (v37 < 0) {
                                return v35 & (v35 >> 63);
                              }
                              if (v35 >= v37) {
                                uint64_t v38 = (uint64_t)v36 * v18;
                              }
                              else {
                                uint64_t v38 = v35;
                              }
                              char v39 = v189;
                              if (v38 < 1) {
                                char v39 = 1;
                              }
                              if ((v39 & 1) == 0)
                              {
                                EstimationCache.average.getter(*(void *)(a3 + 112), *(void *)(a3 + 120));
                                EdgeInsets.originOffset.getter();
                                if (v38 >= v18 && v51 > 0.0)
                                {
                                  BOOL v52 = __OFSUB__(v38, v18);
                                  v38 -= v18;
                                  if (v52) {
                                    goto LABEL_204;
                                  }
                                }
                              }
                              return v38;
                            }
LABEL_200:
                            __break(1u);
                            goto LABEL_201;
                          }
LABEL_199:
                          __break(1u);
                          goto LABEL_200;
                        }
LABEL_198:
                        __break(1u);
                        goto LABEL_199;
                      }
LABEL_197:
                      __break(1u);
                      goto LABEL_198;
                    }
                  }
                  __break(1u);
                  goto LABEL_197;
                }
LABEL_224:
                __break(1u);
LABEL_225:
                __break(1u);
LABEL_226:
                __break(1u);
LABEL_227:
                __break(1u);
                goto LABEL_228;
              }
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
LABEL_219:
      __break(1u);
      goto LABEL_220;
    }
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  long long *Value;
  long long v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  char v24;
  double v25;
  BOOL v27;
  double v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  double v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  BOOL v51;
  uint64_t result;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  double v61;
  char **v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  int isUniquelyReferenced_nonNull_native;
  char *v81;
  int64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  char v88;
  char v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  double v95;
  double v96;
  char v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  char *v101;
  char v102;
  char v103;
  char v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  double v110;
  double v111;
  char v112;
  uint64_t v113;
  double v114;
  double v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  char v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  double v127;
  uint64_t v128;
  char v129;
  char v130;
  uint64_t v131;
  char v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  int v144;
  size_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  BOOL v157;
  uint64_t v158;
  double v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  long long *v169;
  char **v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  uint64_t v183;
  BOOL v184;
  unint64_t v185;
  uint64_t v186;
  double v187;
  long long v188;
  long long v189;
  long long v190;
  long long v191;
  _OWORD v192[5];
  long long v193;
  long long v194;
  long long v195;
  long long v196;
  _OWORD v197[2];
  double v198;
  int v199;
  double v200;
  int v201;
  long long v202;
  long long v203;
  long long v204;
  long long v205;
  _OWORD v206[2];
  double v207;
  int v208;
  uint64_t v209;
  long long v210;
  long long v211;
  char v212;
  char v213;
  char v214;
  __int16 v215;
  char v216[17];

  uint64_t v183 = a4;
  uint64_t v186 = a1;
  uint64_t v8 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  Swift::String v11 = (char *)&v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 216);
  uint64_t v13 = *(void *)(a2 + 224);
  double v14 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v16 = Value[1];
    long long v210 = *Value;
    int v211 = v16;
    double v14 = MEMORY[0x18C114450]();
  }
  double v17 = *(void *)a5;
  double v19 = *(double *)(a5 + 8);
  uint64_t v18 = *(double *)(a5 + 16);
  double v20 = *(void *)(a3 + 112);
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    double v23 = COERCE_DOUBLE(EstimationCache.average.getter(*(void *)(a3 + 112), *(void *)(a3 + 120)));
    if (v24) {
      double v23 = 0.0;
    }
    char v25 = v22 + v23;
    uint64_t v21 = *(void *)(v20 + 16);
  }
  else
  {
    char v25 = 32.0;
  }
  uint64_t v185 = 2 * v17;
  uint64_t v182 = v25;
  unint64_t v27 = v25 <= 0.0 || v21 == 0;
  uint64_t v184 = v27;
  *(void *)&long long v210 = *(void *)a2;
  DWORD2(v210) = *(_DWORD *)(a2 + 8);
  BOOL v28 = *(double *)(a5 + 32);
  double v187 = *(double *)(a5 + 24);
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  if ((*(unsigned char *)(a3 + 24) & 1) != 0
    || v17 != *(void *)a3
    || v19 != *(double *)(a3 + 8)
    || v18 != *(double *)(a3 + 16)
    || (*(unsigned char *)(a5 + 40) & 1) != 0)
  {
    goto LABEL_15;
  }
  uint64_t v179 = a2;
  uint64_t v172 = v17;
  uint64_t v174 = v13;
  double v175 = v12;
  char v39 = v207;
  uint64_t v37 = *(void *)(a3 + 48);
  double v40 = *(void *)(a3 + 64);
  uint64_t v41 = *MEMORY[0x1E4FBBEA0];
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v42(v11, v41, v8);
  *(void *)&long long v210 = v40;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v39);
  unsigned __int8 v43 = *(double *)&v210;
  double v44 = *(void (**)(char *, uint64_t))(v9 + 8);
  v44(v11, v8);
  uint64_t v173 = a3;
  long long v45 = *(void *)(a3 + 72);
  v42(v11, v41, v8);
  *(void *)&long long v210 = v45;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v39);
  uint64_t v46 = *(double *)&v210;
  v44(v11, v8);
  if (v43 > v46) {
    goto LABEL_205;
  }
  double v17 = v172;
  a3 = v173;
  a2 = v179;
  if (v43 <= v187
    && (v28 <= v46 || v187 <= v46
                   && (*(unsigned char *)(v173 + 40) & 1) == 0
                   && *(void *)(v173 + 32) == *(void *)(v173 + 56)))
  {
    return v37;
  }
  double v47 = *(double *)(v173 + 72);
  double v48 = v187 - v47;
  double v49 = v14 + v14;
  if (v187 - v47 + 0.01 > 0.0 && v48 < v49) {
    return *(void *)(v173 + 56);
  }
  BOOL v53 = *(double *)(v173 + 64);
  double v54 = v187 - v53;
  if (v187 - v53 + 0.01 > 0.0 && v54 < v49) {
    return *(void *)(v173 + 48);
  }
  if (v54 >= 0.0)
  {
    double v55 = v187 - v47;
  }
  else
  {
    double v55 = v187 - v53;
    if (v48 < 0.0)
    {
      if (v54 > v48) {
        double v55 = v187 - v53;
      }
      else {
        double v55 = v187 - v47;
      }
    }
  }
  if (v55 >= 0.0 || v14 * 3.0 <= -v55)
  {
    if (!v184) {
      goto LABEL_173;
    }
    goto LABEL_15;
  }
  if (v184) {
    goto LABEL_15;
  }
  uint64_t v57 = *(void *)(v173 + 48);
  double v56 = *(void *)(v173 + 56);
  uint64_t v58 = v56 - v57;
  if (__OFSUB__(v56, v57)) {
    goto LABEL_227;
  }
  uint64_t v59 = ceil(v14 / v182);
  if ((~*(void *)&v59 & 0x7FF0000000000000) == 0)
  {
LABEL_228:
    __break(1u);
    goto LABEL_229;
  }
  if (v59 <= -9.22337204e18)
  {
LABEL_229:
    __break(1u);
    goto LABEL_230;
  }
  if (v59 >= 9.22337204e18)
  {
LABEL_230:
    __break(1u);
    goto LABEL_231;
  }
  double v176 = 0;
  if (v58 <= (uint64_t)v59) {
    uint64_t v58 = (uint64_t)v59;
  }
  double v161 = v58;
  if (v54 >= 0.0) {
    double v60 = v56;
  }
  else {
    double v60 = v57;
  }
  if (v54 >= 0.0) {
    BOOL v53 = v47;
  }
  uint64_t v159 = v53;
  uint64_t v61 = v187 + 0.01;
  double v62 = (char **)(v183 + 136);
  uint64_t v165 = &v209;
  uint64_t v169 = &v211;
  double v170 = (char **)(v183 + 136);
  int8x8_t v63 = 2;
  uint64_t v160 = v60;
  do
  {
    uint64_t v64 = v63 * v161;
    if ((unsigned __int128)(v63 * (__int128)v161) >> 64 != (v63 * v161) >> 63) {
      goto LABEL_212;
    }
    double v164 = v63;
    uint64_t v65 = v60 - v64;
    if (__OFSUB__(v60, v64))
    {
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
      goto LABEL_218;
    }
    v216[0] = 0;
    uint64_t v66 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v65 & ~(v65 >> 63), v60, v186, v185, v216);
    uint64_t v67 = v183;
    uint64_t v171 = *(void *)(v66 + 16);
    if (!v171)
    {
LABEL_166:
      swift_bridgeObjectRelease();
      goto LABEL_168;
    }
    BOOL v162 = v65;
    uint64_t v68 = v216[0];
    specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v60, 0, 1, 1, v159);
    long long v215 = 0;
    long long v214 = 0;
    char v69 = v66;
    uint64_t v70 = v171;
    if (v68)
    {
      uint64_t v71 = *(void *)(v67 + 32);
      uint64_t v72 = *(void *)(v67 + 96);
      double v51 = __OFSUB__(v72, v71);
      uint64_t v73 = v72 - v71;
      if (v51) {
        goto LABEL_225;
      }
      *(void *)(v67 + 96) = v73;
      long long v214 = 1;
    }
    swift_bridgeObjectRetain();
    swift_beginAccess();
    swift_beginAccess();
    swift_beginAccess();
    uint64_t v74 = 0;
    uint64_t v75 = 8 * v70 + 24;
    uint64_t v76 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v178 = v69;
    while (1)
    {
      uint64_t v180 = v75;
      uint64_t v181 = v74;
      *double v62 = *(char **)(v69 + v75);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      long long v77 = v181;
      if (v181 == 1)
      {
        LOBYTE(v215) = 1;
        uint64_t v177 = *v62;
        if (!*((void *)v177 + 2)) {
          goto LABEL_119;
        }
        uint64_t v85 = *(void *)(v67 + 144);
        if (!v85) {
          goto LABEL_232;
        }
        uint64_t v86 = v177;
        if (!*(void *)(v85 + 16)) {
          goto LABEL_206;
        }
        outlined init with copy of _LazyLayout_Subview(v85 + 32, (uint64_t)&v210);
        if ((v212 & 1) != 0 || v213 == 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v210);
          outlined init with copy of _LazyLayout_Subview(v85 + 32, (uint64_t)&v210);
          swift_bridgeObjectRelease();
          LODWORD(v168) = *(unsigned __int8 *)(v67 + 24);
          ProposedViewSize.init(_:in:by:)();
          if (!*((void *)v86 + 2)) {
            goto LABEL_209;
          }
          char v89 = v87;
          char v90 = v88;
          outlined init with copy of _LazyLayout_Subview((uint64_t)(v86 + 32), (uint64_t)&v207);
          swift_bridgeObjectRelease();
          uint64_t v167 = *(void *)(v67 + 8);
          LODWORD(v166) = *(unsigned __int8 *)(v67 + 16);
          LODWORD(v177) = DWORD2(v210);
          char v91 = LazyLayoutViewCache.item(data:)((uint64_t)v169);
          uint64_t v92 = *(void *)(v91 + 32);
          swift_bridgeObjectRetain();
          uint64_t v93 = *(void *)(v91 + 40);
          swift_release();
          *(void *)&uint64_t v202 = v92;
          *((void *)&v202 + 1) = v93;
          _ViewOutputs.layoutComputer.getter();
          swift_bridgeObjectRelease();
          LayoutProxy.init(context:layoutComputer:)();
          long long v200 = *(double *)&v188;
          long long v201 = DWORD2(v188);
          LOBYTE(v202) = v89 & 1;
          LOBYTE(v193) = v90 & 1;
          _ProposedSize.init(_:)();
          *(void *)&long long v193 = v202;
          BYTE8(v193) = BYTE8(v202);
          *(void *)&long long v194 = v203;
          BYTE8(v194) = BYTE8(v203);
          uint64_t v94 = v168;
          LayoutProxy.lengthThatFits(_:in:)();
          double v96 = v95;
          outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v207, (uint64_t)&v202, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          if ((void)v202)
          {
            long long v195 = v204;
            long long v196 = v205;
            v197[0] = v206[0];
            *(_OWORD *)((char *)v197 + 15) = *(_OWORD *)((char *)v206 + 15);
            long long v193 = v202;
            long long v194 = v203;
            double v97 = v94;
            char v98 = v176;
            closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v193, v167, v166, v97, (uint64_t)&v210, (double *)&v188);
            double v176 = v98;
            outlined destroy of _LazyLayout_Subview((uint64_t)&v193);
            uint64_t v99 = *(double *)&v188;
          }
          else
          {
            uint64_t v99 = 0.0;
          }
          a2 = v179;
          double v62 = v170;
          uint64_t v70 = v171;
          uint64_t v76 = (void *)MEMORY[0x1E4FBC860];
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          outlined destroy of _LazyLayout_Subview((uint64_t)&v210);
          uint64_t v67 = v183;
          if (v214)
          {
LABEL_122:
            double v115 = *(double *)(v67 + 112) - v96;
            *(double *)(v67 + 112) = v115;
            double v116 = *(void *)(v67 + 96);
            if (v116)
            {
              double v115 = v115 - v99;
              *(double *)(v67 + 112) = v115;
            }
            goto LABEL_139;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v210);
          if (!*(void *)(v85 + 16)) {
            goto LABEL_215;
          }
          uint64_t v166 = *(void *)(v67 + 8);
          uint64_t v163 = *(unsigned __int8 *)(v67 + 16);
          outlined init with copy of _LazyLayout_Subview(v85 + 32, (uint64_t)&v207);
          ProposedViewSize.init(_:in:by:)();
          int v168 = v121;
          if (!*((void *)v86 + 2)) {
            goto LABEL_216;
          }
          char v122 = v119;
          char v123 = v120;
          outlined init with copy of _LazyLayout_Subview((uint64_t)(v86 + 32), (uint64_t)&v202);
          LODWORD(v167) = v208;
          uint64_t v124 = LazyLayoutViewCache.item(data:)((uint64_t)v165);
          char v125 = *(void *)(v124 + 32);
          swift_bridgeObjectRetain();
          char v126 = *(void *)(v124 + 40);
          swift_release();
          *(void *)&long long v193 = v125;
          *((void *)&v193 + 1) = v126;
          _ViewOutputs.layoutComputer.getter();
          swift_bridgeObjectRelease();
          LayoutProxy.init(context:layoutComputer:)();
          long long v198 = v200;
          long long v199 = v201;
          LOBYTE(v193) = v122 & 1;
          LOBYTE(v188) = v123 & 1;
          _ProposedSize.init(_:)();
          *(void *)&uint64_t v188 = v193;
          BYTE8(v188) = BYTE8(v193);
          *(void *)&BOOL v189 = v194;
          BYTE8(v189) = BYTE8(v194);
          LayoutProxy.lengthThatFits(_:in:)();
          double v96 = v127;
          outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v202, (uint64_t)&v193, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          if ((void)v193)
          {
            unint64_t v190 = v195;
            uint64_t v191 = v196;
            v192[0] = v197[0];
            *(_OWORD *)((char *)v192 + 15) = *(_OWORD *)((char *)v197 + 15);
            uint64_t v188 = v193;
            BOOL v189 = v194;
            uint64_t v128 = v176;
            closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v188, v166, v163, 0, (uint64_t)&v207, &v200);
            double v176 = v128;
            outlined destroy of _LazyLayout_Subview((uint64_t)&v188);
            uint64_t v99 = v200;
          }
          else
          {
            uint64_t v99 = 0.0;
          }
          a2 = v179;
          double v62 = v170;
          uint64_t v76 = (void *)MEMORY[0x1E4FBC860];
          outlined destroy of AccessibilityScrollableContext?((uint64_t)&v202, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v67 = v183;
          uint64_t v70 = v171;
          if (v214) {
            goto LABEL_122;
          }
        }
        double v116 = *(void *)(v67 + 96);
        double v115 = *(double *)(v67 + 112);
LABEL_139:
        if (v99 + v115 <= *(double *)(v67 + 56)) {
          goto LABEL_151;
        }
        uint64_t v139 = *(void *)(v67 + 32);
        double v51 = __OFSUB__(v116, v139);
        uint64_t v140 = v116 - v139;
        if (v51) {
          goto LABEL_210;
        }
        goto LABEL_148;
      }
      if (!v181)
      {
        uint64_t v78 = *(void *)(v67 + 136);
        if (*(void *)(v67 + 144)) {
          uint64_t v79 = *(void **)(v67 + 144);
        }
        else {
          uint64_t v79 = v76;
        }
        *(void *)(v67 + 136) = v79;
        *(void *)(v67 + 144) = v78;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        long long v81 = *(char **)(v67 + 136);
        if (isUniquelyReferenced_nonNull_native)
        {
          long long v82 = *((void *)v81 + 2);
          int64_t v83 = swift_isUniquelyReferenced_nonNull_native();
          *double v62 = v81;
          if ((v83 & 1) == 0)
          {
            long long v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 1, v81);
            *double v62 = v81;
          }
          swift_arrayDestroy();
          if (v82)
          {
            char v84 = *((void *)v81 + 2) - v82;
            if (v84 < 0) {
              goto LABEL_234;
            }
            memmove(v81 + 32, &v81[96 * v82 + 32], 96 * v84);
            *((void *)v81 + 2) = v84;
          }
          *double v62 = v81;
          a2 = v179;
        }
        else
        {
LABEL_157:
          if (*((void *)v81 + 3) >= 2uLL)
          {
            type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00]);
            uint64_t v76 = (void *)swift_allocObject();
            uint64_t v145 = _swift_stdlib_malloc_size(v76);
            v76[2] = 0;
            v76[3] = 2 * ((uint64_t)(v145 - 32) / 96);
          }
          *double v62 = (char *)v76;
          swift_bridgeObjectRelease();
        }
        uint64_t v76 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_161;
      }
      long long v214 = 1;
      uint64_t v177 = *v62;
      if (!*((void *)v177 + 2))
      {
LABEL_119:
        char v69 = v178;
        goto LABEL_162;
      }
      double v100 = *(void *)(v67 + 144);
      if (!v100) {
        goto LABEL_233;
      }
      uint64_t v101 = v177;
      if (!*(void *)(v100 + 16)) {
        goto LABEL_207;
      }
      outlined init with copy of _LazyLayout_Subview(v100 + 32, (uint64_t)&v210);
      if ((v212 & 1) != 0 || v213 == 1)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)&v210);
        outlined init with copy of _LazyLayout_Subview(v100 + 32, (uint64_t)&v210);
        swift_bridgeObjectRelease();
        LODWORD(v168) = *(unsigned __int8 *)(v67 + 24);
        ProposedViewSize.init(_:in:by:)();
        if (!*((void *)v101 + 2)) {
          goto LABEL_208;
        }
        char v104 = v102;
        char v105 = v103;
        outlined init with copy of _LazyLayout_Subview((uint64_t)(v101 + 32), (uint64_t)&v207);
        swift_bridgeObjectRelease();
        uint64_t v167 = *(void *)(v67 + 8);
        LODWORD(v166) = *(unsigned __int8 *)(v67 + 16);
        LODWORD(v177) = DWORD2(v210);
        char v106 = LazyLayoutViewCache.item(data:)((uint64_t)v169);
        uint64_t v107 = *(void *)(v106 + 32);
        swift_bridgeObjectRetain();
        uint64_t v108 = *(void *)(v106 + 40);
        swift_release();
        *(void *)&uint64_t v202 = v107;
        *((void *)&v202 + 1) = v108;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        long long v200 = *(double *)&v188;
        long long v201 = DWORD2(v188);
        LOBYTE(v202) = v104 & 1;
        LOBYTE(v193) = v105 & 1;
        _ProposedSize.init(_:)();
        *(void *)&long long v193 = v202;
        BYTE8(v193) = BYTE8(v202);
        *(void *)&long long v194 = v203;
        BYTE8(v194) = BYTE8(v203);
        uint64_t v109 = v168;
        LayoutProxy.lengthThatFits(_:in:)();
        double v111 = v110;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v207, (uint64_t)&v202, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        if ((void)v202)
        {
          long long v195 = v204;
          long long v196 = v205;
          v197[0] = v206[0];
          *(_OWORD *)((char *)v197 + 15) = *(_OWORD *)((char *)v206 + 15);
          long long v193 = v202;
          long long v194 = v203;
          double v112 = v109;
          char v113 = v176;
          closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v193, v167, v166, v112, (uint64_t)&v210, (double *)&v188);
          double v176 = v113;
          outlined destroy of _LazyLayout_Subview((uint64_t)&v193);
          uint64_t v114 = *(double *)&v188;
        }
        else
        {
          uint64_t v114 = 0.0;
        }
        a2 = v179;
        double v62 = v170;
        uint64_t v70 = v171;
        uint64_t v76 = (void *)MEMORY[0x1E4FBC860];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        outlined destroy of _LazyLayout_Subview((uint64_t)&v210);
        uint64_t v67 = v183;
        if (v214) {
          goto LABEL_126;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)&v210);
        if (!*(void *)(v100 + 16)) {
          goto LABEL_214;
        }
        uint64_t v166 = *(void *)(v67 + 8);
        uint64_t v163 = *(unsigned __int8 *)(v67 + 16);
        outlined init with copy of _LazyLayout_Subview(v100 + 32, (uint64_t)&v207);
        ProposedViewSize.init(_:in:by:)();
        int v168 = v131;
        if (!*((void *)v101 + 2)) {
          goto LABEL_217;
        }
        uint64_t v132 = v129;
        uint64_t v133 = v130;
        outlined init with copy of _LazyLayout_Subview((uint64_t)(v101 + 32), (uint64_t)&v202);
        LODWORD(v167) = v208;
        char v134 = LazyLayoutViewCache.item(data:)((uint64_t)v165);
        char v135 = *(void *)(v134 + 32);
        swift_bridgeObjectRetain();
        uint64_t v136 = *(void *)(v134 + 40);
        swift_release();
        *(void *)&long long v193 = v135;
        *((void *)&v193 + 1) = v136;
        _ViewOutputs.layoutComputer.getter();
        swift_bridgeObjectRelease();
        LayoutProxy.init(context:layoutComputer:)();
        long long v198 = v200;
        long long v199 = v201;
        LOBYTE(v193) = v132 & 1;
        LOBYTE(v188) = v133 & 1;
        _ProposedSize.init(_:)();
        *(void *)&uint64_t v188 = v193;
        BYTE8(v188) = BYTE8(v193);
        *(void *)&BOOL v189 = v194;
        BYTE8(v189) = BYTE8(v194);
        LayoutProxy.lengthThatFits(_:in:)();
        double v111 = v137;
        outlined init with copy of AccessibilityScrollableContext?((uint64_t)&v202, (uint64_t)&v193, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        if ((void)v193)
        {
          unint64_t v190 = v195;
          uint64_t v191 = v196;
          v192[0] = v197[0];
          *(_OWORD *)((char *)v192 + 15) = *(_OWORD *)((char *)v197 + 15);
          uint64_t v188 = v193;
          BOOL v189 = v194;
          char v138 = v176;
          closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v188, v166, v163, 0, (uint64_t)&v207, &v200);
          double v176 = v138;
          outlined destroy of _LazyLayout_Subview((uint64_t)&v188);
          uint64_t v114 = v200;
        }
        else
        {
          uint64_t v114 = 0.0;
        }
        a2 = v179;
        double v62 = v170;
        uint64_t v76 = (void *)MEMORY[0x1E4FBC860];
        outlined destroy of AccessibilityScrollableContext?((uint64_t)&v202, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
        outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v67 = v183;
        uint64_t v70 = v171;
        if (v214)
        {
LABEL_126:
          uint64_t v117 = *(double *)(v67 + 112) - v111;
          *(double *)(v67 + 112) = v117;
          double v118 = *(void *)(v67 + 96);
          if (v118)
          {
            uint64_t v117 = v117 - v114;
            *(double *)(v67 + 112) = v117;
          }
          goto LABEL_146;
        }
      }
      double v118 = *(void *)(v67 + 96);
      uint64_t v117 = *(double *)(v67 + 112);
LABEL_146:
      if (v114 + v117 <= *(double *)(v67 + 56))
      {
LABEL_151:
        HIBYTE(v215) = 1;
        goto LABEL_152;
      }
      uint64_t v141 = *(void *)(v67 + 32);
      double v51 = __OFSUB__(v118, v141);
      uint64_t v140 = v118 - v141;
      if (v51) {
        goto LABEL_211;
      }
LABEL_148:
      if (v215 == 1 && (v140 & 0x8000000000000000) == 0) {
        *(void *)(v67 + 96) = v140;
      }
LABEL_152:
      double v142 = *(void *)(v67 + 136);
      if (*(void *)(v67 + 144)) {
        uint64_t v143 = *(void **)(v67 + 144);
      }
      else {
        uint64_t v143 = v76;
      }
      *(void *)(v67 + 136) = v143;
      *(void *)(v67 + 144) = v142;
      uint64_t v144 = swift_isUniquelyReferenced_nonNull_native();
      long long v81 = *(char **)(v67 + 136);
      if (!v144) {
        goto LABEL_157;
      }
      specialized Array.replaceSubrange<A>(_:with:)(0, *((void *)v81 + 2));
LABEL_161:
      char v69 = v178;
      long long v77 = v181;
LABEL_162:
      if (HIBYTE(v215) == 1) {
        break;
      }
      if (__OFADD__(v77, 1)) {
        goto LABEL_202;
      }
      uint64_t v74 = v77 + 1;
      uint64_t v75 = v180 - 8;
      if (v70 == v74)
      {
        uint64_t v65 = v162;
        LODWORD(v181) = v162 < 1;
        swift_bridgeObjectRelease();
        swift_beginAccess();
        LOBYTE(v215) = 1;
        swift_beginAccess();
        long long v214 = 1;
        specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v181, (uint64_t *)v67, &v214, 0, (unsigned char *)&v215 + 1, &v215);
        goto LABEL_166;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v65 = v162;
LABEL_168:
    if (*(double *)(v67 + 112) <= v61) {
      return *(void *)(v67 + 96);
    }
    if (v65 <= 0) {
      break;
    }
    int8x8_t v63 = 2 * v164;
    double v60 = v160;
  }
  while (v164 < 8);
LABEL_173:
  *(void *)&long long v210 = v185;
  uint64_t v146 = _ViewList_Node.estimatedCount(style:)();
  if (v17 == 1) {
    goto LABEL_178;
  }
  if (!v17) {
    goto LABEL_226;
  }
  if (v146 != 0x8000000000000000 || v17 != -1)
  {
    v146 /= v17;
LABEL_178:
    uint64_t v147 = v146 - 1;
    if (!__OFSUB__(v146, 1))
    {
      id v148 = *(double *)(a3 + 64);
      int v149 = round((v187 - v148) / v182);
      if ((~*(void *)&v149 & 0x7FF0000000000000) != 0)
      {
        if (v149 > -9.22337204e18)
        {
          if (v149 < 9.22337204e18)
          {
            size_t v150 = v147 & ~(v147 >> 63);
            uint64_t v151 = v150 * v17;
            if ((unsigned __int128)(v150 * (__int128)v17) >> 64 == (v150 * v17) >> 63)
            {
              if (v147 >= (uint64_t)v149) {
                uint64_t v147 = (uint64_t)v149;
              }
              uint64_t v152 = v147 & ~(v147 >> 63);
              double v153 = v152 * v17;
              if ((unsigned __int128)(v152 * (__int128)v17) >> 64 == (v152 * v17) >> 63)
              {
                double v154 = *(void *)(a3 + 48);
                double v51 = __OFADD__(v154, v153);
                uint64_t v155 = v154 + v153;
                if (!v51)
                {
                  uint64_t v156 = v148 + v182 * (double)v152;
                  uint64_t v157 = v156 + 0.01 < 0.0 || v156 + -0.01 > v187;
                  if (!v157)
                  {
                    uint64_t v158 = v155 & ~(v155 >> 63);
                    if (v151 >= v158) {
                      return v158;
                    }
                    else {
                      return v151;
                    }
                  }
LABEL_15:
                  *(void *)&long long v210 = v185;
                  double v29 = _ViewList_Node.estimatedCount(style:)();
                  if (v17 != 1)
                  {
                    if (v17)
                    {
                      if (v29 != 0x8000000000000000 || v17 != -1)
                      {
                        v29 /= v17;
                        goto LABEL_20;
                      }
LABEL_203:
                      __break(1u);
LABEL_204:
                      __break(1u);
LABEL_205:
                      __break(1u);
LABEL_206:
                      __break(1u);
LABEL_207:
                      __break(1u);
LABEL_208:
                      __break(1u);
LABEL_209:
                      __break(1u);
LABEL_210:
                      __break(1u);
LABEL_211:
                      __break(1u);
LABEL_212:
                      __break(1u);
                      goto LABEL_213;
                    }
LABEL_201:
                    __break(1u);
LABEL_202:
                    __break(1u);
                    goto LABEL_203;
                  }
LABEL_20:
                  uint64_t v30 = *(double *)(a2 + 32);
                  double v31 = v187 / v30;
                  uint64_t v157 = v30 <= 0.0;
                  double v32 = 0.0;
                  if (v157) {
                    double v31 = 0.0;
                  }
                  if (v31 >= 0.0) {
                    double v32 = v31;
                  }
                  if (v31 >= 1.0) {
                    double v32 = 1.0;
                  }
                  if (__OFSUB__(v29, 1))
                  {
                    __break(1u);
                  }
                  else
                  {
                    double v33 = (v29 - 1) & ~((v29 - 1) >> 63);
                    uint64_t v34 = v33 * v17;
                    if ((unsigned __int128)(v33 * (__int128)v17) >> 64 == (v33 * v17) >> 63)
                    {
                      uint64_t v35 = v32 * (double)v29 + 0.5;
                      if ((~*(void *)&v35 & 0x7FF0000000000000) != 0)
                      {
                        if (v35 > -9.22337204e18)
                        {
                          if (v35 < 9.22337204e18)
                          {
                            double v36 = (uint64_t)v35 * v17;
                            if ((unsigned __int128)((uint64_t)v35 * (__int128)v17) >> 64 == v36 >> 63)
                            {
                              if (v36 < 0) {
                                return v34 & (v34 >> 63);
                              }
                              if (v34 >= v36) {
                                uint64_t v37 = (uint64_t)v35 * v17;
                              }
                              else {
                                uint64_t v37 = v34;
                              }
                              uint64_t v38 = v184;
                              if (v37 < 1) {
                                uint64_t v38 = 1;
                              }
                              if ((v38 & 1) == 0)
                              {
                                EstimationCache.average.getter(*(void *)(a3 + 112), *(void *)(a3 + 120));
                                EdgeInsets.originOffset.getter();
                                if (v37 >= v17 && v50 > 0.0)
                                {
                                  double v51 = __OFSUB__(v37, v17);
                                  v37 -= v17;
                                  if (v51) {
                                    goto LABEL_204;
                                  }
                                }
                              }
                              return v37;
                            }
LABEL_200:
                            __break(1u);
                            goto LABEL_201;
                          }
LABEL_199:
                          __break(1u);
                          goto LABEL_200;
                        }
LABEL_198:
                        __break(1u);
                        goto LABEL_199;
                      }
LABEL_197:
                      __break(1u);
                      goto LABEL_198;
                    }
                  }
                  __break(1u);
                  goto LABEL_197;
                }
LABEL_224:
                __break(1u);
LABEL_225:
                __break(1u);
LABEL_226:
                __break(1u);
LABEL_227:
                __break(1u);
                goto LABEL_228;
              }
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
LABEL_222:
            __break(1u);
            goto LABEL_223;
          }
LABEL_221:
          __break(1u);
          goto LABEL_222;
        }
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }
LABEL_219:
      __break(1u);
      goto LABEL_220;
    }
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
LABEL_231:
  __break(1u);
LABEL_232:
  __break(1u);
LABEL_233:
  __break(1u);
LABEL_234:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  long long *Value;
  long long v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  char v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *);
  double v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  double v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  double v62;
  double v63;
  BOOL v64;
  uint64_t result;
  double v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;
  char v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  double v116;
  uint64_t v117;
  double v118;
  double v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  double v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  double v137;
  double v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  int isUniquelyReferenced_nonNull_native;
  char *v144;
  int64_t v145;
  uint64_t v146;
  void *v147;
  int v148;
  char v149;
  uint64_t v150;
  void *v151;
  size_t v152;
  uint64_t v153;
  uint64_t v154;
  double v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  BOOL v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  long long *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  double v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  long long v192;
  long long v193;
  long long v194;
  long long v195;
  _OWORD v196[2];
  long long v197;
  long long v198;
  long long v199;
  long long v200;
  _OWORD v201[2];
  double v202;
  int v203;
  double v204;
  int v205;
  void v206[18];
  long long v207;
  long long v208;
  char v209;
  char v210;
  char v211;
  __int16 v212;
  char v213[17];

  unint64_t v190 = a1;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v183 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  Swift::String v11 = (char *)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 216);
  uint64_t v13 = *(void *)(a2 + 224);
  double v14 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v16 = Value[1];
    long long v207 = *Value;
    long long v208 = v16;
    double v14 = MEMORY[0x18C114450]();
  }
  uint64_t v182 = a4;
  uint64_t v191 = *(void *)a5;
  double v17 = *(double *)(a5 + 8);
  uint64_t v18 = *(void *)(a5 + 16);
  double v19 = *(void *)(a3 + 104);
  double v20 = *(void *)(v19 + 16);
  uint64_t v185 = v13;
  uint64_t v186 = v12;
  uint64_t v184 = v9;
  if (v20)
  {
    uint64_t v21 = a3;
    uint64_t v22 = *(void *)(a3 + 112);
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    double v24 = COERCE_DOUBLE(EstimationCache.average.getter(v19, v22));
    if (v25) {
      double v24 = 0.0;
    }
    double v26 = v23 + v24;
  }
  else
  {
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    double v26 = 32.0;
    uint64_t v21 = a3;
  }
  unint64_t v27 = a5;
  BOOL v28 = v191;
  BOOL v189 = 2 * v191;
  uint64_t v30 = v26 > 0.0 && *(void *)(v19 + 16) != 0;
  uint64_t v188 = v30;
  *(void *)&long long v207 = *(void *)a2;
  double v31 = a2;
  DWORD2(v207) = *(_DWORD *)(a2 + 8);
  double v33 = *(double *)(v27 + 24);
  double v32 = *(double *)(v27 + 32);
  uint64_t v34 = v27;
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  uint64_t v35 = *(void *)(v21 + 16);
  double v187 = v21;
  if (!v35 || v28 != *(void *)v21)
  {
    uint64_t v38 = v34;
    outlined retain of PlacementProperties<LazyHGridLayout>(v34);
    goto LABEL_25;
  }
  uint64_t v181 = v26;
  double v36 = *(double *)v206;
  uint64_t v37 = *(double *)(v21 + 8);
  uint64_t v38 = v34;
  outlined retain of PlacementProperties<LazyHGridLayout>(v34);
  if (v17 != v37)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    double v40 = v31;
    goto LABEL_26;
  }
  outlined retain of PlacementProperties<LazyHGridLayout>(v34);
  swift_bridgeObjectRetain();
  char v39 = specialized static Array<A>.== infix(_:_:)(v18, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of PlacementProperties<LazyHGridLayout>(v34);
  double v40 = v31;
  if (v39 & 1) == 0 || (*(unsigned char *)(v34 + 40)) {
    goto LABEL_26;
  }
  uint64_t v179 = v34;
  uint64_t v177 = v31;
  uint64_t v21 = v187;
  uint64_t v41 = *(void *)(v187 + 40);
  uint64_t v42 = *(void *)(v187 + 56);
  LODWORD(v180) = *MEMORY[0x1E4FBBEA0];
  unsigned __int8 v43 = v183;
  double v44 = v184;
  long long v45 = *(void (**)(char *))(v183 + 104);
  v45(v11);
  uint64_t v178 = v42;
  *(void *)&long long v207 = v42;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v36);
  uint64_t v46 = *(double *)&v207;
  double v47 = *(void (**)(char *, uint64_t))(v43 + 8);
  v47(v11, v44);
  double v48 = *(void *)(v21 + 64);
  ((void (*)(char *, void, uint64_t))v45)(v11, v180, v44);
  *(void *)&long long v207 = v48;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v36);
  double v49 = *(double *)&v207;
  v47(v11, v44);
  if (v46 > v49) {
    goto LABEL_198;
  }
  double v50 = v187;
  uint64_t v38 = v179;
  if (v46 <= v33
    && (v32 <= v49 || v33 <= v49 && (*(unsigned char *)(v187 + 32) & 1) == 0 && *(void *)(v187 + 24) == *(void *)(v187 + 48)))
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v179);
    return v41;
  }
  double v51 = *(double *)(v187 + 64);
  BOOL v52 = v33 - v51;
  BOOL v53 = v14 + v14;
  if (v33 - v51 + 0.01 > 0.0 && v52 < v53)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v179);
    return *(void *)(v50 + 48);
  }
  uint64_t v66 = *(double *)(v187 + 56);
  uint64_t v67 = v33 - v66;
  if (v33 - v66 + 0.01 > 0.0 && v67 < v53)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v179);
    return *(void *)(v50 + 40);
  }
  if (v67 >= 0.0)
  {
    uint64_t v68 = v33 - v51;
    double v40 = v177;
  }
  else
  {
    uint64_t v68 = v33 - v66;
    double v40 = v177;
    if (v52 < 0.0)
    {
      if (v67 > v52) {
        uint64_t v68 = v33 - v66;
      }
      else {
        uint64_t v68 = v33 - v51;
      }
    }
  }
  if (v68 >= 0.0 || v14 * 3.0 <= -v68)
  {
    if (v188)
    {
LABEL_166:
      *(void *)&long long v207 = v189;
      double v153 = _ViewList_Node.estimatedCount(style:)();
      if (v191 != 1)
      {
        if (!v191)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        if (v153 == 0x8000000000000000 && v191 == -1) {
          goto LABEL_220;
        }
        v153 /= v191;
      }
      double v154 = v153 - 1;
      if (__OFSUB__(v153, 1)) {
        goto LABEL_207;
      }
      uint64_t v155 = *(double *)(v187 + 56);
      uint64_t v156 = round((v33 - v155) / v181);
      if ((~*(void *)&v156 & 0x7FF0000000000000) == 0)
      {
LABEL_208:
        __break(1u);
        goto LABEL_209;
      }
      if (v156 <= -9.22337204e18)
      {
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
      if (v156 >= 9.22337204e18)
      {
LABEL_210:
        __break(1u);
        goto LABEL_211;
      }
      uint64_t v157 = v154 & ~(v154 >> 63);
      uint64_t v158 = v157 * v191;
      if ((unsigned __int128)(v157 * (__int128)v191) >> 64 != (v157 * v191) >> 63)
      {
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      if (v154 >= (uint64_t)v156) {
        double v154 = (uint64_t)v156;
      }
      uint64_t v159 = v154 & ~(v154 >> 63);
      uint64_t v160 = v159 * v191;
      if ((unsigned __int128)(v159 * (__int128)v191) >> 64 != (v159 * v191) >> 63) {
        goto LABEL_212;
      }
      double v161 = *(void *)(v187 + 40);
      uint64_t v64 = __OFADD__(v161, v160);
      BOOL v162 = v161 + v160;
      if (v64)
      {
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }
      uint64_t v163 = v155 + v181 * (double)v159;
      double v164 = v163 + 0.01 < 0.0 || v163 + -0.01 > v33;
      if (!v164)
      {
        uint64_t v165 = v162 & ~(v162 >> 63);
        if (v158 >= v165) {
          uint64_t v41 = v165;
        }
        else {
          uint64_t v41 = v158;
        }
        goto LABEL_52;
      }
    }
LABEL_26:
    *(void *)&long long v207 = v189;
    double v54 = _ViewList_Node.estimatedCount(style:)();
    double v55 = v191;
    if (v191 == 1) {
      goto LABEL_31;
    }
    if (v191)
    {
      if (v54 != 0x8000000000000000 || v191 != -1)
      {
        v54 /= v191;
LABEL_31:
        double v56 = *(double *)(v40 + 32);
        uint64_t v57 = v33 / v56;
        double v164 = v56 <= 0.0;
        uint64_t v58 = 0.0;
        if (v164) {
          uint64_t v57 = 0.0;
        }
        if (v57 >= 0.0) {
          uint64_t v58 = v57;
        }
        if (v57 >= 1.0) {
          uint64_t v58 = 1.0;
        }
        if (__OFSUB__(v54, 1))
        {
          __break(1u);
        }
        else
        {
          uint64_t v59 = (v54 - 1) & ~((v54 - 1) >> 63);
          uint64_t v41 = v59 * v191;
          if ((unsigned __int128)(v59 * (__int128)v191) >> 64 == (v59 * v191) >> 63)
          {
            double v60 = v58 * (double)v54 + 0.5;
            if ((~*(void *)&v60 & 0x7FF0000000000000) != 0)
            {
              if (v60 > -9.22337204e18)
              {
                if (v60 < 9.22337204e18)
                {
                  uint64_t v61 = (uint64_t)v60 * v191;
                  if ((unsigned __int128)((uint64_t)v60 * (__int128)v191) >> 64 == v61 >> 63)
                  {
                    if (v61 < 0)
                    {
                      if ((v41 & 0x8000000000000000) == 0)
                      {
                        outlined release of PlacementProperties<LazyHGridLayout>(v38);
                        return 0;
                      }
                    }
                    else
                    {
                      if (v41 >= v61) {
                        uint64_t v41 = (uint64_t)v60 * v191;
                      }
                      if (v41 >= 1 && v188)
                      {
                        EstimationCache.average.getter(*(void *)(v187 + 104), *(void *)(v187 + 112));
                        EdgeInsets.originOffset.getter();
                        int8x8_t v63 = v62;
                        outlined release of PlacementProperties<LazyHGridLayout>(v38);
                        if (v41 < v55) {
                          return v41;
                        }
                        if (v63 <= 0.0) {
                          return v41;
                        }
                        uint64_t v64 = __OFSUB__(v41, v55);
                        v41 -= v55;
                        if (!v64) {
                          return v41;
                        }
                        goto LABEL_197;
                      }
                    }
LABEL_52:
                    outlined release of PlacementProperties<LazyHGridLayout>(v38);
                    return v41;
                  }
LABEL_192:
                  __break(1u);
LABEL_193:
                  outlined release of PlacementProperties<LazyHGridLayout>(v38);
                  return *(void *)(v21 + 104);
                }
LABEL_191:
                __break(1u);
                goto LABEL_192;
              }
LABEL_190:
              __break(1u);
              goto LABEL_191;
            }
LABEL_189:
            __break(1u);
            goto LABEL_190;
          }
        }
        __break(1u);
        goto LABEL_189;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
    goto LABEL_208;
  }
  if (!v188) {
    goto LABEL_26;
  }
  uint64_t v70 = *(void *)(v187 + 40);
  char v69 = *(void *)(v187 + 48);
  uint64_t v71 = v69 - v70;
  if (__OFSUB__(v69, v70))
  {
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }
  uint64_t v72 = ceil(v14 / v181);
  if ((~*(void *)&v72 & 0x7FF0000000000000) == 0)
  {
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  if (v72 <= -9.22337204e18)
  {
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
  if (v72 < 9.22337204e18)
  {
    uint64_t v178 = 0;
    if (v71 <= (uint64_t)v72) {
      uint64_t v71 = (uint64_t)v72;
    }
    int v168 = v71;
    if (v67 >= 0.0) {
      uint64_t v73 = v69;
    }
    else {
      uint64_t v73 = v70;
    }
    if (v67 >= 0.0) {
      uint64_t v74 = v51;
    }
    else {
      uint64_t v74 = v66;
    }
    uint64_t v167 = v74;
    double v176 = &v208;
    uint64_t v75 = 2;
    uint64_t v166 = v73;
    uint64_t v21 = v182;
    while (1)
    {
      uint64_t v76 = v75 * v168;
      if ((unsigned __int128)(v75 * (__int128)v168) >> 64 != (v75 * v168) >> 63) {
        goto LABEL_205;
      }
      long long v77 = v73 - v76;
      if (__OFSUB__(v73, v76)) {
        goto LABEL_206;
      }
      v213[0] = 0;
      uint64_t v78 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v77 & ~(v77 >> 63), v73, v190, v189, v213);
      uint64_t v183 = *(void *)(v78 + 16);
      if (v183) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_161:
      if (*(double *)(v21 + 120) <= v33 + 0.01) {
        goto LABEL_193;
      }
      if (v77 > 0)
      {
        double v164 = v75 < 8;
        v75 *= 2;
        if (v164) {
          continue;
        }
      }
      goto LABEL_166;
    }
    uint64_t v180 = v78;
    uint64_t v79 = v213[0];
    specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v73, 0, 1, 1, v167);
    uint64_t v212 = 0;
    int v211 = 0;
    if ((v79 & 1) == 0) {
      goto LABEL_93;
    }
    long long v80 = *(void *)(v21 + 40);
    long long v81 = *(void *)(v21 + 104);
    uint64_t v64 = __OFSUB__(v81, v80);
    long long v82 = v81 - v80;
    if (!v64)
    {
      *(void *)(v21 + 104) = v82;
      int v211 = 1;
LABEL_93:
      uint64_t v169 = v77;
      double v170 = v75;
      int64_t v83 = v180;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      char v84 = 0;
      uint64_t v85 = 8 * v183 + 24;
      uint64_t v86 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        uint64_t v184 = v85;
        *(void *)(v21 + 144) = *(void *)(v83 + v85);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v84 != 1)
        {
          if (!v84) {
            goto LABEL_141;
          }
          int v211 = 1;
          long long v87 = *(void *)(v21 + 144);
          if (!*(void *)(v87 + 16)) {
            goto LABEL_155;
          }
          char v88 = *(void *)(v21 + 152);
          if (!v88) {
            goto LABEL_222;
          }
          if (!*(void *)(v88 + 16)) {
            goto LABEL_199;
          }
          outlined init with copy of _LazyLayout_Subview(v88 + 32, (uint64_t)&v207);
          if ((v209 & 1) != 0 || v210 == 1)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
            outlined init with copy of _LazyLayout_Subview(v88 + 32, (uint64_t)&v207);
            swift_bridgeObjectRelease();
            char v89 = *(unsigned char *)(v21 + 32);
            char v90 = ProposedViewSize.init(_:in:by:)();
            uint64_t v174 = v93;
            double v175 = v90;
            if (!*(void *)(v87 + 16)) {
              goto LABEL_201;
            }
            uint64_t v94 = v91;
            char v95 = v92;
            outlined init with copy of _LazyLayout_Subview(v87 + 32, (uint64_t)v206);
            swift_bridgeObjectRelease();
            uint64_t v172 = *(void *)(v21 + 16);
            uint64_t v171 = *(unsigned __int8 *)(v21 + 24);
            uint64_t v173 = DWORD2(v207);
            double v96 = LazyLayoutViewCache.item(data:)((uint64_t)v176);
            double v97 = *(void *)(v96 + 32);
            swift_bridgeObjectRetain();
            char v98 = *(void *)(v96 + 40);
            swift_release();
            *(void *)&v197 = v97;
            *((void *)&v197 + 1) = v98;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            uint64_t v202 = v204;
            double v203 = v205;
            LOBYTE(v197) = v94 & 1;
            LOBYTE(v192) = v95 & 1;
            _ProposedSize.init(_:)();
            *(void *)&double v192 = v197;
            BYTE8(v192) = BYTE8(v197);
            *(void *)&long long v193 = v198;
            BYTE8(v193) = BYTE8(v198);
            LayoutProxy.lengthThatFits(_:in:)();
            double v100 = v99;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)v206, (uint64_t)&v197, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            if ((void)v197)
            {
              long long v194 = v199;
              long long v195 = v200;
              v196[0] = v201[0];
              *(_OWORD *)((char *)v196 + 15) = *(_OWORD *)((char *)v201 + 15);
              double v192 = v197;
              long long v193 = v198;
              uint64_t v101 = v178;
              closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v192, v172, v171, v89, (uint64_t)&v207, &v204);
              uint64_t v178 = v101;
              outlined destroy of _LazyLayout_Subview((uint64_t)&v192);
              uint64_t v102 = v204;
            }
            else
            {
              uint64_t v102 = 0.0;
            }
            uint64_t v86 = (void *)MEMORY[0x1E4FBC860];
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v206, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
            if (v211)
            {
LABEL_118:
              uint64_t v121 = *(double *)(v21 + 120) - v100;
              *(double *)(v21 + 120) = v121;
              char v122 = *(void *)(v21 + 104);
              if (v122)
              {
                uint64_t v121 = v121 - v102;
                *(double *)(v21 + 120) = v121;
              }
LABEL_129:
              if (v102 + v121 > *(double *)(v21 + 64))
              {
                uint64_t v139 = *(void *)(v21 + 40);
                uint64_t v64 = __OFSUB__(v122, v139);
                uint64_t v140 = v122 - v139;
                if (v64) {
                  goto LABEL_204;
                }
                if (v212 == 1 && (v140 & 0x8000000000000000) == 0) {
                  *(void *)(v21 + 104) = v140;
                }
                uint64_t v141 = *(void *)(v21 + 144);
                if (*(void *)(v21 + 152)) {
                  double v142 = *(void **)(v21 + 152);
                }
                else {
                  double v142 = v86;
                }
                *(void *)(v21 + 144) = v142;
                *(void *)(v21 + 152) = v141;
                int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v144 = *(char **)(v21 + 144);
                if (isUniquelyReferenced_nonNull_native)
                {
                  uint64_t v145 = *((void *)v144 + 2);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v145, 1, v144);
                  }
LABEL_147:
                  swift_arrayDestroy();
                  if (v145)
                  {
                    size_t v150 = *((void *)v144 + 2) - v145;
                    if (v150 < 0) {
                      goto LABEL_223;
                    }
                    memmove(v144 + 32, &v144[96 * v145 + 32], 96 * v150);
                    *((void *)v144 + 2) = v150;
                  }
                  *(void *)(v21 + 144) = v144;
                  uint64_t v86 = (void *)MEMORY[0x1E4FBC860];
                  goto LABEL_154;
                }
                goto LABEL_151;
              }
LABEL_140:
              HIBYTE(v212) = 1;
              goto LABEL_141;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
            uint64_t v133 = *(void *)v21;
            uint64_t v132 = *(void *)(v21 + 8);
            char v134 = *(void *)(v21 + 16);
            char v135 = *(unsigned char *)(v21 + 24);
            uint64_t v136 = *(void *)(v21 + 56);
            uint64_t v174 = *(unsigned int *)(v21 + 28);
            double v175 = v134;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            LOBYTE(v206[0]) = v135;
            specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v88, v87, v136, v133, v132, v175, v135);
            double v100 = v137;
            uint64_t v102 = v138;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v86 = (void *)MEMORY[0x1E4FBC860];
            if (v211) {
              goto LABEL_118;
            }
          }
          char v122 = *(void *)(v21 + 104);
          uint64_t v121 = *(double *)(v21 + 120);
          goto LABEL_129;
        }
        LOBYTE(v212) = 1;
        char v103 = *(void *)(v21 + 144);
        if (!*(void *)(v103 + 16)) {
          goto LABEL_155;
        }
        char v104 = *(void *)(v21 + 152);
        if (!v104) {
          goto LABEL_221;
        }
        if (!*(void *)(v104 + 16)) {
          goto LABEL_200;
        }
        outlined init with copy of _LazyLayout_Subview(v104 + 32, (uint64_t)&v207);
        if ((v209 & 1) != 0 || v210 == 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
          outlined init with copy of _LazyLayout_Subview(v104 + 32, (uint64_t)&v207);
          swift_bridgeObjectRelease();
          char v105 = *(unsigned char *)(v21 + 32);
          char v106 = ProposedViewSize.init(_:in:by:)();
          uint64_t v174 = v109;
          double v175 = v106;
          if (!*(void *)(v103 + 16)) {
            goto LABEL_202;
          }
          char v110 = v107;
          double v111 = v108;
          outlined init with copy of _LazyLayout_Subview(v103 + 32, (uint64_t)v206);
          swift_bridgeObjectRelease();
          uint64_t v172 = *(void *)(v21 + 16);
          uint64_t v171 = *(unsigned __int8 *)(v21 + 24);
          uint64_t v173 = DWORD2(v207);
          double v112 = LazyLayoutViewCache.item(data:)((uint64_t)v176);
          char v113 = *(void *)(v112 + 32);
          swift_bridgeObjectRetain();
          uint64_t v114 = *(void *)(v112 + 40);
          swift_release();
          *(void *)&v197 = v113;
          *((void *)&v197 + 1) = v114;
          _ViewOutputs.layoutComputer.getter();
          swift_bridgeObjectRelease();
          LayoutProxy.init(context:layoutComputer:)();
          uint64_t v202 = v204;
          double v203 = v205;
          LOBYTE(v197) = v110 & 1;
          LOBYTE(v192) = v111 & 1;
          _ProposedSize.init(_:)();
          *(void *)&double v192 = v197;
          BYTE8(v192) = BYTE8(v197);
          *(void *)&long long v193 = v198;
          BYTE8(v193) = BYTE8(v198);
          LayoutProxy.lengthThatFits(_:in:)();
          double v116 = v115;
          outlined init with copy of AccessibilityScrollableContext?((uint64_t)v206, (uint64_t)&v197, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          if ((void)v197)
          {
            long long v194 = v199;
            long long v195 = v200;
            v196[0] = v201[0];
            *(_OWORD *)((char *)v196 + 15) = *(_OWORD *)((char *)v201 + 15);
            double v192 = v197;
            long long v193 = v198;
            uint64_t v117 = v178;
            closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v192, v172, v171, v105, (uint64_t)&v207, &v204);
            uint64_t v178 = v117;
            outlined destroy of _LazyLayout_Subview((uint64_t)&v192);
            double v118 = v204;
          }
          else
          {
            double v118 = 0.0;
          }
          uint64_t v86 = (void *)MEMORY[0x1E4FBC860];
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v206, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
          if ((v211 & 1) == 0)
          {
LABEL_121:
            uint64_t v120 = *(void *)(v21 + 104);
            uint64_t v119 = *(double *)(v21 + 120);
            goto LABEL_122;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v207);
          uint64_t v124 = *(void *)v21;
          char v123 = *(void *)(v21 + 8);
          char v125 = *(void *)(v21 + 16);
          char v126 = *(unsigned char *)(v21 + 24);
          uint64_t v127 = *(void *)(v21 + 56);
          uint64_t v174 = *(unsigned int *)(v21 + 28);
          double v175 = v125;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOBYTE(v206[0]) = v126;
          specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v104, v103, v127, v124, v123, v175, v126);
          double v116 = v128;
          double v118 = v129;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v86 = (void *)MEMORY[0x1E4FBC860];
          if ((v211 & 1) == 0) {
            goto LABEL_121;
          }
        }
        uint64_t v119 = *(double *)(v21 + 120) - v116;
        *(double *)(v21 + 120) = v119;
        uint64_t v120 = *(void *)(v21 + 104);
        if (v120)
        {
          uint64_t v119 = v119 - v118;
          *(double *)(v21 + 120) = v119;
        }
LABEL_122:
        if (v118 + v119 <= *(double *)(v21 + 64)) {
          goto LABEL_140;
        }
        double v130 = *(void *)(v21 + 40);
        uint64_t v64 = __OFSUB__(v120, v130);
        uint64_t v131 = v120 - v130;
        if (v64) {
          goto LABEL_203;
        }
        if (v212 == 1 && (v131 & 0x8000000000000000) == 0) {
          *(void *)(v21 + 104) = v131;
        }
LABEL_141:
        uint64_t v146 = *(void *)(v21 + 144);
        if (*(void *)(v21 + 152)) {
          uint64_t v147 = *(void **)(v21 + 152);
        }
        else {
          uint64_t v147 = v86;
        }
        *(void *)(v21 + 144) = v147;
        *(void *)(v21 + 152) = v146;
        id v148 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v144 = *(char **)(v21 + 144);
        if (v148)
        {
          uint64_t v145 = *((void *)v144 + 2);
          int v149 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v21 + 144) = v144;
          if ((v149 & 1) == 0)
          {
            uint64_t v144 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v145, 1, v144);
            *(void *)(v21 + 144) = v144;
          }
          goto LABEL_147;
        }
LABEL_151:
        uint64_t v151 = v86;
        if (*((void *)v144 + 3) >= 2uLL)
        {
          type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00]);
          uint64_t v151 = (void *)swift_allocObject();
          uint64_t v152 = _swift_stdlib_malloc_size(v151);
          v151[2] = 0;
          v151[3] = 2 * ((uint64_t)(v152 - 32) / 96);
        }
        *(void *)(v21 + 144) = v151;
        swift_bridgeObjectRelease();
LABEL_154:
        int64_t v83 = v180;
LABEL_155:
        if (HIBYTE(v212) == 1)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v73 = v166;
          long long v77 = v169;
          uint64_t v75 = v170;
          double v40 = v177;
          goto LABEL_161;
        }
        if (__OFADD__(v84, 1)) {
          goto LABEL_196;
        }
        ++v84;
        uint64_t v85 = v184 - 8;
        if (v183 == v84)
        {
          long long v77 = v169;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          LOBYTE(v212) = 1;
          swift_beginAccess();
          int v211 = 1;
          specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v77 < 1, (uint64_t *)v21, &v211, 0, (unsigned char *)&v212 + 1, &v212);
          swift_bridgeObjectRelease();
          uint64_t v73 = v166;
          uint64_t v75 = v170;
          double v40 = v177;
          goto LABEL_161;
        }
      }
    }
    goto LABEL_214;
  }
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  long long *Value;
  long long v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  char v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *);
  double v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  double v63;
  double v64;
  BOOL v65;
  uint64_t result;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double v100;
  double v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  char v109;
  uint64_t v110;
  char v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  double v117;
  uint64_t v118;
  double v119;
  double v120;
  uint64_t v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  double v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  double v138;
  double v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  int isUniquelyReferenced_nonNull_native;
  char *v145;
  int64_t v146;
  uint64_t v147;
  void *v148;
  int v149;
  char v150;
  uint64_t v151;
  void *v152;
  size_t v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  double v164;
  BOOL v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  long long *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  BOOL v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  long long v193;
  long long v194;
  long long v195;
  long long v196;
  _OWORD v197[2];
  long long v198;
  long long v199;
  long long v200;
  long long v201;
  _OWORD v202[2];
  double v203;
  int v204;
  double v205;
  int v206;
  void v207[18];
  long long v208;
  long long v209;
  char v210;
  char v211;
  char v212;
  __int16 v213;
  char v214[17];

  uint64_t v191 = a1;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v184 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  Swift::String v11 = (char *)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a2 + 216);
  uint64_t v13 = *(void *)(a2 + 224);
  double v14 = 0.0;
  if (*(_DWORD *)(a2 + 12) != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v16 = Value[1];
    long long v208 = *Value;
    long long v209 = v16;
    MEMORY[0x18C114450]();
    double v14 = v17;
  }
  uint64_t v183 = a4;
  double v192 = *(void *)a5;
  uint64_t v18 = *(double *)(a5 + 8);
  double v19 = *(void *)(a5 + 16);
  double v20 = *(void *)(a3 + 104);
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v186 = v13;
  double v187 = v12;
  uint64_t v185 = v9;
  if (v21)
  {
    uint64_t v22 = a3;
    double v23 = *(void *)(a3 + 112);
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    char v25 = COERCE_DOUBLE(EstimationCache.average.getter(v20, v23));
    if (v26) {
      char v25 = 0.0;
    }
    unint64_t v27 = v24 + v25;
  }
  else
  {
    outlined retain of PlacementProperties<LazyHGridLayout>(a5);
    unint64_t v27 = 32.0;
    uint64_t v22 = a3;
  }
  BOOL v28 = a5;
  double v29 = v192;
  unint64_t v190 = 2 * v192;
  double v31 = v27 > 0.0 && *(void *)(v20 + 16) != 0;
  BOOL v189 = v31;
  *(void *)&long long v208 = *(void *)a2;
  double v32 = a2;
  DWORD2(v208) = *(_DWORD *)(a2 + 8);
  uint64_t v34 = *(double *)(v28 + 24);
  double v33 = *(double *)(v28 + 32);
  uint64_t v35 = v28;
  swift_getKeyPath();
  SizeAndSpacingContext.subscript.getter();
  swift_release();
  double v36 = *(void *)(v22 + 16);
  uint64_t v188 = v22;
  if (!v36 || v29 != *(void *)v22)
  {
    char v39 = v35;
    outlined retain of PlacementProperties<LazyHGridLayout>(v35);
    goto LABEL_25;
  }
  uint64_t v182 = v27;
  uint64_t v37 = *(double *)v207;
  uint64_t v38 = *(double *)(v22 + 8);
  char v39 = v35;
  outlined retain of PlacementProperties<LazyHGridLayout>(v35);
  if (v18 != v38)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v41 = v32;
    goto LABEL_26;
  }
  outlined retain of PlacementProperties<LazyHGridLayout>(v35);
  swift_bridgeObjectRetain();
  double v40 = specialized static Array<A>.== infix(_:_:)(v19, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of PlacementProperties<LazyHGridLayout>(v35);
  uint64_t v41 = v32;
  if (v40 & 1) == 0 || (*(unsigned char *)(v35 + 40)) {
    goto LABEL_26;
  }
  uint64_t v180 = v35;
  uint64_t v178 = v32;
  uint64_t v22 = v188;
  uint64_t v42 = *(void *)(v188 + 40);
  unsigned __int8 v43 = *(void *)(v188 + 56);
  LODWORD(v181) = *MEMORY[0x1E4FBBEA0];
  double v44 = v184;
  long long v45 = v185;
  uint64_t v46 = *(void (**)(char *))(v184 + 104);
  v46(v11);
  uint64_t v179 = v43;
  *(void *)&long long v208 = v43;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v37);
  double v47 = *(double *)&v208;
  double v48 = *(void (**)(char *, uint64_t))(v44 + 8);
  v48(v11, v45);
  double v49 = *(void *)(v22 + 64);
  ((void (*)(char *, void, uint64_t))v46)(v11, v181, v45);
  *(void *)&long long v208 = v49;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v11, v37);
  double v50 = *(double *)&v208;
  v48(v11, v45);
  if (v47 > v50) {
    goto LABEL_198;
  }
  double v51 = v188;
  char v39 = v180;
  if (v47 <= v34
    && (v33 <= v50 || v34 <= v50 && (*(unsigned char *)(v188 + 32) & 1) == 0 && *(void *)(v188 + 24) == *(void *)(v188 + 48)))
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v180);
    return v42;
  }
  BOOL v52 = *(double *)(v188 + 64);
  BOOL v53 = v34 - v52;
  double v54 = v14 + v14;
  if (v34 - v52 + 0.01 > 0.0 && v53 < v54)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v180);
    return *(void *)(v51 + 48);
  }
  uint64_t v67 = *(double *)(v188 + 56);
  uint64_t v68 = v34 - v67;
  if (v34 - v67 + 0.01 > 0.0 && v68 < v54)
  {
    outlined release of PlacementProperties<LazyHGridLayout>(v180);
    return *(void *)(v51 + 40);
  }
  if (v68 >= 0.0)
  {
    char v69 = v34 - v52;
    uint64_t v41 = v178;
  }
  else
  {
    char v69 = v34 - v67;
    uint64_t v41 = v178;
    if (v53 < 0.0)
    {
      if (v68 > v53) {
        char v69 = v34 - v67;
      }
      else {
        char v69 = v34 - v52;
      }
    }
  }
  if (v69 >= 0.0 || v14 * 3.0 <= -v69)
  {
    if (v189)
    {
LABEL_166:
      *(void *)&long long v208 = v190;
      double v154 = _ViewList_Node.estimatedCount(style:)();
      if (v192 != 1)
      {
        if (!v192)
        {
LABEL_215:
          __break(1u);
          goto LABEL_216;
        }
        if (v154 == 0x8000000000000000 && v192 == -1) {
          goto LABEL_220;
        }
        v154 /= v192;
      }
      uint64_t v155 = v154 - 1;
      if (__OFSUB__(v154, 1)) {
        goto LABEL_207;
      }
      uint64_t v156 = *(double *)(v188 + 56);
      uint64_t v157 = round((v34 - v156) / v182);
      if ((~*(void *)&v157 & 0x7FF0000000000000) == 0)
      {
LABEL_208:
        __break(1u);
        goto LABEL_209;
      }
      if (v157 <= -9.22337204e18)
      {
LABEL_209:
        __break(1u);
        goto LABEL_210;
      }
      if (v157 >= 9.22337204e18)
      {
LABEL_210:
        __break(1u);
        goto LABEL_211;
      }
      uint64_t v158 = v155 & ~(v155 >> 63);
      uint64_t v159 = v158 * v192;
      if ((unsigned __int128)(v158 * (__int128)v192) >> 64 != (v158 * v192) >> 63)
      {
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }
      if (v155 >= (uint64_t)v157) {
        uint64_t v155 = (uint64_t)v157;
      }
      uint64_t v160 = v155 & ~(v155 >> 63);
      double v161 = v160 * v192;
      if ((unsigned __int128)(v160 * (__int128)v192) >> 64 != (v160 * v192) >> 63) {
        goto LABEL_212;
      }
      BOOL v162 = *(void *)(v188 + 40);
      uint64_t v65 = __OFADD__(v162, v161);
      uint64_t v163 = v162 + v161;
      if (v65)
      {
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
        goto LABEL_215;
      }
      double v164 = v156 + v182 * (double)v160;
      uint64_t v165 = v164 + 0.01 < 0.0 || v164 + -0.01 > v34;
      if (!v165)
      {
        uint64_t v166 = v163 & ~(v163 >> 63);
        if (v159 >= v166) {
          uint64_t v42 = v166;
        }
        else {
          uint64_t v42 = v159;
        }
        goto LABEL_52;
      }
    }
LABEL_26:
    *(void *)&long long v208 = v190;
    double v55 = _ViewList_Node.estimatedCount(style:)();
    double v56 = v192;
    if (v192 == 1) {
      goto LABEL_31;
    }
    if (v192)
    {
      if (v55 != 0x8000000000000000 || v192 != -1)
      {
        v55 /= v192;
LABEL_31:
        uint64_t v57 = *(double *)(v41 + 40);
        uint64_t v58 = v34 / v57;
        uint64_t v165 = v57 <= 0.0;
        uint64_t v59 = 0.0;
        if (v165) {
          uint64_t v58 = 0.0;
        }
        if (v58 >= 0.0) {
          uint64_t v59 = v58;
        }
        if (v58 >= 1.0) {
          uint64_t v59 = 1.0;
        }
        if (__OFSUB__(v55, 1))
        {
          __break(1u);
        }
        else
        {
          double v60 = (v55 - 1) & ~((v55 - 1) >> 63);
          uint64_t v42 = v60 * v192;
          if ((unsigned __int128)(v60 * (__int128)v192) >> 64 == (v60 * v192) >> 63)
          {
            uint64_t v61 = v59 * (double)v55 + 0.5;
            if ((~*(void *)&v61 & 0x7FF0000000000000) != 0)
            {
              if (v61 > -9.22337204e18)
              {
                if (v61 < 9.22337204e18)
                {
                  double v62 = (uint64_t)v61 * v192;
                  if ((unsigned __int128)((uint64_t)v61 * (__int128)v192) >> 64 == v62 >> 63)
                  {
                    if (v62 < 0)
                    {
                      if ((v42 & 0x8000000000000000) == 0)
                      {
                        outlined release of PlacementProperties<LazyHGridLayout>(v39);
                        return 0;
                      }
                    }
                    else
                    {
                      if (v42 >= v62) {
                        uint64_t v42 = (uint64_t)v61 * v192;
                      }
                      if (v42 >= 1 && v189)
                      {
                        EstimationCache.average.getter(*(void *)(v188 + 104), *(void *)(v188 + 112));
                        EdgeInsets.originOffset.getter();
                        uint64_t v64 = v63;
                        outlined release of PlacementProperties<LazyHGridLayout>(v39);
                        if (v42 < v56) {
                          return v42;
                        }
                        if (v64 <= 0.0) {
                          return v42;
                        }
                        uint64_t v65 = __OFSUB__(v42, v56);
                        v42 -= v56;
                        if (!v65) {
                          return v42;
                        }
                        goto LABEL_197;
                      }
                    }
LABEL_52:
                    outlined release of PlacementProperties<LazyHGridLayout>(v39);
                    return v42;
                  }
LABEL_192:
                  __break(1u);
LABEL_193:
                  outlined release of PlacementProperties<LazyHGridLayout>(v39);
                  return *(void *)(v22 + 104);
                }
LABEL_191:
                __break(1u);
                goto LABEL_192;
              }
LABEL_190:
              __break(1u);
              goto LABEL_191;
            }
LABEL_189:
            __break(1u);
            goto LABEL_190;
          }
        }
        __break(1u);
        goto LABEL_189;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
    goto LABEL_208;
  }
  if (!v189) {
    goto LABEL_26;
  }
  uint64_t v71 = *(void *)(v188 + 40);
  uint64_t v70 = *(void *)(v188 + 48);
  uint64_t v72 = v70 - v71;
  if (__OFSUB__(v70, v71))
  {
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }
  uint64_t v73 = ceil(v14 / v182);
  if ((~*(void *)&v73 & 0x7FF0000000000000) == 0)
  {
LABEL_217:
    __break(1u);
    goto LABEL_218;
  }
  if (v73 <= -9.22337204e18)
  {
LABEL_218:
    __break(1u);
    goto LABEL_219;
  }
  if (v73 < 9.22337204e18)
  {
    uint64_t v179 = 0;
    if (v72 <= (uint64_t)v73) {
      uint64_t v72 = (uint64_t)v73;
    }
    uint64_t v169 = v72;
    if (v68 >= 0.0) {
      uint64_t v74 = v70;
    }
    else {
      uint64_t v74 = v71;
    }
    if (v68 >= 0.0) {
      uint64_t v75 = v52;
    }
    else {
      uint64_t v75 = v67;
    }
    int v168 = v75;
    uint64_t v177 = &v209;
    uint64_t v76 = 2;
    uint64_t v167 = v74;
    uint64_t v22 = v183;
    while (1)
    {
      long long v77 = v76 * v169;
      if ((unsigned __int128)(v76 * (__int128)v169) >> 64 != (v76 * v169) >> 63) {
        goto LABEL_205;
      }
      uint64_t v78 = v74 - v77;
      if (__OFSUB__(v74, v77)) {
        goto LABEL_206;
      }
      v214[0] = 0;
      uint64_t v79 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v78 & ~(v78 >> 63), v74, v191, v190, v214);
      uint64_t v184 = *(void *)(v79 + 16);
      if (v184) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_161:
      if (*(double *)(v22 + 120) <= v34 + 0.01) {
        goto LABEL_193;
      }
      if (v78 > 0)
      {
        uint64_t v165 = v76 < 8;
        v76 *= 2;
        if (v165) {
          continue;
        }
      }
      goto LABEL_166;
    }
    uint64_t v181 = v79;
    long long v80 = v214[0];
    specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(v74, 0, 1, 1, v168);
    uint64_t v213 = 0;
    uint64_t v212 = 0;
    if ((v80 & 1) == 0) {
      goto LABEL_93;
    }
    long long v81 = *(void *)(v22 + 40);
    long long v82 = *(void *)(v22 + 104);
    uint64_t v65 = __OFSUB__(v82, v81);
    int64_t v83 = v82 - v81;
    if (!v65)
    {
      *(void *)(v22 + 104) = v83;
      uint64_t v212 = 1;
LABEL_93:
      double v170 = v78;
      uint64_t v171 = v76;
      char v84 = v181;
      swift_bridgeObjectRetain();
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      uint64_t v85 = 0;
      uint64_t v86 = 8 * v184 + 24;
      long long v87 = (void *)MEMORY[0x1E4FBC860];
      while (1)
      {
        uint64_t v185 = v86;
        *(void *)(v22 + 144) = *(void *)(v84 + v86);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v85 != 1)
        {
          if (!v85) {
            goto LABEL_141;
          }
          uint64_t v212 = 1;
          char v88 = *(void *)(v22 + 144);
          if (!*(void *)(v88 + 16)) {
            goto LABEL_155;
          }
          char v89 = *(void *)(v22 + 152);
          if (!v89) {
            goto LABEL_222;
          }
          if (!*(void *)(v89 + 16)) {
            goto LABEL_199;
          }
          outlined init with copy of _LazyLayout_Subview(v89 + 32, (uint64_t)&v208);
          if ((v210 & 1) != 0 || v211 == 1)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _LazyLayout_Subview((uint64_t)&v208);
            outlined init with copy of _LazyLayout_Subview(v89 + 32, (uint64_t)&v208);
            swift_bridgeObjectRelease();
            char v90 = *(unsigned char *)(v22 + 32);
            char v91 = ProposedViewSize.init(_:in:by:)();
            double v175 = v94;
            double v176 = v91;
            if (!*(void *)(v88 + 16)) {
              goto LABEL_201;
            }
            char v95 = v92;
            double v96 = v93;
            outlined init with copy of _LazyLayout_Subview(v88 + 32, (uint64_t)v207);
            swift_bridgeObjectRelease();
            uint64_t v173 = *(void *)(v22 + 16);
            uint64_t v172 = *(unsigned __int8 *)(v22 + 24);
            uint64_t v174 = DWORD2(v208);
            double v97 = LazyLayoutViewCache.item(data:)((uint64_t)v177);
            char v98 = *(void *)(v97 + 32);
            swift_bridgeObjectRetain();
            uint64_t v99 = *(void *)(v97 + 40);
            swift_release();
            *(void *)&long long v198 = v98;
            *((void *)&v198 + 1) = v99;
            _ViewOutputs.layoutComputer.getter();
            swift_bridgeObjectRelease();
            LayoutProxy.init(context:layoutComputer:)();
            double v203 = v205;
            int v204 = v206;
            LOBYTE(v198) = v95 & 1;
            LOBYTE(v193) = v96 & 1;
            _ProposedSize.init(_:)();
            *(void *)&long long v193 = v198;
            BYTE8(v193) = BYTE8(v198);
            *(void *)&long long v194 = v199;
            BYTE8(v194) = BYTE8(v199);
            LayoutProxy.lengthThatFits(_:in:)();
            uint64_t v101 = v100;
            outlined init with copy of AccessibilityScrollableContext?((uint64_t)v207, (uint64_t)&v198, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            if ((void)v198)
            {
              long long v195 = v200;
              long long v196 = v201;
              v197[0] = v202[0];
              *(_OWORD *)((char *)v197 + 15) = *(_OWORD *)((char *)v202 + 15);
              long long v193 = v198;
              long long v194 = v199;
              uint64_t v102 = v179;
              closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v193, v173, v172, v90, (uint64_t)&v208, &v205);
              uint64_t v179 = v102;
              outlined destroy of _LazyLayout_Subview((uint64_t)&v193);
              char v103 = v205;
            }
            else
            {
              char v103 = 0.0;
            }
            long long v87 = (void *)MEMORY[0x1E4FBC860];
            outlined destroy of AccessibilityScrollableContext?((uint64_t)v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
            outlined destroy of _LazyLayout_Subview((uint64_t)&v208);
            if (v212)
            {
LABEL_118:
              char v122 = *(double *)(v22 + 120) - v101;
              *(double *)(v22 + 120) = v122;
              char v123 = *(void *)(v22 + 104);
              if (v123)
              {
                char v122 = v122 - v103;
                *(double *)(v22 + 120) = v122;
              }
LABEL_129:
              if (v103 + v122 > *(double *)(v22 + 64))
              {
                uint64_t v140 = *(void *)(v22 + 40);
                uint64_t v65 = __OFSUB__(v123, v140);
                uint64_t v141 = v123 - v140;
                if (v65) {
                  goto LABEL_204;
                }
                if (v213 == 1 && (v141 & 0x8000000000000000) == 0) {
                  *(void *)(v22 + 104) = v141;
                }
                double v142 = *(void *)(v22 + 144);
                if (*(void *)(v22 + 152)) {
                  uint64_t v143 = *(void **)(v22 + 152);
                }
                else {
                  uint64_t v143 = v87;
                }
                *(void *)(v22 + 144) = v143;
                *(void *)(v22 + 152) = v142;
                int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v145 = *(char **)(v22 + 144);
                if (isUniquelyReferenced_nonNull_native)
                {
                  uint64_t v146 = *((void *)v145 + 2);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v146, 1, v145);
                  }
LABEL_147:
                  swift_arrayDestroy();
                  if (v146)
                  {
                    uint64_t v151 = *((void *)v145 + 2) - v146;
                    if (v151 < 0) {
                      goto LABEL_223;
                    }
                    memmove(v145 + 32, &v145[96 * v146 + 32], 96 * v151);
                    *((void *)v145 + 2) = v151;
                  }
                  *(void *)(v22 + 144) = v145;
                  long long v87 = (void *)MEMORY[0x1E4FBC860];
                  goto LABEL_154;
                }
                goto LABEL_151;
              }
LABEL_140:
              HIBYTE(v213) = 1;
              goto LABEL_141;
            }
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined destroy of _LazyLayout_Subview((uint64_t)&v208);
            char v134 = *(void *)v22;
            uint64_t v133 = *(void *)(v22 + 8);
            char v135 = *(void *)(v22 + 16);
            uint64_t v136 = *(unsigned char *)(v22 + 24);
            char v137 = *(void *)(v22 + 56);
            double v175 = *(unsigned int *)(v22 + 28);
            double v176 = v135;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            LOBYTE(v207[0]) = v136;
            specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v89, v88, v137, v134, v133, v176, v136);
            uint64_t v101 = v138;
            char v103 = v139;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v87 = (void *)MEMORY[0x1E4FBC860];
            if (v212) {
              goto LABEL_118;
            }
          }
          char v123 = *(void *)(v22 + 104);
          char v122 = *(double *)(v22 + 120);
          goto LABEL_129;
        }
        LOBYTE(v213) = 1;
        char v104 = *(void *)(v22 + 144);
        if (!*(void *)(v104 + 16)) {
          goto LABEL_155;
        }
        char v105 = *(void *)(v22 + 152);
        if (!v105) {
          goto LABEL_221;
        }
        if (!*(void *)(v105 + 16)) {
          goto LABEL_200;
        }
        outlined init with copy of _LazyLayout_Subview(v105 + 32, (uint64_t)&v208);
        if ((v210 & 1) != 0 || v211 == 1)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v208);
          outlined init with copy of _LazyLayout_Subview(v105 + 32, (uint64_t)&v208);
          swift_bridgeObjectRelease();
          char v106 = *(unsigned char *)(v22 + 32);
          uint64_t v107 = ProposedViewSize.init(_:in:by:)();
          double v175 = v110;
          double v176 = v107;
          if (!*(void *)(v104 + 16)) {
            goto LABEL_202;
          }
          double v111 = v108;
          double v112 = v109;
          outlined init with copy of _LazyLayout_Subview(v104 + 32, (uint64_t)v207);
          swift_bridgeObjectRelease();
          uint64_t v173 = *(void *)(v22 + 16);
          uint64_t v172 = *(unsigned __int8 *)(v22 + 24);
          uint64_t v174 = DWORD2(v208);
          char v113 = LazyLayoutViewCache.item(data:)((uint64_t)v177);
          uint64_t v114 = *(void *)(v113 + 32);
          swift_bridgeObjectRetain();
          double v115 = *(void *)(v113 + 40);
          swift_release();
          *(void *)&long long v198 = v114;
          *((void *)&v198 + 1) = v115;
          _ViewOutputs.layoutComputer.getter();
          swift_bridgeObjectRelease();
          LayoutProxy.init(context:layoutComputer:)();
          double v203 = v205;
          int v204 = v206;
          LOBYTE(v198) = v111 & 1;
          LOBYTE(v193) = v112 & 1;
          _ProposedSize.init(_:)();
          *(void *)&long long v193 = v198;
          BYTE8(v193) = BYTE8(v198);
          *(void *)&long long v194 = v199;
          BYTE8(v194) = BYTE8(v199);
          LayoutProxy.lengthThatFits(_:in:)();
          uint64_t v117 = v116;
          outlined init with copy of AccessibilityScrollableContext?((uint64_t)v207, (uint64_t)&v198, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          if ((void)v198)
          {
            long long v195 = v200;
            long long v196 = v201;
            v197[0] = v202[0];
            *(_OWORD *)((char *)v197 + 15) = *(_OWORD *)((char *)v202 + 15);
            long long v193 = v198;
            long long v194 = v199;
            double v118 = v179;
            closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)((uint64_t)&v193, v173, v172, v106, (uint64_t)&v208, &v205);
            uint64_t v179 = v118;
            outlined destroy of _LazyLayout_Subview((uint64_t)&v193);
            uint64_t v119 = v205;
          }
          else
          {
            uint64_t v119 = 0.0;
          }
          long long v87 = (void *)MEMORY[0x1E4FBC860];
          outlined destroy of AccessibilityScrollableContext?((uint64_t)v207, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
          outlined destroy of _LazyLayout_Subview((uint64_t)&v208);
          if ((v212 & 1) == 0)
          {
LABEL_121:
            uint64_t v121 = *(void *)(v22 + 104);
            uint64_t v120 = *(double *)(v22 + 120);
            goto LABEL_122;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)&v208);
          char v125 = *(void *)v22;
          uint64_t v124 = *(void *)(v22 + 8);
          char v126 = *(void *)(v22 + 16);
          uint64_t v127 = *(unsigned char *)(v22 + 24);
          uint64_t v128 = *(void *)(v22 + 56);
          double v175 = *(unsigned int *)(v22 + 28);
          double v176 = v126;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOBYTE(v207[0]) = v127;
          specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v105, v104, v128, v125, v124, v176, v127);
          uint64_t v117 = v129;
          uint64_t v119 = v130;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          long long v87 = (void *)MEMORY[0x1E4FBC860];
          if ((v212 & 1) == 0) {
            goto LABEL_121;
          }
        }
        uint64_t v120 = *(double *)(v22 + 120) - v117;
        *(double *)(v22 + 120) = v120;
        uint64_t v121 = *(void *)(v22 + 104);
        if (v121)
        {
          uint64_t v120 = v120 - v119;
          *(double *)(v22 + 120) = v120;
        }
LABEL_122:
        if (v119 + v120 <= *(double *)(v22 + 64)) {
          goto LABEL_140;
        }
        uint64_t v131 = *(void *)(v22 + 40);
        uint64_t v65 = __OFSUB__(v121, v131);
        uint64_t v132 = v121 - v131;
        if (v65) {
          goto LABEL_203;
        }
        if (v213 == 1 && (v132 & 0x8000000000000000) == 0) {
          *(void *)(v22 + 104) = v132;
        }
LABEL_141:
        uint64_t v147 = *(void *)(v22 + 144);
        if (*(void *)(v22 + 152)) {
          id v148 = *(void **)(v22 + 152);
        }
        else {
          id v148 = v87;
        }
        *(void *)(v22 + 144) = v148;
        *(void *)(v22 + 152) = v147;
        int v149 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v145 = *(char **)(v22 + 144);
        if (v149)
        {
          uint64_t v146 = *((void *)v145 + 2);
          size_t v150 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v22 + 144) = v145;
          if ((v150 & 1) == 0)
          {
            uint64_t v145 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v146, 1, v145);
            *(void *)(v22 + 144) = v145;
          }
          goto LABEL_147;
        }
LABEL_151:
        uint64_t v152 = v87;
        if (*((void *)v145 + 3) >= 2uLL)
        {
          type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00]);
          uint64_t v152 = (void *)swift_allocObject();
          double v153 = _swift_stdlib_malloc_size(v152);
          v152[2] = 0;
          v152[3] = 2 * ((uint64_t)(v153 - 32) / 96);
        }
        *(void *)(v22 + 144) = v152;
        swift_bridgeObjectRelease();
LABEL_154:
        char v84 = v181;
LABEL_155:
        if (HIBYTE(v213) == 1)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v74 = v167;
          uint64_t v78 = v170;
          uint64_t v76 = v171;
          uint64_t v41 = v178;
          goto LABEL_161;
        }
        if (__OFADD__(v85, 1)) {
          goto LABEL_196;
        }
        ++v85;
        uint64_t v86 = v185 - 8;
        if (v184 == v85)
        {
          uint64_t v78 = v170;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          LOBYTE(v213) = 1;
          swift_beginAccess();
          uint64_t v212 = 1;
          specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v78 < 1, (uint64_t *)v22, &v212, 0, (unsigned char *)&v213 + 1, &v213);
          swift_bridgeObjectRelease();
          uint64_t v74 = v167;
          uint64_t v76 = v171;
          uint64_t v41 = v178;
          goto LABEL_161;
        }
      }
    }
    goto LABEL_214;
  }
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyStack<>.log(_:)(_OWORD *a1)
{
  return specialized LazyStack<>.log(_:)(a1, 0x8000000188328BB0);
}

{
  return specialized LazyStack<>.log(_:)(a1, 0x8000000188328C80);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIMutableTraits) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed UIMutableTraits) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id partial apply for closure #1 in GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  objc_msgSend(v3, sel_scale);
  objc_msgSend(a1, sel_setDisplayScale_);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 8);

  return objc_msgSend(a1, sel_setLayoutDirection_, v5);
}

uint64_t base witness table accessor for _AttributeBody in ContentShapeKindResponderFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for SceneList.Item(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 280)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 264);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t PPTTestBridge.__deallocating_deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  outlined destroy of PPTTestCase?(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t specialized static ResolvedScrollBehaviorModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

uint64_t static OnTestViewModifier._makeView(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = *a2;
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v20 = a2[2];
  int v17 = *((_DWORD *)a2 + 7);
  int v18 = *((_DWORD *)a2 + 6);
  int v4 = *((_DWORD *)a2 + 9);
  int v21 = *((_DWORD *)a2 + 8);
  LODWORD(v22) = *a1;
  uint64_t v5 = a2[5];
  uint64_t v9 = a2[6];
  int v19 = *((_DWORD *)a2 + 14);
  int v6 = *((_DWORD *)a2 + 17);
  int v14 = *((_DWORD *)a2 + 18);
  int v15 = *((_DWORD *)a2 + 15);
  int v10 = *((_DWORD *)a2 + 16);
  int v11 = *((_DWORD *)a2 + 19);
  int v12 = *((_DWORD *)a2 + 20);
  type metadata accessor for _GraphValue<OnTestViewModifier>(0, &lazy cache variable for type metadata for _GraphValue<OnTestViewModifier>, (uint64_t)&unk_1ED428908, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  _ViewInputs.viewPhase.getter();
  int v24 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type OnTestEffect and conformance OnTestEffect();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  uint64_t v7 = AGGraphSetFlags();
  uint64_t v22 = v16;
  int v23 = v3;
  uint64_t v25 = v20;
  int v26 = v18;
  int v27 = v17;
  int v28 = v21;
  int v29 = v4;
  uint64_t v30 = v5;
  uint64_t v31 = v9;
  int v32 = v19;
  int v33 = v15;
  int v34 = v10;
  int v35 = v6;
  int v36 = v14;
  int v37 = v11;
  int v38 = v12;
  return a3(v7, &v22);
}

uint64_t OnTestEffect.updateValue()()
{
  if ((*(unsigned char *)(v0 + 16) & 1) != 0 || *(_DWORD *)(v0 + 12) != *(_DWORD *)AGGraphGetValue() >> 1)
  {
    *(_DWORD *)(v0 + 12) = *(_DWORD *)AGGraphGetValue() >> 1;
    *(unsigned char *)(v0 + 16) = 0;
    *(_DWORD *)(v0 + 20) = 0;
    *(unsigned char *)(v0 + 24) = 1;
  }
  type metadata accessor for _GraphValue<OnTestViewModifier>(0, (unint64_t *)&lazy cache variable for type metadata for PPTTestCase?, (uint64_t)&type metadata for PPTTestCase, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of PPTTestCase?(Value, (uint64_t)v11);
  if (!v11[0] && v11[1] == 1) {
    return outlined destroy of PPTTestCase?((uint64_t)v11);
  }
  outlined init with take of PPTTestCase((uint64_t)v11, (uint64_t)v12);
  uint64_t v3 = v13;
  uint64_t v4 = v14;
  uint64_t v5 = (void *)AGGraphGetValue();
  BOOL v6 = v3 == *v5 && v4 == v5[1];
  if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)())
    && ((*(unsigned char *)(v0 + 24) & 1) != 0 || *(_DWORD *)(v0 + 20) != v15))
  {
    *(_DWORD *)(v0 + 20) = v15;
    *(unsigned char *)(v0 + 24) = 0;
    uint64_t v7 = AGGraphGetValue();
    uint64_t v9 = *(void *)(v7 + 16);
    uint64_t v8 = *(void *)(v7 + 24);
    outlined init with copy of PPTTestCase((uint64_t)v12, (uint64_t)v11);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v9;
    *(void *)(v10 + 24) = v8;
    outlined init with take of PPTTestCase((uint64_t)v11, v10 + 32);
    swift_retain_n();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
  }
  return outlined destroy of PPTTestCase((uint64_t)v12);
}

void type metadata accessor for _GraphValue<OnTestViewModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of PPTTestCase?(uint64_t a1)
{
  type metadata accessor for PPTTestCase?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of PPTTestCase?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PPTTestCase?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PPTTestCase?()
{
  if (!lazy cache variable for type metadata for PPTTestCase?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PPTTestCase?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OnTestEffect and conformance OnTestEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type OnTestEffect and conformance OnTestEffect;
  if (!lazy protocol witness table cache variable for type OnTestEffect and conformance OnTestEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnTestEffect and conformance OnTestEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment;
  if (!lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.TrackedEnvironment and conformance ResolvedScrollBehaviorModifier.TrackedEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment;
  if (!lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.UpdateEnvironment and conformance ResolvedScrollBehaviorModifier.UpdateEnvironment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior;
  if (!lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedScrollBehaviorModifier.MakeBehavior and conformance ResolvedScrollBehaviorModifier.MakeBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for Alert.Presentation()
{
  return &type metadata for Alert.Presentation;
}

ValueMetadata *type metadata accessor for AccessibilityLabeledContentPresentation()
{
  return &type metadata for AccessibilityLabeledContentPresentation;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewTree()
{
  return &type metadata for AccessibilityLargeContentViewTree;
}

ValueMetadata *type metadata accessor for InteractiveDismissAttemptHandler()
{
  return &type metadata for InteractiveDismissAttemptHandler;
}

ValueMetadata *type metadata accessor for AccessibilityRequestFocusAction()
{
  return &type metadata for AccessibilityRequestFocusAction;
}

ValueMetadata *type metadata accessor for PresentationOptionsPreference()
{
  return &type metadata for PresentationOptionsPreference;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreList()
{
  return &type metadata for AccessibilityFocusStoreList;
}

ValueMetadata *type metadata accessor for BorderlessButtonStyleBase()
{
  return &type metadata for BorderlessButtonStyleBase;
}

ValueMetadata *type metadata accessor for SystemScrollLayoutState.ContentOffsetMode()
{
  return &type metadata for SystemScrollLayoutState.ContentOffsetMode;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStore()
{
  return &type metadata for AccessibilityFocusStore;
}

ValueMetadata *type metadata accessor for EditModeScopeModifier()
{
  return &type metadata for EditModeScopeModifier;
}

ValueMetadata *type metadata accessor for AccessibilityNodeList()
{
  return &type metadata for AccessibilityNodeList;
}

ValueMetadata *type metadata accessor for EditMenuPresentation()
{
  return &type metadata for EditMenuPresentation;
}

ValueMetadata *type metadata accessor for MultimodalListStyle.Layout()
{
  return &type metadata for MultimodalListStyle.Layout;
}

ValueMetadata *type metadata accessor for DismissWindowAction()
{
  return &type metadata for DismissWindowAction;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance TextInputDictation.Key(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 2) = 0;
  *(_WORD *)a1 = 2;
}

ValueMetadata *type metadata accessor for AccessibilityFocus()
{
  return &type metadata for AccessibilityFocus;
}

ValueMetadata *type metadata accessor for AccessibilityFocus.Target()
{
  return &type metadata for AccessibilityFocus.Target;
}

ValueMetadata *type metadata accessor for AccessibilityFocus.Match()
{
  return &type metadata for AccessibilityFocus.Match;
}

ValueMetadata *type metadata accessor for _ResetFocusAction()
{
  return &type metadata for _ResetFocusAction;
}

ValueMetadata *type metadata accessor for NavigationBarHost()
{
  return &type metadata for NavigationBarHost;
}

ValueMetadata *type metadata accessor for LazyHStackLayout()
{
  return &type metadata for LazyHStackLayout;
}

ValueMetadata *type metadata accessor for FocusedValueList()
{
  return &type metadata for FocusedValueList;
}

ValueMetadata *type metadata accessor for DragItemTimings()
{
  return &type metadata for DragItemTimings;
}

ValueMetadata *type metadata accessor for ActiveEditMenu()
{
  return &type metadata for ActiveEditMenu;
}

ValueMetadata *type metadata accessor for FocusedValues()
{
  return &type metadata for FocusedValues;
}

ValueMetadata *type metadata accessor for StatusBarKey.StatusBar()
{
  return &type metadata for StatusBarKey.StatusBar;
}

ValueMetadata *type metadata accessor for ActionSheet.Presentation()
{
  return &type metadata for ActionSheet.Presentation;
}

ValueMetadata *type metadata accessor for FocusStore()
{
  return &type metadata for FocusStore;
}

uint64_t NewDocumentButton<>.init(_:contentType:prepareDocumentURL:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v23 = a4;
  _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  MEMORY[0x1F4188790](v15 - 8);
  int v17 = (char *)&v23 - v16;
  uint64_t v18 = type metadata accessor for UTType();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a5, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  uint64_t v25 = type metadata accessor for URLDocumentCreationStrategy(0);
  uint64_t v26 = lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(&lazy protocol witness table cache variable for type URLDocumentCreationStrategy and conformance URLDocumentCreationStrategy, (void (*)(uint64_t))type metadata accessor for URLDocumentCreationStrategy);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
  URLDocumentCreationStrategy.init(contentType:prepareDocument:)((uint64_t)v17, a6, a7, (unint64_t *)boxed_opaque_existential_1);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, v18);
  *a8 = a1;
  a8[1] = a2;
  uint64_t v21 = v23;
  a8[2] = a3;
  a8[3] = v21;
  return outlined init with take of OptionalBinaryInteger(&v24, (uint64_t)(a8 + 4));
}

uint64_t lazy protocol witness table accessor for type DefaultDocumentCreationStrategy and conformance DefaultDocumentCreationStrategy(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v5[2] = a5;
  v5[3] = type metadata accessor for TaskResult(0);
  v5[4] = swift_task_alloc();
  uint64_t v7 = swift_task_alloc();
  v5[5] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v5[6] = v8;
  void *v8 = v5;
  v8[1] = closure #1 in AsyncImage.didChangeURL(oldValue:newValue:);
  return downloadURL(_:)(v7, a4);
}

uint64_t downloadURL(_:)@<X0>(NSURL *a1@<X8>)
{
  URL._bridgeToObjectiveC()(a1);
  CFURLRef v3 = v2;
  uint64_t v4 = CGImageSourceCreateWithURL(v2, 0);
  if (v4)
  {
    unint64_t v5 = v4;
    if ((uint64_t)CGImageSourceGetCount(v4) >= 1)
    {
      uint64_t v7 = v1[5];
      uint64_t v6 = v1[6];
      uint64_t v8 = v1[4];
      uint64_t v9 = v1[2];
      CGImageRef ImageAtIndex = CGImageSourceCreateImageAtIndex(v5, 0, 0);
      char v11 = CGImageSourceRef.orientation(at:)(0);

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9, v6, v8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v8);
      int v12 = (int *)type metadata accessor for TaskResult(0);
      *(void *)(v9 + v12[5]) = ImageAtIndex;
      *(unsigned char *)(v9 + v12[6]) = v11;
      *(void *)(v9 + v12[7]) = 0;
      swift_task_dealloc();
      uint64_t v13 = (uint64_t (*)(void))v1[1];
      goto LABEL_6;
    }
  }
  uint64_t v15 = v1[5];
  uint64_t v14 = v1[6];
  uint64_t v16 = v1[4];
  lazy protocol witness table accessor for type LoadingError and conformance LoadingError();
  swift_allocError();
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v1[1];
LABEL_6:
  return v13();
}

uint64_t CGImageSourceRef.orientation(at:)(size_t index)
{
  CFDictionaryRef v2 = CGImageSourceCopyPropertiesAtIndex(v1, index, 0);
  if (!v2) {
    return 8;
  }
  CFDictionaryRef v3 = v2;
  uint64_t Value = (void *)CFDictionaryGetValue(v2, (const void *)*MEMORY[0x1E4F2FCA0]);

  if (!Value) {
    return 8;
  }
  id v5 = Value;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)();

  return 8;
}

uint64_t closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[3];
  swift_release();
  CFDictionaryRef v3 = *(void **)(v1 + *(int *)(v2 + 20));
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  type metadata accessor for TaskConfig(0);
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v5;
  if (v3)
  {
    v6[3] = v3;
    v6[4] = v4;
    id v7 = v3;
    withTransaction<A>(_:_:)();
  }
  else
  {
    v6[3] = v4;
    withTransaction<A>(_:_:)();
  }
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AsyncImage.didChangeURL(oldValue:newValue:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of LoadingState(*(void *)(v0 + 40), type metadata accessor for TaskResult);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  type metadata accessor for MainActor();
  *(void *)(v0 + 64) = static MainActor.shared.getter();
  uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in AsyncImage.didChangeURL(oldValue:newValue:), v2, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = closure #1 in AsyncImage.didChangeURL(oldValue:newValue:);
  }
  else {
    uint64_t v2 = closure #1 in AsyncImage.didChangeURL(oldValue:newValue:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = *(void **)(v0 + 56);
  CFDictionaryRef v3 = *(int **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = v3[5];
  *(_DWORD *)(v0 + 80) = v5;
  *(void *)(v2 + v5) = 0;
  *(unsigned char *)(v2 + v3[6]) = 8;
  *(void *)(v2 + v3[7]) = v1;
  type metadata accessor for MainActor();
  uint64_t v6 = v1;
  *(void *)(v0 + 72) = static MainActor.shared.getter();
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in AsyncImage.didChangeURL(oldValue:newValue:), v8, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v9;

  uint64_t v1 = *(int *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_release();
  CFDictionaryRef v3 = *(void **)(v2 + v1);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 16);
  type metadata accessor for TaskConfig(0);
  uint64_t v6 = (void *)swift_task_alloc();
  v6[2] = v5;
  if (v3)
  {
    v6[3] = v3;
    v6[4] = v4;
    id v7 = v3;
    withTransaction<A>(_:_:)();
  }
  else
  {
    v6[3] = v4;
    withTransaction<A>(_:_:)();
  }
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in AsyncImage.didChangeURL(oldValue:newValue:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of LoadingState(*(void *)(v0 + 32), type metadata accessor for TaskResult);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t partial apply for closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for TaskConfig(0) - 8) + 80);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = v1 + (v8 & ~v7);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in AsyncImage.didChangeURL(oldValue:newValue:)(a1, v9, v10, v11, v12);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AsyncImage.body.getter()
{
  uint64_t v1 = type metadata accessor for AsyncImage();
  uint64_t v2 = (void (*)(unsigned char *, unsigned char *, uint64_t))(v0
                                                      + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)));
  return AsyncImage.didChangeURL(oldValue:newValue:)((uint64_t)v2, v2, v1);
}

uint64_t closure #1 in updateTaskResult(_:config:)partial apply()
{
  return partial apply for closure #1 in updateTaskResult(_:config:)();
}

uint64_t partial apply for closure #1 in updateTaskResult(_:config:)()
{
  return closure #1 in updateTaskResult(_:config:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t closure #1 in updateTaskResult(_:config:)(uint64_t a1, void *a2)
{
  uint64_t v3 = type metadata accessor for LoadingState(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TaskConfig(0);
  type metadata accessor for TaskResult(0);
  id v7 = a2;
  uint64_t v8 = Image.init(decorative:scale:orientation:)();
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  uint64_t v9 = *(int *)(v4 + 32);
  outlined consume of AsyncImagePhase(*(void *)&v6[v9]);
  *(void *)&v6[v9] = v8;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of LoadingState((uint64_t)v6, type metadata accessor for LoadingState);
}

uint64_t AsyncImage.init(url:scale:transaction:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a4;
  uint64_t v10 = type metadata accessor for LoadingState(0);
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  v15(a5, 1, 1, v14);
  uint64_t v16 = (int *)type metadata accessor for AsyncImage();
  uint64_t v17 = a5 + v16[12];
  *uint64_t v13 = 0;
  v15((uint64_t)v13 + *(int *)(v11 + 28), 1, 1, v14);
  *(void *)((char *)v13 + *(int *)(v11 + 32)) = 0x8000000000000000;
  outlined init with copy of LoadingState((uint64_t)v13, v17, type metadata accessor for LoadingState);
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  *(void *)(v17 + *(int *)(v18 + 28)) = 0;
  outlined destroy of LoadingState((uint64_t)v13, type metadata accessor for LoadingState);
  uint64_t result = outlined assign with take of URL?(a1, a5);
  *(double *)(a5 + v16[9]) = a6;
  *(void *)(a5 + v16[10]) = a2;
  uint64_t v20 = (void *)(a5 + v16[11]);
  uint64_t v21 = v23;
  *uint64_t v20 = v22;
  v20[1] = v21;
  return result;
}

uint64_t AsyncImage.updateTask(_:url:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v28 = a2;
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v27 - v9;
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v27 = type metadata accessor for LoadingState(0);
  MEMORY[0x1F4188790](v27);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (uint64_t *)((char *)&v27 - v17);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (uint64_t *)((char *)&v27 - v20);
  State.wrappedValue.getter();
  uint64_t v22 = *v21;
  if (*v21)
  {
    swift_retain();
    outlined destroy of LoadingState((uint64_t)v21, type metadata accessor for LoadingState);
    MEMORY[0x18C115EE0](v22, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  else
  {
    outlined destroy of LoadingState((uint64_t)v21, type metadata accessor for LoadingState);
  }
  uint64_t v23 = v4 + *(int *)(a3 + 48);
  State.wrappedValue.getter();
  *uint64_t v18 = a1;
  swift_retain();
  swift_release();
  if (*(void *)(v23 + *(int *)(v8 + 28))) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of LoadingState((uint64_t)v18, type metadata accessor for LoadingState);
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v13, v28, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v13, 0, 1, v24);
  _s10Foundation3URLVSgWOcTm_0(v23, (uint64_t)v10, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  outlined assign with take of URL?((uint64_t)v13, (uint64_t)&v15[*(int *)(v27 + 20)]);
  if (*(void *)&v10[*(int *)(v8 + 28)]) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of LoadingState((uint64_t)v15, type metadata accessor for LoadingState);
  return _s10Foundation3URLVSgWOhTm_2((uint64_t)v10, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
}

uint64_t outlined assign with take of URL?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UTType?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UTType?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s22UniformTypeIdentifiers6UTTypeVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for UTType();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void _s22UniformTypeIdentifiers6UTTypeVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s22UniformTypeIdentifiers6UTTypeVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s22UniformTypeIdentifiers6UTTypeVSgMaTm_3(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t AsyncImage.didChangeURL(oldValue:newValue:)(uint64_t a1, void (*a2)(unsigned char *, unsigned char *, uint64_t), uint64_t a3)
{
  uint64_t v79 = a2;
  unint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v73 = &v63[-v6];
  uint64_t v67 = type metadata accessor for TaskConfig(0);
  uint64_t v69 = *(void *)(v67 - 8);
  MEMORY[0x1F4188790](v67);
  uint64_t v70 = v7;
  uint64_t v71 = &v63[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v72 = &v63[-v9];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v80 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v77 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v68 = v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v75 = &v63[-v13];
  type metadata accessor for (URL?, URL?)();
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v63[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], v4);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v76 = &v63[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v21);
  uint64_t v74 = &v63[-v22];
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = &v63[-v24];
  uint64_t v26 = type metadata accessor for LoadingState(0);
  uint64_t v27 = v26 - 8;
  MEMORY[0x1F4188790](v26);
  int v29 = &v63[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v78 = a3;
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  uint64_t v66 = v30;
  State.wrappedValue.getter();
  uint64_t v31 = *(int *)(v27 + 28);
  uint64_t v32 = (uint64_t)v79;
  _s10Foundation3URLVSgWOcTm_0((uint64_t)&v29[v31], (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, v18, v4);
  outlined destroy of LoadingState((uint64_t)v29, type metadata accessor for LoadingState);
  uint64_t v33 = (uint64_t)&v17[*(int *)(v15 + 56)];
  _s10Foundation3URLVSgWOcTm_0(v32, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, v18, v4);
  _s10Foundation3URLVSgWOcTm_0((uint64_t)v25, v33, (unint64_t *)&lazy cache variable for type metadata for URL?, v18, v4);
  int v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  if (v34((uint64_t)v17, 1, v10) == 1)
  {
    _s10Foundation3URLVSgWOhTm_2((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    if (v34(v33, 1, v10) == 1) {
      return _s10Foundation3URLVSgWOhTm_2((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    }
  }
  else
  {
    int v36 = v74;
    _s10Foundation3URLVSgWOcTm_0((uint64_t)v17, (uint64_t)v74, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    if (v34(v33, 1, v10) != 1)
    {
      uint64_t v37 = v80;
      int v38 = v75;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v80 + 32))(v75, v33, v10);
      lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
      int v64 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
      v39(v38, v10);
      double v40 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v41 = v36;
      uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      _s10Foundation3URLVSgWOhTm_2((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      v39(v41, v10);
      uint64_t v32 = (uint64_t)v79;
      uint64_t result = _s10Foundation3URLVSgWOhTm_2((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, v40, v42);
      if (v64) {
        return result;
      }
      goto LABEL_8;
    }
    _s10Foundation3URLVSgWOhTm_2((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    (*(void (**)(unsigned char *, uint64_t))(v80 + 8))(v36, v10);
  }
  outlined destroy of LoadingState((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for (URL?, URL?));
LABEL_8:
  unsigned __int8 v43 = v76;
  _s10Foundation3URLVSgWOcTm_0(v32, (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  if (v34((uint64_t)v43, 1, v10) == 1)
  {
    _s10Foundation3URLVSgWOhTm_2((uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    return AsyncImage.resetLoadingState()();
  }
  else
  {
    uint64_t v44 = v80;
    uint64_t v79 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v80 + 32);
    long long v45 = v77;
    v79(v77, v43, v10);
    uint64_t v46 = v78;
    uint64_t v47 = v10;
    uint64_t v65 = v10;
    uint64_t v48 = v81;
    uint64_t v49 = (uint64_t)v72;
    State.projectedValue.getter();
    uint64_t v50 = *(void *)(v48 + *(int *)(v46 + 40));
    uint64_t v51 = v67;
    *(void *)(v49 + *(int *)(v67 + 20)) = *(void *)(v48 + *(int *)(v46 + 36));
    *(void *)(v49 + *(int *)(v51 + 24)) = v50;
    swift_retain();
    uint64_t v52 = (uint64_t)v73;
    static TaskPriority.userInitiated.getter();
    uint64_t v53 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    double v54 = v75;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v44 + 16))(v75, v45, v47);
    double v55 = v71;
    outlined init with copy of LoadingState(v49, (uint64_t)v71, type metadata accessor for TaskConfig);
    unint64_t v56 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    unint64_t v57 = (v68 + *(unsigned __int8 *)(v69 + 80) + v56) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = 0;
    *(void *)(v58 + 24) = 0;
    uint64_t v59 = v54;
    uint64_t v60 = v65;
    v79((unsigned char *)(v58 + v56), v59, v65);
    outlined init with take of AsyncImage<Image>((uint64_t)v55, v58 + v57, type metadata accessor for TaskConfig);
    uint64_t v61 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v52, (uint64_t)&async function pointer to partial apply for closure #1 in AsyncImage.didChangeURL(oldValue:newValue:), v58);
    _s10Foundation3URLVSgWOhTm_2(v52, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
    double v62 = v77;
    AsyncImage.updateTask(_:url:)(v61, (uint64_t)v77, v46);
    swift_release();
    outlined destroy of LoadingState(v49, type metadata accessor for TaskConfig);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v44 + 8))(v62, v60);
  }
}

uint64_t outlined destroy of LoadingState(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void destroy for LoadingState(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  unint64_t v7 = *(void *)(a1 + *(int *)(a2 + 24));

  outlined consume of AsyncImagePhase(v7);
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s10Foundation3URLVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s10Foundation3URLVSgMaTm_4(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _s10Foundation3URLVSgWOcTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s10Foundation3URLVSgMaTm_6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _s10Foundation3URLVSgWOcTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _s10Foundation3URLVSgMaTm_7(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s10Foundation3URLVSgWOcTm_3(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for FileExportOperation?(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t type metadata accessor for TaskConfig(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TaskConfig);
}

uint64_t type metadata accessor for TaskResult(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TaskResult);
}

uint64_t AsyncImage.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v62 = a2;
  uint64_t v55 = *(void *)(a1 - 8);
  uint64_t v56 = *(void *)(v55 + 64);
  MEMORY[0x1F4188790](a1);
  double v54 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
  uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  uint64_t v60 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v50 = (uint64_t)&v47 - v7;
  uint64_t v8 = type metadata accessor for LoadingState(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = type metadata accessor for AsyncImage.Inner();
  uint64_t v51 = type metadata accessor for ModifiedContent();
  type metadata accessor for _ValueActionModifier2<URL?>();
  uint64_t v58 = type metadata accessor for ModifiedContent();
  uint64_t v59 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  uint64_t v49 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v57 = (char *)&v47 - v17;
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  unint64_t v18 = *(void *)&v11[*(int *)(v9 + 32)];
  outlined copy of AsyncImagePhase(v18);
  outlined destroy of LoadingState((uint64_t)v11, type metadata accessor for LoadingState);
  uint64_t v19 = (uint64_t *)(v2 + *(int *)(a1 + 44));
  uint64_t v20 = *v19;
  uint64_t v21 = v19[1];
  unint64_t v73 = v18;
  uint64_t v74 = v20;
  uint64_t v75 = v21;
  uint64_t v48 = v12;
  uint64_t v47 = v13;
  uint64_t v22 = implicit closure #1 in AsyncImage.body.getter(v2, v12, v13);
  uint64_t v24 = v23;
  uint64_t v25 = implicit closure #3 in AsyncImage.body.getter(v3, v12, v13);
  unint64_t v69 = (unint64_t)v22;
  *(void *)&long long v70 = v24;
  *((void *)&v70 + 1) = v25;
  *(void *)&long long v71 = v26;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](&v76, &v69, v14, MEMORY[0x1E4F40EE0], WitnessTable);
  swift_release();
  swift_release();
  outlined consume of AsyncImagePhase(v18);
  swift_release();
  unint64_t v69 = v76;
  long long v70 = v77;
  long long v71 = v78;
  long long v72 = v79;
  uint64_t v28 = v50;
  int v29 = v53;
  uint64_t v30 = v52;
  _s10Foundation3URLVSgWOcTm_0(v3, v50, (unint64_t *)&lazy cache variable for type metadata for URL?, v53, v52);
  uint64_t v31 = v55;
  uint64_t v32 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v3, a1);
  uint64_t v33 = v31;
  unint64_t v34 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v47;
  *(void *)(v35 + 16) = v48;
  *(void *)(v35 + 24) = v36;
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v35 + v34, v32, a1);
  uint64_t v37 = MEMORY[0x1E4F40ED8];
  uint64_t v67 = WitnessTable;
  uint64_t v68 = MEMORY[0x1E4F40ED8];
  uint64_t v38 = swift_getWitnessTable();
  lazy protocol witness table accessor for type URL? and conformance <A> A?();
  uint64_t v39 = v49;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  _s10Foundation3URLVSgWOhTm_2(v28, (unint64_t *)&lazy cache variable for type metadata for URL?, v29, v30);
  uint64_t v40 = v71;
  uint64_t v41 = v72;
  outlined consume of AsyncImagePhase(v69);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v40);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v41);
  uint64_t v42 = lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type _ValueActionModifier2<URL?> and conformance _ValueActionModifier2<A>, (void (*)(uint64_t))type metadata accessor for _ValueActionModifier2<URL?>);
  uint64_t v65 = v38;
  uint64_t v66 = v42;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = v37;
  uint64_t v43 = v59;
  swift_getWitnessTable();
  uint64_t v44 = v57;
  static ViewBuilder.buildExpression<A>(_:)(v39);
  long long v45 = *(void (**)(char *, uint64_t))(v61 + 8);
  v45(v39, v43);
  static ViewBuilder.buildExpression<A>(_:)(v44);
  return ((uint64_t (*)(char *, uint64_t))v45)(v44, v43);
}

uint64_t outlined destroy of URL?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation3URLVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for UTType?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s10Foundation3URLVSgWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s10Foundation3URLVSgWOhTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s10Foundation3URLVSgMaTm_4(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s10Foundation3URLVSgWOhTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s10Foundation3URLVSgWOhTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s10Foundation3URLVSgMaTm_9(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t lazy protocol witness table accessor for type URL and conformance URL(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation3URLVACSQAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ValueActionModifier2<URL?>()
{
  if (!lazy cache variable for type metadata for _ValueActionModifier2<URL?>)
  {
    _s10Foundation3URLVSgMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type URL? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _ValueActionModifier2();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ValueActionModifier2<URL?>);
    }
  }
}

uint64_t type metadata accessor for AsyncImage.Inner()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type URL? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type URL? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type URL? and conformance <A> A?)
  {
    _s10Foundation3URLVSgMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type URL and conformance URL(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL? and conformance <A> A?);
  }
  return result;
}

uint64_t (*implicit closure #1 in AsyncImage.body.getter(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = type metadata accessor for AsyncImage();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, v6);
  return partial apply for implicit closure #2 in implicit closure #1 in AsyncImage.body.getter;
}

uint64_t (*implicit closure #3 in AsyncImage.body.getter(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = type metadata accessor for AsyncImage();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, v6);
  return partial apply for implicit closure #4 in implicit closure #3 in AsyncImage.body.getter;
}

uint64_t outlined init with copy of LoadingState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (URL?, URL?)()
{
  if (!lazy cache variable for type metadata for (URL?, URL?))
  {
    _s10Foundation3URLVSgMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (URL?, URL?));
    }
  }
}

void destroy for TaskResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }

  uint64_t v6 = *(void **)(a1 + *(int *)(a2 + 28));
}

uint64_t destroy for TaskConfig(uint64_t a1)
{
  swift_release();
  swift_release();
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  swift_release();
  uint64_t v4 = type metadata accessor for LoadingState(0);
  uint64_t v5 = v3 + *(int *)(v4 + 20);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  outlined consume of AsyncImagePhase(*(void *)(v3 + *(int *)(v4 + 24)));

  return swift_release();
}

void *initializeWithCopy for TaskConfig(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  double v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for LoadingState(0);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v23 = v9;
  uint64_t v24 = v8;
  __dst = &v8[v11];
  uint64_t v22 = v10;
  uint64_t v12 = &v9[v11];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v15(v12, 1, v13))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v17 = *(int *)(v22 + 24);
  uint64_t v18 = *(void *)&v9[v17];
  outlined copy of AsyncImagePhase(*(void *)&v23[v17]);
  *(void *)&v24[v17] = v18;
  uint64_t v19 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_retain();
  return a1;
}

uint64_t outlined init with take of AsyncImage<Image>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized static SceneBridge.targetContentIdentifierForExternalEvent(userActivity:url:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v30 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v30 - v15;
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v30 - v19;
  if (!a1) {
    goto LABEL_11;
  }
  id v21 = objc_msgSend(a1, sel_targetContentIdentifier, v18);
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    goto LABEL_4;
  }
  id v26 = objc_msgSend(a1, sel_webpageURL);
  if (v26)
  {
    uint64_t v27 = v26;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v16, 1, 1, v4);
  }
  outlined init with take of UserActivityTrackingInfo?((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v20, 1, v4))
  {
    outlined destroy of URL?((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for URL?);
LABEL_11:
    outlined init with copy of URL?(a2, (uint64_t)v13);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v20, v4);
  outlined destroy of URL?((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for URL?);
  uint64_t v23 = URL.absoluteString.getter();
  uint64_t v25 = v29;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_4:
  outlined init with copy of URL?(a2, (uint64_t)v13);
  if (v25)
  {
    outlined destroy of URL?((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for URL?);
    return v23;
  }
LABEL_12:
  outlined init with copy of URL?((uint64_t)v13, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    outlined destroy of URL?((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for URL?);
    outlined destroy of URL?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for URL?);
    return 0;
  }
  else
  {
    uint64_t v23 = URL.absoluteString.getter();
    outlined destroy of URL?((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for URL?);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  return v23;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URL?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for URL?(uint64_t a1)
{
}

uint64_t View.keyboardShortcut(_:modifiers:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[2] = a2;
  char v7 = 0;
  return View.keyboardShortcut(_:)(v6, a3, a4);
}

uint64_t key path setter for EnvironmentValues.keyboardShortcut : EnvironmentValues()
{
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter();

  return swift_bridgeObjectRelease();
}

uint64_t View.keyboardShortcut(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v25 = a3;
  type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = &v19[-v5];
  type metadata accessor for ViewInputFlagModifier<HasKeyboardShortcut>();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v19[-v8];
  uint64_t v11 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v21 = a1[2];
  uint64_t v12 = v21;
  unsigned __int8 v13 = *((unsigned char *)a1 + 24);
  int v20 = v13;
  swift_getKeyPath();
  uint64_t v30 = v11;
  uint64_t v31 = v10;
  uint64_t v32 = v12;
  unsigned __int8 v33 = v13;
  uint64_t v14 = v22;
  View.environment<A>(_:_:)();
  swift_release();
  uint64_t v15 = _s10Foundation3URLVACSQAAWlTm_0(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>);
  uint64_t v28 = v14;
  uint64_t v29 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t HasKeyboardShortcut = lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
  View.input<A>(_:)((uint64_t)&type metadata for HasKeyboardShortcut, v4, (uint64_t)&type metadata for HasKeyboardShortcut, WitnessTable, HasKeyboardShortcut);
  (*(void (**)(unsigned char *, uint64_t))(v23 + 8))(v6, v4);
  uint64_t v30 = v11;
  uint64_t v31 = v10;
  uint64_t v32 = v21;
  unsigned __int8 v33 = v20;
  uint64_t v26 = WitnessTable;
  uint64_t v27 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  View._trait<A>(_:_:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v24 + 8))(v9, v7);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardShortcut?>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(255, &lazy cache variable for type metadata for KeyboardShortcut?, (uint64_t)&type metadata for KeyboardShortcut, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardShortcut?>);
    }
  }
}

void type metadata accessor for ViewInputFlagModifier<HasKeyboardShortcut>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>)
  {
    lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>);
    }
  }
}

uint64_t specialized EnvironmentValues.subscript.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonKeyboardShortcutKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonKeyboardShortcutKey>);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
  swift_retain();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v0;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t destroy for WindowVisibilityButton()
{
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut()
{
  unint64_t result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut;
  if (!lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasKeyboardShortcut and conformance HasKeyboardShortcut);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)(*(unsigned int *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t outlined init with take of CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandGroupPlacementBox(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CommandGroupPlacementBox(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for CommandGroupPlacementBox);
}

unint64_t *assignWithCopy for AsyncImage.Inner(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  unint64_t v5 = *a1;
  *a1 = v4;
  outlined consume of AsyncImagePhase(v5);
  unint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t View.containerRelativeFrame(_:alignment:_:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[0] = a1;
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v11 = a4;
  uint64_t v12 = a5;
  return MEMORY[0x18C113660](v8, a6, &type metadata for ContainerRelativeFrameModifier, a7);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))FlipForRTLEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))ScrollViewContentFrameSize.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))specialized ToolbarAppearanceModifier.PreferenceValue.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))RowTransformTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized _TraitWritingTableRowModifier.AddTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))specialized WithCommandFlag.SetFlag.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))WindowResizabilityModifier.UpdateSceneList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))_SymbolEffectsModifier.EffectsEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))_IndefiniteSymbolEffectModifier.EffectEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))_ConditionalSymbolEffectModifier.EffectEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))ApplyActivationConditions.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))WindowDefaultsPropertyModifier.UpdateSceneList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void))PersistentSystemOverlaysSceneModifier.UpdateSceneList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))TableRowForegroundStyleModifier.ChildEnvironment.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))ScaledSize.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))specialized PlatformViewIdentifiedViews.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))_GridCellRangeModifier.CellRangeTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))_GridCellSizeModifier.MergedCellTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))_GridAnchorModifier.AnchoredCellTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))_GridAlignmentModifier.AlignedCellTrait.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void))_GridUnsizedAxesModifier.UnsizedAxesCellTrait.value.getter);
}

uint64_t initializeWithCopy for SubmitScopeModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityChildrenModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return static AccessibilityChildrenModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), a5);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableUnifiedLayoutFeature()
{
  return &protocol witness table for EnableUnifiedLayoutFeature;
}

uint64_t type metadata completion function for FallbackDelegateBox()
{
  return type metadata completion function for FallbackDelegateBox();
}

{
  return swift_initClassMetadata2();
}

_UNKNOWN **base witness table accessor for View in ResolvedShadowView<A>()
{
  return &protocol witness table for ResolvedShadowView<A>;
}

_UNKNOWN **base witness table accessor for View in BarEdgeReader<A>()
{
  return &protocol witness table for BarEdgeReader<A>;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BarEdgeReader<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static BarEdgeReader._makeView(view:inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t type metadata completion function for AVKitCaptureButtonBridge()
{
  return swift_initClassMetadata2();
}

uint64_t assignWithTake for ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t closure #1 in static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t *))
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  unsigned int v19 = *((_DWORD *)a2 + 14);
  unsigned int v20 = *((_DWORD *)a2 + 9);
  unsigned int v17 = *((_DWORD *)a2 + 16);
  unsigned int v18 = *((_DWORD *)a2 + 15);
  unsigned int v15 = *((_DWORD *)a2 + 18);
  unsigned int v16 = *((_DWORD *)a2 + 17);
  int v13 = *((_DWORD *)a2 + 20);
  unsigned int v14 = *((_DWORD *)a2 + 19);
  uint64_t v31 = *a2;
  int v32 = v4;
  uint64_t v33 = v5;
  *(void *)&long long v34 = __PAIR64__(v7, v6);
  *((void *)&v34 + 1) = __PAIR64__(v20, v8);
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  *(void *)&long long v37 = __PAIR64__(v18, v19);
  *((void *)&v37 + 1) = __PAIR64__(v16, v17);
  unint64_t v38 = __PAIR64__(v14, v15);
  int v39 = v13;
  type metadata accessor for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  uint64_t v22 = v31;
  int v23 = v4;
  uint64_t v24 = v5;
  long long v25 = v34;
  uint64_t v26 = v9;
  uint64_t v27 = v10;
  long long v28 = v37;
  unint64_t v29 = __PAIR64__(v14, v15);
  int v30 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a4(v11, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment);
  }
  return result;
}

uint64_t static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a1;
  type metadata accessor for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>();
  _GraphValue.value.getter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v6;
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  lazy protocol witness table accessor for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect();
  swift_retain();
  static RendererEffect.makeRendererEffect(effect:inputs:body:)();
  return swift_release();
}

void type metadata accessor for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_AccessibilityIgnoresInvertColorsViewModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier;
  if (!lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier and conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect;
  if (!lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreColorInvertEffect and conformance IgnoreColorInvertEffect);
  }
  return result;
}

uint64_t initializeWithCopy for UpdateViewFocusItem(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  a4(a1 + 24, a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for SceneID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

Swift::Void __swiftcall AppSceneDelegate.scenesDidChange(phaseChanged:)(Swift::Bool phaseChanged)
{
  uint64_t v3 = v1;
  type metadata accessor for PPTTestHost?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  unsigned int v7 = (char *)&v172 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v172 - v10;
  MEMORY[0x18C113CA0](v9);
  AppSceneDelegate.sceneItem()(v197);
  outlined init with copy of SceneList.Item((uint64_t)v197, (uint64_t)v196);
  uint64_t v12 = &unk_1E9019000;
  if (!phaseChanged && *(void *)((char *)v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_lastVersion) == v196[20])
  {
    outlined destroy of SceneList.Item((uint64_t)v196);
LABEL_104:
    outlined destroy of SceneList.Item((uint64_t)v197);
    static Update.end()();
    return;
  }
  outlined destroy of SceneList.Item((uint64_t)v196);
  outlined init with copy of SceneList.Item.Value((uint64_t)v197, (uint64_t)&v188);
  int v13 = &unk_1E9019000;
  switch(v195)
  {
    case 0:
      uint64_t v14 = *((void *)&v188 + 1);
      unsigned int v15 = (uint8_t *)v189;
      char v16 = BYTE8(v189);
      uint64_t v17 = v190;
      long long v18 = v191;
      uint64_t v19 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window;
      unsigned int v20 = *(void **)((char *)v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      if (v20)
      {
        double v175 = (uint8_t *)v189;
        id v176 = (id)v188;
        uint64_t v174 = *((void *)&v189 + 1);
        id v21 = objc_msgSend(v20, sel_rootViewController);
        if (v21)
        {
          uint64_t v22 = v21;
          uint64_t v173 = v17;
          type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for UIHostingController);
          uint64_t v23 = swift_dynamicCastClass();
          uint64_t v24 = v14;
          if (v23)
          {
            long long v25 = (void *)v23;
            long long v172 = v18;
            uint64_t v177 = v1;
            AppSceneDelegate.makeRootView(_:)((uint64_t)v176, v185);
            specialized UIHostingController.rootView.setter((uint64_t)v185);
            uint64_t v26 = *(void **)((char *)v25 + direct field offset for UIHostingController.host);
            uint64_t v27 = *((void *)&v198 + 1);
            uint64_t v28 = *(void *)((char *)v26 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v26) + 0x68));
            uint64_t v29 = *(void *)(v28 + 136);
            *(void *)(v28 + 136) = v198;
            *(void *)(v28 + 144) = v27;
            swift_retain();
            int v30 = v26;
            swift_retain();
            outlined consume of EnvironmentValues?(v29);
            if (MEMORY[0x18C119DF0](v28 + 24))
            {
              swift_getObjectType();
              LOWORD(v185[0]) = 2;
              ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

              swift_unknownObjectRelease();
            }
            else
            {
            }
            uint64_t v3 = v177;
            char v110 = *(void **)((char *)v177 + v19);
            uint64_t v12 = (void *)&unk_1E9019000;
            int v13 = (void *)&unk_1E9019000;
            uint64_t v111 = v172;
            if (v110)
            {
              id v112 = objc_msgSend(v110, sel_windowScene);
              char v113 = v175;
              if (v112)
              {
                uint64_t v114 = v112;
                id v115 = objc_msgSend(v112, sel_sizeRestrictions);

                if (v115)
                {

                  uint64_t v116 = 4;
                  int v13 = (void *)&unk_1E9019000;
                  switch(v200)
                  {
                    case 1:
                      uint64_t v142 = unk_1ED41CFB8;
                      if ((unk_1ED41CFB8 & ~qword_1ED41CFB0) == 0) {
                        uint64_t v142 = 0;
                      }
                      uint64_t v116 = v142 | qword_1ED41CFB0;
                      break;
                    case 2:
                      break;
                    default:
                      uint64_t v116 = 0;
                      break;
                  }
                  uint64_t v143 = (void *)((char *)v25 + direct field offset for UIHostingController.sizingOptions);
                  swift_beginAccess();
                  uint64_t v144 = *v143;
                  uint64_t *v143 = v116;
                  *(void *)&v184[0] = v144;
                  (*(void (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v25) + 0x3B0))(v184);
                  swift_release();
                  outlined consume of Text?(v24, (uint64_t)v175, (char)v174, v173);
                  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v111);

                  goto LABEL_94;
                }
                swift_release();

                outlined consume of Text?(v24, (uint64_t)v113, (char)v174, v173);
                outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v111);
LABEL_70:
                int v13 = (void *)&unk_1E9019000;
                goto LABEL_94;
              }
              swift_release();

              uint64_t v117 = v24;
              double v118 = v113;
            }
            else
            {
              swift_release();

              uint64_t v117 = v24;
              double v118 = v175;
            }
            outlined consume of Text?(v117, (uint64_t)v118, (char)v174, v173);
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v111);
            goto LABEL_94;
          }
          swift_release();

          uint64_t v84 = v14;
          char v86 = (char)v174;
          uint64_t v85 = v175;
          uint64_t v87 = v173;
LABEL_46:
          outlined consume of Text?(v84, (uint64_t)v85, v86, v87);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
          uint64_t v12 = (void *)&unk_1E9019000;
          goto LABEL_94;
        }
        swift_release();
        uint64_t v84 = v14;
        char v86 = (char)v174;
        uint64_t v85 = v175;
      }
      else
      {
        swift_release();
        uint64_t v84 = v14;
        uint64_t v85 = v15;
        char v86 = v16;
      }
      uint64_t v87 = v17;
      goto LABEL_46;
    case 2:
      v186[4] = v192;
      v186[5] = v193;
      v187[0] = v194[0];
      *(_OWORD *)((char *)v187 + 9) = *(_OWORD *)((char *)v194 + 9);
      v186[0] = v188;
      v186[1] = v189;
      v186[2] = v190;
      v186[3] = v191;
      static Log.documents.getter();
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = *(void *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v7, 1, v39) == 1)
      {
        outlined destroy of TaskPriority?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      }
      else
      {
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = (uint8_t *)swift_slowAlloc();
          id v176 = (id)swift_slowAlloc();
          *(void *)&v185[0] = v176;
          double v175 = v53;
          *(_DWORD *)uint64_t v53 = 136315138;
          uint64_t v174 = (v53 + 4);
          id v2 = objc_msgSend(self, sel__printHierarchy);
          uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v177 = v3;
          unint64_t v56 = v55;

          *(void *)&v184[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, (uint64_t *)v185);
          uint64_t v12 = (void *)&unk_1E9019000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v3 = v177;
          swift_bridgeObjectRelease();
          unint64_t v57 = v175;
          _os_log_impl(&dword_1872C6000, v51, v52, "DocumentGroup: scened did change. VC hierarchy:\n%s", v175, 0xCu);
          id v58 = v176;
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v58, -1, -1);
          MEMORY[0x18C119C60](v57, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v39);
      }
      int v13 = &unk_1E9019000;
      uint64_t v59 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window;
      uint64_t v60 = *(void **)((char *)v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      if (!v60) {
        goto LABEL_60;
      }
      id v61 = objc_msgSend(v60, sel_rootViewController);
      if (!v61) {
        goto LABEL_60;
      }
      uint64_t v62 = v61;
      unsigned int v63 = objc_msgSend(v61, sel__appearState);

      if (v63 != 2) {
        goto LABEL_60;
      }
      char v64 = AppSceneDelegate.isDocumentViewControllerRootEnabled.getter();
      uint64_t v65 = *(void **)((char *)v3 + v59);
      if ((v64 & 1) == 0)
      {
        if (v65)
        {
          id v105 = objc_msgSend(v65, sel_rootViewController);
          if (v105)
          {
            char v106 = v105;
            type metadata accessor for DocumentBrowserViewController();
            uint64_t v107 = swift_dynamicCastClass();
            if (v107)
            {
              uint64_t v108 = v107;
              AppSceneDelegate.rootModifier.getter((uint64_t)v185);
              uint64_t v109 = v108 + OBJC_IVAR____TtC7SwiftUI29DocumentBrowserViewController_rootModifier;
              swift_beginAccess();
              outlined assign with copy of RootModifier((uint64_t)v185, v109);
              swift_endAccess();
              DocumentBrowserViewController.updateHosts()();
              outlined destroy of RootModifier((uint64_t)v185);
            }
          }
        }
LABEL_60:
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v186);
LABEL_94:
        char v137 = *(void **)((char *)v3 + v13[334]);
        if (!v137)
        {
LABEL_103:
          *(void *)((char *)v3 + v12[336]) = v197[20];
          goto LABEL_104;
        }
        if (v199)
        {
          id v138 = v137;
          uint64_t v139 = swift_bridgeObjectRetain();
          specialized AccessibilityProperties.subscript.getter(v139, (uint64_t)v184);
          if (*((void *)&v184[0] + 1))
          {
            if (LOBYTE(v184[1]) < 2u)
            {
              uint64_t v140 = (void *)MEMORY[0x18C115780](*(void *)&v184[0], *((void *)&v184[0] + 1));
              swift_bridgeObjectRelease();
LABEL_102:
              objc_msgSend(v137, sel_setAccessibilityIdentifier_, v140);
              swift_bridgeObjectRelease();

              goto LABEL_103;
            }
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          id v141 = v137;
        }
        uint64_t v140 = 0;
        goto LABEL_102;
      }
      if (!v65 || (id v66 = objc_msgSend(v65, sel_rootViewController)) == 0)
      {
        unint64_t v76 = 0;
        unint64_t v73 = 0;
        unint64_t v69 = 0;
        goto LABEL_134;
      }
      uint64_t v67 = v66;
      type metadata accessor for UIKitNavigationController();
      uint64_t v68 = (void *)swift_dynamicCastClass();
      unint64_t v69 = v68;
      if (!v68)
      {

        unint64_t v76 = 0;
        unint64_t v73 = 0;
        goto LABEL_134;
      }
      id v70 = objc_msgSend(v68, sel_viewControllers);
      unint64_t v71 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v72 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v73 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v73) {
          goto LABEL_34;
        }
      }
      else
      {
        unint64_t v73 = *(void **)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v73)
        {
LABEL_34:
          if ((v72 & 0xC000000000000001) != 0) {
            goto LABEL_160;
          }
          if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            id v2 = v12;
            uint64_t v12 = v3;
            id v74 = *(id *)(v72 + 32);
            goto LABEL_37;
          }
          __break(1u);
          goto LABEL_162;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v76 = 0;
      goto LABEL_134;
    case 5:
      long long v41 = v188;
      int v42 = v189;
      uint64_t v43 = (void *)*((void *)&v189 + 1);
      long long v44 = v190;
      long long v45 = *(void **)((char *)v3 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      if (!v45) {
        goto LABEL_49;
      }
      id v46 = objc_msgSend(v45, sel_rootViewController);
      if (!v46) {
        goto LABEL_49;
      }
      uint64_t v47 = v46;
      type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for UIHostingController);
      uint64_t v48 = swift_dynamicCastClass();
      if (v48)
      {
        uint64_t v49 = v48;
        uint64_t v174 = *((void *)&v41 + 1);
        id v176 = v43;
        LODWORD(v175) = v42;
        if ((void)v44 == 1)
        {
          *(void *)&v185[0] = *((void *)&v44 + 1);
          type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for ClarityUIInterfaceIdiomModifier, MEMORY[0x1E4F3FBA0]);
          lazy protocol witness table accessor for type ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier> and conformance <> ModifiedContent<A, B>();
          swift_retain();
          uint64_t v50 = AnyView.init<A>(_:)();
        }
        else
        {
          swift_retain();
          uint64_t v50 = *((void *)&v44 + 1);
        }
        uint64_t v177 = v3;
        AppSceneDelegate.makeRootView(_:)(v50, v185);
        swift_release();
        specialized UIHostingController.rootView.setter((uint64_t)v185);
        char v88 = *(void **)(v49 + direct field offset for UIHostingController.host);
        uint64_t v89 = *((void *)&v198 + 1);
        uint64_t v90 = *(void *)((char *)v88 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v88) + 0x68));
        uint64_t v91 = *(void *)(v90 + 136);
        *(void *)(v90 + 136) = v198;
        *(void *)(v90 + 144) = v89;
        swift_retain();
        uint64_t v92 = v88;
        swift_retain();
        outlined consume of EnvironmentValues?(v91);
        if (MEMORY[0x18C119DF0](v90 + 24))
        {
          swift_getObjectType();
          LOWORD(v185[0]) = 2;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

          swift_unknownObjectRelease();
        }
        else
        {
        }
        outlined consume of SceneID(v41, (uint64_t)v174, (char)v175);
        outlined consume of UISceneAdaptorConfiguration.Kind((uint64_t)v176, v44);
        swift_release();
        uint64_t v3 = v177;
        goto LABEL_69;
      }

LABEL_49:
      outlined consume of SceneID(v41, *((uint64_t *)&v41 + 1), v42);
      outlined consume of UISceneAdaptorConfiguration.Kind((uint64_t)v43, v44);
      swift_release();
      uint64_t v12 = (void *)&unk_1E9019000;
      goto LABEL_94;
    case 7:
      v185[4] = v192;
      v185[5] = v193;
      v185[6] = v194[0];
      v185[7] = v194[1];
      v185[0] = v188;
      v185[1] = v189;
      v185[2] = v190;
      v185[3] = v191;
      uint64_t v31 = OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window;
      int v32 = *(void **)((char *)v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_window);
      if (!v32) {
        goto LABEL_93;
      }
      uint64_t v33 = &selRef_showsMenuAsPrimaryAction;
      id v34 = objc_msgSend(v32, sel_rootViewController);
      if (!v34) {
        goto LABEL_93;
      }
      uint64_t v35 = v34;
      unsigned int v36 = objc_msgSend(v34, sel__appearState);

      if (v36 != 2) {
        goto LABEL_93;
      }
      static Log.documents.getter();
      uint64_t v37 = type metadata accessor for Logger();
      uint64_t v38 = *(void *)(v37 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v11, 1, v37) == 1)
      {
        outlined destroy of TaskPriority?((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
      }
      else
      {
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.debug.getter();
        LODWORD(v176) = v94;
        if (os_log_type_enabled(v93, v94))
        {
          char v95 = (uint8_t *)swift_slowAlloc();
          uint64_t v173 = swift_slowAlloc();
          *(void *)&v184[0] = v173;
          double v175 = v95;
          *(_DWORD *)char v95 = 136315138;
          *((void *)&v172 + 1) = v95 + 4;
          uint64_t v96 = v38;
          id v97 = objc_msgSend(self, sel__printHierarchy);
          uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v174 = v93;
          uint64_t v99 = v3;
          uint64_t v100 = v98;
          unint64_t v102 = v101;

          uint64_t v38 = v96;
          uint64_t v33 = &selRef_showsMenuAsPrimaryAction;
          uint64_t v103 = v100;
          uint64_t v3 = v99;
          *(void *)&v183[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v102, (uint64_t *)v184);
          uint64_t v12 = (void *)&unk_1E9019000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          int v13 = (void *)&unk_1E9019000;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1872C6000, v174, (os_log_type_t)v176, "DocumentGroupIntroduction: scened did change. VC hierarchy:\n%s", v175, 0xCu);
          uint64_t v104 = v173;
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v104, -1, -1);
          MEMORY[0x18C119C60](v175, -1, -1);
        }
        else
        {
        }
        (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v37);
      }
      uint64_t v119 = *(void **)((char *)v3 + v31);
      if (!v119 || (id v120 = [v119 v33[236]]) == 0)
      {
LABEL_93:
        outlined release of DocumentIntroductionConfiguration(v185);
        goto LABEL_94;
      }
      unint64_t v69 = v120;
      type metadata accessor for UIKitNavigationController();
      uint64_t v121 = (void *)swift_dynamicCastClass();
      if (!v121)
      {
        outlined release of DocumentIntroductionConfiguration(v185);

        goto LABEL_94;
      }
      id v122 = objc_msgSend(v121, sel_viewControllers);
      unint64_t v123 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v124 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v124 >> 62))
      {
        char v125 = *(void **)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v125) {
          goto LABEL_82;
        }
LABEL_126:

LABEL_131:
        swift_bridgeObjectRelease();
        outlined release of DocumentIntroductionConfiguration(v185);
        goto LABEL_70;
      }
      swift_bridgeObjectRetain();
      char v125 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v125) {
        goto LABEL_126;
      }
LABEL_82:
      if ((v124 & 0xC000000000000001) != 0)
      {
        id v126 = (id)MEMORY[0x18C117680](0, v124);
      }
      else
      {
        if (!*(void *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_129;
        }
        id v126 = *(id *)(v124 + 32);
      }
      char v125 = v126;
      swift_bridgeObjectRelease();
      id v127 = objc_msgSend(v125, sel_childViewControllers);
      unint64_t v123 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v123 >> 62))
      {
        unint64_t v72 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v72) {
          goto LABEL_87;
        }
        goto LABEL_130;
      }
LABEL_129:
      swift_bridgeObjectRetain();
      unint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v72)
      {
LABEL_130:

        goto LABEL_131;
      }
LABEL_87:
      uint64_t v177 = v3;
      if ((v123 & 0xC000000000000001) != 0)
      {
        id v128 = (id)MEMORY[0x18C117680](0, v123);
LABEL_90:
        uint64_t v129 = v128;
        swift_bridgeObjectRelease();
        type metadata accessor for CustomizableDocumentViewController();
        uint64_t v130 = swift_dynamicCastClass();
        if (v130)
        {
          uint64_t v131 = (char *)v130;
          long long v132 = v198;
          uint64_t v133 = *(void **)&v185[4];
          if (*(void *)&v185[4])
          {
            char v134 = BYTE8(v185[3]);
            id v176 = *(id *)&v185[3];
            v184[0] = v198;
            v183[0] = 0uLL;
            *(void *)&v181[0] = 0;
            swift_retain();
            id v135 = v129;
            swift_retain();
            LOBYTE(v178[0]) = v134 & 1;
            uint64_t v136 = Text.resolveString(in:with:idiom:)();
            uint64_t v133 = (void *)MEMORY[0x18C115780](v136);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_retain();
            id v147 = v129;
            swift_retain();
          }
          objc_msgSend(v131, sel_setTitle_, v133);

          *(void *)&v131[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground] = *((void *)&v185[4] + 1);
          swift_retain();
          swift_release();
          *(void *)&v131[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions] = *(void *)&v185[7];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          long long v148 = v185[5];
          uint64_t v149 = *(void *)&v131[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView];
          *(_OWORD *)&v131[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView] = v185[5];
          outlined copy of AppIntentExecutor?(v148);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v149);
          long long v150 = v185[6];
          uint64_t v151 = *(void *)&v131[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView];
          *(_OWORD *)&v131[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView] = v185[6];
          outlined copy of AppIntentExecutor?(v150);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v151);
          v184[0] = v132;
          DocumentViewController.updateInheritedEnvironment(with:)((uint64_t *)v184);
          swift_release();
          swift_release();

          id v152 = v129;
          uint64_t v3 = v177;
          AppSceneDelegate.rootModifier.getter((uint64_t)v184);
          DocumentViewController.rootModifier.setter((uint64_t)v184);

          outlined release of DocumentIntroductionConfiguration(v185);
LABEL_69:
          uint64_t v12 = (void *)&unk_1E9019000;
        }
        else
        {

          outlined release of DocumentIntroductionConfiguration(v185);
          uint64_t v3 = v177;
        }
        goto LABEL_70;
      }
      if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v128 = *(id *)(v123 + 32);
        goto LABEL_90;
      }
      __break(1u);
LABEL_160:
      id v2 = v12;
      uint64_t v12 = v3;
      id v74 = (id)MEMORY[0x18C117680](0, v72);
LABEL_37:
      unint64_t v73 = v74;
      swift_bridgeObjectRelease();
      type metadata accessor for DocumentViewController();
      uint64_t v75 = swift_dynamicCastClass();
      if (v75)
      {
        unint64_t v76 = (void *)v75;
        id v77 = v73;
        goto LABEL_39;
      }
      id v145 = objc_msgSend(v73, sel_childViewControllers);
      unint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v71 >> 62))
      {
        unint64_t v76 = *(void **)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v3 = v12;
        if (!v76) {
          goto LABEL_163;
        }
        goto LABEL_115;
      }
LABEL_162:
      swift_bridgeObjectRetain();
      unint64_t v76 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v3 = v12;
      if (!v76)
      {
LABEL_163:
        swift_bridgeObjectRelease();
        goto LABEL_124;
      }
LABEL_115:
      if ((v71 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = v3;
        id v146 = (id)MEMORY[0x18C117680](0, v71);
LABEL_118:
        uint64_t v81 = v146;
        swift_bridgeObjectRelease();
        unint64_t v76 = (void *)swift_dynamicCastClass();
        if (v76)
        {
LABEL_39:
          v185[0] = v198;
          swift_retain();
          id v78 = v76;
          swift_retain();
          DocumentViewController.updateInheritedEnvironment(with:)((uint64_t *)v185);
          swift_release();
          swift_release();

          long long v79 = (char *)v78;
          AppSceneDelegate.rootModifier.getter((uint64_t)v185);
          DocumentViewController.rootModifier.setter((uint64_t)v185);

          uint64_t v80 = MEMORY[0x18C119DF0](&v79[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController]);
          if (!v80)
          {
LABEL_123:
            uint64_t v3 = v12;
LABEL_124:
            uint64_t v12 = v2;
LABEL_134:
            if (!static AppGraph.shared)
            {

              outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v186);
              goto LABEL_70;
            }
            double v154 = v3;
            if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E4F4E7A0])
            {
              uint64_t v155 = MEMORY[0x1E4FBC860];
            }
            else
            {
              uint64_t v155 = *(void *)AGGraphGetValue();
              swift_bridgeObjectRetain();
            }
            if (v76
              && (type metadata accessor for CustomizableDocumentViewController(), (uint64_t v156 = swift_dynamicCastClass()) != 0))
            {
              uint64_t v157 = *(void *)(v155 + 16);
              if (v157)
              {
                uint64_t v158 = (char *)v156;
                uint64_t v159 = v155 + 32;
                id v176 = v76;
                swift_bridgeObjectRetain();
                while (1)
                {
                  outlined init with copy of SceneList.Item(v159, (uint64_t)v183);
                  outlined init with copy of SceneList.Item.Value((uint64_t)v183, (uint64_t)v181);
                  if (v182 == 7) {
                    break;
                  }
                  outlined destroy of SceneList.Item.Value((uint64_t)v181);
                  outlined destroy of SceneList.Item((uint64_t)v183);
                  v159 += 280;
                  if (!--v157)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v12 = (void *)&unk_1E9019000;
                    goto LABEL_148;
                  }
                }
                v178[4] = v181[4];
                v178[5] = v181[5];
                v178[6] = v181[6];
                v178[7] = v181[7];
                v178[0] = v181[0];
                v178[1] = v181[1];
                v178[2] = v181[2];
                v178[3] = v181[3];
                outlined release of DocumentIntroductionConfiguration(v178);
                swift_bridgeObjectRelease();
                memcpy(v184, v183, 0x118uLL);
                swift_bridgeObjectRelease();
                uint64_t v12 = (void *)&unk_1E9019000;
                if (*((void *)&v184[16] + 1))
                {
                  memcpy(v185, v184, 0x118uLL);
                  outlined init with copy of SceneList.Item.Value((uint64_t)v185, (uint64_t)v184);
                  if (LOBYTE(v184[8]) == 7)
                  {
                    v183[4] = v184[4];
                    v183[5] = v184[5];
                    v183[6] = v184[6];
                    v183[7] = v184[7];
                    v183[0] = v184[0];
                    v183[1] = v184[1];
                    v183[2] = v184[2];
                    v183[3] = v184[3];
                    uint64_t v161 = *((void *)&v185[10] + 1);
                    uint64_t v162 = *(void *)&v185[11];
                    uint64_t v163 = *(void **)&v184[4];
                    if (*(void *)&v184[4])
                    {
                      char v164 = BYTE8(v183[3]);
                      double v175 = *(uint8_t **)&v183[3];
                      v181[0] = *(_OWORD *)((char *)&v185[10] + 8);
                      v178[0] = 0uLL;
                      uint64_t v180 = 0;
                      swift_retain();
                      swift_retain();
                      char v179 = v164 & 1;
                      uint64_t v165 = Text.resolveString(in:with:idiom:)();
                      uint64_t v163 = (void *)MEMORY[0x18C115780](v165);
                      swift_bridgeObjectRelease();
                    }
                    else
                    {
                      swift_retain();
                      swift_retain();
                    }
                    int v13 = (void *)&unk_1E9019000;
                    objc_msgSend(v158, sel_setTitle_, v163);

                    *(void *)&v158[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground] = *((void *)&v183[4] + 1);
                    swift_retain();
                    swift_release();
                    *(void *)&v158[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions] = *(void *)&v183[7];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    long long v167 = v183[5];
                    uint64_t v168 = *(void *)&v158[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView];
                    *(_OWORD *)&v158[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView] = v183[5];
                    outlined copy of AppIntentExecutor?(v167);
                    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v168);
                    long long v169 = v183[6];
                    uint64_t v170 = *(void *)&v158[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView];
                    *(_OWORD *)&v158[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView] = v183[6];
                    outlined copy of AppIntentExecutor?(v169);
                    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v170);
                    *(void *)&v181[0] = v161;
                    *((void *)&v181[0] + 1) = v162;
                    DocumentViewController.updateInheritedEnvironment(with:)((uint64_t *)v181);
                    id v171 = v176;

                    outlined release of DocumentIntroductionConfiguration(v183);
                    swift_release();
                    swift_release();

                    outlined destroy of SceneList.Item((uint64_t)v185);
                    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v186);

                    uint64_t v3 = v154;
                    uint64_t v12 = (void *)&unk_1E9019000;
                    goto LABEL_94;
                  }

                  id v166 = v176;
                  outlined destroy of SceneList.Item((uint64_t)v185);
                  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v186);
                  outlined destroy of SceneList.Item.Value((uint64_t)v184);

                  uint64_t v3 = v154;
                  goto LABEL_70;
                }
              }
              else
              {
                id v160 = v76;
LABEL_148:
                memset(v184, 0, 280);
                swift_bridgeObjectRelease();
              }
              outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v186);

              outlined destroy of RootEnvironmentModifier?((uint64_t)v184, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
            }
            else
            {

              swift_bridgeObjectRelease();
              outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v186);
            }

            uint64_t v3 = v154;
            goto LABEL_70;
          }
          uint64_t v81 = (void *)v80;
          type metadata accessor for DocumentHostingController(0);
          if (swift_dynamicCastClass())
          {
            uint64_t v82 = (uint64_t)&v79[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier];
            swift_beginAccess();
            outlined init with copy of RootEnvironmentModifier?(v82, (uint64_t)v184, (unint64_t *)&lazy cache variable for type metadata for RootModifier?, (uint64_t)&type metadata for RootModifier);
            if (*(void *)&v184[3] == 1)
            {
              int64_t v83 = v79;

              outlined destroy of RootEnvironmentModifier?((uint64_t)v184, (unint64_t *)&lazy cache variable for type metadata for RootModifier?, (uint64_t)&type metadata for RootModifier);
            }
            else
            {
              outlined init with take of RootModifier((uint64_t)v184, (uint64_t)v185);
              double v153 = v79;
              DocumentHostingController.updateRootView(with:rootModifier:)((uint64_t)v186, (uint64_t)v185);

              outlined destroy of RootModifier((uint64_t)v185);
            }
            goto LABEL_123;
          }
        }

        goto LABEL_123;
      }
      if (*(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v12 = v3;
        id v146 = *(id *)(v71 + 32);
        goto LABEL_118;
      }
      __break(1u);
LABEL_166:
      _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return;
    default:
      goto LABEL_166;
  }
}

uint64_t outlined destroy of SceneList.Item(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SceneList.Item(uint64_t a1)
{
  switch(*(unsigned char *)(a1 + 128))
  {
    case 0:
    case 1:
      swift_release();
      if (*(void *)(a1 + 32))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + 48)) {
        goto LABEL_25;
      }
      break;
    case 2:
      if (*(void *)(a1 + 48)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 24);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of SceneID(*(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
      break;
    case 3:
      goto LABEL_25;
    case 4:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      break;
    case 5:
      outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
      if (*(void *)(a1 + 32) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_25;
    case 6:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(void *)(a1 + 48))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
        swift_bridgeObjectRelease();
      }
      break;
    case 7:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(void *)(a1 + 24)) {
        swift_release();
      }
      if (*(void *)(a1 + 64))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
        swift_bridgeObjectRelease();
      }
      swift_release();
      if (*(void *)(a1 + 80)) {
        swift_release();
      }
      if (*(void *)(a1 + 96)) {
        swift_release();
      }
      swift_bridgeObjectRelease();
      break;
    case 8:
      swift_release();
      swift_release();
      outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      swift_bridgeObjectRelease();
LABEL_25:
      swift_release();
      break;
    default:
      break;
  }
  outlined consume of SceneID(*(void *)(a1 + 136), *(void *)(a1 + 144), *(unsigned char *)(a1 + 152));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of SceneList.Item.Value(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SceneList.Item.Value(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 128);
  if (v4 >= 9) {
    unsigned int v4 = *(_DWORD *)a2 + 9;
  }
  switch(v4)
  {
    case 1u:
      *(void *)a1 = *a2;
      uint64_t v10 = (_OWORD *)(a1 + 8);
      uint64_t v11 = a2[4];
      swift_retain();
      if (v11)
      {
        uint64_t v12 = a2[1];
        uint64_t v13 = a2[2];
        char v14 = *((unsigned char *)a2 + 24);
        outlined copy of Text.Storage(v12, v13, v14);
        *(void *)(a1 + 8) = v12;
        *(void *)(a1 + 16) = v13;
        *(unsigned char *)(a1 + 24) = v14;
        *(void *)(a1 + 32) = a2[4];
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v50 = *(_OWORD *)(a2 + 3);
        *uint64_t v10 = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 24) = v50;
      }
      uint64_t v51 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      if (v51)
      {
        uint64_t v52 = a2[7];
        *(void *)(a1 + 48) = v51;
        *(void *)(a1 + 56) = v52;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      }
      *(unsigned char *)(a1 + 128) = 1;
      return a1;
    case 2u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      unsigned int v15 = (_OWORD *)(a1 + 24);
      char v16 = a2 + 3;
      uint64_t v17 = a2[6];
      if (v17)
      {
        uint64_t v18 = a2[7];
        *(void *)(a1 + 48) = v17;
        *(void *)(a1 + 56) = v18;
        (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
      }
      else
      {
        long long v53 = *(_OWORD *)(a2 + 5);
        *unsigned int v15 = *v16;
        *(_OWORD *)(a1 + 40) = v53;
        *(void *)(a1 + 56) = a2[7];
      }
      uint64_t v54 = a2[9];
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = v54;
      uint64_t v55 = a2[11];
      *(void *)(a1 + 80) = a2[10];
      *(void *)(a1 + 88) = v55;
      uint64_t v56 = a2[13];
      *(void *)(a1 + 96) = a2[12];
      uint64_t v57 = a2[14];
      char v58 = *((unsigned char *)a2 + 120);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of SceneID(v56, v57, v58);
      *(void *)(a1 + 104) = v56;
      *(void *)(a1 + 112) = v57;
      *(unsigned char *)(a1 + 120) = v58;
      *(unsigned char *)(a1 + 128) = 2;
      return a1;
    case 3u:
      *(void *)a1 = *a2;
      char v19 = 3;
      goto LABEL_22;
    case 4u:
      uint64_t v20 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v20;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v21 = a2[4];
      *(void *)(a1 + 24) = a2[3];
      *(void *)(a1 + 32) = v21;
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      uint64_t v22 = a2[7];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = v22;
      long long v23 = *((_OWORD *)a2 + 4);
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      *(_OWORD *)(a1 + 64) = v23;
      *(unsigned char *)(a1 + 128) = 4;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_47;
    case 5u:
      uint64_t v24 = *a2;
      uint64_t v25 = a2[1];
      char v26 = *((unsigned char *)a2 + 16);
      outlined copy of SceneID(*a2, v25, v26);
      *(void *)a1 = v24;
      *(void *)(a1 + 8) = v25;
      *(unsigned char *)(a1 + 16) = v26;
      uint64_t v27 = a2 + 3;
      unint64_t v28 = a2[4];
      if (v28 >= 3)
      {
        *(void *)(a1 + 24) = *v27;
        *(void *)(a1 + 32) = v28;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v27;
      }
      *(void *)(a1 + 40) = a2[5];
      char v19 = 5;
LABEL_22:
      *(unsigned char *)(a1 + 128) = v19;
      goto LABEL_23;
    case 6u:
      uint64_t v29 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v29;
      *(void *)(a1 + 16) = a2[2];
      uint64_t v30 = a2[6];
      swift_bridgeObjectRetain();
      swift_retain();
      if (v30)
      {
        uint64_t v31 = a2[3];
        uint64_t v32 = a2[4];
        char v33 = *((unsigned char *)a2 + 40);
        outlined copy of Text.Storage(v31, v32, v33);
        *(void *)(a1 + 24) = v31;
        *(void *)(a1 + 32) = v32;
        *(unsigned char *)(a1 + 40) = v33;
        *(void *)(a1 + 48) = a2[6];
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v59 = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 40) = v59;
      }
      *(unsigned char *)(a1 + 128) = 6;
      return a1;
    case 7u:
      uint64_t v34 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v34;
      *(void *)(a1 + 16) = a2[2];
      unsigned int v36 = a2 + 3;
      uint64_t v35 = a2[3];
      swift_bridgeObjectRetain();
      swift_retain();
      if (v35)
      {
        uint64_t v37 = a2[4];
        *(void *)(a1 + 24) = v35;
        *(void *)(a1 + 32) = v37;
        swift_retain();
        if (a2[8])
        {
LABEL_18:
          uint64_t v38 = a2[5];
          uint64_t v39 = a2[6];
          char v40 = *((unsigned char *)a2 + 56);
          outlined copy of Text.Storage(v38, v39, v40);
          *(void *)(a1 + 40) = v38;
          *(void *)(a1 + 48) = v39;
          *(unsigned char *)(a1 + 56) = v40;
          *(void *)(a1 + 64) = a2[8];
          swift_bridgeObjectRetain();
          goto LABEL_37;
        }
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *v36;
        if (a2[8]) {
          goto LABEL_18;
        }
      }
      long long v60 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v60;
LABEL_37:
      uint64_t v61 = a2[10];
      *(void *)(a1 + 72) = a2[9];
      swift_retain();
      if (v61)
      {
        uint64_t v62 = a2[11];
        *(void *)(a1 + 80) = v61;
        *(void *)(a1 + 88) = v62;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      }
      uint64_t v63 = a2[12];
      if (v63)
      {
        uint64_t v64 = a2[13];
        *(void *)(a1 + 96) = v63;
        *(void *)(a1 + 104) = v64;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      }
      uint64_t v65 = a2[15];
      *(void *)(a1 + 112) = a2[14];
      *(void *)(a1 + 120) = v65;
      *(unsigned char *)(a1 + 128) = 7;
LABEL_47:
      swift_bridgeObjectRetain();
      return a1;
    case 8u:
      uint64_t v41 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v41;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v42 = a2[3];
      uint64_t v43 = a2[4];
      char v44 = *((unsigned char *)a2 + 40);
      swift_retain();
      swift_retain();
      outlined copy of Text.Storage(v42, v43, v44);
      *(void *)(a1 + 24) = v42;
      *(void *)(a1 + 32) = v43;
      *(unsigned char *)(a1 + 40) = v44;
      uint64_t v45 = a2[6];
      uint64_t v46 = a2[7];
      *(void *)(a1 + 48) = v45;
      *(void *)(a1 + 56) = v46;
      *(unsigned char *)(a1 + 128) = 8;
      swift_bridgeObjectRetain();
LABEL_23:
      swift_retain();
      return a1;
    default:
      *(void *)a1 = *a2;
      uint64_t v5 = (_OWORD *)(a1 + 8);
      uint64_t v6 = a2[4];
      swift_retain();
      if (v6)
      {
        uint64_t v7 = a2[1];
        uint64_t v8 = a2[2];
        char v9 = *((unsigned char *)a2 + 24);
        outlined copy of Text.Storage(v7, v8, v9);
        *(void *)(a1 + 8) = v7;
        *(void *)(a1 + 16) = v8;
        *(unsigned char *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = a2[4];
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v47 = *(_OWORD *)(a2 + 3);
        _OWORD *v5 = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 24) = v47;
      }
      uint64_t v48 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      if (v48)
      {
        uint64_t v49 = a2[7];
        *(void *)(a1 + 48) = v48;
        *(void *)(a1 + 56) = v49;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      }
      *(unsigned char *)(a1 + 128) = 0;
      return a1;
  }
}

void type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    uint64_t v7 = v6;
    unint64_t v8 = lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type RootModifier and conformance RootModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *AppSceneDelegate.sceneItem()@<X0>(void *a1@<X8>)
{
  uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
  int v6 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
  if (v6 == 255 || !static AppGraph.shared) {
    goto LABEL_34;
  }
  uint64_t v3 = *v5;
  uint64_t v2 = v5[1];
  if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  unsigned int v4 = __src;
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    goto LABEL_35;
  }
  uint64_t v9 = v7 + 32;
  swift_bridgeObjectRetain();
  outlined copy of SceneID?(v3, v2, v6);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v9, (uint64_t)__src);
    uint64_t v12 = __src[17];
    uint64_t v11 = __src[18];
    if ((__src[19] & 1) == 0) {
      break;
    }
    if ((v6 & 1) == 0)
    {
      uint64_t v24 = _typeName(_:qualified:)();
      uint64_t v26 = v13;
      v14._uint64_t countAndFlagsBits = 45;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      uint64_t v11 = v26;
      swift_bridgeObjectRetain();
      uint64_t v16 = v2;
      if (v24 == v3) {
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    if (__src[17] == v3 && LOBYTE(__src[18]) == v2) {
      goto LABEL_29;
    }
LABEL_12:
    outlined destroy of SceneList.Item((uint64_t)__src);
    v9 += 280;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  if ((v6 & 1) == 0)
  {
    BOOL v17 = __src[17] == v3 && __src[18] == v2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_29;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _typeName(_:qualified:)();
  uint64_t v27 = v18;
  v19._uint64_t countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v16 = v27;
  if (v12 != v25) {
    goto LABEL_26;
  }
LABEL_25:
  if (v11 != v16)
  {
LABEL_26:
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_29;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease_n();
LABEL_29:
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, 0x118uLL);
  swift_bridgeObjectRelease();
  outlined consume of SceneID?(v3, v2, v6);
  swift_bridgeObjectRelease();
  if (!__dst[33])
  {
    while (1)
    {
      outlined destroy of RootEnvironmentModifier?((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item);
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_35:
      outlined copy of SceneID?(v3, v2, v6);
      swift_bridgeObjectRetain();
LABEL_32:
      v4[69] = 0;
      memset(__dst, 0, 272);
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(v3, v2, v6);
      swift_bridgeObjectRelease();
    }
  }
  return memcpy(a1, __dst, 0x118uLL);
}

uint64_t outlined init with copy of SceneList.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for SceneList.Item(uint64_t a1, uint64_t *a2)
{
  switch(*((unsigned char *)a2 + 128))
  {
    case 1:
      *(void *)a1 = *a2;
      uint64_t v8 = a2[4];
      swift_retain();
      if (v8)
      {
        uint64_t v9 = a2[1];
        uint64_t v10 = a2[2];
        char v11 = *((unsigned char *)a2 + 24);
        outlined copy of Text.Storage(v9, v10, v11);
        *(void *)(a1 + 8) = v9;
        *(void *)(a1 + 16) = v10;
        *(unsigned char *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = a2[4];
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v46 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 24) = v46;
      }
      uint64_t v47 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      if (v47)
      {
        uint64_t v48 = a2[7];
        *(void *)(a1 + 48) = v47;
        *(void *)(a1 + 56) = v48;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      }
      *(unsigned char *)(a1 + 128) = 1;
      goto LABEL_46;
    case 2:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      uint64_t v12 = (_OWORD *)(a1 + 24);
      uint64_t v13 = a2 + 3;
      uint64_t v14 = a2[6];
      if (v14)
      {
        uint64_t v15 = a2[7];
        *(void *)(a1 + 48) = v14;
        *(void *)(a1 + 56) = v15;
        (**(void (***)(_OWORD *, _OWORD *))(v14 - 8))(v12, v13);
      }
      else
      {
        long long v49 = *(_OWORD *)(a2 + 5);
        *uint64_t v12 = *v13;
        *(_OWORD *)(a1 + 40) = v49;
        *(void *)(a1 + 56) = a2[7];
      }
      uint64_t v50 = a2[9];
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = v50;
      uint64_t v51 = a2[11];
      *(void *)(a1 + 80) = a2[10];
      *(void *)(a1 + 88) = v51;
      uint64_t v52 = a2[13];
      *(void *)(a1 + 96) = a2[12];
      uint64_t v53 = a2[14];
      char v54 = *((unsigned char *)a2 + 120);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of SceneID(v52, v53, v54);
      *(void *)(a1 + 104) = v52;
      *(void *)(a1 + 112) = v53;
      *(unsigned char *)(a1 + 120) = v54;
      *(unsigned char *)(a1 + 128) = 2;
      goto LABEL_46;
    case 3:
      *(void *)a1 = *a2;
      char v16 = 3;
      goto LABEL_20;
    case 4:
      uint64_t v17 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v17;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v18 = a2[4];
      *(void *)(a1 + 24) = a2[3];
      *(void *)(a1 + 32) = v18;
      *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
      uint64_t v19 = a2[7];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = v19;
      long long v20 = *((_OWORD *)a2 + 4);
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      *(_OWORD *)(a1 + 64) = v20;
      *(unsigned char *)(a1 + 128) = 4;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_45;
    case 5:
      uint64_t v21 = *a2;
      uint64_t v22 = a2[1];
      char v23 = *((unsigned char *)a2 + 16);
      outlined copy of SceneID(*a2, v22, v23);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(unsigned char *)(a1 + 16) = v23;
      uint64_t v24 = a2 + 3;
      unint64_t v25 = a2[4];
      if (v25 >= 3)
      {
        *(void *)(a1 + 24) = *v24;
        *(void *)(a1 + 32) = v25;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v24;
      }
      *(void *)(a1 + 40) = a2[5];
      char v16 = 5;
LABEL_20:
      *(unsigned char *)(a1 + 128) = v16;
      goto LABEL_21;
    case 6:
      uint64_t v26 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v26;
      *(void *)(a1 + 16) = a2[2];
      uint64_t v27 = a2[6];
      swift_bridgeObjectRetain();
      swift_retain();
      if (v27)
      {
        uint64_t v28 = a2[3];
        uint64_t v29 = a2[4];
        char v30 = *((unsigned char *)a2 + 40);
        outlined copy of Text.Storage(v28, v29, v30);
        *(void *)(a1 + 24) = v28;
        *(void *)(a1 + 32) = v29;
        *(unsigned char *)(a1 + 40) = v30;
        *(void *)(a1 + 48) = a2[6];
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v55 = *(_OWORD *)(a2 + 5);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 40) = v55;
      }
      *(unsigned char *)(a1 + 128) = 6;
      goto LABEL_46;
    case 7:
      uint64_t v31 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v31;
      *(void *)(a1 + 16) = a2[2];
      char v33 = a2 + 3;
      uint64_t v32 = a2[3];
      swift_bridgeObjectRetain();
      swift_retain();
      if (v32)
      {
        uint64_t v34 = a2[4];
        *(void *)(a1 + 24) = v32;
        *(void *)(a1 + 32) = v34;
        swift_retain();
        if (a2[8])
        {
LABEL_16:
          uint64_t v35 = a2[5];
          uint64_t v36 = a2[6];
          char v37 = *((unsigned char *)a2 + 56);
          outlined copy of Text.Storage(v35, v36, v37);
          *(void *)(a1 + 40) = v35;
          *(void *)(a1 + 48) = v36;
          *(unsigned char *)(a1 + 56) = v37;
          *(void *)(a1 + 64) = a2[8];
          swift_bridgeObjectRetain();
          goto LABEL_35;
        }
      }
      else
      {
        *(_OWORD *)(a1 + 24) = *v33;
        if (a2[8]) {
          goto LABEL_16;
        }
      }
      long long v56 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v56;
LABEL_35:
      uint64_t v57 = a2[10];
      *(void *)(a1 + 72) = a2[9];
      swift_retain();
      if (v57)
      {
        uint64_t v58 = a2[11];
        *(void *)(a1 + 80) = v57;
        *(void *)(a1 + 88) = v58;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
      }
      uint64_t v59 = a2[12];
      if (v59)
      {
        uint64_t v60 = a2[13];
        *(void *)(a1 + 96) = v59;
        *(void *)(a1 + 104) = v60;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      }
      uint64_t v61 = a2[15];
      *(void *)(a1 + 112) = a2[14];
      *(void *)(a1 + 120) = v61;
      *(unsigned char *)(a1 + 128) = 7;
LABEL_45:
      swift_bridgeObjectRetain();
LABEL_46:
      uint64_t v62 = a2[17];
      uint64_t v63 = a2[18];
      char v64 = *((unsigned char *)a2 + 152);
      outlined copy of SceneID(v62, v63, v64);
      *(void *)(a1 + 136) = v62;
      *(void *)(a1 + 144) = v63;
      *(unsigned char *)(a1 + 152) = v64;
      uint64_t v65 = a2[21];
      *(void *)(a1 + 160) = a2[20];
      *(void *)(a1 + 168) = v65;
      *(void *)(a1 + 176) = a2[22];
      *(unsigned char *)(a1 + 184) = *((unsigned char *)a2 + 184);
      uint64_t v66 = a2[25];
      *(void *)(a1 + 192) = a2[24];
      *(void *)(a1 + 200) = v66;
      *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 208);
      long long v67 = *(_OWORD *)(a2 + 27);
      *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
      *(_OWORD *)(a1 + 216) = v67;
      *(_OWORD *)(a1 + 240) = *((_OWORD *)a2 + 15);
      *(unsigned char *)(a1 + 256) = *((unsigned char *)a2 + 256);
      *(_WORD *)(a1 + 257) = *(_WORD *)((char *)a2 + 257);
      uint64_t v69 = a2[33];
      uint64_t v68 = a2[34];
      *(void *)(a1 + 264) = v69;
      *(void *)(a1 + 272) = v68;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    case 8:
      uint64_t v38 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v38;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      uint64_t v39 = a2[3];
      uint64_t v40 = a2[4];
      char v41 = *((unsigned char *)a2 + 40);
      swift_retain();
      swift_retain();
      outlined copy of Text.Storage(v39, v40, v41);
      *(void *)(a1 + 24) = v39;
      *(void *)(a1 + 32) = v40;
      *(unsigned char *)(a1 + 40) = v41;
      uint64_t v42 = a2[7];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = v42;
      *(unsigned char *)(a1 + 128) = 8;
      swift_bridgeObjectRetain();
LABEL_21:
      swift_retain();
      goto LABEL_46;
    default:
      *(void *)a1 = *a2;
      uint64_t v4 = a2[4];
      swift_retain();
      if (v4)
      {
        uint64_t v5 = a2[1];
        uint64_t v6 = a2[2];
        char v7 = *((unsigned char *)a2 + 24);
        outlined copy of Text.Storage(v5, v6, v7);
        *(void *)(a1 + 8) = v5;
        *(void *)(a1 + 16) = v6;
        *(unsigned char *)(a1 + 24) = v7;
        *(void *)(a1 + 32) = a2[4];
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v43 = *(_OWORD *)(a2 + 3);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
        *(_OWORD *)(a1 + 24) = v43;
      }
      uint64_t v44 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      if (v44)
      {
        uint64_t v45 = a2[7];
        *(void *)(a1 + 48) = v44;
        *(void *)(a1 + 56) = v45;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
      }
      *(unsigned char *)(a1 + 128) = 0;
      goto LABEL_46;
  }
}

uint64_t outlined consume of SceneID?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined consume of SceneID(result, a2, a3 & 1);
  }
  return result;
}

uint64_t AppSceneDelegate.makeRootView(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  void (*v7)(uint64_t *__return_ptr, void *);
  void v9[13];
  uint64_t v10;

  if (one-time initialization token for appRootViewWrappers != -1) {
    swift_once();
  }
  swift_beginAccess();
  rawuint64_t Value = (char *)appRootViewWrappers._rawValue;
  uint64_t v5 = *((void *)appRootViewWrappers._rawValue + 2);
  if (v5)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v6 = rawValue + 40;
    do
    {
      char v7 = (void (*)(uint64_t *__return_ptr, void *))*((void *)v6 - 1);
      v9[0] = a1;
      swift_retain();
      v7(&v10, v9);
      swift_release();
      swift_release();
      a1 = v10;
      v6 += 16;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  AppSceneDelegate.rootModifier.getter((uint64_t)v9);
  outlined init with copy of RootModifier((uint64_t)v9, (uint64_t)(a2 + 1));
  *a2 = a1;
  return outlined destroy of RootModifier((uint64_t)v9);
}

uint64_t outlined destroy of RootModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of RootModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for RootModifier(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(_OWORD *, _OWORD *))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 40);
    _OWORD *v4 = *v5;
    *(_OWORD *)(a1 + 40) = v8;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  int v9 = *(unsigned __int8 *)(a2 + 88);
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  else
  {
    char v10 = v9 & 1;
    uint64_t v11 = *(void *)(a2 + 72);
    uint64_t v12 = *(void *)(a2 + 80);
    outlined copy of SceneID(v11, v12, v9 & 1);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = v12;
    *(unsigned char *)(a1 + 88) = v10;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t specialized UIHostingController.rootView.setter(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + direct field offset for UIHostingController.host);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>(a1, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);
  outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>((uint64_t)v8, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);
  uint64_t v4 = (uint64_t)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x60);
  swift_beginAccess();
  uint64_t v5 = v3;
  outlined assign with take of ModifiedContent<AnyView, RootModifier>((uint64_t)v7, v4);
  swift_endAccess();
  v7[0] = 1;
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>();
  lazy protocol witness table accessor for type Focus<DocumentToolbarTransformModifier, (_:)> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of ModifiedContent<AnyView, RootModifier>((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);

  return outlined destroy of ModifiedContent<AnyView, RootModifier>(a1, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, (uint64_t)&type metadata for RootModifier);
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;
  _WORD v7[84];
  unsigned char v8[168];

  uint64_t v3 = *(void **)(v1 + direct field offset for UIHostingController.host);
  outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1, (uint64_t)v8);
  outlined init with copy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>((uint64_t)v8, (uint64_t)v7);
  uint64_t v4 = (uint64_t)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x60);
  swift_beginAccess();
  uint64_t v5 = v3;
  outlined assign with take of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>((uint64_t)v7, v4);
  swift_endAccess();
  v7[0] = 1;
  type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>();
  lazy protocol witness table accessor for type Focus<DocumentToolbarTransformModifier, (_:)> and conformance Focus<A, B>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>>);
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>((uint64_t)v8);

  return outlined destroy of ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>(a1);
}

{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  uint64_t v3 = *(void **)(v1 + direct field offset for UIHostingController.host);
  uint64_t v4 = (void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x60));
  swift_beginAccess();
  _OWORD *v4 = a1;
  swift_retain_n();
  uint64_t v5 = v3;
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  return swift_release();
}

uint64_t outlined init with copy of ModifiedContent<AnyView, DocumentSceneRootBoxModifier>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(0, a3, MEMORY[0x1E4F41618], a4, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<AnyView, RootModifier>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(0, a2, MEMORY[0x1E4F41618], a3, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t destroy for RootModifier(uint64_t a1)
{
  swift_weakDestroy();
  swift_weakDestroy();
  uint64_t result = swift_weakDestroy();
  if (*(void *)(a1 + 48)) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  int v3 = *(unsigned __int8 *)(a1 + 88);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 80);
    return outlined consume of SceneID(v4, v5, v3 & 1);
  }
  return result;
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

uint64_t outlined assign with take of ModifiedContent<AnyView, RootModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Focus<DocumentToolbarTransformModifier, (_:)> and conformance Focus<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t RootEnvironmentModifier.Child.updateValue()()
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  outlined init with copy of RootEnvironmentModifier(Value, (uint64_t)v37);
  uint64_t v4 = v3 & 1;
  v37[49] = v3 & 1;
  uint64_t v5 = (void *)AGGraphGetValue();
  char v7 = v6;
  uint64_t v8 = v5[1];
  *(void *)&long long v35 = *v5;
  *((void *)&v35 + 1) = v8;
  char v36 = v6 & 1;
  outlined init with copy of RootEnvironmentModifier((uint64_t)v37, (uint64_t)v34);
  v34[49] = v4;
  uint64_t v23 = v0;
  if (v7)
  {
    swift_retain();
    swift_retain();
    outlined destroy of WeakBox<UISceneSession>?((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
  }
  else
  {
    outlined init with copy of RootEnvironmentModifier((uint64_t)v34, (uint64_t)&v28);
    char v33 = v4;
    if (v4)
    {
      outlined init with copy of RootEnvironmentModifier?(v0 + 8, (uint64_t)v27, &lazy cache variable for type metadata for RootEnvironmentModifier?, (uint64_t)&type metadata for RootEnvironmentModifier);
      uint64_t v9 = outlined init with copy of RootEnvironmentModifier((uint64_t)&v28, (uint64_t)v24);
      char v26 = 1;
      MEMORY[0x1F4188790](v9);
      swift_retain();
      swift_retain();
      char v10 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI23RootEnvironmentModifier33_4475FD12FD59DEBA453321BD91F6EA04LLV_s5NeverOSbTg5((void (*)(uint64_t *__return_ptr, unsigned char *))partial apply for closure #1 in implicit closure #2 in implicit closure #1 in RootEnvironmentModifier.Child.updateValue());
      outlined destroy of RootEnvironmentModifier?((uint64_t)v27, &lazy cache variable for type metadata for RootEnvironmentModifier?, (uint64_t)&type metadata for RootEnvironmentModifier);
      outlined destroy of WeakBox<UISceneSession>?((uint64_t)&v28, (uint64_t (*)(void))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      outlined destroy of WeakBox<UISceneSession>?((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      outlined destroy of WeakBox<UISceneSession>?((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      if (v10 == 2 || (v10 & 1) != 0) {
        goto LABEL_9;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      outlined destroy of WeakBox<UISceneSession>?((uint64_t)&v28, (uint64_t (*)(void))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
      outlined destroy of WeakBox<UISceneSession>?((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
    }
    if (AGGraphGetOutputValue())
    {
      swift_release();
      swift_release();
      return outlined destroy of WeakBox<UISceneSession>?((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for (value: RootEnvironmentModifier, changed: Bool));
    }
  }
LABEL_9:
  type metadata accessor for SceneBridge();
  lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(&lazy protocol witness table cache variable for type SceneBridge and conformance SceneBridge, (void (*)(uint64_t))type metadata accessor for SceneBridge);
  static ObservableObject.environmentStore.getter();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v37, (uint64_t)&v28);
  char v33 = v4;
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of RootEnvironmentModifier((uint64_t)&v28);
  v24[0] = Strong;
  swift_setAtWritableKeyPath();
  swift_release();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v37, (uint64_t)&v28);
  char v33 = v4;
  uint64_t v13 = swift_weakLoadStrong();
  outlined destroy of RootEnvironmentModifier((uint64_t)&v28);
  specialized EnvironmentValues.sceneStorageValues.setter(v13);
  swift_release();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v37, (uint64_t)&v28);
  char v33 = v4;
  unsigned __int8 v14 = v29;
  outlined destroy of RootEnvironmentModifier((uint64_t)&v28);
  LOBYTE(v24[0]) = v14;
  type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*((void *)&v35 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined init with copy of RootEnvironmentModifier((uint64_t)v37, (uint64_t)&v28);
  char v33 = v4;
  uint64_t v15 = v30;
  uint64_t v16 = v31;
  unsigned __int8 v17 = v32;
  outlined copy of SceneID?(v30, v31, v32);
  outlined destroy of RootEnvironmentModifier((uint64_t)&v28);
  v24[0] = v15;
  v24[1] = v16;
  unsigned __int8 v25 = v17;
  type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneIDKey>, (uint64_t)&type metadata for SceneIDKey, (uint64_t)&protocol witness table for SceneIDKey, MEMORY[0x1E4F40930]);
  outlined copy of SceneID?(v15, v16, v17);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneIDKey>, (uint64_t)&type metadata for SceneIDKey, (uint64_t)&protocol witness table for SceneIDKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*((void *)&v35 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of SceneID?(v15, v16, v17);
  outlined init with copy of RootEnvironmentModifier((uint64_t)v37, (uint64_t)&v28);
  char v33 = v4;
  int v18 = v29;
  outlined destroy of RootEnvironmentModifier((uint64_t)&v28);
  if (v18 != 2)
  {
    uint64_t v19 = (void (*)(long long *, void))EnvironmentValues.redactionReasons.modify();
    *v20 |= 2uLL;
    v19(&v28, 0);
  }
  outlined init with copy of RootEnvironmentModifier((uint64_t)v37, (uint64_t)&v28);
  char v33 = v4;
  uint64_t v21 = swift_weakLoadStrong();
  outlined destroy of RootEnvironmentModifier((uint64_t)&v28);
  if (v21)
  {
    (*(void (**)(long long *))(*(void *)v21 + 88))(&v35);
    swift_release();
  }
  if (static AppGraph.delegateBox)
  {
    uint64_t v22 = *(void (**)(long long *))(*(void *)static AppGraph.delegateBox + 88);
    swift_retain();
    v22(&v35);
    swift_release();
  }
  long long v28 = v35;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
  outlined destroy of RootEnvironmentModifier?(v23 + 8, &lazy cache variable for type metadata for RootEnvironmentModifier?, (uint64_t)&type metadata for RootEnvironmentModifier);
  outlined init with take of RootEnvironmentModifier((uint64_t)v37, (uint64_t)&v28);
  return outlined init with take of RootEnvironmentModifier((uint64_t)&v28, v23 + 8);
}

uint64_t specialized EnvironmentValues.sceneSession.setter(uint64_t a1)
{
  if (a1)
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UISceneSession>((uint64_t)v4, (uint64_t)&v5);
  }
  else
  {
    uint64_t v5 = 0;
  }
  BOOL v6 = a1 == 0;
  outlined init with copy of WeakBox<UISceneSession>?((uint64_t)&v5, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WeakBox<UISceneSession>?);
  type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1ED41B530, (uint64_t)&protocol witness table for SceneSessionKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1ED41B530, (uint64_t)&protocol witness table for SceneSessionKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of WeakBox<UISceneSession>?((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for WeakBox<UISceneSession>?);
}

void type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of WeakBox<UISceneSession>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for WeakBox<UISceneSession>?()
{
  if (!lazy cache variable for type metadata for WeakBox<UISceneSession>?)
  {
    type metadata accessor for FallbackDelegateBox<NSObject>(255, &lazy cache variable for type metadata for WeakBox<UISceneSession>, (unint64_t *)&lazy cache variable for type metadata for UISceneSession, 0x1E4FB1BA0, MEMORY[0x1E4F41720]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UISceneSession>?);
    }
  }
}

uint64_t outlined init with copy of WeakBox<UISceneSession>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of WeakBox<UISceneSession>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for WeakBox<UISceneSession>, (unint64_t *)&lazy cache variable for type metadata for UISceneSession, 0x1E4FB1BA0, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for FallbackDelegateBox<NSObject>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for NSObject(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined init with copy of RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  int v4 = *(unsigned __int8 *)(a2 + 48);
  if (v4 == 255)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  }
  else
  {
    char v5 = v4 & 1;
    uint64_t v7 = *(void *)(a2 + 32);
    uint64_t v6 = *(void *)(a2 + 40);
    outlined copy of SceneID(v7, v6, v4 & 1);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v6;
    *(unsigned char *)(a1 + 48) = v5;
  }
  return a1;
}

uint64_t outlined copy of SceneID(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of RootEnvironmentModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of SceneID(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t destroy for RootEnvironmentModifier(uint64_t a1)
{
  swift_weakDestroy();
  swift_weakDestroy();
  uint64_t result = swift_weakDestroy();
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    return outlined consume of SceneID(v4, v5, v3 & 1);
  }
  return result;
}

uint64_t outlined copy of SceneID?(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of SceneID(result, a2, a3 & 1);
  }
  return result;
}

uint64_t destroy for SceneID(uint64_t a1)
{
  return outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t type metadata accessor for SceneBridge()
{
  return self;
}

uint64_t outlined init with take of RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for RootEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for (value: RootEnvironmentModifier, changed: Bool)()
{
  if (!lazy cache variable for type metadata for (value: RootEnvironmentModifier, changed: Bool))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: RootEnvironmentModifier, changed: Bool));
    }
  }
}

uint64_t specialized EnvironmentValues.sceneStorageValues.setter(uint64_t a1)
{
  if (a1)
  {
    swift_weakInit();
    swift_weakAssign();
    outlined init with take of WeakBox<SceneStorageValues>((uint64_t)v5, (uint64_t)&v6, v3);
  }
  else
  {
    uint64_t v6 = 0;
  }
  BOOL v7 = a1 == 0;
  outlined init with copy of WeakBox<SceneStorageValues>?((uint64_t)&v6, (uint64_t)v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of WeakBox<SceneStorageValues>((uint64_t)&v6, (uint64_t (*)(void))type metadata accessor for WeakBox<SceneStorageValues>?);
}

uint64_t outlined destroy of WeakBox<SceneStorageValues>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of WeakBox<SceneStorageValues>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for WeakBox<SceneStorageValues>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for WeakBox<SceneStorageValues>(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t outlined init with copy of WeakBox<SceneStorageValues>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<SceneStorageValues>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for SceneStorage<URL>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for WeakBox<SceneStorageValues>?(uint64_t a1)
{
}

uint64_t type metadata accessor for SceneStorageValues()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata accessor for ScenePresentationBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t RootModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  swift_weakLoadStrong();
  swift_weakLoadStrong();
  swift_weakLoadStrong();
  char v3 = *(unsigned char *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v5 = *(void *)(v1 + 80);
  unsigned __int8 v6 = *(unsigned char *)(v1 + 88);
  swift_weakInit();
  outlined copy of SceneID?(v4, v5, v6);
  swift_release();
  swift_weakInit();
  swift_release();
  swift_weakInit();
  swift_release();
  unsigned char v8[24] = v3;
  uint64_t v9 = v4;
  uint64_t v10 = v5;
  unsigned __int8 v11 = v6;
  outlined init with copy of RootEnvironmentModifier((uint64_t)v8, (uint64_t)v12);
  outlined destroy of RootEnvironmentModifier((uint64_t)v8);
  outlined init with copy of RootEnvironmentModifier?(v1 + 24, a1 + 56, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  return outlined init with take of ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>((uint64_t)v12, a1);
}

uint64_t outlined init with take of ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type RootModifier and conformance RootModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type RootModifier and conformance RootModifier;
  if (!lazy protocol witness table cache variable for type RootModifier and conformance RootModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootModifier and conformance RootModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier>(255);
    lazy protocol witness table accessor for type SceneBridge and conformance SceneBridge(&lazy protocol witness table cache variable for type _ViewModifier_Content<RootModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<RootModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RootModifier>, RootEnvironmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for _UISecureHostingController()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static SubscriptionView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static SubscriptionView._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #1 in static SubscriptionView._makeViewList(view:inputs:)(uint64_t a1)
{
  return closure #1 in static SubscriptionView._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in static SubscriptionView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  v12[2] = type metadata accessor for SubscriptionView();
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a6, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

ValueMetadata *type metadata accessor for LazyVStackLayout()
{
  return &type metadata for LazyVStackLayout;
}

uint64_t protocol witness for Location.wasRead.setter in conformance SearchZipLocation()
{
  return dispatch thunk of AnyLocation.wasRead.setter();
}

void specialized VersionSeedSetTracker.removePreference<A>(_:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    for (unint64_t i = (ValueMetadata **)(*(void *)v0 + 32); *i != &type metadata for WindowToolbarItemsAppearanceKey; i += 3)
    {
      if (v1 == ++v2) {
        return;
      }
    }
    specialized Array.remove(at:)(v2, (uint64_t)v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  ValueMetadata **i;
  unsigned char v4[24];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    for (unint64_t i = (ValueMetadata **)(*(void *)v0 + 32); *i != &type metadata for BottomOrnamentAppearanceKey; i += 3)
    {
      if (v1 == ++v2) {
        return;
      }
    }
    specialized Array.remove(at:)(v2, (uint64_t)v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  ValueMetadata **i;
  unsigned char v4[24];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    for (unint64_t i = (ValueMetadata **)(*(void *)v0 + 32); *i != &type metadata for AccessoryBarAppearanceKey; i += 3)
    {
      if (v1 == ++v2) {
        return;
      }
    }
    specialized Array.remove(at:)(v2, (uint64_t)v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  ValueMetadata **i;
  unsigned char v4[24];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    for (unint64_t i = (ValueMetadata **)(*(void *)v0 + 32); *i != &type metadata for WindowToolbarAppearanceKey; i += 3)
    {
      if (v1 == ++v2) {
        return;
      }
    }
    specialized Array.remove(at:)(v2, (uint64_t)v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  ValueMetadata **i;
  unsigned char v4[24];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    for (unint64_t i = (ValueMetadata **)(*(void *)v0 + 32); *i != &type metadata for BottomBarAppearanceKey; i += 3)
    {
      if (v1 == ++v2) {
        return;
      }
    }
    specialized Array.remove(at:)(v2, (uint64_t)v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  ValueMetadata **i;
  unsigned char v4[24];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    for (unint64_t i = (ValueMetadata **)(*(void *)v0 + 32); *i != &type metadata for TabBarAppearanceKey; i += 3)
    {
      if (v1 == ++v2) {
        return;
      }
    }
    specialized Array.remove(at:)(v2, (uint64_t)v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  ValueMetadata **i;
  unsigned char v4[24];

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    for (unint64_t i = (ValueMetadata **)(*(void *)v0 + 32); *i != &type metadata for NavigationBarAppearanceKey; i += 3)
    {
      if (v1 == ++v2) {
        return;
      }
    }
    specialized Array.remove(at:)(v2, (uint64_t)v4);
  }
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  }
  unint64_t v6 = *((void *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    BOOL v7 = &v5[24 * a1];
    long long v9 = *((_OWORD *)v7 + 2);
    uint64_t v8 = v7 + 32;
    int v10 = v8[4];
    unint64_t v11 = v6 - 1;
    *(_OWORD *)a2 = v9;
    *(_DWORD *)(a2 + 16) = v10;
    uint64_t v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 6, 24 * v12);
      *((void *)v5 + 2) = v11;
      *unint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v5;
  unint64_t v6;
  char *v7;
  long long v8;
  unint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t result;

  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  }
  unint64_t v6 = *((void *)v5 + 2);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    BOOL v7 = &v5[120 * a1];
    uint64_t v8 = *((_OWORD *)v7 + 7);
    long long v9 = v6 - 1;
    *(_OWORD *)(a2 + 64) = *((_OWORD *)v7 + 6);
    *(_OWORD *)(a2 + 80) = v8;
    *(_OWORD *)(a2 + 96) = *((_OWORD *)v7 + 8);
    *(void *)(a2 + 112) = *((void *)v7 + 18);
    int v10 = *((_OWORD *)v7 + 3);
    *(_OWORD *)a2 = *((_OWORD *)v7 + 2);
    *(_OWORD *)(a2 + 16) = v10;
    unint64_t v11 = *((_OWORD *)v7 + 5);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)v7 + 4);
    *(_OWORD *)(a2 + 48) = v11;
    uint64_t v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v7 + 32, v7 + 152, 120 * v12);
      *((void *)v5 + 2) = v9;
      *unint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of UIHostingController.rootView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x340))();
}

uint64_t DisclosureIndicatorShapeStyle._apply(to:)(uint64_t a1, char a2)
{
  if (a2)
  {
    EnvironmentValues.backgroundProminence.getter();
    static BackgroundProminence.increased.getter();
    if (static BackgroundProminence.== infix(_:_:)())
    {
      static Color.white.getter();
      Color._apply(to:)();
      return swift_release();
    }
    else
    {
      return TintShapeStyle._apply(to:)();
    }
  }
  else
  {
    return MEMORY[0x1F40FFE48](a1, 2);
  }
}

uint64_t base witness table accessor for _AttributeBody in ContentShapeResponderFilter<A>()
{
  return swift_getWitnessTable();
}

void static CustomHoverEffect<>.highlight.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t getEnumTagSinglePayload for LabelGroup(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyHGrid<A>()
{
  return static LazyHGrid._makeView(view:inputs:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollBehaviorModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  return static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

ValueMetadata *type metadata accessor for UpdateViewDestinationRequest()
{
  return &type metadata for UpdateViewDestinationRequest;
}

ValueMetadata *type metadata accessor for AllowPresentationPredicate()
{
  return &type metadata for AllowPresentationPredicate;
}

ValueMetadata *type metadata accessor for NavigationState()
{
  return &type metadata for NavigationState;
}

ValueMetadata *type metadata accessor for SubmitTriggers()
{
  return &type metadata for SubmitTriggers;
}

uint64_t View.accessibilityAddTraits(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return View.accessibilityAddTraits(_:)(a1, a2, a3, MEMORY[0x1E4F41170]);
}

uint64_t getEnumTag for AccessibilityTextLayoutProperties(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 112);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t getEnumTagSinglePayload for AnyStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CaptureViewRespondersModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

unint64_t lazy protocol witness table accessor for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier;
  if (!lazy protocol witness table cache variable for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaptureViewRespondersModifier and conformance CaptureViewRespondersModifier);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IgnoreViewRespondersModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

unint64_t lazy protocol witness table accessor for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier;
  if (!lazy protocol witness table cache variable for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IgnoreViewRespondersModifier and conformance IgnoreViewRespondersModifier);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ConnectionOptionPayloadStoragePreferenceKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E90FC1E8;
  *a1 = static ConnectionOptionPayloadStoragePreferenceKey.defaultValue;
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void *UILargeContentViewerInteractionBridge.preferencesDidChange(_:)(void *a1)
{
  uint64_t v2 = v1;
  *(void *)&v21[0] = *a1;
  PreferenceValues.subscript.getter();
  int v3 = v23;
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTreeSeed;
  if (v23 != -1)
  {
    int v5 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTreeSeed);
    if (v5 != -1 && v23 == v5) {
      return (void *)_s7SwiftUI33AccessibilityLargeContentViewTreeOWOsTm_0((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    }
  }
  unsigned int v7 = (long long *)(v1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree);
  outlined init with take of AccessibilityLargeContentViewTree((long long *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree), v20);
  outlined init with take of AccessibilityLargeContentViewTree(v22, v7);
  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOsTm_0((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOsTm_0((uint64_t)v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined init with take of AccessibilityLargeContentViewTree(v7, v21);
  outlined init with take of AccessibilityLargeContentViewTree(v21, v19);
  BOOL v8 = AccessibilityLargeContentViewTree.hasValue.getter();
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_interaction;
  uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_interaction);
  if (v10)
  {
    if (v8)
    {
LABEL_13:
      *(_DWORD *)(v2 + v4) = v3;
      return (void *)_s7SwiftUI33AccessibilityLargeContentViewTreeOWOsTm_0((uint64_t)v22, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    }
    unint64_t result = (void *)MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (result)
    {
      uint64_t v12 = result;
      objc_msgSend(result, sel_removeInteraction_, v10);

      uint64_t v13 = *(void **)(v2 + v9);
      *(void *)(v2 + v9) = 0;

      swift_unknownObjectWeakAssign();
      goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
    if (!v8) {
      goto LABEL_13;
    }
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1938]), sel_initWithDelegate_, v2);
    unint64_t result = (void *)MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host);
    if (result)
    {
      uint64_t v15 = result;
      objc_msgSend(result, sel_addInteraction_, v14);

      uint64_t v16 = *(void **)(v2 + v9);
      *(void *)(v2 + v9) = v14;
      id v17 = v14;

      id v18 = objc_msgSend(v17, sel_gestureRecognizerForExclusionRelationship);
      objc_msgSend(v18, sel_setDelegate_, v2);
      objc_msgSend(v18, sel_setDelaysTouchesEnded_, 0);
      objc_msgSend(v18, sel_setCancelsTouchesInView_, 0);

      swift_unknownObjectWeakAssign();
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined release of AccessibilityLargeContentViewTree(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 232);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    v4);
  return a1;
}

uint64_t _s7SwiftUI33AccessibilityLargeContentViewTreeOWOsTm_0(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 232);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    v4);
  return a1;
}

void outlined consume of AccessibilityLargeContentViewTree(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unsigned __int8 a30)
{
  int v30 = a30 >> 6;
  if (v30 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else if (!v30)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Resolved?(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
      a22,
      a23,
      a24);
  }
}

id @objc UIHostingContentView._popupMenuButton.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)UIHostingContentView._popupMenuButton.getter();

  return v2;
}

uint64_t UIHostingContentView._popupMenuButton.getter()
{
  UIHostingContentView.popUpButton.getter((uint64_t)v2);
  if (v2[8]) {
    uint64_t v0 = 0;
  }
  else {
    uint64_t v0 = MEMORY[0x18C119DF0](v2);
  }
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
  return v0;
}

uint64_t UIHostingContentView.popUpButton.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x690);
  swift_beginAccess();
  return outlined init with copy of UIHostingConfigurationStorage(v3, a1, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollTargetVisibilityChangeModifier<A>(uint64_t a1, uint64_t a2)
{
  return ScrollTargetVisibilityChangeModifier.body(content:)(a1, a2);
}

uint64_t NavigationBridge_PhoneTV.__deallocating_deinit()
{
  UIKitNavigationBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t UIKitNavigationBridge.deinit()
{
  swift_release();
  swift_unknownObjectWeakDestroy();
  outlined destroy of AccessibilityValueStorage?(v0 + 32, &lazy cache variable for type metadata for BridgedPresentation?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of EnvironmentValues?(*(void *)(v0 + 176));
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t one-time initialization function for combine()
{
  _s7SwiftUI29AccessibilityChildBehaviorBox33_F0D4BE429651399A5FAD2DF7DCDF699DLLCyAA0cdE0V7CombineVGMaTm_1(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine);
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 0;
  static AccessibilityChildBehavior.combine = result;
  return result;
}

Swift::Void __swiftcall NavigationBridge_PhoneTV.hostingControllerWillDisappear()()
{
  id v2 = (id)UIKitNavigationBridge.host.getter();
  if (v2)
  {
    uint64_t v1 = *(void *)(v0 + 184);
    *(void *)&long long v3 = *(void *)(v0 + 176);
    *((void *)&v3 + 1) = v1;
    outlined copy of EnvironmentValues?(v3);
    _UIHostingView.environmentOverride.setter(&v3);
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall NavigationBridge_PhoneTV.hostingControllerDidAppear()()
{
}

void sub_1873C2880(char a1)
{
  if (a1)
  {
    uint64_t v1 = UIKitNavigationBridge.host.getter();
    if (v1)
    {
      id v2 = (void *)v1;
      long long v3 = xmmword_18834FC50;
      _UIHostingView.environmentOverride.setter(&v3);
    }
    else
    {
      __break(1u);
    }
  }
}

BOOL UIKitNavigationBridge.isInTransientPop.getter()
{
  Attempted = (void *)UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter();
  uint64_t v1 = Attempted;
  if (Attempted) {

  }
  return v1 != 0;
}

uint64_t UIKitNavigationBridge.update(environment:)(uint64_t *a1)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_beginAccess();
  *(void *)(v1 + 160) = v4;
  *(void *)(v1 + 168) = v3;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_beginAccess();
  EnvironmentValues.preferenceBridge.setter();
  swift_endAccess();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain();
  if (v3)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  v7 |= 4uLL;
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  if ((*(unsigned char *)(v1 + 153) & 1) == 0) {
    UIKitNavigationBridge.isBeingPresented.getter();
  }
  if (a1[1])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (!(_BYTE)v7)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1 + 336))(&v7, 1);
    uint64_t v5 = v8;
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
    if (v5 != 2)
    {
      LOBYTE(v7) = 1;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InternalNavigationEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InternalNavigationEnabledKey>);
      swift_retain();
      PropertyList.subscript.setter();
      if (a1[1])
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
  }
  static Semantics.v5.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    if (a1[1])
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    uint64_t result = swift_release_n();
    if ((v7 & 1) == 0) {
      UIKitNavigationBridge.containingVC.getter();
    }
  }
  return result;
}

void UIKitNavigationBridge.isBeingPresented.getter()
{
}

uint64_t sub_1873C3070(uint64_t a1)
{
  if (a1) {
    UIKitNavigationBridge.containingSplitViewController.getter();
  }
  return 0;
}

void UIKitNavigationBridge.containingSplitViewController.getter()
{
}

uint64_t sub_1873C31B8(void *a1)
{
  id v2 = objc_msgSend(a1, sel_splitViewController);

  uint64_t result = 0;
  if (v2)
  {
    type metadata accessor for NotificationSendingSplitViewController();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {
      type metadata accessor for NotifyingMulticolumnSplitViewController();
      uint64_t result = swift_dynamicCastClass();
      if (!result)
      {

        return 0;
      }
    }
  }
  return result;
}

void UIKitNavigationBridge.containingVC.getter()
{
  if (UIKitNavigationBridge.host.getter()) {
    _UIHostingView.containingViewController.getter();
  }
  __break(1u);
}

uint64_t UIKitNavigationBridge.host.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + 24);
  if (result)
  {
    id v2 = (void *)result;
    id v3 = (id)specialized UIHostingController.host.getter();

    return (uint64_t)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void NavigationBridge_PhoneTV.pushTarget(isDetail:)(uint64_t a1@<X8>)
{
  if (static SemanticFeature.isEnabled.getter())
  {
    if (!UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter()) {
      UIKitNavigationBridge.containingVC.getter();
    }
    UIKitNavigationBridge.containingSplitViewController.getter();
  }

  UIKitNavigationBridge.pushTarget(isDetail:)(a1);
}

uint64_t UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter()
{
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 24);
  if (!v1) {
    return 0;
  }
  id v2 = (void *)v1;
  UIHostingController.overrides.getter((uint64_t)v5);

  uint64_t v3 = MEMORY[0x18C119DF0](&v6);
  outlined destroy of HostingControllerOverrides((uint64_t)v5);
  return v3;
}

uint64_t AnyUIKitNavigationBridge.presentationModeLocation.getter()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    swift_weakInit();
    type metadata accessor for LocationBox<UIKitNavigationBridgePresentationModeLocation>();
    swift_allocObject();
    uint64_t v1 = LocationBox.init(_:)();
    *(void *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void type metadata accessor for LocationBox<UIKitNavigationBridgePresentationModeLocation>()
{
  if (!lazy cache variable for type metadata for LocationBox<UIKitNavigationBridgePresentationModeLocation>)
  {
    lazy protocol witness table accessor for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation();
    unint64_t v0 = type metadata accessor for LocationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<UIKitNavigationBridgePresentationModeLocation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation;
  if (!lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation;
  if (!lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitNavigationBridgePresentationModeLocation and conformance UIKitNavigationBridgePresentationModeLocation);
  }
  return result;
}

uint64_t _UIHostingView.environmentOverride.setter(_OWORD *a1)
{
  uint64_t v2 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68));
  uint64_t v3 = *(void *)(v2 + 152);
  *(_OWORD *)(v2 + 152) = *a1;
  outlined consume of EnvironmentValues?(v3);
  uint64_t result = MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    swift_getObjectType();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t one-time initialization function for automatic(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t *a5)
{
  type metadata accessor for ShadowRowCollection<TableDataSourceAdaptor>(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t result = swift_allocObject();
  *a5 = result;
  return result;
}

void type metadata accessor for ShadowRowCollection<TableDataSourceAdaptor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host);
  }
  return result;
}

uint64_t View.accessibilityValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  View.accessibilityValue(_:)(v9, v10, v12 & 1, v14, a2, a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityValue(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  View.accessibilityValue(_:)((uint64_t)v9, a5, a6);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v9);
}

uint64_t View.accessibilityValue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of AccessibilityValueStorage(a1, (uint64_t)v6);
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B98], (uint64_t)v6, 1, a2, MEMORY[0x1E4F40B98], a3);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

{
  unsigned char v6[48];

  AccessibilityValueStorage.init<A>(_:description:)();
  View.accessibilityValue(_:)((uint64_t)v6, a2, a3);
  return outlined destroy of AccessibilityValueStorage((uint64_t)v6);
}

uint64_t one-time initialization function for ignore(uint64_t a1, unint64_t *a2, void (*a3)(void), uint64_t a4, uint64_t *a5)
{
  _s7SwiftUI29AccessibilityChildBehaviorBox33_F0D4BE429651399A5FAD2DF7DCDF699DLLCyAA0cdE0V7CombineVGMaTm_1(0, a2, a3);
  uint64_t result = swift_allocObject();
  *a5 = result;
  return result;
}

uint64_t ModifiedContent<>.accessibilityRespondsToUserInteraction(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1) {
    AccessibilityNullableOptionSet<>.init(adding:)();
  }
  else {
    AccessibilityNullableOptionSet<>.init(removing:)();
  }
  return ModifiedContent<>.accessibilityTraits(_:)(&v6, a2, a3);
}

uint64_t ModifiedContent<>.accessibilityTraits(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = *a1;
  uint64_t v5 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)&v7, 1, a2, MEMORY[0x1E4F40BA8], MEMORY[0x1E4F40BA0], v5, a3);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (uint64_t *)((char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v8 = a1;
  swift_storeEnumTagMultiPayload();
  id v9 = a1;
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v8, a2, a3);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v8);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, a3);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (NSNumber *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6->super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v6, a1, a2);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v6);
}

uint64_t outlined destroy of AccessibilityCustomAttributes.Value(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v6 - 8);
  outlined init with copy of AccessibilityCustomAttributes.Value(a1, (uint64_t)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  AccessibilityCustomAttributes.init(_:value:)();
  v10[0] = v10[1];
  unint64_t v8 = lazy protocol witness table accessor for type AccessibilityCustomAttributes? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40B38], (uint64_t)v10, 1, a2, MEMORY[0x1E4F40B38], MEMORY[0x1E4F40B30], v8, a3);
  return swift_bridgeObjectRelease();
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, MEMORY[0x1E4F27F38], a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, MEMORY[0x1E4F280C8], a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, MEMORY[0x1E4F276F0], a3);
}

{
  return ModifiedContent<>.accessibilityCustomAttribute(_:value:)(a1, a2, MEMORY[0x1E4F27928], a3);
}

unint64_t lazy protocol witness table accessor for type AccessibilityCustomAttributes? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCustomAttributes? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityCustomAttributes? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityCustomAttributes?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCustomAttributes? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityCustomAttributes?()
{
  if (!lazy cache variable for type metadata for AccessibilityCustomAttributes?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityCustomAttributes?);
    }
  }
}

uint64_t ModifiedContent<>.accessibilityValue(_:isEnabled:)@<X0>(char a1@<W4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9 & 1;
  ModifiedContent<>.accessibilityValue(_:isEnabled:)(v6, v7, v9 & 1, a1, a2, a3);
  outlined consume of Text.Storage(v6, v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityValue(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  AccessibilityValueStorage.init(description:)();
  unint64_t v9 = lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40B98], (uint64_t)v11, a4, a5, MEMORY[0x1E4F40B98], MEMORY[0x1E4F40B90], v9, a6);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v11, &lazy cache variable for type metadata for AccessibilityValueStorage?);
}

unint64_t lazy protocol witness table accessor for type AccessibilityValueStorage? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityValueStorage? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityValueStorage? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityValueStorage? and conformance <A> A?);
  }
  return result;
}

uint64_t specialized ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = v4;
  outlined init with copy of AccessibilityValueStorage(a1, (uint64_t)v14);
  unint64_t v9 = (uint64_t *)(*(void *)(v4 + *(int *)(a2(0) + 36)) + 16);
  swift_beginAccess();
  uint64_t v10 = *v9;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v10, v13);
  swift_bridgeObjectRelease();
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v14, (uint64_t)v12);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v12);
  specialized AccessibilityProperties.subscript.getter(*v9, v12);
  specialized Optional<A>.merge(with:)((uint64_t)v13);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v12);
  outlined destroy of AccessibilityValueStorage?((uint64_t)v13);
  swift_endAccess();
  swift_release();
  swift_release();
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0(v7, a4, a3);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v14);
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined destroy of AccessibilityValueStorage?(uint64_t a1)
{
  type metadata accessor for State<Bool>(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of AccessibilityValueStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized Optional<A>.merge(with:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F40E80];
  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1((uint64_t)v1, (uint64_t)v13, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, (uint64_t)v15, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
  if (!*((void *)&v14 + 1))
  {
    if (*((void *)&v16 + 1))
    {
      _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
      _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, (uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
      _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v15, &lazy cache variable for type metadata for AccessibilityValueStorage?, v4);
      char v6 = 1;
      return v6 & 1;
    }
LABEL_7:
    char v6 = 0;
    return v6 & 1;
  }
  if (!*((void *)&v16 + 1))
  {
    outlined destroy of AccessibilityValueStorage((uint64_t)v13);
    goto LABEL_7;
  }
  uint64_t v5 = MEMORY[0x1E4F40E80];
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  long long v10 = v13[0];
  long long v11 = v13[1];
  long long v12 = v14;
  v9[0] = v15[0];
  v9[1] = v15[1];
  uint64_t v9[2] = v16;
  *uint64_t v1 = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v5);
  char v6 = AccessibilityValueStorage.merge(with:)();
  outlined destroy of AccessibilityValueStorage((uint64_t)v9);
  long long v7 = v11;
  *uint64_t v2 = v10;
  v2[1] = v7;
  v2[2] = v12;
  return v6 & 1;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for AccessibilityUIKitTraits?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_2(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for AccessibilityNodeProxy?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_5(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _sypSgMaTm_9(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  type metadata accessor for AccessibilityValueStorage?(0, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for AccessibilityUIKitTraits?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_2(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_9(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityValueStorage?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityValueStorage?>);
    }
  }
}

uint64_t outlined destroy of AccessibilityValueStorage(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of AccessibilityValueStorage?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<Bool>(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  char v9 = 0;
  unint64_t v6 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40A98], (uint64_t)v8, 1, a3, MEMORY[0x1E4F40A98], MEMORY[0x1E4F40A90], v6, a4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityIdentifierStorage? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityIdentifierStorage? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityIdentifierStorage?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityIdentifierStorage? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AnyAccessibilityAction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [AnyAccessibilityAction] and conformance [A])
  {
    type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [AnyAccessibilityAction] and conformance [A]);
  }
  return result;
}

uint64_t View.accessibilityCombinedElement(options:ignoredTraits:)@<X0>(char a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v17 - v12;
  type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v14 = swift_allocObject();
  *(unsigned char *)(v14 + 16) = a1;
  uint64_t v20 = v14;
  View._accessibilityElement(children:)(&v20, a2, a3);
  swift_release();
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v7, (uint64_t)v13);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  int v19 = 64;
  ModifiedContent<>.accessibilityAddVisibility(_:)(&v19, v7, v18);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

void type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI29AccessibilityChildBehaviorBox33_F0D4BE429651399A5FAD2DF7DCDF699DLLCyAA0cdE0V7CombineVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI29AccessibilityChildBehaviorBox33_F0D4BE429651399A5FAD2DF7DCDF699DLLCyAA0cdE0V7CombineVGMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for AccessibilityChildBehaviorBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t View._accessibilityElement(children:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = v10;
  type metadata accessor for MutableBox<AccessibilityAttachment>();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v9;
  *(void *)(v7 + 24) = v6;
  uint64_t v9 = v7;
  uint64_t v10 = v5;
  MEMORY[0x18C113660](&v9, a2, &type metadata for AccessibilityAttachmentModifier, a3);
  swift_release();
  return swift_release();
}

uint64_t AccessibilityNavigationLinkButtonModifier.Attachment.accessibilityActions.getter(uint64_t a1)
{
  if (*((unsigned char *)v1 + 16) != 1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 48) = v4;
  *(void *)(v6 + 56) = v3;
  *(unsigned char *)(v6 + 64) = 1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for closure #1 in AccessibilityButtonModifier.Attachment.accessibilityActions.getter;
  *(void *)(v8 + 24) = v6;
  LODWORD(v6) = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
  *(void *)(v5 + 56) = v9;
  *(void *)(v5 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v10 = swift_allocObject();
  *(void *)(v5 + 32) = v10;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(void *)(v10 + 64) = 0;
  *(void *)(v10 + 72) = 2;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(void *)(v10 + 112) = 0;
  *(void *)(v10 + 120) = thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult)partial apply;
  *(void *)(v10 + 128) = v8;
  *(_DWORD *)(v10 + 136) = v6;
  *(unsigned char *)(v5 + 72) = 0;
  swift_retain();
  return v5;
}

uint64_t ModifiedContent<>.accessibilityAddVisibility(_:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v7[0] = *a1;
  v7[1] = v7[0];
  uint64_t v5 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AA8], (uint64_t)v7, 1, a2, MEMORY[0x1E4F40AA8], MEMORY[0x1E4F40AA0], v5, a3);
}

uint64_t lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityRemoveTraits(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  AccessibilityTraitSet.init(traits:)();
  v6[0] = 0;
  v6[1] = v6[6];
  uint64_t v4 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)v6, 1, a1, MEMORY[0x1E4F40BA8], MEMORY[0x1E4F40BA0], v4, a2);
}

uint64_t ModifiedContent<>.accessibilityAddTraits(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, long long *)@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v9 = *a1;
  a3(&v8, &v9);
  long long v9 = v8;
  uint64_t v6 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40BA8], (uint64_t)&v9, 1, a2, MEMORY[0x1E4F40BA8], MEMORY[0x1E4F40BA0], v6, a4);
}

uint64_t ModifiedContent<>.update<A>(_:combining:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  if (a3)
  {
    char v13 = (uint64_t *)(*(void *)(v8 + *(int *)(a4 + 36)) + 16);
    swift_beginAccess();
    uint64_t v15 = *(void *)(a4 + 16);
    swift_retain();
    swift_retain();
    closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v13, a1, a2, v15, a5, a6, a7);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a8, v8, a4);
}

uint64_t closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v17 - v14;
  uint64_t v18 = *a1;
  AccessibilityProperties.subscript.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v17, AssociatedTypeWitness);
  AccessibilityProperties.subscript.setter();
  uint64_t v18 = *a1;
  AccessibilityProperties.subscript.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(a7 + 8))(v15, AssociatedTypeWitness, a7);
  AccessibilityProperties.subscript.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, AssociatedTypeWitness);
}

uint64_t lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityTraitSet> and conformance AccessibilityNullableOptionSet<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for MutableBox<AccessibilityAttachment>()
{
  if (!lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>)
  {
    unint64_t v0 = type metadata accessor for MutableBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>);
    }
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityChildBehavior(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 104))(*a2) & 1;
}

uint64_t AccessibilityChildBehaviorBox.isEqual(to:)()
{
  type metadata accessor for AccessibilityChildBehaviorBox();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityLargeContentViewBehavior(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t type metadata accessor for AccessibilityChildBehaviorBox()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Contain and conformance AccessibilityChildBehavior.Contain);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore;
  if (!lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityChildBehavior.Ignore and conformance AccessibilityChildBehavior.Ignore);
  }
  return result;
}

void type metadata accessor for AccessibilityIdentifierStorage?()
{
  if (!lazy cache variable for type metadata for AccessibilityIdentifierStorage?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?);
    }
  }
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnScrollVisibilityChangeModifier@<X0>(uint64_t a1@<X8>)
{
  return OnScrollVisibilityChangeModifier.body(content:)(a1);
}

uint64_t ScrollTargetVisibilityChangeModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v57[0] = *(_OWORD *)(v2 + 3);
  long long v49 = *(_OWORD *)(v2 + 3);
  _s7SwiftUI5StateVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  uint64_t v7 = v2[2];
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  LOBYTE(v49) = v40;
  *((void *)&v49 + 1) = v5;
  *(void *)&long long v50 = v6;
  *((void *)&v50 + 1) = v7;
  swift_retain();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for _ViewModifier_Content();
  uint64_t v11 = type metadata accessor for PrimitiveTargetVisibilityModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](&v40, &v49, v10, v11, WitnessTable);
  swift_release();
  v27[0] = v40;
  uint64_t v28 = v41;
  long long v29 = v42;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v8;
  *(void *)(v13 + 24) = v9;
  long long v14 = *((_OWORD *)v3 + 1);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v13 + 48) = v14;
  *(void *)(v13 + 64) = v3[4];
  swift_retain();
  outlined retain of State<Bool>((uint64_t)v57);
  type metadata accessor for ModifiedContent();
  uint64_t v38 = WitnessTable;
  uint64_t v39 = &protocol witness table for PrimitiveTargetVisibilityModifier<A>;
  uint64_t v15 = swift_getWitnessTable();
  View.onAppear(perform:)();
  swift_release();
  swift_release();
  v27[0] = v49;
  uint64_t v28 = *((void *)&v49 + 1);
  long long v29 = v50;
  long long v30 = v51;
  long long v31 = v52;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v8;
  *(void *)(v16 + 24) = v9;
  long long v17 = *((_OWORD *)v3 + 1);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v16 + 48) = v17;
  *(void *)(v16 + 64) = v3[4];
  swift_retain();
  outlined retain of State<Bool>((uint64_t)v57);
  type metadata accessor for ModifiedContent();
  uint64_t v36 = v15;
  uint64_t v37 = MEMORY[0x1E4F40ED8];
  swift_getWitnessTable();
  View.onDisappear(perform:)();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v30);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v31);
  uint64_t v18 = v43;
  uint64_t v19 = v44;
  uint64_t v20 = v45;
  uint64_t v26 = v47;
  v27[0] = v40;
  uint64_t v28 = v41;
  long long v29 = v42;
  long long v30 = v43;
  long long v31 = v44;
  uint64_t v32 = v45;
  uint64_t v33 = v46;
  uint64_t v34 = v47;
  uint64_t v35 = v48;
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v27);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
  uint64_t v21 = v51;
  uint64_t v22 = v52;
  uint64_t v23 = v53;
  uint64_t v24 = v55;
  LOBYTE(v40) = v49;
  uint64_t v41 = *((void *)&v49 + 1);
  long long v42 = v50;
  long long v43 = v51;
  long long v44 = v52;
  uint64_t v45 = v53;
  uint64_t v46 = v54;
  uint64_t v47 = v55;
  uint64_t v48 = v56;
  static ViewBuilder.buildExpression<A>(_:)(&v40);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v21);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v22);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v24);
}

uint64_t OnScrollVisibilityChangeModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  long long v13 = *(_OWORD *)(v1 + 3);
  _s7SwiftUI5StateVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v4 = *v1;
  uint64_t v6 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v7 = swift_allocObject();
  long long v8 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 48) = v2[4];
  uint64_t v9 = swift_allocObject();
  long long v10 = *((_OWORD *)v2 + 1);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = v2[4];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = partial apply for closure #1 in OnScrollVisibilityChangeModifier.body(content:);
  *(void *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = partial apply for closure #2 in OnScrollVisibilityChangeModifier.body(content:);
  *(void *)(a1 + 88) = v9;
  swift_retain_n();
  outlined retain of State<Bool>((uint64_t)&v13);
  swift_retain();
  return outlined retain of State<Bool>((uint64_t)&v13);
}

void type metadata accessor for State<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5StateVySbGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5StateVySbGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5StateVySbGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5StateVySbGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined retain of State<Bool>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>()
{
  if (!lazy cache variable for type metadata for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>)
  {
    unint64_t v0 = type metadata accessor for MergedDocumentIntroAccessory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MergedDocumentIntroAccessory<EmptyDocumentIntroAccessory, EmptyDocumentIntroAccessory>);
    }
  }
}

uint64_t type metadata accessor for MergedDocumentIntroAccessory()
{
  return swift_getGenericMetadata();
}

uint64_t IsAnimated.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TransactionalPreferenceModifier();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

__n128 __swift_memcpy53_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t View._onButtonGesture(pressing:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[0] = a3;
  v12[1] = a4;
  v12[2] = a1;
  _OWORD v12[3] = a2;
  v12[4] = 0;
  char v13 = 1;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  swift_retain_n();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a1, a2);
  type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(0, &lazy cache variable for type metadata for ButtonActionModifier<_ButtonGesture>, (uint64_t)&type metadata for _ButtonGesture, (uint64_t)&protocol witness table for _ButtonGesture, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ButtonActionModifier);
  MEMORY[0x18C113660](v12, a5, v10, a6);
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a1);
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.buttonOutset : EnvironmentValues()
{
  return EnvironmentValues.buttonOutset.setter();
}

uint64_t key path getter for EnvironmentValues.buttonOutset : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.buttonOutset.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t EnvironmentValues.buttonOutset.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1ED419730, (uint64_t)&protocol witness table for ButtonOutsetKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1ED419730, (uint64_t)&protocol witness table for ButtonOutsetKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void EnvironmentValues.buttonOutset.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[4];
  char v3 = *((unsigned char *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1ED419730, (uint64_t)&protocol witness table for ButtonOutsetKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t EnvironmentValues.buttonOutset.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1ED419730, (uint64_t)&protocol witness table for ButtonOutsetKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1ED419730, (uint64_t)&protocol witness table for ButtonOutsetKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PlainListStyle()
{
  return &type metadata for PlainListStyle;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyNavigationLinkPresentedValue(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 176))(*a2) & 1;
}

uint64_t AnyNavigationLinkPresentedValueStorage.matches(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 208);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = swift_dynamicCastClass();
  if (v10)
  {
    uint64_t v11 = v10;
    char v12 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v12(v9, &v1[*(void *)(v2 + 224)], v3);
    v12(v6, (char *)(v11 + *(void *)(*(void *)v11 + 224)), v3);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
    v14(v6, v3);
    v14(v9, v3);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t destroy for SwipeActions.Value(void *a1)
{
  if (a1[3])
  {
    swift_bridgeObjectRelease();
    if (a1[5])
    {
      swift_release();
      swift_release();
    }
    if (a1[8])
    {
      swift_release();
      swift_release();
      uint64_t v2 = a1[10];
      if (v2)
      {
        if (v2 == 1) {
          goto LABEL_10;
        }
        swift_release();
      }
      if (a1[12]) {
        swift_release();
      }
    }
  }
LABEL_10:
  uint64_t result = a1[17];
  if (result)
  {
    swift_bridgeObjectRelease();
    if (a1[19])
    {
      swift_release();
      swift_release();
    }
    uint64_t result = a1[22];
    if (result)
    {
      swift_release();
      uint64_t result = swift_release();
      uint64_t v4 = a1[24];
      if (v4)
      {
        if (v4 == 1) {
          return result;
        }
        uint64_t result = swift_release();
      }
      if (a1[26])
      {
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t UpdateSubviewTransition.visit<A>(_:)()
{
  return AGGraphMutateAttribute();
}

uint64_t MakeSubviewTransition.visit<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29[1] = v9;
  uint64_t v10 = type metadata accessor for LazyTransition();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v29 - v13;
  int v15 = *v3;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v5, a2, v12);
  *(_DWORD *)uint64_t v14 = v15;
  *((void *)v14 + 1) = 0;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v14[*(int *)(v10 + 40)], v8, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v14, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v30, v10, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  LODWORD(v5) = v34;
  _GraphValue.init(_:)();
  int v18 = v3[4];
  uint64_t v19 = *((void *)v3 + 3);
  uint64_t v20 = *((void *)v3 + 6);
  uint64_t v21 = *((void *)v3 + 7);
  int v22 = v3[22];
  uint64_t v34 = *((void *)v3 + 1);
  int v35 = v18;
  uint64_t v36 = v19;
  long long v37 = *((_OWORD *)v3 + 2);
  uint64_t v38 = v20;
  uint64_t v39 = v21;
  long long v40 = *((_OWORD *)v3 + 4);
  uint64_t v41 = *((void *)v3 + 10);
  int v42 = v22;
  uint64_t v23 = *((void *)v3 + 14);
  uint64_t v24 = *((void *)v3 + 15);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v23;
  *(void *)(v25 + 24) = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  static Transition.makeView(view:inputs:body:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v26 = v29[3];
  uint64_t v27 = v29[4];
  uint64_t result = swift_bridgeObjectRelease();
  *((void *)v3 + 16) = v26;
  *((void *)v3 + 17) = v27;
  v3[36] = v5;
  *((unsigned char *)v3 + 148) = 0;
  *((void *)v3 + 19) = a2;
  return result;
}

uint64_t type metadata accessor for LazyTransition()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for LazyTransition(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

unsigned __int8 *protocol witness for Projection.get(base:) in conformance AnyNavigationSplitVisibility.ToTwoColumns@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  if (result[1]) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  *a2 = v2 | *result | 0x4000;
  return result;
}

uint64_t partial apply for closure #1 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, *(void *)(v1 + 16));
}

ValueMetadata *type metadata accessor for DividerStyleConfiguration()
{
  return &type metadata for DividerStyleConfiguration;
}

ValueMetadata *type metadata accessor for ContainerBackgroundValue()
{
  return &type metadata for ContainerBackgroundValue;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchCustomAccessory()
{
  return &type metadata for EnvironmentValues.SearchCustomAccessory;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchSuggestions()
{
  return &type metadata for EnvironmentValues.SearchSuggestions;
}

ValueMetadata *type metadata accessor for BoundInputsView()
{
  return &type metadata for BoundInputsView;
}

ValueMetadata *type metadata accessor for UIKitCellState()
{
  return &type metadata for UIKitCellState;
}

ValueMetadata *type metadata accessor for ListPadding()
{
  return &type metadata for ListPadding;
}

uint64_t type metadata completion function for EditMenuBridge()
{
  return swift_initClassMetadata2();
}

uint64_t static NavigationTitleActionModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v30 = *a1;
  unint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a2 + 24);
  unsigned int v8 = *(_DWORD *)(a2 + 28);
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  unsigned int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  unsigned int v13 = *(_DWORD *)(a2 + 56);
  unsigned int v14 = *(_DWORD *)(a2 + 60);
  unsigned int v15 = *(_DWORD *)(a2 + 64);
  unsigned int v16 = *(_DWORD *)(a2 + 68);
  unsigned int v18 = *(_DWORD *)(a2 + 72);
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  int v19 = *(_DWORD *)(a2 + 80);
  unint64_t v60 = v4;
  unsigned int v42 = v7;
  int v43 = v5;
  int v61 = v5;
  uint64_t v62 = v6;
  *(void *)&long long v63 = __PAIR64__(v8, v7);
  unsigned int v40 = v9;
  unsigned int v41 = v8;
  *((void *)&v63 + 1) = __PAIR64__(v10, v9);
  unsigned int v38 = v13;
  unsigned int v39 = v10;
  uint64_t v64 = v11;
  uint64_t v65 = v12;
  *(void *)&long long v66 = __PAIR64__(v14, v13);
  unsigned int v36 = v15;
  unsigned int v37 = v14;
  *((void *)&v66 + 1) = __PAIR64__(v16, v15);
  unsigned int v34 = v18;
  unsigned int v35 = v16;
  unint64_t v67 = __PAIR64__(v17, v18);
  int v32 = v19;
  unsigned int v33 = v17;
  int v68 = v19;
  unint64_t v44 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  unint64_t v52 = v60;
  int v53 = v61;
  *(void *)&v54[4] = v6;
  *(_OWORD *)uint64_t v55 = v63;
  *(void *)&v55[16] = v11;
  *(void *)&v55[24] = v12;
  long long v56 = v66;
  unint64_t v57 = v67;
  LODWORD(v58) = v68;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  a3(&v49, v20, &v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v21 = v49;
  unint64_t v52 = v49;
  int v47 = v50;
  int v53 = v50;
  *(_DWORD *)uint64_t v54 = v51;
  int v45 = v51;
  uint64_t v22 = _ViewOutputs.subscript.getter();
  if ((v22 & 0x100000000) == 0)
  {
    unsigned int v23 = v22;
    LODWORD(v52) = v30;
    type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for _GraphValue<NavigationTitleActionModifier>, (uint64_t)&unk_1ED456458, MEMORY[0x1E4F3F590]);
    unint64_t v31 = v21;
    unsigned int v24 = _GraphValue.value.getter();
    unint64_t v52 = v44;
    int v53 = v43;
    *(void *)&v54[4] = v6;
    *(_DWORD *)uint64_t v55 = v42;
    *(_DWORD *)&v55[4] = v41;
    *(_DWORD *)&_OWORD v55[8] = v40;
    *(_DWORD *)&v55[12] = v39;
    *(void *)&v55[16] = v11;
    *(void *)&v55[24] = v12;
    *(void *)&long long v56 = __PAIR64__(v37, v38);
    *((void *)&v56 + 1) = __PAIR64__(v35, v36);
    unint64_t v57 = __PAIR64__(v33, v34);
    LODWORD(v58) = v32;
    int v25 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    int v26 = v53;
    char v27 = v54[0];
    unint64_t v28 = v52;
    unint64_t v52 = __PAIR64__(v23, v24);
    unint64_t v21 = v31;
    int v53 = v25;
    *(void *)uint64_t v54 = v28;
    *(_DWORD *)&v54[8] = v26;
    v55[0] = v27;
    memset(&v55[4], 0, 28);
    long long v56 = 2uLL;
    unint64_t v57 = 0;
    uint64_t v58 = 0;
    char v59 = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type NavigationTitleBinder and conformance NavigationTitleBinder();
    Attribute.init<A>(body:value:flags:update:)();
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v47;
  *(_DWORD *)(a4 + 12) = v45;
  return result;
}

double static NavigationStackCore._makeView(view:inputs:)@<D0>(uint64_t a1@<X2>, double *a2@<X8>)
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  type metadata accessor for NavigationStackCore();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a1 - 8) + 64)) {
    closure #1 in static NavigationStackCore._makeView(view:inputs:)(1, a1);
  }
  AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  closure #2 in static NavigationStackCore._makeView(view:inputs:)(1);
  AGGraphCreateOffsetAttribute2();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  AnyInterfaceIdiom.init<A>(_:)();
  if (v5 && (uint64_t v7 = v5, v8 = v6, (static AnyInterfaceIdiom.== infix(_:_:)() & 1) != 0))
  {
    lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    type metadata accessor for NavigationStackCore.MultimodalNavigationStackRoot();
    type metadata accessor for _VariadicView.Tree();
    type metadata accessor for NavigationStackCore.MultimodalNavigationStackChild();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    swift_getWitnessTable();
  }
  else
  {
    lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    lazy protocol witness table accessor for type _GraphInputs.NavigationPresentationAdaptorKey and conformance _GraphInputs.NavigationPresentationAdaptorKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot();
    type metadata accessor for _VariadicView.Tree();
    type metadata accessor for NavigationStackCore.NavigationStackRepresentableChild();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    swift_getWitnessTable();
  }
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  double result = v8;
  *(void *)a2 = v7;
  a2[1] = v8;
  return result;
}

uint64_t NavigationStackCore.NavigationStackRepresentableChild.value.getter@<X0>(uint64_t a1@<X0>, int a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  double v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  uint64_t v17 = *(void *)Value;
  char v10 = *(unsigned char *)(Value + 8);
  uint64_t v16 = *(void *)(Value + 16);
  NavigationStackCore.NavigationStackRepresentableChild.ensuredAuthority.getter((uint64_t)v21);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue) {
    uint64_t v12 = *WeakValue;
  }
  else {
    uint64_t v12 = -1;
  }
  NavigationStackCore.NavigationStackRepresentableChild.navigationPresentationAdaptor.getter(a2, (uint64_t)&v22);
  if (v25[0] == 1)
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    outlined destroy of UINavigationPresentationAdaptor?((uint64_t)&v22, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor??);
  }
  else
  {
    outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)&v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor?);
  }
  uint64_t v22 = v17;
  char v23 = v10;
  uint64_t v24 = v16;
  outlined init with take of NavigationAuthority((uint64_t)v21, (uint64_t)v25);
  v25[3] = v12;
  outlined init with take of Slice<NavigationState.StackContent.Views.ViewsSequence<_VariadicView_Children, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>>?((uint64_t)v19, (uint64_t)&v26, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor?);
  uint64_t v13 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, a3);
  type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot();
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t type metadata accessor for NavigationStackCore.NavigationStackRepresentableRoot()
{
  return __swift_instantiateGenericMetadata();
}

void NavigationStackCore.NavigationStackRepresentableChild.navigationPresentationAdaptor.getter(int a1@<W3>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == a1)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = xmmword_18834FC50;
  }
  else
  {
    type metadata accessor for UINavigationPresentationAdaptor?();
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of UINavigationPresentationAdaptor?(Value, a2, (uint64_t (*)(void))type metadata accessor for UINavigationPresentationAdaptor?);
  }
}

uint64_t NavigationStackCore.NavigationStackRepresentableChild.ensuredAuthority.getter@<X0>(uint64_t a1@<X8>)
{
  NavigationStackCore.NavigationStackRepresentableChild.authority.getter((uint64_t)v7);
  outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v7, (uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for NavigationAuthority??);
  if (v6 == 2)
  {
    long long v10 = xmmword_18834BB90;
    uint64_t v11 = 0;
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0((uint64_t)&v5, (uint64_t)&v10, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for NavigationAuthority??);
  if (*((void *)&v10 + 1) != 1) {
    return outlined init with take of NavigationAuthority((uint64_t)&v10, a1);
  }
  type metadata accessor for NavigationStateHost();
  swift_allocObject();
  NavigationStateHost.init()();
  EnvironmentValues.init()();
  uint64_t v2 = v5;
  uint64_t v3 = v6;
  swift_weakInit();
  swift_weakAssign();
  swift_release();
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  outlined init with take of NavigationAuthority((uint64_t)v7, a1);
  return outlined destroy of PPTTestCase?((uint64_t)&v10, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
}

double NavigationStackCore.NavigationStackRepresentableChild.authority.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for PPTTestCase?(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of NavigationState.StackContent.PositionedView?(WeakValue, a1, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_18834C6B0;
    *(void *)(a1 + 16) = 0;
  }
  return result;
}

uint64_t outlined init with copy of NavigationState.StackContent.PositionedView?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for PPTTestCase?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t type metadata accessor for NavigationStackCore()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in static NavigationStackCore._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NavigationStackCore();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  _DWORD v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_14, (uint64_t)v7, (uint64_t)&type metadata for NavigationStackContext, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t type metadata accessor for NavigationStackCore.NavigationStackRepresentableChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MultimodalNavigationStack.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 80;
  outlined init with copy of NavigationAuthority(v1 + 80, (uint64_t)v34);
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of NavigationAuthority((uint64_t)v34);
  if (Strong
    && (swift_beginAccess(),
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(Strong + 16, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?), swift_release(), _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v27, (uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)v28) != 1))
  {
    __dst[6] = v28[6];
    __dst[7] = v28[7];
    __dst[8] = v28[8];
    __dst[2] = v28[2];
    __dst[3] = v28[3];
    __dst[4] = v28[4];
    __dst[5] = v28[5];
    __dst[0] = v28[0];
    Swift::UInt v6 = *(void *)(v2 + 56);
    Swift::UInt v7 = *(void *)(v2 + 72);
    unsigned __int8 v8 = *(unsigned char *)(v2 + 64);
    LOWORD(__dst[9]) = v28[9];
    __dst[1] = v28[1];
    NavigationState.stackContent(for:)(v6, v8, v7, (uint64_t)v35);
    outlined retain of NavigationState?((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v35, (uint64_t)__dst, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)__dst);
  }
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)__dst, (uint64_t)v37, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with copy of MultimodalNavigationStack(v2, (uint64_t)v29);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v37, (uint64_t)v34, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v34) == 1)
  {
    uint64_t v9 = v30;
    int v10 = v31;
    uint64_t v11 = v32;
    outlined destroy of MultimodalNavigationStack((uint64_t)v29);
    *(void *)&__dst[0] = v9;
    if (v10 == 4) {
      char v12 = 0;
    }
    else {
      char v12 = v10;
    }
    BYTE8(__dst[0]) = v12;
    *(void *)&__dst[1] = v11;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(__dst);
    outlined init with take of NavigationState.Base(__dst, __src);
  }
  else
  {
    outlined destroy of MultimodalNavigationStack((uint64_t)v29);
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v37, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  memcpy(__dst, __src, 0x188uLL);
  NavigationState.StackContent.count.getter();
  uint64_t v14 = v13;
  outlined retain of NavigationState.StackContent((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  MultimodalNavigationStack.rootView.getter((uint64_t)v28);
  outlined init with copy of MultimodalNavigationStack(v2, (uint64_t)__dst);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  outlined init with take of MultimodalNavigationStack(__dst, v15 + 24);
  type metadata accessor for _ContiguousArrayStorage<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v28, v16 + 32, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
  outlined init with take of NavigationState.Base(__src, v27);
  v27[49] = partial apply for closure #1 in MultimodalNavigationStack.body.getter;
  v27[50] = v15;
  v27[51] = v16;
  outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>);
  memcpy(v28, v27, sizeof(v28));
  memcpy(__dst, v27, sizeof(__dst));
  uint64_t v17 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVy7SwiftUI15NavigationStateV12StackContentV5ViewsV0lE0Vy___AH08ModifiedK0VyAH13_VariadicViewO4TreeVy_AH13_VStackLayoutVAH01_nO9_ChildrenVGAH16RootItemModifier33_0CB7C3A8C661577BDD4B07512497B9D9LLVGAH0juV0A1_LLVGG_AH0jU0A1_LLVs5NeverOTB503_s7f14UI25Multimodalhj23V4bodyQrvgAA0E4Item33_0wxyz35BDD4B07512497B9D9LLVSi6offset_AA0D5i4V0E7k13V14PositionedO18V7elementt_tXEfU0_Tf1cn_n((uint64_t)__dst);
  outlined release of NavigationState.StackContent.Views.ViewsSequence<A, B>((uint64_t)v28);
  char v18 = *(unsigned char *)(v2 + 136);
  uint64_t v19 = *(void *)(v2 + 144);
  char v20 = *(unsigned char *)(v2 + 152);
  uint64_t v21 = *(void *)(v2 + 160);
  v27[0] = *(void *)(v2 + 128);
  LOBYTE(v27[1]) = v18;
  _OWORD v27[2] = v19;
  LOBYTE(v27[3]) = v20;
  v27[4] = v21;
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  *(void *)a1 = v17;
  memcpy((void *)(a1 + 8), __src, 0x188uLL);
  outlined init with copy of NavigationAuthority(v4, a1 + 400);
  *(void *)(a1 + 424) = v23;
  *(unsigned char *)(a1 + 432) = v24;
  *(void *)(a1 + 440) = v25;
  *(unsigned char *)(a1 + 448) = v26;
  *(void *)(a1 + 456) = swift_getKeyPath();
  *(unsigned char *)(a1 + 464) = 0;
  uint64_t result = swift_getKeyPath();
  *(void *)(a1 + 472) = result;
  *(unsigned char *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 504) = 1;
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 544) = 0;
  *(void *)(a1 + 536) = 0;
  return result;
}

void NavigationState.stackContent(for:)(Swift::UInt a1@<X0>, unsigned __int8 a2@<W1>, Swift::UInt a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v4 + 24);
  if (a2 == 4)
  {
    v19[0] = *(_OWORD *)v5;
    *(void *)&v19[1] = *(void *)(v5 + 16);
    *((void *)&v19[1] + 1) = v7;
    long long v8 = *(_OWORD *)(v5 + 112);
    v19[6] = *(_OWORD *)(v5 + 96);
    v19[7] = v8;
    v19[8] = *(_OWORD *)(v5 + 128);
    LOWORD(v19[9]) = *(_WORD *)(v5 + 144);
    long long v9 = *(_OWORD *)(v5 + 48);
    _OWORD v19[2] = *(_OWORD *)(v5 + 32);
    v19[3] = v9;
    long long v10 = *(_OWORD *)(v5 + 80);
    _DWORD v19[4] = *(_OWORD *)(v5 + 64);
    v19[5] = v10;
    NavigationState.mergedStackContent(for:columnCount:)(a1, a3, a4);
  }
  else if (*(void *)(v7 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3), (v12 & 1) != 0))
  {
    memcpy(__dst, (const void *)(*(void *)(v7 + 56) + 304 * v11), 0x12BuLL);
    memcpy(v16, __dst, 0x12BuLL);
    memset(&v16[38], 0, 88);
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi0_(v16);
    outlined init with take of NavigationState.Base(v16, __src);
    memcpy(v19, __src, 0x188uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v19, v13, v14, v15);
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v19, a4, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined retain of NavigationColumnState(__dst);
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v19);
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)v19, a4, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
}

double _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0x7000000000000007;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = xmmword_18834FC60;
  *(void *)(a1 + 264) = 4194296;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 384) = 0;
  return result;
}

void NavigationState.mergedStackContent(for:columnCount:)(Swift::UInt a1@<X0>, Swift::UInt a2@<X1>, uint64_t a3@<X8>)
{
  long long v7 = v3[7];
  long long v33 = v3[6];
  long long v34 = v7;
  long long v35 = v3[8];
  unsigned __int16 v36 = *((_WORD *)v3 + 72);
  long long v8 = v3[3];
  v31[2] = v3[2];
  v31[3] = v8;
  long long v9 = v3[5];
  v31[4] = v3[4];
  long long v32 = v9;
  long long v10 = *v3;
  long long v11 = v3[1];
  if (a2 == 2) {
    char v12 = &outlined read-only object #0 of NavigationState.mergedStackContent(for:columnCount:);
  }
  else {
    char v12 = &outlined read-only object #1 of NavigationState.mergedStackContent(for:columnCount:);
  }
  v31[0] = v10;
  v31[1] = v11;
  outlined retain of NavigationState((uint64_t)v31);
  uint64_t v13 = specialized Sequence.compactMap<A>(_:)((uint64_t)v12, (uint64_t)v31, a1, a2);
  outlined release of NavigationState((uint64_t)v31);
  swift_bridgeObjectRelease();
  if (*((void *)v13 + 2) == a2)
  {
    long long v14 = v32;
    long long v15 = v33;
    long long v16 = v34;
    long long v17 = v35;
    uint64_t v22 = a3;
    uint64_t v23 = v13;
    unsigned __int16 v18 = v36;
    long long v24 = v32;
    long long v25 = v33;
    long long v26 = v34;
    long long v27 = v35;
    unsigned __int16 v28 = v36;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi1_(&v23);
    outlined init with take of NavigationState.Base(&v23, __src);
    memcpy(__dst, __src, 0x188uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v19, v20, v21);
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)__dst, v22, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    outlined copy of NavigationSplitViewState?(v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)__dst);
    outlined init with take of NavigationState.StackContent.Key?((uint64_t)__dst, a3, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
}

uint64_t outlined retain of NavigationState(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 128);
  unsigned __int16 v4 = *(_WORD *)(a1 + 144);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of NavigationListState?(v2, v3);
  outlined copy of NavigationSplitViewState?(v13, v12, v11, v10, v9, v8, v7, v6, v4, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  return a1;
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, Swift::UInt a3, Swift::UInt a4)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    if (*(void *)(v8 + 16))
    {
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a3, *(unsigned char *)(a1 + v9 + 32), a4);
      if (v12)
      {
        memcpy(__src, (const void *)(*(void *)(v8 + 56) + 304 * v11), 0x12BuLL);
        outlined retain of NavigationColumnState(__src);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v10 + 2) + 1, 1, v10);
        }
        unint64_t v14 = *((void *)v10 + 2);
        unint64_t v13 = *((void *)v10 + 3);
        if (v14 >= v13 >> 1) {
          uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v10);
        }
        *((void *)v10 + 2) = v14 + 1;
        memcpy(&v10[304 * v14 + 32], __src, 0x12BuLL);
      }
    }
    ++v9;
  }
  while (v4 != v9);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t outlined release of NavigationState(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v7 = *(void *)(a1 + 128);
  unsigned __int16 v4 = *(_WORD *)(a1 + 144);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of NavigationListState?(v2, v3);
  outlined copy of NavigationSplitViewState?(v13, v12, v11, v10, v9, v8, v7, v6, v4, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

void *_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi0_(void *result)
{
  uint64_t v1 = result[31] & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = result[33] & 7;
  uint64_t v3 = result[37] & 0xFFFF03 | 0x4000000000000000;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v1;
  result[33] = v2;
  result[37] = v3;
  return result;
}

void *_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi1_(void *result)
{
  uint64_t v1 = result[31] & 0xFFFFFFFFFFFFFF8;
  uint64_t v2 = result[33] & 7;
  unint64_t v3 = result[37] & 0xFFFF03 | 0x8000000000000000;
  result[21] &= 0x8FFFFFFFFFFFFFF8;
  result[31] = v1;
  result[33] = v2;
  result[37] = v3;
  return result;
}

uint64_t closure #5 in ScrollStateActionBinding.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x1E4F40498];
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(a2, (uint64_t)v14, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v14, (uint64_t)&v9, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(a2 + 128, (uint64_t)v13, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v13, (uint64_t)v8, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  swift_retain();
  swift_retain();
  uint64_t v9 = specialized static ScrollStateActionBinding.barTransitionProgress(topState:bottomState:)((uint64_t)&v9, (uint64_t)v8);
  char v10 = v4 & 1;
  uint64_t v11 = v5;
  char v12 = v6 & 1;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t specialized static ScrollStateActionBinding.barTransitionProgress(topState:bottomState:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x1E4F40498];
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(a1, (uint64_t)v24, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(a2, (uint64_t)v25, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v24, (uint64_t)&v26, &lazy cache variable for type metadata for ScrollGeometryState?, v3);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v26) == 1)
  {
LABEL_7:
    double v14 = 0.0;
    goto LABEL_9;
  }
  long long v4 = v26;
  long long v5 = v27;
  long long v6 = v28;
  long long v7 = v29;
  long long v8 = v30;
  long long v9 = v31;
  long long v10 = v32;
  long long v22 = v28;
  if (one-time initialization token for topBarTransitionDistance != -1)
  {
    long long v20 = v27;
    long long v21 = v26;
    long long v18 = v30;
    long long v19 = v29;
    long long v16 = v32;
    long long v17 = v31;
    swift_once();
    long long v10 = v16;
    long long v9 = v17;
    long long v8 = v18;
    long long v7 = v19;
    long long v5 = v20;
    long long v4 = v21;
    long long v6 = v22;
  }
  double v11 = *(double *)&static ClarityUIMetrics.topBarTransitionDistance;
  v23[0] = v4;
  v23[1] = v5;
  v23[2] = v6;
  _OWORD v23[3] = v7;
  v23[4] = v8;
  v23[5] = v9;
  v23[6] = v10;
  ScrollGeometry.contentOffset.getter();
  double v13 = *(double *)&v22 + v12;
  if (v11 > *(double *)&v22 + v12)
  {
    if (v13 > 0.0)
    {
      double v14 = v13 / v11;
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  double v14 = 1.0;
LABEL_9:
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v25, (uint64_t)v23, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
  if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v23) != 1) {
    specialized static ScrollStateActionBinding.bottomBarTransitionProgress(state:)();
  }
  return *(void *)&v14;
}

double ScrollStateActionBinding.findBestStates(in:position:size:transform:)@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>, CGFloat a6@<D2>, CGFloat a7@<D3>)
{
  v70.width = a6;
  v70.height = a7;
  v69.x = a4;
  v69.CGFloat y = a5;
  uint64_t v68 = *a2;
  uint64_t v66 = a2[2];
  uint64_t v67 = a2[1];
  uint64_t v64 = a2[4];
  uint64_t v65 = a2[3];
  _s7SwiftUI19ScrollGeometryStateVSgWOi0_((uint64_t)v115);
  uint64_t v8 = MEMORY[0x1E4F40498];
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v115, (uint64_t)v106, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v115, (uint64_t)v113, &lazy cache variable for type metadata for ScrollGeometryState?, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = a1 + (v9 << 7) - 32;
    for (uint64_t i = v9 - 1; ; --i)
    {
      uint64_t v12 = *(void *)(v10 - 64);
      uint64_t v13 = *(void *)(v10 - 56);
      uint64_t v14 = *(void *)(v10 - 48);
      uint64_t v15 = *(void *)(v10 - 40);
      uint64_t v16 = *(void *)(v10 - 32);
      uint64_t v17 = *(void *)(v10 - 24);
      uint64_t v18 = *(void *)(v10 - 16);
      uint64_t v19 = *(void *)(v10 - 8);
      uint64_t v20 = *(void *)v10;
      uint64_t v21 = *(void *)(v10 + 8);
      uint64_t v22 = *(void *)(v10 + 16);
      uint64_t v23 = *(void *)(v10 + 24);
      uint64_t v24 = *(void *)(v10 + 32);
      uint64_t v25 = *(void *)(v10 + 40);
      char v26 = *(unsigned char *)(v10 + 48);
      uint64_t v27 = *(void *)(v10 + 49);
      *(_DWORD *)((char *)v105 + 7) = *(_DWORD *)(v10 + 56);
      v105[0] = v27;
      if ((v26 & 2) == 0) {
        goto LABEL_15;
      }
      *(void *)&long long v86 = v12;
      *((void *)&v86 + 1) = v13;
      *(void *)&long long v87 = v14;
      *((void *)&v87 + 1) = v15;
      uint64_t v88 = v16;
      uint64_t v89 = v17;
      uint64_t v90 = v18;
      uint64_t v91 = v19;
      uint64_t v92 = v20;
      uint64_t v93 = v21;
      uint64_t v94 = v22;
      uint64_t v95 = v23;
      uint64_t v96 = v24;
      uint64_t v97 = v25;
      char v98 = v26;
      v99[0] = *(void *)(v10 + 49);
      *(_DWORD *)((char *)v99 + 7) = *(_DWORD *)(v10 + 56);
      uint64_t v79 = v21;
      uint64_t v80 = v20;
      uint64_t v77 = v23;
      uint64_t v78 = v22;
      uint64_t v75 = v25;
      uint64_t v76 = v24;
      ScrollGeometryState.transform.getter();
      uint64_t v28 = v83;
      if (v83 == 1) {
        goto LABEL_15;
      }
      long long v29 = v84;
      long long v30 = v85;
      rect.origin.CGFloat y = 0.0;
      rect.origin.x = 0.0;
      rect.size = v70;
      uint64_t v101 = v68;
      *(void *)&long long v102 = v67;
      *((void *)&v102 + 1) = v66;
      *(void *)&long long v103 = v65;
      *((void *)&v103 + 1) = v64;
      swift_retain();
      ViewTransform.appendPosition(_:)(v69);
      uint64_t v88 = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      LOBYTE(v89) = 2;
      uint64_t v83 = v101;
      long long v84 = v102;
      long long v85 = v103;
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)&v86);
      uint64_t v73 = v13;
      *(void *)&long long v86 = v12;
      *((void *)&v86 + 1) = v13;
      *(void *)&long long v87 = v14;
      uint64_t v31 = v15;
      *((void *)&v87 + 1) = v15;
      uint64_t v74 = v16;
      uint64_t v88 = v16;
      uint64_t v32 = v17;
      uint64_t v89 = v17;
      uint64_t v71 = v19;
      uint64_t v72 = v18;
      uint64_t v90 = v18;
      uint64_t v91 = v19;
      uint64_t v92 = v80;
      uint64_t v93 = v79;
      uint64_t v94 = v78;
      uint64_t v95 = v77;
      uint64_t v96 = v76;
      uint64_t v97 = v75;
      ScrollGeometry.bounds.getter();
      v100.origin.CGFloat y = 0.0;
      v100.origin.x = 0.0;
      v100.size.width = v33;
      v100.size.height = v34;
      uint64_t v88 = 0;
      long long v86 = 0u;
      long long v87 = 0u;
      LOBYTE(v89) = 2;
      uint64_t v83 = v28;
      long long v84 = v29;
      long long v85 = v30;
      CGRect.convert(to:transform:)();
      outlined destroy of CoordinateSpace((uint64_t)&v86);
      CGFloat y = rect.origin.y;
      CGFloat v36 = v100.origin.y;
      if ((~*(void *)&rect.origin.y & 0x7FF0000000000000) != 0
        && (~*(void *)&v100.origin.y & 0x7FF0000000000000) != 0)
      {
        double v45 = fabs(rect.origin.y);
        double v46 = fabs(v100.origin.y);
        if (v45 <= v46) {
          double v45 = v46;
        }
        double v47 = v45 * 0.0000000149011612;
        double v48 = vabdd_f64(rect.origin.y, v100.origin.y);
        BOOL v49 = v45 > 2.22507386e-308;
        uint64_t v50 = 0x4000000;
        if (v49) {
          *(double *)&uint64_t v50 = v47;
        }
        uint64_t v37 = v12;
        uint64_t v38 = v74;
        uint64_t v39 = v73;
        if (v48 < *(double *)&v50)
        {
LABEL_8:
          *(void *)&long long v86 = v37;
          *((void *)&v86 + 1) = v39;
          *(void *)&long long v87 = v14;
          *((void *)&v87 + 1) = v31;
          uint64_t v88 = v38;
          uint64_t v89 = v32;
          uint64_t v90 = v72;
          uint64_t v91 = v71;
          uint64_t v92 = v80;
          uint64_t v93 = v79;
          uint64_t v94 = v78;
          uint64_t v95 = v77;
          uint64_t v96 = v76;
          uint64_t v97 = v75;
          char v98 = v26;
          v99[0] = v105[0];
          *(_DWORD *)((char *)v99 + 7) = *(_DWORD *)((char *)v105 + 7);
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v86);
          _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)&v86, (uint64_t)v106, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
        }
      }
      else
      {
        uint64_t v37 = v12;
        uint64_t v38 = v74;
        uint64_t v39 = v73;
        if (specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(v100.origin.y, 0.0000000149011612, rect.origin.y))goto LABEL_8; {
      }
        }
      v116.origin.x = rect.origin.x;
      v116.size.width = rect.size.width;
      v116.size.height = rect.size.height;
      v116.origin.CGFloat y = y;
      double MaxY = CGRectGetMaxY(v116);
      v117.origin.x = v100.origin.x;
      v117.size.width = v100.size.width;
      v117.size.height = v100.size.height;
      v117.origin.CGFloat y = v36;
      double v41 = CGRectGetMaxY(v117);
      double v42 = v41;
      if ((~*(void *)&MaxY & 0x7FF0000000000000) != 0 && (~*(void *)&v41 & 0x7FF0000000000000) != 0)
      {
        outlined consume of Transaction?(v28);
        double v51 = fabs(MaxY);
        double v52 = fabs(v42);
        if (v51 <= v52) {
          double v51 = v52;
        }
        double v53 = vabdd_f64(MaxY, v42);
        if (v51 > 2.22507386e-308) {
          double v54 = v51 * 0.0000000149011612;
        }
        else {
          double v54 = COERCE_DOUBLE(0x4000000);
        }
        swift_release();
        if (v53 < v54)
        {
LABEL_12:
          *(void *)&long long v86 = v37;
          *((void *)&v86 + 1) = v39;
          *(void *)&long long v87 = v14;
          *((void *)&v87 + 1) = v31;
          uint64_t v88 = v38;
          uint64_t v89 = v32;
          uint64_t v90 = v72;
          uint64_t v91 = v71;
          uint64_t v92 = v80;
          uint64_t v93 = v79;
          uint64_t v94 = v78;
          uint64_t v95 = v77;
          uint64_t v96 = v76;
          uint64_t v97 = v75;
          char v98 = v26;
          v99[0] = v105[0];
          *(_DWORD *)((char *)v99 + 7) = *(_DWORD *)((char *)v105 + 7);
          _s7SwiftUI19ScrollGeometryStateVSgWOi_((uint64_t)&v86);
          _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)&v86, (uint64_t)v113, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
        }
      }
      else
      {
        char v43 = specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(v41, 0.0000000149011612, MaxY);
        outlined consume of Transaction?(v28);
        swift_release();
        if (v43) {
          goto LABEL_12;
        }
      }
      uint64_t v44 = MEMORY[0x1E4F40498];
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v106, (uint64_t)&v83, &lazy cache variable for type metadata for ScrollGeometryState?, MEMORY[0x1E4F40498]);
      _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)&v83, (uint64_t)&v86, &lazy cache variable for type metadata for ScrollGeometryState?, v44);
      if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)&v86) != 1)
      {
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v113, (uint64_t)v81, &lazy cache variable for type metadata for ScrollGeometryState?, v44);
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v81, (uint64_t)v82, &lazy cache variable for type metadata for ScrollGeometryState?, v44);
        if (_s7SwiftUI19ScrollGeometryStateVSgWOg((uint64_t)v82) != 1)
        {
LABEL_31:
          swift_bridgeObjectRelease();
          break;
        }
      }
LABEL_15:
      if (!i) {
        goto LABEL_31;
      }
      v10 -= 128;
    }
  }
  long long v55 = v113[5];
  a3[12] = v113[4];
  a3[13] = v55;
  a3[14] = v114[0];
  *(_OWORD *)((char *)a3 + 237) = *(_OWORD *)((char *)v114 + 13);
  long long v56 = v113[1];
  a3[8] = v113[0];
  a3[9] = v56;
  long long v57 = v113[3];
  a3[10] = v113[2];
  a3[11] = v57;
  long long v58 = v110;
  a3[4] = v109;
  a3[5] = v58;
  long long v59 = v112;
  a3[6] = v111;
  a3[7] = v59;
  long long v60 = v106[1];
  *a3 = v106[0];
  a3[1] = v60;
  double result = *(double *)&v107;
  long long v62 = v108;
  a3[2] = v107;
  a3[3] = v62;
  return result;
}

uint64_t outlined init with take of NavigationState.StackContent?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for PreferenceValues.Value<PresentationOptionsPreference>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for PPTTestCase?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for NavigationState.StackContent?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for NavigationState.StackContent?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for PPTTestCase?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI11PPTTestCaseVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _s7SwiftUI19ScrollGeometryStateVSgWOi_(uint64_t result)
{
  *(unsigned char *)(result + 124) = 0;
  return result;
}

double _s7SwiftUI19ScrollGeometryStateVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 124) = 1;
  return result;
}

uint64_t *StackItemsView.navigateBack(isAnimated:)(int a1)
{
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v85, (const void *)(v1 + 8), sizeof(v85));
  outlined init with take of NavigationState.Base(v85, v86);
  int v6 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v86);
  if (!v6)
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v86);
    outlined retain of NavigationState.StackContent((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    return (uint64_t *)outlined retain of NavigationState.StackContent((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  }
  int v76 = a1;
  uint64_t v75 = v5;
  uint64_t v77 = (const void *)(v1 + 8);
  if (v6 != 1)
  {
    uint64_t v29 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v86);
    uint64_t v74 = &v65;
    uint64_t v30 = *(void *)v29;
    uint64_t v31 = *(void *)(v29 + 8);
    uint64_t v32 = *(void *)(v29 + 16);
    uint64_t v33 = *(void *)(v29 + 24);
    uint64_t v35 = *(void *)(v29 + 32);
    uint64_t v34 = *(void *)(v29 + 40);
    uint64_t v78 = v1;
    uint64_t v36 = *(void *)(v29 + 48);
    uint64_t v37 = *(void *)(v29 + 56);
    uint64_t v38 = *(void *)(v29 + 64);
    uint64_t v71 = v31;
    uint64_t v72 = v38;
    unsigned __int16 v39 = *(_WORD *)(v29 + 72);
    v83[0] = v31;
    v83[1] = v32;
    v83[2] = v33;
    v83[3] = v35;
    v83[4] = v34;
    v83[5] = v36;
    v83[6] = v37;
    v83[7] = v38;
    unsigned __int16 v84 = v39;
    *(void *)&v82[0] = v30;
    uint64_t v73 = *(void *)(v30 + 16);
    MEMORY[0x1F4188790](v29);
    uint64_t v64 = v83;
    outlined retain of NavigationState.StackContent((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
    uint64_t v40 = v31;
    uint64_t v41 = v72;
    outlined copy of NavigationSplitViewState?(v40, v32, v33, v35, v34, v36, v37, v72, v39, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    uint64_t v42 = (uint64_t)specialized Sequence.reduce<A>(_:_:)(0, (void *(*)(void **__return_ptr, void **, uint64_t *))_sSl7SwiftUIAA21NavigationColumnStateV7ElementRtzSi5IndexRtzrlE18collapsedItemCount6within09splitViewE0Siqd___AA0c5SplitmE0VSgtSkRd__AcDRtd__SiAFRtd__lFS2i_SitXEfU_SayACG_APTG5TA_0, (uint64_t)&v62, 0, v73);
    uint64_t v43 = v36;
    uint64_t v28 = v78;
    outlined copy of NavigationSplitViewState?(v71, v32, v33, v35, v34, v43, v37, v41, v39, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    double result = (uint64_t *)outlined retain of NavigationState.StackContent((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
    if (v42 <= 1) {
      return result;
    }
    goto LABEL_10;
  }
  double result = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v86);
  uint64_t v8 = result[21];
  if (v8 < 0) {
    return result;
  }
  uint64_t v9 = result;
  uint64_t v78 = v1;
  uint64_t v11 = result[14];
  uint64_t v10 = result[15];
  uint64_t v12 = result[16];
  uint64_t v13 = result[18];
  uint64_t v71 = result[17];
  uint64_t v72 = v12;
  uint64_t v15 = result[19];
  uint64_t v14 = result[20];
  uint64_t v16 = result[22];
  uint64_t v17 = (void *)result[23];
  uint64_t v18 = *(uint64_t **)(*(void *)v8 + 88);
  uint64_t v73 = *(void *)v8 + 88;
  uint64_t v74 = v18;
  outlined retain of NavigationState.StackContent((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  outlined retain of NavigationColumnState(v9);
  uint64_t v63 = v16;
  uint64_t v64 = v17;
  uint64_t v69 = v10;
  uint64_t v70 = v11;
  uint64_t v19 = v11;
  uint64_t v20 = v10;
  uint64_t v22 = v71;
  uint64_t v21 = v72;
  uint64_t v67 = v15;
  uint64_t v68 = v13;
  uint64_t v66 = v14;
  outlined copy of NavigationColumnState.ColumnContent(v19, v20, v72, v71, v13, v15, v14, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = ((uint64_t (*)(uint64_t))v74)(v23);
  double result = (uint64_t *)swift_release();
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(v16 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v63 = v16;
  uint64_t v64 = v17;
  outlined consume of NavigationColumnState.ColumnContent(v70, v69, v21, v22, v68, v67, v66, v8);
  outlined release of NavigationColumnState(v9);
  double result = (uint64_t *)outlined retain of NavigationState.StackContent((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  if (__OFADD__(v26, v27))
  {
LABEL_26:
    __break(1u);
    return result;
  }
  uint64_t v28 = v78;
  if (v26 + v27 <= 1) {
    return result;
  }
LABEL_10:
  if ((v76 & 1) == 0)
  {
    uint64_t v44 = *(void *)(v28 + 528);
    LOBYTE(v82[0]) = 1;
    if (v44)
    {
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
    }
    v82[0] = *(_OWORD *)(v28 + 536);
    type metadata accessor for _ContiguousArrayStorage<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>(0, &lazy cache variable for type metadata for State<Task<(), Error>?>, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Error>?, MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
    uint64_t v45 = *(void *)&v79[0];
    if (*(void *)&v79[0])
    {
      unint64_t v46 = type metadata accessor for Error();
      MEMORY[0x18C115EE0](v45, MEMORY[0x1E4FBC848] + 8, v46, MEMORY[0x1E4FBC0F0]);
      swift_release();
    }
    uint64_t v47 = type metadata accessor for TaskPriority();
    uint64_t v48 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v75, 1, 1, v47);
    outlined init with copy of StackItemsView(v28, (uint64_t)v82);
    type metadata accessor for MainActor();
    uint64_t v49 = static MainActor.shared.getter();
    uint64_t v50 = swift_allocObject();
    uint64_t v51 = MEMORY[0x1E4FBCFD8];
    *(void *)(v50 + 16) = v49;
    *(void *)(v50 + 24) = v51;
    outlined init with take of StackItemsView((uint64_t)v82, v50 + 32);
    uint64_t v52 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #1 in StackItemsView.navigateBack(isAnimated:), v50);
    uint64_t v53 = *(void *)(v28 + 544);
    *(void *)&v82[0] = v52;
    if (v53)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  outlined init with copy of NavigationAuthority(v28 + 400, (uint64_t)v81);
  memcpy(v82, v77, 0x188uLL);
  uint64_t v54 = NavigationState.StackContent.topKey.getter();
  unsigned __int8 v56 = v55;
  uint64_t v58 = v57;
  static Transaction.current.getter();
  static Transaction.current.getter();
  char v59 = Transaction.disablesAnimations.getter();
  swift_release();
  if (v59) {
    char v60 = 1;
  }
  else {
    char v60 = Transaction.disablesAnimations.getter();
  }
  static Transaction.current.getter();
  uint64_t v61 = Transaction.animation.getter();
  swift_release();
  if (!v61) {
    uint64_t v61 = Transaction.animation.getter();
  }
  swift_release();
  *(_OWORD *)((char *)v82 + 8) = 0u;
  *(void *)&v82[0] = 1;
  *((void *)&v82[3] + 1) = 0;
  *(_OWORD *)((char *)&v82[2] + 8) = 0u;
  *(_OWORD *)((char *)&v82[1] + 8) = 0u;
  LOBYTE(v82[4]) = 9;
  *((void *)&v82[4] + 1) = v54;
  *(void *)&v82[5] = v56;
  *((void *)&v82[5] + 1) = v58;
  memset(&v82[6], 0, 24);
  BYTE8(v82[7]) = v60 & 1;
  *(void *)&v82[8] = v61;
  v79[6] = 0u;
  v79[7] = v82[7];
  uint64_t v80 = v61;
  _OWORD v79[2] = v82[2];
  v79[3] = 0uLL;
  v79[4] = v82[4];
  v79[5] = v82[5];
  v79[0] = v82[0];
  v79[1] = v82[1];
  NavigationAuthority.enqueueRequest(_:)(v79);
  outlined release of NavigationRequest((uint64_t)v82);
  return (uint64_t *)outlined destroy of NavigationAuthority((uint64_t)v81);
}

uint64_t *outlined retain of NavigationColumnState(uint64_t *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[16];
  uint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  uint64_t v5 = a1[17];
  uint64_t v6 = a1[18];
  uint64_t v9 = a1[20];
  uint64_t v10 = a1[19];
  uint64_t v8 = a1[21];
  outlined copy of NavigationListState?(a1[5], a1[6]);
  outlined copy of Binding<AnyNavigationPath>?(v2, v3);
  outlined copy of NavigationColumnState.ColumnContent(v12, v11, v4, v5, v6, v10, v9, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined copy of NavigationColumnState.ColumnContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8 < 0)
  {
    return outlined copy of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
  }
  else
  {
    outlined copy of NavigationColumnState.ReplacedRoot?(a1, a2, a3, a4);
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined copy of NavigationListState?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of NavigationColumnState.ReplacedRoot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((~a1 & 0xF000000000000007) != 0) {
    return outlined copy of NavigationColumnState.ReplacedRoot(a1, a2, a3, a4);
  }
  return a1;
}

uint64_t outlined copy of Binding<AnyNavigationPath>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of NavigationState.StackContent(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v12 = *(_OWORD *)(a1 + 368);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    *(void *)(a1 + 384));
  return a1;
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t key path setter for EnvironmentValues.editMode : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);

  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t closure #1 in StackItemsView.navigateBack(isAnimated:)()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  uint64_t v3 = dispatch thunk of Actor.unownedExecutor.getter();
  if (v0) {
    unint64_t v4 = closure #1 in StackItemsView.navigateBack(isAnimated:);
  }
  else {
    unint64_t v4 = closure #1 in StackItemsView.navigateBack(isAnimated:);
  }
  return MEMORY[0x1F4188298](v4, v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 528);
  *(unsigned char *)(v0 + 56) = 0;
  if (v2)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

Swift::Void __swiftcall HostingScrollView.PlatformContainer._updateSafeAreaInsets()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v3 = objc_msgSend(v0, sel_window);
  if (v3)
  {

    unint64_t v4 = (double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
    double v5 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
    double v6 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8];
    double v7 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16];
    double v8 = *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24];
    if (v5 == 1.79769313e308 && v6 == 1.79769313e308 && v7 == 1.79769313e308 && v8 == 1.79769313e308)
    {
      v28.receiver = v0;
      v28.super_class = ObjectType;
      objc_msgSendSuper2(&v28, sel_safeAreaInsets);
      double v5 = v12;
      double v6 = v13;
      double v7 = v14;
      double v8 = v15;
    }
    uint64_t v16 = *(void *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_safeAreaHelper];
    specialized UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(v1);
    if ((*(unsigned char *)(v16 + 48) & 1) == 0)
    {
      long long v17 = *(_OWORD *)(v16 + 32);
      *(_OWORD *)unint64_t v4 = *(_OWORD *)(v16 + 16);
      *((_OWORD *)v4 + 1) = v17;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(unsigned char *)(v16 + 48) = 1;
    }
    v30.receiver = v1;
    v30.super_class = ObjectType;
    objc_msgSendSuper2(&v30, sel__updateSafeAreaInsets);
    double v18 = *v4;
    double v19 = v4[1];
    double v20 = v4[2];
    double v21 = v4[3];
    if (*v4 == 1.79769313e308 && v19 == 1.79769313e308 && v20 == 1.79769313e308 && v21 == 1.79769313e308)
    {
      v29.receiver = v1;
      v29.super_class = ObjectType;
      objc_msgSendSuper2(&v29, sel_safeAreaInsets, v18, v19, v20, v21);
    }
    if (v5 != v18 || v6 != v19 || v7 != v20 || v8 != v21) {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView], sel__updateSafeAreaInsets);
    }
  }
}

void specialized UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(char *a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(a1, sel_superview);
  if (v4)
  {
    double v5 = v4;
    objc_msgSend(v4, sel_safeAreaInsets);
    double v7 = v6;
    double v9 = v8;
    double v11 = v10;
    double v13 = v12;
    double v14 = *(char **)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView];
    if (((objc_msgSend(v14, sel_isTracking) & 1) != 0
       || (objc_msgSend(v14, sel_isDecelerating) & 1) != 0
       || (objc_msgSend(v14, sel_isScrollAnimating) & 1) != 0
       || (uint64_t v15 = *(void *)&v14[OBJC_IVAR____TtC7SwiftUI17HostingScrollView_safeAreaTransitionState + 8],
           uint64_t ObjectType = swift_getObjectType(),
           long long v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8),
           swift_unknownObjectRetain(),
           LOBYTE(v15) = v17(ObjectType, v15),
           swift_unknownObjectRelease(),
           (v15 & 1) != 0))
      && (*(unsigned char *)(v2 + 88) & 1) == 0)
    {
      double v18 = (unsigned char *)(v2 + 88);
      if (*(unsigned char *)(v2 + 48))
      {
        double v19 = (double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
        if (*(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets] == 1.79769313e308
          && *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8] == 1.79769313e308
          && *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16] == 1.79769313e308
          && *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24] == 1.79769313e308)
        {
        }
        else
        {
          double v102 = *(double *)(v2 + 80);
          double v104 = *(double *)(v2 + 72);
          double v94 = *(double *)(v2 + 64);
          double v98 = *(double *)(v2 + 56);
          double v90 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16];
          double v92 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24];
          double v86 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets];
          double v88 = *(double *)&a1[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8];
          objc_msgSend(a1, sel_frame);
          double v106 = v11;
          CGFloat v24 = v23;
          double v25 = v7;
          CGFloat v27 = v26;
          CGFloat v29 = v28;
          CGFloat v31 = v30;
          objc_msgSend(v5, sel_bounds);
          double v80 = v32;
          double v84 = v33;
          v108.origin.x = v24;
          v108.origin.CGFloat y = v27;
          v108.size.width = v29;
          v108.size.height = v31;
          double MinX = CGRectGetMinX(v108);
          BOOL v35 = fabs(v9) < 0.25 || MinX > 0.0;
          double v36 = v9 - v94;
          if (v35) {
            double v36 = 0.0;
          }
          double v82 = v36;
          v109.origin.x = v24;
          v109.origin.CGFloat y = v27;
          v109.size.width = v29;
          v109.size.height = v31;
          double MinY = CGRectGetMinY(v109);
          BOOL v38 = fabs(v25) < 0.25 || MinY > 0.0;
          double v95 = v25;
          if (v38) {
            double v39 = 0.0;
          }
          else {
            double v39 = v25 - v98;
          }
          v110.origin.x = v24;
          v110.origin.CGFloat y = v27;
          v110.size.width = v29;
          v110.size.height = v31;
          double v99 = v13;
          if (v80 > CGRectGetMaxX(v110)) {
            double v40 = 0.0;
          }
          else {
            double v40 = v13 - v102;
          }
          v111.origin.x = v24;
          double v11 = v106;
          v111.origin.CGFloat y = v27;
          v111.size.width = v29;
          v111.size.height = v31;
          CGFloat MaxY = CGRectGetMaxY(v111);
          double v43 = v86;
          double v42 = v88;
          if (v84 > MaxY) {
            double v44 = 0.0;
          }
          else {
            double v44 = v106 - v104;
          }
          BOOL v47 = v39 == *MEMORY[0x1E4FB2848]
             && v82 == *(double *)(MEMORY[0x1E4FB2848] + 8)
             && v44 == *(double *)(MEMORY[0x1E4FB2848] + 16)
             && v40 == *(double *)(MEMORY[0x1E4FB2848] + 24);
          double v49 = v90;
          double v48 = v92;
          if (!v47)
          {
            double v43 = v86 + v39;
            double v48 = v92 + v40;
            double v49 = v90 + v44;
            double v42 = v88 + v82;
          }
          *double v19 = v43;
          v19[1] = v42;
          _OWORD v19[2] = v49;
          v19[3] = v48;

          double v7 = v95;
          double v13 = v99;
        }
      }
      else
      {
        double v85 = *(double *)(v2 + 32);
        double v87 = *(double *)(v2 + 40);
        double v81 = *(double *)(v2 + 16);
        double v83 = *(double *)(v2 + 24);
        double v103 = *(double *)(v2 + 80);
        double v105 = *(double *)(v2 + 72);
        double v96 = *(double *)(v2 + 64);
        double v100 = *(double *)(v2 + 56);
        objc_msgSend(a1, sel_frame);
        CGFloat v51 = v50;
        CGFloat v53 = v52;
        CGFloat v55 = v54;
        double v107 = v11;
        double v56 = v13;
        CGFloat v58 = v57;
        objc_msgSend(v5, sel_bounds);
        double v91 = v59;
        double v93 = v60;
        v112.origin.x = v51;
        v112.origin.CGFloat y = v53;
        v112.size.width = v55;
        v112.size.height = v58;
        double v61 = CGRectGetMinX(v112);
        BOOL v62 = fabs(v9) < 0.25 || v61 > 0.0;
        double v89 = v9;
        if (v62) {
          double v63 = 0.0;
        }
        else {
          double v63 = v9 - v96;
        }
        v113.origin.x = v51;
        v113.origin.CGFloat y = v53;
        v113.size.width = v55;
        v113.size.height = v58;
        double v64 = CGRectGetMinY(v113);
        BOOL v65 = fabs(v7) < 0.25 || v64 > 0.0;
        double v97 = v7;
        if (v65) {
          double v66 = 0.0;
        }
        else {
          double v66 = v7 - v100;
        }
        v114.origin.x = v51;
        v114.origin.CGFloat y = v53;
        v114.size.width = v55;
        v114.size.height = v58;
        double v101 = v56;
        if (v91 > CGRectGetMaxX(v114)) {
          double v67 = 0.0;
        }
        else {
          double v67 = v56 - v103;
        }
        v115.origin.x = v51;
        v115.origin.CGFloat y = v53;
        v115.size.width = v55;
        v115.size.height = v58;
        if (v93 > CGRectGetMaxY(v115)) {
          double v68 = 0.0;
        }
        else {
          double v68 = v107 - v105;
        }
        double v69 = *MEMORY[0x1E4FB2848];
        double v70 = *(double *)(MEMORY[0x1E4FB2848] + 8);
        double v71 = *(double *)(MEMORY[0x1E4FB2848] + 16);
        double v72 = *(double *)(MEMORY[0x1E4FB2848] + 24);

        if (v66 == v69 && v63 == v70 && v68 == v71 && v67 == v72)
        {
          double v7 = v97;
          double v13 = v101;
          double v11 = v107;
          double v77 = v87;
          double v9 = v89;
          double v79 = v83;
          double v78 = v85;
          double v76 = v81;
        }
        else
        {
          double v76 = v81 + v66;
          double v77 = v87 + v67;
          double v78 = v85 + v68;
          double v79 = v83 + v63;
          double v7 = v97;
          double v13 = v101;
          double v11 = v107;
          double v9 = v89;
        }
        *(double *)(v2 + 16) = v76;
        *(double *)(v2 + 24) = v79;
        *(double *)(v2 + 32) = v78;
        *(double *)(v2 + 40) = v77;
        *(unsigned char *)(v2 + 48) = 0;
      }
      *(double *)(v2 + 56) = v7;
      *(double *)(v2 + 64) = v9;
    }
    else
    {

      *(double *)(v2 + 56) = v7;
      *(double *)(v2 + 64) = v9;
      double v18 = (unsigned char *)(v2 + 88);
    }
    *(double *)(v2 + 72) = v11;
    *(double *)(v2 + 80) = v13;
    *double v18 = 0;
  }
}

BOOL protocol witness for SafeAreaTransitionState.isActive.getter in conformance ToolbarSafeAreaTransitionState()
{
  return *(void *)(v0 + 16) > 0;
}

uint64_t initializeWithCopy for LeadingTrailingLabeledContentStyle_Phone._Body(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = *(void *)(v2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
  char v9 = *(unsigned char *)(v2 + 65);
  unsigned __int8 v10 = *(unsigned char *)(v2 + 64);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 65) = v9;
  uint64_t v11 = *(void *)(v2 + 72);
  char v12 = *(unsigned char *)(v2 + 81);
  unsigned __int8 v13 = *(unsigned char *)(v2 + 80);
  outlined copy of Environment<ListItemTint?>.Content(v11, v13, v12);
  *(void *)(a1 + 72) = v11;
  *(unsigned char *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 81) = v12;
  uint64_t v14 = *(void *)(v2 + 88);
  char v15 = *(unsigned char *)(v2 + 96);
  outlined copy of Environment<Bool>.Content(v14, v15);
  *(void *)(a1 + 88) = v14;
  *(unsigned char *)(a1 + 96) = v15;
  uint64_t v16 = *(void *)(v2 + 104);
  LOBYTE(v2) = *(unsigned char *)(v2 + 112);
  outlined copy of Environment<Bool>.Content(v16, v2);
  *(void *)(a1 + 104) = v16;
  *(unsigned char *)(a1 + 112) = v2;
  return a1;
}

void partial apply for closure #1 in UIHostingViewBase.tearDown(uiView:host:)()
{
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance HostingContentViewGraph()
{
  return _GraphInputs.pushStyleContext<A>(_:)();
}

void one-time initialization function for defaultValue()
{
  static BridgedEnvironmentKeysKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static SharingActivityPickerPresentation.Key.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static ContentScrollViewPreferenceKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static UpdateViewDestinationRequest.UpdateViewDestinationRequestKey.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static InspectorAnchorPreferenceKey.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static UINavigationItemAdaptorKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static AlwaysOnTimelinesKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static PopoverPresentation.Key.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static ConfirmationDialog.PreferenceKey.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static EnvironmentValues.HostingControllerManagedBarsKey.defaultuint64_t Value = MEMORY[0x1E4FBC870];
}

{
  static InspectorStorage.PreferenceKey.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static AlertStorage.PreferenceKey.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static AccessibilityProperties.ImagesKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static AccessibilityProperties.ActionsKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static NavigationDestinationsKey.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static AccessibilityNodesKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
  *(void *)algn_1EB308568 = 0;
}

{
  static BridgedPopUpButtonPreferenceKey.defaultuint64_t Value = 0;
  byte_1EB308130 = 1;
}

{
  static NavigationDestinationKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static PlatformItemList.Key.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static UISplitViewControllerProxyKey.defaultuint64_t Value = 0;
}

{
  static _GraphInputs.NavigationPresentationAdaptorKey.defaultuint64_t Value = *MEMORY[0x1E4F4E7A0];
}

{
  static GridMetadata.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static FocusableFillerBounds.Key.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static FocusableBounds.Key.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static NascentViewDestinationsExtractor.Key.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static MultimodalBadgeInfoKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static ArchivableMutationsKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static SceneSessionKey.defaultuint64_t Value = 0;
  byte_1E9019A40 = 1;
}

{
  static _GraphInputs.IsFocusSystemEnabledKey.defaultuint64_t Value = *MEMORY[0x1E4F4E7A0];
}

{
  static SceneStorageValuesKey.defaultuint64_t Value = 0;
  byte_1E9020EC0 = 1;
}

{
  static EnvironmentValues.DocumentCommandsKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static OrnamentPresentation.Key.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static GridBadgeInfoEnvironmentKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static ResponderCommandsKey.defaultuint64_t Value = MEMORY[0x1E4FBC868];
}

{
  static TabPopoverPresentationsKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static TabViewSidebarOverflowMenuInput.defaultuint64_t Value = 0;
}

{
  static SwipeActions.TraitKey.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static PlatformItems.Key.defaultuint64_t Value = 0;
  dword_1E8FF9508 = 0;
  qword_1E8FF9510 = MEMORY[0x1E4FBC860];
}

{
  static DigitalCrownViewKey.defaultuint64_t Value = 0;
  *(void *)algn_1E90FC768 = 0;
  dword_1E90FC770 = 0;
}

{
  static SceneList.Key.defaultuint64_t Value = MEMORY[0x1E4FBC860];
}

{
  static UIKitHostContainerFocusItemInput.defaultuint64_t Value = *MEMORY[0x1E4F4E7A0];
}

_UNKNOWN **base witness table accessor for View in PrimitiveButtonStyleConfiguration.Label()
{
  return &protocol witness table for PrimitiveButtonStyleConfiguration.Label;
}

_UNKNOWN **base witness table accessor for View in ButtonStyleConfiguration.Label()
{
  return &protocol witness table for ButtonStyleConfiguration.Label;
}

uint64_t View.onScrollVisibilityChange(threshold:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  if (a4 < 0.0) {
    a4 = 0.0;
  }
  if (a4 > 1.0) {
    a4 = 1.0;
  }
  *(double *)char v5 = a4;
  v5[1] = a1;
  _OWORD v5[2] = a2;
  char v6 = 0;
  uint64_t v7 = 0;
  return MEMORY[0x18C113660](v5, a3, &unk_1ED45D0C0);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance LazyLayoutReuseIdleInput(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0) {
    return (*(void *)a1 == *(void *)a2) & ~result;
  }
  return result;
}

uint64_t outlined destroy of TableContentVisitor<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v27 - v10;
  if (!a1)
  {
    specialized ListCollectionViewCellBase.backgroundHost.setter(0);
    return;
  }
  uint64_t v12 = swift_retain();
  MEMORY[0x18C116980](v12);
  unsigned __int8 v13 = (void *)type metadata accessor for UIBackgroundConfiguration();
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, void *))(*(v13 - 1) + 48);
  if (v14(v11, 1, v13))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_4:
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
    id v16 = objc_allocWithZone(v15);
    uint64_t v17 = swift_retain();
    double v18 = (void *)specialized _UIHostingView.init(rootView:)(v17);
    swift_release();
    *(unsigned char *)(*(void *)((char *)v18 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v18) + 0x68)) + 220) = 1;
    UIHostingViewBase.updateRemovedState(uiView:)(0);
    double v19 = v18;
    specialized ListCollectionViewCellBase.backgroundHost.setter(v18);

    goto LABEL_5;
  }
  CGFloat v24 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v24) {
    goto LABEL_4;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  double v25 = (void *)swift_dynamicCastClass();
  if (!v25)
  {

    goto LABEL_4;
  }
  double v28 = v14;
  double v26 = (void *)((char *)v25 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v25) + 0x60));
  swift_beginAccess();
  *double v26 = a1;
  if (a2 == 1)
  {
    swift_retain_n();
    swift_release();
    __int16 v29 = 1;
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Transaction?(a2);
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();

    swift_release();
    swift_release_n();
    outlined consume of Transaction?(a2);
  }
  uint64_t v14 = v28;
LABEL_5:
  MEMORY[0x18C116980]();
  if (v14(v8, 1, v13))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    goto LABEL_20;
  }
  unsigned __int8 v13 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  if (!swift_dynamicCastClass())
  {
LABEL_21:

    __break(1u);
    return;
  }
  double v20 = specialized _UIHostingView.as<A>(_:)();
  uint64_t v22 = v21;

  if (v20)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))(16, 1, ObjectType, v22);
    swift_unknownObjectRelease();
  }
  objc_msgSend(v3, sel_setBackgroundColor_, 0);
  swift_release();
}

{
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(a1, a2, MEMORY[0x1E4FB11A0], MEMORY[0x1E4FB11A0], MEMORY[0x1E4FB11A8], partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:));
}

{
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(a1, a2, MEMORY[0x1E4FB1170], MEMORY[0x1E4FB1170], MEMORY[0x1E4FB1178], partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:));
}

{
  specialized PlatformListViewBase<>.configureBackground(_:traits:transaction:)(a1, a2);
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  unsigned int (*v14)(char *, uint64_t, void *);
  Class v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  unsigned int (*v28)(char *, uint64_t, void *);
  __int16 v29;

  char v3 = v2;
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v27 - v10;
  if (!a1)
  {
    specialized ListCollectionViewCellBase.backgroundHost.setter(0);
    return;
  }
  uint64_t v12 = swift_retain();
  MEMORY[0x18C116980](v12);
  unsigned __int8 v13 = (void *)type metadata accessor for UIBackgroundConfiguration();
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, void *))(*(v13 - 1) + 48);
  if (v14(v11, 1, v13))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_4:
    type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
    id v16 = objc_allocWithZone(v15);
    uint64_t v17 = swift_retain();
    double v18 = (void *)specialized _UIHostingView.init(rootView:)(v17);
    swift_release();
    *(unsigned char *)(*(void *)((char *)v18 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v18) + 0x68)) + 220) = 1;
    UIHostingViewBase.updateRemovedState(uiView:)(0);
    double v19 = v18;
    specialized ListCollectionViewCellBase.backgroundHost.setter(v18);

    goto LABEL_5;
  }
  CGFloat v24 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v24) {
    goto LABEL_4;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  double v25 = (void *)swift_dynamicCastClass();
  if (!v25)
  {

    goto LABEL_4;
  }
  uint64_t v27 = v24;
  double v28 = v14;
  double v26 = (void *)((char *)v25 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v25) + 0x60));
  swift_beginAccess();
  *double v26 = a1;
  if (a2 == 1)
  {
    swift_retain_n();
    swift_release();
    __int16 v29 = 1;
    lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>);
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

    swift_release();
  }
  else
  {
    swift_retain();
    outlined copy of Transaction?(a2);
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();

    swift_release();
    swift_release_n();
    outlined consume of Transaction?(a2);
  }
  uint64_t v14 = v28;
LABEL_5:
  MEMORY[0x18C116980]();
  if (v14(v8, 1, v13))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
    goto LABEL_20;
  }
  unsigned __int8 v13 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v13)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  if (!swift_dynamicCastClass())
  {
LABEL_21:

    __break(1u);
    return;
  }
  double v20 = specialized _UIHostingView.as<A>(_:)();
  uint64_t v22 = v21;

  if (v20)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 8))(16, 1, ObjectType, v22);
    swift_unknownObjectRelease();
  }
  objc_msgSend(v3, sel_setBackgroundColor_, 0, v27);
  swift_release();
}

void type metadata accessor for (offset: Int, element: TableSections.Item)?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void specialized ListCollectionViewCellBase.backgroundHost.setter(void *a1)
{
  uint64_t v2 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: TableSections.Item)?(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = a1;
  MEMORY[0x18C116980]();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2))
  {
    outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
LABEL_3:
    unsigned __int8 v13 = 0;
    goto LABEL_4;
  }
  id v16 = (void *)UIBackgroundConfiguration.customView.getter();
  outlined destroy of TableContentVisitor<TableDataSourceAdaptor>((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TableSections.Item)?);
  if (!v16) {
    goto LABEL_3;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  unsigned __int8 v13 = (void *)swift_dynamicCastClass();
  if (!v13) {

  }
LABEL_4:
  if (a1)
  {

    if (v13 && (v13, v12 == v13))
    {
    }
    else
    {
      *(unsigned char *)(*(void *)((char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x68)) + 220) = 1;
      uint64_t v14 = v12;
      UIHostingViewBase.updateRemovedState(uiView:)(0);
      static UIBackgroundConfiguration.clear()();
      Class v15 = v14;
      UIBackgroundConfiguration.customView.setter();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
      MEMORY[0x18C116990](v8);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  else if (v13)
  {

    MEMORY[0x18C1169A0]();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    MEMORY[0x18C116990](v8);
  }
}

uint64_t protocol witness for static PlatformViewRepresentable.dynamicProperties.getter in conformance ListRepresentable<A, B>()
{
  return static PlatformViewRepresentable.dynamicProperties.getter();
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t type metadata completion function for UIKitStatusBarBridge()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for ContextMenuBridge()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for ListHasStackBehaviorModifier()
{
  return &type metadata for ListHasStackBehaviorModifier;
}

uint64_t getEnumTagSinglePayload for HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t type metadata completion function for Transform()
{
  type metadata accessor for Transform.State();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for Transform.State()
{
  uint64_t result = type metadata accessor for RelationshipModifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<NavigationLinkTraitValueModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationLinkTraitValueModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<NavigationLinkTraitValueModifier>);
    lazy protocol witness table accessor for type _ViewModifier_Content<NavigationLinkTraitValueModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<LinkValueTraitKey> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<LinkValueTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<NavigationLinkTraitValueModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<NavigationLinkTraitValueModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<NavigationLinkTraitValueModifier>)
  {
    lazy protocol witness table accessor for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<NavigationLinkTraitValueModifier>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<LinkValueTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<LinkValueTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<LinkValueTraitKey>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationLinkTraitValueModifier>();
    type metadata accessor for _TraitWritingModifier<LinkValueTraitKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationLinkTraitValueModifier>, _TraitWritingModifier<LinkValueTraitKey>>);
    }
  }
}

uint64_t IconOnlyLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI29AccessibilityChildBehaviorBox33_F0D4BE429651399A5FAD2DF7DCDF699DLLCyAA0cdE0V7CombineVGMaTm_0(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v12;
  *(void *)(v4 + 24) = v13;
  swift_retain();
  swift_release();
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t *)(v4 + 16), 0, v14);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v5 = dword_1ED4660C0;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t *)(v4 + 16), v5 | (v5 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = 2;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v9 = v8;
  swift_retain();
  Dictionary.init(minimumCapacity:)();
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v12;
  *(void *)(v10 + 24) = v13;
  swift_release();
  swift_release();
  swift_release_n();
  uint64_t result = swift_release();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = partial apply for closure #1 in View.accessibilityLabel<A>(_:label:);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = 0;
  return result;
}

uint64_t destroy for MenuVisitor.MenuStackGroup(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 184);
  unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
      uint64_t v2 = *(void *)(a1 + 184);
      unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v3 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v2);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void **)(a1 + 264);
    if ((unint64_t)v5 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v6 = *(void *)(a1 + 328);
  if (v6 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v6, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
  }
  uint64_t v7 = *(void *)(a1 + 408);
  if (v7)
  {
    if (v7 == 1) {
      goto LABEL_20;
    }
    swift_release();
  }
  if (*(void *)(a1 + 424)) {
    swift_release();
  }
  if (*(void *)(a1 + 440)) {
    swift_release();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 504)) {
    swift_release();
  }
  if (*(void *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(void *)(a1 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
  uint64_t v9 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = v8 + *(int *)(v9 + 20);
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
    if (*(void *)(v8 + *(int *)(v9 + 24))) {
      swift_release();
    }
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetScrollEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _DWORD v7[2] = *(_OWORD *)(a2 + 32);
  unsigned __int8 v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResetScrollEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _DWORD v7[2] = *(_OWORD *)(a2 + 32);
  unsigned __int8 v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ResetScrollEnvironmentModifier()
{
  lazy protocol witness table accessor for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t lazy protocol witness table accessor for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier;
  if (!lazy protocol witness table cache variable for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResetScrollEnvironmentModifier and conformance ResetScrollEnvironmentModifier);
  }
  return result;
}

uint64_t View.accessibilityShowsLargeContentViewer<A>(_:largeContentView:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v19 = a4;
  char v8 = a1;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessibilityLargeContentViewModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  id v16 = (char *)&v18 - v15;
  a2(v14);
  *id v16 = v8;
  (*(void (**)(unsigned char *, char *, uint64_t))(v9 + 32))(&v16[*(int *)(v12 + 36)], v11, a5);
  MEMORY[0x18C113660](v16, v19, v12, v20);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t NavigationSelectionModifier.body(content:)()
{
  uint64_t ShouldUseNavigationLinkV4Modifier = type metadata accessor for ShouldUseNavigationLinkV4Modifier();
  swift_retain_n();
  uint64_t WitnessTable = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  uint64_t v6 = v14;
  char v7 = v15;
  char v8 = v16;
  uint64_t v9 = v17;
  type metadata accessor for NavigationSelectionModifier();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for _ViewModifier_Content();
  uint64_t v10 = ShouldUseNavigationLinkV4Modifier;
  uint64_t v11 = &unk_1ED410DE8;
  uint64_t v12 = &unk_1ED428270;
  uint64_t v13 = WitnessTable;
  uint64_t v3 = type metadata accessor for StaticIf();
  uint64_t v4 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v10, &v6, v2, v3, v4);
  swift_release();
  swift_release();
  uint64_t v6 = v10;
  char v7 = (char)v11;
  char v8 = (char)v12;
  uint64_t v9 = v13;
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v6);
  swift_release();
  swift_release();
  uint64_t v10 = v14;
  LOBYTE(v11) = v15;
  LOBYTE(v12) = v16;
  uint64_t v13 = v17;
  static ViewBuilder.buildExpression<A>(_:)(&v10);
  swift_release();
  return swift_release();
}

double static RelationshipModifier._makeView(modifier:inputs:body:)@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  double v64 = a6;
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  uint64_t v59 = type metadata accessor for Transform.State();
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8);
  CGFloat v58 = &v45[-v12];
  uint64_t v60 = a4;
  uint64_t v13 = type metadata accessor for Transform();
  uint64_t v62 = *(void *)(v13 - 8);
  uint64_t v63 = v13;
  double v14 = MEMORY[0x1F4188790](v13);
  double v61 = &v45[-v15];
  LODWORD(v48) = *a1;
  uint64_t v16 = *(void *)a2;
  int v17 = *(_DWORD *)(a2 + 8);
  uint64_t v18 = *(void *)(a2 + 16);
  LODWORD(v15) = *(_DWORD *)(a2 + 24);
  int v19 = *(_DWORD *)(a2 + 28);
  int v20 = *(_DWORD *)(a2 + 32);
  int v21 = *(_DWORD *)(a2 + 36);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v23 = *(void *)(a2 + 48);
  int v25 = *(_DWORD *)(a2 + 56);
  int v24 = *(_DWORD *)(a2 + 60);
  int v26 = *(_DWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 68);
  int v28 = *(_DWORD *)(a2 + 72);
  int v29 = *(_DWORD *)(a2 + 76);
  int v30 = *(_DWORD *)(a2 + 80);
  uint64_t v67 = v16;
  LODWORD(v68) = v17;
  uint64_t v69 = v18;
  int v57 = v15;
  int v70 = v15;
  int v71 = v19;
  int v56 = v19;
  int v55 = v20;
  int v72 = v20;
  int v73 = v21;
  int v54 = v21;
  uint64_t v74 = v22;
  uint64_t v75 = v23;
  int v76 = v25;
  int v77 = v24;
  int v53 = v24;
  int v52 = v26;
  int v78 = v26;
  int v79 = v27;
  int v51 = v27;
  int v50 = v28;
  int v80 = v28;
  int v81 = v29;
  int v49 = v29;
  int v82 = v30;
  a3(&v65, v14);
  uint64_t v67 = v23;
  LODWORD(v68) = v25;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
LABEL_5:
    uint64_t v31 = v65;
    goto LABEL_6;
  }
  type metadata accessor for AccessibilityRelationshipScope();
  lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v31 = v65;
  if (v67)
  {
    uint64_t v47 = v67;
    uint64_t v67 = v65;
    double v68 = v66;
    uint64_t v32 = _ViewOutputs.subscript.getter();
    if ((v32 & 0x100000000) != 0)
    {
      swift_release();
      goto LABEL_6;
    }
    LODWORD(v67) = v48;
    uint64_t v48 = v32;
    type metadata accessor for RelationshipModifier();
    type metadata accessor for _GraphValue();
    int v46 = _GraphValue.value.getter();
    uint64_t v67 = v16;
    LODWORD(v68) = v17;
    uint64_t v69 = v18;
    int v70 = v57;
    int v71 = v56;
    int v72 = v55;
    int v73 = v54;
    uint64_t v74 = v22;
    uint64_t v75 = v23;
    int v76 = v25;
    int v77 = v53;
    int v78 = v52;
    int v79 = v51;
    int v80 = v50;
    int v81 = v49;
    int v82 = v30;
    swift_getKeyPath();
    int v33 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    uint64_t v34 = (uint64_t)v58;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v58, 1, 1);
    uint64_t v43 = a5;
    BOOL v35 = v61;
    uint64_t v36 = Transform.init(modifier:nodeList:accessibilityEnabled:selfAttribute:scope:state:isRemoved:)(v46, v48, v33, *MEMORY[0x1E4F4E7A0], v47, v34, 0, (uint64_t)v61);
    MEMORY[0x1F4188790](v36);
    uint64_t v37 = v63;
    uint64_t v43 = v63;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<AccessibilityNodeList>(0, &lazy cache variable for type metadata for Attribute<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, MEMORY[0x1E4F4E740]);
    uint64_t v39 = v38;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v35, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0, (uint64_t)&v45[-32], v37, MEMORY[0x1E4FBC248], v39, MEMORY[0x1E4FBC278], v40);
    (*(void (**)(unsigned char *, uint64_t))(v62 + 8))(v35, v37);
    static AGAttributeFlags.removable.getter();
    AGGraphSetFlags();
    LOBYTE(v67) = 0;
    _ViewOutputs.subscript.setter();
    swift_release();
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v41 = (double *)v64;
  *double v64 = v31;
  double result = v66;
  v41[1] = v66;
  return result;
}

uint64_t InternalNavigationLinkModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _OWORD v22[2] = a2;
  swift_getWitnessTable();
  v22[0] = type metadata accessor for _ViewModifier_Content();
  *(void *)&long long v24 = type metadata accessor for ShouldUseNavigationLinkV4Modifier();
  *((void *)&v24 + 1) = type metadata accessor for BaseModifier();
  uint64_t v25 = type metadata accessor for LegacyBaseModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for StaticIf();
  v22[1] = type metadata accessor for ModifiedContent();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v22 - v5;
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v22 - v12;
  long long v24 = xmmword_18834FC50;
  char v23 = 1;
  InternalNavigationLinkModifier.base(_:environment:updateSeed:)((uint64_t *)&v24, 0x100000000uLL, a1, (uint64_t)v6);
  strcpy((char *)&v24, "navigationLink");
  HIBYTE(v24) = -18;
  uint64_t v14 = Namespace.wrappedValue.getter();
  uint64_t v15 = swift_getWitnessTable();
  v22[9] = &protocol witness table for BaseModifier<A>;
  v22[10] = &protocol witness table for LegacyBaseModifier<A>;
  uint64_t v16 = swift_getWitnessTable();
  v22[7] = v15;
  v22[8] = v16;
  uint64_t v17 = swift_getWitnessTable();
  unint64_t v18 = lazy protocol witness table accessor for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier();
  v22[5] = v17;
  v22[6] = v18;
  uint64_t v19 = swift_getWitnessTable();
  View.accessibilityLinkedGroup<A>(id:in:)((uint64_t)&v24, v14, v3, MEMORY[0x1E4FBB1A0], v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _OWORD v22[3] = v19;
  void v22[4] = &protocol witness table for RelationshipModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  int v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v20)(v13, v7);
}

uint64_t destroy for AccessibilityLargeContentViewModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

unint64_t lazy protocol witness table accessor for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier;
  if (!lazy protocol witness table cache variable for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationLinkTraitValueModifier and conformance NavigationLinkTraitValueModifier);
  }
  return result;
}

uint64_t View.accessibilityRelationship<A>(_:id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v21 = a6;
  uint64_t v20 = a4;
  char v9 = a1;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RelationshipModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a2, a5, v15);
  *uint64_t v17 = v9;
  (*(void (**)(unsigned char *, char *, uint64_t))(v10 + 32))(&v17[*(int *)(v13 + 36)], v12, a5);
  *(void *)&v17[*(int *)(v13 + 40)] = a3;
  MEMORY[0x18C113660](v17, v20, v13, v21);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t type metadata accessor for RelationshipModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.accessibilityLinkedGroup<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityRelationship<A>(_:id:in:)(2, a1, a2, a3, a4, a5);
}

uint64_t InternalNavigationLinkModifier.base(_:environment:updateSeed:)@<X0>(uint64_t *a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v84 = a2;
  uint64_t v87 = a4;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  uint64_t v10 = type metadata accessor for LegacyBaseModifier();
  MEMORY[0x1F4188790](v10);
  double v85 = &v62[-v11];
  uint64_t v91 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v12);
  int v78 = &v62[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v69 = &v62[-v15];
  uint64_t v16 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v17);
  double v89 = &v62[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = &v62[-v20];
  uint64_t v90 = v8;
  uint64_t v22 = type metadata accessor for BaseModifier();
  MEMORY[0x1F4188790](v22);
  double v88 = &v62[-v23];
  uint64_t ShouldUseNavigationLinkV4Modifier = type metadata accessor for ShouldUseNavigationLinkV4Modifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v76 = ShouldUseNavigationLinkV4Modifier;
  uint64_t v97 = ShouldUseNavigationLinkV4Modifier;
  uint64_t v98 = v22;
  uint64_t v80 = v22;
  uint64_t v86 = v10;
  uint64_t v99 = v10;
  uint64_t v100 = WitnessTable;
  uint64_t v75 = WitnessTable;
  uint64_t v26 = type metadata accessor for StaticIf();
  uint64_t v77 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v74 = &v62[-v27];
  swift_getWitnessTable();
  uint64_t v73 = type metadata accessor for _ViewModifier_Content();
  uint64_t v83 = v26;
  uint64_t v82 = type metadata accessor for ModifiedContent();
  uint64_t v81 = *(void *)(v82 - 8);
  double v28 = MEMORY[0x1F4188790](v82);
  int v79 = &v62[-v29];
  uint64_t v68 = *a1;
  uint64_t v67 = a1[1];
  uint64_t v30 = v5 + *(int *)(a3 + 52);
  uint64_t v31 = *(void (**)(void, double))(v16 + 16);
  int v70 = v21;
  uint64_t v66 = v30;
  uint64_t v72 = v16 + 16;
  uint64_t v65 = (void (*)(unsigned char *, uint64_t, uint64_t))v31;
  v31(v21, v28);
  uint64_t v71 = *(int *)(a3 + 56);
  uint64_t v32 = *(void *)(v5 + v71);
  uint64_t v34 = *(void *)(v5 + 16);
  LOBYTE(ShouldUseNavigationLinkV4Modifier) = *(unsigned char *)(v5 + 25);
  uint64_t v35 = *(unsigned __int8 *)(v5 + 24);
  uint64_t v97 = *(void *)(v5 + 8);
  uint64_t v33 = v97;
  uint64_t v98 = v34;
  LOBYTE(v99) = v35;
  BYTE1(v99) = ShouldUseNavigationLinkV4Modifier;
  swift_retain();
  outlined copy of StateOrBinding<Bool>(v33, v34, v35, ShouldUseNavigationLinkV4Modifier);
  uint64_t v64 = Namespace.wrappedValue.getter();
  int v63 = *(unsigned __int8 *)(v5 + 65);
  uint64_t v36 = *(int *)(a3 + 60);
  LOBYTE(v34) = *(unsigned char *)(v5 + v36);
  uint64_t v37 = v91;
  uint64_t v38 = *(void (**)(void))(v91 + 16);
  uint64_t v39 = v69;
  v38();
  BOOL v40 = (v34 & 1) != 0 || InternalNavigationLinkModifier.isContextuallyDisabled.getter(a3);
  uint64_t v41 = v37 + 8;
  double v42 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
  uint64_t v91 = v41;
  v42(v39, a3);
  BaseModifier.init(destination:presentedValue:isActive:id:isDetail:alwaysDisable:)((uint64_t)v70, v32, &v97, v64, v63, v40, v9, (uint64_t)v88);
  int v70 = (unsigned char *)Namespace.wrappedValue.getter();
  v65(v89, v66, v9);
  uint64_t v43 = v68;
  v96[0] = v68;
  v96[1] = v67;
  LODWORD(v72) = *(unsigned __int8 *)(v5 + 65);
  char v44 = *(unsigned char *)(v5 + v36);
  uint64_t v45 = v78;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v38)(v78, v5, a3);
  outlined copy of EnvironmentValues?(v43);
  BOOL v46 = (v44 & 1) != 0 || InternalNavigationLinkModifier.isContextuallyDisabled.getter(a3);
  v42(v45, a3);
  uint64_t v47 = InternalNavigationLinkModifier.$isActive.getter();
  uint64_t v48 = v71;
  LegacyBaseModifier.init(namespaceID:destination:environment:updateSeed:isDetail:alwaysDisable:isPresented:presentedValue:isAdHocPresentationLink:needsButtonStyle:)((uint64_t)v70, (uint64_t)v89, v96, v84 | ((HIDWORD(v84) & 1) << 32), v72, v46, v47, v50, v85, v49 & 1, *(void *)(v5 + v71), *(unsigned char *)(v5 + *(int *)(a3 + 64)), *(unsigned char *)(v5 + *(int *)(a3 + 72)), v9);
  swift_retain();
  int v51 = v74;
  StaticIf<>.init(_:then:else:)();
  uint64_t v52 = v73;
  uint64_t v53 = swift_getWitnessTable();
  int v54 = v79;
  uint64_t v55 = v83;
  MEMORY[0x18C113660](v51, v52, v83, v53);
  (*(void (**)(unsigned char *, uint64_t))(v77 + 8))(v51, v55);
  uint64_t v56 = *(void *)(v5 + v48);
  swift_retain();
  uint64_t v57 = Namespace.wrappedValue.getter();
  uint64_t v97 = v56;
  uint64_t v98 = v57;
  double v94 = &protocol witness table for BaseModifier<A>;
  double v95 = &protocol witness table for LegacyBaseModifier<A>;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v92 = v53;
  uint64_t v93 = v58;
  uint64_t v59 = v82;
  uint64_t v60 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v97, v59, &type metadata for NavigationLinkTraitValueModifier, v60);
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v81 + 8))(v54, v59);
}

uint64_t destroy for InternalNavigationLinkModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v4 = *(unsigned __int8 *)(v3 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)v3 + 2;
  }
  if (v4 == 1) {
    swift_release();
  }
  swift_release();
  unint64_t v5 = (v3 + 25) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v6 = *(unsigned __int8 *)(v5 + 20);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)v5 + 2;
  }
  if (v6 == 1) {
    swift_release();
  }
  swift_release();
  unint64_t v7 = (v3 + 53) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool?>.Content(*(void *)v7, *(unsigned __int8 *)(v7 + 8));
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((v7
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 10) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

void *initializeWithCopy for InternalNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v7 = *(unsigned __int8 *)(v6 + 17);
  if (v7 >= 2) {
    unsigned int v7 = *(_DWORD *)v6 + 2;
  }
  if (v7 == 1)
  {
    *(void *)unint64_t v5 = *(void *)v6;
    *(void *)(v5 + 8) = *(void *)(v6 + 8);
    *(unsigned char *)(v5 + 16) = *(unsigned char *)(v6 + 16);
    swift_retain();
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)unint64_t v5 = *(unsigned char *)v6;
    *(void *)(v5 + 8) = *(void *)(v6 + 8);
  }
  swift_retain();
  *(unsigned char *)(v5 + 17) = v8;
  unint64_t v9 = (v6 + 25) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v10 = *(unsigned __int8 *)(v9 + 20);
  if (v10 >= 2) {
    unsigned int v10 = *(_DWORD *)v9 + 2;
  }
  unint64_t v11 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v10 == 1)
  {
    *(void *)unint64_t v11 = *(void *)v9;
    *(void *)(v11 + 8) = *(void *)(v9 + 8);
    *(_DWORD *)(v11 + 16) = *(_DWORD *)(v9 + 16);
    swift_retain();
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    *(_DWORD *)unint64_t v11 = *(_DWORD *)v9;
    *(void *)(v11 + 8) = *(void *)(v9 + 8);
  }
  swift_retain();
  *(unsigned char *)(v11 + 20) = v12;
  unint64_t v13 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v6 + 53) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  char v16 = *(unsigned char *)(v14 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v14, v16);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 8) = v16;
  *(unsigned char *)(v13 + 9) = *(unsigned char *)(v14 + 9);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v18 = v17 + 16;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (v19 + 10 + v13) & ~v19;
  uint64_t v21 = (v19 + 10 + v14) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v20, v21);
  uint64_t v22 = *(void *)(v18 + 48) + 7;
  unint64_t v23 = (v22 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(unsigned char *)(v23 + 9) = *(unsigned char *)(v24 + 9);
  unint64_t v25 = (v23 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (v24 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v27 = *(_OWORD *)(v26 + 32);
  long long v28 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = *(_OWORD *)(v26 + 16);
  *(_OWORD *)(v25 + 32) = v27;
  *(_OWORD *)unint64_t v25 = v28;
  *(unsigned char *)(v25 + 48) = *(unsigned char *)(v26 + 48);
  swift_retain();
  return a1;
}

uint64_t destroy for LegacyBaseModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  unint64_t v5 = (uint64_t *)((*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v6) = -1;
  if ((unint64_t)*v5 < 0xFFFFFFFF) {
    uint64_t v6 = *v5;
  }
  if ((int)v6 - 1 < 0)
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for ShouldUseNavigationLinkV4Modifier()
{
  return __swift_instantiateGenericMetadata();
}

BOOL InternalNavigationLinkModifier.isContextuallyDisabled.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 68);
  uint64_t v3 = *(void *)(v2 + 40);
  if (v3 != 1
    && (uint64_t v4 = *(void *)(v1 + *(int *)(a1 + 56))) != 0
    && (*(unsigned char *)(v2 + 32) & 1) != 0
    && ((uint64_t v5 = (*(uint64_t (**)(void))(*(void *)v4 + 80))(), v3) ? (v6 = v5 == v3) : (v6 = 0), v6))
  {
    return 0;
  }
  else
  {
    return InternalNavigationLinkModifier.isNavigationEnabledInternal.getter() != 1;
  }
}

uint64_t AnyNavigationLinkPresentedValueStorage.presentedType.getter()
{
  return *(void *)(*(void *)v0 + 208);
}

uint64_t InternalNavigationLinkModifier.$isActive.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 25))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    return v3;
  }
  return v1;
}

uint64_t LegacyBaseModifier.init(namespaceID:destination:environment:updateSeed:isDetail:alwaysDisable:isPresented:presentedValue:isAdHocPresentationLink:needsButtonStyle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, char a10, uint64_t a11, char a12, char a13, uint64_t a14)
{
  uint64_t v18 = *a3;
  uint64_t v19 = a3[1];
  *(void *)a9 = a1;
  uint64_t v20 = (int *)type metadata accessor for LegacyBaseModifier();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a14 - 8) + 32))(&a9[v20[9]], a2, a14);
  uint64_t v22 = &a9[v20[10]];
  *(void *)uint64_t v22 = v18;
  *((void *)v22 + 1) = v19;
  unint64_t v23 = &a9[v20[11]];
  *(_DWORD *)unint64_t v23 = a4;
  v23[4] = BYTE4(a4) & 1;
  a9[v20[12]] = a5;
  a9[v20[13]] = a6;
  unint64_t v24 = &a9[v20[14]];
  *(void *)unint64_t v24 = a7;
  *((void *)v24 + 1) = a8;
  v24[16] = a10;
  *(void *)&a9[v20[15]] = a11;
  a9[v20[16]] = a12;
  a9[v20[17]] = a13;
  return result;
}

uint64_t type metadata accessor for LegacyBaseModifier()
{
  return __swift_instantiateGenericMetadata();
}

int *BaseModifier.init(destination:presentedValue:isActive:id:isDetail:alwaysDisable:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = *a3;
  uint64_t v13 = a3[1];
  char v14 = *((unsigned char *)a3 + 16);
  char v15 = *((unsigned char *)a3 + 17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8, a1, a7);
  uint64_t result = (int *)type metadata accessor for BaseModifier();
  *(void *)(a8 + result[9]) = a2;
  uint64_t v17 = a8 + result[10];
  *(void *)uint64_t v17 = v12;
  *(void *)(v17 + 8) = v13;
  *(unsigned char *)(v17 + 16) = v14;
  *(unsigned char *)(v17 + 17) = v15;
  *(void *)(a8 + result[11]) = a4;
  *(unsigned char *)(a8 + result[12]) = a5;
  *(unsigned char *)(a8 + result[13]) = a6;
  return result;
}

uint64_t destroy for Transform(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unsigned int v7 = (unsigned __int8 *)((v3 + (v6 | 7) + 8) & ~(v6 | 7));
  unsigned int v8 = *(_DWORD *)(v5 + 84);
  if (v8 <= 0xFB) {
    int v9 = 251;
  }
  else {
    int v9 = *(_DWORD *)(v5 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v11 = ~v6;
  uint64_t v12 = v6 + 1;
  if (v9 == v10)
  {
    if (v8 > 0xFB)
    {
      uint64_t result = (*(uint64_t (**)(unint64_t))(v5 + 48))((unint64_t)&v7[v12] & v11);
      if (result) {
        return result;
      }
    }
    else
    {
      unsigned int v13 = *v7;
      if (v13 >= 2) {
        unsigned int v14 = v13 - 1;
      }
      else {
        unsigned int v14 = 0;
      }
      if (v14 >= 4) {
        return v14 - 3;
      }
    }
    goto LABEL_19;
  }
  unint64_t v16 = *(void *)&v7[((*(void *)(*(void *)(v4 - 8) + 64) + ((v6 + 1) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 8];
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  uint64_t result = (v16 + 1);
  if (v16 == -1)
  {
LABEL_19:
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((unint64_t)&v7[v12] & v11, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Transform.init(modifier:nodeList:accessibilityEnabled:selfAttribute:scope:state:isRemoved:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(_DWORD *)a8 = a1;
  *(_DWORD *)(a8 + 4) = a2;
  *(_DWORD *)(a8 + 8) = a3;
  *(_DWORD *)(a8 + 12) = a4;
  *(void *)(a8 + 16) = a5;
  uint64_t v11 = type metadata accessor for Transform();
  uint64_t v12 = a8 + *(int *)(v11 + 52);
  type metadata accessor for Transform.State();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a6, v13);
  *(unsigned char *)(a8 + *(int *)(v11 + 56)) = a7;
  return result;
}

uint64_t type metadata accessor for Transform.State()
{
  return __swift_instantiateGenericMetadata();
}

void storeEnumTagSinglePayload for Transform.State(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFB) {
    int v8 = 251;
  }
  else {
    int v8 = *(_DWORD *)(v6 + 84);
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v11 = (*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v10 + 1) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 >= a3)
  {
    int v16 = 0;
    int v17 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_20:
      switch(v16)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v8 == v9)
            {
              if (v7 > 0xFB)
              {
                unint64_t v22 = (unint64_t)&a1[v10 + 1] & ~v10;
                unint64_t v23 = *(void (**)(unint64_t))(v6 + 56);
                v23(v22);
              }
              else
              {
                *a1 = a2 + 4;
              }
            }
            else
            {
              uint64_t v20 = (void *)((unint64_t)&a1[v11 + 15] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v21 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v21 = a2 - 1;
              }
              *uint64_t v20 = v21;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = a3 - v9;
    if (((v11 + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    int v17 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_20;
    }
  }
  if (((v11 + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v18 = v17;
  }
  else {
    int v18 = 1;
  }
  if (((v11 + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v19 = ~v9 + a2;
    bzero(a1, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v19;
  }
  switch(v16)
  {
    case 1:
      a1[v12] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v18;
      break;
    case 3:
LABEL_48:
      __break(1u);
      break;
    case 4:
      *(_DWORD *)&a1[v12] = v18;
      break;
    default:
      return;
  }
}

uint64_t static Transform.didReinsert(attribute:)()
{
  AGGraphGetAttributeInfo();
  uint64_t v0 = type metadata accessor for Transform();
  return Transform.insert()(v0);
}

uint64_t type metadata accessor for Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Transform.insert()(uint64_t result)
{
  uint64_t v2 = *(int *)(result + 56);
  if (*(unsigned char *)(v1 + v2) == 1)
  {
    uint64_t v3 = result;
    *(unsigned char *)(v1 + v2) = 0;
    uint64_t Value = (unint64_t *)AGGraphGetValue();
    unint64_t v5 = *Value;
    unint64_t v6 = Value[1];
    swift_bridgeObjectRetain();
    v7[0] = v5;
    v7[1] = v6;
    Transform.updateScope(nodeList:changed:)(v7, 1, v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void type metadata accessor for Attribute<AccessibilityNodeList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI21AccessibilityNodeListVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage;
  if (!lazy protocol witness table cache variable for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollInputBehavior.Storage and conformance ScrollInputBehavior.Storage);
  }
  return result;
}

uint64_t AccessibilityViewGraph.modifyViewInputs(inputs:graph:)(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 36) |= 0x1000u;
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider();
  _ViewInputs.textAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider();
  _ViewInputs.imageAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider();
  _ViewInputs.privacyReductionAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider();
  _ViewInputs.layoutAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider();
  _ViewInputs.gestureAccessibilityProvider.setter();
  lazy protocol witness table accessor for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider();
  _ViewInputs.opacityAccessibilityProvider.setter();
  swift_beginAccess();
  if ((*(unsigned char *)(a2 + 361) & 0x10) != 0) {
    *(_DWORD *)(a1 + 36) |= 0xC0u;
  }
  _ViewInputs.makeRootAccessibilityRelationshipScope()();
  type metadata accessor for AccessibilityRelationshipScope();
  lazy protocol witness table accessor for type _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier> and conformance _ViewModifier_Content<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope, (void (*)(uint64_t))type metadata accessor for AccessibilityRelationshipScope);
  PropertyList.subscript.getter();
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall _ViewInputs.makeRootAccessibilityRelationshipScope()()
{
  type metadata accessor for AccessibilityRelationshipScope();
  lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope);
  PropertyList.subscript.getter();
  swift_release();
  if (!v2)
  {
    uint64_t v0 = (void *)swift_allocObject();
    uint64_t v1 = MEMORY[0x1E4FBC868];
    v0[2] = MEMORY[0x1E4FBC868];
    v0[3] = v1;
    v0[4] = v1;
    PropertyList.subscript.setter();
  }
}

uint64_t type metadata accessor for AccessibilityRelationshipScope()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type AccessibilityRelationshipScope and conformance AccessibilityRelationshipScope(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityRelationshipScope();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30AccessibilityRelationshipScopeCAcA11PropertyKeyAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider and conformance SwiftUIPrivacyReductionAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIOpacityAccessibilityProvider and conformance SwiftUIOpacityAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIGestureAccessibilityProvider and conformance SwiftUIGestureAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUILayoutAccessibilityProvider and conformance SwiftUILayoutAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIImageAccessibilityProvider and conformance SwiftUIImageAccessibilityProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider;
  if (!lazy protocol witness table cache variable for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUITextAccessibilityProvider and conformance SwiftUITextAccessibilityProvider);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShowsNavigationIndicatorDisclosureIndicatorModifier()
{
  return &type metadata for ShowsNavigationIndicatorDisclosureIndicatorModifier;
}

void UIApplicationDelegateAdaptor.wrappedValue.getter()
{
}

void protocol witness for ViewGraphFeature.uninstantiate(graph:) in conformance ValidTestCasesFeature()
{
  void *v0 = 0;
}

uint64_t FetchedResults.startIndex.getter()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for [SwiftUIAnySortComparator](255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(void (**a1)(char *, uint64_t), void (**a2)(char *, char *, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v240 = a2;
  v254 = a1;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v245 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v255 = *(char ***)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v241 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v228 = (char *)&v168 - v10;
  v252 = (void (**)(char *, char *, uint64_t))AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v253 = v9;
  uint64_t v248 = AssociatedConformanceWitness;
  uint64_t v12 = type metadata accessor for CountingIndex();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v238 = (char *)&v168 - v14;
  uint64_t v229 = a5;
  uint64_t v246 = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v209 = type metadata accessor for CountingIndexCollection();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for DefaultIndices();
  uint64_t v208 = type metadata accessor for CountingIndexCollection();
  uint64_t v203 = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for DefaultIndices();
  uint64_t v202 = v16;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v257 = v15;
  uint64_t v258 = v16;
  uint64_t v259 = v17;
  uint64_t v260 = v18;
  uint64_t v181 = type metadata accessor for Zip2Sequence();
  MEMORY[0x1F4188790](v181);
  long long v201 = (char *)&v168 - v19;
  uint64_t v257 = v15;
  uint64_t v258 = v16;
  uint64_t v183 = v17;
  uint64_t v259 = v17;
  uint64_t v260 = v18;
  uint64_t v182 = v18;
  uint64_t v237 = type metadata accessor for Zip2Sequence.Iterator();
  uint64_t v232 = *(char **)(v237 - 8);
  MEMORY[0x1F4188790](v237);
  uint64_t v236 = (char *)&v168 - v20;
  uint64_t v231 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v21);
  char v200 = (char *)&v168 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v199 = (char *)&v168 - v24;
  v244 = (char *)MEMORY[0x1E4FBAF30];
  swift_getWitnessTable();
  uint64_t v198 = type metadata accessor for IndexingIterator();
  uint64_t v230 = *(char **)(v198 - 8);
  MEMORY[0x1F4188790](v198);
  uint64_t v180 = (char *)&v168 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  char v179 = (char *)&v168 - v27;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v28 = v12;
  uint64_t v29 = TupleTypeMetadata2;
  uint64_t v30 = type metadata accessor for CountingIndex();
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v251 = v7;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v257 = v12;
  uint64_t v258 = v30;
  uint64_t v259 = v31;
  uint64_t v260 = v32;
  uint64_t v247 = type metadata accessor for ListUpdate();
  MEMORY[0x1F4188790](v247);
  v235 = (char *)&v168 - v33;
  v234 = *(void ***)(v12 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v233 = (char *)&v168 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  v249 = (char *)&v168 - v37;
  MEMORY[0x1F4188790](v38);
  uint64_t v178 = (char *)&v168 - v39;
  MEMORY[0x1F4188790](v40);
  uint64_t v177 = (char *)&v168 - v41;
  MEMORY[0x1F4188790](v42);
  v197 = (char *)&v168 - v43;
  uint64_t v221 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v44);
  char v217 = (char *)&v168 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v46);
  long long v196 = (char *)&v168 - v47;
  swift_getWitnessTable();
  uint64_t v204 = v15;
  uint64_t v195 = type metadata accessor for IndexingIterator();
  uint64_t v214 = *(void *)(v195 - 8);
  MEMORY[0x1F4188790](v195);
  id v176 = (char *)&v168 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v49);
  int v51 = (char *)&v168 - v50;
  uint64_t v222 = type metadata accessor for Range();
  uint64_t v213 = *(void *)(v222 - 8);
  MEMORY[0x1F4188790](v222);
  char v216 = (char *)&v168 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  long long v194 = (char *)&v168 - v54;
  MEMORY[0x1F4188790](v55);
  long long v193 = (char *)&v168 - v56;
  MEMORY[0x1F4188790](v57);
  long long v192 = (char *)&v168 - v58;
  uint64_t v257 = v12;
  uint64_t v258 = v12;
  uint64_t v259 = v31;
  uint64_t v260 = v31;
  uint64_t v219 = type metadata accessor for CollectionChanges.Element();
  uint64_t v227 = *(void *)(v219 - 8);
  MEMORY[0x1F4188790](v219);
  char v218 = (char *)&v168 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v60);
  v220 = (char *)&v168 - v61;
  uint64_t v207 = *(void *)(v208 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v64 = (char *)&v168 - v63;
  uint64_t v206 = *(void *)(v209 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v67 = (char *)&v168 - v66;
  uint64_t v189 = type metadata accessor for CountingIndexListDataSource();
  CountingIndexListDataSource.sectionIDs.getter(v189, (uint64_t)v67);
  uint64_t v188 = type metadata accessor for CountingIndexListDataSource();
  CountingIndexListDataSource.sectionIDs.getter(v188, (uint64_t)v64);
  v244 = (char *)(v256 + 8);
  uint64_t v257 = v12;
  uint64_t v258 = v12;
  uint64_t v259 = v31;
  uint64_t v260 = v31;
  v243 = (void *)type metadata accessor for CollectionChanges();
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v69 = v208;
  v242 = (void (*)(char *, char *, uint64_t))swift_getWitnessTable();
  swift_getAssociatedTypeWitness();
  uint64_t v70 = swift_getAssociatedConformanceWitness();
  uint64_t v71 = v209;
  uint64_t v72 = v68;
  uint64_t v73 = v238;
  CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v67, (uint64_t)v64, v243, v209, v69, v72, (uint64_t)v242, v70);
  uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v207 + 8);
  long long v191 = v64;
  uint64_t v75 = v256;
  v207 += 8;
  double v187 = v74;
  v74((uint64_t)v64, v69);
  uint64_t v76 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
  long long v190 = v67;
  v206 += 8;
  uint64_t v186 = v76;
  v76((uint64_t)v67, v71);
  uint64_t v77 = *(void *)(v75 + 8);
  uint64_t v78 = swift_bridgeObjectRetain();
  if (!CollectionChanges.endIndex.getter(v78)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v79 = 0;
  long long v215 = (void (**)(char *, char *, uint64_t))(v227 + 32);
  uint64_t v212 = (void (**)(char *, char *, uint64_t))(v213 + 32);
  int v211 = (char **)(v221 + 8);
  uint64_t v184 = (void (**)(char *, uint64_t))(v231 + 8);
  uint64_t v175 = v29 - 8;
  uint64_t v80 = v234;
  uint64_t v227 = v229 + 64;
  uint64_t v225 = v245 + 64;
  v252 = (void (**)(char *, char *, uint64_t))(v234 + 2);
  uint64_t v224 = v229 + 72;
  uint64_t v223 = v245 + 72;
  ++v234;
  uint64_t v174 = (void (**)(char *, uint64_t))(v232 + 8);
  long long v210 = (void (**)(char *, uint64_t))(v213 + 8);
  uint64_t v173 = (void (**)(char *, char *, uint64_t))(v231 + 16);
  long long v172 = (void (**)(char *, char *, uint64_t))(v230 + 32);
  id v171 = (void (**)(char *, uint64_t))(v230 + 8);
  uint64_t v170 = (void (**)(char *, char *, uint64_t))(v221 + 16);
  long long v169 = (void (**)(char *, char *, uint64_t))(v214 + 32);
  uint64_t v168 = (void (**)(char *, uint64_t))(v214 + 8);
  uint64_t v214 = v31;
  uint64_t v213 = v77;
  uint64_t v250 = v28;
  uint64_t v185 = v51;
  v255 = (char **)(v80 + 4);
  v226 = (void (**)(char *, uint64_t))(v241 + 8);
  while (1)
  {
    uint64_t v82 = v220;
    uint64_t result = CollectionChanges.subscript.getter();
    BOOL v84 = __OFADD__(v79, 1);
    uint64_t v85 = v79 + 1;
    if (v84) {
      break;
    }
    uint64_t v86 = v218;
    (*v215)(v218, v82, v219);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v221 = v85;
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v120 = v222;
        uint64_t v121 = &v86[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        id v122 = *v212;
        (*v212)(v194, v86, v120);
        v122(v216, v121, v120);
        uint64_t v123 = (uint64_t)v190;
        unint64_t v124 = v254;
        CountingIndexListDataSource.sectionIDs.getter(v189, (uint64_t)v190);
        char v125 = v196;
        uint64_t v126 = v209;
        Collection<>.indices.getter();
        v186(v123, v126);
        uint64_t v127 = v204;
        DefaultIndices.subscript.getter();
        v244 = *v211;
        ((void (*)(char *, uint64_t))v244)(v125, v127);
        uint64_t v128 = (uint64_t)v191;
        uint64_t v129 = v240;
        CountingIndexListDataSource.sectionIDs.getter(v188, (uint64_t)v191);
        uint64_t v130 = v199;
        uint64_t v131 = v208;
        Collection<>.indices.getter();
        long long v132 = v124;
        uint64_t v133 = v202;
        v187(v128, v131);
        char v134 = v200;
        DefaultIndices.subscript.getter();
        id v135 = *v184;
        (*v184)(v130, v133);
        uint64_t v136 = v217;
        zip<A, B>(_:_:)();
        v135(v134, v133);
        ((void (*)(char *, uint64_t))v244)(v136, v127);
        Zip2Sequence.makeIterator()();
        Zip2Sequence.Iterator.next()();
        uint64_t v137 = *(void *)(v29 - 8);
        uint64_t v232 = *(char **)(v137 + 48);
        uint64_t v231 = v137 + 48;
        int v138 = ((uint64_t (*)(char *, uint64_t, uint64_t))v232)(v73, 1, v29);
        uint64_t v139 = v246;
        uint64_t v140 = (uint64_t)v233;
        uint64_t v141 = (uint64_t)v249;
        if (v138 != 1)
        {
          uint64_t v230 = *v255;
          do
          {
            long long v148 = &v73[*(int *)(v29 + 48)];
            uint64_t v149 = v250;
            long long v150 = (void (*)(uint64_t, char *, uint64_t))v230;
            ((void (*)(uint64_t, char *, uint64_t))v230)(v141, v73, v250);
            v150(v140, v148, v149);
            uint64_t v151 = v132;
            uint64_t v152 = v229;
            uint64_t v257 = specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(v151, v141, v129, v140, v251, v139, v245, v229);
            uint64_t v153 = type metadata accessor for Array();
            swift_getWitnessTable();
            uint64_t v241 = v153;
            Array.append<A>(contentsOf:)();
            double v154 = *(void **)(v149 + 16);
            uint64_t v155 = *(char **)(*(v154 - 1) + 16);
            uint64_t v156 = v141;
            uint64_t v157 = v228;
            ((void (*)(char *, uint64_t, void *))v155)(v228, v156, v154);
            LOBYTE(v242) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v152 + 64))(v157, v139, v152) & 1;
            LODWORD(v242) = v242;
            uint64_t v158 = v140;
            uint64_t v159 = *v226;
            uint64_t v160 = v253;
            (*v226)(v157, v253);
            v243 = v154;
            v244 = v155;
            ((void (*)(char *, uint64_t, void *))v155)(v157, v158, v154);
            uint64_t v161 = v245;
            LODWORD(v158) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v245 + 64))(v157, v251, v245) & 1;
            v159(v157, v160);
            if (v242 != v158)
            {
              (*v252)(v235, v249, v250);
              swift_storeEnumTagMultiPayload();
              Array.append(_:)();
            }
            uint64_t v163 = v243;
            uint64_t v162 = (void (*)(char *, char *, void *))v244;
            ((void (*)(char *, char *, void *))v244)(v157, v249, v243);
            int v164 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v152 + 72))(v157, v246, v152) & 1;
            v159(v157, v160);
            uint64_t v165 = v233;
            v162(v157, v233, v163);
            uint64_t v129 = v240;
            int v166 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v161 + 72))(v157, v251, v161) & 1;
            v159(v157, v160);
            if (v164 == v166)
            {
              uint64_t v140 = (uint64_t)v165;
              uint64_t v144 = (void (*)(char *, uint64_t))*v234;
              uint64_t v145 = v250;
              ((void (*)(char *, uint64_t))*v234)(v165, v250);
              uint64_t v141 = (uint64_t)v249;
              id v146 = v249;
              uint64_t v147 = v145;
            }
            else
            {
              uint64_t v141 = (uint64_t)v249;
              uint64_t v167 = v250;
              (*v252)(v235, v249, v250);
              swift_storeEnumTagMultiPayload();
              Array.append(_:)();
              uint64_t v140 = (uint64_t)v165;
              uint64_t v144 = (void (*)(char *, uint64_t))*v234;
              ((void (*)(char *, uint64_t))*v234)(v165, v167);
              id v146 = (char *)v141;
              uint64_t v147 = v167;
            }
            v144(v146, v147);
            uint64_t v139 = v246;
            long long v132 = v254;
            uint64_t v29 = TupleTypeMetadata2;
            uint64_t v73 = v238;
            Zip2Sequence.Iterator.next()();
          }
          while (((unsigned int (*)(char *, uint64_t, uint64_t))v232)(v73, 1, v29) != 1);
        }
        (*v174)(v236, v237);
        uint64_t v142 = *v210;
        uint64_t v143 = v222;
        (*v210)(v216, v222);
        v142(v194, v143);
        int v51 = v185;
        uint64_t v81 = v213;
        uint64_t v79 = v221;
        goto LABEL_5;
      }
      (*v212)(v193, v86, v222);
      uint64_t v88 = (uint64_t)v191;
      CountingIndexListDataSource.sectionIDs.getter(v188, (uint64_t)v191);
      double v89 = v199;
      uint64_t v90 = v208;
      Collection<>.indices.getter();
      v187(v88, v90);
      uint64_t v91 = v200;
      uint64_t v92 = v202;
      DefaultIndices.subscript.getter();
      uint64_t v93 = *v184;
      (*v184)(v89, v92);
      double v94 = v180;
      (*v173)(v180, v91, v92);
      double v95 = v197;
      MEMORY[0x18C1154F0](v92);
      v93(v91, v92);
      uint64_t v96 = v198;
      uint64_t v97 = &v94[*(int *)(v198 + 36)];
      uint64_t v98 = v250;
      v244 = *v255;
      ((void (*)(char *, char *, uint64_t))v244)(v97, v95, v250);
      uint64_t v99 = v179;
      (*v172)(v179, v94, v96);
      uint64_t v100 = &v99[*(int *)(v96 + 36)];
      DefaultIndices.endIndex.getter();
      LOBYTE(v96) = static CountingIndex.== infix(_:_:)();
      v243 = *v234;
      ((void (*)(char *, uint64_t))v243)(v95, v98);
      double v101 = v235;
      double v102 = v178;
      if ((v96 & 1) == 0)
      {
        v242 = *v252;
        do
        {
          v242(v102, v100, v98);
          DefaultIndices.formIndex(after:)();
          ((void (*)(char *, char *, uint64_t))v244)(v101, v102, v98);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for Array();
          Array.append(_:)();
          DefaultIndices.endIndex.getter();
          char v103 = static CountingIndex.== infix(_:_:)();
          ((void (*)(char *, uint64_t))v243)(v95, v98);
        }
        while ((v103 & 1) == 0);
      }
      (*v171)(v99, v198);
      (*v210)(v193, v222);
      uint64_t v29 = TupleTypeMetadata2;
      uint64_t v73 = v238;
      int v51 = v185;
    }
    else
    {
      (*v212)(v192, v86, v222);
      uint64_t v104 = (uint64_t)v190;
      CountingIndexListDataSource.sectionIDs.getter(v189, (uint64_t)v190);
      double v105 = v196;
      uint64_t v106 = v209;
      Collection<>.indices.getter();
      v186(v104, v106);
      double v107 = v217;
      uint64_t v108 = v204;
      DefaultIndices.subscript.getter();
      CGRect v109 = *v211;
      ((void (*)(char *, uint64_t))*v211)(v105, v108);
      CGRect v110 = v176;
      (*v170)(v176, v107, v108);
      CGRect v111 = v197;
      MEMORY[0x18C1154F0](v108);
      ((void (*)(char *, uint64_t))v109)(v107, v108);
      uint64_t v112 = v195;
      CGRect v113 = &v110[*(int *)(v195 + 36)];
      uint64_t v114 = v250;
      v244 = *v255;
      ((void (*)(char *, char *, uint64_t))v244)(v113, v111, v250);
      (*v169)(v51, v110, v112);
      CGRect v115 = &v51[*(int *)(v112 + 36)];
      DefaultIndices.endIndex.getter();
      CGRect v116 = v235;
      char v117 = static CountingIndex.== infix(_:_:)();
      v243 = *v234;
      ((void (*)(char *, uint64_t))v243)(v111, v114);
      double v118 = v177;
      if ((v117 & 1) == 0)
      {
        v242 = *v252;
        do
        {
          v242(v118, v115, v114);
          DefaultIndices.formIndex(after:)();
          ((void (*)(char *, char *, uint64_t))v244)(v116, v118, v114);
          swift_storeEnumTagMultiPayload();
          type metadata accessor for Array();
          Array.append(_:)();
          DefaultIndices.endIndex.getter();
          char v119 = static CountingIndex.== infix(_:_:)();
          ((void (*)(char *, uint64_t))v243)(v111, v114);
        }
        while ((v119 & 1) == 0);
      }
      (*v168)(v51, v195);
      (*v210)(v192, v222);
      uint64_t v29 = TupleTypeMetadata2;
      uint64_t v73 = v238;
    }
    uint64_t v81 = v213;
    uint64_t v79 = v221;
LABEL_5:
    if (v79 == CollectionChanges.endIndex.getter(v81)) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance ShadowListDataSource<A>(uint64_t a1, uint64_t a2)
{
  return ShadowListDataSource.hasHeader(forSectionAt:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ShadowListUpdateRecorder.hasHeader(forSectionAt:)) & 1;
}

uint64_t ShadowListDataSource.hasHeader(forSectionAt:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();

  return a3(a1, updated);
}

uint64_t ShadowListUpdateRecorder.hasHeader(forSectionAt:)(char *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  ShadowListUpdateRecorder.initialIndex(_:)(a1, a2, (char *)&v11 - v8);
  LOBYTE(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 64))(v9, v5, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v4 & 1;
}

BOOL protocol witness for ListDiffable.hasHeader(forSectionAt:) in conformance CollectionViewListDataSource<A>(Swift::Int *a1)
{
  return CollectionViewListDataSource.hasHeader(forSectionAt:)(*a1);
}

BOOL CollectionViewListDataSource.hasGlobalHeader.getter(uint64_t a1)
{
  outlined init with copy of TableHeaderView?(v1 + *(int *)(a1 + 40), (uint64_t)v4, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView);
  BOOL v2 = v5 != 1;
  outlined destroy of SectionAccumulator.Item?((uint64_t)v4, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView);
  return v2;
}

Swift::Bool __swiftcall CollectionViewListDataSource.hasFooter(forSectionAt:)(Swift::Int forSectionAt)
{
  if (forSectionAt < 0 || (uint64_t v2 = *(void *)(v1 + 56), *(void *)(v2 + 16) <= (unint64_t)forSectionAt))
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
  }
  else
  {
    outlined init with copy of SectionAccumulator.Item(v2 + 136 * forSectionAt + 32, (uint64_t)v15);
  }
  outlined init with copy of TableHeaderView?((uint64_t)v15, (uint64_t)v7, &lazy cache variable for type metadata for SectionAccumulator.Item?, MEMORY[0x1E4F402E0]);
  if ((void)v8)
  {
    v5[6] = v12;
    v5[7] = v13;
    uint64_t v6 = v14;
    _OWORD v5[2] = v8;
    void v5[3] = v9;
    v5[4] = v10;
    v5[5] = v11;
    v5[0] = v7[0];
    v5[1] = v7[1];
    Swift::Bool v3 = (uint64_t)v13 > 0;
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
  }
  else
  {
    Swift::Bool v3 = 0;
  }
  outlined destroy of SectionAccumulator.Item?((uint64_t)v15, &lazy cache variable for type metadata for SectionAccumulator.Item?, MEMORY[0x1E4F402E0]);
  return v3;
}

Swift::Bool __swiftcall CollectionViewListDataSource.hasHeader(forSectionAt:)(Swift::Int forSectionAt)
{
  if (forSectionAt < 0 || (uint64_t v2 = *(void *)(v1 + 56), *(void *)(v2 + 16) <= (unint64_t)forSectionAt))
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
  }
  else
  {
    outlined init with copy of SectionAccumulator.Item(v2 + 136 * forSectionAt + 32, (uint64_t)v15);
  }
  outlined init with copy of TableHeaderView?((uint64_t)v15, (uint64_t)v7, &lazy cache variable for type metadata for SectionAccumulator.Item?, MEMORY[0x1E4F402E0]);
  if ((void)v8)
  {
    v5[6] = v12;
    v5[7] = v13;
    uint64_t v6 = v14;
    _OWORD v5[2] = v8;
    void v5[3] = v9;
    v5[4] = v10;
    v5[5] = v11;
    v5[0] = v7[0];
    v5[1] = v7[1];
    Swift::Bool v3 = *((void *)&v12 + 1) > 0;
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
  }
  else
  {
    Swift::Bool v3 = 0;
  }
  outlined destroy of SectionAccumulator.Item?((uint64_t)v15, &lazy cache variable for type metadata for SectionAccumulator.Item?, MEMORY[0x1E4F402E0]);
  return v3;
}

uint64_t outlined destroy of SectionAccumulator.Item?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of TableHeaderView?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI15TableHeaderViewVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

void type metadata accessor for [SwiftUIAnySortComparator](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t specialized ListSectionInfo.visitRow<A>(index:visitor:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(v2 + 56);
  if (*(void *)(v3 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = outlined init with copy of SectionAccumulator.Item(v3 + 136 * result + 32, (uint64_t)v12);
  if (__OFADD__(v17, a2))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v11 = v17 + a2;
  if (v14)
  {
    LODWORD(v9[0]) = v13;
    v9[1] = v14;
    uint64_t v9[2] = v15;
    char v10 = v16 & 1;
    _ViewList_Section.content.getter();
    outlined init with take of OptionalBinaryInteger(v5, (uint64_t)&v6);
  }
  else
  {
    uint64_t v8 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
  }
  outlined init with copy of SectionAccumulator.Item((uint64_t)v12, (uint64_t)v5);
  if (*((void *)&v7 + 1))
  {
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    outlined init with take of OptionalBinaryInteger(&v6, (uint64_t)v9);
  }
  else
  {
    outlined init with copy of TableColumnList((uint64_t)v5 + 8, (uint64_t)v9);
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_0((uint64_t)&v6, (uint64_t (*)(void))type metadata accessor for ViewList?);
  }
  specialized ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return outlined destroy of SectionAccumulator.Item((uint64_t)v12);
}

unint64_t ListSectionInfo.visitRow<A>(index:visitor:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(v2 + 56);
  if (*(void *)(v3 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t result = outlined init with copy of SectionAccumulator.Item(v3 + 136 * result + 32, (uint64_t)v12);
  if (__OFADD__(v18, a2))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v11 = v18 + a2;
  if (v14)
  {
    LODWORD(v9[0]) = v13;
    v9[1] = v14;
    uint64_t v9[2] = v15;
    char v10 = v16 & 1;
    _ViewList_Section.content.getter();
    outlined init with take of OptionalBinaryInteger(v5, (uint64_t)&v6);
  }
  else
  {
    uint64_t v8 = 0;
    long long v6 = 0u;
    long long v7 = 0u;
  }
  outlined init with copy of SectionAccumulator.Item((uint64_t)v12, (uint64_t)v5);
  if (*((void *)&v7 + 1))
  {
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    outlined init with take of OptionalBinaryInteger(&v6, (uint64_t)v9);
  }
  else
  {
    outlined init with copy of TableColumnList((uint64_t)v5 + 8, (uint64_t)v9);
    outlined destroy of SectionAccumulator.Item((uint64_t)v5);
    outlined destroy of ViewList?((uint64_t)&v6);
  }
  *(void *)&v5[0] = v17;
  ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return outlined destroy of SectionAccumulator.Item((uint64_t)v12);
}

uint64_t outlined destroy of SectionAccumulator.Item(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of SectionAccumulator.Item(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(void *a1)
{
  return static Update.end()();
}

uint64_t specialized ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(void *a1)
{
  return static Update.end()();
}

{
  MEMORY[0x18C113CA0]();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  AGWeakAttributeGetAttribute();
  swift_bridgeObjectRetain();
  ViewList.applySublists(from:list:transform:to:)();
  swift_bridgeObjectRelease();
  return static Update.end()();
}

uint64_t protocol witness for ListDiffable.hasFooter(forSectionAt:) in conformance ShadowListDataSource<A>(uint64_t a1, uint64_t a2)
{
  return ShadowListDataSource.hasHeader(forSectionAt:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ShadowListUpdateRecorder.hasFooter(forSectionAt:)) & 1;
}

uint64_t ShadowListUpdateRecorder.hasFooter(forSectionAt:)(char *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v9 = (char *)&v11 - v8;
  ShadowListUpdateRecorder.initialIndex(_:)(a1, a2, (char *)&v11 - v8);
  LOBYTE(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 72))(v9, v5, v4);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return v4 & 1;
}

BOOL protocol witness for ListDiffable.hasFooter(forSectionAt:) in conformance CollectionViewListDataSource<A>(Swift::Int *a1)
{
  return CollectionViewListDataSource.hasFooter(forSectionAt:)(*a1);
}

uint64_t specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(void (**a1)(char *, uint64_t), uint64_t a2, void (**a3)(char *, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v142 = a8;
  uint64_t v140 = a6;
  uint64_t v125 = a4;
  uint64_t v144 = a3;
  uint64_t v124 = a2;
  uint64_t v143 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v126 = type metadata accessor for CountingIndexCollection();
  uint64_t v146 = MEMORY[0x1E4F40C38];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for DefaultIndices();
  uint64_t v145 = MEMORY[0x1E4FBAF20];
  uint64_t v13 = swift_getWitnessTable();
  uint64_t v117 = type metadata accessor for LazySequence();
  uint64_t v130 = *(void *)(v117 - 8);
  MEMORY[0x1F4188790](v117);
  CGRect v116 = (char *)&v95 - v14;
  uint64_t v128 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v15);
  CGRect v115 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v114 = (char *)&v95 - v18;
  uint64_t v141 = a7;
  uint64_t v139 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for CountingIndex();
  uint64_t v131 = *(char **)(AssociatedConformanceWitness + 8);
  long long v132 = (char *)AssociatedTypeWitness;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v20 = type metadata accessor for CountingIndex();
  uint64_t v21 = swift_getWitnessTable();
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v148 = v19;
  uint64_t v149 = v20;
  uint64_t v150 = v21;
  uint64_t v151 = v22;
  uint64_t v23 = type metadata accessor for ListUpdate();
  uint64_t v119 = v12;
  uint64_t v118 = v13;
  uint64_t v113 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1F4188790](v113);
  uint64_t v112 = (char *)&v95 - v24;
  uint64_t v137 = v19;
  uint64_t v138 = *(void *)(v19 - 8);
  uint64_t v134 = *(void *)(v138 + 64);
  MEMORY[0x1F4188790](v25);
  id v135 = (char *)&v95 - v26;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v27 = type metadata accessor for CountingIndexCollection();
  uint64_t v111 = swift_getWitnessTable();
  uint64_t v28 = type metadata accessor for DefaultIndices();
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v108 = type metadata accessor for LazySequence();
  uint64_t v99 = *(void (***)(char *, uint64_t))(v108 - 8);
  MEMORY[0x1F4188790](v108);
  double v107 = (char *)&v95 - v30;
  uint64_t v100 = *(void (***)(char *, uint64_t))(v28 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v106 = (char *)&v95 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  double v105 = (char *)&v95 - v34;
  uint64_t v110 = v28;
  uint64_t v109 = v29;
  uint64_t v104 = type metadata accessor for LazyMapSequence();
  MEMORY[0x1F4188790](v104);
  char v103 = (char *)&v95 - v35;
  uint64_t v146 = type metadata accessor for Range();
  uint64_t v129 = *(void (***)(char *, char *, uint64_t))(v146 - 8);
  MEMORY[0x1F4188790](v146);
  uint64_t v133 = (char *)&v95 - v36;
  uint64_t v147 = v20;
  uint64_t v148 = v20;
  uint64_t v149 = v20;
  uint64_t v150 = v22;
  uint64_t v98 = v22;
  uint64_t v151 = v22;
  uint64_t v145 = type metadata accessor for CollectionChanges.Element();
  uint64_t v127 = *(void *)(v145 - 8);
  MEMORY[0x1F4188790](v145);
  uint64_t v38 = (char *)&v95 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  uint64_t v41 = (char *)&v95 - v40;
  uint64_t v42 = v126;
  uint64_t v97 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v45 = (char *)&v95 - v44;
  uint64_t v96 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v48 = (char *)&v95 - v47;
  uint64_t v136 = v23;
  uint64_t v148 = Array.init()();
  uint64_t v49 = type metadata accessor for CountingIndexListDataSource();
  CountingIndexListDataSource.rowIDs(forSectionAt:)(v124, v49, (uint64_t)v48);
  uint64_t v50 = type metadata accessor for CountingIndexListDataSource();
  CountingIndexListDataSource.rowIDs(forSectionAt:)(v125, v50, (uint64_t)v45);
  uint64_t v144 = (void (**)(char *, char *, uint64_t))swift_getWitnessTable();
  uint64_t v51 = v42;
  uint64_t v52 = swift_getWitnessTable();
  uint64_t v53 = v98;
  swift_getAssociatedTypeWitness();
  uint64_t v54 = swift_getAssociatedConformanceWitness();
  uint64_t v121 = v48;
  id v122 = v45;
  uint64_t v123 = v27;
  uint64_t v55 = specialized CollectionChanges.init<A, B>(from:to:)((uint64_t)v48, (uint64_t)v45, v147, v147, v27, v51, (uint64_t)v144, v52, v54);
  if (CollectionChanges.endIndex.getter(v55))
  {
    uint64_t v56 = 0;
    uint64_t v144 = (void (**)(char *, char *, uint64_t))(v127 + 32);
    uint64_t v143 = (void (**)(char *, uint64_t))(v129 + 1);
    v129 += 4;
    double v102 = (void (**)(char *, uint64_t))(v128 + 8);
    uint64_t v128 = v138 + 16;
    uint64_t v127 = v138 + 32;
    double v101 = (void (**)(char *, uint64_t))(v130 + 8);
    ++v100;
    ++v99;
    uint64_t v131 = v41;
    long long v132 = v38;
    uint64_t v130 = v55;
    while (1)
    {
      uint64_t result = CollectionChanges.subscript.getter();
      uint64_t v73 = v56 + 1;
      if (__OFADD__(v56, 1)) {
        break;
      }
      (*v144)(v38, v41, v145);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v75 = v133;
          (*v129)(v133, v38, v146);
          uint64_t v76 = v114;
          Collection<>.indices.getter();
          uint64_t v77 = v53;
          uint64_t v78 = v115;
          uint64_t v79 = v119;
          DefaultIndices.subscript.getter();
          uint64_t v80 = *v102;
          (*v102)(v76, v79);
          uint64_t v81 = v116;
          MEMORY[0x18C115A70](v79, v118);
          v80(v78, v79);
          uint64_t v82 = v137;
          uint64_t v83 = v138;
          BOOL v84 = v135;
          (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v135, v125, v137);
          unint64_t v85 = (*(unsigned __int8 *)(v83 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
          uint64_t v86 = (char *)swift_allocObject();
          uint64_t v87 = v140;
          *((void *)v86 + 2) = v139;
          *((void *)v86 + 3) = v87;
          uint64_t v88 = v142;
          *((void *)v86 + 4) = v141;
          *((void *)v86 + 5) = v88;
          uint64_t v89 = v82;
          uint64_t v53 = v77;
          (*(void (**)(char *, char *, uint64_t))(v83 + 32))(&v86[v85], v84, v89);
          uint64_t v90 = v117;
          swift_getWitnessTable();
          LazySequenceProtocol.map<A>(_:)();
          swift_release();
          uint64_t v91 = v90;
          uint64_t v41 = v131;
          (*v101)(v81, v91);
          uint64_t v38 = v132;
          type metadata accessor for Array();
          swift_getWitnessTable();
          uint64_t v55 = v130;
          Array.append<A>(contentsOf:)();
          (*v143)(v75, v146);
        }
        else
        {
          uint64_t v92 = v146;
          TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
          double v94 = *v143;
          (*v143)(&v38[*(int *)(TupleTypeMetadata2 + 48)], v92);
          v94(v38, v92);
        }
      }
      else
      {
        uint64_t v57 = v133;
        (*v129)(v133, v38, v146);
        uint64_t v58 = v105;
        Collection<>.indices.getter();
        uint64_t v59 = v106;
        uint64_t v60 = v110;
        DefaultIndices.subscript.getter();
        uint64_t v61 = *v100;
        (*v100)(v58, v60);
        uint64_t v62 = v107;
        MEMORY[0x18C115A70](v60, v109);
        v61(v59, v60);
        uint64_t v63 = v137;
        uint64_t v64 = v138;
        uint64_t v65 = v135;
        (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v135, v124, v137);
        unint64_t v66 = (*(unsigned __int8 *)(v64 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
        uint64_t v67 = (char *)swift_allocObject();
        uint64_t v68 = v140;
        *((void *)v67 + 2) = v139;
        *((void *)v67 + 3) = v68;
        uint64_t v69 = v142;
        *((void *)v67 + 4) = v141;
        *((void *)v67 + 5) = v69;
        (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v67[v66], v65, v63);
        uint64_t v70 = v108;
        swift_getWitnessTable();
        LazySequenceProtocol.map<A>(_:)();
        swift_release();
        uint64_t v71 = v62;
        uint64_t v41 = v131;
        (*v99)(v71, v70);
        type metadata accessor for Array();
        swift_getWitnessTable();
        uint64_t v38 = v132;
        uint64_t v55 = v130;
        Array.append<A>(contentsOf:)();
        (*v143)(v57, v146);
      }
      ++v56;
      if (v73 == CollectionChanges.endIndex.getter(v55)) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v122, v126);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v121, v123);
    return v148;
  }
  return result;
}

uint64_t type metadata accessor for CountingIndexListDataSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CollectionChanges.endIndex.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CollectionChanges.Element();
  return MEMORY[0x18C115CB0](a1, v2);
}

uint64_t type metadata accessor for CollectionChanges.Element()
{
  return swift_getGenericMetadata();
}

uint64_t CountingIndexListDataSource.rowIDs(forSectionAt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v15 = a1;
  uint64_t v16 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v11 = (char *)&v14 - v10;
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = type metadata accessor for CountingIndex();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v12 + 16) - 8) + 16))(v8, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 80))(v8, v4, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16, v11, v14);
}

uint64_t CollectionChanges.subscript.getter()
{
  return Array.subscript.getter();
}

uint64_t specialized CollectionChanges.init<A, B>(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for CollectionChanges.Element();
  uint64_t v17 = Array.init()();
  uint64_t v14 = (void *)type metadata accessor for CollectionChanges();
  CollectionChanges.formChanges<A, B>(from:to:)(a1, a2, v14, a5, a6, a7, a8, a9);
  return v17;
}

uint64_t type metadata accessor for CollectionChanges()
{
  return swift_getGenericMetadata();
}

void *initializeWithCopy for LegacyBaseModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v11 = *(void *)(v5 + 48) + 7;
  uint64_t v9 = (void *)((v11 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (uint64_t *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v11) = -1;
  if ((unint64_t)*v10 < 0xFFFFFFFF) {
    uint64_t v11 = *v10;
  }
  if ((int)v11 - 1 < 0)
  {
    *uint64_t v9 = *v10;
    v9[1] = v10[1];
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  }
  unint64_t v12 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  int v14 = *(_DWORD *)v13;
  *(unsigned char *)(v12 + 4) = *(unsigned char *)(v13 + 4);
  *(_DWORD *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 5) = *(unsigned char *)(v13 + 5);
  *(unsigned char *)(v12 + 6) = *(unsigned char *)(v13 + 6);
  uint64_t v15 = ((unint64_t)v9 + 19) | 7;
  uint64_t v16 = ((unint64_t)v10 + 19) | 7;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  unint64_t v19 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(unsigned char *)(v19 + 9) = *(unsigned char *)(v20 + 9);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t View.onScrollPhaseChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return View.onScrollPhaseChange(_:)(a1, a2, a3, a4, (uint64_t)&type metadata for OnScrollPhaseContextChangeModifier);
}

{
  return View.onScrollPhaseChange(_:)(a1, a2, a3, a4, (uint64_t)&type metadata for OnScrollPhaseChangeModifier);
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance SceneBodyAccessor<A>(uint64_t result, char a2)
{
  return SceneBodyAccessor.updateBody(of:changed:)(result, a2);
}

unsigned __int8 *getEnumTagSinglePayload for SearchScopeActivation.Role(unsigned __int8 *result, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC)
  {
LABEL_17:
    unsigned int v6 = *result;
    if (v6 >= 2)
    {
      unsigned int v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      uint64_t result = (unsigned __int8 *)(v7 - 2);
      if (v7 > 2) {
        return result;
      }
    }
    return 0;
  }
  unsigned int v2 = a2 + 4;
  if (a2 + 4 >= 0xFFFF00) {
    unsigned int v3 = 4;
  }
  else {
    unsigned int v3 = 2;
  }
  if (v2 >> 8 < 0xFF) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x100) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      int v5 = result[1];
      if (!result[1]) {
        goto LABEL_17;
      }
      goto LABEL_15;
    case 2:
      int v5 = *(unsigned __int16 *)(result + 1);
      if (!*(_WORD *)(result + 1)) {
        goto LABEL_17;
      }
      goto LABEL_15;
    case 3:
      __break(1u);
      return result;
    case 4:
      int v5 = *(_DWORD *)(result + 1);
      if (!v5) {
        goto LABEL_17;
      }
LABEL_15:
      uint64_t result = (unsigned __int8 *)((*result | (v5 << 8)) - 4);
      break;
    default:
      goto LABEL_17;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SectionStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachment.DeferredTransform and conformance AccessibilityAttachment.DeferredTransform);
  }
  return result;
}

ValueMetadata *type metadata accessor for HelpStyleConfiguration()
{
  return &type metadata for HelpStyleConfiguration;
}

ValueMetadata *type metadata accessor for SharingActivityPickerPresentation()
{
  return &type metadata for SharingActivityPickerPresentation;
}

ValueMetadata *type metadata accessor for SelectionContainerModifier()
{
  return &type metadata for SelectionContainerModifier;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ForestRootBodyAccessor<A>(uint64_t a1, char a2)
{
  return ForestRootBodyAccessor.updateBody(of:changed:)(a1, a2, *(void *)v2, *(void **)(v2 + 8));
}

ValueMetadata *type metadata accessor for NavigationUpdateEvent()
{
  return &type metadata for NavigationUpdateEvent;
}

ValueMetadata *type metadata accessor for NavigationSplitColumn()
{
  return &type metadata for NavigationSplitColumn;
}

ValueMetadata *type metadata accessor for SearchFocusContext()
{
  return &type metadata for SearchFocusContext;
}

ValueMetadata *type metadata accessor for ListSectionSpacing()
{
  return &type metadata for ListSectionSpacing;
}

ValueMetadata *type metadata accessor for DragGesture()
{
  return &type metadata for DragGesture;
}

ValueMetadata *type metadata accessor for EditModeScopeModifier.TransformModifier()
{
  return &type metadata for EditModeScopeModifier.TransformModifier;
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SearchSuffixKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = -0.0;
  *(_OWORD *)(a1 + 16) = xmmword_18834C6D0;
  return result;
}

void one-time initialization function for observerActions()
{
  static UIKitUpdateCycle.observerActions = (_UNKNOWN *)MEMORY[0x1E4FBC860];
}

__n128 partial apply for closure #1 in View.defaultScrollAnchor(_:)(uint64_t a1)
{
  if ((v1[2].n128_u8[0] & 1) == 0)
  {
    __n128 result = v1[1];
    *(__n128 *)(a1 + 8) = result;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t type metadata completion function for ResolvedProgressViewStyle()
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for CustomProgressView()
{
  uint64_t result = type metadata accessor for ProgressViewValue(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>)
  {
    type metadata accessor for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>();
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>> and conformance <A> Group<A>);
  }
  return result;
}

void type metadata accessor for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>()
{
  if (!lazy cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>, MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for Group();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Group<_ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
    lazy protocol witness table accessor for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>;
  if (!lazy protocol witness table cache variable for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>)
  {
    type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(255, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for ProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
    lazy protocol witness table accessor for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, (void (*)(void))lazy protocol witness table accessor for type ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel> and conformance ProgressView<A, B>);
}

uint64_t static AccessibilityLabeledContentLabelModifier._makeView(modifier:inputs:body:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a1;
  long long v8 = *(_OWORD *)(a2 + 48);
  _OWORD v22[2] = *(_OWORD *)(a2 + 32);
  _OWORD v22[3] = v8;
  void v22[4] = *(_OWORD *)(a2 + 64);
  int v23 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  v22[0] = *(_OWORD *)a2;
  v22[1] = v9;
  *(void *)&v20[0] = v8;
  DWORD2(v20[0]) = DWORD2(v8);
  uint64_t v10 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v10)
  {
    LODWORD(v20[0]) = specialized static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(v7, (uint64_t)v22);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v20[0], (uint64_t)v22, a3, a4);
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 48);
    void v20[2] = *(_OWORD *)(a2 + 32);
    v20[3] = v18;
    v20[4] = *(_OWORD *)(a2 + 64);
    int v21 = *(_DWORD *)(a2 + 80);
    long long v19 = *(_OWORD *)(a2 + 16);
    v20[0] = *(_OWORD *)a2;
    v20[1] = v19;
    return ((uint64_t (*)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3)(v10, v20, v11, v12, v13, v14, v15, v16);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment;
  if (!lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLabeledContentLabelModifier.Attachment and conformance AccessibilityLabeledContentLabelModifier.Attachment);
  }
  return result;
}

uint64_t specialized static AccessibilityLabeledContentModifier._makePresentation(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  if (v4 == 1) {
    return _ViewInputs.intern<A>(_:id:)();
  }
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_1(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityLabeledContentLabelModifier>, (uint64_t)&type metadata for AccessibilityLabeledContentLabelModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedPresentation and conformance ResolvedPresentation();
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent;
  if (!lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCombinedLabeledContent and conformance AccessibilityCombinedLabeledContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedPresentation and conformance ResolvedPresentation()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedPresentation and conformance ResolvedPresentation;
  if (!lazy protocol witness table cache variable for type ResolvedPresentation and conformance ResolvedPresentation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedPresentation and conformance ResolvedPresentation);
  }
  return result;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedProgressViewStyle@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0(v1, a1, type metadata accessor for ProgressViewStyleConfiguration);
}

uint64_t destroy for ArchivableCircularProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v3 = type metadata accessor for Date();
    char v4 = *(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(v2, v3);
    type metadata accessor for ClosedRange<Date>();
    v4(v2 + *(int *)(v5 + 36), v3);
  }

  return swift_release();
}

uint64_t ResolvedProgressViewStyle.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v62 = a1;
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v56 = (uint64_t)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(0);
  uint64_t v58 = v5 - 8;
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v57 = (uint64_t)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v59 = (uint64_t)v53 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v60 = (uint64_t)v53 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v61 = (uint64_t)v53 - v12;
  uint64_t v55 = type metadata accessor for CustomProgressView;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
  uint64_t v14 = v13 - 8;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v53 - v15;
  uint64_t v54 = type metadata accessor for ProgressView.Base;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
  v53[2] = v17;
  MEMORY[0x1F4188790](v17);
  long long v19 = (char *)v53 - v18;
  uint64_t v20 = type metadata accessor for ProgressViewStyleConfiguration(0);
  int v21 = (int *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v23 = (char *)v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v53 - v25;
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for ProgressView);
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v29 = (char *)v53 - v28;
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0(v2, (uint64_t)v26, type metadata accessor for ProgressViewStyleConfiguration);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0((uint64_t)v26, (uint64_t)v23, type metadata accessor for ProgressViewStyleConfiguration);
  uint64_t v30 = *(int *)(v14 + 60);
  uint64_t v31 = *(int *)(v14 + 64);
  v16[v31] = 1;
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0((uint64_t)v23, (uint64_t)v16, type metadata accessor for ProgressViewValue);
  v16[v30] = v23[v21[9]];
  LOBYTE(v30) = v23[v21[10]];
  outlined destroy of ProgressViewValue((uint64_t)v23, type metadata accessor for ProgressViewStyleConfiguration);
  v16[v31] = v30;
  _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_0((uint64_t)v16, (uint64_t)v19, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))v55);
  outlined destroy of ProgressViewValue((uint64_t)v26, type metadata accessor for ProgressViewStyleConfiguration);
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_0((uint64_t)v19, (uint64_t)v29, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))v54);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0(v53[1], (uint64_t)v26, type metadata accessor for ProgressViewStyleConfiguration);
  uint64_t v32 = &v26[v21[7]];
  uint64_t v33 = *(void *)v32;
  unsigned __int8 v34 = v32[8];
  outlined destroy of ProgressViewValue((uint64_t)v26, type metadata accessor for ProgressViewStyleConfiguration);
  uint64_t v35 = (uint64_t)v29;
  uint64_t v36 = v56;
  outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v29, v56);
  type metadata accessor for ProgressViewStyleModifier<DefaultProgressViewStyle>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v37 = swift_allocObject();
  *(unsigned char *)(v37 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  uint64_t v64 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  uint64_t v38 = v63[0];
  uint64_t v39 = v63[1];
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = v38;
  *(void *)(v40 + 24) = v39;
  uint64_t v41 = v57;
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0(v36, v57, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>);
  swift_release();
  uint64_t v42 = v58;
  uint64_t v43 = (uint64_t *)(v41 + *(int *)(v58 + 44));
  *uint64_t v43 = v40;
  v43[1] = v37;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v40 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v44 = v41;
  uint64_t v45 = v59;
  outlined init with take of ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(v44, v59);
  uint64_t v46 = dword_1ED466098;
  uint64_t v47 = (uint64_t *)(v45 + *(int *)(v42 + 44));
  uint64_t v48 = *v47;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v48 + 16, v46 | (v46 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  outlined destroy of ProgressViewValue(v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>);
  v63[0] = 1024;
  AccessibilityNullableOptionSet<>.init(adding:)();
  uint64_t v49 = *v47 + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v49);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v50 = v60;
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0(v45, v60, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>);
  outlined destroy of ProgressViewValue(v45, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>);
  uint64_t v64 = v33;
  LOWORD(v65) = v34;
  lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue();
  AccessibilityValueStorage.init<A>(_:description:)();
  uint64_t v51 = v61;
  specialized ModifiedContent<>.accessibilityValue(_:)((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, v61);
  outlined destroy of AccessibilityValueStorage((uint64_t)v63);
  outlined destroy of ProgressViewValue(v50, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>);
  outlined init with take of ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(v51, v62);
  return outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v35);
}

uint64_t outlined destroy of ProgressViewValue(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI17ProgressViewValueOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI17ProgressViewValueOWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t ResolvedProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v21 - v8;
  unint64_t v10 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ProgressViewStyleConfiguration(v2, (uint64_t)v9, type metadata accessor for ProgressViewValue);
  uint64_t v13 = type metadata accessor for ResolvedProgressView(0);
  char v14 = *(unsigned char *)(v2 + *(int *)(v13 + 20));
  char v15 = *(unsigned char *)(v2 + *(int *)(v13 + 24));
  outlined init with copy of ProgressViewStyleConfiguration((uint64_t)v9, (uint64_t)v6, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of ProgressViewStyleConfiguration((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    char v16 = 0;
    uint64_t v17 = 0;
    char v18 = 1;
  }
  else
  {
    uint64_t v17 = *(void *)v6;
    char v18 = v6[8];
    char v16 = v6[9];
  }
  outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v9, (uint64_t)v12, type metadata accessor for ProgressViewValue);
  long long v19 = &v12[v10[5]];
  *(void *)long long v19 = v17;
  v19[8] = v18;
  v12[v10[6]] = v16;
  v12[v10[7]] = v14 ^ 1;
  v12[v10[8]] = v15 ^ 1;
  return outlined init with take of WidgetAuxiliaryViewMetadata((uint64_t)v12, a1, type metadata accessor for ProgressViewStyleConfiguration);
}

uint64_t outlined init with copy of ProgressViewStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ProgressViewValue(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ProgressViewValue);
}

_OWORD *initializeWithCopy for ArchivableCircularProgressView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(v7, v8, v10);
    type metadata accessor for ClosedRange<Date>();
    v11(&v7[*(int *)(v12 + 36)], &v8[*(int *)(v12 + 36)], v10);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    v7[*(int *)(v13 + 48)] = v8[*(int *)(v13 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  char v14 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v15 = v14[5];
  char v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(void *)char v16 = *(void *)v17;
  unsigned char v16[8] = v17[8];
  v7[v14[6]] = v8[v14[6]];
  v7[v14[7]] = v8[v14[7]];
  v7[v14[8]] = v8[v14[8]];
  *(void *)((char *)a1 + *(int *)(a3 + 28)) = *(void *)((char *)a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for ProgressViewStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for ProgressViewStyleConfiguration);
}

uint64_t outlined init with take of WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>)
  {
    type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(255, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for ProgressView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>);
    }
  }
}

void type metadata accessor for MutableBox<AccessibilityAttachment>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ProgressViewStyleModifier<DefaultProgressViewStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityProgressValue and conformance AccessibilityProgressValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue;
  if (!lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProgressValue and conformance AccessibilityProgressValue);
  }
  return result;
}

uint64_t closure #1 in DefaultProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v85 = a2;
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
  uint64_t v77 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v78 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v79 = (uint64_t)&v74 - v6;
  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, MEMORY[0x1E4F40578]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v76 = (uint64_t)&v74 - v8;
  uint64_t v80 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v80);
  unint64_t v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, MEMORY[0x1E4F40578]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v81 = (uint64_t)&v74 - v12;
  _s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0(0, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v13);
  char v16 = (char *)&v74 - v15;
  _s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
  uint64_t v84 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v83 = (uint64_t)&v74 - v18;
  long long v19 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v74 - v23;
  _s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for ProgressView);
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v27 = (char *)&v74 - v26;
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v33 = (char *)&v74 - v32;
  int v34 = *(unsigned __int8 *)(a1 + v19[6]);
  uint64_t v82 = v35;
  if (v34 == 1)
  {
    outlined init with copy of ProgressViewValue(a1, (uint64_t)v24, type metadata accessor for ProgressViewStyleConfiguration);
    outlined init with copy of ProgressViewValue((uint64_t)v24, (uint64_t)v21, type metadata accessor for ProgressViewStyleConfiguration);
    uint64_t v36 = *(int *)(v14 + 52);
    uint64_t v37 = *(int *)(v14 + 56);
    v16[v37] = 1;
    outlined init with copy of ProgressViewValue((uint64_t)v21, (uint64_t)v16, type metadata accessor for ProgressViewValue);
    v16[v36] = v21[v19[7]];
    char v38 = v21[v19[8]];
    _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v21, type metadata accessor for ProgressViewStyleConfiguration);
    v16[v37] = v38;
    uint64_t v39 = v83;
    _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_1((uint64_t)v16, v83, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
    _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v24, type metadata accessor for ProgressViewStyleConfiguration);
    swift_storeEnumTagMultiPayload();
    _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_1(v39, (uint64_t)v27, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v41 = swift_getKeyPath();
    outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v27, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void, uint64_t, uint64_t))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
    uint64_t v42 = &v30[*(int *)(v82 + 36)];
    *(void *)uint64_t v42 = KeyPath;
    v42[8] = 0;
    *((void *)v42 + 2) = v41;
    v42[24] = 0;
    *((void *)v42 + 4) = 0;
    outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>((uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
    outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>((uint64_t)v30, (uint64_t)v33, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
    outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>((uint64_t)v33, v85, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>((uint64_t)v33, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
  }
  else
  {
    uint64_t v74 = v30;
    uint64_t v75 = v27;
    uint64_t v44 = v83;
    outlined init with copy of ProgressViewValue(a1, (uint64_t)v10, type metadata accessor for ProgressViewValue);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      outlined init with copy of ProgressViewValue(a1, (uint64_t)v24, type metadata accessor for ProgressViewStyleConfiguration);
      outlined init with copy of ProgressViewValue((uint64_t)v24, (uint64_t)v21, type metadata accessor for ProgressViewStyleConfiguration);
      uint64_t v45 = *(int *)(v14 + 52);
      uint64_t v46 = *(int *)(v14 + 56);
      v16[v46] = 1;
      outlined init with copy of ProgressViewValue((uint64_t)v21, (uint64_t)v16, type metadata accessor for ProgressViewValue);
      v16[v45] = v21[v19[7]];
      char v47 = v21[v19[8]];
      _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v21, type metadata accessor for ProgressViewStyleConfiguration);
      v16[v46] = v47;
      _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_1((uint64_t)v16, v44, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
      _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v24, type metadata accessor for ProgressViewStyleConfiguration);
      swift_storeEnumTagMultiPayload();
      uint64_t v48 = (uint64_t)v75;
      _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_1(v44, (uint64_t)v75, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
      uint64_t v49 = swift_getKeyPath();
      uint64_t v50 = swift_getKeyPath();
      uint64_t v51 = v78;
      outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v48, v78, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void, uint64_t, uint64_t))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
      uint64_t v52 = v51 + *(int *)(v77 + 36);
      *(void *)uint64_t v52 = v49;
      *(unsigned char *)(v52 + 8) = 0;
      *(void *)(v52 + 16) = v50;
      *(unsigned char *)(v52 + 24) = 0;
      *(void *)(v52 + 32) = 0;
      outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v48, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
      uint64_t v53 = v51;
      uint64_t v54 = v79;
      outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(v53, v79, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
      uint64_t v55 = v81;
      outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v54, v81, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
      type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage, MEMORY[0x1E4F40568]);
      swift_storeEnumTagMultiPayload();
      outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v54, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
    }
    else
    {
      _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v10, type metadata accessor for ProgressViewValue);
      char v56 = *(unsigned char *)(a1 + v19[5] + 8);
      outlined init with copy of ProgressViewValue(a1, (uint64_t)v24, type metadata accessor for ProgressViewStyleConfiguration);
      outlined init with copy of ProgressViewValue((uint64_t)v24, (uint64_t)v21, type metadata accessor for ProgressViewStyleConfiguration);
      uint64_t v57 = *(int *)(v14 + 52);
      uint64_t v58 = *(int *)(v14 + 56);
      v16[v58] = 1;
      outlined init with copy of ProgressViewValue((uint64_t)v21, (uint64_t)v16, type metadata accessor for ProgressViewValue);
      v16[v57] = v21[v19[7]];
      char v59 = v21[v19[8]];
      _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v21, type metadata accessor for ProgressViewStyleConfiguration);
      v16[v58] = v59;
      _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_1((uint64_t)v16, v44, &lazy cache variable for type metadata for CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for CustomProgressView);
      _s7SwiftUI17ProgressViewValueOWOhTm_1((uint64_t)v24, type metadata accessor for ProgressViewStyleConfiguration);
      swift_storeEnumTagMultiPayload();
      uint64_t v60 = (uint64_t)v75;
      _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_1(v44, (uint64_t)v75, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base, (uint64_t (*)(void, void *))type metadata accessor for ProgressView.Base);
      uint64_t v61 = swift_getKeyPath();
      uint64_t v62 = swift_getKeyPath();
      if (v56)
      {
        uint64_t v63 = (uint64_t)v74;
        outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v60, (uint64_t)v74, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void, uint64_t, uint64_t))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
        uint64_t v64 = v63 + *(int *)(v82 + 36);
        *(void *)uint64_t v64 = v61;
        *(unsigned char *)(v64 + 8) = 0;
        *(void *)(v64 + 16) = v62;
        *(unsigned char *)(v64 + 24) = 0;
        *(void *)(v64 + 32) = 0;
        outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v60, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
        outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(v63, (uint64_t)v33, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
        uint64_t v65 = v76;
        outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>((uint64_t)v33, v76, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
        type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>.Storage, MEMORY[0x1E4F40568]);
        swift_storeEnumTagMultiPayload();
        uint64_t v66 = (uint64_t)v33;
        uint64_t v67 = &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>;
        uint64_t v68 = (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>;
        uint64_t v69 = lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle;
      }
      else
      {
        uint64_t v70 = v78;
        outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v60, v78, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void, uint64_t, uint64_t))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
        uint64_t v71 = v70 + *(int *)(v77 + 36);
        *(void *)uint64_t v71 = v61;
        *(unsigned char *)(v71 + 8) = 0;
        *(void *)(v71 + 16) = v62;
        *(unsigned char *)(v71 + 24) = 0;
        *(void *)(v71 + 32) = 0;
        outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v60, (uint64_t)&lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t)type metadata accessor for ProgressView, (uint64_t (*)(void))_s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0);
        uint64_t v72 = v79;
        outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(v70, v79, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
        uint64_t v65 = v76;
        outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v72, v76, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
        type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>.Storage, MEMORY[0x1E4F40568]);
        swift_storeEnumTagMultiPayload();
        uint64_t v66 = v72;
        uint64_t v67 = &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>;
        uint64_t v68 = &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>;
        uint64_t v69 = lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle;
      }
      outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(v66, v67, v68, (void (*)(void))v69);
      uint64_t v73 = MEMORY[0x1E4F40578];
      uint64_t v55 = v81;
      outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v65, v81, (uint64_t)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, MEMORY[0x1E4F40578], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>);
      type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage, MEMORY[0x1E4F40568]);
      swift_storeEnumTagMultiPayload();
      outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(v65, (uint64_t)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, v73, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>);
    }
    outlined init with copy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(v55, v85);
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>(v55);
  }
}

void type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    _s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0(255, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for ProgressView);
    type metadata accessor for ProgressViewStyleModifier<CircularProgressViewStyle>(255, a3, a4);
    unint64_t v7 = type metadata accessor for ModifiedContent();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with take of CustomProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, void *))
{
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>.Base(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, void *))
{
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI18CustomProgressViewVyAA0dE18StyleConfigurationV5LabelVAE012CurrentValueH0VGWObTm_1(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(void, void *))
{
  _s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    v6[0] = &type metadata for ProgressViewStyleConfiguration.Label;
    v6[1] = &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
    v6[2] = &protocol witness table for ProgressViewStyleConfiguration.Label;
    uint64_t v6[3] = &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
    unint64_t v4 = a3(0, v6);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI12ProgressViewVyAA0cD18StyleConfigurationV5LabelVAE012CurrentValueG0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    v6[0] = &type metadata for ProgressViewStyleConfiguration.Label;
    v6[1] = &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
    v6[2] = &protocol witness table for ProgressViewStyleConfiguration.Label;
    uint64_t v6[3] = &protocol witness table for ProgressViewStyleConfiguration.CurrentValueLabel;
    unint64_t v4 = a3(0, v6);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of ProgressViewValue(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ProgressView()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
    uint64_t v7 = v6;
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>, MEMORY[0x1E4F40578]);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, &lazy cache variable for type metadata for ProgressViewStyleModifier<LinearProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type LinearProgressViewStyle and conformance LinearProgressViewStyle);
    uint64_t v7 = v6;
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>, (unint64_t *)&lazy cache variable for type metadata for ProgressViewStyleModifier<CircularProgressViewStyle>, (void (*)(void))lazy protocol witness table accessor for type CircularProgressViewStyle and conformance CircularProgressViewStyle);
    uint64_t v7 = v6;
    type metadata accessor for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, _ConditionalContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>, ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>>>, MEMORY[0x1E4F40578]);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<CircularProgressViewStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, void (*a5)(void))
{
  type metadata accessor for ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, ProgressViewStyleModifier<LinearProgressViewStyle>>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1)
{
  type metadata accessor for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(0, &lazy cache variable for type metadata for ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, (uint64_t (*)(void, void *))type metadata accessor for ProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t AsyncImage.Inner.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  MEMORY[0x1F4188790](a1);
  uint64_t v3 = type metadata accessor for _UnaryViewAdaptor();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v14 - v8;
  unint64_t v11 = *v2;
  uint64_t v10 = (void (*)(unint64_t *))v2[1];
  unint64_t v15 = v11;
  outlined copy of AsyncImagePhase(v11);
  v10(&v15);
  outlined consume of AsyncImagePhase(v11);
  _UnaryViewAdaptor.init(_:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v3);
}

uint64_t destroy for ProgressView(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = v6 + ((v6 + v7) & ~v7);
  uint64_t v10 = 10;
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((unint64_t)(v9 + 1) > 0xA) {
    uint64_t v10 = v9 + 1;
  }
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  int v16 = *(_DWORD *)(v13 + 84);
  uint64_t v17 = *(void *)(v13 + 64);
  if (v16) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = v17 + 1;
  }
  uint64_t v19 = *(void *)(v11 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = *(void *)(v19 + 64);
  uint64_t v22 = v10 + v15 + 1;
  if (!*(_DWORD *)(v19 + 84)) {
    ++v21;
  }
  unint64_t v23 = v21 + ((v18 + v20 + (v22 & ~v15)) & ~v20);
  if (v23 <= 0x40) {
    unint64_t v23 = 64;
  }
  unsigned int v24 = a1[v23];
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *a1;
        if (v23 >= 4) {
          goto LABEL_28;
        }
        goto LABEL_20;
      case 2:
        int v27 = *(unsigned __int16 *)a1;
        if (v23 >= 4) {
          goto LABEL_28;
        }
        goto LABEL_20;
      case 3:
        int v27 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v23 < 4) {
          goto LABEL_20;
        }
        goto LABEL_28;
      case 4:
        int v27 = *(_DWORD *)a1;
        if (v23 < 4)
        {
LABEL_20:
          unsigned int v24 = (v27 | (v25 << (8 * v23))) + 2;
          break;
        }
LABEL_28:
        if (v27 != -1) {
          goto LABEL_29;
        }
        goto LABEL_22;
      default:
        break;
    }
  }
  if (v24 == 1)
  {
LABEL_22:

    if (*((void *)a1 + 4))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_release();
  }
  else
  {
LABEL_29:
    unsigned int v29 = a1[v10];
    unsigned int v30 = v29 - 2;
    if (v29 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v31 = v10;
      }
      else {
        uint64_t v31 = 4;
      }
      switch(v31)
      {
        case 1:
          int v32 = *a1;
          if (v10 < 4) {
            goto LABEL_39;
          }
          goto LABEL_41;
        case 2:
          int v32 = *(unsigned __int16 *)a1;
          if (v10 >= 4) {
            goto LABEL_41;
          }
          goto LABEL_39;
        case 3:
          int v32 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v10 < 4) {
            goto LABEL_39;
          }
          goto LABEL_41;
        case 4:
          int v32 = *(_DWORD *)a1;
          if (v10 < 4) {
LABEL_39:
          }
            unsigned int v29 = (v32 | (v30 << (8 * v10))) + 2;
          else {
LABEL_41:
          }
            unsigned int v29 = v32 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v45 = *(void *)(v11 - 8);
    uint64_t v33 = ~v15;
    if (v29 == 1)
    {
      uint64_t v43 = ~v7;
      uint64_t v44 = v18;
      int v34 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
      uint64_t v35 = v12;
      uint64_t v36 = v4;
      uint64_t v37 = v8;
      v34(a1, v4);
      unint64_t v38 = (unint64_t)&a1[v37];
      uint64_t v18 = v44;
      uint64_t v39 = v36;
      uint64_t v12 = v35;
      v34((unsigned __int8 *)(v38 & v43), v39);
    }
    unint64_t v40 = (unint64_t)&a1[v22] & v33;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))(v40, 1, v12)) {
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v40, v12);
    }
    unint64_t v41 = (v40 + v18 + v20) & ~v20;
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48))(v41, 1, v11);
    if (!result)
    {
      uint64_t v42 = *(uint64_t (**)(unint64_t, uint64_t))(v45 + 8);
      return v42(v41, v11);
    }
  }
  return result;
}

uint64_t outlined init with copy of ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t initializeWithCopy for ProgressView(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = ((v8 + v9) & ~v9) + v8;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  if ((unint64_t)(v11 + 1) > 0xA) {
    uint64_t v15 = v11 + 1;
  }
  else {
    uint64_t v15 = 10;
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = v15 + v17 + 1;
  int v19 = *(_DWORD *)(v14 + 84);
  size_t v20 = *(void *)(v14 + 64);
  if (v19) {
    size_t v21 = v20;
  }
  else {
    size_t v21 = v20 + 1;
  }
  uint64_t v22 = *(void *)(v12 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  size_t __n = v21;
  uint64_t v24 = (v21 + v23 + (v18 & ~v17)) & ~v23;
  if (*(_DWORD *)(v22 + 84)) {
    uint64_t v25 = *(void *)(*(void *)(v12 - 8) + 64);
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(v12 - 8) + 64) + 1;
  }
  if ((unint64_t)(v25 + v24) <= 0x40) {
    uint64_t v26 = 64;
  }
  else {
    uint64_t v26 = v25 + v24;
  }
  unsigned int v27 = a2[v26];
  unsigned int v28 = v27 - 2;
  if (v27 >= 2)
  {
    if (v26 <= 3) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 4;
    }
    switch(v29)
    {
      case 1:
        int v30 = *a2;
        if (v26 >= 4) {
          goto LABEL_30;
        }
        goto LABEL_21;
      case 2:
        int v30 = *(unsigned __int16 *)a2;
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_30;
      case 3:
        int v30 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v26 < 4) {
          goto LABEL_21;
        }
        goto LABEL_30;
      case 4:
        int v30 = *(_DWORD *)a2;
        if (v26 < 4)
        {
LABEL_21:
          unsigned int v27 = (v30 | (v28 << (8 * v26))) + 2;
          break;
        }
LABEL_30:
        if (v30 != -1) {
          goto LABEL_31;
        }
        goto LABEL_23;
      default:
        break;
    }
  }
  if (v27 == 1)
  {
LABEL_23:
    uint64_t v31 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v32 = *((void *)a2 + 4);
    id v33 = v31;
    if (v32)
    {
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(unsigned char *)(a1 + 16) = a2[16];
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = v32;
      uint64_t v34 = *((void *)a2 + 6);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = v34;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v35 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a1 + 24) = v35;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    }
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(unsigned char *)(a1 + v26) = 1;
    swift_retain();
  }
  else
  {
LABEL_31:
    unsigned int v36 = a2[v15];
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v38 = v15;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *a2;
          if (v15 < 4) {
            goto LABEL_39;
          }
          goto LABEL_43;
        case 2:
          int v39 = *(unsigned __int16 *)a2;
          if (v15 < 4) {
            goto LABEL_39;
          }
          goto LABEL_43;
        case 3:
          int v39 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v15 < 4) {
            goto LABEL_39;
          }
          goto LABEL_43;
        case 4:
          int v39 = *(_DWORD *)a2;
          if (v15 < 4) {
LABEL_39:
          }
            unsigned int v36 = (v39 | (v37 << (8 * v15))) + 2;
          else {
LABEL_43:
          }
            unsigned int v36 = v39 + 2;
          break;
        default:
          break;
      }
    }
    size_t v62 = v25;
    uint64_t v63 = *(void *)(a3 + 24);
    uint64_t v40 = ~v17;
    if (v36 == 1)
    {
      uint64_t v41 = ~v9;
      uint64_t v61 = v13;
      uint64_t v42 = *(void (**)(uint64_t, unsigned __int8 *))(v7 + 16);
      uint64_t v59 = v15 + v17 + 1;
      uint64_t v60 = *(void *)(v12 - 8);
      uint64_t v43 = v6;
      uint64_t v57 = v15;
      uint64_t v58 = v16;
      uint64_t v44 = v11;
      v42(a1, a2);
      uint64_t v45 = v43;
      uint64_t v22 = v60;
      ((void (*)(uint64_t, unint64_t, uint64_t))v42)((v10 + a1) & v41, (unint64_t)&a2[v10] & v41, v45);
      uint64_t v18 = v59;
      uint64_t v13 = v61;
      *(unsigned char *)(v44 + a1) = a2[v44];
      uint64_t v15 = v57;
      uint64_t v16 = v58;
      char v46 = 1;
    }
    else
    {
      char v46 = 0;
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    }
    uint64_t v47 = ~v23;
    *(unsigned char *)(a1 + v15) = v46;
    uint64_t v48 = (void *)((v18 + a1) & v40);
    uint64_t v49 = (char *)((unint64_t)&a2[v18] & v40);
    uint64_t v50 = v13;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v49, 1, v13))
    {
      size_t v51 = __n;
      memcpy(v48, v49, __n);
      uint64_t v52 = v63;
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v48, v49, v50);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v48, 0, 1, v50);
      uint64_t v52 = v63;
      size_t v51 = __n;
    }
    uint64_t v53 = &v49[v51];
    uint64_t v54 = (void *)(((unint64_t)v48 + v51 + v23) & v47);
    uint64_t v55 = (const void *)((unint64_t)&v53[v23] & v47);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v55, 1, v52))
    {
      memcpy(v54, v55, v62);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v22 + 16))(v54, v55, v52);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v54, 0, 1, v52);
    }
    *(unsigned char *)(a1 + v26) = 0;
  }
  return a1;
}